<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Galton Board</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/wolfgang/GaltonBoard/ejsDescription.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function GaltonBoard(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var N; // EjsS Model.Variables.Board Vars.N
  var npegs; // EjsS Model.Variables.Board Vars.npegs
  var x; // EjsS Model.Variables.Board Vars.x
  var y; // EjsS Model.Variables.Board Vars.y
  var p; // EjsS Model.Variables.Board Vars.p
  var num; // EjsS Model.Variables.Board Vars.num

  var highSpeed; // EjsS Model.Variables.Ball Vars.highSpeed
  var xball; // EjsS Model.Variables.Ball Vars.xball
  var yball; // EjsS Model.Variables.Ball Vars.yball

  var showDrawing; // EjsS Model.Variables.Drawing Vars.showDrawing
  var mainWidth; // EjsS Model.Variables.Drawing Vars.mainWidth
  var mainHeight; // EjsS Model.Variables.Drawing Vars.mainHeight
  var containerHeight; // EjsS Model.Variables.Drawing Vars.containerHeight
  var containerWidth; // EjsS Model.Variables.Drawing Vars.containerWidth
  var nHist; // EjsS Model.Variables.Drawing Vars.nHist
  var xHist; // EjsS Model.Variables.Drawing Vars.xHist
  var yHist; // EjsS Model.Variables.Drawing Vars.yHist

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      N : N,
      npegs : npegs,
      x : x,
      y : y,
      p : p,
      num : num,
      highSpeed : highSpeed,
      xball : xball,
      yball : yball,
      showDrawing : showDrawing,
      mainWidth : mainWidth,
      mainHeight : mainHeight,
      containerHeight : containerHeight,
      containerWidth : containerWidth,
      nHist : nHist,
      xHist : xHist,
      yHist : yHist
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.N != "undefined") N = json.N;
    if(typeof json.npegs != "undefined") npegs = json.npegs;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.p != "undefined") p = json.p;
    if(typeof json.num != "undefined") num = json.num;
    if(typeof json.highSpeed != "undefined") highSpeed = json.highSpeed;
    if(typeof json.xball != "undefined") xball = json.xball;
    if(typeof json.yball != "undefined") yball = json.yball;
    if(typeof json.showDrawing != "undefined") showDrawing = json.showDrawing;
    if(typeof json.mainWidth != "undefined") mainWidth = json.mainWidth;
    if(typeof json.mainHeight != "undefined") mainHeight = json.mainHeight;
    if(typeof json.containerHeight != "undefined") containerHeight = json.containerHeight;
    if(typeof json.containerWidth != "undefined") containerWidth = json.containerWidth;
    if(typeof json.nHist != "undefined") nHist = json.nHist;
    if(typeof json.xHist != "undefined") xHist = json.xHist;
    if(typeof json.yHist != "undefined") yHist = json.yHist;
  };

  _model._inputAndPublicParameters = ["N",  "npegs",  "x",  "y",  "p",  "num",  "highSpeed",  "xball",  "yball",  "showDrawing",  "mainWidth",  "mainHeight",  "containerHeight",  "containerWidth",  "nHist",  "xHist",  "yHist"]; 

  _model._outputAndPublicParameters = ["N",  "npegs",  "x",  "y",  "p",  "num",  "highSpeed",  "xball",  "yball",  "showDrawing",  "mainWidth",  "mainHeight",  "containerHeight",  "containerWidth",  "nHist",  "xHist",  "yHist"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Galton pegs"] = true;
    __pagesEnabled["Ball Bounce"] = true;
  });

  _model.addToReset(function() {
    N = 25; // EjsS Model.Variables.Board Vars.N
    npegs = N*(N+1)/2; // EjsS Model.Variables.Board Vars.npegs
    x = new Array(npegs); // EjsS Model.Variables.Board Vars.x
    (function () {
      var _i0;
      for (_i0=0; _i0<npegs; _i0+=1) {  // EjsS Model.Variables.Board Vars.x
        x[_i0] = 0;  // EjsS Model.Variables.Board Vars.x
      }
    }());
    y = new Array(npegs); // EjsS Model.Variables.Board Vars.y
    (function () {
      var _i0;
      for (_i0=0; _i0<npegs; _i0+=1) {  // EjsS Model.Variables.Board Vars.y
        y[_i0] = 0;  // EjsS Model.Variables.Board Vars.y
      }
    }());
    p = 0.5; // EjsS Model.Variables.Board Vars.p
    num = 0; // EjsS Model.Variables.Board Vars.num
  });

  _model.addToReset(function() {
    highSpeed = false; // EjsS Model.Variables.Ball Vars.highSpeed
    xball = 0; // EjsS Model.Variables.Ball Vars.xball
    yball = 0; // EjsS Model.Variables.Ball Vars.yball
  });

  _model.addToReset(function() {
    showDrawing = true; // EjsS Model.Variables.Drawing Vars.showDrawing
    mainWidth = "100%"; // EjsS Model.Variables.Drawing Vars.mainWidth
    mainHeight = "300px"; // EjsS Model.Variables.Drawing Vars.mainHeight
    containerHeight = "100%"; // EjsS Model.Variables.Drawing Vars.containerHeight
    containerWidth = "100%"; // EjsS Model.Variables.Drawing Vars.containerWidth
    nHist = 2*N+1; // EjsS Model.Variables.Drawing Vars.nHist
    xHist = new Array(nHist); // EjsS Model.Variables.Drawing Vars.xHist
    (function () {
      var _i0;
      for (_i0=0; _i0<nHist; _i0+=1) {  // EjsS Model.Variables.Drawing Vars.xHist
        xHist[_i0] = 0;  // EjsS Model.Variables.Drawing Vars.xHist
      }
    }());
    yHist = new Array(nHist); // EjsS Model.Variables.Drawing Vars.yHist
    (function () {
      var _i0;
      for (_i0=0; _i0<nHist; _i0+=1) {  // EjsS Model.Variables.Drawing Vars.yHist
        yHist[_i0] = 0;  // EjsS Model.Variables.Drawing Vars.yHist
      }
    }());
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(10);
    _model.setStepsPerDisplay(1);
  });

  function positionPegs() {  // > CustomCode.positionPegs:1
    for(var r=0, i=0; r<N; r++){  // iterate over the rows  // > CustomCode.positionPegs:2
      for(var c=0; c<=r; c++, i++){  // > CustomCode.positionPegs:3
        x[i]=2*c-r;  // > CustomCode.positionPegs:4
        y[i]=r;  // > CustomCode.positionPegs:5
      }  // > CustomCode.positionPegs:6
    }  // > CustomCode.positionPegs:7
  }  // > CustomCode.positionPegs:8

  function bounce () {  // > CustomCode.bounce:1
    yball++;  // > CustomCode.bounce:2
    if(yball<N){  // > CustomCode.bounce:3
      if(Math.random()<p){  // > CustomCode.bounce:4
        xball++;  // > CustomCode.bounce:5
      }else{  // > CustomCode.bounce:6
        xball--;  // > CustomCode.bounce:7
      }  // > CustomCode.bounce:8
    }else{  // > CustomCode.bounce:9
      yHist[Math.round(xball+N)]++;  // > CustomCode.bounce:10
      num++;  // > CustomCode.bounce:11
      xball=0;  // > CustomCode.bounce:12
      yball=0;  // > CustomCode.bounce:13
      _view.trace.clear();  // > CustomCode.bounce:14
    }  // > CustomCode.bounce:15
  }  // > CustomCode.bounce:16

  function changeN () {  // > CustomCode.changeN:1
    N=Math.min(100,N);  // > CustomCode.changeN:2
    N=Math.max(N,2);  // > CustomCode.changeN:3
    npegs=N*(N+1)/2;  // > CustomCode.changeN:4
    x= new Array(npegs);  // > CustomCode.changeN:5
    y= new Array(npegs);  // > CustomCode.changeN:6
    xball=0;  // > CustomCode.changeN:7
    yball=0;  // > CustomCode.changeN:8
    _view.trace.clear();  // > CustomCode.changeN:9
    nHist=2*N+1;  // > CustomCode.changeN:10
    xHist= new Array(nHist);  // > CustomCode.changeN:11
    yHist= new Array(nHist);  // > CustomCode.changeN:12
    initHist();  // > CustomCode.changeN:13
    positionPegs();  // > CustomCode.changeN:14
  }  // > CustomCode.changeN:15
  function initHist(){  // > CustomCode.changeN:16
    for(var i=-N; i<N; i++){  // > CustomCode.changeN:17
     xHist[i+N]=i;  // > CustomCode.changeN:18
     yHist[i+N]=0;     // > CustomCode.changeN:19
    }   // > CustomCode.changeN:20
  }  // > CustomCode.changeN:21

  function changP () {  // > CustomCode.changP:1
    p=Math.max(0,p);  // > CustomCode.changP:2
    p=Math.min(1,p);  // > CustomCode.changP:3
    xball=0;  // > CustomCode.changP:4
    yball=0;  // > CustomCode.changP:5
    _view.trace.clear();  // > CustomCode.changP:6
    initHist();  // > CustomCode.changP:7
  }  // > CustomCode.changP:8

  function switchView () {  // > CustomCode.Switch View:1
    if (showDrawing) {  // > CustomCode.Switch View:2
      _view.containerPanel.setProperty("CSS", {  // > CustomCode.Switch View:3
        "display" : "block",  // > CustomCode.Switch View:4
        "position":"absolute",  // > CustomCode.Switch View:5
        "top":"-5%",  // > CustomCode.Switch View:6
        "left":"65%"} );  // > CustomCode.Switch View:7
      _view.histogramPanel.setProperty("CSS", {"display" : "block"});  // > CustomCode.Switch View:8
      mainWidth=(_isMobile||_isEPub)?"375px":"450px";  // > CustomCode.Switch View:9
      mainHeight="350px";  // > CustomCode.Switch View:10
      containerWidth=(_isMobile||_isEPub)?"150px":"175px";  // > CustomCode.Switch View:11
      containerHeight=(_isMobile||_isEPub)?"150px":"175px";  // > CustomCode.Switch View:12
    } else {  // > CustomCode.Switch View:13
      _view.containerPanel.setProperty("CSS", {  // > CustomCode.Switch View:14
        "display":"block",  // > CustomCode.Switch View:15
        "position":"relative",  // > CustomCode.Switch View:16
        "top":"0px",  // > CustomCode.Switch View:17
        "left":"0px"});  // > CustomCode.Switch View:18
      _view.histogramPanel.setProperty("CSS", { "display" : "none"});  // > CustomCode.Switch View:19
      mainWidth="400px";  // > CustomCode.Switch View:20
      mainHeight="350px";  // > CustomCode.Switch View:21
      containerWidth="400px";  // > CustomCode.Switch View:22
      containerHeight="350px";  // > CustomCode.Switch View:23
    }  // > CustomCode.Switch View:24
    _view.histogramPanel.scale();  // > CustomCode.Switch View:25
    _view.drawingPanel.scale();  // > CustomCode.Switch View:26
  }  // > CustomCode.Switch View:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Galton pegs"]) return;
    var xAxis = _view.histogramPanel.getAxisX();  // > Initialization.Init Galton pegs:1
    xAxis.setAutoTicks(false);  // > Initialization.Init Galton pegs:2
    xAxis.setTicks(6);  // > Initialization.Init Galton pegs:3
    xAxis.setScalePrecision(0); // gives 0 decimal points.  // > Initialization.Init Galton pegs:4
    var yAxis = _view.histogramPanel.getAxisY();  // > Initialization.Init Galton pegs:5
    yAxis.setAutoTicks(false);  // > Initialization.Init Galton pegs:6
    yAxis.setTicks(6);  // > Initialization.Init Galton pegs:7
    yAxis.setScalePrecision(0); // gives 0 decimal points.  // > Initialization.Init Galton pegs:8
    positionPegs();  // > Initialization.Init Galton pegs:9
    initHist();  // > Initialization.Init Galton pegs:10
    switchView ();  // > Initialization.Init Galton pegs:11
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Ball Bounce"]) return;
    if(highSpeed){  // > Evolution.Ball Bounce:1
      var n=10*N;  // > Evolution.Ball Bounce:2
      do{  // > Evolution.Ball Bounce:3
        _view.trace.addPoint(xball,yball);  // > Evolution.Ball Bounce:4
        bounce();  // > Evolution.Ball Bounce:5
        n--;  // > Evolution.Ball Bounce:6
      }while(n>0 || yball!=N-1);  // > Evolution.Ball Bounce:7
    }else{  // > Evolution.Ball Bounce:8
      bounce();  // > Evolution.Ball Bounce:9
    }  // > Evolution.Ball Bounce:10
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new GaltonBoard_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.mainPanel.linkProperty("Height",  function() { return mainHeight; }, function(_v) { mainHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'mainPanel'
          _view.histogramPanel.linkProperty("MaximumX",  function() { return N; }, function(_v) { N = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'histogramPanel'
          _view.histogramPanel.linkProperty("TRMessage",  function() { return "xHist="+xHist+"\nyHist="+yHist; } ); // HtmlView Page linking property 'TRMessage' for element 'histogramPanel'
          _view.histogramPanel.linkProperty("MinimumX",  function() { return -N; } ); // HtmlView Page linking property 'MinimumX' for element 'histogramPanel'
          _view.shapeSet.linkProperty("NumberOfElements",  function() { return nHist; }, function(_v) { nHist = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSet'
          _view.shapeSet.linkProperty("X",  function() { return xHist; }, function(_v) { xHist = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeY",  function() { return yHist; }, function(_v) { yHist = _v; } ); // HtmlView Page linking property 'SizeY' for element 'shapeSet'
          _view.drawingPanel.linkProperty("MinimumX",  function() { return -N; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumY",  function() { return N; }, function(_v) { N = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumX",  function() { return N; }, function(_v) { N = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel'
          _view.ballSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'ballSet'
          _view.ballSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'ballSet'
          _view.trace.linkProperty("InputX",  function() { return xball; }, function(_v) { xball = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return yball; }, function(_v) { yball = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace'
          _view.ball.linkProperty("X",  function() { return xball; }, function(_v) { xball = _v; } ); // HtmlView Page linking property 'X' for element 'ball'
          _view.ball.linkProperty("Y",  function() { return yball; }, function(_v) { yball = _v; } ); // HtmlView Page linking property 'Y' for element 'ball'
          _view.containerPanel.linkProperty("Height",  function() { return containerHeight; }, function(_v) { containerHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'containerPanel'
          _view.containerPanel.linkProperty("Width",  function() { return containerWidth; }, function(_v) { containerWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'containerPanel'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.stepButton.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.resetButton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.pField.linkProperty("Value",  function() { return p; }, function(_v) { p = _v; } ); // HtmlView Page linking property 'Value' for element 'pField'
          _view.pField.setAction("OnChange", changP); // HtmlView Page setting action 'OnChange' for element 'pField'
          _view.speedCheck.linkProperty("Checked",  function() { return highSpeed; }, function(_v) { highSpeed = _v; } ); // HtmlView Page linking property 'Checked' for element 'speedCheck'
          _view.graphCheck.linkProperty("Checked",  function() { return showDrawing; }, function(_v) { showDrawing = _v; } ); // HtmlView Page linking property 'Checked' for element 'graphCheck'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(10);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function GaltonBoard_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = GaltonBoard_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Galton Board','./GaltonBoard/GaltonBoard.xhtml');

  return _view;
} // end of main function

function GaltonBoard_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"simPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'simPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'simPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.simPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelTitle", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelTitle'
      .setProperty("Foreground","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'labelTitle'
      .setProperty("Text","<h1>Galton Board</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelTitle'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"mainPanel", _view.simPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mainPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'mainPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"histogramPanel", _view.mainPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'histogramPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'histogramPanel'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'histogramPanel'
      .setProperty("Title","Occurance Histogram") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'histogramPanel'
      .setProperty("MaximumY",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'histogramPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'histogramPanel'
      .setProperty("TitleY","occurance") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'histogramPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'histogramPanel'
      .setProperty("TitleX","x") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'histogramPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'histogramPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet", _view.histogramPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSet'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSet'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSet'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shapeSet'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSet'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shapeSet'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shapeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.mainPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("MaximumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"ballSet", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ballSet'
      .setProperty("SizeX",0.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ballSet'
      .setProperty("SizeY",0.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ballSet'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("Connected",true) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trace'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trace'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ball", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ball'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ball'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ball'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ball'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'ball'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"containerPanel", _view.mainPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'containerPanel'
      .setProperty("CSS",{ "position":"absolute",   "top":"-5%",   "left":"65%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'containerPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.simPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"buttonPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'buttonPanel'
      .setProperty("Width",200) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'buttonPanel'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'buttonPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.buttonPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.buttonPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.buttonPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"ioPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ioPanel'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'ioPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"leftLabel", _view.ioPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'leftLabel'
      .setProperty("Text","p = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'leftLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"pField", _view.ioPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'pField'
      .setProperty("Width",40) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'pField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'pField'
      .setProperty("Tooltip","probability p of bouncing to the left") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'pField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"checkPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'checkPanel'
      .setProperty("CSS",{"display":"inline-block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'checkPanel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"speedCheck", _view.checkPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'speedCheck'
      .setProperty("Text","High speed:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'speedCheck'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"graphCheck", _view.checkPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'graphCheck'
      .setProperty("Tooltip","Show histogram") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'graphCheck'
      .setProperty("Text","Histogram") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'graphCheck'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"textPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'textPanel'
      .setProperty("Html","<h2>Theory</h2> <p>A <a target=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Galton_board\">Galton board </a>is a vertical board with <i>N</i> rows of pegs onto which a ball is dropped. Each time a ball hits a peg, it has a probability <i>p</i> of bouncing to the left and a probability of 1<i>-p</i> of bouncing to the right.The simulation's histogram shows the distribution of final x-coordinates as each ball leaves the board and is collected into bins.</p> <p>The simulation gives rise to the <a target=\"wikipedia\" href=\"http://en.wikipedia.org/wiki/Binomial_distribution\">binomial distribution</a> if the probabilities of left and right bounces are equal. At first there does not seem to be any pattern but after many trials the familiar \"bell curve\" shape begins to emerge.</p> <h2>Exercises:</h2> <ol> <li>When there are N pegs on the bottom row, the probability of the ball landing at the nth peg (where the 0th peg is located to the far left in the diagram and the Nth peg is at the far right) is given by the Binomial distribution: <br /> <div style=\"margin-left: 40px;\">P<sub>N</sub>(n) = (N!/n!(N-n)!)p<sup>n</sup> (1-p)<sup>N-n</sup>. </div> <br /> Run the simulation on \"high speed\" for a while to build the histogram and compare the fraction of balls that arrive at a given peg with the probability given by the Binomial distribution.</li> <li>If you have EjsS installed, add an additional custom method to display the results of the Binomial distribution on the histogram for comparison. Note that for large values of the factorial (greater than 10!), you should use the Stirling approximation (or some other way of handling the large values of factorials since 25! uses 26 digits: <a href=\"http://wiki.compsci.ca/index.php?title=Java_Big_Integers#Example_Program\" >see Computer Science wiki</a>):<br /> <div style=\"margin-left: 40px;\">lnN! = NlnN - N + ln(2&#960;N)<sup>1/2</sup><br /> </div> Compare the simulation to the Binomial distribution. </li> </ol>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'textPanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Galton Board<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/wolfgang/GaltonBoard/Galton_icon.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/wolfgang/images/WC_logo.png" />
 Wolfgang Christian
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Wolfgang Christian.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new GaltonBoard("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/wolfgang/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
