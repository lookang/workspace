<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Physics Frogger</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function pvg_frogger(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var displayScale; // EjsS Model.Variables.World.displayScale
  var factorTo10; // EjsS Model.Variables.World.factorTo10
  var xMin; // EjsS Model.Variables.World.xMin
  var xMax; // EjsS Model.Variables.World.xMax
  var xRange; // EjsS Model.Variables.World.xRange
  var yMin; // EjsS Model.Variables.World.yMin
  var yMax; // EjsS Model.Variables.World.yMax
  var yRange; // EjsS Model.Variables.World.yRange
  var xMiddle; // EjsS Model.Variables.World.xMiddle
  var yMiddle; // EjsS Model.Variables.World.yMiddle
  var time; // EjsS Model.Variables.World.time
  var deltaTime; // EjsS Model.Variables.World.deltaTime
  var maxTime; // EjsS Model.Variables.World.maxTime
  var counter; // EjsS Model.Variables.World.counter
  var running; // EjsS Model.Variables.World.running
  var gameOver; // EjsS Model.Variables.World.gameOver
  var replay; // EjsS Model.Variables.World.replay
  var randomGenerator; // EjsS Model.Variables.World.randomGenerator

  var SHOW_SCORES; // EjsS Model.Variables.Display.SHOW_SCORES
  var SHOW_AUTOPLAY; // EjsS Model.Variables.Display.SHOW_AUTOPLAY
  var FULL_AUTOPLAY; // EjsS Model.Variables.Display.FULL_AUTOPLAY
  var NO_MOVE; // EjsS Model.Variables.Display.NO_MOVE
  var LEFT_MOVE; // EjsS Model.Variables.Display.LEFT_MOVE
  var RIGHT_MOVE; // EjsS Model.Variables.Display.RIGHT_MOVE
  var DOWN_MOVE; // EjsS Model.Variables.Display.DOWN_MOVE
  var UP_MOVE; // EjsS Model.Variables.Display.UP_MOVE
  var rows; // EjsS Model.Variables.Display.rows
  var rowHeight; // EjsS Model.Variables.Display.rowHeight
  var rowBorder; // EjsS Model.Variables.Display.rowBorder
  var tol; // EjsS Model.Variables.Display.tol
  var roadHeight; // EjsS Model.Variables.Display.roadHeight
  var sandHeight; // EjsS Model.Variables.Display.sandHeight
  var roadBottom; // EjsS Model.Variables.Display.roadBottom
  var waterHeight; // EjsS Model.Variables.Display.waterHeight
  var sandBottom; // EjsS Model.Variables.Display.sandBottom
  var waterBottom; // EjsS Model.Variables.Display.waterBottom
  var waterTop; // EjsS Model.Variables.Display.waterTop

  var messageY; // EjsS Model.Variables.Instructions.messageY
  var scoreY; // EjsS Model.Variables.Instructions.scoreY
  var actionsY; // EjsS Model.Variables.Instructions.actionsY
  var resetX; // EjsS Model.Variables.Instructions.resetX
  var replayX; // EjsS Model.Variables.Instructions.replayX
  var autoplayX; // EjsS Model.Variables.Instructions.autoplayX
  var startMessage; // EjsS Model.Variables.Instructions.startMessage
  var playAgainMessage; // EjsS Model.Variables.Instructions.playAgainMessage
  var gameWonMessage; // EjsS Model.Variables.Instructions.gameWonMessage
  var gameTiedMessage; // EjsS Model.Variables.Instructions.gameTiedMessage
  var gameRecordMessage; // EjsS Model.Variables.Instructions.gameRecordMessage
  var gameLostMessage; // EjsS Model.Variables.Instructions.gameLostMessage
  var gameOverMessage; // EjsS Model.Variables.Instructions.gameOverMessage
  var gameResultMessage; // EjsS Model.Variables.Instructions.gameResultMessage
  var message; // EjsS Model.Variables.Instructions.message
  var DEAD_ON_ROAD; // EjsS Model.Variables.Instructions.DEAD_ON_ROAD
  var DEAD_ON_WATER; // EjsS Model.Variables.Instructions.DEAD_ON_WATER
  var SAFE_ON_LILLY; // EjsS Model.Variables.Instructions.SAFE_ON_LILLY
  var SAFE_ON_PREFERRED_LILLY; // EjsS Model.Variables.Instructions.SAFE_ON_PREFERRED_LILLY
  var score; // EjsS Model.Variables.Instructions.score
  var bestScore; // EjsS Model.Variables.Instructions.bestScore
  var bestTime; // EjsS Model.Variables.Instructions.bestTime
  var scoreText; // EjsS Model.Variables.Instructions.scoreText
  var recordText; // EjsS Model.Variables.Instructions.recordText
  var autoplayOption; // EjsS Model.Variables.Instructions.autoplayOption
  var autoplayText; // EjsS Model.Variables.Instructions.autoplayText
  var userAutoplayShowDialog; // EjsS Model.Variables.Instructions.userAutoplayShowDialog
  var userAutoplayString; // EjsS Model.Variables.Instructions.userAutoplayString
  var userAutoplayFunction; // EjsS Model.Variables.Instructions.userAutoplayFunction
  var optimalJumps; // EjsS Model.Variables.Instructions.optimalJumps
  var boatInPlace; // EjsS Model.Variables.Instructions.boatInPlace
  var willKillYou; // EjsS Model.Variables.Instructions.willKillYou
  var willDie; // EjsS Model.Variables.Instructions.willDie

  var frogInitial; // EjsS Model.Variables.Frog.frogInitial
  var frogLastPos; // EjsS Model.Variables.Frog.frogLastPos
  var frogPos; // EjsS Model.Variables.Frog.frogPos
  var frogVx; // EjsS Model.Variables.Frog.frogVx
  var frogJumpSize; // EjsS Model.Variables.Frog.frogJumpSize
  var smfrogimage; // EjsS Model.Variables.Frog.smfrogimage
  var medfrogimage; // EjsS Model.Variables.Frog.medfrogimage
  var deadImage; // EjsS Model.Variables.Frog.deadImage
  var drownImage; // EjsS Model.Variables.Frog.drownImage
  var frogimage; // EjsS Model.Variables.Frog.frogimage
  var frogWidth; // EjsS Model.Variables.Frog.frogWidth
  var frogHeight; // EjsS Model.Variables.Frog.frogHeight
  var frogAngle; // EjsS Model.Variables.Frog.frogAngle

  var numPonds; // EjsS Model.Variables.Ponds & Pads.numPonds
  var pondX; // EjsS Model.Variables.Ponds & Pads.pondX
  var pondY; // EjsS Model.Variables.Ponds & Pads.pondY
  var pondWidth; // EjsS Model.Variables.Ponds & Pads.pondWidth
  var pondHeight; // EjsS Model.Variables.Ponds & Pads.pondHeight
  var numPads; // EjsS Model.Variables.Ponds & Pads.numPads
  var padImage; // EjsS Model.Variables.Ponds & Pads.padImage
  var padX; // EjsS Model.Variables.Ponds & Pads.padX
  var padY; // EjsS Model.Variables.Ponds & Pads.padY
  var padWidth; // EjsS Model.Variables.Ponds & Pads.padWidth
  var padHeight; // EjsS Model.Variables.Ponds & Pads.padHeight
  var padPreferred; // EjsS Model.Variables.Ponds & Pads.padPreferred

  var numRaceCars; // EjsS Model.Variables.Cars.numRaceCars
  var raceCarX; // EjsS Model.Variables.Cars.raceCarX
  var raceCarY; // EjsS Model.Variables.Cars.raceCarY
  var raceCarVx; // EjsS Model.Variables.Cars.raceCarVx
  var raceCarHeight; // EjsS Model.Variables.Cars.raceCarHeight
  var raceCarWidth; // EjsS Model.Variables.Cars.raceCarWidth
  var raceCarSpacing; // EjsS Model.Variables.Cars.raceCarSpacing
  var numYellowCars; // EjsS Model.Variables.Cars.numYellowCars
  var yellowCarX; // EjsS Model.Variables.Cars.yellowCarX
  var yellowCarY; // EjsS Model.Variables.Cars.yellowCarY
  var yellowCarVx; // EjsS Model.Variables.Cars.yellowCarVx
  var yellowCarHeight; // EjsS Model.Variables.Cars.yellowCarHeight
  var yellowCarWidth; // EjsS Model.Variables.Cars.yellowCarWidth
  var yellowCarSpacing; // EjsS Model.Variables.Cars.yellowCarSpacing
  var numRedCars; // EjsS Model.Variables.Cars.numRedCars
  var redCarX; // EjsS Model.Variables.Cars.redCarX
  var redCarY; // EjsS Model.Variables.Cars.redCarY
  var redCarVx; // EjsS Model.Variables.Cars.redCarVx
  var redCarHeight; // EjsS Model.Variables.Cars.redCarHeight
  var redCarWidth; // EjsS Model.Variables.Cars.redCarWidth
  var redCarSpacing; // EjsS Model.Variables.Cars.redCarSpacing

  var numTrucks; // EjsS Model.Variables.Trucks & Bikes.numTrucks
  var truckX; // EjsS Model.Variables.Trucks & Bikes.truckX
  var truckY; // EjsS Model.Variables.Trucks & Bikes.truckY
  var truckVx; // EjsS Model.Variables.Trucks & Bikes.truckVx
  var truckHeight; // EjsS Model.Variables.Trucks & Bikes.truckHeight
  var truckWidth; // EjsS Model.Variables.Trucks & Bikes.truckWidth
  var truckSpacing; // EjsS Model.Variables.Trucks & Bikes.truckSpacing
  var numBikes; // EjsS Model.Variables.Trucks & Bikes.numBikes
  var bikeX; // EjsS Model.Variables.Trucks & Bikes.bikeX
  var bikeY; // EjsS Model.Variables.Trucks & Bikes.bikeY
  var bikeVx; // EjsS Model.Variables.Trucks & Bikes.bikeVx
  var bikeHeight; // EjsS Model.Variables.Trucks & Bikes.bikeHeight
  var bikeWidth; // EjsS Model.Variables.Trucks & Bikes.bikeWidth
  var bikeSpacing; // EjsS Model.Variables.Trucks & Bikes.bikeSpacing

  var numMapleLogs; // EjsS Model.Variables.Logs & Boats.numMapleLogs
  var mapleLogX; // EjsS Model.Variables.Logs & Boats.mapleLogX
  var mapleLogY; // EjsS Model.Variables.Logs & Boats.mapleLogY
  var mapleLogVx; // EjsS Model.Variables.Logs & Boats.mapleLogVx
  var mapleLogHeight; // EjsS Model.Variables.Logs & Boats.mapleLogHeight
  var mapleLogWidth; // EjsS Model.Variables.Logs & Boats.mapleLogWidth
  var mapleLogSpacing; // EjsS Model.Variables.Logs & Boats.mapleLogSpacing
  var numOakLogs; // EjsS Model.Variables.Logs & Boats.numOakLogs
  var oakLogX; // EjsS Model.Variables.Logs & Boats.oakLogX
  var oakLogY; // EjsS Model.Variables.Logs & Boats.oakLogY
  var oakLogVx; // EjsS Model.Variables.Logs & Boats.oakLogVx
  var oakLogHeight; // EjsS Model.Variables.Logs & Boats.oakLogHeight
  var oakLogWidth; // EjsS Model.Variables.Logs & Boats.oakLogWidth
  var oakLogSpacing; // EjsS Model.Variables.Logs & Boats.oakLogSpacing
  var numBoats; // EjsS Model.Variables.Logs & Boats.numBoats
  var boatX; // EjsS Model.Variables.Logs & Boats.boatX
  var boatY; // EjsS Model.Variables.Logs & Boats.boatY
  var boatVx; // EjsS Model.Variables.Logs & Boats.boatVx
  var boatHeight; // EjsS Model.Variables.Logs & Boats.boatHeight
  var boatWidth; // EjsS Model.Variables.Logs & Boats.boatWidth
  var boatXmin; // EjsS Model.Variables.Logs & Boats.boatXmin
  var boatXmax; // EjsS Model.Variables.Logs & Boats.boatXmax
  var boatSpacing; // EjsS Model.Variables.Logs & Boats.boatSpacing

  var numFishGroups; // EjsS Model.Variables.Fish & Turtles.numFishGroups
  var numFishPerGroup; // EjsS Model.Variables.Fish & Turtles.numFishPerGroup
  var numFish; // EjsS Model.Variables.Fish & Turtles.numFish
  var fishX; // EjsS Model.Variables.Fish & Turtles.fishX
  var fishY; // EjsS Model.Variables.Fish & Turtles.fishY
  var fishVx; // EjsS Model.Variables.Fish & Turtles.fishVx
  var fishHeight; // EjsS Model.Variables.Fish & Turtles.fishHeight
  var fishWidth; // EjsS Model.Variables.Fish & Turtles.fishWidth
  var fishSpacing; // EjsS Model.Variables.Fish & Turtles.fishSpacing
  var fishImageSwim1; // EjsS Model.Variables.Fish & Turtles.fishImageSwim1
  var fishImageSwim2; // EjsS Model.Variables.Fish & Turtles.fishImageSwim2
  var fishImage; // EjsS Model.Variables.Fish & Turtles.fishImage
  var numTurtleGroups; // EjsS Model.Variables.Fish & Turtles.numTurtleGroups
  var numTurtlesPerGroup; // EjsS Model.Variables.Fish & Turtles.numTurtlesPerGroup
  var numTurtles; // EjsS Model.Variables.Fish & Turtles.numTurtles
  var turtleX; // EjsS Model.Variables.Fish & Turtles.turtleX
  var turtleY; // EjsS Model.Variables.Fish & Turtles.turtleY
  var turtleVx; // EjsS Model.Variables.Fish & Turtles.turtleVx
  var turtleHeight; // EjsS Model.Variables.Fish & Turtles.turtleHeight
  var turtleWidth; // EjsS Model.Variables.Fish & Turtles.turtleWidth
  var turtleSpacing; // EjsS Model.Variables.Fish & Turtles.turtleSpacing
  var turtleImage1; // EjsS Model.Variables.Fish & Turtles.turtleImage1
  var turtleImage2; // EjsS Model.Variables.Fish & Turtles.turtleImage2
  var turtleImage3; // EjsS Model.Variables.Fish & Turtles.turtleImage3
  var turtleImage; // EjsS Model.Variables.Fish & Turtles.turtleImage

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      displayScale : displayScale,
      factorTo10 : factorTo10,
      xMin : xMin,
      xMax : xMax,
      xRange : xRange,
      yMin : yMin,
      yMax : yMax,
      yRange : yRange,
      xMiddle : xMiddle,
      yMiddle : yMiddle,
      time : time,
      deltaTime : deltaTime,
      maxTime : maxTime,
      counter : counter,
      running : running,
      gameOver : gameOver,
      replay : replay,
      randomGenerator : randomGenerator,
      SHOW_SCORES : SHOW_SCORES,
      SHOW_AUTOPLAY : SHOW_AUTOPLAY,
      FULL_AUTOPLAY : FULL_AUTOPLAY,
      NO_MOVE : NO_MOVE,
      LEFT_MOVE : LEFT_MOVE,
      RIGHT_MOVE : RIGHT_MOVE,
      DOWN_MOVE : DOWN_MOVE,
      UP_MOVE : UP_MOVE,
      rows : rows,
      rowHeight : rowHeight,
      rowBorder : rowBorder,
      tol : tol,
      roadHeight : roadHeight,
      sandHeight : sandHeight,
      roadBottom : roadBottom,
      waterHeight : waterHeight,
      sandBottom : sandBottom,
      waterBottom : waterBottom,
      waterTop : waterTop,
      messageY : messageY,
      scoreY : scoreY,
      actionsY : actionsY,
      resetX : resetX,
      replayX : replayX,
      autoplayX : autoplayX,
      startMessage : startMessage,
      playAgainMessage : playAgainMessage,
      gameWonMessage : gameWonMessage,
      gameTiedMessage : gameTiedMessage,
      gameRecordMessage : gameRecordMessage,
      gameLostMessage : gameLostMessage,
      gameOverMessage : gameOverMessage,
      gameResultMessage : gameResultMessage,
      message : message,
      DEAD_ON_ROAD : DEAD_ON_ROAD,
      DEAD_ON_WATER : DEAD_ON_WATER,
      SAFE_ON_LILLY : SAFE_ON_LILLY,
      SAFE_ON_PREFERRED_LILLY : SAFE_ON_PREFERRED_LILLY,
      score : score,
      bestScore : bestScore,
      bestTime : bestTime,
      scoreText : scoreText,
      recordText : recordText,
      autoplayOption : autoplayOption,
      autoplayText : autoplayText,
      userAutoplayShowDialog : userAutoplayShowDialog,
      userAutoplayString : userAutoplayString,
      userAutoplayFunction : userAutoplayFunction,
      optimalJumps : optimalJumps,
      boatInPlace : boatInPlace,
      willKillYou : willKillYou,
      willDie : willDie,
      frogInitial : frogInitial,
      frogLastPos : frogLastPos,
      frogPos : frogPos,
      frogVx : frogVx,
      frogJumpSize : frogJumpSize,
      smfrogimage : smfrogimage,
      medfrogimage : medfrogimage,
      deadImage : deadImage,
      drownImage : drownImage,
      frogimage : frogimage,
      frogWidth : frogWidth,
      frogHeight : frogHeight,
      frogAngle : frogAngle,
      numPonds : numPonds,
      pondX : pondX,
      pondY : pondY,
      pondWidth : pondWidth,
      pondHeight : pondHeight,
      numPads : numPads,
      padImage : padImage,
      padX : padX,
      padY : padY,
      padWidth : padWidth,
      padHeight : padHeight,
      padPreferred : padPreferred,
      numRaceCars : numRaceCars,
      raceCarX : raceCarX,
      raceCarY : raceCarY,
      raceCarVx : raceCarVx,
      raceCarHeight : raceCarHeight,
      raceCarWidth : raceCarWidth,
      raceCarSpacing : raceCarSpacing,
      numYellowCars : numYellowCars,
      yellowCarX : yellowCarX,
      yellowCarY : yellowCarY,
      yellowCarVx : yellowCarVx,
      yellowCarHeight : yellowCarHeight,
      yellowCarWidth : yellowCarWidth,
      yellowCarSpacing : yellowCarSpacing,
      numRedCars : numRedCars,
      redCarX : redCarX,
      redCarY : redCarY,
      redCarVx : redCarVx,
      redCarHeight : redCarHeight,
      redCarWidth : redCarWidth,
      redCarSpacing : redCarSpacing,
      numTrucks : numTrucks,
      truckX : truckX,
      truckY : truckY,
      truckVx : truckVx,
      truckHeight : truckHeight,
      truckWidth : truckWidth,
      truckSpacing : truckSpacing,
      numBikes : numBikes,
      bikeX : bikeX,
      bikeY : bikeY,
      bikeVx : bikeVx,
      bikeHeight : bikeHeight,
      bikeWidth : bikeWidth,
      bikeSpacing : bikeSpacing,
      numMapleLogs : numMapleLogs,
      mapleLogX : mapleLogX,
      mapleLogY : mapleLogY,
      mapleLogVx : mapleLogVx,
      mapleLogHeight : mapleLogHeight,
      mapleLogWidth : mapleLogWidth,
      mapleLogSpacing : mapleLogSpacing,
      numOakLogs : numOakLogs,
      oakLogX : oakLogX,
      oakLogY : oakLogY,
      oakLogVx : oakLogVx,
      oakLogHeight : oakLogHeight,
      oakLogWidth : oakLogWidth,
      oakLogSpacing : oakLogSpacing,
      numBoats : numBoats,
      boatX : boatX,
      boatY : boatY,
      boatVx : boatVx,
      boatHeight : boatHeight,
      boatWidth : boatWidth,
      boatXmin : boatXmin,
      boatXmax : boatXmax,
      boatSpacing : boatSpacing,
      numFishGroups : numFishGroups,
      numFishPerGroup : numFishPerGroup,
      numFish : numFish,
      fishX : fishX,
      fishY : fishY,
      fishVx : fishVx,
      fishHeight : fishHeight,
      fishWidth : fishWidth,
      fishSpacing : fishSpacing,
      fishImageSwim1 : fishImageSwim1,
      fishImageSwim2 : fishImageSwim2,
      fishImage : fishImage,
      numTurtleGroups : numTurtleGroups,
      numTurtlesPerGroup : numTurtlesPerGroup,
      numTurtles : numTurtles,
      turtleX : turtleX,
      turtleY : turtleY,
      turtleVx : turtleVx,
      turtleHeight : turtleHeight,
      turtleWidth : turtleWidth,
      turtleSpacing : turtleSpacing,
      turtleImage1 : turtleImage1,
      turtleImage2 : turtleImage2,
      turtleImage3 : turtleImage3,
      turtleImage : turtleImage
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.displayScale != "undefined") displayScale = json.displayScale;
    if(typeof json.factorTo10 != "undefined") factorTo10 = json.factorTo10;
    if(typeof json.xMin != "undefined") xMin = json.xMin;
    if(typeof json.xMax != "undefined") xMax = json.xMax;
    if(typeof json.xRange != "undefined") xRange = json.xRange;
    if(typeof json.yMin != "undefined") yMin = json.yMin;
    if(typeof json.yMax != "undefined") yMax = json.yMax;
    if(typeof json.yRange != "undefined") yRange = json.yRange;
    if(typeof json.xMiddle != "undefined") xMiddle = json.xMiddle;
    if(typeof json.yMiddle != "undefined") yMiddle = json.yMiddle;
    if(typeof json.time != "undefined") time = json.time;
    if(typeof json.deltaTime != "undefined") deltaTime = json.deltaTime;
    if(typeof json.maxTime != "undefined") maxTime = json.maxTime;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.running != "undefined") running = json.running;
    if(typeof json.gameOver != "undefined") gameOver = json.gameOver;
    if(typeof json.replay != "undefined") replay = json.replay;
    if(typeof json.randomGenerator != "undefined") randomGenerator = json.randomGenerator;
    if(typeof json.SHOW_SCORES != "undefined") SHOW_SCORES = json.SHOW_SCORES;
    if(typeof json.SHOW_AUTOPLAY != "undefined") SHOW_AUTOPLAY = json.SHOW_AUTOPLAY;
    if(typeof json.FULL_AUTOPLAY != "undefined") FULL_AUTOPLAY = json.FULL_AUTOPLAY;
    if(typeof json.NO_MOVE != "undefined") NO_MOVE = json.NO_MOVE;
    if(typeof json.LEFT_MOVE != "undefined") LEFT_MOVE = json.LEFT_MOVE;
    if(typeof json.RIGHT_MOVE != "undefined") RIGHT_MOVE = json.RIGHT_MOVE;
    if(typeof json.DOWN_MOVE != "undefined") DOWN_MOVE = json.DOWN_MOVE;
    if(typeof json.UP_MOVE != "undefined") UP_MOVE = json.UP_MOVE;
    if(typeof json.rows != "undefined") rows = json.rows;
    if(typeof json.rowHeight != "undefined") rowHeight = json.rowHeight;
    if(typeof json.rowBorder != "undefined") rowBorder = json.rowBorder;
    if(typeof json.tol != "undefined") tol = json.tol;
    if(typeof json.roadHeight != "undefined") roadHeight = json.roadHeight;
    if(typeof json.sandHeight != "undefined") sandHeight = json.sandHeight;
    if(typeof json.roadBottom != "undefined") roadBottom = json.roadBottom;
    if(typeof json.waterHeight != "undefined") waterHeight = json.waterHeight;
    if(typeof json.sandBottom != "undefined") sandBottom = json.sandBottom;
    if(typeof json.waterBottom != "undefined") waterBottom = json.waterBottom;
    if(typeof json.waterTop != "undefined") waterTop = json.waterTop;
    if(typeof json.messageY != "undefined") messageY = json.messageY;
    if(typeof json.scoreY != "undefined") scoreY = json.scoreY;
    if(typeof json.actionsY != "undefined") actionsY = json.actionsY;
    if(typeof json.resetX != "undefined") resetX = json.resetX;
    if(typeof json.replayX != "undefined") replayX = json.replayX;
    if(typeof json.autoplayX != "undefined") autoplayX = json.autoplayX;
    if(typeof json.startMessage != "undefined") startMessage = json.startMessage;
    if(typeof json.playAgainMessage != "undefined") playAgainMessage = json.playAgainMessage;
    if(typeof json.gameWonMessage != "undefined") gameWonMessage = json.gameWonMessage;
    if(typeof json.gameTiedMessage != "undefined") gameTiedMessage = json.gameTiedMessage;
    if(typeof json.gameRecordMessage != "undefined") gameRecordMessage = json.gameRecordMessage;
    if(typeof json.gameLostMessage != "undefined") gameLostMessage = json.gameLostMessage;
    if(typeof json.gameOverMessage != "undefined") gameOverMessage = json.gameOverMessage;
    if(typeof json.gameResultMessage != "undefined") gameResultMessage = json.gameResultMessage;
    if(typeof json.message != "undefined") message = json.message;
    if(typeof json.DEAD_ON_ROAD != "undefined") DEAD_ON_ROAD = json.DEAD_ON_ROAD;
    if(typeof json.DEAD_ON_WATER != "undefined") DEAD_ON_WATER = json.DEAD_ON_WATER;
    if(typeof json.SAFE_ON_LILLY != "undefined") SAFE_ON_LILLY = json.SAFE_ON_LILLY;
    if(typeof json.SAFE_ON_PREFERRED_LILLY != "undefined") SAFE_ON_PREFERRED_LILLY = json.SAFE_ON_PREFERRED_LILLY;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.bestScore != "undefined") bestScore = json.bestScore;
    if(typeof json.bestTime != "undefined") bestTime = json.bestTime;
    if(typeof json.scoreText != "undefined") scoreText = json.scoreText;
    if(typeof json.recordText != "undefined") recordText = json.recordText;
    if(typeof json.autoplayOption != "undefined") autoplayOption = json.autoplayOption;
    if(typeof json.autoplayText != "undefined") autoplayText = json.autoplayText;
    if(typeof json.userAutoplayShowDialog != "undefined") userAutoplayShowDialog = json.userAutoplayShowDialog;
    if(typeof json.userAutoplayString != "undefined") userAutoplayString = json.userAutoplayString;
    if(typeof json.userAutoplayFunction != "undefined") userAutoplayFunction = json.userAutoplayFunction;
    if(typeof json.optimalJumps != "undefined") optimalJumps = json.optimalJumps;
    if(typeof json.boatInPlace != "undefined") boatInPlace = json.boatInPlace;
    if(typeof json.willKillYou != "undefined") willKillYou = json.willKillYou;
    if(typeof json.willDie != "undefined") willDie = json.willDie;
    if(typeof json.frogInitial != "undefined") frogInitial = json.frogInitial;
    if(typeof json.frogLastPos != "undefined") frogLastPos = json.frogLastPos;
    if(typeof json.frogPos != "undefined") frogPos = json.frogPos;
    if(typeof json.frogVx != "undefined") frogVx = json.frogVx;
    if(typeof json.frogJumpSize != "undefined") frogJumpSize = json.frogJumpSize;
    if(typeof json.smfrogimage != "undefined") smfrogimage = json.smfrogimage;
    if(typeof json.medfrogimage != "undefined") medfrogimage = json.medfrogimage;
    if(typeof json.deadImage != "undefined") deadImage = json.deadImage;
    if(typeof json.drownImage != "undefined") drownImage = json.drownImage;
    if(typeof json.frogimage != "undefined") frogimage = json.frogimage;
    if(typeof json.frogWidth != "undefined") frogWidth = json.frogWidth;
    if(typeof json.frogHeight != "undefined") frogHeight = json.frogHeight;
    if(typeof json.frogAngle != "undefined") frogAngle = json.frogAngle;
    if(typeof json.numPonds != "undefined") numPonds = json.numPonds;
    if(typeof json.pondX != "undefined") pondX = json.pondX;
    if(typeof json.pondY != "undefined") pondY = json.pondY;
    if(typeof json.pondWidth != "undefined") pondWidth = json.pondWidth;
    if(typeof json.pondHeight != "undefined") pondHeight = json.pondHeight;
    if(typeof json.numPads != "undefined") numPads = json.numPads;
    if(typeof json.padImage != "undefined") padImage = json.padImage;
    if(typeof json.padX != "undefined") padX = json.padX;
    if(typeof json.padY != "undefined") padY = json.padY;
    if(typeof json.padWidth != "undefined") padWidth = json.padWidth;
    if(typeof json.padHeight != "undefined") padHeight = json.padHeight;
    if(typeof json.padPreferred != "undefined") padPreferred = json.padPreferred;
    if(typeof json.numRaceCars != "undefined") numRaceCars = json.numRaceCars;
    if(typeof json.raceCarX != "undefined") raceCarX = json.raceCarX;
    if(typeof json.raceCarY != "undefined") raceCarY = json.raceCarY;
    if(typeof json.raceCarVx != "undefined") raceCarVx = json.raceCarVx;
    if(typeof json.raceCarHeight != "undefined") raceCarHeight = json.raceCarHeight;
    if(typeof json.raceCarWidth != "undefined") raceCarWidth = json.raceCarWidth;
    if(typeof json.raceCarSpacing != "undefined") raceCarSpacing = json.raceCarSpacing;
    if(typeof json.numYellowCars != "undefined") numYellowCars = json.numYellowCars;
    if(typeof json.yellowCarX != "undefined") yellowCarX = json.yellowCarX;
    if(typeof json.yellowCarY != "undefined") yellowCarY = json.yellowCarY;
    if(typeof json.yellowCarVx != "undefined") yellowCarVx = json.yellowCarVx;
    if(typeof json.yellowCarHeight != "undefined") yellowCarHeight = json.yellowCarHeight;
    if(typeof json.yellowCarWidth != "undefined") yellowCarWidth = json.yellowCarWidth;
    if(typeof json.yellowCarSpacing != "undefined") yellowCarSpacing = json.yellowCarSpacing;
    if(typeof json.numRedCars != "undefined") numRedCars = json.numRedCars;
    if(typeof json.redCarX != "undefined") redCarX = json.redCarX;
    if(typeof json.redCarY != "undefined") redCarY = json.redCarY;
    if(typeof json.redCarVx != "undefined") redCarVx = json.redCarVx;
    if(typeof json.redCarHeight != "undefined") redCarHeight = json.redCarHeight;
    if(typeof json.redCarWidth != "undefined") redCarWidth = json.redCarWidth;
    if(typeof json.redCarSpacing != "undefined") redCarSpacing = json.redCarSpacing;
    if(typeof json.numTrucks != "undefined") numTrucks = json.numTrucks;
    if(typeof json.truckX != "undefined") truckX = json.truckX;
    if(typeof json.truckY != "undefined") truckY = json.truckY;
    if(typeof json.truckVx != "undefined") truckVx = json.truckVx;
    if(typeof json.truckHeight != "undefined") truckHeight = json.truckHeight;
    if(typeof json.truckWidth != "undefined") truckWidth = json.truckWidth;
    if(typeof json.truckSpacing != "undefined") truckSpacing = json.truckSpacing;
    if(typeof json.numBikes != "undefined") numBikes = json.numBikes;
    if(typeof json.bikeX != "undefined") bikeX = json.bikeX;
    if(typeof json.bikeY != "undefined") bikeY = json.bikeY;
    if(typeof json.bikeVx != "undefined") bikeVx = json.bikeVx;
    if(typeof json.bikeHeight != "undefined") bikeHeight = json.bikeHeight;
    if(typeof json.bikeWidth != "undefined") bikeWidth = json.bikeWidth;
    if(typeof json.bikeSpacing != "undefined") bikeSpacing = json.bikeSpacing;
    if(typeof json.numMapleLogs != "undefined") numMapleLogs = json.numMapleLogs;
    if(typeof json.mapleLogX != "undefined") mapleLogX = json.mapleLogX;
    if(typeof json.mapleLogY != "undefined") mapleLogY = json.mapleLogY;
    if(typeof json.mapleLogVx != "undefined") mapleLogVx = json.mapleLogVx;
    if(typeof json.mapleLogHeight != "undefined") mapleLogHeight = json.mapleLogHeight;
    if(typeof json.mapleLogWidth != "undefined") mapleLogWidth = json.mapleLogWidth;
    if(typeof json.mapleLogSpacing != "undefined") mapleLogSpacing = json.mapleLogSpacing;
    if(typeof json.numOakLogs != "undefined") numOakLogs = json.numOakLogs;
    if(typeof json.oakLogX != "undefined") oakLogX = json.oakLogX;
    if(typeof json.oakLogY != "undefined") oakLogY = json.oakLogY;
    if(typeof json.oakLogVx != "undefined") oakLogVx = json.oakLogVx;
    if(typeof json.oakLogHeight != "undefined") oakLogHeight = json.oakLogHeight;
    if(typeof json.oakLogWidth != "undefined") oakLogWidth = json.oakLogWidth;
    if(typeof json.oakLogSpacing != "undefined") oakLogSpacing = json.oakLogSpacing;
    if(typeof json.numBoats != "undefined") numBoats = json.numBoats;
    if(typeof json.boatX != "undefined") boatX = json.boatX;
    if(typeof json.boatY != "undefined") boatY = json.boatY;
    if(typeof json.boatVx != "undefined") boatVx = json.boatVx;
    if(typeof json.boatHeight != "undefined") boatHeight = json.boatHeight;
    if(typeof json.boatWidth != "undefined") boatWidth = json.boatWidth;
    if(typeof json.boatXmin != "undefined") boatXmin = json.boatXmin;
    if(typeof json.boatXmax != "undefined") boatXmax = json.boatXmax;
    if(typeof json.boatSpacing != "undefined") boatSpacing = json.boatSpacing;
    if(typeof json.numFishGroups != "undefined") numFishGroups = json.numFishGroups;
    if(typeof json.numFishPerGroup != "undefined") numFishPerGroup = json.numFishPerGroup;
    if(typeof json.numFish != "undefined") numFish = json.numFish;
    if(typeof json.fishX != "undefined") fishX = json.fishX;
    if(typeof json.fishY != "undefined") fishY = json.fishY;
    if(typeof json.fishVx != "undefined") fishVx = json.fishVx;
    if(typeof json.fishHeight != "undefined") fishHeight = json.fishHeight;
    if(typeof json.fishWidth != "undefined") fishWidth = json.fishWidth;
    if(typeof json.fishSpacing != "undefined") fishSpacing = json.fishSpacing;
    if(typeof json.fishImageSwim1 != "undefined") fishImageSwim1 = json.fishImageSwim1;
    if(typeof json.fishImageSwim2 != "undefined") fishImageSwim2 = json.fishImageSwim2;
    if(typeof json.fishImage != "undefined") fishImage = json.fishImage;
    if(typeof json.numTurtleGroups != "undefined") numTurtleGroups = json.numTurtleGroups;
    if(typeof json.numTurtlesPerGroup != "undefined") numTurtlesPerGroup = json.numTurtlesPerGroup;
    if(typeof json.numTurtles != "undefined") numTurtles = json.numTurtles;
    if(typeof json.turtleX != "undefined") turtleX = json.turtleX;
    if(typeof json.turtleY != "undefined") turtleY = json.turtleY;
    if(typeof json.turtleVx != "undefined") turtleVx = json.turtleVx;
    if(typeof json.turtleHeight != "undefined") turtleHeight = json.turtleHeight;
    if(typeof json.turtleWidth != "undefined") turtleWidth = json.turtleWidth;
    if(typeof json.turtleSpacing != "undefined") turtleSpacing = json.turtleSpacing;
    if(typeof json.turtleImage1 != "undefined") turtleImage1 = json.turtleImage1;
    if(typeof json.turtleImage2 != "undefined") turtleImage2 = json.turtleImage2;
    if(typeof json.turtleImage3 != "undefined") turtleImage3 = json.turtleImage3;
    if(typeof json.turtleImage != "undefined") turtleImage = json.turtleImage;
  };

  _model._inputAndPublicParameters = ["displayScale",  "factorTo10",  "xMin",  "xMax",  "xRange",  "yMin",  "yMax",  "yRange",  "xMiddle",  "yMiddle",  "time",  "deltaTime",  "maxTime",  "counter",  "running",  "gameOver",  "replay",  "randomGenerator",  "SHOW_SCORES",  "SHOW_AUTOPLAY",  "FULL_AUTOPLAY",  "NO_MOVE",  "LEFT_MOVE",  "RIGHT_MOVE",  "DOWN_MOVE",  "UP_MOVE",  "rows",  "rowHeight",  "rowBorder",  "tol",  "roadHeight",  "sandHeight",  "roadBottom",  "waterHeight",  "sandBottom",  "waterBottom",  "waterTop",  "messageY",  "scoreY",  "actionsY",  "resetX",  "replayX",  "autoplayX",  "startMessage",  "playAgainMessage",  "gameWonMessage",  "gameTiedMessage",  "gameRecordMessage",  "gameLostMessage",  "gameOverMessage",  "gameResultMessage",  "message",  "DEAD_ON_ROAD",  "DEAD_ON_WATER",  "SAFE_ON_LILLY",  "SAFE_ON_PREFERRED_LILLY",  "score",  "bestScore",  "bestTime",  "scoreText",  "recordText",  "autoplayOption",  "autoplayText",  "userAutoplayShowDialog",  "userAutoplayString",  "userAutoplayFunction",  "optimalJumps",  "boatInPlace",  "willKillYou",  "willDie",  "frogInitial",  "frogLastPos",  "frogPos",  "frogVx",  "frogJumpSize",  "smfrogimage",  "medfrogimage",  "deadImage",  "drownImage",  "frogimage",  "frogWidth",  "frogHeight",  "frogAngle",  "numPonds",  "pondX",  "pondY",  "pondWidth",  "pondHeight",  "numPads",  "padImage",  "padX",  "padY",  "padWidth",  "padHeight",  "padPreferred",  "numRaceCars",  "raceCarX",  "raceCarY",  "raceCarVx",  "raceCarHeight",  "raceCarWidth",  "raceCarSpacing",  "numYellowCars",  "yellowCarX",  "yellowCarY",  "yellowCarVx",  "yellowCarHeight",  "yellowCarWidth",  "yellowCarSpacing",  "numRedCars",  "redCarX",  "redCarY",  "redCarVx",  "redCarHeight",  "redCarWidth",  "redCarSpacing",  "numTrucks",  "truckX",  "truckY",  "truckVx",  "truckHeight",  "truckWidth",  "truckSpacing",  "numBikes",  "bikeX",  "bikeY",  "bikeVx",  "bikeHeight",  "bikeWidth",  "bikeSpacing",  "numMapleLogs",  "mapleLogX",  "mapleLogY",  "mapleLogVx",  "mapleLogHeight",  "mapleLogWidth",  "mapleLogSpacing",  "numOakLogs",  "oakLogX",  "oakLogY",  "oakLogVx",  "oakLogHeight",  "oakLogWidth",  "oakLogSpacing",  "numBoats",  "boatX",  "boatY",  "boatVx",  "boatHeight",  "boatWidth",  "boatXmin",  "boatXmax",  "boatSpacing",  "numFishGroups",  "numFishPerGroup",  "numFish",  "fishX",  "fishY",  "fishVx",  "fishHeight",  "fishWidth",  "fishSpacing",  "fishImageSwim1",  "fishImageSwim2",  "fishImage",  "numTurtleGroups",  "numTurtlesPerGroup",  "numTurtles",  "turtleX",  "turtleY",  "turtleVx",  "turtleHeight",  "turtleWidth",  "turtleSpacing",  "turtleImage1",  "turtleImage2",  "turtleImage3",  "turtleImage"]; 

  _model._outputAndPublicParameters = ["displayScale",  "factorTo10",  "xMin",  "xMax",  "xRange",  "yMin",  "yMax",  "yRange",  "xMiddle",  "yMiddle",  "time",  "deltaTime",  "maxTime",  "counter",  "running",  "gameOver",  "replay",  "randomGenerator",  "SHOW_SCORES",  "SHOW_AUTOPLAY",  "FULL_AUTOPLAY",  "NO_MOVE",  "LEFT_MOVE",  "RIGHT_MOVE",  "DOWN_MOVE",  "UP_MOVE",  "rows",  "rowHeight",  "rowBorder",  "tol",  "roadHeight",  "sandHeight",  "roadBottom",  "waterHeight",  "sandBottom",  "waterBottom",  "waterTop",  "messageY",  "scoreY",  "actionsY",  "resetX",  "replayX",  "autoplayX",  "startMessage",  "playAgainMessage",  "gameWonMessage",  "gameTiedMessage",  "gameRecordMessage",  "gameLostMessage",  "gameOverMessage",  "gameResultMessage",  "message",  "DEAD_ON_ROAD",  "DEAD_ON_WATER",  "SAFE_ON_LILLY",  "SAFE_ON_PREFERRED_LILLY",  "score",  "bestScore",  "bestTime",  "scoreText",  "recordText",  "autoplayOption",  "autoplayText",  "userAutoplayShowDialog",  "userAutoplayString",  "userAutoplayFunction",  "optimalJumps",  "boatInPlace",  "willKillYou",  "willDie",  "frogInitial",  "frogLastPos",  "frogPos",  "frogVx",  "frogJumpSize",  "smfrogimage",  "medfrogimage",  "deadImage",  "drownImage",  "frogimage",  "frogWidth",  "frogHeight",  "frogAngle",  "numPonds",  "pondX",  "pondY",  "pondWidth",  "pondHeight",  "numPads",  "padImage",  "padX",  "padY",  "padWidth",  "padHeight",  "padPreferred",  "numRaceCars",  "raceCarX",  "raceCarY",  "raceCarVx",  "raceCarHeight",  "raceCarWidth",  "raceCarSpacing",  "numYellowCars",  "yellowCarX",  "yellowCarY",  "yellowCarVx",  "yellowCarHeight",  "yellowCarWidth",  "yellowCarSpacing",  "numRedCars",  "redCarX",  "redCarY",  "redCarVx",  "redCarHeight",  "redCarWidth",  "redCarSpacing",  "numTrucks",  "truckX",  "truckY",  "truckVx",  "truckHeight",  "truckWidth",  "truckSpacing",  "numBikes",  "bikeX",  "bikeY",  "bikeVx",  "bikeHeight",  "bikeWidth",  "bikeSpacing",  "numMapleLogs",  "mapleLogX",  "mapleLogY",  "mapleLogVx",  "mapleLogHeight",  "mapleLogWidth",  "mapleLogSpacing",  "numOakLogs",  "oakLogX",  "oakLogY",  "oakLogVx",  "oakLogHeight",  "oakLogWidth",  "oakLogSpacing",  "numBoats",  "boatX",  "boatY",  "boatVx",  "boatHeight",  "boatWidth",  "boatXmin",  "boatXmax",  "boatSpacing",  "numFishGroups",  "numFishPerGroup",  "numFish",  "fishX",  "fishY",  "fishVx",  "fishHeight",  "fishWidth",  "fishSpacing",  "fishImageSwim1",  "fishImageSwim2",  "fishImage",  "numTurtleGroups",  "numTurtlesPerGroup",  "numTurtles",  "turtleX",  "turtleY",  "turtleVx",  "turtleHeight",  "turtleWidth",  "turtleSpacing",  "turtleImage1",  "turtleImage2",  "turtleImage3",  "turtleImage"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["First tasks"] = true;
    __pagesEnabled["Ponds"] = true;
    __pagesEnabled["Road objects"] = true;
    __pagesEnabled["Water objects"] = true;
    __pagesEnabled["Time"] = true;
    __pagesEnabled["Motion"] = true;
    __pagesEnabled["PostMotion"] = true;
    __pagesEnabled["Scores"] = true;
  });

  _model.addToReset(function() {
    displayScale = 3.0/4.0; // EjsS Model.Variables.World.displayScale
    factorTo10 = 56.25/100.0; // EjsS Model.Variables.World.factorTo10
    xMin = -100*factorTo10; // EjsS Model.Variables.World.xMin
    xMax = 100*factorTo10; // EjsS Model.Variables.World.xMax
    xRange = xMax-xMin; // EjsS Model.Variables.World.xRange
    yMin = 0; // EjsS Model.Variables.World.yMin
    yMax = yMin + xRange/displayScale; // EjsS Model.Variables.World.yMax
    yRange = yMax-yMin; // EjsS Model.Variables.World.yRange
    xMiddle = (xMin+xMax)/2; // EjsS Model.Variables.World.xMiddle
    yMiddle = (yMin+yMax)/2; // EjsS Model.Variables.World.yMiddle
    time = 0; // EjsS Model.Variables.World.time
    deltaTime = 1; // EjsS Model.Variables.World.deltaTime
    maxTime = Number.POSITIVE_INFINITY; // EjsS Model.Variables.World.maxTime
    counter = 0; // EjsS Model.Variables.World.counter
    running = false; // EjsS Model.Variables.World.running
    gameOver = false; // EjsS Model.Variables.World.gameOver
    replay = false; // EjsS Model.Variables.World.replay
    randomGenerator = RNG(); // EjsS Model.Variables.World.randomGenerator
  });

  _model.addToReset(function() {
    SHOW_SCORES = true; // EjsS Model.Variables.Display.SHOW_SCORES
    SHOW_AUTOPLAY = true; // EjsS Model.Variables.Display.SHOW_AUTOPLAY
    FULL_AUTOPLAY = true; // EjsS Model.Variables.Display.FULL_AUTOPLAY
    NO_MOVE = 0; // EjsS Model.Variables.Display.NO_MOVE
    LEFT_MOVE = 1; // EjsS Model.Variables.Display.LEFT_MOVE
    RIGHT_MOVE = 2; // EjsS Model.Variables.Display.RIGHT_MOVE
    DOWN_MOVE = 3; // EjsS Model.Variables.Display.DOWN_MOVE
    UP_MOVE = 4; // EjsS Model.Variables.Display.UP_MOVE
    rows = 15; // EjsS Model.Variables.Display.rows
    rowHeight = (yMax-yMin)/rows; // EjsS Model.Variables.Display.rowHeight
    rowBorder = 0.1*rowHeight; // EjsS Model.Variables.Display.rowBorder
    tol = rowHeight/5; // EjsS Model.Variables.Display.tol
    roadHeight = 5*rowHeight; // EjsS Model.Variables.Display.roadHeight
    sandHeight = rowHeight; // EjsS Model.Variables.Display.sandHeight
    roadBottom = yMin+rowHeight; // EjsS Model.Variables.Display.roadBottom
    waterHeight = 5*rowHeight; // EjsS Model.Variables.Display.waterHeight
    sandBottom = roadBottom+roadHeight; // EjsS Model.Variables.Display.sandBottom
    waterBottom = sandBottom+sandHeight; // EjsS Model.Variables.Display.waterBottom
    waterTop = waterBottom + waterHeight; // EjsS Model.Variables.Display.waterTop
  });

  _model.addToReset(function() {
    messageY = sandBottom+sandHeight/2; // EjsS Model.Variables.Instructions.messageY
    scoreY = waterTop+1*rowHeight; // EjsS Model.Variables.Instructions.scoreY
    actionsY = scoreY+1.75*rowHeight; // EjsS Model.Variables.Instructions.actionsY
    resetX = xMin+xRange/8; // EjsS Model.Variables.Instructions.resetX
    replayX = xMax-xRange/8; // EjsS Model.Variables.Instructions.replayX
    autoplayX = xMiddle; // EjsS Model.Variables.Instructions.autoplayX
    startMessage = "Click or Tap to Start"; // EjsS Model.Variables.Instructions.startMessage
    playAgainMessage = "Click or Tap to Play Again"; // EjsS Model.Variables.Instructions.playAgainMessage
    gameWonMessage = "You Win"; // EjsS Model.Variables.Instructions.gameWonMessage
    gameTiedMessage = "You ended on a lilly, but not the yellow lilly"; // EjsS Model.Variables.Instructions.gameTiedMessage
    gameRecordMessage = "You Win with a NEW RECORD"; // EjsS Model.Variables.Instructions.gameRecordMessage
    gameLostMessage = "You Lost"; // EjsS Model.Variables.Instructions.gameLostMessage
    gameOverMessage = "GAME OVER"; // EjsS Model.Variables.Instructions.gameOverMessage
    gameResultMessage = gameLostMessage; // EjsS Model.Variables.Instructions.gameResultMessage
    message = startMessage; // EjsS Model.Variables.Instructions.message
    DEAD_ON_ROAD = 1; // EjsS Model.Variables.Instructions.DEAD_ON_ROAD
    DEAD_ON_WATER = 2; // EjsS Model.Variables.Instructions.DEAD_ON_WATER
    SAFE_ON_LILLY = 3; // EjsS Model.Variables.Instructions.SAFE_ON_LILLY
    SAFE_ON_PREFERRED_LILLY = 4; // EjsS Model.Variables.Instructions.SAFE_ON_PREFERRED_LILLY
    score = 0; // EjsS Model.Variables.Instructions.score
    bestScore = Number.POSITIVE_INFINITY; // EjsS Model.Variables.Instructions.bestScore
    bestTime = Number.POSITIVE_INFINITY; // EjsS Model.Variables.Instructions.bestTime
    scoreText = "Score text"; // EjsS Model.Variables.Instructions.scoreText
    recordText = "Record text"; // EjsS Model.Variables.Instructions.recordText
    autoplayOption = 0; // EjsS Model.Variables.Instructions.autoplayOption
    autoplayText = "None"; // EjsS Model.Variables.Instructions.autoplayText
    userAutoplayShowDialog = false; // EjsS Model.Variables.Instructions.userAutoplayShowDialog
    userAutoplayString = ""; // EjsS Model.Variables.Instructions.userAutoplayString
    userAutoplayFunction = undefined; // EjsS Model.Variables.Instructions.userAutoplayFunction
    optimalJumps = new Array(0); // EjsS Model.Variables.Instructions.optimalJumps
    boatInPlace = -1; // EjsS Model.Variables.Instructions.boatInPlace
    willKillYou = [0,0]; // EjsS Model.Variables.Instructions.willKillYou
    willDie = false; // EjsS Model.Variables.Instructions.willDie
  });

  _model.addToReset(function() {
    frogInitial = roadBottom - 0.5*rowHeight; // EjsS Model.Variables.Frog.frogInitial
    frogLastPos = 0; // EjsS Model.Variables.Frog.frogLastPos
    frogPos = [xMiddle,frogInitial]; // EjsS Model.Variables.Frog.frogPos
    frogVx = 0; // EjsS Model.Variables.Frog.frogVx
    frogJumpSize = rowHeight; // EjsS Model.Variables.Frog.frogJumpSize
    smfrogimage = "./pvg_frogger/frog-sm.png"; // EjsS Model.Variables.Frog.smfrogimage
    medfrogimage = "./pvg_frogger/frog-med.png"; // EjsS Model.Variables.Frog.medfrogimage
    deadImage = "./pvg_frogger/splat.png"; // EjsS Model.Variables.Frog.deadImage
    drownImage = "./pvg_frogger/bubbles.png"; // EjsS Model.Variables.Frog.drownImage
    frogimage = smfrogimage; // EjsS Model.Variables.Frog.frogimage
    frogWidth = 0.9*rowHeight; // EjsS Model.Variables.Frog.frogWidth
    frogHeight = frogWidth; // EjsS Model.Variables.Frog.frogHeight
    frogAngle = Math.PI/2; // EjsS Model.Variables.Frog.frogAngle
  });

  _model.addToReset(function() {
    numPonds = 4; // EjsS Model.Variables.Ponds & Pads.numPonds
    pondX = new Array(numPonds); // EjsS Model.Variables.Ponds & Pads.pondX
    (function () {
      var _i0;
      for (_i0=0; _i0<numPonds; _i0+=1) {  // EjsS Model.Variables.Ponds & Pads.pondX
        pondX[_i0] = 0;  // EjsS Model.Variables.Ponds & Pads.pondX
      }
    }());
    pondY = frogInitial+12*rowHeight; // EjsS Model.Variables.Ponds & Pads.pondY
    pondWidth = 2*rowHeight; // EjsS Model.Variables.Ponds & Pads.pondWidth
    pondHeight = rowHeight; // EjsS Model.Variables.Ponds & Pads.pondHeight
    numPads = numPonds; // EjsS Model.Variables.Ponds & Pads.numPads
    padImage = new Array(numPads); // EjsS Model.Variables.Ponds & Pads.padImage
    (function () {
      var _i0;
      for (_i0=0; _i0<numPads; _i0+=1) {  // EjsS Model.Variables.Ponds & Pads.padImage
        padImage[_i0] = "./pvg_frogger/lillypad.png";  // EjsS Model.Variables.Ponds & Pads.padImage
      }
    }());
    padX = new Array(numPads); // EjsS Model.Variables.Ponds & Pads.padX
    (function () {
      var _i0;
      for (_i0=0; _i0<numPads; _i0+=1) {  // EjsS Model.Variables.Ponds & Pads.padX
        padX[_i0] = 0;  // EjsS Model.Variables.Ponds & Pads.padX
      }
    }());
    padY = pondY; // EjsS Model.Variables.Ponds & Pads.padY
    padWidth = 0.8*rowHeight; // EjsS Model.Variables.Ponds & Pads.padWidth
    padHeight = padWidth; // EjsS Model.Variables.Ponds & Pads.padHeight
    padPreferred = 0; // EjsS Model.Variables.Ponds & Pads.padPreferred
  });

  _model.addToReset(function() {
    numRaceCars = 2; // EjsS Model.Variables.Cars.numRaceCars
    raceCarX = new Array(numRaceCars); // EjsS Model.Variables.Cars.raceCarX
    (function () {
      var _i0;
      for (_i0=0; _i0<numRaceCars; _i0+=1) {  // EjsS Model.Variables.Cars.raceCarX
        raceCarX[_i0] = 0;  // EjsS Model.Variables.Cars.raceCarX
      }
    }());
    raceCarY = frogInitial+rowHeight; // EjsS Model.Variables.Cars.raceCarY
    raceCarVx = -2*factorTo10; // EjsS Model.Variables.Cars.raceCarVx
    raceCarHeight = 0.9*rowHeight; // EjsS Model.Variables.Cars.raceCarHeight
    raceCarWidth = 1.25*raceCarHeight; // EjsS Model.Variables.Cars.raceCarWidth
    raceCarSpacing = raceCarWidth; // EjsS Model.Variables.Cars.raceCarSpacing
    numYellowCars = 1; // EjsS Model.Variables.Cars.numYellowCars
    yellowCarX = new Array(numYellowCars); // EjsS Model.Variables.Cars.yellowCarX
    (function () {
      var _i0;
      for (_i0=0; _i0<numYellowCars; _i0+=1) {  // EjsS Model.Variables.Cars.yellowCarX
        yellowCarX[_i0] = 0;  // EjsS Model.Variables.Cars.yellowCarX
      }
    }());
    yellowCarY = frogInitial+2*rowHeight; // EjsS Model.Variables.Cars.yellowCarY
    yellowCarVx = 2*factorTo10; // EjsS Model.Variables.Cars.yellowCarVx
    yellowCarHeight = 0.8*rowHeight; // EjsS Model.Variables.Cars.yellowCarHeight
    yellowCarWidth = 1.75*yellowCarHeight; // EjsS Model.Variables.Cars.yellowCarWidth
    yellowCarSpacing = yellowCarWidth; // EjsS Model.Variables.Cars.yellowCarSpacing
    numRedCars = 1; // EjsS Model.Variables.Cars.numRedCars
    redCarX = new Array(numRedCars); // EjsS Model.Variables.Cars.redCarX
    (function () {
      var _i0;
      for (_i0=0; _i0<numRedCars; _i0+=1) {  // EjsS Model.Variables.Cars.redCarX
        redCarX[_i0] = 0;  // EjsS Model.Variables.Cars.redCarX
      }
    }());
    redCarY = frogInitial+5*rowHeight; // EjsS Model.Variables.Cars.redCarY
    redCarVx = -1.5*factorTo10; // EjsS Model.Variables.Cars.redCarVx
    redCarHeight = 0.8*rowHeight; // EjsS Model.Variables.Cars.redCarHeight
    redCarWidth = 1.75*redCarHeight; // EjsS Model.Variables.Cars.redCarWidth
    redCarSpacing = redCarWidth; // EjsS Model.Variables.Cars.redCarSpacing
  });

  _model.addToReset(function() {
    numTrucks = 1; // EjsS Model.Variables.Trucks & Bikes.numTrucks
    truckX = new Array(numTrucks); // EjsS Model.Variables.Trucks & Bikes.truckX
    (function () {
      var _i0;
      for (_i0=0; _i0<numTrucks; _i0+=1) {  // EjsS Model.Variables.Trucks & Bikes.truckX
        truckX[_i0] = 0;  // EjsS Model.Variables.Trucks & Bikes.truckX
      }
    }());
    truckY = frogInitial+3*rowHeight; // EjsS Model.Variables.Trucks & Bikes.truckY
    truckVx = -1*factorTo10; // EjsS Model.Variables.Trucks & Bikes.truckVx
    truckHeight = 0.9*rowHeight; // EjsS Model.Variables.Trucks & Bikes.truckHeight
    truckWidth = 3*truckHeight; // EjsS Model.Variables.Trucks & Bikes.truckWidth
    truckSpacing = truckWidth; // EjsS Model.Variables.Trucks & Bikes.truckSpacing
    numBikes = 2; // EjsS Model.Variables.Trucks & Bikes.numBikes
    bikeX = new Array(numBikes); // EjsS Model.Variables.Trucks & Bikes.bikeX
    (function () {
      var _i0;
      for (_i0=0; _i0<numBikes; _i0+=1) {  // EjsS Model.Variables.Trucks & Bikes.bikeX
        bikeX[_i0] = 0;  // EjsS Model.Variables.Trucks & Bikes.bikeX
      }
    }());
    bikeY = frogInitial+4*rowHeight; // EjsS Model.Variables.Trucks & Bikes.bikeY
    bikeVx = 3*factorTo10; // EjsS Model.Variables.Trucks & Bikes.bikeVx
    bikeHeight = 0.4*rowHeight; // EjsS Model.Variables.Trucks & Bikes.bikeHeight
    bikeWidth = 2*bikeHeight; // EjsS Model.Variables.Trucks & Bikes.bikeWidth
    bikeSpacing = 2*bikeWidth; // EjsS Model.Variables.Trucks & Bikes.bikeSpacing
  });

  _model.addToReset(function() {
    numMapleLogs = 3; // EjsS Model.Variables.Logs & Boats.numMapleLogs
    mapleLogX = new Array(numMapleLogs); // EjsS Model.Variables.Logs & Boats.mapleLogX
    (function () {
      var _i0;
      for (_i0=0; _i0<numMapleLogs; _i0+=1) {  // EjsS Model.Variables.Logs & Boats.mapleLogX
        mapleLogX[_i0] = 0;  // EjsS Model.Variables.Logs & Boats.mapleLogX
      }
    }());
    mapleLogY = frogInitial+9*rowHeight; // EjsS Model.Variables.Logs & Boats.mapleLogY
    mapleLogVx = -2*factorTo10; // EjsS Model.Variables.Logs & Boats.mapleLogVx
    mapleLogHeight = 0.7*rowHeight; // EjsS Model.Variables.Logs & Boats.mapleLogHeight
    mapleLogWidth = 6*mapleLogHeight; // EjsS Model.Variables.Logs & Boats.mapleLogWidth
    mapleLogSpacing = 0.75*mapleLogWidth; // EjsS Model.Variables.Logs & Boats.mapleLogSpacing
    numOakLogs = 4; // EjsS Model.Variables.Logs & Boats.numOakLogs
    oakLogX = new Array(numOakLogs); // EjsS Model.Variables.Logs & Boats.oakLogX
    (function () {
      var _i0;
      for (_i0=0; _i0<numOakLogs; _i0+=1) {  // EjsS Model.Variables.Logs & Boats.oakLogX
        oakLogX[_i0] = 0;  // EjsS Model.Variables.Logs & Boats.oakLogX
      }
    }());
    oakLogY = frogInitial+7*rowHeight; // EjsS Model.Variables.Logs & Boats.oakLogY
    oakLogVx = -1*factorTo10; // EjsS Model.Variables.Logs & Boats.oakLogVx
    oakLogHeight = 0.7*rowHeight; // EjsS Model.Variables.Logs & Boats.oakLogHeight
    oakLogWidth = 2*oakLogHeight; // EjsS Model.Variables.Logs & Boats.oakLogWidth
    oakLogSpacing = oakLogWidth; // EjsS Model.Variables.Logs & Boats.oakLogSpacing
    numBoats = 3; // EjsS Model.Variables.Logs & Boats.numBoats
    boatX = new Array(numBoats); // EjsS Model.Variables.Logs & Boats.boatX
    (function () {
      var _i0;
      for (_i0=0; _i0<numBoats; _i0+=1) {  // EjsS Model.Variables.Logs & Boats.boatX
        boatX[_i0] = 0;  // EjsS Model.Variables.Logs & Boats.boatX
      }
    }());
    boatY = frogInitial+11*rowHeight; // EjsS Model.Variables.Logs & Boats.boatY
    boatVx = -3*factorTo10; // EjsS Model.Variables.Logs & Boats.boatVx
    boatHeight = 0.7*rowHeight; // EjsS Model.Variables.Logs & Boats.boatHeight
    boatWidth = 4*boatHeight; // EjsS Model.Variables.Logs & Boats.boatWidth
    boatXmin = xMin-boatWidth/2; // EjsS Model.Variables.Logs & Boats.boatXmin
    boatXmax = xMax+boatWidth/2; // EjsS Model.Variables.Logs & Boats.boatXmax
    boatSpacing = 0.75*boatWidth; // EjsS Model.Variables.Logs & Boats.boatSpacing
  });

  _model.addToReset(function() {
    numFishGroups = 2; // EjsS Model.Variables.Fish & Turtles.numFishGroups
    numFishPerGroup = 4; // EjsS Model.Variables.Fish & Turtles.numFishPerGroup
    numFish = numFishGroups*numFishPerGroup; // EjsS Model.Variables.Fish & Turtles.numFish
    fishX = new Array(numFish); // EjsS Model.Variables.Fish & Turtles.fishX
    (function () {
      var _i0;
      for (_i0=0; _i0<numFish; _i0+=1) {  // EjsS Model.Variables.Fish & Turtles.fishX
        fishX[_i0] = 0;  // EjsS Model.Variables.Fish & Turtles.fishX
      }
    }());
    fishY = frogInitial+10*rowHeight; // EjsS Model.Variables.Fish & Turtles.fishY
    fishVx = 0.75*factorTo10; // EjsS Model.Variables.Fish & Turtles.fishVx
    fishHeight = 0.7*rowHeight; // EjsS Model.Variables.Fish & Turtles.fishHeight
    fishWidth = 2*fishHeight; // EjsS Model.Variables.Fish & Turtles.fishWidth
    fishSpacing = 3*fishWidth; // EjsS Model.Variables.Fish & Turtles.fishSpacing
    fishImageSwim1 = "./pvg_frogger/fish-left.png"; // EjsS Model.Variables.Fish & Turtles.fishImageSwim1
    fishImageSwim2 = "./pvg_frogger/fish-right.png"; // EjsS Model.Variables.Fish & Turtles.fishImageSwim2
    fishImage = fishImageSwim1; // EjsS Model.Variables.Fish & Turtles.fishImage
    numTurtleGroups = 4; // EjsS Model.Variables.Fish & Turtles.numTurtleGroups
    numTurtlesPerGroup = 4; // EjsS Model.Variables.Fish & Turtles.numTurtlesPerGroup
    numTurtles = numTurtleGroups*numTurtlesPerGroup; // EjsS Model.Variables.Fish & Turtles.numTurtles
    turtleX = new Array(numTurtles); // EjsS Model.Variables.Fish & Turtles.turtleX
    (function () {
      var _i0;
      for (_i0=0; _i0<numTurtles; _i0+=1) {  // EjsS Model.Variables.Fish & Turtles.turtleX
        turtleX[_i0] = 0;  // EjsS Model.Variables.Fish & Turtles.turtleX
      }
    }());
    turtleY = frogInitial+8*rowHeight; // EjsS Model.Variables.Fish & Turtles.turtleY
    turtleVx = 1*factorTo10; // EjsS Model.Variables.Fish & Turtles.turtleVx
    turtleHeight = 0.7*rowHeight; // EjsS Model.Variables.Fish & Turtles.turtleHeight
    turtleWidth = turtleHeight; // EjsS Model.Variables.Fish & Turtles.turtleWidth
    turtleSpacing = 2*turtleHeight; // EjsS Model.Variables.Fish & Turtles.turtleSpacing
    turtleImage1 = "./pvg_frogger/turtle-01.png"; // EjsS Model.Variables.Fish & Turtles.turtleImage1
    turtleImage2 = "./pvg_frogger/turtle-02.png"; // EjsS Model.Variables.Fish & Turtles.turtleImage2
    turtleImage3 = "./pvg_frogger/turtle-03.png"; // EjsS Model.Variables.Fish & Turtles.turtleImage3
    turtleImage = "./pvg_frogger/turtle-01.png"; // EjsS Model.Variables.Fish & Turtles.turtleImage
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  // Edit this page to decide what to do on response to user interaction  // > CustomCode.Gameplay:1
  /**  // > CustomCode.Gameplay:2
   * motion of sprite  // > CustomCode.Gameplay:3
   * @param direction of motion  // > CustomCode.Gameplay:4
   * @return nothing, really  // > CustomCode.Gameplay:5
   */  // > CustomCode.Gameplay:6
  function moveSpriteTo (direction) {  // > CustomCode.Gameplay:7
    frogLastPos = [frogPos[0],frogPos[1]];  // > CustomCode.Gameplay:8
    switch(direction) {  // > CustomCode.Gameplay:9
      case NO_MOVE  :   // > CustomCode.Gameplay:10
        // Do nothing  // > CustomCode.Gameplay:11
        break;  // > CustomCode.Gameplay:12
      case LEFT_MOVE  :   // > CustomCode.Gameplay:13
        frogAngle = Math.PI;  // > CustomCode.Gameplay:14
        frogPos[0] -= frogJumpSize;  // > CustomCode.Gameplay:15
        break;  // > CustomCode.Gameplay:16
      case RIGHT_MOVE  :   // > CustomCode.Gameplay:17
        frogAngle = 0;  // > CustomCode.Gameplay:18
        frogPos[0] += frogJumpSize;  // > CustomCode.Gameplay:19
        break;  // > CustomCode.Gameplay:20
      case DOWN_MOVE  :  // > CustomCode.Gameplay:21
        frogAngle = -Math.PI/2;  // > CustomCode.Gameplay:22
        frogPos[1] -= frogJumpSize;  // > CustomCode.Gameplay:23
        break;  // > CustomCode.Gameplay:24
      case UP_MOVE  :   // > CustomCode.Gameplay:25
        frogAngle = Math.PI/2;  // > CustomCode.Gameplay:26
        frogPos[1] += frogJumpSize;  // > CustomCode.Gameplay:27
        break;  // > CustomCode.Gameplay:28
    }  // > CustomCode.Gameplay:29
    // Score is distance in this game  // > CustomCode.Gameplay:30
    score += (Math.abs(frogPos[0]-frogLastPos[0]) + Math.abs(frogPos[1]-frogLastPos[1]));  // > CustomCode.Gameplay:31
    frogVx = 0;  // > CustomCode.Gameplay:32
    if (isFrogCrossingWater()) checkFrogWaterLocation(); // Check if it is on top of a water object and sets it velocity  // > CustomCode.Gameplay:33
  }  // > CustomCode.Gameplay:34
  // fire action: Implement what happens if the user wants to fire!  // > CustomCode.Gameplay:35
  function fireAction() { // Nothing in this game  // > CustomCode.Gameplay:36
  }  // > CustomCode.Gameplay:37
  /**  // > CustomCode.Gameplay:38
   * What to do when the user clicks in a panel  // > CustomCode.Gameplay:39
   * @param point double[2] the point of the click  // > CustomCode.Gameplay:40
   */  // > CustomCode.Gameplay:41
  function clickAtPoint (point) {  // > CustomCode.Gameplay:42
  //    console.log ("You clicked at "+point);  // > CustomCode.Gameplay:43
  //    console.log ("Frog is at x = "+frogPos[0]+ ", y = "+frogPos[1]);    // > CustomCode.Gameplay:44
    if (Math.abs(point[1]-actionsY)<frogHeight/4) { // actions row  // > CustomCode.Gameplay:45
      if (Math.abs(point[0]-resetX) < xRange/8) _reset();   // > CustomCode.Gameplay:46
      else if (Math.abs(point[0]-replayX) < xRange/8) replayGame();  // > CustomCode.Gameplay:47
      else if (Math.abs(point[0]-autoplayX) < xRange/4) changeAutoplay();  // > CustomCode.Gameplay:48
      return;  // > CustomCode.Gameplay:49
    }  // > CustomCode.Gameplay:50
    if (running) { // Implement here what happens if you click at a point when the game is running  // > CustomCode.Gameplay:51
      if (Math.abs(point[1]-frogPos[1])<0.75*frogHeight) { // same horizontal  // > CustomCode.Gameplay:52
        if (point[0]>frogPos[0]+tol) moveSpriteTo(RIGHT_MOVE);  // > CustomCode.Gameplay:53
        else if (point[0]<frogPos[0]-tol) moveSpriteTo(LEFT_MOVE);  // > CustomCode.Gameplay:54
      }  // > CustomCode.Gameplay:55
      // if (Math.abs(point[0]-frogPos[0])<frogHeight/2)   // > CustomCode.Gameplay:56
      else { // any relevant vertical change  // > CustomCode.Gameplay:57
        if (point[1]>frogPos[1]+tol) moveSpriteTo(UP_MOVE);  // > CustomCode.Gameplay:58
        else if (point[1]<frogPos[1]-tol) moveSpriteTo(DOWN_MOVE);  // > CustomCode.Gameplay:59
      }  // > CustomCode.Gameplay:60
    }  // > CustomCode.Gameplay:61
    else { // Game is stopped  // > CustomCode.Gameplay:62
      if (gameOver) {  // > CustomCode.Gameplay:63
        _initialize();  // > CustomCode.Gameplay:64
        running = true;  // > CustomCode.Gameplay:65
      }  // > CustomCode.Gameplay:66
      else { // Implement here what happens if you click at a point when the game is not running  // > CustomCode.Gameplay:67
        // console.log ("The game is stopped and you clicked at x = "+point[0]+ ", y = "+point[1]);  // > CustomCode.Gameplay:68
        running = true;  // > CustomCode.Gameplay:69
      }  // > CustomCode.Gameplay:70
    }  // > CustomCode.Gameplay:71
  }  // > CustomCode.Gameplay:72
  // What is needed to replay the game (with the same random values)  // > CustomCode.Gameplay:73
  function replayGame() {  // > CustomCode.Gameplay:74
    replay = true;  // > CustomCode.Gameplay:75
    running = false;  // > CustomCode.Gameplay:76
    _initialize();  // > CustomCode.Gameplay:77
  }  // > CustomCode.Gameplay:78
  // What happens when you click at the main message  // > CustomCode.Gameplay:79
  function clickAtMessage () {  // > CustomCode.Gameplay:80
    if (!running) { // Game is stopped  // > CustomCode.Gameplay:81
      if (gameOver) _reset();  // > CustomCode.Gameplay:82
      else running = true;  // > CustomCode.Gameplay:83
    }  // > CustomCode.Gameplay:84
  }  // > CustomCode.Gameplay:85
  // The game ended  // > CustomCode.Gameplay:86
  // @param status one of:  // > CustomCode.Gameplay:87
  //  DEAD_ON_ROAD : you lost on the road  // > CustomCode.Gameplay:88
  //  DEAD_ON_WATER : you lost on the water  // > CustomCode.Gameplay:89
  //  SAFE_ON_LILLY : you won  // > CustomCode.Gameplay:90
  function endOfGame (status) {  // > CustomCode.Gameplay:91
    switch(status) {  // > CustomCode.Gameplay:92
      case DEAD_ON_ROAD  : gameResultMessage = gameLostMessage; frogimage = deadImage;  break;  // > CustomCode.Gameplay:93
      case DEAD_ON_WATER : gameResultMessage = gameLostMessage; frogimage = drownImage; break;  // > CustomCode.Gameplay:94
      case SAFE_ON_PREFERRED_LILLY :   // > CustomCode.Gameplay:95
        if (bestScore==Number.POSITIVE_INFINITY || bestScore<=score) gameResultMessage = gameWonMessage;  // > CustomCode.Gameplay:96
        else if (bestTime==Number.POSITIVE_INFINITY || bestTime<=time) gameResultMessage = gameWonMessage;  // > CustomCode.Gameplay:97
        else gameResultMessage = gameRecordMessage;  // > CustomCode.Gameplay:98
        bestScore = Math.min(score,bestScore);  // > CustomCode.Gameplay:99
        bestTime = Math.min(time,bestTime);  // > CustomCode.Gameplay:100
        break;  // > CustomCode.Gameplay:101
      case SAFE_ON_LILLY :   // > CustomCode.Gameplay:102
        gameResultMessage = gameTiedMessage;  // > CustomCode.Gameplay:103
        break;  // > CustomCode.Gameplay:104
    }  // > CustomCode.Gameplay:105
    message = playAgainMessage;  // > CustomCode.Gameplay:106
    running = false;  // > CustomCode.Gameplay:107
    gameOver = true;  // > CustomCode.Gameplay:108
  }  // > CustomCode.Gameplay:109

  /**  // > CustomCode.Objects:1
   * whether the frog is crossing the road  // > CustomCode.Objects:2
   * @return true or false  // > CustomCode.Objects:3
   */  // > CustomCode.Objects:4
  function isFrogCrossingRoad() {  // > CustomCode.Objects:5
    return frogPos[1]>roadBottom && frogPos[1]<(roadBottom+roadHeight);  // > CustomCode.Objects:6
  }  // > CustomCode.Objects:7
  /**  // > CustomCode.Objects:8
   * whether the frog is crossing the water  // > CustomCode.Objects:9
   * @return true or false  // > CustomCode.Objects:10
   */  // > CustomCode.Objects:11
  function isFrogCrossingWater() {  // > CustomCode.Objects:12
    return frogPos[1]>waterBottom; // && frogPos[1]<(waterBottom+waterHeight);  // > CustomCode.Objects:13
  }  // > CustomCode.Objects:14
  /**  // > CustomCode.Objects:15
   * whether a point is out of the game limits  // > CustomCode.Objects:16
   * @param point the double[2] point to be checked  // > CustomCode.Objects:17
   * @return true or false  // > CustomCode.Objects:18
   */  // > CustomCode.Objects:19
  function isOutOfBounds(location) {  // > CustomCode.Objects:20
    var side = frogWidth/2;  // > CustomCode.Objects:21
    if      (location[0]+side>=xMax) return true;  // > CustomCode.Objects:22
    else if (location[0]-side<=xMin) return true;  // > CustomCode.Objects:23
    else if (location[1]+side>=yMax) return true;  // > CustomCode.Objects:24
    else if (location[1]-side<=yMin) return true;  // > CustomCode.Objects:25
    return false;  // > CustomCode.Objects:26
  }  // > CustomCode.Objects:27
  /**  // > CustomCode.Objects:28
   * Wether the frog at the given point collides with one of these objects  // > CustomCode.Objects:29
   * for private use, mainly  // > CustomCode.Objects:30
   */  // > CustomCode.Objects:31
  function conflictsWithObjects (point,objectX, objectY, objectWidth) {  // > CustomCode.Objects:32
    if (Math.abs(point[1]-objectY)>tol) return false;  // > CustomCode.Objects:33
    var margin = objectWidth/2;  // > CustomCode.Objects:34
    var xCenter = point[0], xLeft = xCenter - frogWidth/2, xRight = xCenter + frogWidth/2;  // > CustomCode.Objects:35
    for (var i=0, n=objectX.length; i<n; i++) {  // > CustomCode.Objects:36
      if (xCenter<objectX[i]) {  // > CustomCode.Objects:37
        if (xRight>(objectX[i]-margin)) return true;  // > CustomCode.Objects:38
      }  // > CustomCode.Objects:39
      else {  // > CustomCode.Objects:40
        if (xLeft <(objectX[i]+margin)) return true;  // > CustomCode.Objects:41
      }  // > CustomCode.Objects:42
    }  // > CustomCode.Objects:43
    return false;  // > CustomCode.Objects:44
  }  // > CustomCode.Objects:45
  /**  // > CustomCode.Objects:46
   * Whether the given location on the road is safe for the frog  // > CustomCode.Objects:47
   * @param point the point to check for  // > CustomCode.Objects:48
   * @return true is safe, false if the frog would die there  // > CustomCode.Objects:49
   */  // > CustomCode.Objects:50
  function isRoadLocationSafe (location) {   // > CustomCode.Objects:51
    if (isOutOfBounds(location)) return false;  // > CustomCode.Objects:52
    // Order is not relevant  // > CustomCode.Objects:53
    if (conflictsWithObjects(location,raceCarX,  raceCarY,  raceCarWidth))   return false;   // > CustomCode.Objects:54
    if (conflictsWithObjects(location,yellowCarX,yellowCarY,yellowCarWidth)) return false;   // > CustomCode.Objects:55
    if (conflictsWithObjects(location,redCarX,   redCarY,   redCarWidth))    return false;  // > CustomCode.Objects:56
    if (conflictsWithObjects(location,truckX,    truckY,    truckWidth))     return false;  // > CustomCode.Objects:57
    if (conflictsWithObjects(location,bikeX,     bikeY,     bikeWidth))      return false;  // > CustomCode.Objects:58
    return true;  // > CustomCode.Objects:59
  }  // > CustomCode.Objects:60
  /**  // > CustomCode.Objects:61
   * Whether the frog is on top of one of these objects  // > CustomCode.Objects:62
   * for private use, mainly  // > CustomCode.Objects:63
   * @return -1 if false, the index of the object it sits on, if true  // > CustomCode.Objects:64
   */  // > CustomCode.Objects:65
  function isOnTopOfWhichObject (location, objectX, objectY, objectWidth) {  // > CustomCode.Objects:66
    var margin = objectWidth/2;  // > CustomCode.Objects:67
    if (Math.abs(location[1]-objectY)>tol) return -1;  // > CustomCode.Objects:68
    for (var i=0, n=objectX.length; i<n; i++) {  // > CustomCode.Objects:69
      if (Math.abs(location[0]-objectX[i])<margin) return i;  // > CustomCode.Objects:70
    }  // > CustomCode.Objects:71
    return -1;  // > CustomCode.Objects:72
  }  // > CustomCode.Objects:73
  /**  // > CustomCode.Objects:74
   * Whether the frog is on top of one of these objects  // > CustomCode.Objects:75
   * for private use, mainly  // > CustomCode.Objects:76
   */  // > CustomCode.Objects:77
  function isOnTopOfObjects (location, objectX, objectY, objectWidth) {  // > CustomCode.Objects:78
    return isOnTopOfWhichObject(location, objectX, objectY, objectWidth)>=0;  // > CustomCode.Objects:79
  }  // > CustomCode.Objects:80
  /**  // > CustomCode.Objects:81
   * Whether the frog is on top of one of the objects in a group  // > CustomCode.Objects:82
   * for private use, mainly  // > CustomCode.Objects:83
   * @return the index is true, -1 if false  // > CustomCode.Objects:84
   */  // > CustomCode.Objects:85
  function isOnTopOfGroup (location, nGroups, nObjPerGroup, objectX, objectY, objectVx, objectWidth) {  // > CustomCode.Objects:86
    var margin = objectWidth/2;  // > CustomCode.Objects:87
    if (Math.abs(location[1]-objectY)>tol) return false;  // > CustomCode.Objects:88
    for (var j=0; j<nGroups; j++) {  // > CustomCode.Objects:89
      var firstIndex = j*nObjPerGroup;  // > CustomCode.Objects:90
      var lastIndex  = firstIndex+nObjPerGroup-1;  // > CustomCode.Objects:91
      var limit;  // > CustomCode.Objects:92
      if (objectVx>0) limit = (objectX[firstIndex]<objectX[lastIndex]) ? xMax : objectX[firstIndex];  // > CustomCode.Objects:93
      else            limit = (objectX[firstIndex]>objectX[lastIndex]) ? xMin : objectX[firstIndex];  // > CustomCode.Objects:94
      if (location[0]<limit+margin && location[0]>objectX[lastIndex]-margin) return true; // inside of group  // > CustomCode.Objects:95
    }  // > CustomCode.Objects:96
    return false;  // > CustomCode.Objects:97
  }  // > CustomCode.Objects:98
  /**  // > CustomCode.Objects:99
   * Whether the frog is on top of an object and, if so, give it the speed of that object  // > CustomCode.Objects:100
   * @return true if the frog is on top of an object  // > CustomCode.Objects:101
   */  // > CustomCode.Objects:102
   function checkFrogWaterLocation() {  // > CustomCode.Objects:103
    if (isOutOfBounds(frogPos)) return false;  // > CustomCode.Objects:104
    if (isOnTopOfObjects(frogPos,mapleLogX,mapleLogY,mapleLogWidth)) { frogVx = mapleLogVx; return true; }  // > CustomCode.Objects:105
    if (isOnTopOfObjects(frogPos,oakLogX,  oakLogY,  oakLogWidth))   { frogVx = oakLogVx;   return true; }  // > CustomCode.Objects:106
    if (isOnTopOfObjects(frogPos,boatX,    boatY,    boatWidth))     { frogVx = boatVx;     return true; }  // > CustomCode.Objects:107
    if (isOnTopOfGroup(frogPos,numTurtleGroups,numTurtlesPerGroup,turtleX,turtleY,turtleVx,turtleWidth))  { frogVx = turtleVx;  return true; }  // > CustomCode.Objects:108
    if (isOnTopOfGroup(frogPos,numFishGroups,  numFishPerGroup,   fishX,  fishY,  fishVx,  fishWidth))    { frogVx = fishVx;    return true; }  // > CustomCode.Objects:109
    return false;  // > CustomCode.Objects:110
  }  // > CustomCode.Objects:111
  function getYellowLilyX() {  // > CustomCode.Objects:112
    return padX[padPreferred];  // > CustomCode.Objects:113
  }  // > CustomCode.Objects:114

  /**  // > CustomCode.Animations:1
   * Whether an object leaves the playground  // > CustomCode.Animations:2
   * for private use, mainly  // > CustomCode.Animations:3
   * @returns a factor:  // > CustomCode.Animations:4
   *    0 : no  // > CustomCode.Animations:5
   *   +1 : yes, on the right  // > CustomCode.Animations:6
   *   -1 : yes, to the left  // > CustomCode.Animations:7
   */  // > CustomCode.Animations:8
  function moves(oX,oVx,margin) {  // > CustomCode.Animations:9
    if (oVx>0) { // Moving right  // > CustomCode.Animations:10
      if (oX-margin>xMax) return +1;  // > CustomCode.Animations:11
    }  // > CustomCode.Animations:12
    else { // Moving left  // > CustomCode.Animations:13
      if (oX+margin<xMin) return -1;  // > CustomCode.Animations:14
    }  // > CustomCode.Animations:15
    return 0;  // > CustomCode.Animations:16
  }  // > CustomCode.Animations:17
      // > CustomCode.Animations:18
  function moveObjects (objectX, objectVx, objectWidth, objectSpacing) {  // > CustomCode.Animations:19
    var margin = objectWidth/2;  // > CustomCode.Animations:20
    for (var i=0, nObjects = objectX.length; i<nObjects; i++) {  // > CustomCode.Animations:21
      objectX[i] +=  objectVx*deltaTime;  // > CustomCode.Animations:22
      var move = moves(objectX[i],objectVx,margin);  // > CustomCode.Animations:23
      if (move) {  // > CustomCode.Animations:24
        var previousIndex = (i>0) ? i-1 : nObjects-1;  // > CustomCode.Animations:25
        objectX[i] = objectX[previousIndex] - move*getRandomDouble(2,4)*objectSpacing;  // > CustomCode.Animations:26
        // Do not appear out of the blue  // > CustomCode.Animations:27
        objectX[i] = (move>0) ? Math.min(xMin-margin,objectX[i]) : Math.max(xMax+margin,objectX[i]);  // > CustomCode.Animations:28
      } // end of if move  // > CustomCode.Animations:29
    } // end of for i  // > CustomCode.Animations:30
  }  // > CustomCode.Animations:31
  function moveObjectsInGroups (nGroups, nObjPerGroup, objectX, objectVx, objectWidth, objectSpacing) {  // > CustomCode.Animations:32
    var nObjects = nGroups*nObjPerGroup;  // > CustomCode.Animations:33
    var margin = objectWidth/2;  // > CustomCode.Animations:34
    for (var j=0; j<nGroups; j++) {  // > CustomCode.Animations:35
      for (var i=0; i<nObjPerGroup; i++) {  // > CustomCode.Animations:36
        var index = j*nObjPerGroup+i;  // > CustomCode.Animations:37
        objectX[index] += objectVx*deltaTime;  // > CustomCode.Animations:38
        var move = moves(objectX[index],objectVx,margin);  // > CustomCode.Animations:39
        if (move) {  // > CustomCode.Animations:40
          if (i===0) {  // > CustomCode.Animations:41
            if (j===0) objectX[index] = objectX[nObjects-1] - move*objectSpacing; // first object; move behind last object in last group  // > CustomCode.Animations:42
            else       objectX[index] = objectX[index-1]    - move*objectSpacing; // first object in group; move behind previous group  // > CustomCode.Animations:43
          }  // > CustomCode.Animations:44
          else objectX[index] = objectX[index-1] - move*objectWidth;  // all other objects follow the previous one  // > CustomCode.Animations:45
          // Do not appear out of the blue  // > CustomCode.Animations:46
          objectX[index] = (move>0) ? Math.min(xMin-margin,objectX[index]) : Math.max(xMax+margin,objectX[index]);  // > CustomCode.Animations:47
        } // End of if move  // > CustomCode.Animations:48
      } // end of for i  // > CustomCode.Animations:49
    } // end of for j  // > CustomCode.Animations:50
  }  // > CustomCode.Animations:51
  /**  // > CustomCode.Animations:52
   * change the fish image to make it swim  // > CustomCode.Animations:53
   */  // > CustomCode.Animations:54
  function switchFishImage() {  // > CustomCode.Animations:55
    if (counter % 10 ===0) {  // > CustomCode.Animations:56
      if (fishImage==fishImageSwim1) fishImage = fishImageSwim2;  // > CustomCode.Animations:57
      else fishImage = fishImageSwim1;  // > CustomCode.Animations:58
    }  // > CustomCode.Animations:59
  }  // > CustomCode.Animations:60
  /* not used  // > CustomCode.Animations:61
  //change the frog image when it moves  // > CustomCode.Animations:62
  function switchFrogImage() {  // > CustomCode.Animations:63
    if (frogimage==smfrogimage) frogimage = medfrogimage;  // > CustomCode.Animations:64
    else frogimage = smfrogimage;  // > CustomCode.Animations:65
  }  // > CustomCode.Animations:66
  */  // > CustomCode.Animations:67

  /**  // > CustomCode.Simple autoplay:1
   * Utility to obtain what would be the location of the frog  // > CustomCode.Simple autoplay:2
   * if it did a number of jumps.  // > CustomCode.Simple autoplay:3
   * @param jumps array on integers. Each integer represents a jump,  // > CustomCode.Simple autoplay:4
   * and can be one of NO_MOVE, LEFT_MOVE, RIGHT_MOVE, DOWN_MOVE, UP_MOVE.  // > CustomCode.Simple autoplay:5
   * @return a double[2] array with the eventual [x,y] coordinates of   // > CustomCode.Simple autoplay:6
   * the frog after the jumps  // > CustomCode.Simple autoplay:7
   */  // > CustomCode.Simple autoplay:8
  function getLocationFromFrog (jumps) {  // > CustomCode.Simple autoplay:9
    var x = frogPos[0], y= frogPos[1];  // > CustomCode.Simple autoplay:10
    for (var i=0, n= jumps.length; i<n; i++) {  // > CustomCode.Simple autoplay:11
      var direction = jumps[i];  // > CustomCode.Simple autoplay:12
      switch(direction) {  // > CustomCode.Simple autoplay:13
        case NO_MOVE  : // Do nothing  // > CustomCode.Simple autoplay:14
          break;  // > CustomCode.Simple autoplay:15
        case LEFT_MOVE  :   // > CustomCode.Simple autoplay:16
          x -= frogJumpSize;  // > CustomCode.Simple autoplay:17
          break;  // > CustomCode.Simple autoplay:18
        case RIGHT_MOVE  :   // > CustomCode.Simple autoplay:19
          x += frogJumpSize;  // > CustomCode.Simple autoplay:20
          break;  // > CustomCode.Simple autoplay:21
        case DOWN_MOVE  :  // > CustomCode.Simple autoplay:22
          y -= frogJumpSize;  // > CustomCode.Simple autoplay:23
          break;  // > CustomCode.Simple autoplay:24
        case UP_MOVE  :   // > CustomCode.Simple autoplay:25
          y += frogJumpSize;  // > CustomCode.Simple autoplay:26
          break;  // > CustomCode.Simple autoplay:27
      } // end of switch  // > CustomCode.Simple autoplay:28
    } // end of for  // > CustomCode.Simple autoplay:29
    return [x,y];  // > CustomCode.Simple autoplay:30
  }  // > CustomCode.Simple autoplay:31
  /**  // > CustomCode.Simple autoplay:32
   * Whether the frog is one jump up from the road  // > CustomCode.Simple autoplay:33
   * @return true or false  // > CustomCode.Simple autoplay:34
   */  // > CustomCode.Simple autoplay:35
  function isFrogReadyToCrossRoad() {  // > CustomCode.Simple autoplay:36
    return frogPos[1]>=(roadBottom-frogJumpSize-tol) && frogPos[1]<roadBottom;  // > CustomCode.Simple autoplay:37
  }  // > CustomCode.Simple autoplay:38
  /**  // > CustomCode.Simple autoplay:39
   * Whether the frog is one jump up from the water  // > CustomCode.Simple autoplay:40
   * @return true or false  // > CustomCode.Simple autoplay:41
   */  // > CustomCode.Simple autoplay:42
  function isFrogReadyToCrossWater() {  // > CustomCode.Simple autoplay:43
    return frogPos[1]>=(waterBottom-frogJumpSize-tol) && frogPos[1]<waterBottom;  // > CustomCode.Simple autoplay:44
  }  // > CustomCode.Simple autoplay:45
  /**  // > CustomCode.Simple autoplay:46
   * The velocity of objects on the same row as the point  // > CustomCode.Simple autoplay:47
   * @param point the double[2] with the coordinates of the point to check (only point[1] matters)  // > CustomCode.Simple autoplay:48
   * @return the velocity. 0 if the point is not in a row with moving objects  // > CustomCode.Simple autoplay:49
   */  // > CustomCode.Simple autoplay:50
  function velocityOfObjects(location) {  // > CustomCode.Simple autoplay:51
    if (Math.abs(location[1]-raceCarY)  <tol) return raceCarVx;  // > CustomCode.Simple autoplay:52
    if (Math.abs(location[1]-yellowCarY)<tol) return yellowCarVx;  // > CustomCode.Simple autoplay:53
    if (Math.abs(location[1]-redCarY)   <tol) return redCarVx;  // > CustomCode.Simple autoplay:54
    if (Math.abs(location[1]-truckY)    <tol) return truckVx;  // > CustomCode.Simple autoplay:55
    if (Math.abs(location[1]-bikeY)     <tol) return bikeVx;  // > CustomCode.Simple autoplay:56
    if (Math.abs(location[1]-mapleLogY) <tol) return mapleLogVx;  // > CustomCode.Simple autoplay:57
    if (Math.abs(location[1]-oakLogY)   <tol) return oakLogVx;  // > CustomCode.Simple autoplay:58
    if (Math.abs(location[1]-boatY)     <tol) return boatVx;  // > CustomCode.Simple autoplay:59
    if (Math.abs(location[1]-fishY)     <tol) return fishVx;  // > CustomCode.Simple autoplay:60
    if (Math.abs(location[1]-turtleY)   <tol) return turtleVx;  // > CustomCode.Simple autoplay:61
    return 0;  // > CustomCode.Simple autoplay:62
  }  // > CustomCode.Simple autoplay:63
  /**  // > CustomCode.Simple autoplay:64
   * The direction of motion of objects in the row of the point  // > CustomCode.Simple autoplay:65
   * @param point the double[2] with the coordinates of the point to check (only point[1] matters)  // > CustomCode.Simple autoplay:66
   * @return the direction, as an integer. One of RIGHT_MOVE, LEFT_MOVE, NO_MOVE  // > CustomCode.Simple autoplay:67
   */  // > CustomCode.Simple autoplay:68
  function directionOfMotion(location) {  // > CustomCode.Simple autoplay:69
    var velocity = velocityOfObjects(location);  // > CustomCode.Simple autoplay:70
    if (velocity>0) return RIGHT_MOVE;  // > CustomCode.Simple autoplay:71
    else if (velocity<0) return LEFT_MOVE;  // > CustomCode.Simple autoplay:72
    return NO_MOVE;  // > CustomCode.Simple autoplay:73
  }  // > CustomCode.Simple autoplay:74
  /**  // > CustomCode.Simple autoplay:75
   * Whether the given location on the water is safe for the frog  // > CustomCode.Simple autoplay:76
   * @param point the point to check for  // > CustomCode.Simple autoplay:77
   * @return true is safe, false if the frog would die there  // > CustomCode.Simple autoplay:78
   */  // > CustomCode.Simple autoplay:79
  function isWaterLocationSafe (location) {   // > CustomCode.Simple autoplay:80
    // Order is not relevant  // > CustomCode.Simple autoplay:81
    if (isOnTopOfObjects (location,mapleLogX,mapleLogY,mapleLogWidth)) return true;  // > CustomCode.Simple autoplay:82
    if (isOnTopOfObjects (location,oakLogX,  oakLogY,  oakLogWidth))   return true;  // > CustomCode.Simple autoplay:83
    if (isOnTopOfObjects (location,boatX,    boatY,    boatWidth))     return true;  // > CustomCode.Simple autoplay:84
    if (isOnTopOfObjects (location,padX,     padY,     padWidth))      return true;  // > CustomCode.Simple autoplay:85
    if (isOnTopOfGroup (location,numTurtleGroups,numTurtlesPerGroup, turtleX,turtleY,turtleVx,turtleWidth)) return true;  // > CustomCode.Simple autoplay:86
    if (isOnTopOfGroup (location,numFishGroups  ,numFishPerGroup,    fishX,  fishY,  fishVx,  fishWidth))   return true;  // > CustomCode.Simple autoplay:87
    return false;  // > CustomCode.Simple autoplay:88
  }   // > CustomCode.Simple autoplay:89
  /**  // > CustomCode.Simple autoplay:90
   * A simple strategy to cross the field  // > CustomCode.Simple autoplay:91
   * @return nothing, really  // > CustomCode.Simple autoplay:92
   */  // > CustomCode.Simple autoplay:93
  function autoplaySimple() {  // > CustomCode.Simple autoplay:94
    // get current location and that of the desired move  // > CustomCode.Simple autoplay:95
    var currentLocation = getLocationFromFrog([NO_MOVE]);  // > CustomCode.Simple autoplay:96
    var pointUp = getLocationFromFrog ([UP_MOVE]);  // > CustomCode.Simple autoplay:97
    // in the next line, || is the logical 'or' operator  // > CustomCode.Simple autoplay:98
    if (isFrogCrossingRoad() || isFrogReadyToCrossRoad()) {  // > CustomCode.Simple autoplay:99
      // we are on the road phase  // > CustomCode.Simple autoplay:100
      if (isRoadLocationSafe(pointUp)) {   // > CustomCode.Simple autoplay:101
      // it is safe to move up  // > CustomCode.Simple autoplay:102
        if (directionOfMotion(pointUp)==LEFT_MOVE) {   // > CustomCode.Simple autoplay:103
          // next row objects move left  // > CustomCode.Simple autoplay:104
          if (isRoadLocationSafe(getLocationFromFrog([UP_MOVE,RIGHT_MOVE])))   // > CustomCode.Simple autoplay:105
            // both the locations UP and UP+RIGHT from the frog are safe!  // > CustomCode.Simple autoplay:106
            return moveSpriteTo(UP_MOVE);  // > CustomCode.Simple autoplay:107
        }  // > CustomCode.Simple autoplay:108
        else {   // > CustomCode.Simple autoplay:109
          // next row objects move right  // > CustomCode.Simple autoplay:110
          if (isRoadLocationSafe(getLocationFromFrog([UP_MOVE,LEFT_MOVE])))   // > CustomCode.Simple autoplay:111
          // both the locations UP and UP+LEFT from the frog are safe!  // > CustomCode.Simple autoplay:112
            return moveSpriteTo(UP_MOVE);  // > CustomCode.Simple autoplay:113
        }  // > CustomCode.Simple autoplay:114
      }  // > CustomCode.Simple autoplay:115
      // cannot move up  // > CustomCode.Simple autoplay:116
      if (isFrogCrossingRoad()) {  // > CustomCode.Simple autoplay:117
        // already on the road, look for danger!  // > CustomCode.Simple autoplay:118
        if (directionOfMotion(currentLocation)==LEFT_MOVE) {   // > CustomCode.Simple autoplay:119
          // objects come from the right  // > CustomCode.Simple autoplay:120
          if (!isRoadLocationSafe(getLocationFromFrog([RIGHT_MOVE]))) {   // > CustomCode.Simple autoplay:121
            // Danger: object approaching!  // > CustomCode.Simple autoplay:122
            if (isRoadLocationSafe(getLocationFromFrog([LEFT_MOVE])))   // > CustomCode.Simple autoplay:123
              return moveSpriteTo(LEFT_MOVE); // escape by jumping left  // > CustomCode.Simple autoplay:124
            if (isRoadLocationSafe(getLocationFromFrog([DOWN_MOVE])))   // > CustomCode.Simple autoplay:125
              return moveSpriteTo(DOWN_MOVE); // escape by jumping down  // > CustomCode.Simple autoplay:126
          }  // > CustomCode.Simple autoplay:127
        }  // > CustomCode.Simple autoplay:128
        else {   // > CustomCode.Simple autoplay:129
          // objects come from the left  // > CustomCode.Simple autoplay:130
          if (!isRoadLocationSafe(getLocationFromFrog([LEFT_MOVE]))) {   // > CustomCode.Simple autoplay:131
            // Danger: object approaching!  // > CustomCode.Simple autoplay:132
            if (isRoadLocationSafe(getLocationFromFrog([RIGHT_MOVE])))   // > CustomCode.Simple autoplay:133
              return moveSpriteTo(RIGHT_MOVE); // escape by jumping left  // > CustomCode.Simple autoplay:134
            if (isRoadLocationSafe(getLocationFromFrog([DOWN_MOVE ])))   // > CustomCode.Simple autoplay:135
              return moveSpriteTo(DOWN_MOVE ); // escape by jumping down  // > CustomCode.Simple autoplay:136
          }  // > CustomCode.Simple autoplay:137
        }  // > CustomCode.Simple autoplay:138
      } // end of isOnTheRoad  // > CustomCode.Simple autoplay:139
      else { // Not crossing it, but ready to cross the road  // > CustomCode.Simple autoplay:140
        // approach the center of the field, it will give you more chances  // > CustomCode.Simple autoplay:141
        if (currentLocation[0]<xMiddle) return moveSpriteTo(RIGHT_MOVE);  // > CustomCode.Simple autoplay:142
        if (currentLocation[0]>xMiddle) return moveSpriteTo(LEFT_MOVE);  // > CustomCode.Simple autoplay:143
      }  // > CustomCode.Simple autoplay:144
    } // end of road phase  // > CustomCode.Simple autoplay:145
    else if (isFrogCrossingWater() || isFrogReadyToCrossWater()) {   // > CustomCode.Simple autoplay:146
      // we are on the water phase  // > CustomCode.Simple autoplay:147
      if (isWaterLocationSafe(pointUp)) return moveSpriteTo(UP_MOVE);  // > CustomCode.Simple autoplay:148
      // Cannot move up  // > CustomCode.Simple autoplay:149
      if (isFrogCrossingWater()) {   // > CustomCode.Simple autoplay:150
        // already on the water, look for danger!  // > CustomCode.Simple autoplay:151
        if (directionOfMotion(currentLocation)==LEFT_MOVE) {   // > CustomCode.Simple autoplay:152
          // water objects move to the left  // > CustomCode.Simple autoplay:153
          if (isOutOfBounds(getLocationFromFrog([LEFT_MOVE]))) {   // > CustomCode.Simple autoplay:154
            // Danger! reaching the border  // > CustomCode.Simple autoplay:155
            if (isWaterLocationSafe(getLocationFromFrog([RIGHT_MOVE])))   // > CustomCode.Simple autoplay:156
              return moveSpriteTo(RIGHT_MOVE); // escape by jumping right  // > CustomCode.Simple autoplay:157
            if (isWaterLocationSafe(getLocationFromFrog([DOWN_MOVE ])))   // > CustomCode.Simple autoplay:158
              return moveSpriteTo(DOWN_MOVE ); // escape by jumping down  // > CustomCode.Simple autoplay:159
          }  // > CustomCode.Simple autoplay:160
        }  // > CustomCode.Simple autoplay:161
        else {   // > CustomCode.Simple autoplay:162
          // water objects move to the right  // > CustomCode.Simple autoplay:163
          if (isOutOfBounds(getLocationFromFrog ([RIGHT_MOVE]))) {    // > CustomCode.Simple autoplay:164
            // Danger! reaching the border  // > CustomCode.Simple autoplay:165
            if (isWaterLocationSafe(getLocationFromFrog([LEFT_MOVE])))   // > CustomCode.Simple autoplay:166
              return moveSpriteTo(LEFT_MOVE);  // escape by jumping left  // > CustomCode.Simple autoplay:167
            if (isWaterLocationSafe(getLocationFromFrog([DOWN_MOVE])))   // > CustomCode.Simple autoplay:168
              return moveSpriteTo(DOWN_MOVE ); // escape by jumping down  // > CustomCode.Simple autoplay:169
          }  // > CustomCode.Simple autoplay:170
        }  // > CustomCode.Simple autoplay:171
      } // end of isOnTheWater  // > CustomCode.Simple autoplay:172
    } // end of water phase  // > CustomCode.Simple autoplay:173
    else moveSpriteTo(UP_MOVE); // Approach next obstacle  // > CustomCode.Simple autoplay:174
    // Otherwise...  // > CustomCode.Simple autoplay:175
    // Stay where you are and hope that in deltaTime seconds you can move  // > CustomCode.Simple autoplay:176
  }  // > CustomCode.Simple autoplay:177

  // Tries to predict the location of the objects in timeSteps units of time from now.  // > CustomCode.Optimal autoplay:1
  // We say that it "TRIES" because the random nature of border appearances makes it impossible   // > CustomCode.Optimal autoplay:2
  // to be 100% sure of objects that go beyond borders!  // > CustomCode.Optimal autoplay:3
  // returns a new array with the X coordinates of the objects  // > CustomCode.Optimal autoplay:4
  function predictObjects (timeSteps, objectX, objectVx, objectWidth, objectSpacing) {  // > CustomCode.Optimal autoplay:5
    var margin = objectWidth/2;  // > CustomCode.Optimal autoplay:6
    var xCoordinates = [];  // > CustomCode.Optimal autoplay:7
    var nObjects = objectX.length;  // > CustomCode.Optimal autoplay:8
    for (var j=0; j<nObjects; j++) xCoordinates[j] = objectX[j];  // > CustomCode.Optimal autoplay:9
    while (timeSteps>0) {  // > CustomCode.Optimal autoplay:10
      for (var i=0; i<nObjects; i++) {  // > CustomCode.Optimal autoplay:11
        xCoordinates[i] +=  objectVx*deltaTime;  // > CustomCode.Optimal autoplay:12
        var move = moves(xCoordinates[i],objectVx,margin);  // > CustomCode.Optimal autoplay:13
        if (move) {  // > CustomCode.Optimal autoplay:14
          var previousIndex = (i>0) ? i-1 : nObjects-1;  // > CustomCode.Optimal autoplay:15
          xCoordinates[i] = xCoordinates[previousIndex] - move*getRandomDouble(2,4)*objectSpacing;  // > CustomCode.Optimal autoplay:16
          // Do not appear out of the blue  // > CustomCode.Optimal autoplay:17
          xCoordinates[i] = (move>0) ? Math.min(xMin-margin,objectX[i]) : Math.max(xMax+margin,xCoordinates[i]);  // > CustomCode.Optimal autoplay:18
        } // end of if move  // > CustomCode.Optimal autoplay:19
      } // end of for i  // > CustomCode.Optimal autoplay:20
      timeSteps--;  // > CustomCode.Optimal autoplay:21
    } // end of while timeSteps>0  // > CustomCode.Optimal autoplay:22
    return xCoordinates;  // > CustomCode.Optimal autoplay:23
  }  // > CustomCode.Optimal autoplay:24
  // Tries to predict the location of the objects in timeSteps units of time from now.  // > CustomCode.Optimal autoplay:25
  // We say that it "TRIES" because the random nature of border appearances makes it impossible   // > CustomCode.Optimal autoplay:26
  // to be 100% sure of objects that go beyond borders!  // > CustomCode.Optimal autoplay:27
  // returns a new array with the X coordinates of the objects  // > CustomCode.Optimal autoplay:28
  function predictObjectsInGroups (timeSteps, nGroups, nObjPerGroup, objectX, objectVx, objectWidth, objectSpacing) {  // > CustomCode.Optimal autoplay:29
    var nObjects = nGroups*nObjPerGroup;  // > CustomCode.Optimal autoplay:30
    var margin = objectWidth/2;  // > CustomCode.Optimal autoplay:31
    var xCoordinates = [];  // > CustomCode.Optimal autoplay:32
    for (var k=0; k<nObjects; k++) xCoordinates[k] = objectX[k];  // > CustomCode.Optimal autoplay:33
    while (timeSteps>0) {  // > CustomCode.Optimal autoplay:34
      for (var j=0; j<nGroups; j++) {  // > CustomCode.Optimal autoplay:35
        for (var i=0; i<nObjPerGroup; i++) {  // > CustomCode.Optimal autoplay:36
          var index = j*nObjPerGroup+i;  // > CustomCode.Optimal autoplay:37
          xCoordinates[index] += objectVx*deltaTime;  // > CustomCode.Optimal autoplay:38
          var move = moves(xCoordinates[index],objectVx,margin);  // > CustomCode.Optimal autoplay:39
          if (move) {  // > CustomCode.Optimal autoplay:40
            if (i===0) {  // > CustomCode.Optimal autoplay:41
              if (j===0) xCoordinates[index] = xCoordinates[nObjects-1] - move*objectSpacing; // first object; move behind last object in last group  // > CustomCode.Optimal autoplay:42
              else       xCoordinates[index] = xCoordinates[index-1]    - move*objectSpacing; // first object in group; move behind previous group  // > CustomCode.Optimal autoplay:43
            }  // > CustomCode.Optimal autoplay:44
            else xCoordinates[index] = xCoordinates[index-1] - move*objectWidth;  // all other objects follow the previous one  // > CustomCode.Optimal autoplay:45
            // Do not appear out of the blue  // > CustomCode.Optimal autoplay:46
            xCoordinates[index] = (move>0) ? Math.min(xMin-margin,xCoordinates[index]) : Math.max(xMax+margin,xCoordinates[index]);  // > CustomCode.Optimal autoplay:47
          } // End of if move  // > CustomCode.Optimal autoplay:48
        } // end of for i  // > CustomCode.Optimal autoplay:49
      } // end of for j  // > CustomCode.Optimal autoplay:50
      timeSteps--;  // > CustomCode.Optimal autoplay:51
    }  // > CustomCode.Optimal autoplay:52
    return xCoordinates;  // > CustomCode.Optimal autoplay:53
  }  // > CustomCode.Optimal autoplay:54
     // > CustomCode.Optimal autoplay:55
  function willCollideWithObjects(point,timeSteps,objectX, objectY, objectVx, objectWidth, objectSpacing) {  // > CustomCode.Optimal autoplay:56
    if (Math.abs(point[1]-objectY)>tol) return false; // Not in this row  // > CustomCode.Optimal autoplay:57
    // Predict where objects will be in this row  // > CustomCode.Optimal autoplay:58
    var prediction = predictObjects (timeSteps, objectX, objectVx, objectWidth, objectSpacing);  // > CustomCode.Optimal autoplay:59
    return conflictsWithObjects(point, prediction,  objectY,  objectWidth);   // > CustomCode.Optimal autoplay:60
  }  // > CustomCode.Optimal autoplay:61
  function willBeOnTopOfObjects(point,timeSteps,objectX, objectY, objectVx, objectWidth, objectSpacing) {  // > CustomCode.Optimal autoplay:62
    if (Math.abs(point[1]-objectY)>tol) return false; // Not in this row  // > CustomCode.Optimal autoplay:63
    // Predict where objects will be in this row  // > CustomCode.Optimal autoplay:64
    var prediction = predictObjects (timeSteps,objectX,objectVx,objectWidth,objectSpacing);  // > CustomCode.Optimal autoplay:65
    return isOnTopOfObjects(point, prediction,  objectY,  objectWidth);  // > CustomCode.Optimal autoplay:66
  }  // > CustomCode.Optimal autoplay:67
  function willBeOnTopOfGroup(point,timeSteps,nGroups, nObjPerGroup, objectX, objectY, objectVx, objectWidth, objectSpacing) {  // > CustomCode.Optimal autoplay:68
    if (Math.abs(point[1]-objectY)>tol) return false; // Not in this row  // > CustomCode.Optimal autoplay:69
    // Predict where objects will be in this row  // > CustomCode.Optimal autoplay:70
    var prediction = predictObjectsInGroups (timeSteps,nGroups,nObjPerGroup,objectX,objectVx,objectWidth,objectSpacing);  // > CustomCode.Optimal autoplay:71
    return isOnTopOfGroup(point, nGroups, nObjPerGroup, prediction,  objectY,  objectVx, objectWidth);  // > CustomCode.Optimal autoplay:72
  }  // > CustomCode.Optimal autoplay:73
  function isOnLilyPad(location) {  // > CustomCode.Optimal autoplay:74
    return (isOnTopOfWhichObject(location,padX,padY,padWidth)>=0);  // > CustomCode.Optimal autoplay:75
  }  // > CustomCode.Optimal autoplay:76
  function isFrogOnBoat() {  // > CustomCode.Optimal autoplay:77
    return (isOnTopOfWhichObject(frogPos,boatX,boatY,boatWidth)>=0);  // > CustomCode.Optimal autoplay:78
  }  // > CustomCode.Optimal autoplay:79
  /**  // > CustomCode.Optimal autoplay:80
   * An strategy to cross the field minimizing the distance  // > CustomCode.Optimal autoplay:81
   * @param nicest a boolean indicating if the frog is allowed  // > CustomCode.Optimal autoplay:82
   * to move horizontally or wait in place while crossing the road  // > CustomCode.Optimal autoplay:83
   * @return nothing, really  // > CustomCode.Optimal autoplay:84
   */  // > CustomCode.Optimal autoplay:85
  function autoplayOptimal(nicest) {  // > CustomCode.Optimal autoplay:86
    if (isFrogOnBoat()) {  // > CustomCode.Optimal autoplay:87
      var pointUp = getLocationFromFrog ([UP_MOVE]);      // > CustomCode.Optimal autoplay:88
      if (isOnLilyPad(pointUp)) return moveSpriteTo(UP_MOVE); // Win!  // > CustomCode.Optimal autoplay:89
      return; // else, wait a little bit  // > CustomCode.Optimal autoplay:90
    }  // > CustomCode.Optimal autoplay:91
    if (optimalJumps && optimalJumps.length>0) {   // > CustomCode.Optimal autoplay:92
      // the frog already knows what to do: jump!  // > CustomCode.Optimal autoplay:93
      // extract next move and remove it from the array  // > CustomCode.Optimal autoplay:94
      var nextMove = optimalJumps.shift();  // > CustomCode.Optimal autoplay:95
      return moveSpriteTo(nextMove);  // > CustomCode.Optimal autoplay:96
    }  // > CustomCode.Optimal autoplay:97
    var currentLocation = getLocationFromFrog([NO_MOVE]);    // > CustomCode.Optimal autoplay:98
    if (currentLocation[1]<roadBottom) {   // > CustomCode.Optimal autoplay:99
      // Find how to cross the road  // > CustomCode.Optimal autoplay:100
      if (nicest) optimalJumps = findNicestRoadSolution();  // > CustomCode.Optimal autoplay:101
      else optimalJumps = findOptimalRoadSolution();  // > CustomCode.Optimal autoplay:102
    }  // > CustomCode.Optimal autoplay:103
    else if (currentLocation[1]<waterBottom) {  // > CustomCode.Optimal autoplay:104
      // if on the sand, move towards the yellow lily  // > CustomCode.Optimal autoplay:105
      var motionAllowed = towardsYellowLilyVertical(currentLocation);  // > CustomCode.Optimal autoplay:106
      if (motionAllowed!=NO_MOVE) return moveSpriteTo(motionAllowed);  // > CustomCode.Optimal autoplay:107
      // else, try to find the optimal water path  // > CustomCode.Optimal autoplay:108
      optimalJumps = findOptimalWaterSolution();  // > CustomCode.Optimal autoplay:109
    }  // > CustomCode.Optimal autoplay:110
  }  // > CustomCode.Optimal autoplay:111
  // --------------------------------------------------  // > CustomCode.Optimal autoplay:112
  function towardsYellowLilyVertical(location) {  // > CustomCode.Optimal autoplay:113
    var margin = padWidth/2;  // > CustomCode.Optimal autoplay:114
    var limit = getYellowLilyX()-boatVx*deltaTime+margin;  // > CustomCode.Optimal autoplay:115
    if (location[0]<limit) return RIGHT_MOVE;  // > CustomCode.Optimal autoplay:116
    if (location[0]-frogJumpSize>limit) return LEFT_MOVE;  // > CustomCode.Optimal autoplay:117
    return NO_MOVE;  // > CustomCode.Optimal autoplay:118
  }  // > CustomCode.Optimal autoplay:119
  // Status of a location in the road after some jumps  // > CustomCode.Optimal autoplay:120
  // returs:   // > CustomCode.Optimal autoplay:121
  //  0 still alive and crossing the road  // > CustomCode.Optimal autoplay:122
  //  1 safely crossed the road  // > CustomCode.Optimal autoplay:123
  // -1 dead on road  // > CustomCode.Optimal autoplay:124
  function statusOfRoadLocation (jumps) {  // > CustomCode.Optimal autoplay:125
    var point = getLocationFromFrog (jumps);  // > CustomCode.Optimal autoplay:126
    willKillYou = [point[0],point[1]];  // > CustomCode.Optimal autoplay:127
    if (isOutOfBounds(point)) return -1;  // > CustomCode.Optimal autoplay:128
    if (point[1]>=(roadBottom+roadHeight)) return 1; // Will reach target!  // > CustomCode.Optimal autoplay:129
    var timeSteps = jumps.length;  // > CustomCode.Optimal autoplay:130
    // Order is not relevant  // > CustomCode.Optimal autoplay:131
    if (willCollideWithObjects(point, timeSteps, raceCarX,   raceCarY,   raceCarVx,   raceCarWidth,   raceCarSpacing))   return -1;  // > CustomCode.Optimal autoplay:132
    if (willCollideWithObjects(point, timeSteps, yellowCarX, yellowCarY, yellowCarVx, yellowCarWidth, yellowCarSpacing)) return -1;  // > CustomCode.Optimal autoplay:133
    if (willCollideWithObjects(point, timeSteps, redCarX,    redCarY,    redCarVx,    redCarWidth,    redCarSpacing))    return -1;  // > CustomCode.Optimal autoplay:134
    if (willCollideWithObjects(point, timeSteps, truckX,     truckY,     truckVx,     truckWidth,     truckSpacing))     return -1;  // > CustomCode.Optimal autoplay:135
    if (willCollideWithObjects(point, timeSteps, bikeX,      bikeY,      bikeVx,      bikeWidth,      bikeSpacing))      return -1;  // > CustomCode.Optimal autoplay:136
    return 0;  // > CustomCode.Optimal autoplay:137
  }  // > CustomCode.Optimal autoplay:138
  /**  // > CustomCode.Optimal autoplay:139
   * Return the optimal sequence of jumps for crossing the road  // > CustomCode.Optimal autoplay:140
   * Actually returns a sequence of six UP_MOVE jumps  // > CustomCode.Optimal autoplay:141
   * or null, if any of these jumps is dangerous  // > CustomCode.Optimal autoplay:142
   */  // > CustomCode.Optimal autoplay:143
  function findOptimalRoadSolution() {  // > CustomCode.Optimal autoplay:144
    willDie = false;  // > CustomCode.Optimal autoplay:145
    var jumps = [];   // > CustomCode.Optimal autoplay:146
    // we need 6 jumps up to cross the road  // > CustomCode.Optimal autoplay:147
    // but the last one is always safe  // > CustomCode.Optimal autoplay:148
    for (var row=0; row<5; row++) {   // > CustomCode.Optimal autoplay:149
      jumps.push(UP_MOVE);  // > CustomCode.Optimal autoplay:150
      if (statusOfRoadLocation(jumps)<0) { // This is a bad path  // > CustomCode.Optimal autoplay:151
        willDie = true;  // > CustomCode.Optimal autoplay:152
        return null;   // > CustomCode.Optimal autoplay:153
      }  // > CustomCode.Optimal autoplay:154
    }  // > CustomCode.Optimal autoplay:155
    jumps.push(UP_MOVE); // Add the final jump  // > CustomCode.Optimal autoplay:156
    // Survived: i.e. will cross the road  // > CustomCode.Optimal autoplay:157
    return jumps; // will start motion  // > CustomCode.Optimal autoplay:158
  }  // > CustomCode.Optimal autoplay:159
  function findNicestRoadSolution() {  // > CustomCode.Optimal autoplay:160
    var jumpList = [];  // > CustomCode.Optimal autoplay:161
    // First jump  // > CustomCode.Optimal autoplay:162
    switch(statusOfRoadLocation([UP_MOVE])) {  // > CustomCode.Optimal autoplay:163
      case -1 : return null; // Initial jump up is NOT safe:  // > CustomCode.Optimal autoplay:164
      case 0  : jumpList.push([UP_MOVE]); break; // a good start  // > CustomCode.Optimal autoplay:165
      default : return null; // actually, not possible  // > CustomCode.Optimal autoplay:166
    }  // > CustomCode.Optimal autoplay:167
    // Now explore repeatedly all possibilities  // > CustomCode.Optimal autoplay:168
    var tries=0;  // > CustomCode.Optimal autoplay:169
    while (tries<20) { // Avoid infinite loop or too long waits  // > CustomCode.Optimal autoplay:170
      var newJumpList = [];  // > CustomCode.Optimal autoplay:171
      for (var i=0, n=jumpList.length; i<n; i++) {  // > CustomCode.Optimal autoplay:172
        var jumps = jumpList[i];  // > CustomCode.Optimal autoplay:173
        var newJumps = jumps.concat([UP_MOVE]);  // > CustomCode.Optimal autoplay:174
        switch(statusOfRoadLocation(newJumps)) {  // > CustomCode.Optimal autoplay:175
          case 1 : return newJumps; // will cross road safely  // > CustomCode.Optimal autoplay:176
          case 0 : newJumpList.push(newJumps); break; // Still possible  // > CustomCode.Optimal autoplay:177
          default: break; // do nothing. This is a bad path  // > CustomCode.Optimal autoplay:178
        }  // > CustomCode.Optimal autoplay:179
        newJumps = jumps.concat([NO_MOVE]);  // > CustomCode.Optimal autoplay:180
        switch(statusOfRoadLocation(newJumps)) {  // > CustomCode.Optimal autoplay:181
          case 1 : break; // actually impossible  // > CustomCode.Optimal autoplay:182
          case 0 : newJumpList.push(newJumps); break; // Still possible  // > CustomCode.Optimal autoplay:183
          default: break; // do nothing. This is a bad path  // > CustomCode.Optimal autoplay:184
        }  // > CustomCode.Optimal autoplay:185
        var location = getLocationFromFrog(jumps);  // > CustomCode.Optimal autoplay:186
        var motionAllowed = towardsYellowLilyVertical(location);  // > CustomCode.Optimal autoplay:187
        if (motionAllowed!=NO_MOVE) {  // > CustomCode.Optimal autoplay:188
          newJumps = jumps.concat([motionAllowed]);  // > CustomCode.Optimal autoplay:189
          switch(statusOfRoadLocation (newJumps)) {  // > CustomCode.Optimal autoplay:190
            case 1 : break; // actually impossible  // > CustomCode.Optimal autoplay:191
            case 0 : newJumpList.push(newJumps); break; // Still possible  // > CustomCode.Optimal autoplay:192
            default: break; // do nothing. This is a bad path  // > CustomCode.Optimal autoplay:193
          }  // > CustomCode.Optimal autoplay:194
        }  // > CustomCode.Optimal autoplay:195
      }  // > CustomCode.Optimal autoplay:196
      if (newJumpList.length<=0) return null;  // > CustomCode.Optimal autoplay:197
      // Copy the list of possible jumps and repeat  // > CustomCode.Optimal autoplay:198
      jumpList = [];  // > CustomCode.Optimal autoplay:199
      for (var j=0, m=newJumpList.length; j<m; j++)   // > CustomCode.Optimal autoplay:200
        jumpList[j] = newJumpList[j];  // > CustomCode.Optimal autoplay:201
      tries++;  // > CustomCode.Optimal autoplay:202
    }  // > CustomCode.Optimal autoplay:203
    return null;  // > CustomCode.Optimal autoplay:204
  }  // > CustomCode.Optimal autoplay:205
  // --------------------------------------------------  // > CustomCode.Optimal autoplay:206
  // Status of a location in the water after some jumps  // > CustomCode.Optimal autoplay:207
  // returs a code and updates the correction array   // > CustomCode.Optimal autoplay:208
  //  0 valid jumps  // > CustomCode.Optimal autoplay:209
  // -1 would die  // > CustomCode.Optimal autoplay:210
  function statusOfWaterLocation (jumps,correction) {  // > CustomCode.Optimal autoplay:211
    var point = getLocationFromFrog (jumps);  // > CustomCode.Optimal autoplay:212
    point[0] += correction[0];  // > CustomCode.Optimal autoplay:213
    willKillYou = [point[0],point[1]];  // > CustomCode.Optimal autoplay:214
    willDie = false;  // > CustomCode.Optimal autoplay:215
    if (isOutOfBounds(point)) return -1;  // > CustomCode.Optimal autoplay:216
    var timeSteps = jumps.length;  // > CustomCode.Optimal autoplay:217
    if (willBeOnTopOfObjects(point,timeSteps,mapleLogX, mapleLogY, mapleLogVx, mapleLogWidth, mapleLogSpacing)) {  // > CustomCode.Optimal autoplay:218
      correction[0] += mapleLogVx*deltaTime;  // > CustomCode.Optimal autoplay:219
      return 0;  // > CustomCode.Optimal autoplay:220
    }  // > CustomCode.Optimal autoplay:221
    if (willBeOnTopOfObjects(point,timeSteps,oakLogX,   oakLogY,   oakLogVx,   oakLogWidth,   oakLogSpacing))   {  // > CustomCode.Optimal autoplay:222
      correction[0] += oakLogVx*deltaTime;  // > CustomCode.Optimal autoplay:223
      return 0;  // > CustomCode.Optimal autoplay:224
    }  // > CustomCode.Optimal autoplay:225
    if (willBeOnTopOfObjects(point,timeSteps,boatX,     boatY,     boatVx,     boatWidth,     boatSpacing))     {  // > CustomCode.Optimal autoplay:226
      correction[0] += boatVx*deltaTime;  // > CustomCode.Optimal autoplay:227
      return 0;  // > CustomCode.Optimal autoplay:228
    }  // > CustomCode.Optimal autoplay:229
    if (willBeOnTopOfGroup(point,timeSteps,numTurtleGroups,numTurtlesPerGroup,turtleX, turtleY, turtleVx, turtleWidth, turtleSpacing)) {  // > CustomCode.Optimal autoplay:230
      correction[0] += turtleVx*deltaTime;  // > CustomCode.Optimal autoplay:231
      return 0;  // > CustomCode.Optimal autoplay:232
    }  // > CustomCode.Optimal autoplay:233
    if (willBeOnTopOfGroup(point,timeSteps,numFishGroups,numFishPerGroup,fishX, fishY, fishVx, fishWidth, fishSpacing)) {  // > CustomCode.Optimal autoplay:234
      correction[0] += fishVx*deltaTime;  // > CustomCode.Optimal autoplay:235
      return 0;  // > CustomCode.Optimal autoplay:236
    }  // > CustomCode.Optimal autoplay:237
    return -1;  // > CustomCode.Optimal autoplay:238
  }  // > CustomCode.Optimal autoplay:239
  /**  // > CustomCode.Optimal autoplay:240
   * Whether there is a boat in place for reaching  // > CustomCode.Optimal autoplay:241
   * the yellow lily  // > CustomCode.Optimal autoplay:242
   */  // > CustomCode.Optimal autoplay:243
  function isBoatInPlace() {  // > CustomCode.Optimal autoplay:244
    var margin = padWidth/2;  // > CustomCode.Optimal autoplay:245
    var deltaX = boatVx*deltaTime; // Distance travelled by a boat in 4 time steps  // > CustomCode.Optimal autoplay:246
    var hotSpot = padX[padPreferred]-boatVx*deltaTime+margin; // +boatWidth/2;  // > CustomCode.Optimal autoplay:247
    for (var i=0, n=boatX.length; i<n; i++) {  // > CustomCode.Optimal autoplay:248
      var boatWillBe = boatX[i]-4*deltaX;  // > CustomCode.Optimal autoplay:249
      if ((boatWillBe < hotSpot+boatWidth/2) && (boatWillBe > hotSpot-boatWidth/2)) {  // > CustomCode.Optimal autoplay:250
        boatInPlace = i;  // > CustomCode.Optimal autoplay:251
        return true;  // > CustomCode.Optimal autoplay:252
      }  // > CustomCode.Optimal autoplay:253
    }  // > CustomCode.Optimal autoplay:254
    boatInPlace = -1;  // > CustomCode.Optimal autoplay:255
    return false;  // > CustomCode.Optimal autoplay:256
  }  // > CustomCode.Optimal autoplay:257
  /**  // > CustomCode.Optimal autoplay:258
   * Return the optimal sequence of jumps for crossing the water  // > CustomCode.Optimal autoplay:259
   * Actually returns a sequence of six UP_MOVE jumps  // > CustomCode.Optimal autoplay:260
   * or null, if any of these jumps is dangerous  // > CustomCode.Optimal autoplay:261
   */  // > CustomCode.Optimal autoplay:262
  function findOptimalWaterSolution() {  // > CustomCode.Optimal autoplay:263
    // Find if there is a top boat in the right location  // > CustomCode.Optimal autoplay:264
    if (!isBoatInPlace()) {  // > CustomCode.Optimal autoplay:265
      willDie = false;  // > CustomCode.Optimal autoplay:266
      boatInPlace = -1;  // > CustomCode.Optimal autoplay:267
      return null;  // > CustomCode.Optimal autoplay:268
    }  // > CustomCode.Optimal autoplay:269
    var correction = [0]; // initial location correction due to motion  // > CustomCode.Optimal autoplay:270
    var jumps = [];   // > CustomCode.Optimal autoplay:271
    for (var row=0; row<5; row++) { // 5 jumps to reach a boat  // > CustomCode.Optimal autoplay:272
      jumps.push(UP_MOVE);  // > CustomCode.Optimal autoplay:273
      if (statusOfWaterLocation (jumps,correction)<0) { // This is a bad path  // > CustomCode.Optimal autoplay:274
        willDie = true;  // > CustomCode.Optimal autoplay:275
        return null;   // > CustomCode.Optimal autoplay:276
      }  // > CustomCode.Optimal autoplay:277
    }  // > CustomCode.Optimal autoplay:278
    // Survived: i.e. will reach the boat  // > CustomCode.Optimal autoplay:279
    return jumps; // will start motion  // > CustomCode.Optimal autoplay:280
  }  // > CustomCode.Optimal autoplay:281

  // EDIT this function to implement an autoplay strategy  // > CustomCode.Autoplay:1
  function changeAutoplay() {  // > CustomCode.Autoplay:2
    if (userAutoplayShowDialog) return userAutoplayEval();  // > CustomCode.Autoplay:3
    boatInPlace = -1;  // > CustomCode.Autoplay:4
    willDie = false;  // > CustomCode.Autoplay:5
    userAutoplayShowDialog = false;  // > CustomCode.Autoplay:6
    _play();  // > CustomCode.Autoplay:7
    autoplayOption = (autoplayOption+1) % 5;  // > CustomCode.Autoplay:8
    if (!FULL_AUTOPLAY) {  // > CustomCode.Autoplay:9
      if (autoplayOption==2) autoplayOption = 4; // Skip advanced  // > CustomCode.Autoplay:10
      if (autoplayOption==3) autoplayOption = 4; // Skip nicest    // > CustomCode.Autoplay:11
    }  // > CustomCode.Autoplay:12
    switch (autoplayOption) {  // > CustomCode.Autoplay:13
      case 0 : autoplayText = "None"; break;  // > CustomCode.Autoplay:14
      case 1 : autoplayText = "Simple"; break;  // > CustomCode.Autoplay:15
      case 2 : autoplayText = "Advanced"; break;  // > CustomCode.Autoplay:16
      case 3 : autoplayText = "Nicest"; break;  // > CustomCode.Autoplay:17
      case 4 :  // > CustomCode.Autoplay:18
        autoplayText = "User";   // > CustomCode.Autoplay:19
        userAutoplayShowDialog = true;  // > CustomCode.Autoplay:20
        _pause();  // > CustomCode.Autoplay:21
        break;  // > CustomCode.Autoplay:22
    }  // > CustomCode.Autoplay:23
  }  // > CustomCode.Autoplay:24
  function autoplayAction() {  // > CustomCode.Autoplay:25
    switch (autoplayOption) {  // > CustomCode.Autoplay:26
      case 1 : autoplaySimple(); break;  // > CustomCode.Autoplay:27
      case 2 : autoplayOptimal(false); break;  // > CustomCode.Autoplay:28
      case 3 : autoplayOptimal(true); break;  // > CustomCode.Autoplay:29
      case 4 : userAutoplayFunction(); break;  // > CustomCode.Autoplay:30
      default: break; // do nothing  // > CustomCode.Autoplay:31
    }  // > CustomCode.Autoplay:32
  }  // > CustomCode.Autoplay:33
  // *** No need to edit this page beyond this point  // > CustomCode.Autoplay:34
  function userAutoplayEval() {  // > CustomCode.Autoplay:35
    userAutoplayFunction = undefined;  // > CustomCode.Autoplay:36
    try {  // > CustomCode.Autoplay:37
  //    userAutoplayFunction = new Function(userAutoplay);  // > CustomCode.Autoplay:38
      var userPlay = _view.autoplayTextArea.getValue();  // > CustomCode.Autoplay:39
      eval(userPlay);  // > CustomCode.Autoplay:40
    } catch (error) {  // > CustomCode.Autoplay:41
      userAutoplayFunction = undefined;  // > CustomCode.Autoplay:42
    }  // > CustomCode.Autoplay:43
    if (!userAutoplayFunction) {  // > CustomCode.Autoplay:44
      alert("No valid userAutoplay function provided!\nPlease, edit the userAutoplay function");  // > CustomCode.Autoplay:45
      autoplayOption = 0;  // > CustomCode.Autoplay:46
    }  // > CustomCode.Autoplay:47
    userAutoplayShowDialog = false;  // > CustomCode.Autoplay:48
    _play();  // > CustomCode.Autoplay:49
  }  // > CustomCode.Autoplay:50

  // *** No need to edit this page  // > CustomCode.Keyboard:1
  // Must be called from an Initializationpage to make  // > CustomCode.Keyboard:2
  // the game responsive to keyboard events  // > CustomCode.Keyboard:3
  function initializeKeyboardEvents() {  // > CustomCode.Keyboard:4
    // keyboard press down event  // > CustomCode.Keyboard:5
    window.onkeydown = function(event) {  // > CustomCode.Keyboard:6
      var char = getKey(event || window.event);  // > CustomCode.Keyboard:7
      console.log ("You pressed char="+char);  // > CustomCode.Keyboard:8
      if (running) {  // > CustomCode.Keyboard:9
        switch(char) {  // > CustomCode.Keyboard:10
          case 37 : moveSpriteTo(LEFT_MOVE);  event.preventDefault(); event.stopPropagation(); break;  // > CustomCode.Keyboard:11
          case 38 : moveSpriteTo(UP_MOVE);    event.preventDefault(); event.stopPropagation(); break;  // > CustomCode.Keyboard:12
          case 39 : moveSpriteTo(RIGHT_MOVE); event.preventDefault(); event.stopPropagation(); break;  // > CustomCode.Keyboard:13
          case 40 : moveSpriteTo(DOWN_MOVE);  event.preventDefault(); event.stopPropagation(); break;  // > CustomCode.Keyboard:14
        }  // > CustomCode.Keyboard:15
      }  // > CustomCode.Keyboard:16
      return _isPaused;  // > CustomCode.Keyboard:17
    };  // > CustomCode.Keyboard:18
  }  // > CustomCode.Keyboard:19
  // get character; event.type must be keypress  // > CustomCode.Keyboard:20
  // this is used for the keyboard control  // > CustomCode.Keyboard:21
  function getCharKey(event) {  // > CustomCode.Keyboard:22
    if (event.which === null) {  // > CustomCode.Keyboard:23
      return event.keyCode; // IE  // > CustomCode.Keyboard:24
    } else if (event.which!==0 && event.charCode!==0) {  // > CustomCode.Keyboard:25
      return event.which;   // other browsers  // > CustomCode.Keyboard:26
    } else {  // > CustomCode.Keyboard:27
      return -1; // special key  // > CustomCode.Keyboard:28
    }  // > CustomCode.Keyboard:29
  }  // > CustomCode.Keyboard:30
  // get character; event.type must be keydown  // > CustomCode.Keyboard:31
  // this is used for the keyboard control  // > CustomCode.Keyboard:32
  // and allows for pressing down arrows  // > CustomCode.Keyboard:33
  function getKey(event) {  // > CustomCode.Keyboard:34
    return event.keyCode; // IE  // > CustomCode.Keyboard:35
  }  // > CustomCode.Keyboard:36

  // *** No need to edit this page  // > CustomCode.Random:1
  // Returns a random integer between the given ones, both included  // > CustomCode.Random:2
  function getRandomInteger(min,max) {  // > CustomCode.Random:3
    return randomGenerator.nextRange(min,max+1);  // > CustomCode.Random:4
  }  // > CustomCode.Random:5
  // Returns a random double between the given ones, both included  // > CustomCode.Random:6
  function getRandomDouble(min,max) {  // > CustomCode.Random:7
    return min + randomGenerator.nextDouble()*(max-min);  // > CustomCode.Random:8
  }  // > CustomCode.Random:9
  // Random number generator  // > CustomCode.Random:10
  // Adapted from http://stackoverflow.com/questions/424292/seedable-javascript-random-number-generator  // > CustomCode.Random:11
  function RNG(seed) {   // > CustomCode.Random:12
    var self = {};  // > CustomCode.Random:13
    // LCG using GCC's constants  // > CustomCode.Random:14
    self.m = 0x80000000; // 2**31;  // > CustomCode.Random:15
    self.a = 1103515245;  // > CustomCode.Random:16
    self.c = 12345;  // > CustomCode.Random:17
    self.firstState = (seed) ? seed : Math.floor(Math.random() * (self.m-1));   // > CustomCode.Random:18
    self.state = self.firstState;  // > CustomCode.Random:19
      // > CustomCode.Random:20
    self.nextInt = function() {  // > CustomCode.Random:21
      self.state = (self.a * self.state + self.c) % self.m;  // > CustomCode.Random:22
      return self.state;  // > CustomCode.Random:23
    };  // > CustomCode.Random:24
      // > CustomCode.Random:25
    self.nextDouble = function() { // returns in range [0,1]  // > CustomCode.Random:26
      return self.nextInt() / (self.m - 1);  // > CustomCode.Random:27
    };  // > CustomCode.Random:28
    self.nextRange = function(start, end) {  // > CustomCode.Random:29
    // returns in range [start, end): including start, excluding end  // > CustomCode.Random:30
    // can't modulu nextInt because of weak randomness in lower bits  // > CustomCode.Random:31
      var rangeSize = end - start;  // > CustomCode.Random:32
      var randomUnder1 = self.nextInt() / self.m;  // > CustomCode.Random:33
      return start + Math.floor(randomUnder1 * rangeSize);  // > CustomCode.Random:34
    };  // > CustomCode.Random:35
    self.setResetState = function() {  // > CustomCode.Random:36
      self.firstState = self.state;  // > CustomCode.Random:37
    };  // > CustomCode.Random:38
      // > CustomCode.Random:39
    self.reset = function() {  // > CustomCode.Random:40
      self.state = self.firstState;  // > CustomCode.Random:41
    };  // > CustomCode.Random:42
      // > CustomCode.Random:43
    return self;  // > CustomCode.Random:44
  }  // > CustomCode.Random:45

  _model.addToInitialization(function() {
    if (!__pagesEnabled["First tasks"]) return;
    initializeKeyboardEvents(); // See "Keyboard" custom page  // > Initialization.First tasks:1
    if (replay) randomGenerator.reset(); // See "Random" custom page  // > Initialization.First tasks:2
    else randomGenerator.setResetState();  // > Initialization.First tasks:3
    var userPlay =   // > Initialization.First tasks:4
      "/**\n"+  // > Initialization.First tasks:5
      "  * User autoplay function\n"+  // > Initialization.First tasks:6
      "  * When User autoplay is selected, this function is called to move the frog in\n"+  // > Initialization.First tasks:7
      "  * each game step, after all other objects are in place.\n"+  // > Initialization.First tasks:8
      "  *\n"+  // > Initialization.First tasks:9
      "  * Here are some predefined functions that you can use in your autoplay strategy:\n"+  // > Initialization.First tasks:10
      "  * - getLocationFromFrog(jumps); The jumps parameter is an array of predefined integers\n"+  // > Initialization.First tasks:11
      "  *     codes NO_MOVE, LEFT_MOVE, RIGHT_MOVE, DOWN_MOVE, and UP_MOVE. \n"+  // > Initialization.First tasks:12
      "  * - isFrogCrossingRoad(); Whether the frog is now on the road. \n"+  // > Initialization.First tasks:13
      "  * - isFrogReadyToCrossRoad(); Whether the frog is less than one jump up from the road.\n"+  // > Initialization.First tasks:14
      "  * - isFrogCrossingWater(); Whether the frog is now on the water.\n"+  // > Initialization.First tasks:15
      "  * - isFrogReadyToCrossWater(); Whether the frog is less than one jump up from the shore.\n"+  // > Initialization.First tasks:16
      "  * - isRoadLocationSafe (location); location is a double[2] array with the coordinates\n"+  // > Initialization.First tasks:17
      "  *     of the location (use getLocationFromFrog()).\n"+  // > Initialization.First tasks:18
      "  * - isWaterLocationSafe (location); location as in isRoadLocationSafe().\n"+  // > Initialization.First tasks:19
      "  * - directionOfMotion(location); location as in isRoadLocationSafe().\n"+  // > Initialization.First tasks:20
      "  *      Returns one of NO_MOVE, LEFT_MOVE, or RIGHT_MOVE.\n"+  // > Initialization.First tasks:21
      "  * - moveSpriteTo (direction); Moves the frog in the given direction. direction must be\n"+  // > Initialization.First tasks:22
      "  *     one of NO_MOVE, LEFT_MOVE, RIGHT_MOVE, DOWN_MOVE, or UP_MOVE.\n"+  // > Initialization.First tasks:23
      "  */\n"+  // > Initialization.First tasks:24
      " userAutoplayFunction = function() {\n"+  // > Initialization.First tasks:25
      "  ; // Do nothing\n"+  // > Initialization.First tasks:26
      "}";  // > Initialization.First tasks:27
    _view.autoplayTextArea.setValue(userPlay);  // > Initialization.First tasks:28
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Ponds"]) return;
    var x = xMin + xRange/8;  // > Initialization.Ponds:1
    var dx = xRange/4;  // > Initialization.Ponds:2
    for (var i=0; i<numPonds; i++, x+=dx) {  // > Initialization.Ponds:3
      padX[i] = pondX[i] = x;  // > Initialization.Ponds:4
      padImage[i] = "./pvg_frogger/lillypad.png";  // > Initialization.Ponds:5
    }  // > Initialization.Ponds:6
    padPreferred = getRandomInteger(0,numPads-1);  // > Initialization.Ponds:7
    padImage[padPreferred] = "./pvg_frogger/lillypad_yellow.png";  // > Initialization.Ponds:8
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Road objects"]) return;
    var i;  // > Initialization.Road objects:1
    raceCarX[0] = xMin-raceCarWidth/2;  // > Initialization.Road objects:2
    for (i=1; i<numRaceCars; i++) raceCarX[i] = raceCarX[i-1] + getRandomDouble(2,4)*raceCarSpacing;  // > Initialization.Road objects:3
        // > Initialization.Road objects:4
    yellowCarX[0] = xMax+yellowCarWidth/2;  // > Initialization.Road objects:5
    for (i=1; i<numYellowCars; i++) yellowCarX[i] = yellowCarX[i-1] - getRandomDouble(2,4)*yellowCarSpacing;  // > Initialization.Road objects:6
    redCarX[0] = xMin-redCarWidth/2;  // > Initialization.Road objects:7
    for (i=1; i<numRedCars; i++) redCarX[i] = redCarX[i-1] + getRandomDouble(2,4)*redCarSpacing;  // > Initialization.Road objects:8
    truckX[0] = xMin-truckWidth/2;  // > Initialization.Road objects:9
    for (i=1; i<numTrucks; i++) truckX[i] = truckX[i-1] + getRandomDouble(2,4)*truckSpacing;  // > Initialization.Road objects:10
    bikeX[0] = xMax+bikeWidth/2;  // > Initialization.Road objects:11
    for (i=1; i<numBikes; i++) bikeX[i] = bikeX[i-1] - getRandomDouble(2,4)*bikeSpacing;  // > Initialization.Road objects:12
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Water objects"]) return;
    var i,j;  // > Initialization.Water objects:1
    var index=0;  // > Initialization.Water objects:2
    var xStart;  // > Initialization.Water objects:3
    mapleLogX[0] = xMin-mapleLogWidth/2;  // > Initialization.Water objects:4
    for (i=1; i<numMapleLogs; i++) mapleLogX[i] = mapleLogX[i-1] + getRandomDouble(2,4)*mapleLogSpacing;  // > Initialization.Water objects:5
    oakLogX[0] = xMin-oakLogWidth/2;  // > Initialization.Water objects:6
    for (i=1; i<numOakLogs; i++) oakLogX[i] = oakLogX[i-1] + getRandomDouble(2,4)*oakLogSpacing;  // > Initialization.Water objects:7
    boatX[0] = xMin-boatWidth/2;  // > Initialization.Water objects:8
    for (i=1; i<numBoats; i++) boatX[i] = boatX[i-1] + getRandomDouble(2,4)*boatSpacing;  // > Initialization.Water objects:9
    xStart = xMax - fishSpacing;  // > Initialization.Water objects:10
    for (j=0; j<numFishGroups; j++) {  // > Initialization.Water objects:11
      fishX[j*numFishPerGroup] = xStart;  // > Initialization.Water objects:12
      for (i=1; i<numFishPerGroup; i++) {  // > Initialization.Water objects:13
        index = j*numFishPerGroup + i;  // > Initialization.Water objects:14
        fishX[index] = fishX[index-1] - fishWidth;  // > Initialization.Water objects:15
      }  // > Initialization.Water objects:16
      xStart -= (numFishPerGroup*fishWidth+fishSpacing);    // > Initialization.Water objects:17
    }  // > Initialization.Water objects:18
    xStart = xMax - turtleSpacing;  // > Initialization.Water objects:19
    for (j=0; j<numTurtleGroups; j++) {  // > Initialization.Water objects:20
      turtleX[j*numTurtlesPerGroup] = xStart;  // > Initialization.Water objects:21
      for (i=1; i<numTurtlesPerGroup; i++) {  // > Initialization.Water objects:22
        index = j*numTurtlesPerGroup + i;  // > Initialization.Water objects:23
        turtleX[index]=turtleX[index-1] - turtleWidth;  // > Initialization.Water objects:24
      }  // > Initialization.Water objects:25
      xStart -= (numTurtlesPerGroup*turtleWidth+turtleSpacing);  // > Initialization.Water objects:26
    }  // > Initialization.Water objects:27
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Time"]) return;
    time = 0;  // > Initialization.Time:1
    counter = 0;  // > Initialization.Time:2
    gameOver = false;  // > Initialization.Time:3
    replay = false;  // > Initialization.Time:4
    score = 0;  // > Initialization.Time:5
    optimalJumps = [];  // > Initialization.Time:6
    boatInPlace = -1;  // > Initialization.Time:7
    willDie = false;  // > Initialization.Time:8
    frogimage = smfrogimage;  // > Initialization.Time:9
    frogPos = [xMiddle,frogInitial];  // > Initialization.Time:10
    frogVx = 0;  // > Initialization.Time:11
    frogAngle=Math.PI/2;  // > Initialization.Time:12
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Motion"]) return;
    if (!running) return;  // > Evolution.Motion:1
    //update the clock and counter  // > Evolution.Motion:2
    time += deltaTime;  // > Evolution.Motion:3
    counter++;  // > Evolution.Motion:4
    // This finishes the game after a number of seconds  // > Evolution.Motion:5
    /*  // > Evolution.Motion:6
    if (time>maxTime) {  // > Evolution.Motion:7
      endOfGame(YOU_SURVIVED);  // > Evolution.Motion:8
    }  // > Evolution.Motion:9
    */  // > Evolution.Motion:10
    // *** WRITE below this line your motion actions  // > Evolution.Motion:11
    moveObjects (raceCarX,   raceCarVx,   raceCarWidth,   raceCarSpacing);  // > Evolution.Motion:12
    moveObjects (yellowCarX, yellowCarVx, yellowCarWidth, yellowCarSpacing);  // > Evolution.Motion:13
    moveObjects (redCarX,    redCarVx,    redCarWidth,    redCarSpacing);  // > Evolution.Motion:14
    moveObjects (truckX,     truckVx,     truckWidth,     truckSpacing);  // > Evolution.Motion:15
    moveObjects (bikeX,      bikeVx,      bikeWidth,      bikeSpacing);  // > Evolution.Motion:16
    moveObjects (mapleLogX,  mapleLogVx,  mapleLogWidth,  mapleLogSpacing);  // > Evolution.Motion:17
    moveObjects (oakLogX,    oakLogVx,    oakLogWidth,    oakLogSpacing);  // > Evolution.Motion:18
    moveObjects (boatX,      boatVx,      boatWidth,      boatSpacing);  // > Evolution.Motion:19
    switchFishImage();  // > Evolution.Motion:20
    moveObjectsInGroups (numFishGroups,   numFishPerGroup,   fishX,  fishVx,  fishWidth,  fishSpacing);  // > Evolution.Motion:21
    moveObjectsInGroups (numTurtleGroups, numTurtlesPerGroup,turtleX,turtleVx,turtleWidth,turtleSpacing);  // > Evolution.Motion:22
    // Now, move the frog  // > Evolution.Motion:23
    if (frogVx!==0) { // Frog is moving  // > Evolution.Motion:24
      frogLastPos = [frogPos[0],frogPos[1]];  // > Evolution.Motion:25
      frogPos[0] += frogVx*deltaTime;  // > Evolution.Motion:26
      // score is moved in this game  // > Evolution.Motion:27
      score += (Math.abs(frogPos[0]-frogLastPos[0]) + Math.abs(frogPos[1]-frogLastPos[1]));  // > Evolution.Motion:28
    }  // > Evolution.Motion:29
    // *** WRITE above this line your motion actions  // > Evolution.Motion:30
    // Check for automatic decissions  // > Evolution.Motion:31
    autoplayAction(); // See "Autoplay" Custom page   // > Evolution.Motion:32
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["PostMotion"]) return;
    if(!running) return;  // > Evolution.PostMotion:1
    // *** WRITE below this line any post-motion actions or checks  // > Evolution.PostMotion:2
    // Check world limits  // > Evolution.PostMotion:3
    var side = frogWidth/2;  // > Evolution.PostMotion:4
    if      (frogPos[0]+side>xMax) { frogPos[0] = xMax; return endOfGame(DEAD_ON_ROAD); }  // > Evolution.PostMotion:5
    else if (frogPos[0]-side<xMin) { frogPos[0] = xMin; return endOfGame(DEAD_ON_ROAD); }  // > Evolution.PostMotion:6
    else if (frogPos[1]+side>yMax) { frogPos[1] = yMax; return endOfGame(DEAD_ON_ROAD); }  // > Evolution.PostMotion:7
    else if (frogPos[1]-side<yMin) { frogPos[1] = yMin; return endOfGame(DEAD_ON_ROAD); }  // > Evolution.PostMotion:8
    if (isFrogCrossingRoad()) { // Check road objects  // > Evolution.PostMotion:9
      if (!isRoadLocationSafe(frogPos)) return endOfGame(DEAD_ON_ROAD);  // > Evolution.PostMotion:10
    }  // > Evolution.PostMotion:11
    else if (isFrogCrossingWater()) { // Check water objects  // > Evolution.PostMotion:12
      if (checkFrogWaterLocation()) return; // Save on a water object  // > Evolution.PostMotion:13
      var lillyReached = isOnTopOfWhichObject(frogPos,padX,padY,padWidth);  // > Evolution.PostMotion:14
      if (lillyReached>=0) { // lillypads  // > Evolution.PostMotion:15
        willDie = false;  // > Evolution.PostMotion:16
        if (lillyReached==padPreferred) return endOfGame(SAFE_ON_PREFERRED_LILLY);   // > Evolution.PostMotion:17
        return endOfGame(SAFE_ON_LILLY); // lillypads  // > Evolution.PostMotion:18
      }  // > Evolution.PostMotion:19
      else return endOfGame(DEAD_ON_WATER);  // > Evolution.PostMotion:20
    }  // > Evolution.PostMotion:21
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Scores"]) return;
    scoreText = "Time:"+time.toFixed(0)+"s, Distance:"+score.toFixed(0)+"m" ;  // > FixedRelations.Scores:1
    recordText = "Time:"+((bestTime==Number.POSITIVE_INFINITY)? "?" : bestTime.toFixed(0)+"s")+  // > FixedRelations.Scores:2
                   ", Distance:"+((bestScore==Number.POSITIVE_INFINITY)? "?" : bestScore.toFixed(0)+"m");  // > FixedRelations.Scores:3
                     // > FixedRelations.Scores:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView", width : 600, height : 800 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new pvg_frogger_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.drawingPanel.linkProperty("MaximumY",  function() { return yMax; }, function(_v) { yMax = _v; } ); // HtmlView linking property 'MaximumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumX",  function() { return xMax; }, function(_v) { xMax = _v; } ); // HtmlView linking property 'MaximumX' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnResize", function(_data,_info) {
  _view._touch();

}); // HtmlView setting action 'OnResize' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumX",  function() { return xMin; }, function(_v) { xMin = _v; } ); // HtmlView linking property 'MinimumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumY",  function() { return yMin; }, function(_v) { yMin = _v; } ); // HtmlView linking property 'MinimumY' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnPress", clickAtPoint); // HtmlView setting action 'OnPress' for element 'drawingPanel'
          _view.road.linkProperty("SizeX",  function() { return xRange; }, function(_v) { xRange = _v; } ); // HtmlView linking property 'SizeX' for element 'road'
          _view.road.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'road'
          _view.road.linkProperty("Y",  function() { return roadBottom; }, function(_v) { roadBottom = _v; } ); // HtmlView linking property 'Y' for element 'road'
          _view.road.linkProperty("SizeY",  function() { return roadHeight; }, function(_v) { roadHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'road'
          _view.water.linkProperty("SizeX",  function() { return xRange; }, function(_v) { xRange = _v; } ); // HtmlView linking property 'SizeX' for element 'water'
          _view.water.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'water'
          _view.water.linkProperty("Y",  function() { return waterBottom; }, function(_v) { waterBottom = _v; } ); // HtmlView linking property 'Y' for element 'water'
          _view.water.linkProperty("SizeY",  function() { return waterHeight; }, function(_v) { waterHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'water'
          _view.grass.linkProperty("SizeX",  function() { return xRange; }, function(_v) { xRange = _v; } ); // HtmlView linking property 'SizeX' for element 'grass'
          _view.grass.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'grass'
          _view.grass.linkProperty("Y",  function() { return pondY-rowHeight/2; } ); // HtmlView linking property 'Y' for element 'grass'
          _view.grass.linkProperty("SizeY",  function() { return 3*rowHeight; } ); // HtmlView linking property 'SizeY' for element 'grass'
          _view.ponds.linkProperty("NumberOfElements",  function() { return numPonds; }, function(_v) { numPonds = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'ponds'
          _view.ponds.linkProperty("SizeX",  function() { return pondWidth; }, function(_v) { pondWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'ponds'
          _view.ponds.linkProperty("X",  function() { return pondX; }, function(_v) { pondX = _v; } ); // HtmlView linking property 'X' for element 'ponds'
          _view.ponds.linkProperty("Y",  function() { return pondY; }, function(_v) { pondY = _v; } ); // HtmlView linking property 'Y' for element 'ponds'
          _view.ponds.linkProperty("SizeY",  function() { return pondHeight; }, function(_v) { pondHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'ponds'
          _view.lillypads.linkProperty("NumberOfElements",  function() { return numPonds; }, function(_v) { numPonds = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'lillypads'
          _view.lillypads.linkProperty("SizeX",  function() { return padWidth; }, function(_v) { padWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'lillypads'
          _view.lillypads.linkProperty("X",  function() { return pondX; }, function(_v) { pondX = _v; } ); // HtmlView linking property 'X' for element 'lillypads'
          _view.lillypads.linkProperty("Y",  function() { return padY; }, function(_v) { padY = _v; } ); // HtmlView linking property 'Y' for element 'lillypads'
          _view.lillypads.linkProperty("ImageUrl",  function() { return padImage; }, function(_v) { padImage = _v; } ); // HtmlView linking property 'ImageUrl' for element 'lillypads'
          _view.lillypads.linkProperty("SizeY",  function() { return padHeight; }, function(_v) { padHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'lillypads'
          _view.sand.linkProperty("SizeX",  function() { return xRange; }, function(_v) { xRange = _v; } ); // HtmlView linking property 'SizeX' for element 'sand'
          _view.sand.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'sand'
          _view.sand.linkProperty("Y",  function() { return sandBottom; }, function(_v) { sandBottom = _v; } ); // HtmlView linking property 'Y' for element 'sand'
          _view.sand.linkProperty("SizeY",  function() { return sandHeight; }, function(_v) { sandHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'sand'
          _view.brickpath.linkProperty("SizeX",  function() { return xRange; }, function(_v) { xRange = _v; } ); // HtmlView linking property 'SizeX' for element 'brickpath'
          _view.brickpath.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'brickpath'
          _view.brickpath.linkProperty("Y",  function() { return yMin; }, function(_v) { yMin = _v; } ); // HtmlView linking property 'Y' for element 'brickpath'
          _view.brickpath.linkProperty("SizeY",  function() { return rowHeight; }, function(_v) { rowHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'brickpath'
          _view.shapeSet.linkProperty("NumberOfElements",  function() { return numRaceCars; }, function(_v) { numRaceCars = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeX",  function() { return raceCarWidth; }, function(_v) { raceCarWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'shapeSet'
          _view.shapeSet.linkProperty("X",  function() { return raceCarX; }, function(_v) { raceCarX = _v; } ); // HtmlView linking property 'X' for element 'shapeSet'
          _view.shapeSet.linkProperty("Y",  function() { return raceCarY; }, function(_v) { raceCarY = _v; } ); // HtmlView linking property 'Y' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeY",  function() { return raceCarHeight; }, function(_v) { raceCarHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'shapeSet'
          _view.raceCars.linkProperty("NumberOfElements",  function() { return numRaceCars; }, function(_v) { numRaceCars = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'raceCars'
          _view.raceCars.linkProperty("SizeX",  function() { return raceCarWidth; }, function(_v) { raceCarWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'raceCars'
          _view.raceCars.linkProperty("X",  function() { return raceCarX; }, function(_v) { raceCarX = _v; } ); // HtmlView linking property 'X' for element 'raceCars'
          _view.raceCars.linkProperty("Y",  function() { return raceCarY; }, function(_v) { raceCarY = _v; } ); // HtmlView linking property 'Y' for element 'raceCars'
          _view.raceCars.linkProperty("SizeY",  function() { return raceCarHeight; }, function(_v) { raceCarHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'raceCars'
          _view.yellowCars.linkProperty("NumberOfElements",  function() { return numYellowCars; }, function(_v) { numYellowCars = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'yellowCars'
          _view.yellowCars.linkProperty("SizeX",  function() { return yellowCarWidth; }, function(_v) { yellowCarWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'yellowCars'
          _view.yellowCars.linkProperty("X",  function() { return yellowCarX; }, function(_v) { yellowCarX = _v; } ); // HtmlView linking property 'X' for element 'yellowCars'
          _view.yellowCars.linkProperty("Y",  function() { return yellowCarY; }, function(_v) { yellowCarY = _v; } ); // HtmlView linking property 'Y' for element 'yellowCars'
          _view.yellowCars.linkProperty("SizeY",  function() { return yellowCarHeight; }, function(_v) { yellowCarHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'yellowCars'
          _view.redCars.linkProperty("NumberOfElements",  function() { return numRedCars; }, function(_v) { numRedCars = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'redCars'
          _view.redCars.linkProperty("Transformation",  function() { return Math.PI; } ); // HtmlView linking property 'Transformation' for element 'redCars'
          _view.redCars.linkProperty("SizeX",  function() { return redCarWidth; }, function(_v) { redCarWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'redCars'
          _view.redCars.linkProperty("X",  function() { return redCarX; }, function(_v) { redCarX = _v; } ); // HtmlView linking property 'X' for element 'redCars'
          _view.redCars.linkProperty("Y",  function() { return redCarY; }, function(_v) { redCarY = _v; } ); // HtmlView linking property 'Y' for element 'redCars'
          _view.redCars.linkProperty("SizeY",  function() { return redCarHeight; }, function(_v) { redCarHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'redCars'
          _view.trucks.linkProperty("NumberOfElements",  function() { return numTrucks; }, function(_v) { numTrucks = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'trucks'
          _view.trucks.linkProperty("SizeX",  function() { return truckWidth; }, function(_v) { truckWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'trucks'
          _view.trucks.linkProperty("X",  function() { return truckX; }, function(_v) { truckX = _v; } ); // HtmlView linking property 'X' for element 'trucks'
          _view.trucks.linkProperty("Y",  function() { return truckY; }, function(_v) { truckY = _v; } ); // HtmlView linking property 'Y' for element 'trucks'
          _view.trucks.linkProperty("SizeY",  function() { return truckHeight; }, function(_v) { truckHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'trucks'
          _view.bikes.linkProperty("NumberOfElements",  function() { return numBikes; }, function(_v) { numBikes = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'bikes'
          _view.bikes.linkProperty("SizeX",  function() { return bikeWidth; }, function(_v) { bikeWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'bikes'
          _view.bikes.linkProperty("X",  function() { return bikeX; }, function(_v) { bikeX = _v; } ); // HtmlView linking property 'X' for element 'bikes'
          _view.bikes.linkProperty("Y",  function() { return bikeY; }, function(_v) { bikeY = _v; } ); // HtmlView linking property 'Y' for element 'bikes'
          _view.bikes.linkProperty("SizeY",  function() { return bikeHeight; }, function(_v) { bikeHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'bikes'
          _view.mapleLogs.linkProperty("NumberOfElements",  function() { return numMapleLogs; }, function(_v) { numMapleLogs = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'mapleLogs'
          _view.mapleLogs.linkProperty("SizeX",  function() { return mapleLogWidth; }, function(_v) { mapleLogWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'mapleLogs'
          _view.mapleLogs.linkProperty("X",  function() { return mapleLogX; }, function(_v) { mapleLogX = _v; } ); // HtmlView linking property 'X' for element 'mapleLogs'
          _view.mapleLogs.linkProperty("Y",  function() { return mapleLogY; }, function(_v) { mapleLogY = _v; } ); // HtmlView linking property 'Y' for element 'mapleLogs'
          _view.mapleLogs.linkProperty("SizeY",  function() { return mapleLogHeight; }, function(_v) { mapleLogHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'mapleLogs'
          _view.oakLogs.linkProperty("NumberOfElements",  function() { return numOakLogs; }, function(_v) { numOakLogs = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'oakLogs'
          _view.oakLogs.linkProperty("SizeX",  function() { return oakLogWidth; }, function(_v) { oakLogWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'oakLogs'
          _view.oakLogs.linkProperty("X",  function() { return oakLogX; }, function(_v) { oakLogX = _v; } ); // HtmlView linking property 'X' for element 'oakLogs'
          _view.oakLogs.linkProperty("Y",  function() { return oakLogY; }, function(_v) { oakLogY = _v; } ); // HtmlView linking property 'Y' for element 'oakLogs'
          _view.oakLogs.linkProperty("SizeY",  function() { return oakLogHeight; }, function(_v) { oakLogHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'oakLogs'
          _view.boats.linkProperty("NumberOfElements",  function() { return numBoats; }, function(_v) { numBoats = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'boats'
          _view.boats.linkProperty("SizeX",  function() { return boatWidth; }, function(_v) { boatWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'boats'
          _view.boats.linkProperty("X",  function() { return boatX; }, function(_v) { boatX = _v; } ); // HtmlView linking property 'X' for element 'boats'
          _view.boats.linkProperty("Y",  function() { return boatY; }, function(_v) { boatY = _v; } ); // HtmlView linking property 'Y' for element 'boats'
          _view.boats.linkProperty("SizeY",  function() { return boatHeight; }, function(_v) { boatHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'boats'
          _view.fish.linkProperty("NumberOfElements",  function() { return numFish; }, function(_v) { numFish = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'fish'
          _view.fish.linkProperty("SizeX",  function() { return fishWidth; }, function(_v) { fishWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'fish'
          _view.fish.linkProperty("X",  function() { return fishX; }, function(_v) { fishX = _v; } ); // HtmlView linking property 'X' for element 'fish'
          _view.fish.linkProperty("Y",  function() { return fishY; }, function(_v) { fishY = _v; } ); // HtmlView linking property 'Y' for element 'fish'
          _view.fish.linkProperty("ImageUrl",  function() { return fishImage; }, function(_v) { fishImage = _v; } ); // HtmlView linking property 'ImageUrl' for element 'fish'
          _view.fish.linkProperty("SizeY",  function() { return fishHeight; }, function(_v) { fishHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'fish'
          _view.turtles.linkProperty("NumberOfElements",  function() { return numTurtles; }, function(_v) { numTurtles = _v; } ); // HtmlView linking property 'NumberOfElements' for element 'turtles'
          _view.turtles.linkProperty("Transformation",  function() { return Math.PI; } ); // HtmlView linking property 'Transformation' for element 'turtles'
          _view.turtles.linkProperty("SizeX",  function() { return turtleWidth; }, function(_v) { turtleWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'turtles'
          _view.turtles.linkProperty("X",  function() { return turtleX; }, function(_v) { turtleX = _v; } ); // HtmlView linking property 'X' for element 'turtles'
          _view.turtles.linkProperty("Y",  function() { return turtleY; }, function(_v) { turtleY = _v; } ); // HtmlView linking property 'Y' for element 'turtles'
          _view.turtles.linkProperty("ImageUrl",  function() { return turtleImage; }, function(_v) { turtleImage = _v; } ); // HtmlView linking property 'ImageUrl' for element 'turtles'
          _view.turtles.linkProperty("SizeY",  function() { return turtleHeight; }, function(_v) { turtleHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'turtles'
          _view.shapeFollowBoat.linkProperty("SizeX",  function() { return boatWidth; }, function(_v) { boatWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'shapeFollowBoat'
          _view.shapeFollowBoat.linkProperty("X",  function() { return boatInPlace>=0 ? boatX[boatInPlace] : 0; } ); // HtmlView linking property 'X' for element 'shapeFollowBoat'
          _view.shapeFollowBoat.linkProperty("Y",  function() { return boatY; }, function(_v) { boatY = _v; } ); // HtmlView linking property 'Y' for element 'shapeFollowBoat'
          _view.shapeFollowBoat.linkProperty("Visibility",  function() { return boatInPlace>=0; } ); // HtmlView linking property 'Visibility' for element 'shapeFollowBoat'
          _view.shapeFollowBoat.linkProperty("SizeY",  function() { return boatHeight; }, function(_v) { boatHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'shapeFollowBoat'
          _view.frog.linkProperty("Transformation",  function() { return frogAngle; }, function(_v) { frogAngle = _v; } ); // HtmlView linking property 'Transformation' for element 'frog'
          _view.frog.linkProperty("SizeX",  function() { return frogWidth; }, function(_v) { frogWidth = _v; } ); // HtmlView linking property 'SizeX' for element 'frog'
          _view.frog.linkProperty("Position",  function() { return frogPos; }, function(_v) { frogPos = _v; } ); // HtmlView linking property 'Position' for element 'frog'
          _view.frog.linkProperty("ImageUrl",  function() { return frogimage; }, function(_v) { frogimage = _v; } ); // HtmlView linking property 'ImageUrl' for element 'frog'
          _view.frog.linkProperty("SizeY",  function() { return frogHeight; }, function(_v) { frogHeight = _v; } ); // HtmlView linking property 'SizeY' for element 'frog'
          _view.willKillYouImage.linkProperty("SizeX",  function() { return 0.75*frogWidth; } ); // HtmlView linking property 'SizeX' for element 'willKillYouImage'
          _view.willKillYouImage.linkProperty("Position",  function() { return willKillYou; }, function(_v) { willKillYou = _v; } ); // HtmlView linking property 'Position' for element 'willKillYouImage'
          _view.willKillYouImage.linkProperty("Visibility",  function() { return willDie; }, function(_v) { willDie = _v; } ); // HtmlView linking property 'Visibility' for element 'willKillYouImage'
          _view.willKillYouImage.linkProperty("SizeY",  function() { return 0.75*frogHeight; } ); // HtmlView linking property 'SizeY' for element 'willKillYouImage'
          _view.rightBorder.linkProperty("SizeX",  function() { return 3*xRange; } ); // HtmlView linking property 'SizeX' for element 'rightBorder'
          _view.rightBorder.linkProperty("X",  function() { return xMax; }, function(_v) { xMax = _v; } ); // HtmlView linking property 'X' for element 'rightBorder'
          _view.rightBorder.linkProperty("Y",  function() { return yMin; }, function(_v) { yMin = _v; } ); // HtmlView linking property 'Y' for element 'rightBorder'
          _view.rightBorder.linkProperty("SizeY",  function() { return yRange; }, function(_v) { yRange = _v; } ); // HtmlView linking property 'SizeY' for element 'rightBorder'
          _view.leftBorder.linkProperty("SizeX",  function() { return 3*xRange; } ); // HtmlView linking property 'SizeX' for element 'leftBorder'
          _view.leftBorder.linkProperty("X",  function() { return xMin; }, function(_v) { xMin = _v; } ); // HtmlView linking property 'X' for element 'leftBorder'
          _view.leftBorder.linkProperty("Y",  function() { return yMin; }, function(_v) { yMin = _v; } ); // HtmlView linking property 'Y' for element 'leftBorder'
          _view.leftBorder.linkProperty("SizeY",  function() { return yRange; }, function(_v) { yRange = _v; } ); // HtmlView linking property 'SizeY' for element 'leftBorder'
          _view.messageGroup.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'messageGroup'
          _view.messageGroup.linkProperty("Y",  function() { return messageY; }, function(_v) { messageY = _v; } ); // HtmlView linking property 'Y' for element 'messageGroup'
          _view.messageGroup.linkProperty("Visibility",  function() { return !running; } ); // HtmlView linking property 'Visibility' for element 'messageGroup'
          _view.messageText.linkProperty("Text",  function() { return message; }, function(_v) { message = _v; } ); // HtmlView linking property 'Text' for element 'messageText'
          _view.messageText.linkProperty("Visibility",  function() { return !running; } ); // HtmlView linking property 'Visibility' for element 'messageText'
          _view.gameOverText.linkProperty("Y",  function() { return yRange/6; } ); // HtmlView linking property 'Y' for element 'gameOverText'
          _view.gameOverText.linkProperty("Text",  function() { return gameOverMessage; }, function(_v) { gameOverMessage = _v; } ); // HtmlView linking property 'Text' for element 'gameOverText'
          _view.gameOverText.linkProperty("Visibility",  function() { return gameOver; }, function(_v) { gameOver = _v; } ); // HtmlView linking property 'Visibility' for element 'gameOverText'
          _view.gameResultText.linkProperty("Y",  function() { return yMin + yRange/12; } ); // HtmlView linking property 'Y' for element 'gameResultText'
          _view.gameResultText.linkProperty("Text",  function() { return gameResultMessage; }, function(_v) { gameResultMessage = _v; } ); // HtmlView linking property 'Text' for element 'gameResultText'
          _view.gameResultText.linkProperty("Visibility",  function() { return gameOver; }, function(_v) { gameOver = _v; } ); // HtmlView linking property 'Visibility' for element 'gameResultText'
          _view.scoreGroup.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'scoreGroup'
          _view.scoreGroup.linkProperty("Y",  function() { return scoreY; }, function(_v) { scoreY = _v; } ); // HtmlView linking property 'Y' for element 'scoreGroup'
          _view.scoreGroup.linkProperty("Visibility",  function() { return SHOW_SCORES; }, function(_v) { SHOW_SCORES = _v; } ); // HtmlView linking property 'Visibility' for element 'scoreGroup'
          _view.scoreTitleText.linkProperty("X",  function() { return xMin+xRange/4; } ); // HtmlView linking property 'X' for element 'scoreTitleText'
          _view.scoreTitleText.linkProperty("Y",  function() { return rowHeight; }, function(_v) { rowHeight = _v; } ); // HtmlView linking property 'Y' for element 'scoreTitleText'
          _view.scoreText.linkProperty("X",  function() { return xMin+xRange/4; } ); // HtmlView linking property 'X' for element 'scoreText'
          _view.scoreText.linkProperty("Y",  function() { return rowHeight; }, function(_v) { rowHeight = _v; } ); // HtmlView linking property 'Y' for element 'scoreText'
          _view.scoreText.linkProperty("Text",  function() { return scoreText; }, function(_v) { scoreText = _v; } ); // HtmlView linking property 'Text' for element 'scoreText'
          _view.recordTitleText.linkProperty("X",  function() { return xMin+xRange/4; } ); // HtmlView linking property 'X' for element 'recordTitleText'
          _view.recordTitleText.linkProperty("Y",  function() { return rowHeight/2; } ); // HtmlView linking property 'Y' for element 'recordTitleText'
          _view.recordText.linkProperty("X",  function() { return xMin+xRange/4; } ); // HtmlView linking property 'X' for element 'recordText'
          _view.recordText.linkProperty("Y",  function() { return rowHeight/2; } ); // HtmlView linking property 'Y' for element 'recordText'
          _view.recordText.linkProperty("Text",  function() { return recordText; }, function(_v) { recordText = _v; } ); // HtmlView linking property 'Text' for element 'recordText'
          _view.actionsGroup.linkProperty("X",  function() { return xMiddle; }, function(_v) { xMiddle = _v; } ); // HtmlView linking property 'X' for element 'actionsGroup'
          _view.actionsGroup.linkProperty("Y",  function() { return actionsY; }, function(_v) { actionsY = _v; } ); // HtmlView linking property 'Y' for element 'actionsGroup'
          _view.newGameText.linkProperty("X",  function() { return resetX; }, function(_v) { resetX = _v; } ); // HtmlView linking property 'X' for element 'newGameText'
          _view.replayText.linkProperty("X",  function() { return replayX; }, function(_v) { replayX = _v; } ); // HtmlView linking property 'X' for element 'replayText'
          _view.autoplayText.linkProperty("X",  function() { return autoplayX; }, function(_v) { autoplayX = _v; } ); // HtmlView linking property 'X' for element 'autoplayText'
          _view.autoplayText.linkProperty("Text",  function() { return "AUTOPLAY:"+autoplayText; } ); // HtmlView linking property 'Text' for element 'autoplayText'
          _view.autoplayText.linkProperty("Visibility",  function() { return SHOW_AUTOPLAY; }, function(_v) { SHOW_AUTOPLAY = _v; } ); // HtmlView linking property 'Visibility' for element 'autoplayText'
          _view.autoplayPanel.linkProperty("Visibility",  function() { return userAutoplayShowDialog; }, function(_v) { userAutoplayShowDialog = _v; } ); // HtmlView linking property 'Visibility' for element 'autoplayPanel'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function pvg_frogger_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = pvg_frogger_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Game instructions','./pvg_frogger/pvg_frogger_instructions.xhtml');
  _view._addDescriptionPage('Credits','./pvg_frogger/pvg_frogger_credits.xhtml');
  _view._addDescriptionPage('eBook','./common_files/pvg_book_page.xhtml');

  return _view;
} // end of main function

function pvg_frogger_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view._topFrame) // EJsS HtmlView.HtmlView: declaration of element 'topPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView: setting property 'Height' for element 'topPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView: setting property 'Width' for element 'topPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView: setting property 'CSS' for element 'topPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.topPanel) // EJsS HtmlView.HtmlView: declaration of element 'drawingPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView: setting property 'Width' for element 'drawingPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView: setting property 'CSS' for element 'drawingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView: setting property 'ShowAreaRectangle' for element 'drawingPanel'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView: setting property 'Background' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView: setting property 'Enabled' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("Foreground","none") // EJsS HtmlView.HtmlView: setting property 'Foreground' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"fieldGroup", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'fieldGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"road", _view.fieldGroup) // EJsS HtmlView.HtmlView: declaration of element 'road'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'road'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'road'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'road'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'road'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"water", _view.fieldGroup) // EJsS HtmlView.HtmlView: declaration of element 'water'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'water'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'water'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'water'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'water'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView: setting property 'DrawLines' for element 'water'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"grass", _view.fieldGroup) // EJsS HtmlView.HtmlView: declaration of element 'grass'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'grass'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'grass'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'grass'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'grass'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView: setting property 'DrawLines' for element 'grass'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"ponds", _view.fieldGroup) // EJsS HtmlView.HtmlView: declaration of element 'ponds'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'ponds'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'ponds'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView: setting property 'DrawLines' for element 'ponds'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"lillypads", _view.fieldGroup) // EJsS HtmlView.HtmlView: declaration of element 'lillypads'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"sand", _view.fieldGroup) // EJsS HtmlView.HtmlView: declaration of element 'sand'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'sand'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'sand'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'sand'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'sand'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"brickpath", _view.fieldGroup) // EJsS HtmlView.HtmlView: declaration of element 'brickpath'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'brickpath'
      .setProperty("ImageUrl","./pvg_frogger/brickpath.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'brickpath'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"roadGroup", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'roadGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet", _view.roadGroup) // EJsS HtmlView.HtmlView: declaration of element 'shapeSet'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'shapeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"raceCars", _view.roadGroup) // EJsS HtmlView.HtmlView: declaration of element 'raceCars'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'raceCars'
      .setProperty("ImageUrl","./pvg_frogger/car.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'raceCars'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"yellowCars", _view.roadGroup) // EJsS HtmlView.HtmlView: declaration of element 'yellowCars'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'yellowCars'
      .setProperty("ImageUrl","./pvg_frogger/stockcar.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'yellowCars'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"redCars", _view.roadGroup) // EJsS HtmlView.HtmlView: declaration of element 'redCars'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'redCars'
      .setProperty("ImageUrl","./pvg_frogger/red-stockcar.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'redCars'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"trucks", _view.roadGroup) // EJsS HtmlView.HtmlView: declaration of element 'trucks'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'trucks'
      .setProperty("ImageUrl","./pvg_frogger/truck.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'trucks'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"bikes", _view.roadGroup) // EJsS HtmlView.HtmlView: declaration of element 'bikes'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'bikes'
      .setProperty("ImageUrl","./pvg_frogger/kumoi_bike.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'bikes'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"waterGroup", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'waterGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"mapleLogs", _view.waterGroup) // EJsS HtmlView.HtmlView: declaration of element 'mapleLogs'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'mapleLogs'
      .setProperty("ImageUrl","./pvg_frogger/log-maple-long.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'mapleLogs'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"oakLogs", _view.waterGroup) // EJsS HtmlView.HtmlView: declaration of element 'oakLogs'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'oakLogs'
      .setProperty("ImageUrl","./pvg_frogger/log-oak-short.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'oakLogs'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"boats", _view.waterGroup) // EJsS HtmlView.HtmlView: declaration of element 'boats'
      .setProperty("ImageUrl","./pvg_frogger/boat.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'boats'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"fish", _view.waterGroup) // EJsS HtmlView.HtmlView: declaration of element 'fish'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"turtles", _view.waterGroup) // EJsS HtmlView.HtmlView: declaration of element 'turtles'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapeFollowBoat", _view.waterGroup) // EJsS HtmlView.HtmlView: declaration of element 'shapeFollowBoat'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'shapeFollowBoat'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView: setting property 'LineColor' for element 'shapeFollowBoat'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView: setting property 'LineWidth' for element 'shapeFollowBoat'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView: setting property 'DrawFill' for element 'shapeFollowBoat'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"frog", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'frog'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'frog'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"willKillYouImage", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'willKillYouImage'
      .setProperty("ImageUrl","./pvg_frogger/danger.png") // EJsS HtmlView.HtmlView: setting property 'ImageUrl' for element 'willKillYouImage'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"bordersGroup", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'bordersGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rightBorder", _view.bordersGroup) // EJsS HtmlView.HtmlView: declaration of element 'rightBorder'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'rightBorder'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'rightBorder'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'rightBorder'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView: setting property 'DrawLines' for element 'rightBorder'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"leftBorder", _view.bordersGroup) // EJsS HtmlView.HtmlView: declaration of element 'leftBorder'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'leftBorder'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'leftBorder'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView: setting property 'ShapeType' for element 'leftBorder'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView: setting property 'DrawLines' for element 'leftBorder'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"messageGroup", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'messageGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"messageText", _view.messageGroup) // EJsS HtmlView.HtmlView: declaration of element 'messageText'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'messageText'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'messageText'
      .setProperty("Font","normal bold 22px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'messageText'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"gameOverText", _view.messageGroup) // EJsS HtmlView.HtmlView: declaration of element 'gameOverText'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'gameOverText'
      .setProperty("Font","normal bold 26px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'gameOverText'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"gameResultText", _view.messageGroup) // EJsS HtmlView.HtmlView: declaration of element 'gameResultText'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'gameResultText'
      .setProperty("Font","normal bold 22px ") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'gameResultText'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"scoreGroup", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'scoreGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"scoreTitleText", _view.scoreGroup) // EJsS HtmlView.HtmlView: declaration of element 'scoreTitleText'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'scoreTitleText'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'scoreTitleText'
      .setProperty("Text","SCORE:") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'scoreTitleText'
      .setProperty("Font","normal bold 20px \"Courier New\", Courier, monospace") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'scoreTitleText'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"scoreText", _view.scoreGroup) // EJsS HtmlView.HtmlView: declaration of element 'scoreText'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'scoreText'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'scoreText'
      .setProperty("Font","normal normal 20px \"Courier New\", Courier, monospace") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'scoreText'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"recordTitleText", _view.scoreGroup) // EJsS HtmlView.HtmlView: declaration of element 'recordTitleText'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'recordTitleText'
      .setProperty("SizeX",0.1) // EJsS HtmlView.HtmlView: setting property 'SizeX' for element 'recordTitleText'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'recordTitleText'
      .setProperty("Text","RECORD:") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'recordTitleText'
      .setProperty("Font","normal bold 20px \"Courier New\", Courier, monospace") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'recordTitleText'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"recordText", _view.scoreGroup) // EJsS HtmlView.HtmlView: declaration of element 'recordText'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'recordText'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'recordText'
      .setProperty("Font","normal normal 20px \"Courier New\", Courier, monospace") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'recordText'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"actionsGroup", _view.drawingPanel) // EJsS HtmlView.HtmlView: declaration of element 'actionsGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"newGameText", _view.actionsGroup) // EJsS HtmlView.HtmlView: declaration of element 'newGameText'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'newGameText'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'newGameText'
      .setProperty("Text","RESTART") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'newGameText'
      .setProperty("Font","normal bold 20px \"Courier New\", Courier, monospace") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'newGameText'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"replayText", _view.actionsGroup) // EJsS HtmlView.HtmlView: declaration of element 'replayText'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'replayText'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'replayText'
      .setProperty("Text","REPLAY") // EJsS HtmlView.HtmlView: setting property 'Text' for element 'replayText'
      .setProperty("Font","normal bold 20px \"Courier New\", Courier, monospace") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'replayText'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"autoplayText", _view.actionsGroup) // EJsS HtmlView.HtmlView: declaration of element 'autoplayText'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView: setting property 'FillColor' for element 'autoplayText'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView: setting property 'RelativePosition' for element 'autoplayText'
      .setProperty("Font","normal bold 20px \"Courier New\", Courier, monospace") // EJsS HtmlView.HtmlView: setting property 'Font' for element 'autoplayText'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"autoplayPanel", _view._topFrame) // EJsS HtmlView.HtmlView: declaration of element 'autoplayPanel'
      .setProperty("Height",400) // EJsS HtmlView.HtmlView: setting property 'Height' for element 'autoplayPanel'
      .setProperty("Width",500) // EJsS HtmlView.HtmlView: setting property 'Width' for element 'autoplayPanel'
      .setProperty("CSS",{ "position":"fixed",    "top":"50px",    "left":"50%",   "zIndex":"99999",     "marginLeft":"-250px",     "overflow":"hidden",    "wordWrap":"break-word" }) // EJsS HtmlView.HtmlView: setting property 'CSS' for element 'autoplayPanel'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView: setting property 'Background' for element 'autoplayPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView: setting property 'BorderStyle' for element 'autoplayPanel'
      .setProperty("BorderColor","Blue") // EJsS HtmlView.HtmlView: setting property 'BorderColor' for element 'autoplayPanel'
      .setProperty("BorderWidth",2) // EJsS HtmlView.HtmlView: setting property 'BorderWidth' for element 'autoplayPanel'
      ;

    _view._addElement(EJSS_INTERFACE.textArea,"autoplayTextArea", _view.autoplayPanel) // EJsS HtmlView.HtmlView: declaration of element 'autoplayTextArea'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView: setting property 'Height' for element 'autoplayTextArea'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView: setting property 'Width' for element 'autoplayTextArea'
      .setProperty("ChangeColorOnEdit",false) // EJsS HtmlView.HtmlView: setting property 'ChangeColorOnEdit' for element 'autoplayTextArea'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView: setting property 'Editable' for element 'autoplayTextArea'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Physics Frogger<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/paco/pvg_frogger/logo.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/paco/common_files/AaronTitus2015.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/paco/common_files/PacoEsquembre2011.png" />
 Aaron Titus; Francisco Esquembre
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Aaron Titus and Francisco Esquembre.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new pvg_frogger("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/paco/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
