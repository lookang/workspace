<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Wien (E x B) Filter Exercise 2</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PICUP_ExB_Filter_Exercise_2_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var q; // EjsS Model.Variables.Values.q
  var m; // EjsS Model.Variables.Values.m
  var KE_eV; // EjsS Model.Variables.Values.KE_eV
  var Ex; // EjsS Model.Variables.Values.Ex
  var Ey; // EjsS Model.Variables.Values.Ey
  var Ez; // EjsS Model.Variables.Values.Ez
  var Bx; // EjsS Model.Variables.Values.Bx
  var By; // EjsS Model.Variables.Values.By
  var Bz; // EjsS Model.Variables.Values.Bz
  var D; // EjsS Model.Variables.Values.D
  var L; // EjsS Model.Variables.Values.L

  var u; // EjsS Model.Variables.Derived Quantities.u
  var qoverm; // EjsS Model.Variables.Derived Quantities.qoverm
  var KE; // EjsS Model.Variables.Derived Quantities.KE
  var vmag; // EjsS Model.Variables.Derived Quantities.vmag
  var v1x; // EjsS Model.Variables.Derived Quantities.v1x
  var v1y; // EjsS Model.Variables.Derived Quantities.v1y
  var v1z; // EjsS Model.Variables.Derived Quantities.v1z
  var vzpass; // EjsS Model.Variables.Derived Quantities.vzpass
  var tmax; // EjsS Model.Variables.Derived Quantities.tmax
  var tpoints; // EjsS Model.Variables.Derived Quantities.tpoints

  var position_x; // EjsS Model.Variables.Position Values.position_x
  var xmin; // EjsS Model.Variables.Position Values.xmin
  var xmax; // EjsS Model.Variables.Position Values.xmax
  var position_y; // EjsS Model.Variables.Position Values.position_y
  var ymin; // EjsS Model.Variables.Position Values.ymin
  var ymax; // EjsS Model.Variables.Position Values.ymax
  var position_z; // EjsS Model.Variables.Position Values.position_z
  var zmin; // EjsS Model.Variables.Position Values.zmin
  var zmax; // EjsS Model.Variables.Position Values.zmax

  var vx; // EjsS Model.Variables.Velocity.vx
  var vxf; // EjsS Model.Variables.Velocity.vxf
  var vy; // EjsS Model.Variables.Velocity.vy
  var vyf; // EjsS Model.Variables.Velocity.vyf
  var vz; // EjsS Model.Variables.Velocity.vz
  var vzf; // EjsS Model.Variables.Velocity.vzf
  var vf; // EjsS Model.Variables.Velocity.vf
  var KEf_eV; // EjsS Model.Variables.Velocity.KEf_eV
  var ux; // EjsS Model.Variables.Velocity.ux
  var uy; // EjsS Model.Variables.Velocity.uy
  var uz; // EjsS Model.Variables.Velocity.uz

  var x0; // EjsS Model.Variables.Initial Conditions.x0
  var dxdt0; // EjsS Model.Variables.Initial Conditions.dxdt0
  var y0; // EjsS Model.Variables.Initial Conditions.y0
  var dydt0; // EjsS Model.Variables.Initial Conditions.dydt0
  var z0; // EjsS Model.Variables.Initial Conditions.z0
  var dzdt0; // EjsS Model.Variables.Initial Conditions.dzdt0
  var r0; // EjsS Model.Variables.Initial Conditions.r0
  var t1; // EjsS Model.Variables.Initial Conditions.t1
  var t2; // EjsS Model.Variables.Initial Conditions.t2
  var N; // EjsS Model.Variables.Initial Conditions.N
  var h; // EjsS Model.Variables.Initial Conditions.h

  var textA; // EjsS Model.Variables.Graph and Display.textA
  var font; // EjsS Model.Variables.Graph and Display.font
  var fonta; // EjsS Model.Variables.Graph and Display.fonta
  var fontb; // EjsS Model.Variables.Graph and Display.fontb
  var crossx; // EjsS Model.Variables.Graph and Display.crossx
  var crossy; // EjsS Model.Variables.Graph and Display.crossy
  var box; // EjsS Model.Variables.Graph and Display.box

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      q : q,
      m : m,
      KE_eV : KE_eV,
      Ex : Ex,
      Ey : Ey,
      Ez : Ez,
      Bx : Bx,
      By : By,
      Bz : Bz,
      D : D,
      L : L,
      u : u,
      qoverm : qoverm,
      KE : KE,
      vmag : vmag,
      v1x : v1x,
      v1y : v1y,
      v1z : v1z,
      vzpass : vzpass,
      tmax : tmax,
      tpoints : tpoints,
      position_x : position_x,
      xmin : xmin,
      xmax : xmax,
      position_y : position_y,
      ymin : ymin,
      ymax : ymax,
      position_z : position_z,
      zmin : zmin,
      zmax : zmax,
      vx : vx,
      vxf : vxf,
      vy : vy,
      vyf : vyf,
      vz : vz,
      vzf : vzf,
      vf : vf,
      KEf_eV : KEf_eV,
      ux : ux,
      uy : uy,
      uz : uz,
      x0 : x0,
      dxdt0 : dxdt0,
      y0 : y0,
      dydt0 : dydt0,
      z0 : z0,
      dzdt0 : dzdt0,
      r0 : r0,
      t1 : t1,
      t2 : t2,
      N : N,
      h : h,
      textA : textA,
      font : font,
      fonta : fonta,
      fontb : fontb,
      crossx : crossx,
      crossy : crossy,
      box : box
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.KE_eV != "undefined") KE_eV = json.KE_eV;
    if(typeof json.Ex != "undefined") Ex = json.Ex;
    if(typeof json.Ey != "undefined") Ey = json.Ey;
    if(typeof json.Ez != "undefined") Ez = json.Ez;
    if(typeof json.Bx != "undefined") Bx = json.Bx;
    if(typeof json.By != "undefined") By = json.By;
    if(typeof json.Bz != "undefined") Bz = json.Bz;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.u != "undefined") u = json.u;
    if(typeof json.qoverm != "undefined") qoverm = json.qoverm;
    if(typeof json.KE != "undefined") KE = json.KE;
    if(typeof json.vmag != "undefined") vmag = json.vmag;
    if(typeof json.v1x != "undefined") v1x = json.v1x;
    if(typeof json.v1y != "undefined") v1y = json.v1y;
    if(typeof json.v1z != "undefined") v1z = json.v1z;
    if(typeof json.vzpass != "undefined") vzpass = json.vzpass;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.tpoints != "undefined") tpoints = json.tpoints;
    if(typeof json.position_x != "undefined") position_x = json.position_x;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.position_y != "undefined") position_y = json.position_y;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.position_z != "undefined") position_z = json.position_z;
    if(typeof json.zmin != "undefined") zmin = json.zmin;
    if(typeof json.zmax != "undefined") zmax = json.zmax;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vxf != "undefined") vxf = json.vxf;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.vyf != "undefined") vyf = json.vyf;
    if(typeof json.vz != "undefined") vz = json.vz;
    if(typeof json.vzf != "undefined") vzf = json.vzf;
    if(typeof json.vf != "undefined") vf = json.vf;
    if(typeof json.KEf_eV != "undefined") KEf_eV = json.KEf_eV;
    if(typeof json.ux != "undefined") ux = json.ux;
    if(typeof json.uy != "undefined") uy = json.uy;
    if(typeof json.uz != "undefined") uz = json.uz;
    if(typeof json.x0 != "undefined") x0 = json.x0;
    if(typeof json.dxdt0 != "undefined") dxdt0 = json.dxdt0;
    if(typeof json.y0 != "undefined") y0 = json.y0;
    if(typeof json.dydt0 != "undefined") dydt0 = json.dydt0;
    if(typeof json.z0 != "undefined") z0 = json.z0;
    if(typeof json.dzdt0 != "undefined") dzdt0 = json.dzdt0;
    if(typeof json.r0 != "undefined") r0 = json.r0;
    if(typeof json.t1 != "undefined") t1 = json.t1;
    if(typeof json.t2 != "undefined") t2 = json.t2;
    if(typeof json.N != "undefined") N = json.N;
    if(typeof json.h != "undefined") h = json.h;
    if(typeof json.textA != "undefined") textA = json.textA;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.crossx != "undefined") crossx = json.crossx;
    if(typeof json.crossy != "undefined") crossy = json.crossy;
    if(typeof json.box != "undefined") box = json.box;
  };

  _model._inputAndPublicParameters = ["q",  "m",  "KE_eV",  "Ex",  "Ey",  "Ez",  "Bx",  "By",  "Bz",  "D",  "L",  "u",  "qoverm",  "KE",  "vmag",  "v1x",  "v1y",  "v1z",  "vzpass",  "tmax",  "tpoints",  "position_x",  "xmin",  "xmax",  "position_y",  "ymin",  "ymax",  "position_z",  "zmin",  "zmax",  "vx",  "vxf",  "vy",  "vyf",  "vz",  "vzf",  "vf",  "KEf_eV",  "ux",  "uy",  "uz",  "x0",  "dxdt0",  "y0",  "dydt0",  "z0",  "dzdt0",  "r0",  "t1",  "t2",  "N",  "h",  "textA",  "font",  "fonta",  "fontb",  "crossx",  "crossy",  "box"]; 

  _model._outputAndPublicParameters = ["q",  "m",  "KE_eV",  "Ex",  "Ey",  "Ez",  "Bx",  "By",  "Bz",  "D",  "L",  "u",  "qoverm",  "KE",  "vmag",  "v1x",  "v1y",  "v1z",  "vzpass",  "tmax",  "tpoints",  "position_x",  "xmin",  "xmax",  "position_y",  "ymin",  "ymax",  "position_z",  "zmin",  "zmax",  "vx",  "vxf",  "vy",  "vyf",  "vz",  "vzf",  "vf",  "KEf_eV",  "ux",  "uy",  "uz",  "x0",  "dxdt0",  "y0",  "dydt0",  "z0",  "dzdt0",  "r0",  "t1",  "t2",  "N",  "h",  "textA",  "font",  "fonta",  "fontb",  "crossx",  "crossy",  "box"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Description"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Initial Conditions"] = true;
    __pagesEnabled["Time Interval"] = true;
    __pagesEnabled["ID Matrices"] = true;
    __pagesEnabled["Final Velocity"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    q = 1.60e-19; // EjsS Model.Variables.Values.q
    m = 7.0*1.67e-27; // EjsS Model.Variables.Values.m
    KE_eV = 100.0; // EjsS Model.Variables.Values.KE_eV
    Ex = 0.0; // EjsS Model.Variables.Values.Ex
    Ey = -105.0; // EjsS Model.Variables.Values.Ey
    Ez = 0.0; // EjsS Model.Variables.Values.Ez
    Bx = 0.002; // EjsS Model.Variables.Values.Bx
    By = 0.0; // EjsS Model.Variables.Values.By
    Bz = 0.0; // EjsS Model.Variables.Values.Bz
    D = 2.0; // EjsS Model.Variables.Values.D
    L = 0.25; // EjsS Model.Variables.Values.L
  });

  _model.addToReset(function() {
    u = new Array(3); // EjsS Model.Variables.Derived Quantities.u
    (function () {
      var _i0;
      for (_i0=0; _i0<3; _i0+=1) {  // EjsS Model.Variables.Derived Quantities.u
        u[_i0] = 0;  // EjsS Model.Variables.Derived Quantities.u
      }
    }());
    qoverm = 0; // EjsS Model.Variables.Derived Quantities.qoverm
    KE = 0; // EjsS Model.Variables.Derived Quantities.KE
    vmag = 0; // EjsS Model.Variables.Derived Quantities.vmag
    v1x = 0; // EjsS Model.Variables.Derived Quantities.v1x
    v1y = 0; // EjsS Model.Variables.Derived Quantities.v1y
    v1z = 0; // EjsS Model.Variables.Derived Quantities.v1z
    vzpass = -Ey/Bx; // EjsS Model.Variables.Derived Quantities.vzpass
    tmax = 0; // EjsS Model.Variables.Derived Quantities.tmax
    tpoints = 0; // EjsS Model.Variables.Derived Quantities.tpoints
  });

  _model.addToReset(function() {
    position_x = 0; // EjsS Model.Variables.Position Values.position_x
    xmin = 0; // EjsS Model.Variables.Position Values.xmin
    xmax = 0; // EjsS Model.Variables.Position Values.xmax
    position_y = 0; // EjsS Model.Variables.Position Values.position_y
    ymin = 0; // EjsS Model.Variables.Position Values.ymin
    ymax = 0; // EjsS Model.Variables.Position Values.ymax
    position_z = 0; // EjsS Model.Variables.Position Values.position_z
    zmin = 0; // EjsS Model.Variables.Position Values.zmin
    zmax = 0; // EjsS Model.Variables.Position Values.zmax
  });

  _model.addToReset(function() {
    vx = 0; // EjsS Model.Variables.Velocity.vx
    vxf = 0; // EjsS Model.Variables.Velocity.vxf
    vy = 0; // EjsS Model.Variables.Velocity.vy
    vyf = 0; // EjsS Model.Variables.Velocity.vyf
    vz = 0; // EjsS Model.Variables.Velocity.vz
    vzf = 0; // EjsS Model.Variables.Velocity.vzf
    vf = 0; // EjsS Model.Variables.Velocity.vf
    KEf_eV = 0; // EjsS Model.Variables.Velocity.KEf_eV
    ux = 1.0; // EjsS Model.Variables.Velocity.ux
    uy = 1.0; // EjsS Model.Variables.Velocity.uy
    uz = 100.0; // EjsS Model.Variables.Velocity.uz
  });

  _model.addToReset(function() {
    x0 = 0; // EjsS Model.Variables.Initial Conditions.x0
    dxdt0 = v1x; // EjsS Model.Variables.Initial Conditions.dxdt0
    y0 = 0; // EjsS Model.Variables.Initial Conditions.y0
    dydt0 = v1y; // EjsS Model.Variables.Initial Conditions.dydt0
    z0 = 0; // EjsS Model.Variables.Initial Conditions.z0
    dzdt0 = v1z; // EjsS Model.Variables.Initial Conditions.dzdt0
    r0 = 0; // EjsS Model.Variables.Initial Conditions.r0
    t1 = 0.0; // EjsS Model.Variables.Initial Conditions.t1
    t2 = tmax; // EjsS Model.Variables.Initial Conditions.t2
    N = 1000; // EjsS Model.Variables.Initial Conditions.N
    h = (t2-t1)/N; // EjsS Model.Variables.Initial Conditions.h
  });

  _model.addToReset(function() {
    textA = ""; // EjsS Model.Variables.Graph and Display.textA
    font = "normal normal 2vw"; // EjsS Model.Variables.Graph and Display.font
    fonta = "normal normal 1vw"; // EjsS Model.Variables.Graph and Display.fonta
    fontb = "normal bold 2vw"; // EjsS Model.Variables.Graph and Display.fontb
    crossx = new Array(25); // EjsS Model.Variables.Graph and Display.crossx
    (function () {
      var _i0;
      for (_i0=0; _i0<25; _i0+=1) {  // EjsS Model.Variables.Graph and Display.crossx
        crossx[_i0] = 0;  // EjsS Model.Variables.Graph and Display.crossx
      }
    }());
    crossy = new Array(25); // EjsS Model.Variables.Graph and Display.crossy
    (function () {
      var _i0;
      for (_i0=0; _i0<25; _i0+=1) {  // EjsS Model.Variables.Graph and Display.crossy
        crossy[_i0] = 0;  // EjsS Model.Variables.Graph and Display.crossy
      }
    }());
    box = 1; // EjsS Model.Variables.Graph and Display.box
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.toggleFullScreen:1
  // does not work for iOS   // > CustomCode.toggleFullScreen:2
  /*jslint browser:true */  // > CustomCode.toggleFullScreen:3
  function toggleFullScreen() {  // > CustomCode.toggleFullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.toggleFullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.toggleFullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.toggleFullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.toggleFullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.toggleFullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.toggleFullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.toggleFullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.toggleFullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.toggleFullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.toggleFullScreen:14
      }  // > CustomCode.toggleFullScreen:15
    } else {  // > CustomCode.toggleFullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.toggleFullScreen:17
        document.exitFullscreen();  // > CustomCode.toggleFullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.toggleFullScreen:19
        document.msExitFullscreen();  // > CustomCode.toggleFullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.toggleFullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.toggleFullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.toggleFullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.toggleFullScreen:24
      }  // > CustomCode.toggleFullScreen:25
    }  // > CustomCode.toggleFullScreen:26
  }  // > CustomCode.toggleFullScreen:27

  // Here are the derivatives of position and velocity  // > CustomCode.derivs:1
  function derivs(r,t){  // > CustomCode.derivs:2
      // derivatives of position components  // > CustomCode.derivs:3
      var xp = r[1];  // > CustomCode.derivs:4
      var yp = r[3];  // > CustomCode.derivs:5
      var zp = r[5];  // > CustomCode.derivs:6
      var dx = xp;  // > CustomCode.derivs:7
      var dy = yp;  // > CustomCode.derivs:8
      var dz = zp;  // > CustomCode.derivs:9
      // derivatives of velocity components  // > CustomCode.derivs:10
      var ddx = qoverm*(Ex + yp*Bz - zp*By);  // > CustomCode.derivs:11
      var ddy = qoverm*(Ey + zp*Bx - xp*Bz);  // > CustomCode.derivs:12
      var ddz = qoverm*(Ez + xp*By - yp*Bx);  // > CustomCode.derivs:13
      return [dx,ddx,dy,ddy,dz,ddz]  // > CustomCode.derivs:14
      }  // > CustomCode.derivs:15

  function arange (a,b,c) {  // > CustomCode.arange:1
    var arr = [];  // > CustomCode.arange:2
    for (var i =a;i<b;i+=c){  // > CustomCode.arange:3
      arr.push(i);  // > CustomCode.arange:4
      }  // > CustomCode.arange:5
    return arr  // > CustomCode.arange:6
  }  // > CustomCode.arange:7

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Description"]) return;
    /* This file is used to calculate   // > Initialization.Description:1
       the Cartesian components of the acceleration of  // > Initialization.Description:2
       a charged particle through  // > Initialization.Description:3
       an E x B velocity filter.  // > Initialization.Description:4
       // > Initialization.Description:5
       Here, it is assumed that the axis of the filter   // > Initialization.Description:6
       is aligned with the z-axis, that the magnetic field  // > Initialization.Description:7
       is along the +x-direction, and that the electric field  // > Initialization.Description:8
       is along the -y-direction.*/  // > Initialization.Description:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //  Initialize parameter values  // > Initialization.Init Page:1
    u = [ux/Math.sqrt(10002.0),uy/Math.sqrt(10002.0),uz/Math.sqrt(10002.0)];// direction of the velocity vector  // > Initialization.Init Page:2
    // Derived quantities  // > Initialization.Init Page:3
    qoverm = q/m; // charge to mass ratio [C/kg]  // > Initialization.Init Page:4
    KE = KE_eV*1.602e-19; // particle kinetic energy [J]  // > Initialization.Init Page:5
    vmag = Math.sqrt(2.0*KE/m); // particle velocity magnitude [m/s]  // > Initialization.Init Page:6
    v1x = vmag*u[0]; //  v1x = x-component of the initial velocity [m/s]  // > Initialization.Init Page:7
    v1y = vmag*u[1]; //  v1y = y-component of the initial velocity [m/s]  // > Initialization.Init Page:8
    v1z = vmag*u[2]; //  v1z = z-component of the initial velocity [m/s]  // > Initialization.Init Page:9
    vzpass = -Ey/Bx; //vzpass is the z-velocity required for no deflection [m/s]  // > Initialization.Init Page:10
    //  Over what time interval do we integrate?  // > Initialization.Init Page:11
    tmax = L/v1z;  // > Initialization.Init Page:12
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Initial Conditions"]) return;
    // Specify initial conditions  // > Initialization.Initial Conditions:1
    x0 = 0.0; // initial x-coordinate of the charged particle [m];  // > Initialization.Initial Conditions:2
    dxdt0 = v1x; // initial x-velocity of the charged particle [m/s];  // > Initialization.Initial Conditions:3
    y0 = 0.0; // initial y-coordinate of the charged particle [m];  // > Initialization.Initial Conditions:4
    dydt0 = v1y; // initial y-velocity of the charged particle [m/s];  // > Initialization.Initial Conditions:5
    z0 = 0.0; // initial z-coordinate of the charged particle [m];  // > Initialization.Initial Conditions:6
    dzdt0 = v1z; // initial z-velocity of the charged particle [m/s];  // > Initialization.Initial Conditions:7
    r0=[];//initialize array  // > Initialization.Initial Conditions:8
    r0 = [x0,dxdt0,y0,dydt0,z0,dzdt0];  // > Initialization.Initial Conditions:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Time Interval"]) return;
    // Set up the time interval  // > Initialization.Time Interval:1
    t1 = 0.0; // initial time  // > Initialization.Time Interval:2
    t2 = tmax;// final scaled time  // > Initialization.Time Interval:3
    N = 1000; // number of time steps  // > Initialization.Time Interval:4
    h = (t2-t1)/N; // time step size  // > Initialization.Time Interval:5
    // The array of time values at which to store the solution  // > Initialization.Time Interval:6
    tpoints = [];  // > Initialization.Time Interval:7
    tpoints = arange(t1,t2,h);  // > Initialization.Time Interval:8
    // Calculate the solution using odeint  // > Initialization.Time Interval:9
    /*(Frem: Cannot give accurate value since I can't replicate odeint)*/  // > Initialization.Time Interval:10
    r=[];  // > Initialization.Time Interval:11
    for (var i=0;i<tpoints.length;i++){  // > Initialization.Time Interval:12
    r[i] = derivs(r0,tpoints[i]);  // > Initialization.Time Interval:13
    }  // > Initialization.Time Interval:14
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["ID Matrices"]) return;
    position_x = [];  // > Initialization.ID Matrices:1
    position_y = [];  // > Initialization.ID Matrices:2
    position_z = [];  // > Initialization.ID Matrices:3
    //Extract the 1D matrices of position values  // > Initialization.ID Matrices:4
    position_x = r[0];  // > Initialization.ID Matrices:5
    xmin = Math.min(position_x);  // > Initialization.ID Matrices:6
    xmax = Math.max(position_x);  // > Initialization.ID Matrices:7
    position_y = r[2];  // > Initialization.ID Matrices:8
    ymin = Math.min(position_y);  // > Initialization.ID Matrices:9
    ymax = Math.max(position_y);  // > Initialization.ID Matrices:10
    position_z = r[4];  // > Initialization.ID Matrices:11
    zmin = Math.min(position_z);  // > Initialization.ID Matrices:12
    zmax = Math.max(position_z);  // > Initialization.ID Matrices:13
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Final Velocity"]) return;
    //  Calculate the final velocity   // > Initialization.Final Velocity:1
    /*(Frem: Cannot give accurate value since I can't replicate odeint)*/  // > Initialization.Final Velocity:2
    vx = []; vy = []; vz = [];  // > Initialization.Final Velocity:3
    vx = r[1];  // > Initialization.Final Velocity:4
    //vxf = vx[N-1];  // > Initialization.Final Velocity:5
    vxf = vx[vx.length-1]  // > Initialization.Final Velocity:6
    vy = r[3];  // > Initialization.Final Velocity:7
    //vyf = vy[N-1];  // > Initialization.Final Velocity:8
    vyf = vy[vy.length-1];  // > Initialization.Final Velocity:9
    vz = r[5];  // > Initialization.Final Velocity:10
    //vzf = vz[N-1];  // > Initialization.Final Velocity:11
    vzf = vz[vz.length-1];  // > Initialization.Final Velocity:12
    vf = Math.sqrt(vxf*vxf+vyf+vyf+vzf*vzf);  // > Initialization.Final Velocity:13
    KEf_eV = 0.5*m*vf*vf/1.60e-19;  // > Initialization.Final Velocity:14
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    textA = "The initial x-velocity = "+v1x.toFixed(3)+" m/s.<br/>"+  // > FixedRelations.FixRel Page:1
      "\nThe initial x-velocity = "+vx[0].toFixed(3)+" m/s.<br/>"+  // > FixedRelations.FixRel Page:2
      "\nThe pass velocity = "+vzpass.toFixed(3)+" m/s.<br/>"+  // > FixedRelations.FixRel Page:3
      "\nThe magnitude of the initial velocity = "+vmag.toFixed(3)+" m/s.<br/>"+  // > FixedRelations.FixRel Page:4
      "\nThe magnitude of the final velocity = "+vf.toFixed(3)+" m/s.<br/>"+  // > FixedRelations.FixRel Page:5
      "\nThe initial kinetic energy = "+KE_eV.toFixed(3)+" eV.<br/>"+  // > FixedRelations.FixRel Page:6
      "\nThe final kinetic energy = "+KEf_eV.toFixed(3)+" eV.<br/>"  // > FixedRelations.FixRel Page:7
    ;  // > FixedRelations.FixRel Page:8
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PICUP_ExB_Filter_Exercise_2_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["Particle and Region","Electric and Magnetic Fields","Length and Direction"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Particle and Region",
  //"Electric and Magnetic Fields"]
  //"Length and Direction"
  if (option == "Particle and Region"){box =1;}
  else if (option == "Electric and Magnetic Fields"){box = 2;}
  else if (option=="Length and Direction"){box=3;}

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.charge.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'charge'
          _view.fieldq.linkProperty("Value",  function() { return q; }, function(_v) { q = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldq'
          _view.fieldq.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldq'
          _view.fieldq.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldq'
          _view.fieldq.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldq'
          _view.mass.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'mass'
          _view.fieldm.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldm'
          _view.fieldm.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldm'
          _view.fieldm.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldm'
          _view.fieldm.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldm'
          _view.energy.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'energy'
          _view.fieldKE_eV.linkProperty("Value",  function() { return KE_eV; }, function(_v) { KE_eV = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldKE_eV'
          _view.fieldKE_eV.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldKE_eV'
          _view.fieldKE_eV.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldKE_eV'
          _view.fieldKE_eV.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldKE_eV'
          _view.Efieldx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Efieldx'
          _view.fieldEx.linkProperty("Value",  function() { return Ex; }, function(_v) { Ex = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldEx'
          _view.fieldEx.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldEx'
          _view.fieldEx.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldEx'
          _view.fieldEx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldEx'
          _view.Efieldy.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Efieldy'
          _view.fieldEy.linkProperty("Value",  function() { return Ey; }, function(_v) { Ey = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldEy'
          _view.fieldEy.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldEy'
          _view.fieldEy.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldEy'
          _view.fieldEy.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldEy'
          _view.Efieldz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Efieldz'
          _view.fieldEyz.linkProperty("Value",  function() { return Ez; }, function(_v) { Ez = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldEyz'
          _view.fieldEyz.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldEyz'
          _view.fieldEyz.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldEyz'
          _view.fieldEyz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldEyz'
          _view.BFieldx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'BFieldx'
          _view.fieldBx.linkProperty("Value",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldBx'
          _view.fieldBx.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldBx'
          _view.fieldBx.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldBx'
          _view.fieldBx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldBx'
          _view.BFieldy2.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'BFieldy2'
          _view.fieldBy.linkProperty("Value",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldBy'
          _view.fieldBy.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldBy'
          _view.fieldBy.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldBy'
          _view.fieldBy.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldBy'
          _view.BFieldz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'BFieldz'
          _view.fieldBz.linkProperty("Value",  function() { return Bz; }, function(_v) { Bz = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldBz'
          _view.fieldBz.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldBz'
          _view.fieldBz.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldBz'
          _view.fieldBz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldBz'
          _view.Length.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Length'
          _view.fieldL.linkProperty("Value",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldL'
          _view.fieldL.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldL'
          _view.fieldL.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldL'
          _view.fieldL.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldL'
          _view.Ux.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Ux'
          _view.fieldUx.linkProperty("Value",  function() { return ux; }, function(_v) { ux = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldUx'
          _view.fieldUx.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldUx'
          _view.fieldUx.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldUx'
          _view.fieldUx.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldUx'
          _view.Uy.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Uy'
          _view.fieldUy.linkProperty("Value",  function() { return uy; }, function(_v) { uy = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldUy'
          _view.fieldUy.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldUy'
          _view.fieldUy.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldUy'
          _view.fieldUy.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldUy'
          _view.Uz.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Uz'
          _view.fieldUz.linkProperty("Value",  function() { return uz; }, function(_v) { uz = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldUz'
          _view.fieldUz.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldUz'
          _view.fieldUz.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldUz'
          _view.fieldUz.linkProperty("Display",  function() { return box==3?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldUz'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.trajectory.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'trajectory'
          _view.trail3D.linkProperty("InputZ",  function() { return position_z; }, function(_v) { position_z = _v; } ); // HtmlView Page linking property 'InputZ' for element 'trail3D'
          _view.trail3D.linkProperty("InputX",  function() { return position_x; }, function(_v) { position_x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail3D'
          _view.trail3D.linkProperty("InputY",  function() { return position_y; }, function(_v) { position_y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail3D'
          _view.xVst.linkProperty("Title",  function() { return "Wien filter: v = "+vmag.toFixed(2)+" m, length L = "+L.toFixed(2)+" m"; } ); // HtmlView Page linking property 'Title' for element 'xVst'
          _view.xVst.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'xVst'
          _view.xVst.linkProperty("MaximumY",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'xVst'
          _view.xVst.linkProperty("MaximumX",  function() { return t2; }, function(_v) { t2 = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'xVst'
          _view.xVst.linkProperty("MinimumX",  function() { return t1; }, function(_v) { t1 = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'xVst'
          _view.xVst.linkProperty("MinimumY",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'xVst'
          _view.xVst.linkProperty("BLMessage",  function() { return textA; }, function(_v) { textA = _v; } ); // HtmlView Page linking property 'BLMessage' for element 'xVst'
          _view.plot.linkProperty("Maximum",  function() { return tpoints.length; } ); // HtmlView Page linking property 'Maximum' for element 'plot'
          _view.plot.linkProperty("InputX",  function() { return tpoints; }, function(_v) { tpoints = _v; } ); // HtmlView Page linking property 'InputX' for element 'plot'
          _view.plot.linkProperty("InputY",  function() { return position_x; }, function(_v) { position_x = _v; } ); // HtmlView Page linking property 'InputY' for element 'plot'
          _view.yVst.linkProperty("Title",  function() { return "Wien filter: v = "+vmag.toFixed(2)+" m, length L = "+L.toFixed(2)+" m"; } ); // HtmlView Page linking property 'Title' for element 'yVst'
          _view.yVst.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'yVst'
          _view.yVst.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'yVst'
          _view.yVst.linkProperty("MaximumX",  function() { return t2; }, function(_v) { t2 = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'yVst'
          _view.yVst.linkProperty("MinimumX",  function() { return t1; }, function(_v) { t1 = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'yVst'
          _view.yVst.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'yVst'
          _view.plot2.linkProperty("Maximum",  function() { return tpoints.length; } ); // HtmlView Page linking property 'Maximum' for element 'plot2'
          _view.plot2.linkProperty("InputX",  function() { return tpoints; }, function(_v) { tpoints = _v; } ); // HtmlView Page linking property 'InputX' for element 'plot2'
          _view.plot2.linkProperty("InputY",  function() { return position_y; }, function(_v) { position_y = _v; } ); // HtmlView Page linking property 'InputY' for element 'plot2'
          _view.zVst.linkProperty("Title",  function() { return "Wien filter: v = "+vmag.toFixed(2)+" m, length L = "+L.toFixed(2)+" m"; } ); // HtmlView Page linking property 'Title' for element 'zVst'
          _view.zVst.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'zVst'
          _view.zVst.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'zVst'
          _view.zVst.linkProperty("MaximumX",  function() { return t2; }, function(_v) { t2 = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'zVst'
          _view.zVst.linkProperty("MinimumX",  function() { return t1; }, function(_v) { t1 = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'zVst'
          _view.zVst.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'zVst'
          _view.plot22.linkProperty("Maximum",  function() { return tpoints.length; } ); // HtmlView Page linking property 'Maximum' for element 'plot22'
          _view.plot22.linkProperty("InputX",  function() { return tpoints; }, function(_v) { tpoints = _v; } ); // HtmlView Page linking property 'InputX' for element 'plot22'
          _view.plot22.linkProperty("InputY",  function() { return position_z; }, function(_v) { position_z = _v; } ); // HtmlView Page linking property 'InputY' for element 'plot22'
          _view.textA.linkProperty("Text",  function() { return textA; }, function(_v) { textA = _v; } ); // HtmlView Page linking property 'Text' for element 'textA'
          _view.textA.linkProperty("Font",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'Font' for element 'textA'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PICUP_ExB_Filter_Exercise_2_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PICUP_ExB_Filter_Exercise_2_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./PICUP_ExB_Filter_Exercise_2_frem_Intro_1.html');
  _view._addDescriptionPage('Exercise 2','./PICUP_ExB_Filter_Exercise_2_frem_Intro_2.html');
  _view._addDescriptionPage('ExB_Filter_Exercise_2.py with Bug Fix','./PICUP_ExB_Filter_Exercise_2_frem_Intro_3.html');

  return _view;
} // end of main function

function PICUP_ExB_Filter_Exercise_2_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"charge", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'charge'
      .setProperty("Background","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'charge'
      .setProperty("Tooltip","particle charge [C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'charge'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'charge'
      .setProperty("Text","q") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'charge'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldq", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldq'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldq'
      .setProperty("Format","0.00e00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldq'
      .setProperty("Tooltip","particle charge [C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldq'
      .setProperty("Foreground","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldq'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mass", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'mass'
      .setProperty("Tooltip","particle mass [kg]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'mass'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'mass'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mass'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldm", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldm'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldm'
      .setProperty("Format","0.00e00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldm'
      .setProperty("Tooltip","particle mass [kg]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldm'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldm'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"energy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'energy'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'energy'
      .setProperty("Tooltip","particle kinetic energy [eV]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'energy'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'energy'
      .setProperty("Text","KE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'energy'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldKE_eV", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldKE_eV'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldKE_eV'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldKE_eV'
      .setProperty("Tooltip","particle kinetic energy [eV]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldKE_eV'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldKE_eV'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Efieldx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Efieldx'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Efieldx'
      .setProperty("Tooltip","electric field in the +x direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Efieldx'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Efieldx'
      .setProperty("Text","Ex") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Efieldx'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldEx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldEx'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldEx'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldEx'
      .setProperty("Tooltip","electric field in the +x direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldEx'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldEx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Efieldy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Efieldy'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Efieldy'
      .setProperty("Tooltip","electric field in the +y direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Efieldy'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Efieldy'
      .setProperty("Text","Ey") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Efieldy'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldEy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldEy'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldEy'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldEy'
      .setProperty("Tooltip","electric field in the +y direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldEy'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldEy'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Efieldz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Efieldz'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Efieldz'
      .setProperty("Tooltip","electric field in the +z direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Efieldz'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Efieldz'
      .setProperty("Text","Ez") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Efieldz'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldEyz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldEyz'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldEyz'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldEyz'
      .setProperty("Tooltip","electric field in the +z direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldEyz'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldEyz'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"BFieldx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BFieldx'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'BFieldx'
      .setProperty("Tooltip","magnetic field in the +x direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BFieldx'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'BFieldx'
      .setProperty("Text","Bx") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'BFieldx'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldBx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldBx'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldBx'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldBx'
      .setProperty("Tooltip","magnetic field in the +x direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldBx'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldBx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"BFieldy2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BFieldy2'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'BFieldy2'
      .setProperty("Tooltip","magnetic field in the +y direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BFieldy2'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'BFieldy2'
      .setProperty("Text","By") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'BFieldy2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldBy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldBy'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldBy'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldBy'
      .setProperty("Tooltip","magnetic field in the +y direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldBy'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldBy'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"BFieldz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BFieldz'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'BFieldz'
      .setProperty("Tooltip","magnetic field in the +z direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BFieldz'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'BFieldz'
      .setProperty("Text","Bz") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'BFieldz'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldBz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldBz'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldBz'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldBz'
      .setProperty("Tooltip","magnetic field in the +z direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldBz'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldBz'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Length", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Length'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Length'
      .setProperty("Tooltip","length of the crossed field region [mm]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Length'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Length'
      .setProperty("Text","Length") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Length'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldL", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldL'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldL'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldL'
      .setProperty("Tooltip","length of the crossed field region [mm]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldL'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldL'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Ux", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Ux'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Ux'
      .setProperty("Tooltip","x-direction of the velocity vector") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Ux'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Ux'
      .setProperty("Text","ux") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Ux'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldUx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldUx'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldUx'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldUx'
      .setProperty("Tooltip","x-direction of the velocity vector") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldUx'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldUx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Uy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Uy'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Uy'
      .setProperty("Tooltip","y-direction of the velocity vector") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Uy'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Uy'
      .setProperty("Text","uy") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Uy'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldUy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldUy'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldUy'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldUy'
      .setProperty("Tooltip","y-direction of the velocity vector") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldUy'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldUy'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Uz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Uz'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Uz'
      .setProperty("Tooltip","z-direction of the velocity vector") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Uz'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Uz'
      .setProperty("Text","uz") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Uz'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldUz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldUz'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldUz'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldUz'
      .setProperty("Tooltip","z-direction of the velocity vector") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldUz'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldUz'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING3D.drawingPanel,"trajectory", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'trajectory'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'trajectory'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'trajectory'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'trajectory'
      ;

    _view._addElement(EJSS_DRAWING3D.trail,"trail3D", _view.trajectory) // EJsS HtmlView.HtmlView Page: declaration of element 'trail3D'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail3D'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail3D'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"xVst", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'xVst'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'xVst'
      .setProperty("Width","33%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'xVst'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'xVst'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'xVst'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'xVst'
      .setProperty("AxisYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'xVst'
      .setProperty("TitleY","x [m]") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'xVst'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'xVst'
      .setProperty("TitleX","Time t [s]") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'xVst'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'xVst'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'xVst'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'xVst'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"plot", _view.xVst) // EJsS HtmlView.HtmlView Page: declaration of element 'plot'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'plot'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'plot'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plot'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"yVst", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'yVst'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'yVst'
      .setProperty("Width","33%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'yVst'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'yVst'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'yVst'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'yVst'
      .setProperty("AxisYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'yVst'
      .setProperty("TitleY","y [m]") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'yVst'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'yVst'
      .setProperty("TitleX","Time t [s]") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'yVst'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'yVst'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'yVst'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'yVst'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"plot2", _view.yVst) // EJsS HtmlView.HtmlView Page: declaration of element 'plot2'
      .setProperty("LineColor","orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'plot2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'plot2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plot2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"zVst", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'zVst'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'zVst'
      .setProperty("Width","33%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'zVst'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'zVst'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'zVst'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'zVst'
      .setProperty("AxisYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'zVst'
      .setProperty("TitleY","z [m]") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'zVst'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'zVst'
      .setProperty("TitleX","Time t [s]") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'zVst'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'zVst'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'zVst'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'zVst'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"plot22", _view.zVst) // EJsS HtmlView.HtmlView Page: declaration of element 'plot22'
      .setProperty("LineColor","orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'plot22'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'plot22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plot22'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"Text", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'Text'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"textA", _view.Text) // EJsS HtmlView.HtmlView Page: declaration of element 'textA'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'textA'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Wien (E x B) Filter Exercise 2<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/PICUP_PICUP_ExB_Filter_Exercise_2/Screen Shot 2018-06-27 at 1.52.09 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/01authorlookang50x50.png" />
 Fremont Teng; Loo Kang Wee; based on codes by E. Behringer
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng; Loo Kang Wee; based on codes by E. Behringer.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PICUP_ExB_Filter_Exercise_2_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
