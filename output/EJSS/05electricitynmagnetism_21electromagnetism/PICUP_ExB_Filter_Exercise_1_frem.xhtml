<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PICUP_ExB_Filter_Exercise_1_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var q; // EjsS Model.Variables.Values.q
  var m; // EjsS Model.Variables.Values.m
  var KE_eV; // EjsS Model.Variables.Values.KE_eV
  var Ex; // EjsS Model.Variables.Values.Ex
  var Ey; // EjsS Model.Variables.Values.Ey
  var Ez; // EjsS Model.Variables.Values.Ez
  var Bx; // EjsS Model.Variables.Values.Bx
  var By; // EjsS Model.Variables.Values.By
  var Bz; // EjsS Model.Variables.Values.Bz
  var D; // EjsS Model.Variables.Values.D
  var L; // EjsS Model.Variables.Values.L

  var u; // EjsS Model.Variables.Derived Quantities.u
  var qoverm; // EjsS Model.Variables.Derived Quantities.qoverm
  var KE; // EjsS Model.Variables.Derived Quantities.KE
  var vmag; // EjsS Model.Variables.Derived Quantities.vmag
  var v1x; // EjsS Model.Variables.Derived Quantities.v1x
  var v1y; // EjsS Model.Variables.Derived Quantities.v1y
  var v1z; // EjsS Model.Variables.Derived Quantities.v1z
  var a_x; // EjsS Model.Variables.Derived Quantities.a_x
  var a_y; // EjsS Model.Variables.Derived Quantities.a_y
  var a_z; // EjsS Model.Variables.Derived Quantities.a_z

  var textA; // EjsS Model.Variables.Graph and Display.textA
  var font; // EjsS Model.Variables.Graph and Display.font
  var fonta; // EjsS Model.Variables.Graph and Display.fonta
  var fontb; // EjsS Model.Variables.Graph and Display.fontb
  var crossx; // EjsS Model.Variables.Graph and Display.crossx
  var crossy; // EjsS Model.Variables.Graph and Display.crossy
  var box; // EjsS Model.Variables.Graph and Display.box

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      q : q,
      m : m,
      KE_eV : KE_eV,
      Ex : Ex,
      Ey : Ey,
      Ez : Ez,
      Bx : Bx,
      By : By,
      Bz : Bz,
      D : D,
      L : L,
      u : u,
      qoverm : qoverm,
      KE : KE,
      vmag : vmag,
      v1x : v1x,
      v1y : v1y,
      v1z : v1z,
      a_x : a_x,
      a_y : a_y,
      a_z : a_z,
      textA : textA,
      font : font,
      fonta : fonta,
      fontb : fontb,
      crossx : crossx,
      crossy : crossy,
      box : box
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.KE_eV != "undefined") KE_eV = json.KE_eV;
    if(typeof json.Ex != "undefined") Ex = json.Ex;
    if(typeof json.Ey != "undefined") Ey = json.Ey;
    if(typeof json.Ez != "undefined") Ez = json.Ez;
    if(typeof json.Bx != "undefined") Bx = json.Bx;
    if(typeof json.By != "undefined") By = json.By;
    if(typeof json.Bz != "undefined") Bz = json.Bz;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.u != "undefined") u = json.u;
    if(typeof json.qoverm != "undefined") qoverm = json.qoverm;
    if(typeof json.KE != "undefined") KE = json.KE;
    if(typeof json.vmag != "undefined") vmag = json.vmag;
    if(typeof json.v1x != "undefined") v1x = json.v1x;
    if(typeof json.v1y != "undefined") v1y = json.v1y;
    if(typeof json.v1z != "undefined") v1z = json.v1z;
    if(typeof json.a_x != "undefined") a_x = json.a_x;
    if(typeof json.a_y != "undefined") a_y = json.a_y;
    if(typeof json.a_z != "undefined") a_z = json.a_z;
    if(typeof json.textA != "undefined") textA = json.textA;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.crossx != "undefined") crossx = json.crossx;
    if(typeof json.crossy != "undefined") crossy = json.crossy;
    if(typeof json.box != "undefined") box = json.box;
  };

  _model._inputAndPublicParameters = ["q",  "m",  "KE_eV",  "Ex",  "Ey",  "Ez",  "Bx",  "By",  "Bz",  "D",  "L",  "u",  "qoverm",  "KE",  "vmag",  "v1x",  "v1y",  "v1z",  "a_x",  "a_y",  "a_z",  "textA",  "font",  "fonta",  "fontb",  "crossx",  "crossy",  "box"]; 

  _model._outputAndPublicParameters = ["q",  "m",  "KE_eV",  "Ex",  "Ey",  "Ez",  "Bx",  "By",  "Bz",  "D",  "L",  "u",  "qoverm",  "KE",  "vmag",  "v1x",  "v1y",  "v1z",  "a_x",  "a_y",  "a_z",  "textA",  "font",  "fonta",  "fontb",  "crossx",  "crossy",  "box"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Description"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Acceleration"] = true;
    __pagesEnabled["Positions"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    q = 1.60e-19; // EjsS Model.Variables.Values.q
    m = 7.0*1.67e-27; // EjsS Model.Variables.Values.m
    KE_eV = 100.0; // EjsS Model.Variables.Values.KE_eV
    Ex = 0.0; // EjsS Model.Variables.Values.Ex
    Ey = -105.0; // EjsS Model.Variables.Values.Ey
    Ez = 0.0; // EjsS Model.Variables.Values.Ez
    Bx = 0.002; // EjsS Model.Variables.Values.Bx
    By = 0.0; // EjsS Model.Variables.Values.By
    Bz = 0.0; // EjsS Model.Variables.Values.Bz
    D = 2.0; // EjsS Model.Variables.Values.D
    L = 0.25; // EjsS Model.Variables.Values.L
  });

  _model.addToReset(function() {
    u = new Array(3); // EjsS Model.Variables.Derived Quantities.u
    (function () {
      var _i0;
      for (_i0=0; _i0<3; _i0+=1) {  // EjsS Model.Variables.Derived Quantities.u
        u[_i0] = 0;  // EjsS Model.Variables.Derived Quantities.u
      }
    }());
    qoverm = 0; // EjsS Model.Variables.Derived Quantities.qoverm
    KE = 0; // EjsS Model.Variables.Derived Quantities.KE
    vmag = 0; // EjsS Model.Variables.Derived Quantities.vmag
    v1x = 0; // EjsS Model.Variables.Derived Quantities.v1x
    v1y = 0; // EjsS Model.Variables.Derived Quantities.v1y
    v1z = 0; // EjsS Model.Variables.Derived Quantities.v1z
    a_x = 0; // EjsS Model.Variables.Derived Quantities.a_x
    a_y = 0; // EjsS Model.Variables.Derived Quantities.a_y
    a_z = 0; // EjsS Model.Variables.Derived Quantities.a_z
  });

  _model.addToReset(function() {
    textA = ""; // EjsS Model.Variables.Graph and Display.textA
    font = "normal normal 2vw"; // EjsS Model.Variables.Graph and Display.font
    fonta = "normal normal 1vw"; // EjsS Model.Variables.Graph and Display.fonta
    fontb = "normal bold 2vw"; // EjsS Model.Variables.Graph and Display.fontb
    crossx = new Array(25); // EjsS Model.Variables.Graph and Display.crossx
    (function () {
      var _i0;
      for (_i0=0; _i0<25; _i0+=1) {  // EjsS Model.Variables.Graph and Display.crossx
        crossx[_i0] = 0;  // EjsS Model.Variables.Graph and Display.crossx
      }
    }());
    crossy = new Array(25); // EjsS Model.Variables.Graph and Display.crossy
    (function () {
      var _i0;
      for (_i0=0; _i0<25; _i0+=1) {  // EjsS Model.Variables.Graph and Display.crossy
        crossy[_i0] = 0;  // EjsS Model.Variables.Graph and Display.crossy
      }
    }());
    box = 1; // EjsS Model.Variables.Graph and Display.box
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.toggleFullScreen:1
  // does not work for iOS   // > CustomCode.toggleFullScreen:2
  /*jslint browser:true */  // > CustomCode.toggleFullScreen:3
  function toggleFullScreen() {  // > CustomCode.toggleFullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.toggleFullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.toggleFullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.toggleFullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.toggleFullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.toggleFullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.toggleFullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.toggleFullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.toggleFullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.toggleFullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.toggleFullScreen:14
      }  // > CustomCode.toggleFullScreen:15
    } else {  // > CustomCode.toggleFullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.toggleFullScreen:17
        document.exitFullscreen();  // > CustomCode.toggleFullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.toggleFullScreen:19
        document.msExitFullscreen();  // > CustomCode.toggleFullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.toggleFullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.toggleFullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.toggleFullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.toggleFullScreen:24
      }  // > CustomCode.toggleFullScreen:25
    }  // > CustomCode.toggleFullScreen:26
  }  // > CustomCode.toggleFullScreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Description"]) return;
    /* This file is used to calculate   // > Initialization.Description:1
       the Cartesian components of the acceleration of  // > Initialization.Description:2
       a charged particle through  // > Initialization.Description:3
       an E x B velocity filter.  // > Initialization.Description:4
       // > Initialization.Description:5
       Here, it is assumed that the axis of the filter   // > Initialization.Description:6
       is aligned with the z-axis, that the magnetic field  // > Initialization.Description:7
       is along the +x-direction, and that the electric field  // > Initialization.Description:8
       is along the -y-direction.*/  // > Initialization.Description:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.1975]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.379,0]);  // > Initialization.axes:3
    _view.plottingPanel.getTitleY().setPosition([0.5,0.98]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //  Initialize parameter values  // > Initialization.Init Page:1
    u = [1.0/Math.sqrt(10002.0),1.0/Math.sqrt(10002.0),100.0/Math.sqrt(10002.0)];  // > Initialization.Init Page:2
    // direction of the velocity vector  // > Initialization.Init Page:3
    // Derived quantities  // > Initialization.Init Page:4
    qoverm = q/m; // charge to mass ratio [C/kg]  // > Initialization.Init Page:5
    KE = KE_eV*1.602e-19; // particle kinetic energy [J]  // > Initialization.Init Page:6
    vmag = Math.sqrt(2.0*KE/m); // particle velocity magnitude [m/s]  // > Initialization.Init Page:7
    v1x = vmag*u[0]; //  v1x = x-component of the initial velocity [m/s]  // > Initialization.Init Page:8
    v1y = vmag*u[1]; //  v1y = y-component of the initial velocity [m/s]  // > Initialization.Init Page:9
    v1z = vmag*u[2]; //  v1z = z-component of the initial velocity [m/s]  // > Initialization.Init Page:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Acceleration"]) return;
    // Calculate the Cartesian components of the acceleration  // > Initialization.Acceleration:1
    //  // > Initialization.Acceleration:2
    a_x = qoverm*(Ex + v1y*Bz - v1z*By);  // > Initialization.Acceleration:3
    a_y = qoverm*(Ey + v1z*Bx - v1x*Bz);  // > Initialization.Acceleration:4
    a_z = qoverm*(Ez + v1x*By - v1y*Bx);  // > Initialization.Acceleration:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Positions"]) return;
    crossx = [];  // > Initialization.Positions:1
    crossy = [];  // > Initialization.Positions:2
    for (var i=0;i<5;i++){  // > Initialization.Positions:3
      for (var j=0;j<21;j+=5){  // > Initialization.Positions:4
      crossx[i+j] = i;  // > Initialization.Positions:5
      }  // > Initialization.Positions:6
      for (var j=0;j<5;j++){  // > Initialization.Positions:7
      crossy[i+j*5] = j;  // > Initialization.Positions:8
      }  // > Initialization.Positions:9
      };  // > Initialization.Positions:10
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    textA = "The magnitude of the initial velocity is "+vmag.toFixed(3)+" m/s."  // > FixedRelations.FixRel Page:1
            +"\nThe x-component of the acceleration is "+a_x.toFixed(3)+" m/s²."  // > FixedRelations.FixRel Page:2
            +"\nThe y-component of the acceleration is "+a_y.toFixed(3)+" m/s²."  // > FixedRelations.FixRel Page:3
            +"\nThe z-component of the acceleration is "+a_z.toFixed(3)+" m/s².";  // > FixedRelations.FixRel Page:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PICUP_ExB_Filter_Exercise_1_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["Particle and Region","Electric and Magnetic Fields"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Particle and Region",
  //"Electric and Magnetic Fields"]
  if (option == "Particle and Region"){box =1;}
  else if (option == "Electric and Magnetic Fields"){box = 2;}

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.charge.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'charge'
          _view.fieldq.linkProperty("Value",  function() { return q; }, function(_v) { q = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldq'
          _view.fieldq.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldq'
          _view.fieldq.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldq'
          _view.fieldq.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldq'
          _view.mass.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'mass'
          _view.fieldm.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldm'
          _view.fieldm.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldm'
          _view.fieldm.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldm'
          _view.fieldm.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldm'
          _view.energy.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'energy'
          _view.fieldKE_eV.linkProperty("Value",  function() { return KE_eV; }, function(_v) { KE_eV = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldKE_eV'
          _view.fieldKE_eV.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldKE_eV'
          _view.fieldKE_eV.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldKE_eV'
          _view.fieldKE_eV.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldKE_eV'
          _view.Efieldx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Efieldx'
          _view.fieldEx.linkProperty("Value",  function() { return Ex; }, function(_v) { Ex = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldEx'
          _view.fieldEx.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldEx'
          _view.fieldEx.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldEx'
          _view.fieldEx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldEx'
          _view.Efieldy.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Efieldy'
          _view.fieldEy.linkProperty("Value",  function() { return Ey; }, function(_v) { Ey = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldEy'
          _view.fieldEy.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldEy'
          _view.fieldEy.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldEy'
          _view.fieldEy.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldEy'
          _view.Efieldz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Efieldz'
          _view.fieldEyz.linkProperty("Value",  function() { return Ez; }, function(_v) { Ez = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldEyz'
          _view.fieldEyz.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldEyz'
          _view.fieldEyz.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldEyz'
          _view.fieldEyz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldEyz'
          _view.BFieldx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'BFieldx'
          _view.fieldBx.linkProperty("Value",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldBx'
          _view.fieldBx.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldBx'
          _view.fieldBx.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldBx'
          _view.fieldBx.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldBx'
          _view.BFieldy2.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'BFieldy2'
          _view.fieldBy.linkProperty("Value",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldBy'
          _view.fieldBy.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldBy'
          _view.fieldBy.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldBy'
          _view.fieldBy.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldBy'
          _view.BFieldz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'BFieldz'
          _view.fieldBz.linkProperty("Value",  function() { return Bz; }, function(_v) { Bz = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldBz'
          _view.fieldBz.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldBz'
          _view.fieldBz.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldBz'
          _view.fieldBz.linkProperty("Display",  function() { return box==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldBz'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return textA; }, function(_v) { textA = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.textSet.linkProperty("X",  function() { return crossx; }, function(_v) { crossx = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return crossy; }, function(_v) { crossy = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet'
          _view.textv.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textv'
          _view.qm.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'qm'
          _view.texty.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'texty'
          _view.textv2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textv2'
          _view.textE.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textE'
          _view.textB.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textB'
          _view.textv3.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textv3'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PICUP_ExB_Filter_Exercise_1_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PICUP_ExB_Filter_Exercise_1_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./PICUP_ExB_Filter_Exercise_1_frem_Intro_1.html');
  _view._addDescriptionPage('Exercise 1','./PICUP_ExB_Filter_Exercise_1_frem_Intro_2.html');
  _view._addDescriptionPage('ExB_Filter_Exercise_1.py with Bug Fix','./PICUP_ExB_Filter_Exercise_1_frem_Intro_3.html');

  return _view;
} // end of main function

function PICUP_ExB_Filter_Exercise_1_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"charge", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'charge'
      .setProperty("Background","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'charge'
      .setProperty("Tooltip","particle charge [C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'charge'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'charge'
      .setProperty("Text","q") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'charge'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldq", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldq'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldq'
      .setProperty("Format","0.00e00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldq'
      .setProperty("Tooltip","particle charge [C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldq'
      .setProperty("Foreground","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldq'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mass", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'mass'
      .setProperty("Tooltip","particle mass [kg]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'mass'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'mass'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mass'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldm", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldm'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldm'
      .setProperty("Format","0.00e00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldm'
      .setProperty("Tooltip","particle mass [kg]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldm'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldm'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"energy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'energy'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'energy'
      .setProperty("Tooltip","particle kinetic energy [eV]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'energy'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'energy'
      .setProperty("Text","KE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'energy'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldKE_eV", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldKE_eV'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldKE_eV'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldKE_eV'
      .setProperty("Tooltip","particle kinetic energy [eV]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldKE_eV'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldKE_eV'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Efieldx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Efieldx'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Efieldx'
      .setProperty("Tooltip","electric field in the +x direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Efieldx'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Efieldx'
      .setProperty("Text","Ex") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Efieldx'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldEx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldEx'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldEx'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldEx'
      .setProperty("Tooltip","electric field in the +x direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldEx'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldEx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Efieldy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Efieldy'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Efieldy'
      .setProperty("Tooltip","electric field in the +y direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Efieldy'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Efieldy'
      .setProperty("Text","Ey") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Efieldy'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldEy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldEy'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldEy'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldEy'
      .setProperty("Tooltip","electric field in the +y direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldEy'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldEy'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Efieldz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Efieldz'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Efieldz'
      .setProperty("Tooltip","electric field in the +z direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Efieldz'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Efieldz'
      .setProperty("Text","Ez") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Efieldz'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldEyz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldEyz'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldEyz'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldEyz'
      .setProperty("Tooltip","electric field in the +z direction [N/C]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldEyz'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldEyz'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"BFieldx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BFieldx'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'BFieldx'
      .setProperty("Tooltip","magnetic field in the +x direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BFieldx'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'BFieldx'
      .setProperty("Text","Bx") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'BFieldx'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldBx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldBx'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldBx'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldBx'
      .setProperty("Tooltip","magnetic field in the +x direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldBx'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldBx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"BFieldy2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BFieldy2'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'BFieldy2'
      .setProperty("Tooltip","magnetic field in the +y direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BFieldy2'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'BFieldy2'
      .setProperty("Text","By") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'BFieldy2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldBy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldBy'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldBy'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldBy'
      .setProperty("Tooltip","magnetic field in the +y direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldBy'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldBy'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"BFieldz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BFieldz'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'BFieldz'
      .setProperty("Tooltip","magnetic field in the +z direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BFieldz'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'BFieldz'
      .setProperty("Text","Bz") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'BFieldz'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldBz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldBz'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldBz'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldBz'
      .setProperty("Tooltip","magnetic field in the +z direction [T]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldBz'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldBz'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("TRMessage"," FORCES ACTING ON A CHARGED PARTICLE AND THE EQUATIONS OF MOTION") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Box", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Box'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Box'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Box'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Box'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Box'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Box'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Box'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Box'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'Box'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("NumberOfElements",25) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'textSet'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSet'
      .setProperty("Text","x") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"groupv", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'groupv'
      .setProperty("X",-2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'groupv'
      .setProperty("Y",2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'groupv'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vArrows", _view.groupv) // EJsS HtmlView.HtmlView Page: declaration of element 'vArrows'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vArrows'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'vArrows'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vArrows'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textv", _view.groupv) // EJsS HtmlView.HtmlView Page: declaration of element 'textv'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textv'
      .setProperty("Y",0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textv'
      .setProperty("Text","v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'textv'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dot", _view.groupv) // EJsS HtmlView.HtmlView Page: declaration of element 'dot'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dot'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"qm", _view.groupv) // EJsS HtmlView.HtmlView Page: declaration of element 'qm'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'qm'
      .setProperty("Text","q,m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'qm'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"groupy", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'groupy'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'groupy'
      .setProperty("Y",4.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'groupy'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vArrows2", _view.groupy) // EJsS HtmlView.HtmlView Page: declaration of element 'vArrows2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vArrows2'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'vArrows2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vArrows2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"texty", _view.groupy) // EJsS HtmlView.HtmlView Page: declaration of element 'texty'
      .setProperty("X",0.25) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'texty'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'texty'
      .setProperty("Text","y") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'texty'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"groupz", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'groupz'
      .setProperty("X",4.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'groupz'
      .setProperty("Y",2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'groupz'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vArrows3", _view.groupz) // EJsS HtmlView.HtmlView Page: declaration of element 'vArrows3'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vArrows3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'vArrows3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vArrows3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textv2", _view.groupz) // EJsS HtmlView.HtmlView Page: declaration of element 'textv2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textv2'
      .setProperty("X",1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textv2'
      .setProperty("Text","z") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'textv2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"groupE", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'groupE'
      .setProperty("X",2.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'groupE'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'groupE'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"EArrow", _view.groupE) // EJsS HtmlView.HtmlView Page: declaration of element 'EArrow'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'EArrow'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'EArrow'
      .setProperty("SizeY",-1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'EArrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'EArrow'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textE", _view.groupE) // EJsS HtmlView.HtmlView Page: declaration of element 'textE'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textE'
      .setProperty("X",0.25) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textE'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textE'
      .setProperty("Text","E") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'textE'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textB", _view.groupE) // EJsS HtmlView.HtmlView Page: declaration of element 'textB'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textB'
      .setProperty("X",1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textB'
      .setProperty("Y",1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textB'
      .setProperty("Text","B") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'textB'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"groupL", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'groupL'
      .setProperty("X",2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'groupL'
      .setProperty("Y",-0.75) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'groupL'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vArrows4", _view.groupL) // EJsS HtmlView.HtmlView Page: declaration of element 'vArrows4'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'vArrows4'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vArrows4'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'vArrows4'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'vArrows4'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vArrows4'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'vArrows4'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textv3", _view.groupL) // EJsS HtmlView.HtmlView Page: declaration of element 'textv3'
      .setProperty("Y",-0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textv3'
      .setProperty("Text","L") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'textv3'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Fremont Teng
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PICUP_ExB_Filter_Exercise_1_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
