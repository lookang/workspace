<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Coulomb Pendulum</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function CoulombPendulum(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var t; // EjsS Model.Variables.Dynamic.t
  var x; // EjsS Model.Variables.Dynamic.x
  var y; // EjsS Model.Variables.Dynamic.y
  var phi; // EjsS Model.Variables.Dynamic.phi
  var omega; // EjsS Model.Variables.Dynamic.omega
  var acc; // EjsS Model.Variables.Dynamic.acc

  var color; // EjsS Model.Variables.Constant.color
  var xDrag; // EjsS Model.Variables.Constant.xDrag
  var yDrag; // EjsS Model.Variables.Constant.yDrag
  var qGreen; // EjsS Model.Variables.Constant.qGreen
  var qRed; // EjsS Model.Variables.Constant.qRed

  var font; // EjsS Model.Variables.varfrem.font
  var fontb; // EjsS Model.Variables.varfrem.fontb

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      t : t,
      x : x,
      y : y,
      phi : phi,
      omega : omega,
      acc : acc,
      color : color,
      xDrag : xDrag,
      yDrag : yDrag,
      qGreen : qGreen,
      qRed : qRed,
      font : font,
      fontb : fontb
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.phi != "undefined") phi = json.phi;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.acc != "undefined") acc = json.acc;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.xDrag != "undefined") xDrag = json.xDrag;
    if(typeof json.yDrag != "undefined") yDrag = json.yDrag;
    if(typeof json.qGreen != "undefined") qGreen = json.qGreen;
    if(typeof json.qRed != "undefined") qRed = json.qRed;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
  };

  _model._inputAndPublicParameters = ["t",  "x",  "y",  "phi",  "omega",  "acc",  "color",  "xDrag",  "yDrag",  "qGreen",  "qRed",  "font",  "fontb"]; 

  _model._outputAndPublicParameters = ["t",  "x",  "y",  "phi",  "omega",  "acc",  "color",  "xDrag",  "yDrag",  "qGreen",  "qRed",  "font",  "fontb"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.Dynamic.t
    x = new Array(2); // EjsS Model.Variables.Dynamic.x
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Dynamic.x
        x[_i0] = 0;  // EjsS Model.Variables.Dynamic.x
      }
    }());
    y = new Array(2); // EjsS Model.Variables.Dynamic.y
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Dynamic.y
        y[_i0] = 0;  // EjsS Model.Variables.Dynamic.y
      }
    }());
    phi = new Array(2); // EjsS Model.Variables.Dynamic.phi
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Dynamic.phi
        phi[_i0] = 0;  // EjsS Model.Variables.Dynamic.phi
      }
    }());
    omega = new Array(2); // EjsS Model.Variables.Dynamic.omega
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Dynamic.omega
        omega[_i0] = 0;  // EjsS Model.Variables.Dynamic.omega
      }
    }());
    acc = new Array(2); // EjsS Model.Variables.Dynamic.acc
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Dynamic.acc
        acc[_i0] = 0;  // EjsS Model.Variables.Dynamic.acc
      }
    }());
  });

  _model.addToReset(function() {
    color = new Array(2); // EjsS Model.Variables.Constant.color
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Constant.color
        color[_i0] = 0;  // EjsS Model.Variables.Constant.color
      }
    }());
    xDrag = new Array(2); // EjsS Model.Variables.Constant.xDrag
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Constant.xDrag
        xDrag[_i0] = 0;  // EjsS Model.Variables.Constant.xDrag
      }
    }());
    yDrag = new Array(2); // EjsS Model.Variables.Constant.yDrag
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.Constant.yDrag
        yDrag[_i0] = 0;  // EjsS Model.Variables.Constant.yDrag
      }
    }());
    qGreen = 1; // EjsS Model.Variables.Constant.qGreen
    qRed = 0.5; // EjsS Model.Variables.Constant.qRed
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.varfrem.font
    fontb = "normal bold 2vw"; // EjsS Model.Variables.varfrem.fontb
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function newPosition () {  // > CustomCode.New Position:1
    for (var j=0;j<2;j++) {  // > CustomCode.New Position:2
      phi[j]=Math.atan2(yDrag[j],xDrag[j]);  // > CustomCode.New Position:3
      t=0;  // > CustomCode.New Position:4
      omega[j]=0;  // > CustomCode.New Position:5
    }  // > CustomCode.New Position:6
  }  // > CustomCode.New Position:7

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    phi[0]=-1;  // > Initialization.Init Page:1
    phi[1]=-2;  // > Initialization.Init Page:2
    for (var j=0; j<2; j++){  // > Initialization.Init Page:3
      x[j]=Math.cos(phi[j]);  // > Initialization.Init Page:4
      y[j]=Math.sin(phi[j]);  // > Initialization.Init Page:5
      xDrag[j]=x[j]/2;  // > Initialization.Init Page:6
      yDrag[j]=y[j]/2;  // > Initialization.Init Page:7
      color[j]=j;  // > Initialization.Init Page:8
      }  // > Initialization.Init Page:9
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    for (var j=0; j<2; j++){  // > FixedRelations.FixRel Page:1
      x[j]=Math.cos(phi[j]);  // > FixedRelations.FixRel Page:2
      y[j]=Math.sin(phi[j]);  // > FixedRelations.FixRel Page:3
      xDrag[j]=x[j]/2;  // > FixedRelations.FixRel Page:4
      yDrag[j]=y[j]/2;  // > FixedRelations.FixRel Page:5
      }  // > FixedRelations.FixRel Page:6
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _phiLength;
    var _omegaLength;

    __odeSelf._getOdeVars = function (){ return["phi","omega","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _phiLength = phi.length;
      _omegaLength = omega.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(0.05);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_phiLength; __j++)
          if (__state[__n++]!=phi[__j] || __state[__n++]!=omega[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_phiLength; __j++) { // These two alternate in the state
         __state[__cIn++] = phi[__j];
         __state[__cIn++] = omega[__j];
      }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_phiLength != phi.length) return true;
      if (_omegaLength != omega.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (0.05===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(0.05);
      __eventSolver.setInternalStepSize(0.05);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_phiLength; __i++) { // These two alternate in the state
          phi[__i] = __state[__cOut++];
          omega[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var phi = [];
        var omega = [];
        for (__i=0; __i<_phiLength; __i++) { // These two alternate in the state
          phi[__i] = _aState[__cOut++];
          omega[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        var sinDiff=Math.sin(phi[1]-phi[0]);  // > Preliminary code for ODE.Evol Page:1
        var cosDiff=Math.cos(phi[1]-phi[0]);  // > Preliminary code for ODE.Evol Page:2
        var q2=qRed*qGreen;  // > Preliminary code for ODE.Evol Page:3
        var k=q2*9e-3/.017;  // > Preliminary code for ODE.Evol Page:4
        for (var j=0;j<2;j++){  // > Preliminary code for ODE.Evol Page:5
          acc[j]=-k*Math.pow(-1,j)*sinDiff/Math.pow(1-cosDiff,1.5)-9.8*Math.cos(phi[j]);  // > Preliminary code for ODE.Evol Page:6
          }  // > Preliminary code for ODE.Evol Page:7
        /*  // > Preliminary code for ODE.Evol Page:8
        angular acc due to Coulomb force (F=kq^2/r^2)  // > Preliminary code for ODE.Evol Page:9
        angular acc= (k*q^2/m*r^3)*sin(angle)/(2-2*cos(angle))^(3/2)  // > Preliminary code for ODE.Evol Page:10
        where the angle is the angle between the two charges  // > Preliminary code for ODE.Evol Page:11
        and r is the length of the pendulum support  // > Preliminary code for ODE.Evol Page:12
        */  // > Preliminary code for ODE.Evol Page:13
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_phiLength;i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(omega[i]) ? omega[i][i] : omega[i]; // Rate for ODE: Evol Page:phi
          _aRate[__cRate++] = Array.isArray(acc[i]) ? acc[i][i] : acc[i]; // Rate for ODE: Evol Page:omega
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var phi = [];
        var omega = [];
        for (__i=0; __i<_phiLength; __i++) { // These two alternate in the state
          phi[__i] = _aState[__cOut++];
          omega[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_phiLength; __i++) { // These two alternate in the state
          phi[__i] = __state[__cOut++];
          omega[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_phiLength; __j++) { // These two alternate in the state
         __state[__cIn++] = phi[__j];
         __state[__cIn++] = omega[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_phi(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(phi.length),__beginIndex,phi.ength);
  }

  function _historic_omega(__time) {
    var __beginIndex = 0 + phi.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(omega.length),__beginIndex,omega.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new CoulombPendulum_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.gCharge.linkProperty("Value",  function() { return qGreen; }, function(_v) { qGreen = _v; } ); // HtmlView Page linking property 'Value' for element 'gCharge'
          _view.greenslider.linkProperty("Value",  function() { return qGreen; }, function(_v) { qGreen = _v; } ); // HtmlView Page linking property 'Value' for element 'greenslider'
          _view.greenslider.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'greenslider'
          _view.gCharge2.linkProperty("Value",  function() { return qRed; }, function(_v) { qRed = _v; } ); // HtmlView Page linking property 'Value' for element 'gCharge2'
          _view.redslider.linkProperty("Value",  function() { return qRed; }, function(_v) { qRed = _v; } ); // HtmlView Page linking property 'Value' for element 'redslider'
          _view.redslider.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'redslider'
          _view.damp.setAction("OnPress", function(_data,_info) {
  for (var j=0;j<2;j++){
    omega[j]=0;
    }

}); // HtmlView Page setting action 'OnPress' for element 'damp'
          _view.damp.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'damp'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.stepButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "ϕ Green = "+Math.round(phi[1]*180/Math.PI+90)+"\nϕ Red = "+Math.round(phi[0]*180/Math.PI+90); } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.chargeSet.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'chargeSet'
          _view.chargeSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'chargeSet'
          _view.chargeSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'chargeSet'
          _view.supportset.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'supportset'
          _view.supportset.linkProperty("LineColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'LineColor' for element 'supportset'
          _view.supportset.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'supportset'
          _view.dragParticleSet.linkProperty("X",  function() { return xDrag; }, function(_v) { xDrag = _v; } ); // HtmlView Page linking property 'X' for element 'dragParticleSet'
          _view.dragParticleSet.linkProperty("Y",  function() { return yDrag; }, function(_v) { yDrag = _v; } ); // HtmlView Page linking property 'Y' for element 'dragParticleSet'
          _view.dragParticleSet.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'dragParticleSet'
          _view.dragParticleSet.setAction("OnDrag", function(_data,_info) {
  newPosition ();

}); // HtmlView Page setting action 'OnDrag' for element 'dragParticleSet'
          _view.dragtext.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'dragtext'
          _view.dragtextset.linkProperty("X",  function() { return xDrag; }, function(_v) { xDrag = _v; } ); // HtmlView Page linking property 'X' for element 'dragtextset'
          _view.dragtextset.linkProperty("Y",  function() { return yDrag; }, function(_v) { yDrag = _v; } ); // HtmlView Page linking property 'Y' for element 'dragtextset'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function CoulombPendulum_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = CoulombPendulum_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./CoulombPendulum_Intro_1.html');

  return _view;
} // end of main function

function CoulombPendulum_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"gcharge", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gcharge'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'gcharge'
      .setProperty("Text","Green Charge =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'gcharge'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"gCharge", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gCharge'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'gCharge'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'gCharge'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"greenslider", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'greenslider'
      .setProperty("Width","15vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'greenslider'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'greenslider'
      .setProperty("Maximum",4) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'greenslider'
      .setProperty("ShowText",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'greenslider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'greenslider'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'greenslider'
      .setProperty("Tooltip","Green charge") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'greenslider'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'greenslider'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'greenslider'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"gcharge2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gcharge2'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'gcharge2'
      .setProperty("Text","Red Charge =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'gcharge2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"gCharge2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gCharge2'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'gCharge2'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'gCharge2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"redslider", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'redslider'
      .setProperty("Width","15vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'redslider'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'redslider'
      .setProperty("Maximum",4) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'redslider'
      .setProperty("ShowText",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'redslider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'redslider'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'redslider'
      .setProperty("Tooltip","Red charge") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'redslider'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'redslider'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'redslider'
      ;

    _view._addElement(EJSS_INTERFACE.button,"damp", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'damp'
      .setProperty("Tooltip","Set v=0 for both charges.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'damp'
      .setProperty("Text","v = 0") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'damp'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Text","❚▶") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("TRMessage","Coulomb Pendulum Simulator") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"axisgroup", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'axisgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"xAxis", _view.axisgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'xAxis'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xAxis'
      .setProperty("X",-1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'xAxis'
      .setProperty("LineColor","rgba(128,0,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xAxis'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xAxis'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xAxis'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xAxis'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"yAxis", _view.axisgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'yAxis'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yAxis'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yAxis'
      .setProperty("LineColor","rgba(128,0,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yAxis'
      .setProperty("Y",-1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'yAxis'
      .setProperty("SizeY",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yAxis'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yAxis'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"supportPoint", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'supportPoint'
      .setProperty("FillColor","black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'supportPoint'
      .setProperty("SizeX",0.05) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'supportPoint'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'supportPoint'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'supportPoint'
      .setProperty("SizeY",0.05) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'supportPoint'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"chargeSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'chargeSet'
      .setProperty("NumberOfElements",2) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'chargeSet'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'chargeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"supportset", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'supportset'
      .setProperty("NumberOfElements",2) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'supportset'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'supportset'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'supportset'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'supportset'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"dragParticleSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dragParticleSet'
      .setProperty("NumberOfElements",2) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'dragParticleSet'
      .setProperty("FillColor","gray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dragParticleSet'
      .setProperty("SizeX",0.05) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'dragParticleSet'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dragParticleSet'
      .setProperty("LineColor","gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dragParticleSet'
      .setProperty("SizeY",0.05) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'dragParticleSet'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'dragParticleSet'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragParticleSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"dragtext", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dragtext'
      .setProperty("Y",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'dragtext'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"dragtextset", _view.dragtext) // EJsS HtmlView.HtmlView Page: declaration of element 'dragtextset'
      .setProperty("NumberOfElements",2) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'dragtextset'
      .setProperty("Text","Drag Me") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dragtextset'
      .setProperty("Font","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'dragtextset'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"html", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'html'
      .setProperty("Html","<h1>Coulomb Pendulum Model </h1> Two charges hanging from wires, repel each other. The simulation shows the motion and reports angle (from the vertical) for each charge. You can change the charge (in μC), initial position and damp the motion (set velocity equal to zero) of the charges. Users can examine the model if Ejs is installed. <br/> <h1>Exercises:</h1><br/> For the same initial charge on each, push the v=0 button until the charges balance. What is the angle?<br/> If you increase the value of one charge, what difference do you expect in the angles where they will balance? Will it still be symmetric? Explain and then try it. <br/> The charge is given in μC and the support string for each is 1m in length. Determine the mass of each (they have the same mass). <br/>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'html'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Coulomb Pendulum<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/CoulombPendulum/Screen Shot 2018-05-11 at 5.03.59 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/01authorannecox.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/01authorlookang50x50.png" />
 Anne J Cox; Fremont Teng; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Anne J Cox; Fremont Teng; Loo Kang Wee.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new CoulombPendulum("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_21electromagnetism/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
