<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ejs Open Source Circular Loop Vertical Motion java applet</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function coaster96wee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var h; // EjsS Model.Variables.referenceFrame.h
  var range; // EjsS Model.Variables.referenceFrame.range
  var xmin; // EjsS Model.Variables.referenceFrame.xmin
  var xmax; // EjsS Model.Variables.referenceFrame.xmax
  var ymin; // EjsS Model.Variables.referenceFrame.ymin
  var ymax; // EjsS Model.Variables.referenceFrame.ymax
  var t; // EjsS Model.Variables.referenceFrame.t
  var dt; // EjsS Model.Variables.referenceFrame.dt
  var size; // EjsS Model.Variables.referenceFrame.size
  var size2; // EjsS Model.Variables.referenceFrame.size2
  var pi; // EjsS Model.Variables.referenceFrame.pi
  var npt; // EjsS Model.Variables.referenceFrame.npt
  var stroke; // EjsS Model.Variables.referenceFrame.stroke

  var hdragbuttonX; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonX
  var hdragbuttonY; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonY
  var hdragbuttonYmin; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonYmin
  var hdragbuttonYmax; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonYmax
  var rdragbuttonX; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonX
  var rdragbuttonY; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonY
  var rdragbuttonXmin; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonXmin
  var rdragbuttonXmax; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonXmax
  var mcontrolX; // EjsS Model.Variables.panelcontrolvariables.mcontrolX
  var mcontrolY; // EjsS Model.Variables.panelcontrolvariables.mcontrolY
  var mmin; // EjsS Model.Variables.panelcontrolvariables.mmin
  var mmax; // EjsS Model.Variables.panelcontrolvariables.mmax

  var r; // EjsS Model.Variables.ring.r
  var r2; // EjsS Model.Variables.ring.r2
  var rmin; // EjsS Model.Variables.ring.rmin
  var rmax; // EjsS Model.Variables.ring.rmax
  var k; // EjsS Model.Variables.ring.k
  var k2; // EjsS Model.Variables.ring.k2
  var R; // EjsS Model.Variables.ring.R
  var R2; // EjsS Model.Variables.ring.R2
  var x; // EjsS Model.Variables.ring.x
  var y; // EjsS Model.Variables.ring.y
  var cta; // EjsS Model.Variables.ring.cta
  var omega; // EjsS Model.Variables.ring.omega
  var stage; // EjsS Model.Variables.ring.stage
  var g; // EjsS Model.Variables.ring.g
  var vx; // EjsS Model.Variables.ring.vx
  var vy; // EjsS Model.Variables.ring.vy
  var cst; // EjsS Model.Variables.ring.cst
  var v; // EjsS Model.Variables.ring.v
  var showg; // EjsS Model.Variables.ring.showg
  var shown; // EjsS Model.Variables.ring.shown
  var showc; // EjsS Model.Variables.ring.showc
  var fc; // EjsS Model.Variables.ring.fc
  var gf; // EjsS Model.Variables.ring.gf
  var nf; // EjsS Model.Variables.ring.nf
  var cf; // EjsS Model.Variables.ring.cf
  var cfs; // EjsS Model.Variables.ring.cfs
  var done; // EjsS Model.Variables.ring.done
  var msg; // EjsS Model.Variables.ring.msg
  var fps; // EjsS Model.Variables.ring.fps
  var Ecst; // EjsS Model.Variables.ring.Ecst
  var EK; // EjsS Model.Variables.ring.EK
  var EU; // EjsS Model.Variables.ring.EU
  var TE; // EjsS Model.Variables.ring.TE
  var petext; // EjsS Model.Variables.ring.petext
  var ketext; // EjsS Model.Variables.ring.ketext
  var tetext; // EjsS Model.Variables.ring.tetext
  var statustext; // EjsS Model.Variables.ring.statustext

  var stagetext; // EjsS Model.Variables.lookang.stagetext
  var showv; // EjsS Model.Variables.lookang.showv
  var ctadegree; // EjsS Model.Variables.lookang.ctadegree
  var atangent; // EjsS Model.Variables.lookang.atangent
  var acentre; // EjsS Model.Variables.lookang.acentre
  var aresultant; // EjsS Model.Variables.lookang.aresultant
  var m; // EjsS Model.Variables.lookang.m
  var showmg; // EjsS Model.Variables.lookang.showmg
  var showR; // EjsS Model.Variables.lookang.showR
  var showacentre; // EjsS Model.Variables.lookang.showacentre
  var showatangent; // EjsS Model.Variables.lookang.showatangent
  var autoscale; // EjsS Model.Variables.lookang.autoscale
  var ballColor; // EjsS Model.Variables.lookang.ballColor

  var n; // EjsS Model.Variables.ellipse.n
  var n2; // EjsS Model.Variables.ellipse.n2
  var xpath; // EjsS Model.Variables.ellipse.xpath
  var ypath; // EjsS Model.Variables.ellipse.ypath

  var hmode; // EjsS Model.Variables.hmode.hmode

  var c2; // EjsS Model.Variables.hittrack.c2

  var uptrackRfnx; // EjsS Model.Variables.functions.uptrackRfnx
  var uptrackRfny; // EjsS Model.Variables.functions.uptrackRfny
  var circletrackfnx; // EjsS Model.Variables.functions.circletrackfnx
  var circletrackfny; // EjsS Model.Variables.functions.circletrackfny

  var font; // EjsS Model.Variables.layout.font
  var textbr; // EjsS Model.Variables.layout.textbr
  var graph; // EjsS Model.Variables.layout.graph
  var world; // EjsS Model.Variables.layout.world
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Height1; // EjsS Model.Variables.layout.Height1
  var Height2; // EjsS Model.Variables.layout.Height2
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Android; // EjsS Model.Variables.layout.Android

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      h : h,
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      t : t,
      dt : dt,
      size : size,
      size2 : size2,
      pi : pi,
      npt : npt,
      stroke : stroke,
      hdragbuttonX : hdragbuttonX,
      hdragbuttonY : hdragbuttonY,
      hdragbuttonYmin : hdragbuttonYmin,
      hdragbuttonYmax : hdragbuttonYmax,
      rdragbuttonX : rdragbuttonX,
      rdragbuttonY : rdragbuttonY,
      rdragbuttonXmin : rdragbuttonXmin,
      rdragbuttonXmax : rdragbuttonXmax,
      mcontrolX : mcontrolX,
      mcontrolY : mcontrolY,
      mmin : mmin,
      mmax : mmax,
      r : r,
      r2 : r2,
      rmin : rmin,
      rmax : rmax,
      k : k,
      k2 : k2,
      R : R,
      R2 : R2,
      x : x,
      y : y,
      cta : cta,
      omega : omega,
      stage : stage,
      g : g,
      vx : vx,
      vy : vy,
      cst : cst,
      v : v,
      showg : showg,
      shown : shown,
      showc : showc,
      fc : fc,
      gf : gf,
      nf : nf,
      cf : cf,
      cfs : cfs,
      done : done,
      msg : msg,
      fps : fps,
      Ecst : Ecst,
      EK : EK,
      EU : EU,
      TE : TE,
      petext : petext,
      ketext : ketext,
      tetext : tetext,
      statustext : statustext,
      stagetext : stagetext,
      showv : showv,
      ctadegree : ctadegree,
      atangent : atangent,
      acentre : acentre,
      aresultant : aresultant,
      m : m,
      showmg : showmg,
      showR : showR,
      showacentre : showacentre,
      showatangent : showatangent,
      autoscale : autoscale,
      ballColor : ballColor,
      n : n,
      n2 : n2,
      xpath : xpath,
      ypath : ypath,
      hmode : hmode,
      c2 : c2,
      uptrackRfnx : uptrackRfnx,
      uptrackRfny : uptrackRfny,
      circletrackfnx : circletrackfnx,
      circletrackfny : circletrackfny,
      font : font,
      textbr : textbr,
      graph : graph,
      world : world,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Height1 : Height1,
      Height2 : Height2,
      disabledworld : disabledworld,
      disabled : disabled,
      isAndroid : isAndroid,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Android : Android
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.h != "undefined") h = json.h;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.size2 != "undefined") size2 = json.size2;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.npt != "undefined") npt = json.npt;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.hdragbuttonX != "undefined") hdragbuttonX = json.hdragbuttonX;
    if(typeof json.hdragbuttonY != "undefined") hdragbuttonY = json.hdragbuttonY;
    if(typeof json.hdragbuttonYmin != "undefined") hdragbuttonYmin = json.hdragbuttonYmin;
    if(typeof json.hdragbuttonYmax != "undefined") hdragbuttonYmax = json.hdragbuttonYmax;
    if(typeof json.rdragbuttonX != "undefined") rdragbuttonX = json.rdragbuttonX;
    if(typeof json.rdragbuttonY != "undefined") rdragbuttonY = json.rdragbuttonY;
    if(typeof json.rdragbuttonXmin != "undefined") rdragbuttonXmin = json.rdragbuttonXmin;
    if(typeof json.rdragbuttonXmax != "undefined") rdragbuttonXmax = json.rdragbuttonXmax;
    if(typeof json.mcontrolX != "undefined") mcontrolX = json.mcontrolX;
    if(typeof json.mcontrolY != "undefined") mcontrolY = json.mcontrolY;
    if(typeof json.mmin != "undefined") mmin = json.mmin;
    if(typeof json.mmax != "undefined") mmax = json.mmax;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.r2 != "undefined") r2 = json.r2;
    if(typeof json.rmin != "undefined") rmin = json.rmin;
    if(typeof json.rmax != "undefined") rmax = json.rmax;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.k2 != "undefined") k2 = json.k2;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.R2 != "undefined") R2 = json.R2;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.stage != "undefined") stage = json.stage;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.cst != "undefined") cst = json.cst;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.showg != "undefined") showg = json.showg;
    if(typeof json.shown != "undefined") shown = json.shown;
    if(typeof json.showc != "undefined") showc = json.showc;
    if(typeof json.fc != "undefined") fc = json.fc;
    if(typeof json.gf != "undefined") gf = json.gf;
    if(typeof json.nf != "undefined") nf = json.nf;
    if(typeof json.cf != "undefined") cf = json.cf;
    if(typeof json.cfs != "undefined") cfs = json.cfs;
    if(typeof json.done != "undefined") done = json.done;
    if(typeof json.msg != "undefined") msg = json.msg;
    if(typeof json.fps != "undefined") fps = json.fps;
    if(typeof json.Ecst != "undefined") Ecst = json.Ecst;
    if(typeof json.EK != "undefined") EK = json.EK;
    if(typeof json.EU != "undefined") EU = json.EU;
    if(typeof json.TE != "undefined") TE = json.TE;
    if(typeof json.petext != "undefined") petext = json.petext;
    if(typeof json.ketext != "undefined") ketext = json.ketext;
    if(typeof json.tetext != "undefined") tetext = json.tetext;
    if(typeof json.statustext != "undefined") statustext = json.statustext;
    if(typeof json.stagetext != "undefined") stagetext = json.stagetext;
    if(typeof json.showv != "undefined") showv = json.showv;
    if(typeof json.ctadegree != "undefined") ctadegree = json.ctadegree;
    if(typeof json.atangent != "undefined") atangent = json.atangent;
    if(typeof json.acentre != "undefined") acentre = json.acentre;
    if(typeof json.aresultant != "undefined") aresultant = json.aresultant;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.showmg != "undefined") showmg = json.showmg;
    if(typeof json.showR != "undefined") showR = json.showR;
    if(typeof json.showacentre != "undefined") showacentre = json.showacentre;
    if(typeof json.showatangent != "undefined") showatangent = json.showatangent;
    if(typeof json.autoscale != "undefined") autoscale = json.autoscale;
    if(typeof json.ballColor != "undefined") ballColor = json.ballColor;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.n2 != "undefined") n2 = json.n2;
    if(typeof json.xpath != "undefined") xpath = json.xpath;
    if(typeof json.ypath != "undefined") ypath = json.ypath;
    if(typeof json.hmode != "undefined") hmode = json.hmode;
    if(typeof json.c2 != "undefined") c2 = json.c2;
    if(typeof json.uptrackRfnx != "undefined") uptrackRfnx = json.uptrackRfnx;
    if(typeof json.uptrackRfny != "undefined") uptrackRfny = json.uptrackRfny;
    if(typeof json.circletrackfnx != "undefined") circletrackfnx = json.circletrackfnx;
    if(typeof json.circletrackfny != "undefined") circletrackfny = json.circletrackfny;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.textbr != "undefined") textbr = json.textbr;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Height1 != "undefined") Height1 = json.Height1;
    if(typeof json.Height2 != "undefined") Height2 = json.Height2;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Android != "undefined") Android = json.Android;
  };

  _model._inputAndPublicParameters = []; 

  _model._outputAndPublicParameters = [];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["svgradient"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["stage0onlaunchtrack"] = true;
    __pagesEnabled["stage1oncirculartrackbottomleft"] = true;
    __pagesEnabled["stage1oncirculartrackbottomright"] = true;
    __pagesEnabled["stage1oncirculartracktophalf"] = true;
    __pagesEnabled["stage1oncirculartracktop"] = true;
    __pagesEnabled["stage1oncirculartrack"] = true;
    __pagesEnabled["stage3projectile"] = true;
    __pagesEnabled["stage2horizontaltrack"] = true;
    __pagesEnabled["Error handling code"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["lookang"] = true;
    __pagesEnabled["axes"] = true;
  });

  _model.addToReset(function() {
    range = 10; // EjsS Model.Variables.referenceFrame.range
    xmin = (-range*1) + 5; // EjsS Model.Variables.referenceFrame.xmin
    xmax = range*2; // EjsS Model.Variables.referenceFrame.xmax
    ymin = -range*1; // EjsS Model.Variables.referenceFrame.ymin
    ymax = range*1; // EjsS Model.Variables.referenceFrame.ymax
    t = 0; // EjsS Model.Variables.referenceFrame.t
    dt = 0.05; // EjsS Model.Variables.referenceFrame.dt
    size = range/20; // EjsS Model.Variables.referenceFrame.size
    size2 = size/2; // EjsS Model.Variables.referenceFrame.size2
    pi = Math.PI; // EjsS Model.Variables.referenceFrame.pi
    npt = 100; // EjsS Model.Variables.referenceFrame.npt
    stroke = 2; // EjsS Model.Variables.referenceFrame.stroke
  });

  _model.addToReset(function() {
    hdragbuttonX = 0; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonX
    hdragbuttonY = 7.5; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonY
    hdragbuttonYmin = ymin; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonYmin
    hdragbuttonYmax = 7.5; // EjsS Model.Variables.panelcontrolvariables.hdragbuttonYmax
    rdragbuttonX = xmin + 16.5; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonX
    rdragbuttonY = ymax - 2.5; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonY
    rdragbuttonXmin = xmin + 6.5; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonXmin
    rdragbuttonXmax = xmin + 16.5; // EjsS Model.Variables.panelcontrolvariables.rdragbuttonXmax
    mcontrolX = 0; // EjsS Model.Variables.panelcontrolvariables.mcontrolX
    mcontrolY = 0; // EjsS Model.Variables.panelcontrolvariables.mcontrolY
    mmin = 1; // EjsS Model.Variables.panelcontrolvariables.mmin
    mmax = xmax*0.2; // EjsS Model.Variables.panelcontrolvariables.mmax
  });

  _model.addToReset(function() {
    r = ymax/2; // EjsS Model.Variables.ring.r
    r2 = r; // EjsS Model.Variables.ring.r2
    rmin = 1; // EjsS Model.Variables.ring.rmin
    rmax = range/2; // EjsS Model.Variables.ring.rmax
    k = 3.5; // EjsS Model.Variables.ring.k
    R = 3.5*r; // EjsS Model.Variables.ring.R
    R2 = R; // EjsS Model.Variables.ring.R2
    x = -10; // EjsS Model.Variables.ring.x
    y = -15+R; // EjsS Model.Variables.ring.y
    cta = -pi; // EjsS Model.Variables.ring.cta
    omega = 0; // EjsS Model.Variables.ring.omega
    stage = 0; // EjsS Model.Variables.ring.stage
    g = 9.81; // EjsS Model.Variables.ring.g
    vx = 0; // EjsS Model.Variables.ring.vx
    vy = 0; // EjsS Model.Variables.ring.vy
    cst = 0; // EjsS Model.Variables.ring.cst
    v = 0; // EjsS Model.Variables.ring.v
    showg = true; // EjsS Model.Variables.ring.showg
    shown = true; // EjsS Model.Variables.ring.shown
    showc = true; // EjsS Model.Variables.ring.showc
    fc = 0.2; // EjsS Model.Variables.ring.fc
    gf = g; // EjsS Model.Variables.ring.gf
    nf = g*Math.sin(cta); // EjsS Model.Variables.ring.nf
    cf = r*omega*omega; // EjsS Model.Variables.ring.cf
    cfs = 1; // EjsS Model.Variables.ring.cfs
    done = false; // EjsS Model.Variables.ring.done
    msg = ""; // EjsS Model.Variables.ring.msg
    fps = 20; // EjsS Model.Variables.ring.fps
    Ecst = 9.81; // EjsS Model.Variables.ring.Ecst
    statustext = "select the variables( such as height of release H,) and click play"; // EjsS Model.Variables.ring.statustext
  });

  _model.addToReset(function() {
    m = 1.0; // EjsS Model.Variables.lookang.m
    autoscale = true; // EjsS Model.Variables.lookang.autoscale
    ballColor = rgb(0,0,255); // EjsS Model.Variables.lookang.ballColor
  });

  _model.addToReset(function() {
    n = 360; // EjsS Model.Variables.ellipse.n
    n2 = n/2; // EjsS Model.Variables.ellipse.n2
    xpath = new Array(n); // EjsS Model.Variables.ellipse.xpath
    ypath = new Array(n); // EjsS Model.Variables.ellipse.ypath
  });

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
    c2 = Math.atan2(vy,vx);; // EjsS Model.Variables.hittrack.c2
  });

  _model.addToReset(function() {
    uptrackRfnx = ""; // EjsS Model.Variables.functions.uptrackRfnx
    uptrackRfny = ""; // EjsS Model.Variables.functions.uptrackRfny
    circletrackfnx = ""; // EjsS Model.Variables.functions.circletrackfnx
    circletrackfny = ""; // EjsS Model.Variables.functions.circletrackfny
  });

  _model.addToReset(function() {
    font = "normal normal 2vw "; // EjsS Model.Variables.layout.font
    textbr = ""; // EjsS Model.Variables.layout.textbr
    graph = true; // EjsS Model.Variables.layout.graph
    world = true; // EjsS Model.Variables.layout.world
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = getScreenHeight(); // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Height1 = "200"; // EjsS Model.Variables.layout.Height1
    Height2 = "350"; // EjsS Model.Variables.layout.Height2
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function getAlpha (stage, c)   // > CustomCode.getAlpha:1
  {  // > CustomCode.getAlpha:2
    if (stage === 0)  // > CustomCode.getAlpha:3
    {  // > CustomCode.getAlpha:4
      return -g * Math.cos(c) / R2;// moving in circular motion on the uptrack  // > CustomCode.getAlpha:5
    }  // > CustomCode.getAlpha:6
      // > CustomCode.getAlpha:7
    if (stage === 1)  // > CustomCode.getAlpha:8
    {  // > CustomCode.getAlpha:9
      return -g * Math.cos(c) / r2;// moving in circular motion on the circletrack  // > CustomCode.getAlpha:10
    }  // > CustomCode.getAlpha:11
    omega = 0;  // > CustomCode.getAlpha:12
    return 0;  // > CustomCode.getAlpha:13
  }  // > CustomCode.getAlpha:14
  function dvalue(v)  // > CustomCode.getAlpha:15
  {  // > CustomCode.getAlpha:16
    return (v * 100 + 0.5)/100;  // > CustomCode.getAlpha:17
  }  // > CustomCode.getAlpha:18

  function changeOrientation() {  // > CustomCode.changeOrientation:1
          switch (window.orientation) {  // > CustomCode.changeOrientation:2
              case 0:  // > CustomCode.changeOrientation:3
              case 180:  // > CustomCode.changeOrientation:4
                     this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:5
                    // > CustomCode.changeOrientation:6
                    if (iPad){ // App  // > CustomCode.changeOrientation:7
                  //  return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:8
                 //   return window.screen.height*0.9;  // > CustomCode.changeOrientation:9
                    return window.innerHeight;  // > CustomCode.changeOrientation:10
                 //return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:11
                 }  // > CustomCode.changeOrientation:12
                 else if (iPhone){ // App  // > CustomCode.changeOrientation:13
                return window.innerHeight;  // > CustomCode.changeOrientation:14
                //   return window.screen.height*0.8; // work for App  // > CustomCode.changeOrientation:15
                  // return document.documentElement.clientHeight; // work for browser  // > CustomCode.changeOrientation:16
                   }  // > CustomCode.changeOrientation:17
   /*                  // > CustomCode.changeOrientation:18
                   else if (iPad&&!parent.cordova){ //browser   // > CustomCode.changeOrientation:19
                  //  return Math.max(window.screen.width,window.screen.height)*0.8;  // > CustomCode.changeOrientation:20
                 return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:21
                 }  // > CustomCode.changeOrientation:22
                 else if (iPhone&&!parent.cordova){ //browser   // > CustomCode.changeOrientation:23
                  // return Math.max(window.screen.width,window.screen.height)*0.7;  // > CustomCode.changeOrientation:24
                   return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
                   }  // > CustomCode.changeOrientation:26
                     // > CustomCode.changeOrientation:27
   */                  // > CustomCode.changeOrientation:28
                   else if (Android&&parent.cordova){  // > CustomCode.changeOrientation:29
                    // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:30
                     return window.innerHeight;  // > CustomCode.changeOrientation:31
                     }  // > CustomCode.changeOrientation:32
                 else{  // > CustomCode.changeOrientation:33
                  // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:34
                  return window.innerHeight;  // > CustomCode.changeOrientation:35
                   }  // > CustomCode.changeOrientation:36
                  break;  // > CustomCode.changeOrientation:37
              case 90:  // > CustomCode.changeOrientation:38
              case -90:  // > CustomCode.changeOrientation:39
                  this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:40
  /*                  // > CustomCode.changeOrientation:41
                  if (iPad&&!parent.cordova){ //browser  // > CustomCode.changeOrientation:42
                 //  return Math.min(window.screen.width,window.screen.height)*0.8;  // > CustomCode.changeOrientation:43
                 //alert("ipad");  // > CustomCode.changeOrientation:44
                return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:45
                 }  // > CustomCode.changeOrientation:46
                  else if (iPhone&&!parent.cordova){ //browser  // > CustomCode.changeOrientation:47
                //   return Math.min(window.screen.width,window.screen.height)*0.7;  // > CustomCode.changeOrientation:48
                  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:49
                   }  // > CustomCode.changeOrientation:50
   */                  // > CustomCode.changeOrientation:51
                    if (iPad){ //App  // > CustomCode.changeOrientation:52
                  // return window.screen.width*0.9;  // > CustomCode.changeOrientation:53
                   return window.innerHeight;  // > CustomCode.changeOrientation:54
                 //alert("ipad");  // > CustomCode.changeOrientation:55
               // return document.documentElement.clientHeight*0.8;  // > CustomCode.changeOrientation:56
                 }  // > CustomCode.changeOrientation:57
                  else if (iPhone){ //App  // > CustomCode.changeOrientation:58
                return window.innerHeight;  // > CustomCode.changeOrientation:59
                //return window.screen.width*0.8; //App works for Iphone  // > CustomCode.changeOrientation:60
                  // return document.documentElement.clientHeight*0.8; // work for browser  // > CustomCode.changeOrientation:61
                   }  // > CustomCode.changeOrientation:62
                  else if (Android&&parent.cordova){ // in Android App form  // > CustomCode.changeOrientation:63
                   // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:64
                    return window.innerHeight;  // > CustomCode.changeOrientation:65
                  //  alert("in Android App form");  // > CustomCode.changeOrientation:66
                    }  // > CustomCode.changeOrientation:67
                    else { // browser Android and PC  // > CustomCode.changeOrientation:68
                   // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:69
                   // alert("browser Android and PC");  // > CustomCode.changeOrientation:70
                   return window.innerHeight;  // > CustomCode.changeOrientation:71
                    }  // > CustomCode.changeOrientation:72
                    // > CustomCode.changeOrientation:73
                  break;  // > CustomCode.changeOrientation:74
                // > CustomCode.changeOrientation:75
                // > CustomCode.changeOrientation:76
              default:  // > CustomCode.changeOrientation:77
                  this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:78
           //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:79
         return window.innerHeight;  // > CustomCode.changeOrientation:80
         }  // > CustomCode.changeOrientation:81
      }  // > CustomCode.changeOrientation:82

  function plotEllipse()   // > CustomCode.plot ellipse:1
  {  // > CustomCode.plot ellipse:2
    var theta = 0, dtheta = 2 * Math.PI/n;  // > CustomCode.plot ellipse:3
    for(var i = 0, n2 = n/2; i<n2; i++)  // > CustomCode.plot ellipse:4
    {  // > CustomCode.plot ellipse:5
      xpath[i] = xmin + R + r*Math.cos(theta);  // > CustomCode.plot ellipse:6
      ypath[i] = ymin + r - (ymin + r)*Math.sin(theta);  // > CustomCode.plot ellipse:7
      xpath[n2+i] = xmin + R - r*Math.cos(theta);  // > CustomCode.plot ellipse:8
      ypath[n2+i] = ymin + r - (ymin + r)*Math.sin(-theta);  // > CustomCode.plot ellipse:9
      theta += dtheta;  // > CustomCode.plot ellipse:10
    }  // > CustomCode.plot ellipse:11
  }  // > CustomCode.plot ellipse:12

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27
  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.fullscreen:28
  function checkAndroid () {  // > CustomCode.fullscreen:29
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.fullscreen:30
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.fullscreen:31
  }  // > CustomCode.fullscreen:32
  function getScreenHeight(){  // > CustomCode.fullscreen:33
    if (_isMobile)  // > CustomCode.fullscreen:34
    {  // > CustomCode.fullscreen:35
      //  // > CustomCode.fullscreen:36
    }  // > CustomCode.fullscreen:37
  }  // > CustomCode.fullscreen:38

  function rgb(r, g, b){  // > CustomCode.color:1
    return "rgb("+r+","+g+","+b+")";  // > CustomCode.color:2
  }  // > CustomCode.color:3

  // retrieved from http://cwestblog.com/2012/11/12/javascript-degree-and-radian-conversion/  // > CustomCode.radian2degree:1
  // Converts from degrees to radians.  // > CustomCode.radian2degree:2
  Math.radians = function(degrees) {  // > CustomCode.radian2degree:3
    return degrees * Math.PI / 180;  // > CustomCode.radian2degree:4
  };  // > CustomCode.radian2degree:5
     // > CustomCode.radian2degree:6
  // Converts from radians to degrees.  // > CustomCode.radian2degree:7
  Math.degrees = function(radians) {  // > CustomCode.radian2degree:8
    return radians * 180 / Math.PI;  // > CustomCode.radian2degree:9
  };  // > CustomCode.radian2degree:10

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    t = 0;  // > Initialization.Init Page:1
    if (k < 0.0)  // > Initialization.Init Page:2
    {  // > Initialization.Init Page:3
      k = 0.0; // control the radius  // > Initialization.Init Page:4
    }  // > Initialization.Init Page:5
    else if (k > 3.5)  // > Initialization.Init Page:6
    {  // > Initialization.Init Page:7
      k = 3.5;  // > Initialization.Init Page:8
    }  // > Initialization.Init Page:9
    hdragbuttonYmax = (3.5*r)+ymin //need to change to ymax where ymax is the max y (where k = 3.5) at r  // > Initialization.Init Page:10
    R = k * r;  // > Initialization.Init Page:11
    R2 = R; // attempt to align track to point mass  // > Initialization.Init Page:12
    cta = -pi;  // > Initialization.Init Page:13
    omega = 0;  // > Initialization.Init Page:14
    stage = 0;  // > Initialization.Init Page:15
    vx = 0;  // > Initialization.Init Page:16
    cst = 0;  // > Initialization.Init Page:17
    done = false;  // > Initialization.Init Page:18
    //TT _view.trace2.clear();  // > Initialization.Init Page:19
    if(hmode)  // > Initialization.Init Page:20
    {  // > Initialization.Init Page:21
      x = xmin;  // > Initialization.Init Page:22
      y = ymin;  // > Initialization.Init Page:23
      vx = v;  // > Initialization.Init Page:24
      omega = 0;  // > Initialization.Init Page:25
      vy = 0;  // > Initialization.Init Page:26
      stagetext = "moving in linear motion track";  // > Initialization.Init Page:27
    }    // > Initialization.Init Page:28
    else   // > Initialization.Init Page:29
    {  // > Initialization.Init Page:30
      stagetext = "moving in circular motion on the slope track";  // > Initialization.Init Page:31
    }  // > Initialization.Init Page:32
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svgradient"]) return;
    var container = document.createElement('div');  // > Initialization.svgradient:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradient:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svgradient:3
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:1" />'+  // > Initialization.svgradient:4
      '    <stop offset="100%" style="stop-color:rgb(0,255,255);stop-opacity:1" />'+  // > Initialization.svgradient:5
      '  </radialGradient>'+  // > Initialization.svgradient:6
      '</defs></svg>';  // > Initialization.svgradient:7
    container.innerHTML = svggradient;  // > Initialization.svgradient:8
    document.body.appendChild(container);  // > Initialization.svgradient:9
    var container = document.createElement('div');  // > Initialization.svgradient:10
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradient:11
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svgradient:12
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.5" />'+  // > Initialization.svgradient:13
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.svgradient:14
      '  </radialGradient>'+  // > Initialization.svgradient:15
      '</defs></svg>';  // > Initialization.svgradient:16
    container.innerHTML = svggradient;  // > Initialization.svgradient:17
    document.body.appendChild(container);  // > Initialization.svgradient:18
    //"url(#mygrandient1)"  // > Initialization.svgradient:19
    var container = document.createElement('div');  // > Initialization.svgradient:20
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradient:21
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="70%" fx="90%" fy="50%">'+  // > Initialization.svgradient:22
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:0.5" />'+  // > Initialization.svgradient:23
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.5" />'+  // > Initialization.svgradient:24
      '  </radialGradient>'+  // > Initialization.svgradient:25
      '</defs></svg>';  // > Initialization.svgradient:26
    container.innerHTML = svggradient;  // > Initialization.svgradient:27
    document.body.appendChild(container);  // > Initialization.svgradient:28
    //"url(#mygrandient2)"  // > Initialization.svgradient:29
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.0835]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.15]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    _view.plottingPanel.getTitleY().setPosition([0.5,0.9]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    if (stage === 0)  // > FixedRelations.FixRel Page:1
    { // moving in circular motion on the uptrack  // > FixedRelations.FixRel Page:2
      if(hmode) //hmode is horizontal mode  // > FixedRelations.FixRel Page:3
      {  // > FixedRelations.FixRel Page:4
        omega = 0;  // > FixedRelations.FixRel Page:5
      }  // > FixedRelations.FixRel Page:6
      else  // > FixedRelations.FixRel Page:7
      {  // > FixedRelations.FixRel Page:8
        //stagetext = "moving in circular motion on the slope track";  // > FixedRelations.FixRel Page:9
        x = xmin + R + R2*Math.cos(cta);  // > FixedRelations.FixRel Page:10
        y = ymin + R + R2*Math.sin(cta);  // > FixedRelations.FixRel Page:11
       // > FixedRelations.FixRel Page:12
        v = R2*omega;  // > FixedRelations.FixRel Page:13
        vx= v*Math.sin(-cta); //add recently 20170426 to make v visually show on uptrack  // > FixedRelations.FixRel Page:14
        vy=v*Math.cos(cta);  // > FixedRelations.FixRel Page:15
       // > FixedRelations.FixRel Page:16
        cf = R2*omega*omega; // centripetal force = r*omega*omega  // > FixedRelations.FixRel Page:17
        nf = m * (cf + g*Math.sin(cta-pi)); // change by lookang  // > FixedRelations.FixRel Page:18
        acentre = m*v*v/R2;  // > FixedRelations.FixRel Page:19
        atangent = R2*getAlpha(stage,cta);  // > FixedRelations.FixRel Page:20
        aresultant = Math.sqrt(acentre*acentre + atangent*atangent);  // > FixedRelations.FixRel Page:21
      }  // > FixedRelations.FixRel Page:22
    }   // > FixedRelations.FixRel Page:23
    else if (stage === 1)  // > FixedRelations.FixRel Page:24
    { // moving in circular motion on the circletrack  // > FixedRelations.FixRel Page:25
      //stagetext = "moving in circular motion on the circle radius r track";  // > FixedRelations.FixRel Page:26
      x = xmin + R + r2*Math.cos(cta);  // > FixedRelations.FixRel Page:27
      y = ymin + r + r2*Math.sin(cta);  // > FixedRelations.FixRel Page:28
       // > FixedRelations.FixRel Page:29
      v = r2*omega;  // > FixedRelations.FixRel Page:30
       // > FixedRelations.FixRel Page:31
      if(cta <= 0 || cta >= pi)  // > FixedRelations.FixRel Page:32
      { // bottom Qruadrants  // > FixedRelations.FixRel Page:33
        cf = r2*omega*omega; // new circle of radius r2  // > FixedRelations.FixRel Page:34
        nf = m * (cf + g*Math.sin(cta-pi));// g*Math.sin(cta)-cf;  // > FixedRelations.FixRel Page:35
      }  // > FixedRelations.FixRel Page:36
      else if (cta > 0 && cta < pi)  // > FixedRelations.FixRel Page:37
      { // top Qruadrants  // > FixedRelations.FixRel Page:38
        cf = r2 * omega * omega;  // > FixedRelations.FixRel Page:39
        nf = m * (cf + g*Math.sin(cta-pi));//g*Math.sin(cta);  // > FixedRelations.FixRel Page:40
      }  // > FixedRelations.FixRel Page:41
      acentre = m*v*v/r2;  // > FixedRelations.FixRel Page:42
      atangent = r2*getAlpha(stage,cta);  // > FixedRelations.FixRel Page:43
      aresultant = Math.sqrt(acentre*acentre + atangent*atangent);  // > FixedRelations.FixRel Page:44
    }  // > FixedRelations.FixRel Page:45
    else if (stage === 2)  // > FixedRelations.FixRel Page:46
    { // moving in linear motion on the straight bottom track  // > FixedRelations.FixRel Page:47
      //stagetext = "moving in linear motion on the bottom straight track";  // > FixedRelations.FixRel Page:48
      omega = 0;  // > FixedRelations.FixRel Page:49
      v = vx;  // > FixedRelations.FixRel Page:50
      cf = 0;  // > FixedRelations.FixRel Page:51
      nf = m * g; // change by lookang  // > FixedRelations.FixRel Page:52
      cta = 3 * pi/2; //  -pi/2 ;possible bug identified by lookang as angle is not consistent as vertical to velocity vector counterclockwise +  // > FixedRelations.FixRel Page:53
      acentre = 0;  // > FixedRelations.FixRel Page:54
      atangent = 0;  // > FixedRelations.FixRel Page:55
      aresultant = Math.sqrt(acentre*acentre + atangent*atangent);  // > FixedRelations.FixRel Page:56
      if (x > xmax-size)  // > FixedRelations.FixRel Page:57
      {  // > FixedRelations.FixRel Page:58
        //stagetext = "motion paused";    // > FixedRelations.FixRel Page:59
        done = true;  // > FixedRelations.FixRel Page:60
      }  // > FixedRelations.FixRel Page:61
    }  // > FixedRelations.FixRel Page:62
    else if (stage === 3)  // > FixedRelations.FixRel Page:63
    { //free fall  // > FixedRelations.FixRel Page:64
      //stagetext = "moving in free fall motion";  // > FixedRelations.FixRel Page:65
      omega = 0;  // > FixedRelations.FixRel Page:66
      v = Math.sqrt(vx*vx + vy*vy);  // > FixedRelations.FixRel Page:67
      cf = 0;  // > FixedRelations.FixRel Page:68
      nf = 0;  // > FixedRelations.FixRel Page:69
      acentre = 0;  // > FixedRelations.FixRel Page:70
      atangent = 0;  // > FixedRelations.FixRel Page:71
      aresultant = Math.sqrt(acentre*acentre + atangent*atangent);  // > FixedRelations.FixRel Page:72
        // > FixedRelations.FixRel Page:73
      if(y <= ymin)  // > FixedRelations.FixRel Page:74
      {  // > FixedRelations.FixRel Page:75
        y = ymin; // forced stop position is exactly ymin lookang  // > FixedRelations.FixRel Page:76
        //stagetext = "impact and motion paused";    // > FixedRelations.FixRel Page:77
      }  // > FixedRelations.FixRel Page:78
    }  // > FixedRelations.FixRel Page:79
    EK = v * v / 2;  // > FixedRelations.FixRel Page:80
    EU = m * g * (y-ymin); //lookang fixed bug in PE  // > FixedRelations.FixRel Page:81
    TE = EK + EU;  // > FixedRelations.FixRel Page:82
    if(stage === 0 && hmode === false || stage === 1)  // > FixedRelations.FixRel Page:83
    {  // > FixedRelations.FixRel Page:84
      vx = -v * Math.sin(cta); //circular path  // > FixedRelations.FixRel Page:85
      vy = v * Math.cos(cta);  // > FixedRelations.FixRel Page:86
      //alert();  // > FixedRelations.FixRel Page:87
    }  // > FixedRelations.FixRel Page:88
    msg = "Kinetic energy=" + dvalue(EK) + ",Potential Energy=" + dvalue(EU);  // > FixedRelations.FixRel Page:89
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["lookang"]) return;
    ctadegree = Math.degrees(cta) ;  // > FixedRelations.lookang:1
    gf = m * g;  // > FixedRelations.lookang:2
    r2 = r; // attempt to align track to point mass  // > FixedRelations.lookang:3
    R2 = R; // attempt to align track to point mass  // > FixedRelations.lookang:4
    petext = "PE = mgh = " + _view._format(EU,"0.00") + " J ";  // > FixedRelations.lookang:5
    ketext = "KE = 0.5mv² = " + _view._format(EK,"0.00") + " J ";  // > FixedRelations.lookang:6
    tetext = "TE = KE + PE = " + _view._format(TE,"0.00") + " J ";  // > FixedRelations.lookang:7
    //20151117 TT: define the functions to be used for analyticCurves - uptrackR and circletrack  // > FixedRelations.lookang:8
    uptrackRfnx = _view._format(xmin, "0.0") + "+" + _view._format(R, "0.0") + "*(1-cos(c))";  // > FixedRelations.lookang:9
    uptrackRfny = _view._format(ymin, "0.0") + "+" + _view._format(R, "0.0") + "*(1-sin(c))";  // > FixedRelations.lookang:10
    circletrackfnx = _view._format(xmin, "0.0") + "+" + _view._format(R, "0.0") + "+r*cos(c)";  // > FixedRelations.lookang:11
    circletrackfny = _view._format(ymin, "0.0") + "+" + _view._format(r, "0.0") + "*(1-sin(c))";  // > FixedRelations.lookang:12
    //20151117 TT: define the status messages to be added to the drawing panel - BRmessage   // > FixedRelations.lookang:13
    statustext =  " h = " + _view._format(y+2*r,"0.00") + " m "   // > FixedRelations.lookang:14
                 + (showmg ? ", \nm*g = " + _view._format(gf, "0.0") + " N": "") //"weight of the mass m due to Earth gravity field"  // > FixedRelations.lookang:15
                 + (showR ? ", \nR = " + _view._format(nf, "0.00") + " N": "") //"normal contact force"  // > FixedRelations.lookang:16
                 + (showatangent ? ", \nat = " + _view._format(atangent, "0.00") + " m/(s*s)": "") //"acceleration tangential to the circular motion"  // > FixedRelations.lookang:17
                 + (showacentre ? ", \na-r = " + _view._format(acentre, "0.00") + " m/(s*s)": ""); //"acceleration - radial to the circular motion"  // > FixedRelations.lookang:18
    statustext += ", \nθ = " + _view._format(ctadegree, "0.00") + " °"; //"angular velocity in rad per second"                 // > FixedRelations.lookang:19
    statustext += ", \nΩ = " + _view._format(omega, "0.00") + " rad/s"; //"angular velocity in rad per second"               // > FixedRelations.lookang:20
    statustext += ", \nα = " + _view._format(getAlpha(stage,cta), "0.00") + " rad/(s*s)"; //"angular acceleration in radian per second per second"  // > FixedRelations.lookang:21
    statustext += ", \nt = " + _view._format(t,"0.00") + " s ";  // > FixedRelations.lookang:22
                   // > FixedRelations.lookang:23
                   // > FixedRelations.lookang:24
                   // > FixedRelations.lookang:25
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axes"]) return;
    if (_model.isPlaying()===true) { //NEED this for conflict with initialize page values  // > FixedRelations.axes:1
    autoscale =false;  // > FixedRelations.axes:2
    _view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());  // > FixedRelations.axes:3
    _view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());  // > FixedRelations.axes:4
    //_view.IvsV.getAxisX().setAbsoluteY(_view.IvsV.getGrid().getFixedTickY());  // > FixedRelations.axes:5
    //_view.IvsV.getAxisY().setAbsoluteX(_view.IvsV.getGrid().getFixedTickX());  // > FixedRelations.axes:6
    }  // > FixedRelations.axes:7
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var _ODE_evolution1_Event5;
    var _ODE_evolution1_Event6;
    var _ODE_evolution1_Event7;
    var _ODE_evolution1_Event8;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["cta","omega","x","y","vy","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["stage0onlaunchtrack"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["stage1oncirculartrackbottomleft"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["stage1oncirculartrackbottomright"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["stage1oncirculartracktophalf"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      if (__pagesEnabled["stage1oncirculartracktop"]) __eventSolver.addEvent(_ODE_evolution1_Event5());
      if (__pagesEnabled["stage1oncirculartrack"]) __eventSolver.addEvent(_ODE_evolution1_Event6());
      if (__pagesEnabled["stage3projectile"]) __eventSolver.addEvent(_ODE_evolution1_Event7());
      if (__pagesEnabled["stage2horizontaltrack"]) __eventSolver.addEvent(_ODE_evolution1_Event8());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=cta) __mustReinitialize = true;
        __state[__cIn++] = cta;
        if (__state[__cIn]!=omega) __mustReinitialize = true;
        __state[__cIn++] = omega;
        if (__state[__cIn]!=x) __mustReinitialize = true;
        __state[__cIn++] = x;
        if (__state[__cIn]!=y) __mustReinitialize = true;
        __state[__cIn++] = y;
        if (__state[__cIn]!=vy) __mustReinitialize = true;
        __state[__cIn++] = vy;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
      var _errorCode = __eventSolver.getErrorCode();
      if (__pagesEnabled["Error handling code"]) {
        { // For any error: 
        }
      }
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = omega; // Rate for ODE: Evol Page:cta
        _aRate[__cRate++] = getAlpha(stage,cta); // Rate for ODE: Evol Page:omega
        _aRate[__cRate++] = vx; // Rate for ODE: Evol Page:x
        _aRate[__cRate++] = vy; // Rate for ODE: Evol Page:y
        _aRate[__cRate++] = cst*g; // Rate for ODE: Evol Page:vy
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (stage === 0)  // > Event zero-condition for page Evol Page:1
        {  // > Event zero-condition for page Evol Page:2
          if (hmode)   // > Event zero-condition for page Evol Page:3
          {  // > Event zero-condition for page Evol Page:4
            return xmin + R2 - x; // to bottom of circular track  // > Event zero-condition for page Evol Page:5
          }  // > Event zero-condition for page Evol Page:6
          else if (((cta < -0.4 * pi) && (cta > -0.6 * pi)) && omega > 0)  // > Event zero-condition for page Evol Page:7
          {  // > Event zero-condition for page Evol Page:8
            return -cta - pi/2; // check for this  // > Event zero-condition for page Evol Page:9
          }  // > Event zero-condition for page Evol Page:10
        }  // > Event zero-condition for page Evol Page:11
        return 0;  // > Event zero-condition for page Evol Page:12
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (hmode)  // > Event action for page Evol Page:1
        {  // > Event action for page Evol Page:2
          omega = vx / r2; // action this  // > Event action for page Evol Page:3
          cta = -pi / 2;  // > Event action for page Evol Page:4
        }  // > Event action for page Evol Page:5
        else if (((cta < -0.4 * pi) && (cta > -0.6 * pi)) && (omega > 0))   // > Event action for page Evol Page:6
        {  // > Event action for page Evol Page:7
          omega = omega * R2 / r2; //action this  // > Event action for page Evol Page:8
        }  // > Event action for page Evol Page:9
        stage = 1; // move to stage 1  // > Event action for page Evol Page:10
        stagetext = "moving in circular motion on the circle radius r track";  // > Event action for page Evol Page:11
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (stage === 1)  // > Event zero-condition for page Evol Page:1
        {  // > Event zero-condition for page Evol Page:2
          if (((cta < -0.45 * pi) && (cta > -0.55 * pi)) && (omega < 0))   // > Event zero-condition for page Evol Page:3
          {  // > Event zero-condition for page Evol Page:4
            return -0.5 * pi - cta; // change this to increase number of loops  // > Event zero-condition for page Evol Page:5
          }  // > Event zero-condition for page Evol Page:6
        }  // > Event zero-condition for page Evol Page:7
        return 0;  // > Event zero-condition for page Evol Page:8
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (((cta < -0.4 * pi) && (cta > -0.6 * pi)) && (omega<0))  // > Event action for page Evol Page:1
        {    // > Event action for page Evol Page:2
          //complete loop continue on straight track  // > Event action for page Evol Page:3
          stage = 0; //continue on straight track  // > Event action for page Evol Page:4
          omega = omega * r2 / R2; //action this  // > Event action for page Evol Page:5
          stagetext = "moving in circular R track";  // > Event action for page Evol Page:6
        }  // > Event action for page Evol Page:7
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (stage === 1&&hmode==true)  // > Event zero-condition for page Evol Page:1
        {  // > Event zero-condition for page Evol Page:2
          if (((cta < -0.45 * pi) && (cta > -0.55 * pi)) && (omega < 0))   // > Event zero-condition for page Evol Page:3
          {  // > Event zero-condition for page Evol Page:4
            return -0.5 * pi - cta; // change this to increase number of loops  // > Event zero-condition for page Evol Page:5
          }  // > Event zero-condition for page Evol Page:6
        }  // > Event zero-condition for page Evol Page:7
        return 0;  // > Event zero-condition for page Evol Page:8
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        //if (((cta < -0.4 * pi) && (cta > -0.6 * pi)) && (omega<0))  // > Event action for page Evol Page:1
        //{    // > Event action for page Evol Page:2
          //complete loop continue on straight track  // > Event action for page Evol Page:3
         // hmode=true;  // > Event action for page Evol Page:4
          stage = 0; //continue on straight track  // > Event action for page Evol Page:5
         // omega = 0; //action this  // > Event action for page Evol Page:6
            vx = v;  // > Event action for page Evol Page:7
          omega = 0;  // > Event action for page Evol Page:8
          vy = 0;  // > Event action for page Evol Page:9
          stagetext = "moving in on horizontal launch track";  // > Event action for page Evol Page:10
        //}  // > Event action for page Evol Page:11
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.POSITIVE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-9; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (stage === 1)  // > Event zero-condition for page Evol Page:1
        {  // > Event zero-condition for page Evol Page:2
          if (cta > 0 && cta < pi)  // > Event zero-condition for page Evol Page:3
          { // top left n right Q  // > Event zero-condition for page Evol Page:4
            return r2 * omega * omega - g * Math.sin(cta); // return to position move to projectile  // > Event zero-condition for page Evol Page:5
          }  // > Event zero-condition for page Evol Page:6
        }  // > Event zero-condition for page Evol Page:7
        return 0;  // > Event zero-condition for page Evol Page:8
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (cta > 0 && cta < pi)  // > Event action for page Evol Page:1
        {  //free fall occurs at upper Quardrants  // > Event action for page Evol Page:2
          stage = 3; // move to stage 3  // > Event action for page Evol Page:3
          v = r2 * omega;  // > Event action for page Evol Page:4
          x = xmin + R + r2 * Math.cos(cta);  // > Event action for page Evol Page:5
          y = ymin + r + r2 * Math.sin(cta);  // > Event action for page Evol Page:6
          vx = -v * Math.sin(cta);  // > Event action for page Evol Page:7
          vy = v * Math.cos(cta);  // > Event action for page Evol Page:8
          cst = -1; // turn on gravity  // > Event action for page Evol Page:9
          stagetext = "moving in free fall motion";  // > Event action for page Evol Page:10
          ballColor = rgb(0, 255, 0); //Color.GREEN;  // > Event action for page Evol Page:11
        }  // > Event action for page Evol Page:12
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (((cta > 0.45 * pi) && (cta<0.55*pi)) && (r2 * omega * omega - g * Math.sin(cta) > 0.1))   // > Event zero-condition for page Evol Page:1
        { //lookang added to freeze at point at top AJC  // > Event zero-condition for page Evol Page:2
          return 0.5 * pi - cta; //testing  // > Event zero-condition for page Evol Page:3
        }  // > Event zero-condition for page Evol Page:4
        return 0;  // > Event zero-condition for page Evol Page:5
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event6 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (stage === 1)  // > Event zero-condition for page Evol Page:1
        {  // > Event zero-condition for page Evol Page:2
          if(cta > 4.5)  // > Event zero-condition for page Evol Page:3
          {  // > Event zero-condition for page Evol Page:4
            return 1.5 * pi - cta; // change this to increase number of loops  // > Event zero-condition for page Evol Page:5
          }  // > Event zero-condition for page Evol Page:6
        }  // > Event zero-condition for page Evol Page:7
        return 0;  // > Event zero-condition for page Evol Page:8
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (cta > 4.5)  // > Event action for page Evol Page:1
        { //complete loop continue on straight track  // > Event action for page Evol Page:2
          stage = 2; //continue on straight track  // > Event action for page Evol Page:3
          vx = r2 * omega;  // > Event action for page Evol Page:4
          vy = 0;  // > Event action for page Evol Page:5
          y = ymin;//// attempt to align track to point mass  // > Event action for page Evol Page:6
          x = xmin + R;  // > Event action for page Evol Page:7
          stagetext = "moving in linear motion on the bottom straight track";  // > Event action for page Evol Page:8
        }  // > Event action for page Evol Page:9
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event7 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (stage === 3)  // > Event zero-condition for page Evol Page:1
        {  // > Event zero-condition for page Evol Page:2
          return r2 * r2 - (x - xmin - R) * (x - xmin - R) - (y - ymin - r) * (y - ymin - r);  // > Event zero-condition for page Evol Page:3
        }  // > Event zero-condition for page Evol Page:4
        return 0;  // > Event zero-condition for page Evol Page:5
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        stage = 1;  // > Event action for page Evol Page:1
        var stage3 = Math.atan2(y - ymin - r2, x - xmin - R);  // > Event action for page Evol Page:2
        if ((stage3 > pi/2) && (stage3 < pi))  // > Event action for page Evol Page:3
        { // top left Q  // > Event action for page Evol Page:4
          cta = stage3;  // > Event action for page Evol Page:5
        }  // > Event action for page Evol Page:6
        else if (stage3 > -pi && stage3 < -pi/2)  // > Event action for page Evol Page:7
        { // bottom left Q  // > Event action for page Evol Page:8
          cta = stage3 + 2 * pi;  // > Event action for page Evol Page:9
        }  // > Event action for page Evol Page:10
        else if (stage3 > -pi/2 && stage3 < 0)  // > Event action for page Evol Page:11
        { // bottom left Q  // > Event action for page Evol Page:12
          cta = stage3;  // > Event action for page Evol Page:13
        }  // > Event action for page Evol Page:14
           // > Event action for page Evol Page:15
        c2 = Math.atan2(vy, vx);  // > Event action for page Evol Page:16
        omega = v / r2 * Math.sin(c2-cta) * 0.8;  // > Event action for page Evol Page:17
        cst = 0;  // > Event action for page Evol Page:18
        ballColor = rgb(255,0,0); //Color.RED  // > Event action for page Evol Page:19
        stagetext = "impact circular track r and motion continues";  // > Event action for page Evol Page:20
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event8 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (stage === 2)  // > Event zero-condition for page Evol Page:1
        {  // > Event zero-condition for page Evol Page:2
          return x - ((xmin + R) + (xmax - xmin)/2);  // > Event zero-condition for page Evol Page:3
        }  // > Event zero-condition for page Evol Page:4
        return 0;  // > Event zero-condition for page Evol Page:5
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        omega = __state[__cOut++];
        x = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = omega;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        stagetext = "motion paused";    // > Event action for page Evol Page:2
        done=true;  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_cta(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_omega(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_x(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vy(__time) {
    var __index = 0 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new coaster96wee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.displayPanel.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'displayPanel'
          _view.plottingPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  if (_model.isPlaying())_pause();
  else if (_model.isPaused())_play();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return stagetext; }, function(_v) { stagetext = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "hdragbuttonY="+hdragbuttonY; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnZoom", function(_data,_info) {
  _view.plottingPanel.setZoomLimits([5,60]);

}); // HtmlView Page setting action 'OnZoom' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return statustext; }, function(_v) { statustext = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.bottomstraighttrack.linkProperty("SizeX",  function() { return (xmax-xmin)/2; } ); // HtmlView Page linking property 'SizeX' for element 'bottomstraighttrack'
          _view.bottomstraighttrack.linkProperty("X",  function() { return xmin+R+12.5; } ); // HtmlView Page linking property 'X' for element 'bottomstraighttrack'
          _view.bottomstraighttrack.linkProperty("Y",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Y' for element 'bottomstraighttrack'
          _view.mass.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mass'
          _view.mass.linkProperty("LineColor",  function() { return ballColor; }, function(_v) { ballColor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'mass'
          _view.mass.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'mass'
          _view.mass.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'mass'
          _view.uptrackR.linkProperty("FunctionY",  function() { return uptrackRfny; }, function(_v) { uptrackRfny = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'uptrackR'
          _view.uptrackR.linkProperty("FunctionX",  function() { return uptrackRfnx; }, function(_v) { uptrackRfnx = _v; } ); // HtmlView Page linking property 'FunctionX' for element 'uptrackR'
          _view.uptrackR.linkProperty("NumPoints",  function() { return npt; }, function(_v) { npt = _v; } ); // HtmlView Page linking property 'NumPoints' for element 'uptrackR'
          _view.uptrackR.linkProperty("Maximum",  function() { return pi/2; } ); // HtmlView Page linking property 'Maximum' for element 'uptrackR'
          _view.uptrackR.linkProperty("Visibility",  function() { return !hmode; } ); // HtmlView Page linking property 'Visibility' for element 'uptrackR'
          _view.shape.linkProperty("SizeX",  function() { return 2*r; } ); // HtmlView Page linking property 'SizeX' for element 'shape'
          _view.shape.linkProperty("X",  function() { return xmin+R; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return ymin+r; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.shape.linkProperty("SizeY",  function() { return 2*r; } ); // HtmlView Page linking property 'SizeY' for element 'shape'
          _view.circletrack.linkProperty("FunctionY",  function() { return circletrackfny; }, function(_v) { circletrackfny = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'circletrack'
          _view.circletrack.linkProperty("FunctionX",  function() { return circletrackfnx; }, function(_v) { circletrackfnx = _v; } ); // HtmlView Page linking property 'FunctionX' for element 'circletrack'
          _view.circletrack.linkProperty("NumPoints",  function() { return npt; }, function(_v) { npt = _v; } ); // HtmlView Page linking property 'NumPoints' for element 'circletrack'
          _view.circletrack.linkProperty("Maximum",  function() { return 2*pi; } ); // HtmlView Page linking property 'Maximum' for element 'circletrack'
          _view.trace2.linkProperty("LineColor",  function() { return ballColor; }, function(_v) { ballColor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trace2'
          _view.trace2.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace2'
          _view.trace2.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace2'
          _view.Hmode.linkProperty("SizeX",  function() { return R; }, function(_v) { R = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Hmode'
          _view.Hmode.linkProperty("X",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'X' for element 'Hmode'
          _view.Hmode.linkProperty("Y",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Y' for element 'Hmode'
          _view.Hmode.linkProperty("Visibility",  function() { return hmode; }, function(_v) { hmode = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Hmode'
          _view.mgcomponents.linkProperty("Transformation",  function() { return cta; }, function(_v) { cta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'mgcomponents'
          _view.mgcomponents.linkProperty("SizeX",  function() { return fc*g*Math.sin(cta); } ); // HtmlView Page linking property 'SizeX' for element 'mgcomponents'
          _view.mgcomponents.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mgcomponents'
          _view.mgcomponents.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'mgcomponents'
          _view.mgcomponents.linkProperty("SizeY",  function() { return fc*g*Math.cos(cta); } ); // HtmlView Page linking property 'SizeY' for element 'mgcomponents'
          _view.mg.linkProperty("SizeX",  function() { return 0*fc; } ); // HtmlView Page linking property 'SizeX' for element 'mg'
          _view.mg.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mg'
          _view.mg.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'mg'
          _view.mg.linkProperty("Visibility",  function() { return showmg; }, function(_v) { showmg = _v; } ); // HtmlView Page linking property 'Visibility' for element 'mg'
          _view.mg.linkProperty("SizeY",  function() { return -g*fc; } ); // HtmlView Page linking property 'SizeY' for element 'mg'
          _view.textmg.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textmg'
          _view.textmg.linkProperty("Y",  function() { return y-g*fc; } ); // HtmlView Page linking property 'Y' for element 'textmg'
          _view.textmg.linkProperty("Visibility",  function() { return showmg; }, function(_v) { showmg = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textmg'
          _view.v3.linkProperty("Text",  function() { return "mg= "+(-g*fc).toFixed(2) + " N"; } ); // HtmlView Page linking property 'Text' for element 'v3'
          _view.R.linkProperty("SizeX",  function() { return -nf*Math.cos(cta)*fc; } ); // HtmlView Page linking property 'SizeX' for element 'R'
          _view.R.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'R'
          _view.R.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'R'
          _view.R.linkProperty("Visibility",  function() { return showR; }, function(_v) { showR = _v; } ); // HtmlView Page linking property 'Visibility' for element 'R'
          _view.R.linkProperty("SizeY",  function() { return -nf*Math.sin(cta)*fc; } ); // HtmlView Page linking property 'SizeY' for element 'R'
          _view.R.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'R'
          _view.atangent.linkProperty("SizeX",  function() { return -R2*getAlpha(stage,cta)*Math.cos(cta-pi/2)*fc*0.35; } ); // HtmlView Page linking property 'SizeX' for element 'atangent'
          _view.atangent.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'atangent'
          _view.atangent.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'atangent'
          _view.atangent.linkProperty("Visibility",  function() { return showatangent; }, function(_v) { showatangent = _v; } ); // HtmlView Page linking property 'Visibility' for element 'atangent'
          _view.atangent.linkProperty("SizeY",  function() { return -R2*getAlpha(stage,cta)*Math.sin(cta-pi/2)*fc*0.35; } ); // HtmlView Page linking property 'SizeY' for element 'atangent'
          _view.atangent2.linkProperty("SizeX",  function() { return -R2*getAlpha(stage,cta)*Math.cos(cta-pi/2)*fc*0.45; } ); // HtmlView Page linking property 'SizeX' for element 'atangent2'
          _view.atangent2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'atangent2'
          _view.atangent2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'atangent2'
          _view.atangent2.linkProperty("Visibility",  function() { return showatangent; }, function(_v) { showatangent = _v; } ); // HtmlView Page linking property 'Visibility' for element 'atangent2'
          _view.atangent2.linkProperty("SizeY",  function() { return -R2*getAlpha(stage,cta)*Math.sin(cta-pi/2)*fc*0.45; } ); // HtmlView Page linking property 'SizeY' for element 'atangent2'
          _view.acentre.linkProperty("SizeX",  function() { return -cf*cfs*Math.cos(cta)*fc*0.45; } ); // HtmlView Page linking property 'SizeX' for element 'acentre'
          _view.acentre.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'acentre'
          _view.acentre.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'acentre'
          _view.acentre.linkProperty("SizeY",  function() { return -cf*cfs*Math.sin(cta)*fc*0.45; } ); // HtmlView Page linking property 'SizeY' for element 'acentre'
          _view.acentre2.linkProperty("SizeX",  function() { return -cf*cfs*Math.cos(cta)*fc*0.35; } ); // HtmlView Page linking property 'SizeX' for element 'acentre2'
          _view.acentre2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'acentre2'
          _view.acentre2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'acentre2'
          _view.acentre2.linkProperty("Visibility",  function() { return showacentre; }, function(_v) { showacentre = _v; } ); // HtmlView Page linking property 'Visibility' for element 'acentre2'
          _view.acentre2.linkProperty("SizeY",  function() { return -cf*cfs*Math.sin(cta)*fc*0.35; } ); // HtmlView Page linking property 'SizeY' for element 'acentre2'
          _view.V.linkProperty("SizeX",  function() { return vx*0.2; } ); // HtmlView Page linking property 'SizeX' for element 'V'
          _view.V.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'V'
          _view.V.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'V'
          _view.V.linkProperty("Visibility",  function() { return showv; }, function(_v) { showv = _v; } ); // HtmlView Page linking property 'Visibility' for element 'V'
          _view.V.linkProperty("SizeY",  function() { return vy*0.2; } ); // HtmlView Page linking property 'SizeY' for element 'V'
          _view.V.setAction("OnDrag", function(_data,_info) {
  omega = Math.sqrt(vx*vx + vy*vy);
  if (stage === 0)
  {
    omega = omega/R;
  }
  else if (stage === 1) 
  {
    omega=omega/r;
  }

}); // HtmlView Page setting action 'OnDrag' for element 'V'
          _view.text2.linkProperty("X",  function() { return x+vx*0.2; } ); // HtmlView Page linking property 'X' for element 'text2'
          _view.text2.linkProperty("Y",  function() { return y+vy*0.2; } ); // HtmlView Page linking property 'Y' for element 'text2'
          _view.text2.linkProperty("Visibility",  function() { return showv; }, function(_v) { showv = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text2'
          _view.v2.linkProperty("Text",  function() { return "v= "+v.toFixed(2) + " m/s"; } ); // HtmlView Page linking property 'Text' for element 'v2'
          _view.m_control.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'm_control'
          _view.m_control.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'm_control'
          _view.m_control.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'm_control'
          _view.M.linkProperty("X",  function() { return mcontrolX + 0.7; } ); // HtmlView Page linking property 'X' for element 'M'
          _view.M.linkProperty("Y",  function() { return mcontrolY; }, function(_v) { mcontrolY = _v; } ); // HtmlView Page linking property 'Y' for element 'M'
          _view.M.linkProperty("Text",  function() { return "m =" + (m.toFixed(1)) + " m"; } ); // HtmlView Page linking property 'Text' for element 'M'
          _view.m_decrease.linkProperty("X",  function() { return mcontrolX; }, function(_v) { mcontrolX = _v; } ); // HtmlView Page linking property 'X' for element 'm_decrease'
          _view.m_decrease.linkProperty("Y",  function() { return mcontrolY-0.2; } ); // HtmlView Page linking property 'Y' for element 'm_decrease'
          _view.m_decrease.setAction("OnPress", function(_data,_info) {
  m = m - 1;
  if (m < mmin) {
    m = mmin;
    }

}); // HtmlView Page setting action 'OnPress' for element 'm_decrease'
          _view.m_increase.linkProperty("X",  function() { return mcontrolX; }, function(_v) { mcontrolX = _v; } ); // HtmlView Page linking property 'X' for element 'm_increase'
          _view.m_increase.linkProperty("Y",  function() { return mcontrolY+0.2; } ); // HtmlView Page linking property 'Y' for element 'm_increase'
          _view.m_increase.setAction("OnPress", function(_data,_info) {
  m = m + 1;
  if (m > mmax) {
    m = mmax;
  }

}); // HtmlView Page setting action 'OnPress' for element 'm_increase'
          _view.controllerv.linkProperty("Visibility",  function() { return t==0; } ); // HtmlView Page linking property 'Visibility' for element 'controllerv'
          _view.dragv.linkProperty("X",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'X' for element 'dragv'
          _view.dragv.setAction("OnDrag", function(_data,_info) {
  v= Math.round(v);
  if (v<-11)v=-11;
  if (v>25)v=25;
  if (hmode == true)
  {
    vx = v; 
  }
  else
  {
    omega = v/R;
  }
  showv=true;

}); // HtmlView Page setting action 'OnDrag' for element 'dragv'
          _view.text.linkProperty("X",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.v.linkProperty("Text",  function() { return "v= "+v.toFixed(2) + " m/s"; } ); // HtmlView Page linking property 'Text' for element 'v'
          _view.horizontalline.linkProperty("SizeX",  function() { return -xmin+x+size*2; } ); // HtmlView Page linking property 'SizeX' for element 'horizontalline'
          _view.horizontalline.linkProperty("X",  function() { return xmin-size*2; } ); // HtmlView Page linking property 'X' for element 'horizontalline'
          _view.horizontalline.linkProperty("Y",  function() { return ymin+EU/Ecst; } ); // HtmlView Page linking property 'Y' for element 'horizontalline'
          _view.r_dragger.linkProperty("X",  function() { return xmin+R; } ); // HtmlView Page linking property 'X' for element 'r_dragger'
          _view.r_dragger.linkProperty("Y",  function() { return ymin+r; } ); // HtmlView Page linking property 'Y' for element 'r_dragger'
          _view.centre.linkProperty("Transformation",  function() { return pi/4; } ); // HtmlView Page linking property 'Transformation' for element 'centre'
          _view.rdrag.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'rdrag'
          _view.rdrag.setAction("OnDrag", function(_data,_info) {
  if (r<1)r=1;
  if (r>9)r=9;
  r=Math.round(r);

}); // HtmlView Page setting action 'OnDrag' for element 'rdrag'
          _view.r.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'r'
          _view.r.linkProperty("Text",  function() { return "r = " + r.toFixed(2) + " m"; } ); // HtmlView Page linking property 'Text' for element 'r'
          _view.rdragbutton.linkProperty("SizeX",  function() { return 15 + 3*r; } ); // HtmlView Page linking property 'SizeX' for element 'rdragbutton'
          _view.rdragbutton.linkProperty("X",  function() { return rdragbuttonX; }, function(_v) { rdragbuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'rdragbutton'
          _view.rdragbutton.linkProperty("Y",  function() { return rdragbuttonY; }, function(_v) { rdragbuttonY = _v; } ); // HtmlView Page linking property 'Y' for element 'rdragbutton'
          _view.rdragbutton.linkProperty("SizeY",  function() { return 15 + 3*r; } ); // HtmlView Page linking property 'SizeY' for element 'rdragbutton'
          _view.rdragbutton.setAction("OnDrag", function(_data,_info) {
  if (rdragbuttonX>=rdragbuttonXmax) rdragbuttonX = rdragbuttonXmax ;
  if (rdragbuttonX<=rdragbuttonXmin) rdragbuttonX = rdragbuttonXmin ;
  r = rmin + ((rmax-rmin)*((rdragbuttonX-rdragbuttonXmin)/(rdragbuttonXmax-rdragbuttonXmin)))
  hdragbuttonY = y
  _initialize();

}); // HtmlView Page setting action 'OnDrag' for element 'rdragbutton'
          _view.rleftbumper.linkProperty("X",  function() { return rdragbuttonXmin-.3; } ); // HtmlView Page linking property 'X' for element 'rleftbumper'
          _view.rleftbumper.linkProperty("Y",  function() { return rdragbuttonY; }, function(_v) { rdragbuttonY = _v; } ); // HtmlView Page linking property 'Y' for element 'rleftbumper'
          _view.rrightbumper.linkProperty("X",  function() { return rdragbuttonXmax+.5; } ); // HtmlView Page linking property 'X' for element 'rrightbumper'
          _view.rrightbumper.linkProperty("Y",  function() { return rdragbuttonY; }, function(_v) { rdragbuttonY = _v; } ); // HtmlView Page linking property 'Y' for element 'rrightbumper'
          _view.h_dragger.linkProperty("Visibility",  function() { return t==0; } ); // HtmlView Page linking property 'Visibility' for element 'h_dragger'
          _view.hdragbutton.linkProperty("X",  function() { return hdragbuttonX; }, function(_v) { hdragbuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'hdragbutton'
          _view.hdragbutton.linkProperty("Y",  function() { return hdragbuttonY; }, function(_v) { hdragbuttonY = _v; } ); // HtmlView Page linking property 'Y' for element 'hdragbutton'
          _view.hdragbutton.setAction("OnDrag", function(_data,_info) {
  if (hdragbuttonY<=-10){
    hmode=true;
    }
    else {
      hmode=false;
      }
  if (hdragbuttonY>7.5)hdragbuttonY=7.5; //set maximum bound of draggable
  hdragbuttonY=Math.round(hdragbuttonY);
  //if (hdragbuttonY>=hdragbuttonYmax) hdragbuttonY = hdragbuttonYmax ;
  //if (hdragbuttonY<=hdragbuttonYmin) hdragbuttonY = hdragbuttonYmin ;
  k = 3.5*rmax*((hdragbuttonY-hdragbuttonYmin)/(r*(7.5-hdragbuttonYmin)));
  _initialize();

}); // HtmlView Page setting action 'OnDrag' for element 'hdragbutton'
          _view.h.linkProperty("X",  function() { return hdragbuttonX; }, function(_v) { hdragbuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'h'
          _view.h.linkProperty("Y",  function() { return hdragbuttonY; }, function(_v) { hdragbuttonY = _v; } ); // HtmlView Page linking property 'Y' for element 'h'
          _view.h.linkProperty("Text",  function() { return "h =" + ((y-ymin).toFixed(1)) + " m"; } ); // HtmlView Page linking property 'Text' for element 'h'
          _view.PE.linkProperty("SizeX",  function() { return size*2; } ); // HtmlView Page linking property 'SizeX' for element 'PE'
          _view.PE.linkProperty("X",  function() { return xmin-size*2; } ); // HtmlView Page linking property 'X' for element 'PE'
          _view.PE.linkProperty("Y",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Y' for element 'PE'
          _view.PE.linkProperty("SizeY",  function() { return EU/Ecst/m; } ); // HtmlView Page linking property 'SizeY' for element 'PE'
          _view.pe.linkProperty("Transformation",  function() { return Math.radians(-90); } ); // HtmlView Page linking property 'Transformation' for element 'pe'
          _view.pe.linkProperty("X",  function() { return xmin-size*2; } ); // HtmlView Page linking property 'X' for element 'pe'
          _view.pe.linkProperty("Y",  function() { return (ymax+ymin)/2; } ); // HtmlView Page linking property 'Y' for element 'pe'
          _view.pe.linkProperty("Text",  function() { return petext; }, function(_v) { petext = _v; } ); // HtmlView Page linking property 'Text' for element 'pe'
          _view.KE.linkProperty("SizeX",  function() { return size*2; } ); // HtmlView Page linking property 'SizeX' for element 'KE'
          _view.KE.linkProperty("X",  function() { return xmin-size*4; } ); // HtmlView Page linking property 'X' for element 'KE'
          _view.KE.linkProperty("Y",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Y' for element 'KE'
          _view.KE.linkProperty("SizeY",  function() { return EK/Ecst/m; } ); // HtmlView Page linking property 'SizeY' for element 'KE'
          _view.ke.linkProperty("Transformation",  function() { return Math.radians(-90); } ); // HtmlView Page linking property 'Transformation' for element 'ke'
          _view.ke.linkProperty("X",  function() { return xmin-size*4; } ); // HtmlView Page linking property 'X' for element 'ke'
          _view.ke.linkProperty("Y",  function() { return (ymax+ymin)/2; } ); // HtmlView Page linking property 'Y' for element 'ke'
          _view.ke.linkProperty("Text",  function() { return ketext; }, function(_v) { ketext = _v; } ); // HtmlView Page linking property 'Text' for element 'ke'
          _view.TE.linkProperty("SizeX",  function() { return size*2; } ); // HtmlView Page linking property 'SizeX' for element 'TE'
          _view.TE.linkProperty("X",  function() { return xmin-size*6; } ); // HtmlView Page linking property 'X' for element 'TE'
          _view.TE.linkProperty("Y",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Y' for element 'TE'
          _view.TE.linkProperty("SizeY",  function() { return (EK+EU)/Ecst/m; } ); // HtmlView Page linking property 'SizeY' for element 'TE'
          _view.te.linkProperty("Transformation",  function() { return Math.radians(-90); } ); // HtmlView Page linking property 'Transformation' for element 'te'
          _view.te.linkProperty("X",  function() { return xmin-size*6; } ); // HtmlView Page linking property 'X' for element 'te'
          _view.te.linkProperty("Y",  function() { return (ymax+ymin)/2; } ); // HtmlView Page linking property 'Y' for element 'te'
          _view.te.linkProperty("Text",  function() { return tetext; }, function(_v) { tetext = _v; } ); // HtmlView Page linking property 'Text' for element 'te'
          _view.panel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'panel'
          _view.comboBox.linkProperty("Options",  function() { return ["scenario 0","scenario 1","scenario 2","scenario 3","scenario 4","scenario 5","","show mg","hide mg","show R","hide R","show v","hide v","show tangent a","hide tangent a","show radial a","hide radial a"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  //var option = _view.Modules.getProperty("SelectedOptions");
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="show mg"){
  showmg=true;
    }
    
  else if ( option=="hide mg"){
    showmg=false;
    }
    
  if ( option=="show R"){
  showR=true;
    }
    
  else if ( option=="hide R"){
  showR=false;
    }
  if ( option=="show v"){
  showv=true;
    }
    
  else if ( option=="hide v"){
  showv=false;
    }
  if ( option=="show tangent a"){
  showatangent=true;
    }
    
  else if ( option=="hide tangent a"){
  showatangent=false;
    }
   if ( option=="show radial a"){
  showacentre=true;
    }
    
  else if ( option=="hide radial a"){
    showacentre=false; 
  }
  //"scenario -1"
  else if ( option=="scenario 5"){
  x=xmin;
    y=ymin;
    vy=0;
    hmode=true;
  _initialize();
  }
  else if ( option=="scenario 0"){
  k = 3.5;//"height of object to release in terms of radius of loop r at u=0 m/s"
  r = 4;
  hdragbuttonY = 4;
  hmode=false;
  _initialize();
  }
  else if ( option=="scenario 1"){
  k = 2.49;
  r = 4;
  hmode=false;
  _initialize();
  }
  else if ( option=="scenario 2"){
  k = 2;
  r = 4;
  hmode=false;
  _initialize();
  }
  else if ( option=="scenario 3"){
  k = 1.5;  
  r = 4;
  hmode=false;
  _initialize();
  }
  else if ( option=="scenario 4"){
  k = 1;
  r = 5;
  hmode=false;
  _initialize();
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  text="paused";
  isPaused=true;
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();
  isPaused=false;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();
  //_step();
  //_step();
  //_step();
  //_step(); // 5times due to FPS is 5;

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.controlPanel.linkProperty("Visibility",  function() { return (!_isMobile)||(!parent.cordova); } ); // HtmlView Page linking property 'Visibility' for element 'controlPanel'
          _view.hmodecheckBox.linkProperty("Checked",  function() { return hmode; }, function(_v) { hmode = _v; } ); // HtmlView Page linking property 'Checked' for element 'hmodecheckBox'
          _view.hmodecheckBox.setAction("OnChange", function(_data,_info) {
  if (hmode)
  {
    x=xmin;
    y=ymin;
    vy=0;
  }
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'hmodecheckBox'
          _view.hmodecheckBox.linkProperty("Disabled",  function() { return t!=0; } ); // HtmlView Page linking property 'Disabled' for element 'hmodecheckBox'
          _view.kslider.linkProperty("Minimum",  function() { return size2; }, function(_v) { size2 = _v; } ); // HtmlView Page linking property 'Minimum' for element 'kslider'
          _view.kslider.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'Value' for element 'kslider'
          _view.kslider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'kslider'
          _view.kfield.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'Value' for element 'kfield'
          _view.kfield.setAction("OnChange", function(_data,_info) {
  k = Math.min(3.5, k);
  k = Math.max(size2, k);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'kfield'
          _view.rslider.linkProperty("Minimum",  function() { return rmin; }, function(_v) { rmin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'rslider'
          _view.rslider.linkProperty("Maximum",  function() { return rmax; }, function(_v) { rmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'rslider'
          _view.rslider.linkProperty("Value",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'Value' for element 'rslider'
          _view.rslider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'rslider'
          _view.rfield.linkProperty("Value",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'Value' for element 'rfield'
          _view.rfield.setAction("OnChange", function(_data,_info) {
  r = Math.min(4+size2, r);
  r = Math.max(1+size*2, r);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'rfield'
          _view.mlabel.linkProperty("Background",  function() { return ballColor; }, function(_v) { ballColor = _v; } ); // HtmlView Page linking property 'Background' for element 'mlabel'
          _view.mslider.linkProperty("Maximum",  function() { return xmax*0.2; } ); // HtmlView Page linking property 'Maximum' for element 'mslider'
          _view.mslider.linkProperty("Background",  function() { return ballColor; }, function(_v) { ballColor = _v; } ); // HtmlView Page linking property 'Background' for element 'mslider'
          _view.mslider.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'mslider'
          _view.mslider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'mslider'
          _view.mfield.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'mfield'
          _view.mfield.setAction("OnChange", function(_data,_info) {
  m = Math.min(xmax*0.2, m);
  m = Math.max(0.5, m);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'mfield'
          _view.munitlabel.linkProperty("Background",  function() { return ballColor; }, function(_v) { ballColor = _v; } ); // HtmlView Page linking property 'Background' for element 'munitlabel'
          _view.vcheckBox.linkProperty("Checked",  function() { return showv; }, function(_v) { showv = _v; } ); // HtmlView Page linking property 'Checked' for element 'vcheckBox'
          _view.vslider.linkProperty("Value",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'Value' for element 'vslider'
          _view.vslider.setAction("OnChange", function(_data,_info) {
  if (hmode === true)
  {
    vx = v; 
  }
  else
  {
    omega = v/R;
  }
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'vslider'
          _view.vfield.linkProperty("Value",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'Value' for element 'vfield'
          _view.vfield.setAction("OnChange", function(_data,_info) {
  v = Math.min(40, v);
  v = Math.max(-40, v);
  if (hmode === true)
  {
   vx = v;  
  }
  else 
  {
    omega = v/R;
  }
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'vfield'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function coaster96wee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = coaster96wee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./coaster96wee_Intro_1.html');
  _view._addDescriptionPage('About','./coaster96wee_Intro_2.html');
  _view._addDescriptionPage('For Teachers','./coaster96wee_Intro_3.html');

  return _view;
} // end of main function

function coaster96wee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displayPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'displayPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'displayPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Background","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","Roller Coaster Loop Model") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-20) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginY",20) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"movedown", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'movedown'
      .setProperty("X",-12.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'movedown'
      .setProperty("Y",10) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'movedown'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"bottomstraighttrack", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomstraighttrack'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'bottomstraighttrack'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'bottomstraighttrack'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'bottomstraighttrack'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'bottomstraighttrack'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mass", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'mass'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mass'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mass'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mass'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mass'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"uptrackR", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'uptrackR'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'uptrackR'
      .setProperty("Variable","c") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'uptrackR'
      .setProperty("LineColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'uptrackR'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'uptrackR'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","rgba(255,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"circletrack", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'circletrack'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'circletrack'
      .setProperty("Variable","c") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'circletrack'
      .setProperty("LineColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'circletrack'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'circletrack'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace2", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'trace2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace2'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trace2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"Hmode", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'Hmode'
      .setProperty("LineColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Hmode'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Hmode'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Hmode'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mgcomponents", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'mgcomponents'
      .setProperty("FillColor","rgba(128,128,128,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mgcomponents'
      .setProperty("RelativePosition","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mgcomponents'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mgcomponents'
      .setProperty("LineColor","rgba(128,128,128,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mgcomponents'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"mg", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'mg'
      .setProperty("LineColor","rgba(64,255,64,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mg'
      .setProperty("MarkEndColor","rgba(64,255,64,1)") // EJsS HtmlView.HtmlView Page: setting property 'MarkEndColor' for element 'mg'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mg'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"textmg", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'textmg'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"v3", _view.textmg) // EJsS HtmlView.HtmlView Page: declaration of element 'v3'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'v3'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'v3'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'v3'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"R", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'R'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'R'
      .setProperty("MarkEndColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'MarkEndColor' for element 'R'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"atangent", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'atangent'
      .setProperty("LineColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'atangent'
      .setProperty("MarkEndColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'MarkEndColor' for element 'atangent'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"atangent2", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'atangent2'
      .setProperty("LineColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'atangent2'
      .setProperty("MarkEndColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'MarkEndColor' for element 'atangent2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"acentre", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'acentre'
      .setProperty("LineColor","orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'acentre'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'acentre'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'acentre'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"acentre2", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'acentre2'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'acentre2'
      .setProperty("MarkEndColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'MarkEndColor' for element 'acentre2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'acentre2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"V", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'V'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'V'
      .setProperty("MarkEndColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'MarkEndColor' for element 'V'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'V'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"text2", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"v2", _view.text2) // EJsS HtmlView.HtmlView Page: declaration of element 'v2'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'v2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'v2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'v2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"m_control", _view.movedown) // EJsS HtmlView.HtmlView Page: declaration of element 'm_control'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"M", _view.m_control) // EJsS HtmlView.HtmlView Page: declaration of element 'M'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'M'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"m_decrease", _view.m_control) // EJsS HtmlView.HtmlView Page: declaration of element 'm_decrease'
      .setProperty("Sensitivity",30) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'm_decrease'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'm_decrease'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'm_decrease'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'm_decrease'
      .setProperty("SizeY",-15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'm_decrease'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'm_decrease'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'm_decrease'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'm_decrease'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"m_increase", _view.m_control) // EJsS HtmlView.HtmlView Page: declaration of element 'm_increase'
      .setProperty("Sensitivity",30) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'm_increase'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'm_increase'
      .setProperty("LineColor","rgba(0,128,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'm_increase'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'm_increase'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'm_increase'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'm_increase'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'm_increase'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'm_increase'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"controllerv", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controllerv'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'controllerv'
      .setProperty("Y",18) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'controllerv'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dragv", _view.controllerv) // EJsS HtmlView.HtmlView Page: declaration of element 'dragv'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'dragv'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dragv'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dragv'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'dragv'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'dragv'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'dragv'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'dragv'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragv'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"text", _view.controllerv) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"v", _view.text) // EJsS HtmlView.HtmlView Page: declaration of element 'v'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'v'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'v'
      .setProperty("Y",-1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'v'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'v'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"horizontalline", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'horizontalline'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'horizontalline'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'horizontalline'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'horizontalline'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"r_dragger", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'r_dragger'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"centre", _view.r_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'centre'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'centre'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'centre'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'centre'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'centre'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'centre'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'centre'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'centre'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rdrag", _view.r_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'rdrag'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rdrag'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rdrag'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'rdrag'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rdrag'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'rdrag'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'rdrag'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'rdrag'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"r", _view.r_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'r'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rdragbutton", _view.r_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'rdragbutton'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rdragbutton'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rdragbutton'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rdragbutton'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'rdragbutton'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'rdragbutton'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'rdragbutton'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rleftbumper", _view.r_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'rleftbumper'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rleftbumper'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rleftbumper'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rleftbumper'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'rleftbumper'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'rleftbumper'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rleftbumper'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rrightbumper", _view.r_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'rrightbumper'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rrightbumper'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rrightbumper'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rrightbumper'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'rrightbumper'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'rrightbumper'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rrightbumper'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"h_dragger", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'h_dragger'
      .setProperty("X",-19) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'h_dragger'
      .setProperty("Y",10) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'h_dragger'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hdragbutton", _view.h_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'hdragbutton'
      .setProperty("FillColor","rgba(0,255,0,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hdragbutton'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hdragbutton'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hdragbutton'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hdragbutton'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hdragbutton'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hdragbutton'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'hdragbutton'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hdragbutton'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"h", _view.h_dragger) // EJsS HtmlView.HtmlView Page: declaration of element 'h'
      .setProperty("RelativePosition","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'h'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Energygroup", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Energygroup'
      .setProperty("X",23) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Energygroup'
      .setProperty("Y",10) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Energygroup'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"PE", _view.Energygroup) // EJsS HtmlView.HtmlView Page: declaration of element 'PE'
      .setProperty("FillColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'PE'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'PE'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'PE'
      .setProperty("LineColor","white") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'PE'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"pe", _view.Energygroup) // EJsS HtmlView.HtmlView Page: declaration of element 'pe'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'pe'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pe'
      .setProperty("LineColor","GRAY") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'pe'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pe'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pe'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'pe'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'pe'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'pe'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"KE", _view.Energygroup) // EJsS HtmlView.HtmlView Page: declaration of element 'KE'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'KE'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'KE'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'KE'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'KE'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"ke", _view.Energygroup) // EJsS HtmlView.HtmlView Page: declaration of element 'ke'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ke'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ke'
      .setProperty("Size",true) // EJsS HtmlView.HtmlView Page: setting property 'Size' for element 'ke'
      .setProperty("LineColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ke'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ke'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'ke'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'ke'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'ke'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"TE", _view.Energygroup) // EJsS HtmlView.HtmlView Page: declaration of element 'TE'
      .setProperty("FillColor","black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'TE'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'TE'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'TE'
      .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'TE'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"te", _view.Energygroup) // EJsS HtmlView.HtmlView Page: declaration of element 'te'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'te'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'te'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'te'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'te'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'te'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'te'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'te'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'te'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "20px",    "margin-right":"0px",    "right":"30%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Text","▶|") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"klabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'klabel'
      .setProperty("Background","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'klabel'
      .setProperty("Tooltip","height of object to release in terms of radius of loop r at u=0 m/s") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'klabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'klabel'
      .setProperty("Text"," H = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'klabel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"hmodecheckBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hmodecheckBox'
      .setProperty("Background","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'hmodecheckBox'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"kslider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'kslider'
      .setProperty("Maximum",3.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'kslider'
      .setProperty("Background","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'kslider'
      .setProperty("Tooltip","height of object to release in terms of radius of loop r at u=0 m/s") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'kslider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"kfield", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'kfield'
      .setProperty("Width","4%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'kfield'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'kfield'
      .setProperty("Tooltip","height of object to release in terms of radius of loop r at u=0 m/s") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'kfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"kunitlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'kunitlabel'
      .setProperty("Background","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'kunitlabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'kunitlabel'
      .setProperty("Text"," r ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'kunitlabel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"rlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rlabel'
      .setProperty("Background","black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'rlabel'
      .setProperty("Tooltip","radius of circle path loop") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'rlabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'rlabel'
      .setProperty("Text","r = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'rlabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"rslider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rslider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'rslider'
      .setProperty("Background","Black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'rslider'
      .setProperty("Tooltip","radius of circle path loop") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'rslider'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'rslider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"rfield", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rfield'
      .setProperty("Width","4%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'rfield'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'rfield'
      .setProperty("Tooltip","radius of circle path loop") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'rfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"runitlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runitlabel'
      .setProperty("Background","black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'runitlabel'
      .setProperty("Tooltip","radius of circle path loop") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runitlabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'runitlabel'
      .setProperty("Text"," m ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'runitlabel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mlabel'
      .setProperty("Tooltip","mass of object in circular motion on a rod") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'mlabel'
      .setProperty("Foreground","WHITE") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'mlabel'
      .setProperty("Text","m = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mlabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"mslider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mslider'
      .setProperty("Minimum",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'mslider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'mslider'
      .setProperty("Tooltip","mass of object in circular motion on a rod") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'mslider'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'mslider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"mfield", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mfield'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'mfield'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'mfield'
      .setProperty("Tooltip","mass of object in circular motion on a rod") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'mfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"munitlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'munitlabel'
      .setProperty("Tooltip","mass of object in circular motion on a rod") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'munitlabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'munitlabel'
      .setProperty("Text"," kg ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'munitlabel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"vcheckBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vcheckBox'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vcheckBox'
      .setProperty("Tooltip","linear velocity in tangential direction of circular motion") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vcheckBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vlabel'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vlabel'
      .setProperty("Tooltip","linear velocity in tangential direction of circular motion") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vlabel'
      .setProperty("Text"," v = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vlabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"vslider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vslider'
      .setProperty("Minimum",-40) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'vslider'
      .setProperty("Maximum",40) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'vslider'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vslider'
      .setProperty("Tooltip","linear velocity in tangential direction of circular motion") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vslider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"vfield", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vfield'
      .setProperty("Width","4%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'vfield'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'vfield'
      .setProperty("Tooltip","linear velocity in tangential direction of circular motion") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vunitlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vunitlabel'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vunitlabel'
      .setProperty("Tooltip","metre per second") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vunitlabel'
      .setProperty("Text"," m/s ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vunitlabel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Ejs Open Source Circular Loop Vertical Motion java applet<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_6circle/ejss_model_coaster96weev3/Coaster/Screen Shot 2017-04-27 at 4.28.10 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_6circle/ejss_model_coaster96weev3/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_6circle/ejss_model_coaster96weev3/01authorlookang50x50.png" />
 Fu-Kwun Hwang remixed by lookang; lookang; tina
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, creative commons attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new coaster96wee("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_6circle/ejss_model_coaster96weev3/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
