<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function reference_circle_v2weework(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var m; // EjsS Model.Variables.Basic Variables.m
  var m2; // EjsS Model.Variables.Basic Variables.m2
  var k; // EjsS Model.Variables.Basic Variables.k
  var k2; // EjsS Model.Variables.Basic Variables.k2
  var A; // EjsS Model.Variables.Basic Variables.A
  var A2; // EjsS Model.Variables.Basic Variables.A2
  var phase; // EjsS Model.Variables.Basic Variables.phase
  var phase2; // EjsS Model.Variables.Basic Variables.phase2
  var theta; // EjsS Model.Variables.Basic Variables.theta
  var theta2; // EjsS Model.Variables.Basic Variables.theta2
  var omega; // EjsS Model.Variables.Basic Variables.omega
  var omega2; // EjsS Model.Variables.Basic Variables.omega2
  var L; // EjsS Model.Variables.Basic Variables.L
  var x; // EjsS Model.Variables.Basic Variables.x
  var x2; // EjsS Model.Variables.Basic Variables.x2
  var y0; // EjsS Model.Variables.Basic Variables.y0
  var y; // EjsS Model.Variables.Basic Variables.y
  var y02; // EjsS Model.Variables.Basic Variables.y02
  var y2; // EjsS Model.Variables.Basic Variables.y2
  var v; // EjsS Model.Variables.Basic Variables.v
  var v2; // EjsS Model.Variables.Basic Variables.v2
  var a; // EjsS Model.Variables.Basic Variables.a
  var a2; // EjsS Model.Variables.Basic Variables.a2
  var t; // EjsS Model.Variables.Basic Variables.t
  var dt; // EjsS Model.Variables.Basic Variables.dt
  var PE; // EjsS Model.Variables.Basic Variables.PE
  var PE2; // EjsS Model.Variables.Basic Variables.PE2
  var KE; // EjsS Model.Variables.Basic Variables.KE
  var KE2; // EjsS Model.Variables.Basic Variables.KE2
  var EMax; // EjsS Model.Variables.Basic Variables.EMax
  var EMax2; // EjsS Model.Variables.Basic Variables.EMax2
  var newEMax; // EjsS Model.Variables.Basic Variables.newEMax
  var helpLabel; // EjsS Model.Variables.Basic Variables.helpLabel
  var helpFlag; // EjsS Model.Variables.Basic Variables.helpFlag
  var numTicks; // EjsS Model.Variables.Basic Variables.numTicks
  var xTicks; // EjsS Model.Variables.Basic Variables.xTicks
  var i; // EjsS Model.Variables.Basic Variables.i

  var color1; // EjsS Model.Variables.lookang.color1
  var color2; // EjsS Model.Variables.lookang.color2
  var colorsum; // EjsS Model.Variables.lookang.colorsum
  var pi; // EjsS Model.Variables.lookang.pi
  var cta; // EjsS Model.Variables.lookang.cta
  var cta2; // EjsS Model.Variables.lookang.cta2
  var Asum; // EjsS Model.Variables.lookang.Asum
  var xsum; // EjsS Model.Variables.lookang.xsum
  var ysum; // EjsS Model.Variables.lookang.ysum
  var phasesum; // EjsS Model.Variables.lookang.phasesum
  var showPloty; // EjsS Model.Variables.lookang.showPloty
  var showPlotx; // EjsS Model.Variables.lookang.showPlotx
  var showsum; // EjsS Model.Variables.lookang.showsum
  var T; // EjsS Model.Variables.lookang.T
  var ctadeg; // EjsS Model.Variables.lookang.ctadeg
  var cta2deg; // EjsS Model.Variables.lookang.cta2deg
  var rotation; // EjsS Model.Variables.lookang.rotation
  var rotation2; // EjsS Model.Variables.lookang.rotation2
  var sign; // EjsS Model.Variables.lookang.sign
  var sign2; // EjsS Model.Variables.lookang.sign2

  var font; // EjsS Model.Variables.VariableWC.font
  var showV; // EjsS Model.Variables.VariableWC.showV
  var showA; // EjsS Model.Variables.VariableWC.showA

  var A1correct; // EjsS Model.Variables.answerscheck.A1correct
  var enterA1; // EjsS Model.Variables.answerscheck.enterA1
  var A1correctbackground; // EjsS Model.Variables.answerscheck.A1correctbackground
  var showhint; // EjsS Model.Variables.answerscheck.showhint
  var Answer; // EjsS Model.Variables.answerscheck.Answer
  var answertext; // EjsS Model.Variables.answerscheck.answertext

  var dcangle; // EjsS Model.Variables.Angle.dcangle
  var nangle; // EjsS Model.Variables.Angle.nangle
  var px; // EjsS Model.Variables.Angle.px
  var py; // EjsS Model.Variables.Angle.py
  var c; // EjsS Model.Variables.Angle.c

  var R; // EjsS Model.Variables.View.R
  var xmin; // EjsS Model.Variables.View.xmin
  var xmax; // EjsS Model.Variables.View.xmax
  var ymin; // EjsS Model.Variables.View.ymin
  var ymax; // EjsS Model.Variables.View.ymax

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      m : m,
      m2 : m2,
      k : k,
      k2 : k2,
      A : A,
      A2 : A2,
      phase : phase,
      phase2 : phase2,
      theta : theta,
      theta2 : theta2,
      omega : omega,
      omega2 : omega2,
      L : L,
      x : x,
      x2 : x2,
      y0 : y0,
      y : y,
      y02 : y02,
      y2 : y2,
      v : v,
      v2 : v2,
      a : a,
      a2 : a2,
      t : t,
      dt : dt,
      PE : PE,
      PE2 : PE2,
      KE : KE,
      KE2 : KE2,
      EMax : EMax,
      EMax2 : EMax2,
      newEMax : newEMax,
      helpLabel : helpLabel,
      helpFlag : helpFlag,
      numTicks : numTicks,
      xTicks : xTicks,
      i : i,
      color1 : color1,
      color2 : color2,
      colorsum : colorsum,
      pi : pi,
      cta : cta,
      cta2 : cta2,
      Asum : Asum,
      xsum : xsum,
      ysum : ysum,
      phasesum : phasesum,
      showPloty : showPloty,
      showPlotx : showPlotx,
      showsum : showsum,
      T : T,
      ctadeg : ctadeg,
      cta2deg : cta2deg,
      rotation : rotation,
      rotation2 : rotation2,
      sign : sign,
      sign2 : sign2,
      font : font,
      showV : showV,
      showA : showA,
      A1correct : A1correct,
      enterA1 : enterA1,
      A1correctbackground : A1correctbackground,
      showhint : showhint,
      Answer : Answer,
      answertext : answertext,
      dcangle : dcangle,
      nangle : nangle,
      px : px,
      py : py,
      c : c,
      R : R,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.m2 != "undefined") m2 = json.m2;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.k2 != "undefined") k2 = json.k2;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.A2 != "undefined") A2 = json.A2;
    if(typeof json.phase != "undefined") phase = json.phase;
    if(typeof json.phase2 != "undefined") phase2 = json.phase2;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.theta2 != "undefined") theta2 = json.theta2;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.omega2 != "undefined") omega2 = json.omega2;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y0 != "undefined") y0 = json.y0;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.y02 != "undefined") y02 = json.y02;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.v2 != "undefined") v2 = json.v2;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.a2 != "undefined") a2 = json.a2;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.PE != "undefined") PE = json.PE;
    if(typeof json.PE2 != "undefined") PE2 = json.PE2;
    if(typeof json.KE != "undefined") KE = json.KE;
    if(typeof json.KE2 != "undefined") KE2 = json.KE2;
    if(typeof json.EMax != "undefined") EMax = json.EMax;
    if(typeof json.EMax2 != "undefined") EMax2 = json.EMax2;
    if(typeof json.newEMax != "undefined") newEMax = json.newEMax;
    if(typeof json.helpLabel != "undefined") helpLabel = json.helpLabel;
    if(typeof json.helpFlag != "undefined") helpFlag = json.helpFlag;
    if(typeof json.numTicks != "undefined") numTicks = json.numTicks;
    if(typeof json.xTicks != "undefined") xTicks = json.xTicks;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.color1 != "undefined") color1 = json.color1;
    if(typeof json.color2 != "undefined") color2 = json.color2;
    if(typeof json.colorsum != "undefined") colorsum = json.colorsum;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.cta2 != "undefined") cta2 = json.cta2;
    if(typeof json.Asum != "undefined") Asum = json.Asum;
    if(typeof json.xsum != "undefined") xsum = json.xsum;
    if(typeof json.ysum != "undefined") ysum = json.ysum;
    if(typeof json.phasesum != "undefined") phasesum = json.phasesum;
    if(typeof json.showPloty != "undefined") showPloty = json.showPloty;
    if(typeof json.showPlotx != "undefined") showPlotx = json.showPlotx;
    if(typeof json.showsum != "undefined") showsum = json.showsum;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.ctadeg != "undefined") ctadeg = json.ctadeg;
    if(typeof json.cta2deg != "undefined") cta2deg = json.cta2deg;
    if(typeof json.rotation != "undefined") rotation = json.rotation;
    if(typeof json.rotation2 != "undefined") rotation2 = json.rotation2;
    if(typeof json.sign != "undefined") sign = json.sign;
    if(typeof json.sign2 != "undefined") sign2 = json.sign2;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.showV != "undefined") showV = json.showV;
    if(typeof json.showA != "undefined") showA = json.showA;
    if(typeof json.A1correct != "undefined") A1correct = json.A1correct;
    if(typeof json.enterA1 != "undefined") enterA1 = json.enterA1;
    if(typeof json.A1correctbackground != "undefined") A1correctbackground = json.A1correctbackground;
    if(typeof json.showhint != "undefined") showhint = json.showhint;
    if(typeof json.Answer != "undefined") Answer = json.Answer;
    if(typeof json.answertext != "undefined") answertext = json.answertext;
    if(typeof json.dcangle != "undefined") dcangle = json.dcangle;
    if(typeof json.nangle != "undefined") nangle = json.nangle;
    if(typeof json.px != "undefined") px = json.px;
    if(typeof json.py != "undefined") py = json.py;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
  };

  _model._inputAndPublicParameters = ["m",  "m2",  "k",  "k2",  "A",  "A2",  "phase",  "phase2",  "theta",  "theta2",  "omega",  "omega2",  "L",  "x",  "x2",  "y0",  "y",  "y02",  "y2",  "v",  "v2",  "a",  "a2",  "t",  "dt",  "PE",  "PE2",  "KE",  "KE2",  "EMax",  "EMax2",  "newEMax",  "helpLabel",  "helpFlag",  "numTicks",  "xTicks",  "i",  "color1",  "color2",  "colorsum",  "pi",  "cta",  "cta2",  "Asum",  "xsum",  "ysum",  "phasesum",  "showPloty",  "showPlotx",  "showsum",  "T",  "ctadeg",  "cta2deg",  "rotation",  "rotation2",  "sign",  "sign2",  "font",  "showV",  "showA",  "A1correct",  "enterA1",  "A1correctbackground",  "showhint",  "Answer",  "answertext",  "dcangle",  "nangle",  "px",  "py",  "c",  "R",  "xmin",  "xmax",  "ymin",  "ymax"]; 

  _model._outputAndPublicParameters = ["m",  "m2",  "k",  "k2",  "A",  "A2",  "phase",  "phase2",  "theta",  "theta2",  "omega",  "omega2",  "L",  "x",  "x2",  "y0",  "y",  "y02",  "y2",  "v",  "v2",  "a",  "a2",  "t",  "dt",  "PE",  "PE2",  "KE",  "KE2",  "EMax",  "EMax2",  "newEMax",  "helpLabel",  "helpFlag",  "numTicks",  "xTicks",  "i",  "color1",  "color2",  "colorsum",  "pi",  "cta",  "cta2",  "Asum",  "xsum",  "ysum",  "phasesum",  "showPloty",  "showPlotx",  "showsum",  "T",  "ctadeg",  "cta2deg",  "rotation",  "rotation2",  "sign",  "sign2",  "font",  "showV",  "showA",  "A1correct",  "enterA1",  "A1correctbackground",  "showhint",  "Answer",  "answertext",  "dcangle",  "nangle",  "px",  "py",  "c",  "R",  "xmin",  "xmax",  "ymin",  "ymax"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = false;
    __pagesEnabled["Evol Page 2"] = true;
    __pagesEnabled["Cons Page"] = true;
    __pagesEnabled["lookang"] = true;
    __pagesEnabled["answercheck"] = true;
    __pagesEnabled["Angle"] = true;
    __pagesEnabled["View"] = true;
  });

  _model.addToReset(function() {
    m = 0.9999750000000001; // EjsS Model.Variables.Basic Variables.m
    m2 = 1.0; // EjsS Model.Variables.Basic Variables.m2
    k = 0.9999750000000001; // EjsS Model.Variables.Basic Variables.k
    k2 = 0.9999750000000001; // EjsS Model.Variables.Basic Variables.k2
    A = 0.39999700000000005; // EjsS Model.Variables.Basic Variables.A
    A2 = 0.799993; // EjsS Model.Variables.Basic Variables.A2
    phase = 0; // EjsS Model.Variables.Basic Variables.phase
    phase2 = 0; // EjsS Model.Variables.Basic Variables.phase2
    theta = phase*Math.PI/180.0; // EjsS Model.Variables.Basic Variables.theta
    theta2 = phase2*Math.PI/180.0; // EjsS Model.Variables.Basic Variables.theta2
    omega = Math.sqrt(k/m); // EjsS Model.Variables.Basic Variables.omega
    omega2 = Math.sqrt(k2/m2); // EjsS Model.Variables.Basic Variables.omega2
    L = 1.0; // EjsS Model.Variables.Basic Variables.L
    x = 0; // EjsS Model.Variables.Basic Variables.x
    x2 = 0; // EjsS Model.Variables.Basic Variables.x2
    y0 = -1.1; // EjsS Model.Variables.Basic Variables.y0
    y = A*Math.sin(theta); // EjsS Model.Variables.Basic Variables.y
    y02 = -1.4; // EjsS Model.Variables.Basic Variables.y02
    y2 = A2*Math.sin(theta2); // EjsS Model.Variables.Basic Variables.y2
    v = 0; // EjsS Model.Variables.Basic Variables.v
    v2 = 0; // EjsS Model.Variables.Basic Variables.v2
    a = 0; // EjsS Model.Variables.Basic Variables.a
    a2 = 0; // EjsS Model.Variables.Basic Variables.a2
    t = 0.0; // EjsS Model.Variables.Basic Variables.t
    dt = 0.02; // EjsS Model.Variables.Basic Variables.dt
    PE = 0.5*k*x*x; // EjsS Model.Variables.Basic Variables.PE
    PE2 = 0.5*k2*x2*x2; // EjsS Model.Variables.Basic Variables.PE2
    KE = 0.5*m*v*v; // EjsS Model.Variables.Basic Variables.KE
    KE2 = 0.5*m2*v2*v2; // EjsS Model.Variables.Basic Variables.KE2
    EMax = 1.1*(PE+KE); // EjsS Model.Variables.Basic Variables.EMax
    EMax2 = 1.1*(PE2+KE2); // EjsS Model.Variables.Basic Variables.EMax2
    newEMax = 0.0; // EjsS Model.Variables.Basic Variables.newEMax
    helpLabel = "Show Help"; // EjsS Model.Variables.Basic Variables.helpLabel
    helpFlag = false; // EjsS Model.Variables.Basic Variables.helpFlag
    numTicks = 17; // EjsS Model.Variables.Basic Variables.numTicks
    xTicks = new Array(numTicks); // EjsS Model.Variables.Basic Variables.xTicks
    (function () {
      var _i0;
      for (_i0=0; _i0<numTicks; _i0+=1) {  // EjsS Model.Variables.Basic Variables.xTicks
        xTicks[_i0] = 0;  // EjsS Model.Variables.Basic Variables.xTicks
      }
    }());
    i = 0; // EjsS Model.Variables.Basic Variables.i
  });

  _model.addToReset(function() {
    color1 = "rgba(0,0,255,255)"; // EjsS Model.Variables.lookang.color1
    color2 = "rgba(255,0,0,255)"; // EjsS Model.Variables.lookang.color2
    colorsum = "rgba(128,0,128,255)"; // EjsS Model.Variables.lookang.colorsum
    pi = Math.PI; // EjsS Model.Variables.lookang.pi
    cta = 0; // EjsS Model.Variables.lookang.cta
    cta2 = pi/3; // EjsS Model.Variables.lookang.cta2
    Asum = 0; // EjsS Model.Variables.lookang.Asum
    xsum = 0; // EjsS Model.Variables.lookang.xsum
    ysum = 0; // EjsS Model.Variables.lookang.ysum
    phasesum = 0; // EjsS Model.Variables.lookang.phasesum
    showPloty = false; // EjsS Model.Variables.lookang.showPloty
    showPlotx = true; // EjsS Model.Variables.lookang.showPlotx
    showsum = false; // EjsS Model.Variables.lookang.showsum
    T = 0; // EjsS Model.Variables.lookang.T
    ctadeg = 0; // EjsS Model.Variables.lookang.ctadeg
    cta2deg = 0; // EjsS Model.Variables.lookang.cta2deg
    rotation = true; // EjsS Model.Variables.lookang.rotation
    rotation2 = true; // EjsS Model.Variables.lookang.rotation2
    sign = 1; // EjsS Model.Variables.lookang.sign
    sign2 = 1; // EjsS Model.Variables.lookang.sign2
  });

  _model.addToReset(function() {
    font = "normal normal 1.5vw"; // EjsS Model.Variables.VariableWC.font
    showV = false; // EjsS Model.Variables.VariableWC.showV
    showA = false; // EjsS Model.Variables.VariableWC.showA
  });

  _model.addToReset(function() {
    answertext = ""; // EjsS Model.Variables.answerscheck.answertext
  });

  _model.addToReset(function() {
    dcangle = 0; // EjsS Model.Variables.Angle.dcangle
    nangle = 36; // EjsS Model.Variables.Angle.nangle
    px = new Array(nangle); // EjsS Model.Variables.Angle.px
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.Angle.px
        px[_i0] = 0;  // EjsS Model.Variables.Angle.px
      }
    }());
    py = new Array(nangle); // EjsS Model.Variables.Angle.py
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.Angle.py
        py[_i0] = 0;  // EjsS Model.Variables.Angle.py
      }
    }());
    c = 0; // EjsS Model.Variables.Angle.c
  });

  _model.addToReset(function() {
    R = 0; // EjsS Model.Variables.View.R
    xmin = 0; // EjsS Model.Variables.View.xmin
    xmax = 0; // EjsS Model.Variables.View.xmax
    ymin = 0; // EjsS Model.Variables.View.ymin
    ymax = 0; // EjsS Model.Variables.View.ymax
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(10);
  });

  function restart () {  // > CustomCode.Restart:1
    t = 0.0;  // > CustomCode.Restart:2
    x = A*Math.cos(omega*t + theta);  // > CustomCode.Restart:3
    y = A*Math.sin(omega*t + theta);  // > CustomCode.Restart:4
    x2 = A2*Math.cos(omega2*t + theta2);  // > CustomCode.Restart:5
    y2 = A2*Math.sin(omega2*t + theta2);  // > CustomCode.Restart:6
      // > CustomCode.Restart:7
    v = -A*omega*Math.sin(omega*t + theta);  // > CustomCode.Restart:8
    v2 = A2*omega2*Math.sin(omega2*t + theta);  // > CustomCode.Restart:9
      // > CustomCode.Restart:10
    a = -A*omega*omega*Math.cos(omega*t + theta);  // > CustomCode.Restart:11
    a2 = -A2*omega2*omega2*Math.cos(omega2*t + theta);  // > CustomCode.Restart:12
      // > CustomCode.Restart:13
    //_initialize();  // > CustomCode.Restart:14
      // > CustomCode.Restart:15
    PE = 0.5*k*x*x;  // > CustomCode.Restart:16
    KE = 0.5*m*v*v;  // > CustomCode.Restart:17
      // > CustomCode.Restart:18
    PE2 = 0.5*k2*x2*x2;  // > CustomCode.Restart:19
    KE2 = 0.5*m2*v2*v2;  // > CustomCode.Restart:20
  }  // > CustomCode.Restart:21

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //_view.plottingPanel.setAntialiasTextOn(true);  // > Initialization.Init Page:1
    //_view.plottingPanel.setAntialiasShapeOn(true);  // > Initialization.Init Page:2
    EMax = 1.1*(PE + KE);  // > Initialization.Init Page:3
    for (var i=0; i<numTicks; i++) {  // > Initialization.Init Page:4
      xTicks[i] = -0.8 + i*0.1;  // > Initialization.Init Page:5
    }  // > Initialization.Init Page:6
    restart();  // > Initialization.Init Page:7
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    x = A*Math.cos(omega*t + theta);  // > Evolution.Evol Page:1
    y = A.Math.sin(omega*t + theta);  // > Evolution.Evol Page:2
    x2 = A2*Math.cos(omega2*t + theta2);  // > Evolution.Evol Page:3
    y2 = A2*Math.sin(omega2*t + theta2);  // > Evolution.Evol Page:4
    xsum = x + x2;  // > Evolution.Evol Page:5
    ysum = y + y2;  // > Evolution.Evol Page:6
    v = -A*omega*Math.sin(omega*t + theta);  // > Evolution.Evol Page:7
    v2 = -A2*omega2*Math.sin(omega2*t + theta2);  // > Evolution.Evol Page:8
    a = -A*omega*omega*Math.cos(omega*t + theta);  // > Evolution.Evol Page:9
    a2 = -A2*omega2*omega2*Math.cos(omega2*t + theta2);  // > Evolution.Evol Page:10
    t += dt;  // > Evolution.Evol Page:11
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page 2"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Cons Page"]) return;
    PE = 0.5*k*x*x;  // > FixedRelations.Cons Page:1
    KE = 0.5*m*v*v;  // > FixedRelations.Cons Page:2
    PE2 = 0.5*k2*x2*x2;  // > FixedRelations.Cons Page:3
    KE2 = 0.5*m2*v2*v2;  // > FixedRelations.Cons Page:4
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["lookang"]) return;
    x = A*Math.sin(cta);  // > FixedRelations.lookang:1
    y = A*Math.cos(cta);  // > FixedRelations.lookang:2
    x2 = A2*Math.sin(cta2);  // > FixedRelations.lookang:3
    y2 = A2*Math.cos(cta2);  // > FixedRelations.lookang:4
    xsum = x + x2;  // > FixedRelations.lookang:5
    ysum = y + y2;  // > FixedRelations.lookang:6
    ctadeg = (cta*180/Math.PI)%360;  // > FixedRelations.lookang:7
    cta2deg = (cta2*180/Math.PI)%360;  // > FixedRelations.lookang:8
    T = 2*pi/omega;  // > FixedRelations.lookang:9
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["answercheck"]) return;
    if (sign==1) {  // > FixedRelations.answercheck:1
      Answer = ((2*Math.PI + cta - cta2)*180/Math.PI)%360;  // > FixedRelations.answercheck:2
    } else if (sign==-1) {  // > FixedRelations.answercheck:3
      Answer = ((cta2 - cta)*180/Math.PI)%360;  // > FixedRelations.answercheck:4
    }  // > FixedRelations.answercheck:5
    if (Math.abs(Answer - enterA1%360)<1) {  // > FixedRelations.answercheck:6
      A1correct = "Yes";  // > FixedRelations.answercheck:7
      A1correctbackground = "green";  // > FixedRelations.answercheck:8
        // > FixedRelations.answercheck:9
      answertext = "$\\delta$$\\phi$ = "+_view.format(Answer,"000.0")+"";  // > FixedRelations.answercheck:10
    } else {  // > FixedRelations.answercheck:11
        // > FixedRelations.answercheck:12
      if (showhint==true) {  // > FixedRelations.answercheck:13
        if (sign==1) {  // > FixedRelations.answercheck:14
          A1correct = "  No, hint: $\\delta$$\\phi$ = $\\phi$1 - $\\phi$2";  // > FixedRelations.answercheck:15
          answertext = "$\\delta$$\\phi$ = $\\phi$1 - $\\phi$2";  // > FixedRelations.answercheck:16
            // > FixedRelations.answercheck:17
        } else if (sign==-1) {  // > FixedRelations.answercheck:18
          A1correct = "  No, hint: $\\delta$$\\phi$ = $\\phi$2 - $\\phi$1";  // > FixedRelations.answercheck:19
          answertext = "$\\delta$$\\phi$ = $\\phi$2 - $\\phi$1";  // > FixedRelations.answercheck:20
            // > FixedRelations.answercheck:21
        }  // > FixedRelations.answercheck:22
      } else if (showhint==false) {  // > FixedRelations.answercheck:23
        A1correct = "  No ";  // > FixedRelations.answercheck:24
        answertext = "$\\delta$$\\phi$";  // > FixedRelations.answercheck:25
      }  // > FixedRelations.answercheck:26
        // > FixedRelations.answercheck:27
      A1correctbackground = "red";  // > FixedRelations.answercheck:28
    }  // > FixedRelations.answercheck:29
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Angle"]) return;
    // px[0] and py[0] define the centre of polygon  // > FixedRelations.Angle:1
    px[0] = 0;  // > FixedRelations.Angle:2
    py[0] = 0;  // > FixedRelations.Angle:3
    // if statement to draw polygon angle  // > FixedRelations.Angle:4
    for (var counter=1; counter<nangle; counter++) {  // > FixedRelations.Angle:5
      if (sign==1) {  // > FixedRelations.Angle:6
        dcangle = (2*Math.PI + cta - cta2)/(nangle - 2);  // > FixedRelations.Angle:7
        c = (2*Math.PI + cta - cta2) - (counter - 1)*dcangle;  // > FixedRelations.Angle:8
        // complementary  // > FixedRelations.Angle:9
        px[counter] = 0 + Math.min(A,A2)/2*Math.cos(-cta + c + Math.PI/2);  // > FixedRelations.Angle:10
        py[counter] = 0 + Math.min(A,A2)/2*Math.sin(-cta + c + Math.PI/2);  // > FixedRelations.Angle:11
      } else if (sign==-1) {  // > FixedRelations.Angle:12
        dcangle = (cta2 - cta)/(nangle - 2);  // > FixedRelations.Angle:13
        c = (cta2 - cta) - (counter - 1)*dcangle;  // > FixedRelations.Angle:14
        px[counter] = 0 + Math.min(A,A2)/2*Math.cos(-cta - c + Math.PI/2);  // > FixedRelations.Angle:15
        py[counter] = 0 + Math.min(A,A2)/2*Math.sin(-cta - c + Math.PI/2);  // > FixedRelations.Angle:16
      }  // > FixedRelations.Angle:17
    }  // > FixedRelations.Angle:18
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["View"]) return;
    R = Math.sqrt(xsum*xsum + ysum*ysum);  // > FixedRelations.View:1
    xmin = -Math.max(R,Math.max(A,A2));  // > FixedRelations.View:2
    xmax = -xmin;  // > FixedRelations.View:3
    ymin = -Math.max(R,Math.max(A,A2));  // > FixedRelations.View:4
    ymax = -ymin;  // > FixedRelations.View:5
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page 2") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["cta","cta2","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=cta) __mustReinitialize = true;
        __state[__cIn++] = cta;
        if (__state[__cIn]!=cta2) __mustReinitialize = true;
        __state[__cIn++] = cta2;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        cta2 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var cta2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = sign*omega; // Rate for ODE: Evol Page 2:cta
        _aRate[__cRate++] = sign*omega2; // Rate for ODE: Evol Page 2:cta2
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var cta2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        cta2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = cta2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_cta(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_cta2(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "Simulation View", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new reference_circle_v2weework_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.playPauseButton.setAction("OffClick", _pause); // Simulation View setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // Simulation View linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // Simulation View setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'playPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // Simulation View setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'resetButton'
          _view.ampLabel1.linkProperty("Text",  function() { return "A1 = "+A.toFixed(1); } ); // Simulation View linking property 'Text' for element 'ampLabel1'
          _view.ampLabel1.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'ampLabel1'
          _view.amplitude1.setAction("OnRelease", function(_data,_info) {
  restart();

}); // Simulation View setting action 'OnRelease' for element 'amplitude1'
          _view.amplitude1.linkProperty("Background",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'Background' for element 'amplitude1'
          _view.amplitude1.linkProperty("Value",  function() { return A; }, function(_v) { A = _v; } ); // Simulation View linking property 'Value' for element 'amplitude1'
          _view.amplitude1.setAction("OnChange", function(_data,_info) {
  restart();

}); // Simulation View setting action 'OnChange' for element 'amplitude1'
          _view.ampLabel2.linkProperty("Text",  function() { return "A2 = "+A2.toFixed(1); } ); // Simulation View linking property 'Text' for element 'ampLabel2'
          _view.ampLabel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'ampLabel2'
          _view.amplitude2.setAction("OnRelease", function(_data,_info) {
  restart();

}); // Simulation View setting action 'OnRelease' for element 'amplitude2'
          _view.amplitude2.linkProperty("Background",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'Background' for element 'amplitude2'
          _view.amplitude2.linkProperty("Value",  function() { return A2; }, function(_v) { A2 = _v; } ); // Simulation View linking property 'Value' for element 'amplitude2'
          _view.amplitude2.setAction("OnChange", function(_data,_info) {
  restart();

}); // Simulation View setting action 'OnChange' for element 'amplitude2'
          _view.massLabel1.linkProperty("Text",  function() { return "Mass 1 = "+m.toFixed(2)+"kg"; } ); // Simulation View linking property 'Text' for element 'massLabel1'
          _view.massLabel1.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'massLabel1'
          _view.mass1.setAction("OnRelease", function(_data,_info) {
  omega = Math.sqrt(k/m);
  restart();

}); // Simulation View setting action 'OnRelease' for element 'mass1'
          _view.mass1.linkProperty("Background",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'Background' for element 'mass1'
          _view.mass1.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // Simulation View linking property 'Value' for element 'mass1'
          _view.mass1.setAction("OnChange", function(_data,_info) {
  omega = Math.sqrt(k/m);
  restart();

}); // Simulation View setting action 'OnChange' for element 'mass1'
          _view.massLabel2.linkProperty("Text",  function() { return "Mass 2 = "+m2.toFixed(2)+"kg"; } ); // Simulation View linking property 'Text' for element 'massLabel2'
          _view.massLabel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'massLabel2'
          _view.mass2.setAction("OnRelease", function(_data,_info) {
  omega2 = Math.sqrt(k2/m2);
  restart();

}); // Simulation View setting action 'OnRelease' for element 'mass2'
          _view.mass2.linkProperty("Background",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'Background' for element 'mass2'
          _view.mass2.linkProperty("Value",  function() { return m2; }, function(_v) { m2 = _v; } ); // Simulation View linking property 'Value' for element 'mass2'
          _view.mass2.setAction("OnChange", function(_data,_info) {
  omega2 = Math.sqrt(k2/m2);
  restart();

}); // Simulation View setting action 'OnChange' for element 'mass2'
          _view.kLabel1.linkProperty("Text",  function() { return "k1 = "+k.toFixed(2)+"N/m"; } ); // Simulation View linking property 'Text' for element 'kLabel1'
          _view.kLabel1.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'kLabel1'
          _view.kSlider1.setAction("OnRelease", function(_data,_info) {
  omega = Math.sqrt(k/m);
  restart();

}); // Simulation View setting action 'OnRelease' for element 'kSlider1'
          _view.kSlider1.linkProperty("Background",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'Background' for element 'kSlider1'
          _view.kSlider1.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // Simulation View linking property 'Value' for element 'kSlider1'
          _view.kSlider1.setAction("OnChange", function(_data,_info) {
  omega = Math.sqrt(k/m);
  restart();

}); // Simulation View setting action 'OnChange' for element 'kSlider1'
          _view.kLabel2.linkProperty("Text",  function() { return "k2 = "+k2.toFixed(2)+"N/m"; } ); // Simulation View linking property 'Text' for element 'kLabel2'
          _view.kLabel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'kLabel2'
          _view.kSlider2.setAction("OnRelease", function(_data,_info) {
  omega2 = Math.sqrt(k2/m2);
  restart();

}); // Simulation View setting action 'OnRelease' for element 'kSlider2'
          _view.kSlider2.linkProperty("Background",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'Background' for element 'kSlider2'
          _view.kSlider2.linkProperty("Value",  function() { return k2; }, function(_v) { k2 = _v; } ); // Simulation View linking property 'Value' for element 'kSlider2'
          _view.kSlider2.setAction("OnChange", function(_data,_info) {
  omega2 = Math.sqrt(k2/m2);
  restart();

}); // Simulation View setting action 'OnChange' for element 'kSlider2'
          _view.phaseLabel1.linkProperty("Text",  function() { return "θ1 = "+ctadeg.toFixed(1)+"°"; } ); // Simulation View linking property 'Text' for element 'phaseLabel1'
          _view.phaseLabel1.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'phaseLabel1'
          _view.phase1.linkProperty("Background",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'Background' for element 'phase1'
          _view.phase1.linkProperty("Value",  function() { return ctadeg; }, function(_v) { ctadeg = _v; } ); // Simulation View linking property 'Value' for element 'phase1'
          _view.phase1.setAction("OnChange", function(_data,_info) {
  cta = ctadeg*(Math.PI/180);

}); // Simulation View setting action 'OnChange' for element 'phase1'
          _view.phaseLabel2.linkProperty("Text",  function() { return "θ2 = "+cta2deg.toFixed(1)+"°"; } ); // Simulation View linking property 'Text' for element 'phaseLabel2'
          _view.phaseLabel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'phaseLabel2'
          _view.phase2.linkProperty("Background",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'Background' for element 'phase2'
          _view.phase2.linkProperty("Value",  function() { return cta2deg; }, function(_v) { cta2deg = _v; } ); // Simulation View linking property 'Value' for element 'phase2'
          _view.phase2.setAction("OnChange", function(_data,_info) {
  cta2 = cta2deg*(Math.PI/180);

}); // Simulation View setting action 'OnChange' for element 'phase2'
          _view.plotMotionx.setAction("OnCheckOff", function(_data,_info) {
  showPlotx = false;
  _initialize();

}); // Simulation View setting action 'OnCheckOff' for element 'plotMotionx'
          _view.plotMotionx.setAction("OnCheckOn", function(_data,_info) {
  showPlotx = true;
  _initialize();

}); // Simulation View setting action 'OnCheckOn' for element 'plotMotionx'
          _view.plotMotionx.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'plotMotionx'
          _view.plotMotiony.setAction("OnCheckOff", function(_data,_info) {
  showPloty = false;
  _initialize();

}); // Simulation View setting action 'OnCheckOff' for element 'plotMotiony'
          _view.plotMotiony.setAction("OnCheckOn", function(_data,_info) {
  showPloty = true;
  _initialize();

}); // Simulation View setting action 'OnCheckOn' for element 'plotMotiony'
          _view.plotMotiony.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'plotMotiony'
          _view.showV.setAction("OnCheckOff", function(_data,_info) {
  showV = false;
  _initialize();

}); // Simulation View setting action 'OnCheckOff' for element 'showV'
          _view.showV.setAction("OnCheckOn", function(_data,_info) {
  showV = true;
  _initialize();

}); // Simulation View setting action 'OnCheckOn' for element 'showV'
          _view.showV.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'showV'
          _view.showA.setAction("OnCheckOff", function(_data,_info) {
  showA = false;
  _initialize();

}); // Simulation View setting action 'OnCheckOff' for element 'showA'
          _view.showA.setAction("OnCheckOn", function(_data,_info) {
  showA = true;
  _initialize();

}); // Simulation View setting action 'OnCheckOn' for element 'showA'
          _view.showA.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'showA'
          _view.showSum.setAction("OnCheckOff", function(_data,_info) {
  showsum = false;

}); // Simulation View setting action 'OnCheckOff' for element 'showSum'
          _view.showSum.setAction("OnCheckOn", function(_data,_info) {
  showsum = true;

}); // Simulation View setting action 'OnCheckOn' for element 'showSum'
          _view.showSum.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'showSum'
          _view.plottingPanel.linkProperty("Width",  function() { return (showPlotx==true||showPloty==true||showsum==true||showV==true||showA==true)?"45vw":"90vw"; } ); // Simulation View linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // Simulation View linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // Simulation View linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // Simulation View linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // Simulation View linking property 'MinimumY' for element 'plottingPanel'
          _view.angle.linkProperty("PointsY",  function() { return py; }, function(_v) { py = _v; } ); // Simulation View linking property 'PointsY' for element 'angle'
          _view.angle.linkProperty("PointsX",  function() { return px; }, function(_v) { px = _v; } ); // Simulation View linking property 'PointsX' for element 'angle'
          _view.text.linkProperty("X",  function() { return px[17]*1.2; } ); // Simulation View linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return py[17]*1.2; } ); // Simulation View linking property 'Y' for element 'text'
          _view.text.linkProperty("Text",  function() { return answertext; }, function(_v) { answertext = _v; } ); // Simulation View linking property 'Text' for element 'text'
          _view.shape.linkProperty("FillColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'FillColor' for element 'shape'
          _view.shape.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // Simulation View linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // Simulation View linking property 'Y' for element 'shape'
          _view.shape2.linkProperty("FillColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'FillColor' for element 'shape2'
          _view.shape2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // Simulation View linking property 'X' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // Simulation View linking property 'Y' for element 'shape2'
          _view.trail.linkProperty("Connected",  function() { return _isPlaying; } ); // Simulation View linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // Simulation View linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // Simulation View linking property 'InputY' for element 'trail'
          _view.trail2.linkProperty("Connected",  function() { return _isPlaying; } ); // Simulation View linking property 'Connected' for element 'trail2'
          _view.trail2.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'trail2'
          _view.trail2.linkProperty("InputX",  function() { return x2; }, function(_v) { x2 = _v; } ); // Simulation View linking property 'InputX' for element 'trail2'
          _view.trail2.linkProperty("InputY",  function() { return y2; }, function(_v) { y2 = _v; } ); // Simulation View linking property 'InputY' for element 'trail2'
          _view.A1.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // Simulation View linking property 'SizeX' for element 'A1'
          _view.A1.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'A1'
          _view.A1.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // Simulation View linking property 'SizeY' for element 'A1'
          _view.A2.linkProperty("SizeX",  function() { return x2; }, function(_v) { x2 = _v; } ); // Simulation View linking property 'SizeX' for element 'A2'
          _view.A2.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'A2'
          _view.A2.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // Simulation View linking property 'SizeY' for element 'A2'
          _view.sum.linkProperty("Visibility",  function() { return showsum; }, function(_v) { showsum = _v; } ); // Simulation View linking property 'Visibility' for element 'sum'
          _view.shapesum.linkProperty("FillColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'FillColor' for element 'shapesum'
          _view.shapesum.linkProperty("X",  function() { return xsum; }, function(_v) { xsum = _v; } ); // Simulation View linking property 'X' for element 'shapesum'
          _view.shapesum.linkProperty("Y",  function() { return ysum; }, function(_v) { ysum = _v; } ); // Simulation View linking property 'Y' for element 'shapesum'
          _view.trailsum.linkProperty("Connected",  function() { return _isPlaying; } ); // Simulation View linking property 'Connected' for element 'trailsum'
          _view.trailsum.linkProperty("LineColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'LineColor' for element 'trailsum'
          _view.trailsum.linkProperty("InputX",  function() { return xsum; }, function(_v) { xsum = _v; } ); // Simulation View linking property 'InputX' for element 'trailsum'
          _view.trailsum.linkProperty("InputY",  function() { return ysum; }, function(_v) { ysum = _v; } ); // Simulation View linking property 'InputY' for element 'trailsum'
          _view.arrowsum.linkProperty("SizeX",  function() { return xsum; }, function(_v) { xsum = _v; } ); // Simulation View linking property 'SizeX' for element 'arrowsum'
          _view.arrowsum.linkProperty("LineColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'LineColor' for element 'arrowsum'
          _view.arrowsum.linkProperty("SizeY",  function() { return ysum; }, function(_v) { ysum = _v; } ); // Simulation View linking property 'SizeY' for element 'arrowsum'
          _view.positionGraphx2.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // Simulation View linking property 'MaximumY' for element 'positionGraphx2'
          _view.positionGraphx2.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // Simulation View linking property 'MaximumX' for element 'positionGraphx2'
          _view.positionGraphx2.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // Simulation View linking property 'MinimumX' for element 'positionGraphx2'
          _view.positionGraphx2.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // Simulation View linking property 'MinimumY' for element 'positionGraphx2'
          _view.positionGraphx2.linkProperty("Display",  function() { return (showPlotx==true)?"inline":"none"; } ); // Simulation View linking property 'Display' for element 'positionGraphx2'
          _view.displacement.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'displacement'
          _view.displacement.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // Simulation View linking property 'InputX' for element 'displacement'
          _view.displacement.linkProperty("InputY",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputY' for element 'displacement'
          _view.displacement2.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'displacement2'
          _view.displacement2.linkProperty("InputX",  function() { return x2; }, function(_v) { x2 = _v; } ); // Simulation View linking property 'InputX' for element 'displacement2'
          _view.displacement2.linkProperty("InputY",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputY' for element 'displacement2'
          _view.displacementSum.linkProperty("LineColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'LineColor' for element 'displacementSum'
          _view.displacementSum.linkProperty("InputX",  function() { return xsum; }, function(_v) { xsum = _v; } ); // Simulation View linking property 'InputX' for element 'displacementSum'
          _view.displacementSum.linkProperty("Visibility",  function() { return showsum; }, function(_v) { showsum = _v; } ); // Simulation View linking property 'Visibility' for element 'displacementSum'
          _view.displacementSum.linkProperty("InputY",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputY' for element 'displacementSum'
          _view.spring.linkProperty("SizeX",  function() { return (A+A2)+x; } ); // Simulation View linking property 'SizeX' for element 'spring'
          _view.spring.linkProperty("X",  function() { return -(A+A2); } ); // Simulation View linking property 'X' for element 'spring'
          _view.spring.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'spring'
          _view.spring.linkProperty("Y",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'Y' for element 'spring'
          _view.shape3.linkProperty("FillColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'FillColor' for element 'shape3'
          _view.shape3.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // Simulation View linking property 'X' for element 'shape3'
          _view.shape3.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'shape3'
          _view.shape3.linkProperty("Y",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'Y' for element 'shape3'
          _view.spring2.linkProperty("SizeX",  function() { return -(A+A2)+x; } ); // Simulation View linking property 'SizeX' for element 'spring2'
          _view.spring2.linkProperty("X",  function() { return (A+A2); } ); // Simulation View linking property 'X' for element 'spring2'
          _view.spring2.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'spring2'
          _view.spring2.linkProperty("Y",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'Y' for element 'spring2'
          _view.spring3.linkProperty("SizeX",  function() { return -(A+A2)+x2; } ); // Simulation View linking property 'SizeX' for element 'spring3'
          _view.spring3.linkProperty("X",  function() { return (A+A2); } ); // Simulation View linking property 'X' for element 'spring3'
          _view.spring3.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'spring3'
          _view.spring3.linkProperty("Y",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'Y' for element 'spring3'
          _view.shape4.linkProperty("FillColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'FillColor' for element 'shape4'
          _view.shape4.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // Simulation View linking property 'X' for element 'shape4'
          _view.shape4.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'shape4'
          _view.shape4.linkProperty("Y",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'Y' for element 'shape4'
          _view.shapeSum.linkProperty("FillColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'FillColor' for element 'shapeSum'
          _view.shapeSum.linkProperty("X",  function() { return xsum; }, function(_v) { xsum = _v; } ); // Simulation View linking property 'X' for element 'shapeSum'
          _view.shapeSum.linkProperty("LineColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'LineColor' for element 'shapeSum'
          _view.shapeSum.linkProperty("Y",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'Y' for element 'shapeSum'
          _view.shapeSum.linkProperty("Visibility",  function() { return showsum; }, function(_v) { showsum = _v; } ); // Simulation View linking property 'Visibility' for element 'shapeSum'
          _view.positionGraphx.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // Simulation View linking property 'MaximumY' for element 'positionGraphx'
          _view.positionGraphx.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // Simulation View linking property 'MaximumX' for element 'positionGraphx'
          _view.positionGraphx.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // Simulation View linking property 'MinimumX' for element 'positionGraphx'
          _view.positionGraphx.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // Simulation View linking property 'MinimumY' for element 'positionGraphx'
          _view.positionGraphx.linkProperty("Display",  function() { return (showPloty==true)?"inline":"none"; } ); // Simulation View linking property 'Display' for element 'positionGraphx'
          _view.Displacement.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'Displacement'
          _view.Displacement.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'Displacement'
          _view.Displacement.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // Simulation View linking property 'InputY' for element 'Displacement'
          _view.Displacement2.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'Displacement2'
          _view.Displacement2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'Displacement2'
          _view.Displacement2.linkProperty("InputY",  function() { return y2; }, function(_v) { y2 = _v; } ); // Simulation View linking property 'InputY' for element 'Displacement2'
          _view.DisplacementSum.linkProperty("LineColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'LineColor' for element 'DisplacementSum'
          _view.DisplacementSum.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'DisplacementSum'
          _view.DisplacementSum.linkProperty("Visibility",  function() { return showsum; }, function(_v) { showsum = _v; } ); // Simulation View linking property 'Visibility' for element 'DisplacementSum'
          _view.DisplacementSum.linkProperty("InputY",  function() { return ysum; }, function(_v) { ysum = _v; } ); // Simulation View linking property 'InputY' for element 'DisplacementSum'
          _view.spring4.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'X' for element 'spring4'
          _view.spring4.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'spring4'
          _view.spring4.linkProperty("Y",  function() { return ymax; }, function(_v) { ymax = _v; } ); // Simulation View linking property 'Y' for element 'spring4'
          _view.spring4.linkProperty("SizeY",  function() { return -ymax+y; } ); // Simulation View linking property 'SizeY' for element 'spring4'
          _view.shape5.linkProperty("FillColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'FillColor' for element 'shape5'
          _view.shape5.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'X' for element 'shape5'
          _view.shape5.linkProperty("LineColor",  function() { return color1; }, function(_v) { color1 = _v; } ); // Simulation View linking property 'LineColor' for element 'shape5'
          _view.shape5.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // Simulation View linking property 'Y' for element 'shape5'
          _view.spring5.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'X' for element 'spring5'
          _view.spring5.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'spring5'
          _view.spring5.linkProperty("Y",  function() { return ymax; }, function(_v) { ymax = _v; } ); // Simulation View linking property 'Y' for element 'spring5'
          _view.spring5.linkProperty("SizeY",  function() { return -ymax+y2; } ); // Simulation View linking property 'SizeY' for element 'spring5'
          _view.shape6.linkProperty("FillColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'FillColor' for element 'shape6'
          _view.shape6.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'X' for element 'shape6'
          _view.shape6.linkProperty("LineColor",  function() { return color2; }, function(_v) { color2 = _v; } ); // Simulation View linking property 'LineColor' for element 'shape6'
          _view.shape6.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // Simulation View linking property 'Y' for element 'shape6'
          _view.shape7.linkProperty("FillColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'FillColor' for element 'shape7'
          _view.shape7.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'X' for element 'shape7'
          _view.shape7.linkProperty("LineColor",  function() { return colorsum; }, function(_v) { colorsum = _v; } ); // Simulation View linking property 'LineColor' for element 'shape7'
          _view.shape7.linkProperty("Y",  function() { return ysum; }, function(_v) { ysum = _v; } ); // Simulation View linking property 'Y' for element 'shape7'
          _view.shape7.linkProperty("Visibility",  function() { return showsum; }, function(_v) { showsum = _v; } ); // Simulation View linking property 'Visibility' for element 'shape7'
          _view.velocityGraph.linkProperty("Display",  function() { return (showV==true)?"inline":"none"; } ); // Simulation View linking property 'Display' for element 'velocityGraph'
          _view.velocity.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'velocity'
          _view.velocity.linkProperty("InputY",  function() { return v; }, function(_v) { v = _v; } ); // Simulation View linking property 'InputY' for element 'velocity'
          _view.velocity2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'velocity2'
          _view.velocity2.linkProperty("InputY",  function() { return v2; }, function(_v) { v2 = _v; } ); // Simulation View linking property 'InputY' for element 'velocity2'
          _view.acceleGraph.linkProperty("MinimumY",  function() { return -(A+A2); } ); // Simulation View linking property 'MinimumY' for element 'acceleGraph'
          _view.acceleGraph.linkProperty("MaximumY",  function() { return (A+A2); } ); // Simulation View linking property 'MaximumY' for element 'acceleGraph'
          _view.acceleGraph.linkProperty("Display",  function() { return (showA==true)?"inline":"none"; } ); // Simulation View linking property 'Display' for element 'acceleGraph'
          _view.acceleration.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'acceleration'
          _view.acceleration.linkProperty("InputY",  function() { return a; }, function(_v) { a = _v; } ); // Simulation View linking property 'InputY' for element 'acceleration'
          _view.acceleration2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'acceleration2'
          _view.acceleration2.linkProperty("InputY",  function() { return a2; }, function(_v) { a2 = _v; } ); // Simulation View linking property 'InputY' for element 'acceleration2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(10);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function reference_circle_v2weework_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = reference_circle_v2weework_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Reference Circle','./reference_circle_v2weework_Intro_1.html');
  _view._addDescriptionPage('Activities','./reference_circle_v2weework_Intro_2.html');

  return _view;
} // end of main function

function reference_circle_v2weework_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.Simulation View: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.Simulation View: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.Simulation View: setting property 'TextOff' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause the simulation") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset the simulation") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"ampLabel1", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'ampLabel1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"amplitude1", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'amplitude1'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'amplitude1'
      .setProperty("Minimum",0.1) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'amplitude1'
      .setProperty("Maximum",1.0) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'amplitude1'
      .setProperty("Format","0.0") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'amplitude1'
      .setProperty("Tooltip","Amplitude of object 1") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'amplitude1'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"ampLabel2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'ampLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"amplitude2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'amplitude2'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'amplitude2'
      .setProperty("Minimum",0.1) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'amplitude2'
      .setProperty("Maximum",1) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'amplitude2'
      .setProperty("Format","0.0") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'amplitude2'
      .setProperty("Tooltip","Amplitude of object 2") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'amplitude2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"massLabel1", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'massLabel1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"mass1", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'mass1'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'mass1'
      .setProperty("Minimum",0.5) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'mass1'
      .setProperty("Maximum",4.0) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'mass1'
      .setProperty("Format","0.00") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'mass1'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"massLabel2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'massLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"mass2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'mass2'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'mass2'
      .setProperty("Minimum",0.5) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'mass2'
      .setProperty("Maximum",4.0) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'mass2'
      .setProperty("Format","0.00") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'mass2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"kLabel1", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'kLabel1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"kSlider1", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'kSlider1'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'kSlider1'
      .setProperty("Minimum",0.5) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'kSlider1'
      .setProperty("Maximum",4.0) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'kSlider1'
      .setProperty("Format","0.00") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'kSlider1'
      .setProperty("Tooltip","Spring constant k of object 1") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'kSlider1'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"kLabel2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'kLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"kSlider2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'kSlider2'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'kSlider2'
      .setProperty("Minimum",0.5) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'kSlider2'
      .setProperty("Maximum",4.0) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'kSlider2'
      .setProperty("Format","0.00") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'kSlider2'
      .setProperty("Tooltip","Spring constant k of object 2") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'kSlider2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"optionPanel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'optionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.Simulation View: setting property 'Display' for element 'optionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"phaseLabel1", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'phaseLabel1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"phase1", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'phase1'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'phase1'
      .setProperty("Minimum",0.0) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'phase1'
      .setProperty("Maximum",360) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'phase1'
      .setProperty("Format","0.0") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'phase1'
      .setProperty("Tooltip","Phase angle of object 1") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'phase1'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"phaseLabel2", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'phaseLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"phase2", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'phase2'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'phase2'
      .setProperty("Minimum",0.0) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'phase2'
      .setProperty("Maximum",360) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'phase2'
      .setProperty("Format","0.0") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'phase2'
      .setProperty("Tooltip","Phase angle of object 2") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'phase2'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"plotMotionx", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'plotMotionx'
      .setProperty("Checked",true) // EJsS HtmlView.Simulation View: setting property 'Checked' for element 'plotMotionx'
      .setProperty("Text","Show x vs t") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'plotMotionx'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"plotMotiony", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'plotMotiony'
      .setProperty("Checked",false) // EJsS HtmlView.Simulation View: setting property 'Checked' for element 'plotMotiony'
      .setProperty("Text","Show y vs t") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'plotMotiony'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"showV", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'showV'
      .setProperty("Checked",false) // EJsS HtmlView.Simulation View: setting property 'Checked' for element 'showV'
      .setProperty("Text","Show Velocity") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'showV'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"showA", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'showA'
      .setProperty("Checked",false) // EJsS HtmlView.Simulation View: setting property 'Checked' for element 'showA'
      .setProperty("Text","Show Acceleration") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'showA'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"showSum", _view.optionPanel) // EJsS HtmlView.Simulation View: declaration of element 'showSum'
      .setProperty("Checked",false) // EJsS HtmlView.Simulation View: setting property 'Checked' for element 'showSum'
      .setProperty("Text","Show sum") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'showSum'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'plottingPanel'
      .setProperty("Height","80vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.Simulation View: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("TRMessage","Circular Motion") // EJsS HtmlView.Simulation View: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("TitleY","Position y") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","Position x") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"angle", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'angle'
      .setProperty("FillColor","rgba(0,192,255,255)") // EJsS HtmlView.Simulation View: setting property 'FillColor' for element 'angle'
      .setProperty("X",0) // EJsS HtmlView.Simulation View: setting property 'X' for element 'angle'
      .setProperty("LineColor","rgba(0,192,255,255)") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'angle'
      .setProperty("Y",0) // EJsS HtmlView.Simulation View: setting property 'Y' for element 'angle'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'shape'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'shape2'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape2'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape2'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'trail'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail2", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'trail2'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'trail2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'trail2'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'trail2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"A1", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'A1'
      .setProperty("X",0) // EJsS HtmlView.Simulation View: setting property 'X' for element 'A1'
      .setProperty("Y",0) // EJsS HtmlView.Simulation View: setting property 'Y' for element 'A1'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'A1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"A2", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'A2'
      .setProperty("X",0) // EJsS HtmlView.Simulation View: setting property 'X' for element 'A2'
      .setProperty("Y",0) // EJsS HtmlView.Simulation View: setting property 'Y' for element 'A2'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'A2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"sum", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'sum'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapesum", _view.sum) // EJsS HtmlView.Simulation View: declaration of element 'shapesum'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shapesum'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shapesum'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shapesum'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shapesum'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trailsum", _view.sum) // EJsS HtmlView.Simulation View: declaration of element 'trailsum'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'trailsum'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'trailsum'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'trailsum'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowsum", _view.sum) // EJsS HtmlView.Simulation View: declaration of element 'arrowsum'
      .setProperty("X",0) // EJsS HtmlView.Simulation View: setting property 'X' for element 'arrowsum'
      .setProperty("Y",0) // EJsS HtmlView.Simulation View: setting property 'Y' for element 'arrowsum'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'arrowsum'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"positionGraphx2", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'positionGraphx2'
      .setProperty("Height","80vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'positionGraphx2'
      .setProperty("Width","45vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'positionGraphx2'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'positionGraphx2'
      .setProperty("TRMessage","Position x") // EJsS HtmlView.Simulation View: setting property 'TRMessage' for element 'positionGraphx2'
      .setProperty("TitleY","Position (m)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'positionGraphx2'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'positionGraphx2'
      .setProperty("TitleX","Time(s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'positionGraphx2'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'positionGraphx2'
      .setProperty("MarginY",5) // EJsS HtmlView.Simulation View: setting property 'MarginY' for element 'positionGraphx2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"displacement", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'displacement'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'displacement'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'displacement'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'displacement'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'displacement'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"displacement2", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'displacement2'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'displacement2'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'displacement2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'displacement2'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'displacement2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"displacementSum", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'displacementSum'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'displacementSum'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'displacementSum'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'displacementSum'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'displacementSum'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'spring'
      .setProperty("SizeY",0) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'spring'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'spring'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape3", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'shape3'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape3'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape3'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape3'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shape3'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring2", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'spring2'
      .setProperty("Visibility",false) // EJsS HtmlView.Simulation View: setting property 'Visibility' for element 'spring2'
      .setProperty("SizeY",0) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'spring2'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'spring2'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring3", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'spring3'
      .setProperty("SizeY",0) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'spring3'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'spring3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape4", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'shape4'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape4'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape4'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape4'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shape4'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapeSum", _view.positionGraphx2) // EJsS HtmlView.Simulation View: declaration of element 'shapeSum'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shapeSum'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shapeSum'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shapeSum'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shapeSum'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"positionGraphx", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'positionGraphx'
      .setProperty("Height","80vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'positionGraphx'
      .setProperty("Width","45vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'positionGraphx'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'positionGraphx'
      .setProperty("TRMessage","Position y") // EJsS HtmlView.Simulation View: setting property 'TRMessage' for element 'positionGraphx'
      .setProperty("TitleY","Position(m)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'positionGraphx'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'positionGraphx'
      .setProperty("TitleX","Time(s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'positionGraphx'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'positionGraphx'
      .setProperty("MarginX",10) // EJsS HtmlView.Simulation View: setting property 'MarginX' for element 'positionGraphx'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"Displacement", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'Displacement'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'Displacement'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'Displacement'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'Displacement'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'Displacement'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"Displacement2", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'Displacement2'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'Displacement2'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'Displacement2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'Displacement2'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'Displacement2'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"DisplacementSum", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'DisplacementSum'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'DisplacementSum'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'DisplacementSum'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'DisplacementSum'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'DisplacementSum'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring4", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'spring4'
      .setProperty("Radius",0.5) // EJsS HtmlView.Simulation View: setting property 'Radius' for element 'spring4'
      .setProperty("SizeX",0) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'spring4'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'spring4'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape5", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'shape5'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape5'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape5'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape5'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shape5'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring5", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'spring5'
      .setProperty("Radius",0.5) // EJsS HtmlView.Simulation View: setting property 'Radius' for element 'spring5'
      .setProperty("SizeX",0) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'spring5'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'spring5'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape6", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'shape6'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape6'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape6'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape6'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shape6'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape7", _view.positionGraphx) // EJsS HtmlView.Simulation View: declaration of element 'shape7'
      .setProperty("SizeX",5) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape7'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape7'
      .setProperty("SizeY",5) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape7'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'shape7'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"velocityGraph", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'velocityGraph'
      .setProperty("Height","80vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'velocityGraph'
      .setProperty("Width","45vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'velocityGraph'
      .setProperty("TRMessage","Velocity") // EJsS HtmlView.Simulation View: setting property 'TRMessage' for element 'velocityGraph'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'velocityGraph'
      .setProperty("MinimumY",-0.5) // EJsS HtmlView.Simulation View: setting property 'MinimumY' for element 'velocityGraph'
      .setProperty("TitleY","Velocity(m/s)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'velocityGraph'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'velocityGraph'
      .setProperty("TitleX","Time(s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'velocityGraph'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'velocityGraph'
      .setProperty("MaximumY",0.5) // EJsS HtmlView.Simulation View: setting property 'MaximumY' for element 'velocityGraph'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"velocity", _view.velocityGraph) // EJsS HtmlView.Simulation View: declaration of element 'velocity'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'velocity'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'velocity'
      .setProperty("LineColor","rgb(192,0,0)") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'velocity'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'velocity'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'velocity'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"velocity2", _view.velocityGraph) // EJsS HtmlView.Simulation View: declaration of element 'velocity2'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'velocity2'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'velocity2'
      .setProperty("LineColor","rgb(0,128,64)") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'velocity2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'velocity2'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'velocity2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"acceleGraph", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'acceleGraph'
      .setProperty("Height","80vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'acceleGraph'
      .setProperty("Width","45vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'acceleGraph'
      .setProperty("TRMessage","Acceleration") // EJsS HtmlView.Simulation View: setting property 'TRMessage' for element 'acceleGraph'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'acceleGraph'
      .setProperty("TitleY","a(m/s^2)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'acceleGraph'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'acceleGraph'
      .setProperty("TitleX","Time(s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'acceleGraph'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'acceleGraph'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"acceleration", _view.acceleGraph) // EJsS HtmlView.Simulation View: declaration of element 'acceleration'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'acceleration'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'acceleration'
      .setProperty("LineColor","rgb(192,0,0)") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'acceleration'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'acceleration'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'acceleration'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"acceleration2", _view.acceleGraph) // EJsS HtmlView.Simulation View: declaration of element 'acceleration2'
      .setProperty("Maximum",400) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'acceleration2'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'acceleration2'
      .setProperty("LineColor","rgb(0,128,64)") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'acceleration2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'acceleration2'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'acceleration2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_6circle/ejss_src_reference_circle_v2wee/ReferenceCirclev2/ReferenceCircleWCthumb.png" />
      </p>
      <p>
 Author name; weelookang@gmail.com remixed based on an eariler applet by andrew duffy; Tan Wei Chiong
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Author name; weelookang@gmail.com remixed based on an eariler applet by andrew duffy; Tan Wei Chiong.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new reference_circle_v2weework("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_6circle/ejss_src_reference_circle_v2wee/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
