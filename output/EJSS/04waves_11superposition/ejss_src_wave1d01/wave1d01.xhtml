<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Wave Superposition Model</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function wave1d01(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var showcontrola; // EjsS Model.Variables.equation.showcontrola
  var showcontrolb; // EjsS Model.Variables.equation.showcontrolb
  var inputdropmenuf; // EjsS Model.Variables.equation.inputdropmenuf
  var inputdropmenug; // EjsS Model.Variables.equation.inputdropmenug
  var print; // EjsS Model.Variables.equation.print
  var fontb; // EjsS Model.Variables.equation.fontb
  var font; // EjsS Model.Variables.equation.font
  var velocity; // EjsS Model.Variables.equation.velocity
  var frequency; // EjsS Model.Variables.equation.frequency
  var lambda; // EjsS Model.Variables.equation.lambda
  var amplitude; // EjsS Model.Variables.equation.amplitude
  var velocity2; // EjsS Model.Variables.equation.velocity2
  var frequency2; // EjsS Model.Variables.equation.frequency2
  var lambda2; // EjsS Model.Variables.equation.lambda2
  var amplitude2; // EjsS Model.Variables.equation.amplitude2
  var amplitude2drag; // EjsS Model.Variables.equation.amplitude2drag

  var t; // EjsS Model.Variables.Var Table.t
  var pi; // EjsS Model.Variables.Var Table.pi
  var dt; // EjsS Model.Variables.Var Table.dt
  var n; // EjsS Model.Variables.Var Table.n
  var size; // EjsS Model.Variables.Var Table.size
  var xp; // EjsS Model.Variables.Var Table.xp
  var y1p; // EjsS Model.Variables.Var Table.y1p
  var y2p; // EjsS Model.Variables.Var Table.y2p
  var y12p; // EjsS Model.Variables.Var Table.y12p
  var color; // EjsS Model.Variables.Var Table.color
  var colorg; // EjsS Model.Variables.Var Table.colorg
  var colorfg; // EjsS Model.Variables.Var Table.colorfg
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var selected; // EjsS Model.Variables.Var Table.selected
  var selectedg; // EjsS Model.Variables.Var Table.selectedg
  var fStr; // EjsS Model.Variables.Var Table.fStr
  var gStr; // EjsS Model.Variables.Var Table.gStr
  var showF; // EjsS Model.Variables.Var Table.showF
  var showG; // EjsS Model.Variables.Var Table.showG
  var showSuperposition; // EjsS Model.Variables.Var Table.showSuperposition
  var textt; // EjsS Model.Variables.Var Table.textt
  var k1; // EjsS Model.Variables.Var Table.k1
  var k2; // EjsS Model.Variables.Var Table.k2
  var msg; // EjsS Model.Variables.Var Table.msg
  var sum; // EjsS Model.Variables.Var Table.sum

  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Android; // EjsS Model.Variables.layout.Android
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      showcontrola : showcontrola,
      showcontrolb : showcontrolb,
      inputdropmenuf : inputdropmenuf,
      inputdropmenug : inputdropmenug,
      print : print,
      fontb : fontb,
      font : font,
      velocity : velocity,
      frequency : frequency,
      lambda : lambda,
      amplitude : amplitude,
      velocity2 : velocity2,
      frequency2 : frequency2,
      lambda2 : lambda2,
      amplitude2 : amplitude2,
      amplitude2drag : amplitude2drag,
      t : t,
      pi : pi,
      dt : dt,
      n : n,
      size : size,
      xp : xp,
      y1p : y1p,
      y2p : y2p,
      y12p : y12p,
      color : color,
      colorg : colorg,
      colorfg : colorfg,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      selected : selected,
      selectedg : selectedg,
      fStr : fStr,
      gStr : gStr,
      showF : showF,
      showG : showG,
      showSuperposition : showSuperposition,
      textt : textt,
      k1 : k1,
      k2 : k2,
      msg : msg,
      sum : sum,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Android : Android,
      Width : Width,
      Height : Height,
      Width1 : Width1
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.showcontrola != "undefined") showcontrola = json.showcontrola;
    if(typeof json.showcontrolb != "undefined") showcontrolb = json.showcontrolb;
    if(typeof json.inputdropmenuf != "undefined") inputdropmenuf = json.inputdropmenuf;
    if(typeof json.inputdropmenug != "undefined") inputdropmenug = json.inputdropmenug;
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.velocity != "undefined") velocity = json.velocity;
    if(typeof json.frequency != "undefined") frequency = json.frequency;
    if(typeof json.lambda != "undefined") lambda = json.lambda;
    if(typeof json.amplitude != "undefined") amplitude = json.amplitude;
    if(typeof json.velocity2 != "undefined") velocity2 = json.velocity2;
    if(typeof json.frequency2 != "undefined") frequency2 = json.frequency2;
    if(typeof json.lambda2 != "undefined") lambda2 = json.lambda2;
    if(typeof json.amplitude2 != "undefined") amplitude2 = json.amplitude2;
    if(typeof json.amplitude2drag != "undefined") amplitude2drag = json.amplitude2drag;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.xp != "undefined") xp = json.xp;
    if(typeof json.y1p != "undefined") y1p = json.y1p;
    if(typeof json.y2p != "undefined") y2p = json.y2p;
    if(typeof json.y12p != "undefined") y12p = json.y12p;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.colorg != "undefined") colorg = json.colorg;
    if(typeof json.colorfg != "undefined") colorfg = json.colorfg;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.selectedg != "undefined") selectedg = json.selectedg;
    if(typeof json.fStr != "undefined") fStr = json.fStr;
    if(typeof json.gStr != "undefined") gStr = json.gStr;
    if(typeof json.showF != "undefined") showF = json.showF;
    if(typeof json.showG != "undefined") showG = json.showG;
    if(typeof json.showSuperposition != "undefined") showSuperposition = json.showSuperposition;
    if(typeof json.textt != "undefined") textt = json.textt;
    if(typeof json.k1 != "undefined") k1 = json.k1;
    if(typeof json.k2 != "undefined") k2 = json.k2;
    if(typeof json.msg != "undefined") msg = json.msg;
    if(typeof json.sum != "undefined") sum = json.sum;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
  };

  _model._inputAndPublicParameters = ["showcontrola",  "showcontrolb",  "inputdropmenuf",  "inputdropmenug",  "print",  "fontb",  "font"]; 

  _model._outputAndPublicParameters = ["showcontrola",  "showcontrolb",  "inputdropmenuf",  "inputdropmenug",  "print",  "fontb",  "font"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["menu2"] = false;
    __pagesEnabled["Svgradial"] = true;
    __pagesEnabled["menug"] = false;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["color"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["point"] = false;
    __pagesEnabled["max view"] = true;
  });

  _model.addToReset(function() {
    inputdropmenuf = true; // EjsS Model.Variables.equation.inputdropmenuf
    inputdropmenug = true; // EjsS Model.Variables.equation.inputdropmenug
    print = false; // EjsS Model.Variables.equation.print
    fontb = "normal bold 1.5vw "; // EjsS Model.Variables.equation.fontb
    font = "normal normal 1.5vw "; // EjsS Model.Variables.equation.font
    velocity = 1; // EjsS Model.Variables.equation.velocity
    frequency = 1; // EjsS Model.Variables.equation.frequency
    lambda = 1; // EjsS Model.Variables.equation.lambda
    amplitude = 1; // EjsS Model.Variables.equation.amplitude
    velocity2 = 1; // EjsS Model.Variables.equation.velocity2
    frequency2 = 1; // EjsS Model.Variables.equation.frequency2
    lambda2 = 1; // EjsS Model.Variables.equation.lambda2
    amplitude2 = 1; // EjsS Model.Variables.equation.amplitude2
    amplitude2drag = true; // EjsS Model.Variables.equation.amplitude2drag
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.Var Table.t
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    dt = velocity/lambda/80; // EjsS Model.Variables.Var Table.dt
    n = _isMobile?51:101; // EjsS Model.Variables.Var Table.n
    size = new Array(n); // EjsS Model.Variables.Var Table.size
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.size
        size[_i0] = 10;  // EjsS Model.Variables.Var Table.size
      }
    }());
    xp = new Array(n); // EjsS Model.Variables.Var Table.xp
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.xp
        xp[_i0] = 0;  // EjsS Model.Variables.Var Table.xp
      }
    }());
    y1p = new Array(n); // EjsS Model.Variables.Var Table.y1p
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.y1p
        y1p[_i0] = 0;  // EjsS Model.Variables.Var Table.y1p
      }
    }());
    y2p = new Array(n); // EjsS Model.Variables.Var Table.y2p
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.y2p
        y2p[_i0] = 0;  // EjsS Model.Variables.Var Table.y2p
      }
    }());
    y12p = new Array(n); // EjsS Model.Variables.Var Table.y12p
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.y12p
        y12p[_i0] = 0;  // EjsS Model.Variables.Var Table.y12p
      }
    }());
    color = new Array(n); // EjsS Model.Variables.Var Table.color
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.color
        color[_i0] = 1;  // EjsS Model.Variables.Var Table.color
      }
    }());
    colorg = new Array(n); // EjsS Model.Variables.Var Table.colorg
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.colorg
        colorg[_i0] = 2;  // EjsS Model.Variables.Var Table.colorg
      }
    }());
    colorfg = new Array(n); // EjsS Model.Variables.Var Table.colorfg
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.colorfg
        colorfg[_i0] = 0;  // EjsS Model.Variables.Var Table.colorfg
      }
    }());
    xmin = -1; // EjsS Model.Variables.Var Table.xmin
    xmax = 1; // EjsS Model.Variables.Var Table.xmax
    ymin = -2; // EjsS Model.Variables.Var Table.ymin
    ymax = 2; // EjsS Model.Variables.Var Table.ymax
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    selectedg = new Array(1); // EjsS Model.Variables.Var Table.selectedg
    fStr = _view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))"; // EjsS Model.Variables.Var Table.fStr
    gStr = _view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))"; // EjsS Model.Variables.Var Table.gStr
    textt = "select/change f(x,t) and g(x,t) and click play"; // EjsS Model.Variables.Var Table.textt
    k1 = 1; // EjsS Model.Variables.Var Table.k1
    k2 = 1; // EjsS Model.Variables.Var Table.k2
    msg = ""; // EjsS Model.Variables.Var Table.msg
    sum = 0; // EjsS Model.Variables.Var Table.sum
  });

  _model.addToReset(function() {
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(_isMobile?5:1);
  });

  function computeCurve () {  // > CustomCode.computeCurve:1
    var i;  // > CustomCode.computeCurve:2
    var xi=xmin;  // > CustomCode.computeCurve:3
    var y1;  // > CustomCode.computeCurve:4
   var y2;  // > CustomCode.computeCurve:5
    var y10; //lookang  // > CustomCode.computeCurve:6
    var xi0=0;  // > CustomCode.computeCurve:7
  //var xi0=t*k1/pi; //lookang change 1 to k1 sin(pi*x-k1*t) for future release  // > CustomCode.computeCurve:8
  var y20; //lookang  // > CustomCode.computeCurve:9
  var xi2=0;  // > CustomCode.computeCurve:10
  //var xi2=-t*k2/pi; //lookang change 1 to k2 sin(pi*x-k2*t) for future release  // > CustomCode.computeCurve:11
  //var xi0=xi0+t*1/pi; //lookang  // > CustomCode.computeCurve:12
    var dx = (xmax-xmin)/(n-1); // sample interval  // > CustomCode.computeCurve:13
    _view.fTrail.clear(); // clear old data  // > CustomCode.computeCurve:14
   _view.trail0.clear();  // > CustomCode.computeCurve:15
    _view.trail2.clear();  // > CustomCode.computeCurve:16
    _view.gTrail.clear(); // clear old data  // > CustomCode.computeCurve:17
    _view.sumTrail.clear(); // clear old data  // > CustomCode.computeCurve:18
     _view.sumTrail2.clear(); // clear old data  // > CustomCode.computeCurve:19
    for(i=0; i<n; i++) { // loop to create new data  // > CustomCode.computeCurve:20
      y1=_view.fField.evaluate({ t : t, x : xi }); // evaluate wave function  // > CustomCode.computeCurve:21
    y1p[i] = y1;  // > CustomCode.computeCurve:22
      y2=_view.gField.evaluate({ t : t, x : xi }); // evaluate wave function  // > CustomCode.computeCurve:23
     y2p[i] = y2;  // > CustomCode.computeCurve:24
     _view.fTrail.addPoint(xi,y1); // add data to trace  // > CustomCode.computeCurve:25
     // > CustomCode.computeCurve:26
    //  _view.trail0.addPoint(xi,0); // add data to trace  // > CustomCode.computeCurve:27
      _view.gTrail.addPoint(xi,y2); // add data to trace  // > CustomCode.computeCurve:28
      _view.sumTrail.addPoint(xi,y1+y2); // add data to trace  // > CustomCode.computeCurve:29
      y12p[i] = y1+y2;  // > CustomCode.computeCurve:30
     // > CustomCode.computeCurve:31
     xp[i] = xi; // line added for object  // > CustomCode.computeCurve:32
      xi+=dx;  // > CustomCode.computeCurve:33
       // > CustomCode.computeCurve:34
    }  // > CustomCode.computeCurve:35
    //outside loop uselss now after figure out object drawing  // > CustomCode.computeCurve:36
    /*  // > CustomCode.computeCurve:37
    for(i=0; i<2; i++) { // loop to create new data  // > CustomCode.computeCurve:38
      y10=_view.fField.evaluate({ t : t, x : xi0 }); // evaluate wave function  // > CustomCode.computeCurve:39
      // > CustomCode.computeCurve:40
      y20=_view.gField.evaluate({ t : t, x : xi0 }); // evaluate wave function  // > CustomCode.computeCurve:41
      _view.trail0.addPoint(xi0,y10); // add data to trace  // > CustomCode.computeCurve:42
      _view.trail2.addPoint(xi0,y20); // add data to trace  // > CustomCode.computeCurve:43
     _view.sumTrail2.addPoint(xi0,y10+y20); // add data to trace  // > CustomCode.computeCurve:44
    //  xi0=xi0+lambda;  // > CustomCode.computeCurve:45
      xi0+=dx;  // > CustomCode.computeCurve:46
       // > CustomCode.computeCurve:47
    }  // > CustomCode.computeCurve:48
    */  // > CustomCode.computeCurve:49
   /*  // > CustomCode.computeCurve:50
   for(i=0; i<5; i++) { //  // > CustomCode.computeCurve:51
      y10=_view.fField.evaluate({ t : t, x : xi0 }); // evaluate wave function lookang point  // > CustomCode.computeCurve:52
  y20=_view.gField.evaluate({ t : t, x : xi2 }); // evaluate wave function lookang point  // > CustomCode.computeCurve:53
  _view.trail0.addPoint(xi0,0); // lookang point  // > CustomCode.computeCurve:54
  _view.trail2.addPoint(xi2,0); // lookang point  // > CustomCode.computeCurve:55
   xi0= xi0+dx;  // > CustomCode.computeCurve:56
   xi2= xi2-dx;  // > CustomCode.computeCurve:57
    }  // > CustomCode.computeCurve:58
    */  // > CustomCode.computeCurve:59
  }  // > CustomCode.computeCurve:60

  function changeOrientation() {  // > CustomCode.ChangeOrientation:1
  var iOSapp = (typeof device != 'undefined' && device.platform == "iOS");  // > CustomCode.ChangeOrientation:2
  var iOSapp2 = (typeof device != 'undefined' && device.platform == "iOS");  // > CustomCode.ChangeOrientation:3
  var Androidapp = (typeof device != 'undefined' && device.platform == "Android");  // > CustomCode.ChangeOrientation:4
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.ChangeOrientation:5
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.ChangeOrientation:6
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.ChangeOrientation:7
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.ChangeOrientation:8
  switch (window.orientation) {  // > CustomCode.ChangeOrientation:9
              case 0:  // > CustomCode.ChangeOrientation:10
              case 180:  // > CustomCode.ChangeOrientation:11
                     this.screenOrientation = 'portrait';  // > CustomCode.ChangeOrientation:12
                    // > CustomCode.ChangeOrientation:13
                    if (iOSapp){ // does not seems to work  // > CustomCode.ChangeOrientation:14
                 //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.ChangeOrientation:15
                return window.screen.height*0.7;      // > CustomCode.ChangeOrientation:16
                   // return window.screen.height;  // > CustomCode.ChangeOrientation:17
                  //  return window.innerHeight;  // > CustomCode.ChangeOrientation:18
                // return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:19
                 }  // > CustomCode.ChangeOrientation:20
                 else if (iOSapp2&&iOS){ // App debugging  // > CustomCode.ChangeOrientation:21
                 //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.ChangeOrientation:22
                return window.screen.height*0.7;      // > CustomCode.ChangeOrientation:23
                   // return window.screen.height;  // > CustomCode.ChangeOrientation:24
                  //  return window.innerHeight;  // > CustomCode.ChangeOrientation:25
                // return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:26
                 }  // > CustomCode.ChangeOrientation:27
                   // > CustomCode.ChangeOrientation:28
                else if (iPad&&iOSapp==false){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:29
              //   return Math.max(window.screen.width,window.screen.height);  // > CustomCode.ChangeOrientation:30
            //     return window.innerHeight;  // > CustomCode.ChangeOrientation:31
            return window.screen.height*0.7;  // > CustomCode.ChangeOrientation:32
                 }  // > CustomCode.ChangeOrientation:33
                 else if (iPhone&&iOSapp==false){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:34
          //return window.innerHeight;  // > CustomCode.ChangeOrientation:35
          return window.screen.height*0.7;  // > CustomCode.ChangeOrientation:36
                   }  // > CustomCode.ChangeOrientation:37
                   else if (iPad&&iOSapp==true){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:38
              //   return Math.max(window.screen.width,window.screen.height);  // > CustomCode.ChangeOrientation:39
                 return window.screen.height;  // > CustomCode.ChangeOrientation:40
                 }  // > CustomCode.ChangeOrientation:41
                 else if (iPhone&&iOSapp==true){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:42
              return window.screen.height;  // > CustomCode.ChangeOrientation:43
                   }  // > CustomCode.ChangeOrientation:44
                     // > CustomCode.ChangeOrientation:45
   /*                  // > CustomCode.ChangeOrientation:46
                   else if (iPad&&!parent.cordova){ //browser   // > CustomCode.ChangeOrientation:47
                  //  return Math.max(window.screen.width,window.screen.height)*0.8;  // > CustomCode.ChangeOrientation:48
                 return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:49
                 }  // > CustomCode.ChangeOrientation:50
                 else if (iPhone&&!parent.cordova){ //browser   // > CustomCode.ChangeOrientation:51
                  // return Math.max(window.screen.width,window.screen.height)*0.7;  // > CustomCode.ChangeOrientation:52
                   return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:53
                   }  // > CustomCode.ChangeOrientation:54
                     // > CustomCode.ChangeOrientation:55
   */                  // > CustomCode.ChangeOrientation:56
                   else if (Android&&parent.cordova){  // > CustomCode.ChangeOrientation:57
                    // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.ChangeOrientation:58
                     return window.innerHeight;  // > CustomCode.ChangeOrientation:59
                     }  // > CustomCode.ChangeOrientation:60
                 else{  // > CustomCode.ChangeOrientation:61
                  // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.ChangeOrientation:62
                  return window.innerHeight;  // > CustomCode.ChangeOrientation:63
                   }  // > CustomCode.ChangeOrientation:64
                  break;  // > CustomCode.ChangeOrientation:65
              case 90:  // > CustomCode.ChangeOrientation:66
              case -90:  // > CustomCode.ChangeOrientation:67
                  this.screenOrientation = 'landscape';  // > CustomCode.ChangeOrientation:68
  /*                  // > CustomCode.ChangeOrientation:69
                  if (iPad&&!parent.cordova){ //browser  // > CustomCode.ChangeOrientation:70
                 //  return Math.min(window.screen.width,window.screen.height)*0.8;  // > CustomCode.ChangeOrientation:71
                 //alert("ipad");  // > CustomCode.ChangeOrientation:72
                return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:73
                 }  // > CustomCode.ChangeOrientation:74
                  else if (iPhone&&!parent.cordova){ //browser  // > CustomCode.ChangeOrientation:75
                //   return Math.min(window.screen.width,window.screen.height)*0.7;  // > CustomCode.ChangeOrientation:76
                  return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:77
                   }  // > CustomCode.ChangeOrientation:78
   */                if (iOSapp){ // App  // > CustomCode.ChangeOrientation:79
             return window.screen.height*0.9;    // > CustomCode.ChangeOrientation:80
                 // return window.screen.height;  // > CustomCode.ChangeOrientation:81
                  //  return window.innerHeight;  // > CustomCode.ChangeOrientation:82
               //  return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:83
                 }  // > CustomCode.ChangeOrientation:84
                   // > CustomCode.ChangeOrientation:85
                else if (iPad&&iOSapp==false){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:86
              //   return Math.max(window.screen.width,window.screen.height);  // > CustomCode.ChangeOrientation:87
             //    return window.innerHeight;  // > CustomCode.ChangeOrientation:88
             return window.screen.width*0.9;  // > CustomCode.ChangeOrientation:89
                 }  // > CustomCode.ChangeOrientation:90
                 else if (iPhone&&iOSapp==false){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:91
      //    return window.innerHeight;  // > CustomCode.ChangeOrientation:92
      return window.screen.width*0.8;  // > CustomCode.ChangeOrientation:93
                   }  // > CustomCode.ChangeOrientation:94
                   else if (iPad&&iOSapp==true){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:95
              //   return Math.max(window.screen.width,window.screen.height);  // > CustomCode.ChangeOrientation:96
                 return window.screen.height;  // > CustomCode.ChangeOrientation:97
                 }  // > CustomCode.ChangeOrientation:98
                 else if (iPhone&&iOSapp==true){ // browser currently also for iOS APP  // > CustomCode.ChangeOrientation:99
              return window.screen.height;  // > CustomCode.ChangeOrientation:100
                   }  // > CustomCode.ChangeOrientation:101
                  else if (Android&&parent.cordova){ // in Android App form  // > CustomCode.ChangeOrientation:102
                   // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.ChangeOrientation:103
                    return window.innerHeight;  // > CustomCode.ChangeOrientation:104
                  //  alert("in Android App form");  // > CustomCode.ChangeOrientation:105
                    }  // > CustomCode.ChangeOrientation:106
                    else { // browser Android and PC  // > CustomCode.ChangeOrientation:107
                   // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.ChangeOrientation:108
                   // alert("browser Android and PC");  // > CustomCode.ChangeOrientation:109
                   return window.innerHeight;  // > CustomCode.ChangeOrientation:110
                    }  // > CustomCode.ChangeOrientation:111
                    // > CustomCode.ChangeOrientation:112
                  break;  // > CustomCode.ChangeOrientation:113
                // > CustomCode.ChangeOrientation:114
                // > CustomCode.ChangeOrientation:115
              default:  // > CustomCode.ChangeOrientation:116
                  this.screenOrientation = 'unknown';  // > CustomCode.ChangeOrientation:117
           //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.ChangeOrientation:118
         return "80vh";  // > CustomCode.ChangeOrientation:119
         }  // > CustomCode.ChangeOrientation:120
      }  // > CustomCode.ChangeOrientation:121

  function rgb(r, g, b){  // > CustomCode.color:1
  return "rgb("+r+","+g+","+b+")";  // > CustomCode.color:2
  }  // > CustomCode.color:3

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (showG==undefined)showG=true;  // > Initialization.undefined:1
    if (showF==undefined)showF=true;  // > Initialization.undefined:2
    if (showSuperposition==undefined)showSuperposition=false;  // > Initialization.undefined:3
    if (!showG&&!showF&&!showSuperposition) alert("check at least one of the functions, f(x,t), g(x,t) or u(x,t)");  // > Initialization.undefined:4
    if (showcontrola==undefined)showcontrola=false;  // > Initialization.undefined:5
    if (showcontrolb==undefined)showcontrolb=false;  // > Initialization.undefined:6
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["menu2"]) return;
    //["sin(pi*x-t)","0.5*sin(pi*x-t)","2*sin(pi*x-t)","sin(0.5*pi*x-t)","sin(2*pi*x-t)","sin(pi*x-0.5*t)","sin(pi*x-2*t)","sin(pi*x-t-0.785)","sin(pi*x-t-1.57)"]  // > Initialization.menu2:1
    // fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";  // > Initialization.menu2:2
    /*  // > Initialization.menu2:3
    if ( selected[0]==="A*sin(2*pi/λ(x-v*t)"){  // > Initialization.menu2:4
      fStr = _view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";  // > Initialization.menu2:5
    // fStr =selected[0] ;  // > Initialization.menu2:6
      }  // > Initialization.menu2:7
    if ( selected[0]==="sin(pi*x-t)"){  // > Initialization.menu2:8
      fStr = selected[0];  // > Initialization.menu2:9
      }  // > Initialization.menu2:10
    else if ( selected[0]==="0.5*sin(pi*x-t)"){  // > Initialization.menu2:11
       k1 = 1;  // > Initialization.menu2:12
      }  // > Initialization.menu2:13
    else if ( selected[0]==="2*sin(pi*x-t)"){  // > Initialization.menu2:14
       k1 = 1;  // > Initialization.menu2:15
      }  // > Initialization.menu2:16
      else if ( selected[0]==="sin(0.5*pi*x-t)"){  // > Initialization.menu2:17
       k1 = 1;  // > Initialization.menu2:18
      }  // > Initialization.menu2:19
    else if ( selected[0]==="sin(2*pi*x-t)"){  // > Initialization.menu2:20
       k1 = 1;  // > Initialization.menu2:21
      }  // > Initialization.menu2:22
      else if ( selected[0]==="sin(pi*x-0.5*t)"){  // > Initialization.menu2:23
       k1 = 0.5;  // > Initialization.menu2:24
      }  // > Initialization.menu2:25
      else if ( selected[0]==="sin(pi*x-2*t)"){//  // > Initialization.menu2:26
       k1 = 2;  // > Initialization.menu2:27
      }  // > Initialization.menu2:28
    else if ( selected[0]==="sin(pi*x-t-0.785)"){  // > Initialization.menu2:29
       k1 = 1;  // > Initialization.menu2:30
      }  // > Initialization.menu2:31
      else if ( selected[0]==="sin(0.5*pi*x-t)"){  // > Initialization.menu2:32
       k1 = 1;  // > Initialization.menu2:33
      }  // > Initialization.menu2:34
    else if ( selected[0]==="sin(pi*x-t-1.57)"){  // > Initialization.menu2:35
       k1 = 1;  // > Initialization.menu2:36
      }  // > Initialization.menu2:37
    */  // > Initialization.menu2:38
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Svgradial"]) return;
    var container = document.createElement('div');  // > Initialization.Svgradial:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.Svgradial:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.Svgradial:3
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:1" />'+  // > Initialization.Svgradial:4
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.Svgradial:5
      '  </radialGradient>'+  // > Initialization.Svgradial:6
      '</defs></svg>';  // > Initialization.Svgradial:7
    container.innerHTML = svggradient;  // > Initialization.Svgradial:8
    document.body.appendChild(container);  // > Initialization.Svgradial:9
    var container = document.createElement('div');  // > Initialization.Svgradial:10
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.Svgradial:11
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.Svgradial:12
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:1" />'+  // > Initialization.Svgradial:13
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.Svgradial:14
      '  </radialGradient>'+  // > Initialization.Svgradial:15
      '</defs></svg>';  // > Initialization.Svgradial:16
    container.innerHTML = svggradient;  // > Initialization.Svgradial:17
    document.body.appendChild(container);  // > Initialization.Svgradial:18
    //"url(#mygrandient1)"  // > Initialization.Svgradial:19
    var container = document.createElement('div');  // > Initialization.Svgradial:20
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.Svgradial:21
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="70%" fx="90%" fy="50%">'+  // > Initialization.Svgradial:22
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:1" />'+  // > Initialization.Svgradial:23
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.Svgradial:24
      '  </radialGradient>'+  // > Initialization.Svgradial:25
      '</defs></svg>';  // > Initialization.Svgradial:26
    container.innerHTML = svggradient;  // > Initialization.Svgradial:27
    document.body.appendChild(container);  // > Initialization.Svgradial:28
    //"url(#mygrandient2)"  // > Initialization.Svgradial:29
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["menug"]) return;
    //["sin(pi*x+t)","0.5*sin(pi*x+t)","2*sin(pi*x+t)","sin(0.5*pi*x+t)","sin(2*pi*x+t)","sin(pi*x+0.5*t)","sin(pi*x+2*t)","sin(pi*x-t+0.785)","sin(pi*x-t+1.57)"]  // > Initialization.menug:1
    /*  // > Initialization.menug:2
    if ( selectedg[0]==="sin(pi*x+t)"){  // > Initialization.menug:3
      k2 = 1;  // > Initialization.menug:4
      }  // > Initialization.menug:5
    else if ( selectedg[0]==="0.5*sin(pi*x+t)"){  // > Initialization.menug:6
       k2 = 1;  // > Initialization.menug:7
      }  // > Initialization.menug:8
    else if ( selectedg[0]==="2*sin(pi*x+t)"){  // > Initialization.menug:9
       k2 = 1;  // > Initialization.menug:10
      }  // > Initialization.menug:11
      else if ( selectedg[0]==="sin(0.5*pi*x+t)"){  // > Initialization.menug:12
       k2 = 1;  // > Initialization.menug:13
      }  // > Initialization.menug:14
    else if ( selectedg[0]==="sin(2*pi*x+t)"){  // > Initialization.menug:15
       k2 = 1;  // > Initialization.menug:16
      }  // > Initialization.menug:17
      else if ( selectedg[0]==="sin(pi*x+0.5*t)"){  // > Initialization.menug:18
       k2 =0.5;  // > Initialization.menug:19
      }  // > Initialization.menug:20
      else if ( selectedg[0]==="sin(pi*x+2*t)"){//  // > Initialization.menug:21
       k2 = 2;  // > Initialization.menug:22
      }  // > Initialization.menug:23
    else if ( selectedg[0]==="sin(pi*x-t+0.785)"){  // > Initialization.menug:24
       k2 =0.785;  // > Initialization.menug:25
      }  // > Initialization.menug:26
      else if ( selectedg[0]==="sin(0.5*pi*x+t)"){  // > Initialization.menug:27
       k2 = 1;  // > Initialization.menug:28
      }  // > Initialization.menug:29
    else if ( selectedg[0]==="sin(pi*x-t+1.57)"){  // > Initialization.menug:30
       k2 = 1.57;  // > Initialization.menug:31
      }  // > Initialization.menug:32
    */  // > Initialization.menug:33
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    textt="select/change f(x,t) and g(x,t) and click play";  // > Initialization.Init Page:1
    computeCurve();  // > Initialization.Init Page:2
    _view._update(); //critical for immediate update  // > Initialization.Init Page:3
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["color"]) return;
    //color[(n-1)/4] = rgb(0, 255, 50); // set to green shade  // > Initialization.color:1
    color[(n-1)/2] = rgb(0, 255, 50);   // > Initialization.color:2
    //color[3*(n-1)/4] = rgb(0, 255, 50);   // > Initialization.color:3
    //size[(n-1)/4] = 10; // set bigger  // > Initialization.color:4
    size[(n-1)/2] = 10;   // > Initialization.color:5
    //size[3*(n-1)/4] = 10;   // > Initialization.color:6
    colorg[(n-1)/2] = rgb(50, 0, 255);   // > Initialization.color:7
    colorfg[(n-1)/2] = rgb(255, 0, 50);   // > Initialization.color:8
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.orbitPlottingPanel2.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.orbitPlottingPanel2.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.orbitPlottingPanel2.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    _view.orbitPlottingPanel2.getTitleY().setPosition([0.5,0]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    computeCurve();  // > FixedRelations.FixRel Page:1
    sum = _view.fField.evaluate({ t : t, x : 0 })+_view.gField.evaluate({ t : t, x : 0 });  // > FixedRelations.FixRel Page:2
    msg = " y1 = "+_view._format(_view.fField.evaluate({ t : t, x : 0 }),"0.00")+" m,  y2 = "+_view._format(_view.gField.evaluate({ t : t, x : 0 }),"0.00")+" m "+",  y1+y2 = "+_view._format(sum,"0.00")+" m , \nT = "+_view._format(1/frequency,"0.00")+" s , t = "+_view._format(t,"0.00")+" s ";  // > FixedRelations.FixRel Page:3
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["point"]) return;
    var y10;  // > FixedRelations.point:1
    var xi0=0;  // > FixedRelations.point:2
    //_view.trail0.clear(); // need this else it will become a mess of points  // > FixedRelations.point:3
    y10=_view.fField.evaluate({ t : t, x : 0 });   // > FixedRelations.point:4
    //y10=_view.fField.evaluate({ t : t, x : xi0 }); // evaluate wave function  // > FixedRelations.point:5
    //xi0=xi0+t*1/pi;  // > FixedRelations.point:6
    _view.trail0.addPoint(0,y10);  // > FixedRelations.point:7
    //_view.trail0.addPoint(xi0,y10);  // > FixedRelations.point:8
                     // add data to trace  // > FixedRelations.point:9
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["max view"]) return;
      for (var i=0; i<101 /* Iterations */ ; i++) {  // > FixedRelations.max view:1
      ymax = Math.max(y12p[i],ymax); // added to scale y lookang  // > FixedRelations.max view:2
          // > FixedRelations.max view:3
        ymin = Math.min(y12p[i],ymin); // added to scale y lookang  // > FixedRelations.max view:4
    }  // > FixedRelations.max view:5
    // ymax = _view.gTrail+_view.fTrail; // added to scale y lookang  // > FixedRelations.max view:6
          // > FixedRelations.max view:7
    //  ymin = Math.min(y12p[i],ymin); // added to scale y lookang  // > FixedRelations.max view:8
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new wave1d01_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.fx.linkProperty("Display",  function() { return !print?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'fx'
          _view.fLabel.setAction("OnClick", function(_data,_info) {
  if (inputdropmenuf == true){
    inputdropmenuf = false;
    }
  else if (inputdropmenuf == false){
    inputdropmenuf = true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'fLabel'
          _view.fLabel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fLabel'
          _view.comboBox.linkProperty("Options",  function() { return ["Show F","Hide F","","1*sin(2*pi/1.0*(x-1.0*t))","sin(pi*x-t)","0.5*sin(pi*x-t)","2*sin(pi*x-t)","sin(0.5*pi*x-t)","sin(2*pi*x-t)","sin(pi*x-0.5*t)","sin(pi*x-2*t)","sin(pi*x-t-0.785)","sin(pi*x-t-1.57)","","show controls","hide controls"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
      
  if (option=="Show F"){
  showF=true;
  }
  //print
  else if (option == "print"){
    print = true;
    }
  //print
  else if (option == "Hide F"){
  showF = false;
  }
  else if (option == "show controls"){
  showcontrola = true;
  showF=true;
  }
  else if (option == "hide controls"){
  showcontrola = false;
  //showF=true;
  }
  else {
  fStr =option ;
  //fStr =selected[0] ;
  //_initialize();
  textt="select/change f(x,t) and g(x,t) and click play";
  computeCurve();
  _view._update(); //critical for immediate update
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.comboBox.linkProperty("Display",  function() { return inputdropmenuf?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'comboBox'
          _view.fField.linkProperty("Value",  function() { return fStr; }, function(_v) { fStr = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.setAction("OnChange", function(_data,_info) {
  //%_initialize%
  textt="select/change f(x,t) and g(x,t) and click play";
  computeCurve();
  _view._update(); //critical for immediate update;

}); // HtmlView Page setting action 'OnChange' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.fField.linkProperty("Display",  function() { return !inputdropmenuf?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'fField'
          _view.gx.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'gx'
          _view.gLabel.setAction("OnClick", function(_data,_info) {
  if (inputdropmenug == true){
    inputdropmenug = false;
    }
  else if (inputdropmenug == false){
    inputdropmenug = true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'gLabel'
          _view.comboBox2.linkProperty("Options",  function() { return ["Show G","Hide G","","sin(pi*x+t)","0.5*sin(pi*x+t)","2*sin(pi*x+t)","sin(0.5*pi*x+t)","sin(2*pi*x+t)","sin(pi*x+0.5*t)","sin(pi*x+2*t)","sin(pi*x-t+0.785)","sin(pi*x-t+1.57)","","show controls","hide controls"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox2'
          _view.comboBox2.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox2.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
      
  if (option=="Show G"){
  showG=true;
  }
  //print
  else if (option == "print"){
    print = true;
    }
  //print
  else if (option == "Hide G"){
  showG = false;
  }
  else if (option == "show controls"){
  showcontrolb = true;
  showG=true;
  }
  else if (option == "hide controls"){
  showcontrolb = false;
  //showG=true;
  }
  else {
  gStr =option ;
  //gStr =selectedg[0] ;
  //_initialize();
  textt="select/change f(x,t) and g(x,t) and click play";
  computeCurve();
  _view._update(); //critical for immediate update
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox2'
          _view.comboBox2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox2'
          _view.comboBox2.linkProperty("Display",  function() { return inputdropmenug?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'comboBox2'
          _view.gField.linkProperty("Value",  function() { return gStr; }, function(_v) { gStr = _v; } ); // HtmlView Page linking property 'Value' for element 'gField'
          _view.gField.setAction("OnChange", function(_data,_info) {
  //%_initialize%
  textt="select/change f(x,t) and g(x,t) and click play";
  computeCurve();
  _view._update(); //critical for immediate update;

}); // HtmlView Page setting action 'OnChange' for element 'gField'
          _view.gField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'gField'
          _view.gField.linkProperty("Display",  function() { return !inputdropmenug?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'gField'
          _view.ux.linkProperty("Display",  function() { return !print?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'ux'
          _view.uCheck.linkProperty("Checked",  function() { return showSuperposition; }, function(_v) { showSuperposition = _v; } ); // HtmlView Page linking property 'Checked' for element 'uCheck'
          _view.uCheck.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'uCheck'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  textt="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  dt=Math.abs(dt);
  _play();
  textt="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.backButton2.setAction("OnClick", function(_data,_info) {
  dt=-Math.abs(dt);
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'backButton2'
          _view.backButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'backButton2'
          _view.stepButton3.setAction("OnClick", function(_data,_info) {
  dt=Math.abs(dt);
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton3'
          _view.stepButton3.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton3'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  dt = -dt;
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  dt = -dt;

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.stepButton22.setAction("OnClick", function(_data,_info) {
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton22'
          _view.stepButton22.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton22'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.functionPanel.linkProperty("Visibility",  function() { return !print; } ); // HtmlView Page linking property 'Visibility' for element 'functionPanel'
          _view.functionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'functionPanel'
          _view.functionPanel.linkProperty("Display",  function() { return showcontrola==true?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'functionPanel'
          _view.slider.linkProperty("Value",  function() { return amplitude; }, function(_v) { amplitude = _v; } ); // HtmlView Page linking property 'Value' for element 'slider'
          _view.slider.setAction("OnChange", function(_data,_info) {
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  //_initialize();
  _view._update();

}); // HtmlView Page setting action 'OnChange' for element 'slider'
          _view.amplitude3.linkProperty("Value",  function() { return amplitude; }, function(_v) { amplitude = _v; } ); // HtmlView Page linking property 'Value' for element 'amplitude3'
          _view.amplitude3.setAction("OnChange", function(_data,_info) {
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'amplitude3'
          _view.amplitude3.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'amplitude3'
          _view.slider2.linkProperty("Value",  function() { return velocity; }, function(_v) { velocity = _v; } ); // HtmlView Page linking property 'Value' for element 'slider2'
          _view.slider2.setAction("OnChange", function(_data,_info) {
  frequency = velocity/lambda;
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  //_initialize();
  _view._update();

}); // HtmlView Page setting action 'OnChange' for element 'slider2'
          _view.velocity2.linkProperty("Value",  function() { return velocity; }, function(_v) { velocity = _v; } ); // HtmlView Page linking property 'Value' for element 'velocity2'
          _view.velocity2.setAction("OnChange", function(_data,_info) {
  frequency = velocity/lambda;
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'velocity2'
          _view.velocity2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'velocity2'
          _view.slider22.linkProperty("Value",  function() { return frequency; }, function(_v) { frequency = _v; } ); // HtmlView Page linking property 'Value' for element 'slider22'
          _view.slider22.setAction("OnChange", function(_data,_info) {
  velocity = frequency*lambda;
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  //_initialize();
  _view._update();

}); // HtmlView Page setting action 'OnChange' for element 'slider22'
          _view.f.linkProperty("Value",  function() { return frequency; }, function(_v) { frequency = _v; } ); // HtmlView Page linking property 'Value' for element 'f'
          _view.f.setAction("OnChange", function(_data,_info) {
  velocity = frequency*lambda;
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'f'
          _view.f.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'f'
          _view.slider222.linkProperty("Value",  function() { return lambda; }, function(_v) { lambda = _v; } ); // HtmlView Page linking property 'Value' for element 'slider222'
          _view.slider222.setAction("OnChange", function(_data,_info) {
  velocity = frequency*lambda;
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  //_initialize();
  _view._update();

}); // HtmlView Page setting action 'OnChange' for element 'slider222'
          _view.lamdba.linkProperty("Value",  function() { return lambda; }, function(_v) { lambda = _v; } ); // HtmlView Page linking property 'Value' for element 'lamdba'
          _view.lamdba.setAction("OnChange", function(_data,_info) {
  velocity = frequency*lambda;
  fStr =_view._format(amplitude,"0.00")+"*sin(2*pi/"+_view._format(lambda,"0.00")+"*(x-"+_view._format(velocity,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'lamdba'
          _view.lamdba.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'lamdba'
          _view.panel2.linkProperty("Visibility",  function() { return !print; } ); // HtmlView Page linking property 'Visibility' for element 'panel2'
          _view.panel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'panel2'
          _view.panel2.linkProperty("Display",  function() { return showcontrolb==true?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'panel2'
          _view.slider3.linkProperty("Value",  function() { return amplitude2; }, function(_v) { amplitude2 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider3'
          _view.slider3.setAction("OnChange", function(_data,_info) {
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  //_initialize();
  _view._update();

}); // HtmlView Page setting action 'OnChange' for element 'slider3'
          _view.amplitude32.linkProperty("Value",  function() { return amplitude2; }, function(_v) { amplitude2 = _v; } ); // HtmlView Page linking property 'Value' for element 'amplitude32'
          _view.amplitude32.setAction("OnChange", function(_data,_info) {
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'amplitude32'
          _view.amplitude32.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'amplitude32'
          _view.slider23.linkProperty("Value",  function() { return velocity2; }, function(_v) { velocity2 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider23'
          _view.slider23.setAction("OnChange", function(_data,_info) {
  frequency2 = velocity2/lambda2;
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  _view._update();
  //_initialize();

}); // HtmlView Page setting action 'OnChange' for element 'slider23'
          _view.velocity23.linkProperty("Value",  function() { return velocity2; }, function(_v) { velocity2 = _v; } ); // HtmlView Page linking property 'Value' for element 'velocity23'
          _view.velocity23.setAction("OnChange", function(_data,_info) {
  frequency2 = velocity2/lambda2;
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'velocity23'
          _view.velocity23.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'velocity23'
          _view.slider232.linkProperty("Value",  function() { return frequency2; }, function(_v) { frequency2 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider232'
          _view.slider232.setAction("OnChange", function(_data,_info) {
  velocity2 = frequency2*lambda2;
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  _view._update();
  //_initialize();

}); // HtmlView Page setting action 'OnChange' for element 'slider232'
          _view.velocity232.linkProperty("Value",  function() { return frequency2; }, function(_v) { frequency2 = _v; } ); // HtmlView Page linking property 'Value' for element 'velocity232'
          _view.velocity232.setAction("OnChange", function(_data,_info) {
  velocity2 = frequency2*lambda2;
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'velocity232'
          _view.velocity232.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'velocity232'
          _view.slider233.linkProperty("Value",  function() { return lambda2; }, function(_v) { lambda2 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider233'
          _view.slider233.setAction("OnChange", function(_data,_info) {
  velocity2 = frequency2*lambda2;
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  _view._update();
  //_initialize();

}); // HtmlView Page setting action 'OnChange' for element 'slider233'
          _view.wave.linkProperty("Value",  function() { return lambda2; }, function(_v) { lambda2 = _v; } ); // HtmlView Page linking property 'Value' for element 'wave'
          _view.wave.setAction("OnChange", function(_data,_info) {
  velocity2 = frequency2*lambda2;
  gStr =_view._format(amplitude2,"0.00")+"*sin(2*pi/"+_view._format(lambda2,"0.00")+"*(x+"+_view._format(velocity2,"0.00")+"*t))";
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'wave'
          _view.wave.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'wave'
          _view.centerPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'centerPanel'
          _view.orbitPlottingPanel2.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();
  if (_model.isPlaying())_pause();
  else if (_model.isPaused())_play();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("TRMessage",  function() { return print?"":"wave superposition u(x,t) = f(x,t) + g(x,t)"; } ); // HtmlView Page linking property 'TRMessage' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("XTickStep",  function() { return lambda/4; } ); // HtmlView Page linking property 'XTickStep' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.setAction("OnPress", function(_data,_info) {
  //dt=Math.abs(dt);
  _step();

}); // HtmlView Page setting action 'OnPress' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("TLMessage",  function() { return print?"":textt; } ); // HtmlView Page linking property 'TLMessage' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'orbitPlottingPanel2'
          _view.orbitPlottingPanel2.linkProperty("BRMessage",  function() { return print?"":msg; } ); // HtmlView Page linking property 'BRMessage' for element 'orbitPlottingPanel2'
          _view.arrow2.linkProperty("X",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'X' for element 'arrow2'
          _view.arrow2.setAction("OnPress", function(_data,_info) {
  xmin=xmin-1;

}); // HtmlView Page setting action 'OnPress' for element 'arrow2'
          _view.arrow.linkProperty("X",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'X' for element 'arrow'
          _view.arrow.setAction("OnPress", function(_data,_info) {
  xmax=xmax+1;

}); // HtmlView Page setting action 'OnPress' for element 'arrow'
          _view.arrow.setAction("OnDrag", function(_data,_info) {
  xmax=Math.round(xmax*2)/2;

}); // HtmlView Page setting action 'OnDrag' for element 'arrow'
          _view.fTrail.linkProperty("Visibility",  function() { return showF; }, function(_v) { showF = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fTrail'
          _view.fobject.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'fobject'
          _view.fobject.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'fobject'
          _view.fobject.linkProperty("SizeX",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeX' for element 'fobject'
          _view.fobject.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'fobject'
          _view.fobject.linkProperty("Y",  function() { return y1p; }, function(_v) { y1p = _v; } ); // HtmlView Page linking property 'Y' for element 'fobject'
          _view.fobject.linkProperty("Visibility",  function() { return showF; }, function(_v) { showF = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fobject'
          _view.fobject.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'fobject'
          _view.fobject.setAction("OnDrag", function(_data,_info) {
  computeCurve ();

}); // HtmlView Page setting action 'OnDrag' for element 'fobject'
          _view.gTrail.linkProperty("Visibility",  function() { return showG; }, function(_v) { showG = _v; } ); // HtmlView Page linking property 'Visibility' for element 'gTrail'
          _view.gobject.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'gobject'
          _view.gobject.linkProperty("FillColor",  function() { return colorg; }, function(_v) { colorg = _v; } ); // HtmlView Page linking property 'FillColor' for element 'gobject'
          _view.gobject.linkProperty("SizeX",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeX' for element 'gobject'
          _view.gobject.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'gobject'
          _view.gobject.linkProperty("Y",  function() { return y2p; }, function(_v) { y2p = _v; } ); // HtmlView Page linking property 'Y' for element 'gobject'
          _view.gobject.linkProperty("Visibility",  function() { return showG; }, function(_v) { showG = _v; } ); // HtmlView Page linking property 'Visibility' for element 'gobject'
          _view.gobject.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'gobject'
          _view.sumTrail.linkProperty("Visibility",  function() { return showSuperposition; }, function(_v) { showSuperposition = _v; } ); // HtmlView Page linking property 'Visibility' for element 'sumTrail'
          _view.sumobject.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'sumobject'
          _view.sumobject.linkProperty("FillColor",  function() { return colorfg; }, function(_v) { colorfg = _v; } ); // HtmlView Page linking property 'FillColor' for element 'sumobject'
          _view.sumobject.linkProperty("SizeX",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeX' for element 'sumobject'
          _view.sumobject.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'sumobject'
          _view.sumobject.linkProperty("Y",  function() { return y12p; }, function(_v) { y12p = _v; } ); // HtmlView Page linking property 'Y' for element 'sumobject'
          _view.sumobject.linkProperty("Visibility",  function() { return showSuperposition; }, function(_v) { showSuperposition = _v; } ); // HtmlView Page linking property 'Visibility' for element 'sumobject'
          _view.sumobject.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'sumobject'
          _view.sumTrail2.linkProperty("Visibility",  function() { return showSuperposition; }, function(_v) { showSuperposition = _v; } ); // HtmlView Page linking property 'Visibility' for element 'sumTrail2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(_isMobile?5:1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function wave1d01_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = wave1d01_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('About','./wave1d01_Intro_1.html');

  return _view;
} // end of main function

function wave1d01_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"functionPanel2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'functionPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"fx", _view.functionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'fx'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'fx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"fLabel", _view.fx) // EJsS HtmlView.HtmlView Page: declaration of element 'fLabel'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'fLabel'
      .setProperty("Tooltip","green function, click it to go to input field mode") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fLabel'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fLabel'
      .setProperty("Text","f(x,t) ?=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'fLabel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.fx) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.fx) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","20vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","modeling pedagogy: key in your own equation like A*sin(2*pi/λ(x-v*t) form") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"gx", _view.functionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'gx'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'gx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"gLabel", _view.gx) // EJsS HtmlView.HtmlView Page: declaration of element 'gLabel'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'gLabel'
      .setProperty("Tooltip","function of wave 2, click it to go to input field mode") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'gLabel'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'gLabel'
      .setProperty("Text"," g(x,t) ?=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'gLabel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox2", _view.gx) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox2'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"gField", _view.gx) // EJsS HtmlView.HtmlView Page: declaration of element 'gField'
      .setProperty("Width","20vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'gField'
      .setProperty("Tooltip","modeling pedagogy: key in your own equation like A*sin(2*pi/λ(x+v*t) form") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'gField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"ux", _view.functionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'ux'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'ux'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"uCheck", _view.ux) // EJsS HtmlView.HtmlView Page: declaration of element 'uCheck'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'uCheck'
      .setProperty("Tooltip","summation or superposition of the 2 waves") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'uCheck'
      .setProperty("Text","+?") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'uCheck'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.ux) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"backButton2", _view.ux) // EJsS HtmlView.HtmlView Page: declaration of element 'backButton2'
      .setProperty("Tooltip","Steps back the simulation.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'backButton2'
      .setProperty("Text","◀❚") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'backButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton3", _view.ux) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton3'
      .setProperty("Tooltip","Steps the simulation.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton3'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton3'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.ux) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Steps back the simulation by period/8.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("Text","- T/8") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton22", _view.ux) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton22'
      .setProperty("Tooltip","Steps the simulation by period/8.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton22'
      .setProperty("Text","+ T/8") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton22'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.ux) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","reset simulation") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottom", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'bottom'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"functionPanel", _view.bottom) // EJsS HtmlView.HtmlView Page: declaration of element 'functionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"amplitude", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'amplitude'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'amplitude'
      .setProperty("Tooltip","amplitude") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'amplitude'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'amplitude'
      .setProperty("Text"," A1 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'amplitude'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'slider'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"amplitude3", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'amplitude3'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'amplitude3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'amplitude3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"metre", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'metre'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'metre'
      .setProperty("Tooltip","metre") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'metre'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'metre'
      .setProperty("Text"," m ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'metre'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"velocity", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'velocity'
      .setProperty("Tooltip","velocity") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'velocity'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'velocity'
      .setProperty("Text"," v1 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'velocity'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider2", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'slider2'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider2'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider2'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider2'
      .setProperty("Tooltip","since v = fλ, in the sliders, when changing v, the  model assume λ constant, thus f changes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider2'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"velocity2", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity2'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'velocity2'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'velocity2'
      .setProperty("Tooltip","velocity of wave 1") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'velocity2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"m_s", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm_s'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'm_s'
      .setProperty("Tooltip","metre per second") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'm_s'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'm_s'
      .setProperty("Text"," m/s ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'm_s'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"frequency", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'frequency'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'frequency'
      .setProperty("Tooltip","frequency") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'frequency'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'frequency'
      .setProperty("Text"," f1 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'frequency'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider22", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'slider22'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider22'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider22'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider22'
      .setProperty("Tooltip","since v = fλ, when changing f, the  model assume λ constant, thus v changes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider22'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider22'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"f", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'f'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'f'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'f'
      .setProperty("Tooltip","frequency of wave 1") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'f'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Hz", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Hz'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Hz'
      .setProperty("Tooltip","hertz, cycle per second") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Hz'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Hz'
      .setProperty("Text"," Hz ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Hz'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"lambda", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lambda'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'lambda'
      .setProperty("Tooltip","wavelength") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'lambda'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'lambda'
      .setProperty("Text"," λ1 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lambda'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider222", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'slider222'
      .setProperty("Minimum",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider222'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider222'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider222'
      .setProperty("Tooltip","since v = fλ, when changing λ, the  model assume f constant, thus v changes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider222'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider222'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"lamdba", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lamdba'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'lamdba'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'lamdba'
      .setProperty("Tooltip","wavelength of wave 1") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'lamdba'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"m", _view.functionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'm'
      .setProperty("Tooltip","metre") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'm'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'm'
      .setProperty("Text"," m ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'm'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.bottom) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"amplitude2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'amplitude2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'amplitude2'
      .setProperty("Tooltip","amplitude") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'amplitude2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'amplitude2'
      .setProperty("Text"," A2 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'amplitude2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider3", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider3'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider3'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider3'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider3'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'slider3'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider3'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"amplitude32", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'amplitude32'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'amplitude32'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'amplitude32'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"metre2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'metre2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'metre2'
      .setProperty("Tooltip","metre") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'metre2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'metre2'
      .setProperty("Text"," m ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'metre2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"velocity3", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity3'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'velocity3'
      .setProperty("Tooltip","velocity") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'velocity3'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'velocity3'
      .setProperty("Text"," v2 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'velocity3'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider23", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider23'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider23'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider23'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider23'
      .setProperty("Tooltip","since v = fλ, in the sliders, when changing v, the  model assume λ constant, thus f changes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider23'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'slider23'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider23'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"velocity23", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity23'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'velocity23'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'velocity23'
      .setProperty("Tooltip","since v = fλ, in the sliders, when changing v, the  model assume λ constant, thus f changes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'velocity23'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"m_s2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'm_s2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'm_s2'
      .setProperty("Tooltip","metre per second") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'm_s2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'm_s2'
      .setProperty("Text"," m/s ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'm_s2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"f2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'f2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'f2'
      .setProperty("Tooltip","frequency 2") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'f2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'f2'
      .setProperty("Text"," f2 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'f2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider232", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider232'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider232'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider232'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider232'
      .setProperty("Tooltip","since v = fλ, when changing f, the  model assume λ constant, thus v changes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider232'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'slider232'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider232'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"velocity232", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity232'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'velocity232'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'velocity232'
      .setProperty("Tooltip","frequency") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'velocity232'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"m_s22", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'm_s22'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'm_s22'
      .setProperty("Tooltip","hertz") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'm_s22'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'm_s22'
      .setProperty("Text"," Hz ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'm_s22'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wavelength", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelength'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wavelength'
      .setProperty("Tooltip","wavelength 2") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wavelength'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'wavelength'
      .setProperty("Text"," λ2 = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wavelength'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider233", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider233'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider233'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider233'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider233'
      .setProperty("Tooltip","since v = fλ, when changing λ, the  model assume f constant, thus v changes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider233'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'slider233'
      .setProperty("Step",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider233'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"wave", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'wave'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'wave'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wave'
      .setProperty("Tooltip","wavelength of wave 2") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wave'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wavelength2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelength2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wavelength2'
      .setProperty("Tooltip","metre ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wavelength2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'wavelength2'
      .setProperty("Text"," m ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wavelength2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"centerPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'centerPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'centerPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"orbitPlottingPanel2", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'orbitPlottingPanel2'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'orbitPlottingPanel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'orbitPlottingPanel2'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'orbitPlottingPanel2'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'orbitPlottingPanel2'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'orbitPlottingPanel2'
      .setProperty("AxisYFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'orbitPlottingPanel2'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'orbitPlottingPanel2'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'orbitPlottingPanel2'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'orbitPlottingPanel2'
      .setProperty("Background","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'orbitPlottingPanel2'
      .setProperty("Title","wave superposition u(x,t) = f(x,t) + g(x,t)") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'orbitPlottingPanel2'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'orbitPlottingPanel2'
      .setProperty("SquareAspect",false) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'orbitPlottingPanel2'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'orbitPlottingPanel2'
      .setProperty("AxisXFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'orbitPlottingPanel2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'orbitPlottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'orbitPlottingPanel2'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'orbitPlottingPanel2'
      .setProperty("MarginY",20) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'orbitPlottingPanel2'
      .setProperty("XScalePrecision",3) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'orbitPlottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"controlxminxmax", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'controlxminxmax'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow2", _view.controlxminxmax) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow2'
      .setProperty("SizeX",-20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrow2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.controlxminxmax) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrow'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"fTrail", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'fTrail'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'fTrail'
      .setProperty("Connected",true) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'fTrail'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'fTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'fTrail'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'fTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"fobject", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'fobject'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'fobject'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'fobject'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'fobject'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail0", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'trail0'
      .setProperty("FillColor","rgba(0,64,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trail0'
      .setProperty("Connected",true) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trail0'
      .setProperty("LineColor","rgba(0,64,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail0'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'trail0'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'trail0'
      .setProperty("LineWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail0'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'trail0'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail2", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'trail2'
      .setProperty("FillColor","rgba(0,0,128,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trail2'
      .setProperty("Connected",true) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trail2'
      .setProperty("LineColor","rgba(0,0,128,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'trail2'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'trail2'
      .setProperty("LineWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail2'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'trail2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"gTrail", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'gTrail'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'gTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'gTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"gobject", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'gobject'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'gobject'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'gobject'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"sumTrail", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'sumTrail'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sumTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'sumTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"sumobject", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'sumobject'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'sumobject'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'sumobject'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"sumTrail2", _view.orbitPlottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'sumTrail2'
      .setProperty("FillColor","rgba(200,0,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'sumTrail2'
      .setProperty("Connected",true) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'sumTrail2'
      .setProperty("LineColor","rgba(200,0,0,255)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sumTrail2'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'sumTrail2'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'sumTrail2'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'sumTrail2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Wave Superposition Model<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave1d01/wave1d/EJSSsuperpostion_2017-05-19_1421small.png" />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave1d01/wave1d/EJSSsuperpostion_2017-05-19_1421small.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave1d01/01authorlookang50x50.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave1d01/wave1d/wc_icon.png" />
 weelookang@gmail.com; wolfgang, wochristian@davidson.edu
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, CC-BY-SA.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new wave1d01("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave1d01/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
