<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ejs Open Source Single Slit Diffraction Model</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function wave_singleslit2wee03(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var range; // EjsS Model.Variables.Var Table.range
  var factor; // EjsS Model.Variables.Var Table.factor
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var size; // EjsS Model.Variables.Var Table.size
  var pi; // EjsS Model.Variables.Var Table.pi
  var pi2; // EjsS Model.Variables.Var Table.pi2
  var stroke; // EjsS Model.Variables.Var Table.stroke
  var npt; // EjsS Model.Variables.Var Table.npt
  var autoscale; // EjsS Model.Variables.Var Table.autoscale

  var x1; // EjsS Model.Variables.Var Table 2.x1
  var x1arrow; // EjsS Model.Variables.Var Table 2.x1arrow
  var y1arrow; // EjsS Model.Variables.Var Table 2.y1arrow
  var wavelengtharrow; // EjsS Model.Variables.Var Table 2.wavelengtharrow
  var ny; // EjsS Model.Variables.Var Table 2.ny
  var nx; // EjsS Model.Variables.Var Table 2.nx
  var nxsum; // EjsS Model.Variables.Var Table 2.nxsum
  var nysum; // EjsS Model.Variables.Var Table 2.nysum
  var nx2; // EjsS Model.Variables.Var Table 2.nx2
  var d; // EjsS Model.Variables.Var Table 2.d
  var n; // EjsS Model.Variables.Var Table 2.n
  var ns; // EjsS Model.Variables.Var Table 2.ns
  var wavelength; // EjsS Model.Variables.Var Table 2.wavelength
  var w; // EjsS Model.Variables.Var Table 2.w
  var kw; // EjsS Model.Variables.Var Table 2.kw
  var T; // EjsS Model.Variables.Var Table 2.T
  var omega; // EjsS Model.Variables.Var Table 2.omega
  var yi; // EjsS Model.Variables.Var Table 2.yi
  var dy; // EjsS Model.Variables.Var Table 2.dy
  var xc; // EjsS Model.Variables.Var Table 2.xc
  var yc; // EjsS Model.Variables.Var Table 2.yc
  var ycc; // EjsS Model.Variables.Var Table 2.ycc
  var x2; // EjsS Model.Variables.Var Table 2.x2
  var y2; // EjsS Model.Variables.Var Table 2.y2
  var z2; // EjsS Model.Variables.Var Table 2.z2
  var z; // EjsS Model.Variables.Var Table 2.z
  var zsum; // EjsS Model.Variables.Var Table 2.zsum
  var r; // EjsS Model.Variables.Var Table 2.r
  var x; // EjsS Model.Variables.Var Table 2.x
  var y; // EjsS Model.Variables.Var Table 2.y
  var zmax; // EjsS Model.Variables.Var Table 2.zmax

  var slitshow; // EjsS Model.Variables.lookang.slitshow
  var type; // EjsS Model.Variables.lookang.type
  var colormode; // EjsS Model.Variables.lookang.colormode
  var nshow; // EjsS Model.Variables.lookang.nshow

  var text; // EjsS Model.Variables.layout.text
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var Width3; // EjsS Model.Variables.layout.Width3
  var Height1; // EjsS Model.Variables.layout.Height1
  var graph; // EjsS Model.Variables.layout.graph
  var world; // EjsS Model.Variables.layout.world
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var datashow; // EjsS Model.Variables.layout.datashow
  var datashow2; // EjsS Model.Variables.layout.datashow2

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      fontb : fontb,
      font : font,
      t : t,
      dt : dt,
      range : range,
      factor : factor,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      size : size,
      pi : pi,
      pi2 : pi2,
      stroke : stroke,
      npt : npt,
      autoscale : autoscale,
      x1 : x1,
      x1arrow : x1arrow,
      y1arrow : y1arrow,
      wavelengtharrow : wavelengtharrow,
      ny : ny,
      nx : nx,
      nxsum : nxsum,
      nysum : nysum,
      nx2 : nx2,
      d : d,
      n : n,
      ns : ns,
      wavelength : wavelength,
      w : w,
      kw : kw,
      T : T,
      omega : omega,
      yi : yi,
      dy : dy,
      xc : xc,
      yc : yc,
      ycc : ycc,
      x2 : x2,
      y2 : y2,
      z2 : z2,
      z : z,
      zsum : zsum,
      r : r,
      x : x,
      y : y,
      zmax : zmax,
      slitshow : slitshow,
      type : type,
      colormode : colormode,
      nshow : nshow,
      text : text,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      Width3 : Width3,
      Height1 : Height1,
      graph : graph,
      world : world,
      disabledworld : disabledworld,
      disabled : disabled,
      datashow : datashow,
      datashow2 : datashow2
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.factor != "undefined") factor = json.factor;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.pi2 != "undefined") pi2 = json.pi2;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.npt != "undefined") npt = json.npt;
    if(typeof json.autoscale != "undefined") autoscale = json.autoscale;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.x1arrow != "undefined") x1arrow = json.x1arrow;
    if(typeof json.y1arrow != "undefined") y1arrow = json.y1arrow;
    if(typeof json.wavelengtharrow != "undefined") wavelengtharrow = json.wavelengtharrow;
    if(typeof json.ny != "undefined") ny = json.ny;
    if(typeof json.nx != "undefined") nx = json.nx;
    if(typeof json.nxsum != "undefined") nxsum = json.nxsum;
    if(typeof json.nysum != "undefined") nysum = json.nysum;
    if(typeof json.nx2 != "undefined") nx2 = json.nx2;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.ns != "undefined") ns = json.ns;
    if(typeof json.wavelength != "undefined") wavelength = json.wavelength;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.kw != "undefined") kw = json.kw;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.yi != "undefined") yi = json.yi;
    if(typeof json.dy != "undefined") dy = json.dy;
    if(typeof json.xc != "undefined") xc = json.xc;
    if(typeof json.yc != "undefined") yc = json.yc;
    if(typeof json.ycc != "undefined") ycc = json.ycc;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.z2 != "undefined") z2 = json.z2;
    if(typeof json.z != "undefined") z = json.z;
    if(typeof json.zsum != "undefined") zsum = json.zsum;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.zmax != "undefined") zmax = json.zmax;
    if(typeof json.slitshow != "undefined") slitshow = json.slitshow;
    if(typeof json.type != "undefined") type = json.type;
    if(typeof json.colormode != "undefined") colormode = json.colormode;
    if(typeof json.nshow != "undefined") nshow = json.nshow;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Width3 != "undefined") Width3 = json.Width3;
    if(typeof json.Height1 != "undefined") Height1 = json.Height1;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.datashow != "undefined") datashow = json.datashow;
    if(typeof json.datashow2 != "undefined") datashow2 = json.datashow2;
  };

  _model._inputAndPublicParameters = ["fontb",  "font",  "t",  "dt",  "range",  "factor",  "xmin",  "xmax",  "ymin",  "ymax",  "size",  "pi",  "pi2",  "stroke",  "npt",  "autoscale",  "x1",  "x1arrow",  "y1arrow",  "wavelengtharrow",  "ny",  "nx",  "nxsum",  "nysum",  "nx2",  "d",  "n",  "ns",  "wavelength",  "w",  "kw",  "T",  "omega",  "yi",  "dy",  "xc",  "yc",  "ycc",  "x2",  "y2",  "z2",  "z",  "zsum",  "r",  "x",  "y",  "zmax",  "slitshow",  "type",  "colormode",  "nshow",  "text",  "Width",  "Height",  "Width1",  "Width2",  "Width3",  "Height1",  "graph",  "world",  "disabledworld",  "disabled",  "datashow",  "datashow2"]; 

  _model._outputAndPublicParameters = ["fontb",  "font",  "t",  "dt",  "range",  "factor",  "xmin",  "xmax",  "ymin",  "ymax",  "size",  "pi",  "pi2",  "stroke",  "npt",  "autoscale",  "x1",  "x1arrow",  "y1arrow",  "wavelengtharrow",  "ny",  "nx",  "nxsum",  "nysum",  "nx2",  "d",  "n",  "ns",  "wavelength",  "w",  "kw",  "T",  "omega",  "yi",  "dy",  "xc",  "yc",  "ycc",  "x2",  "y2",  "z2",  "z",  "zsum",  "r",  "x",  "y",  "zmax",  "slitshow",  "type",  "colormode",  "nshow",  "text",  "Width",  "Height",  "Width1",  "Width2",  "Width3",  "Height1",  "graph",  "world",  "disabledworld",  "disabled",  "datashow",  "datashow2"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = false;
    __pagesEnabled["Evol Page 2"] = true;
    __pagesEnabled["FixRel Page"] = false;
    __pagesEnabled["lookang"] = true;
  });

  _model.addToReset(function() {
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 1vw "; // EjsS Model.Variables.Var Table.font
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    range = 2; // EjsS Model.Variables.Var Table.range
    factor = 1.0; // EjsS Model.Variables.Var Table.factor
    xmin = -range*factor; // EjsS Model.Variables.Var Table.xmin
    xmax = range*factor; // EjsS Model.Variables.Var Table.xmax
    ymin = -range; // EjsS Model.Variables.Var Table.ymin
    ymax = range; // EjsS Model.Variables.Var Table.ymax
    size = range/20; // EjsS Model.Variables.Var Table.size
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    pi2 = 2*pi; // EjsS Model.Variables.Var Table.pi2
    stroke = 4; // EjsS Model.Variables.Var Table.stroke
    npt = 500; // EjsS Model.Variables.Var Table.npt
    autoscale = true; // EjsS Model.Variables.Var Table.autoscale
  });

  _model.addToReset(function() {
    x1 = xmin/2; // EjsS Model.Variables.Var Table 2.x1
    x1arrow = x1; // EjsS Model.Variables.Var Table 2.x1arrow
    y1arrow = 0; // EjsS Model.Variables.Var Table 2.y1arrow
    wavelengtharrow = true; // EjsS Model.Variables.Var Table 2.wavelengtharrow
    ny = 200; // EjsS Model.Variables.Var Table 2.ny
    nx = ny; // EjsS Model.Variables.Var Table 2.nx
    nxsum = 200; // EjsS Model.Variables.Var Table 2.nxsum
    nysum = 200; // EjsS Model.Variables.Var Table 2.nysum
    nx2 = 20; // EjsS Model.Variables.Var Table 2.nx2
    d = (ymax-ymin)/ny; // EjsS Model.Variables.Var Table 2.d
    n = 5; // EjsS Model.Variables.Var Table 2.n
    ns = n; // EjsS Model.Variables.Var Table 2.ns
    wavelength = size*2; // EjsS Model.Variables.Var Table 2.wavelength
    w = wavelength*n; // EjsS Model.Variables.Var Table 2.w
    kw = 2*pi/wavelength; // EjsS Model.Variables.Var Table 2.kw
    T = 0.5; // EjsS Model.Variables.Var Table 2.T
    omega = 2*pi/T; // EjsS Model.Variables.Var Table 2.omega
    yi = 0; // EjsS Model.Variables.Var Table 2.yi
    dy = 0; // EjsS Model.Variables.Var Table 2.dy
    xc = 0; // EjsS Model.Variables.Var Table 2.xc
    yc = 0; // EjsS Model.Variables.Var Table 2.yc
    ycc = new Array(n); // EjsS Model.Variables.Var Table 2.ycc
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table 2.ycc
        ycc[_i0] = 0;  // EjsS Model.Variables.Var Table 2.ycc
      }
    }());
    x2 = 0; // EjsS Model.Variables.Var Table 2.x2
    y2 = 0; // EjsS Model.Variables.Var Table 2.y2
    z2 = new Array(nx2); // EjsS Model.Variables.Var Table 2.z2
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nx2; _i0+=1) {  // EjsS Model.Variables.Var Table 2.z2
        z2[_i0] = [];
        for (_i1=0; _i1<ny; _i1+=1) {  // EjsS Model.Variables.Var Table 2.z2
          z2[_i0][_i1] = 0;  // EjsS Model.Variables.Var Table 2.z2
        }
      }
    }());
    z = new Array(nx); // EjsS Model.Variables.Var Table 2.z
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nx; _i0+=1) {  // EjsS Model.Variables.Var Table 2.z
        z[_i0] = [];
        for (_i1=0; _i1<ny; _i1+=1) {  // EjsS Model.Variables.Var Table 2.z
          z[_i0][_i1] = 0;  // EjsS Model.Variables.Var Table 2.z
        }
      }
    }());
    zsum = new Array(nxsum); // EjsS Model.Variables.Var Table 2.zsum
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nxsum; _i0+=1) {  // EjsS Model.Variables.Var Table 2.zsum
        zsum[_i0] = [];
        for (_i1=0; _i1<nysum; _i1+=1) {  // EjsS Model.Variables.Var Table 2.zsum
          zsum[_i0][_i1] = 0;  // EjsS Model.Variables.Var Table 2.zsum
        }
      }
    }());
    r = 0; // EjsS Model.Variables.Var Table 2.r
    x = 0; // EjsS Model.Variables.Var Table 2.x
    y = 0; // EjsS Model.Variables.Var Table 2.y
    zmax = n; // EjsS Model.Variables.Var Table 2.zmax
  });

  _model.addToReset(function() {
    slitshow = false; // EjsS Model.Variables.lookang.slitshow
    type = 0; // EjsS Model.Variables.lookang.type
    colormode = 0; // EjsS Model.Variables.lookang.colormode
    nshow = true; // EjsS Model.Variables.lookang.nshow
  });

  _model.addToReset(function() {
    text = "select the different position of RED and Blue dots and click play"; // EjsS Model.Variables.layout.text
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "0%"; // EjsS Model.Variables.layout.Width2
    Width3 = "0%"; // EjsS Model.Variables.layout.Width3
    Height1 = "15"; // EjsS Model.Variables.layout.Height1
    graph = true; // EjsS Model.Variables.layout.graph
    world = true; // EjsS Model.Variables.layout.world
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
    datashow = true; // EjsS Model.Variables.layout.datashow
    datashow2 = true; // EjsS Model.Variables.layout.datashow2
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //_view.drawingPanel.setAntialiasTextOn(true);  // > Initialization.Init Page:1
    //_view.drawingPanel.setAntialiasShapeOn(true);  // > Initialization.Init Page:2
    if( w>wavelength*n) {  // > Initialization.Init Page:3
      w=wavelength*n; // to make width = wavelength*n if width is too big  // > Initialization.Init Page:4
    }  // > Initialization.Init Page:5
    n = ns; // store value for n  // > Initialization.Init Page:6
    ycc = [n]; // need for the source  to show only the number of nes  // > Initialization.Init Page:7
    dy = w/n;  // > Initialization.Init Page:8
    yi = -w/2+dy/2;  // > Initialization.Init Page:9
    xc = x1;  // > Initialization.Init Page:10
    kw = 2*pi/wavelength;  // > Initialization.Init Page:11
    omega = 2*pi/T;  // > Initialization.Init Page:12
    //if(w>wavelength*n)w=wavelength*n;  // > Initialization.Init Page:13
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    t=t+dt;  // > Evolution.Evol Page:1
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page 2"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    for(var j=0;j<nx2;j++) {  // > FixedRelations.FixRel Page:1
      //before slit pattern  // > FixedRelations.FixRel Page:2
      x = xmin+j*d;  // > FixedRelations.FixRel Page:3
      for (var k=0;k<ny;k++) {  // > FixedRelations.FixRel Page:4
        r=x-x1; // r is distance from array point x to slit position x1  // > FixedRelations.FixRel Page:5
        // r = x1 - x; // wrong direction  // > FixedRelations.FixRel Page:6
        z2[j][k]=Math.sin(kw*r-omega*t);  // > FixedRelations.FixRel Page:7
      }  // > FixedRelations.FixRel Page:8
    }  // > FixedRelations.FixRel Page:9
    for(var j=0;j<nx;j++) {  // > FixedRelations.FixRel Page:10
      //need to set to zero first everytime it calculate  // > FixedRelations.FixRel Page:11
      for(var k=0;k<ny;k++) {  // > FixedRelations.FixRel Page:12
        z[j][k]=0;  // > FixedRelations.FixRel Page:13
      }  // > FixedRelations.FixRel Page:14
    }  // > FixedRelations.FixRel Page:15
    for(var i=0;i<n;i++) {  // > FixedRelations.FixRel Page:16
      yc=yi+i*dy;  // > FixedRelations.FixRel Page:17
      for(var j=0;j<nx;j++) {  // > FixedRelations.FixRel Page:18
        x=x1+j*d;  // > FixedRelations.FixRel Page:19
        x2=(x-xc)*(x-xc);  // > FixedRelations.FixRel Page:20
        for(var k=0;k<ny;k++) {  // > FixedRelations.FixRel Page:21
          y=ymin+k*d;  // > FixedRelations.FixRel Page:22
          r=Math.sqrt(x2+(y-yc)*(y-yc));  // > FixedRelations.FixRel Page:23
          z[j][k]+=Math.sin(kw*r-omega*t);  // > FixedRelations.FixRel Page:24
        }  // > FixedRelations.FixRel Page:25
      }  // > FixedRelations.FixRel Page:26
    }  // > FixedRelations.FixRel Page:27
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["lookang"]) return;
    xc = x1;  // > FixedRelations.lookang:1
    for (var j=0;j<nxsum;j++) {  // > FixedRelations.lookang:2
      //need to set to zero first everytime it calculate  // > FixedRelations.lookang:3
      for (var k=0;k<nysum;k++) {  // > FixedRelations.lookang:4
        zsum[j][k]=0;  // > FixedRelations.lookang:5
      }  // > FixedRelations.lookang:6
    }  // > FixedRelations.lookang:7
    for (var i=0;i<n;i++) {  // > FixedRelations.lookang:8
      yc=yi+i*dy; // lay the source in y  // > FixedRelations.lookang:9
      ycc[i] = yi+i*dy; // by lookang for drawing source  // > FixedRelations.lookang:10
      for (var j=0;j<nxsum;j++) {  // > FixedRelations.lookang:11
        //  if (x<x1) {  // > FixedRelations.lookang:12
          x=xmin+j*d;  // > FixedRelations.lookang:13
        //}  // > FixedRelations.lookang:14
        //  else if (x>x1) {  // > FixedRelations.lookang:15
          //     x=x1+j*d;  // > FixedRelations.lookang:16
          //     r=x-x1; // r is distance from array point x to slit position x1  // > FixedRelations.lookang:17
          //      x2=(x-xc)*(x-xc);  // > FixedRelations.lookang:18
          //  // > FixedRelations.lookang:19
          //}  // > FixedRelations.lookang:20
        for (var k=0;k<nysum;k++) {  // > FixedRelations.lookang:21
          y=ymin+k*d;  // > FixedRelations.lookang:22
          if (x<x1) {  // > FixedRelations.lookang:23
            r=x-x1; // r is distance from array point x to slit position x1  // > FixedRelations.lookang:24
            zsum[j][k]=Math.sin(kw*r-omega*t)*n; // need n to compensate for the magnitude  // > FixedRelations.lookang:25
          }  // > FixedRelations.lookang:26
          else if (x>=x1) {  // > FixedRelations.lookang:27
            r=Math.sqrt((x-xc)*(x-xc)+(y-yc)*(y-yc));  // > FixedRelations.lookang:28
            zsum[j][k]+=Math.sin(kw*r-omega*t);  // > FixedRelations.lookang:29
          }  // > FixedRelations.lookang:30
        }  // > FixedRelations.lookang:31
      }  // > FixedRelations.lookang:32
    }  // > FixedRelations.lookang:33
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page 2") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(0.05);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (0.05===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(0.05);
      __eventSolver.setInternalStepSize(0.05);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new wave_singleslit2wee03_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.controlPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'controlPanel'
          _view.nsCheckBox.linkProperty("Checked",  function() { return nshow; }, function(_v) { nshow = _v; } ); // HtmlView Page linking property 'Checked' for element 'nsCheckBox'
          _view.nsSlider.linkProperty("Value",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'Value' for element 'nsSlider'
          _view.nsSlider.setAction("OnChange", function(_data,_info) {
  zmax=ns;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'nsSlider'
          _view.nsField.linkProperty("Value",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'Value' for element 'nsField'
          _view.nsField.setAction("OnChange", function(_data,_info) {
  ns = Math.max(1,ns);
  ns = Math.min(10,ns);
  zmax=ns;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'nsField'
          _view.nsField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'nsField'
          _view.wavelengthCheckBox.linkProperty("Checked",  function() { return wavelengtharrow; }, function(_v) { wavelengtharrow = _v; } ); // HtmlView Page linking property 'Checked' for element 'wavelengthCheckBox'
          _view.wavelengthSlider.linkProperty("Minimum",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'Minimum' for element 'wavelengthSlider'
          _view.wavelengthSlider.linkProperty("Maximum",  function() { return size*5; } ); // HtmlView Page linking property 'Maximum' for element 'wavelengthSlider'
          _view.wavelengthSlider.linkProperty("Value",  function() { return wavelength; }, function(_v) { wavelength = _v; } ); // HtmlView Page linking property 'Value' for element 'wavelengthSlider'
          _view.wavelengthSlider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'wavelengthSlider'
          _view.wavelengthField.linkProperty("Value",  function() { return wavelength; }, function(_v) { wavelength = _v; } ); // HtmlView Page linking property 'Value' for element 'wavelengthField'
          _view.wavelengthField.setAction("OnChange", function(_data,_info) {
  wavelength = Math.max(size,wavelength);
  wavelength = Math.min(size*5, wavelength);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'wavelengthField'
          _view.wavelengthField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'wavelengthField'
          _view.wCheckBox.linkProperty("Checked",  function() { return slitshow; }, function(_v) { slitshow = _v; } ); // HtmlView Page linking property 'Checked' for element 'wCheckBox'
          _view.wSlider.linkProperty("Minimum",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'Minimum' for element 'wSlider'
          _view.wSlider.linkProperty("Maximum",  function() { return size*10; } ); // HtmlView Page linking property 'Maximum' for element 'wSlider'
          _view.wSlider.linkProperty("Value",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'Value' for element 'wSlider'
          _view.wSlider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'wSlider'
          _view.wField.linkProperty("Value",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'Value' for element 'wField'
          _view.wField.setAction("OnChange", function(_data,_info) {
  w = Math.max(size, w);
  w = Math.min(size*10, w);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'wField'
          _view.wField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'wField'
          _view.controlPanel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'controlPanel2'
          _view.TSlider.linkProperty("Value",  function() { return T; }, function(_v) { T = _v; } ); // HtmlView Page linking property 'Value' for element 'TSlider'
          _view.TSlider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'TSlider'
          _view.TField.linkProperty("Value",  function() { return T; }, function(_v) { T = _v; } ); // HtmlView Page linking property 'Value' for element 'TField'
          _view.TField.setAction("OnChange", function(_data,_info) {
  T = Math.max(0.2, T);
  T = Math.min(5, T);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'TField'
          _view.TField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'TField'
          _view.autoscaleCheckBox.linkProperty("Checked",  function() { return autoscale; }, function(_v) { autoscale = _v; } ); // HtmlView Page linking property 'Checked' for element 'autoscaleCheckBox'
          _view.zmaxSlider.linkProperty("Maximum",  function() { return n*2; } ); // HtmlView Page linking property 'Maximum' for element 'zmaxSlider'
          _view.zmaxSlider.linkProperty("Value",  function() { return zmax; }, function(_v) { zmax = _v; } ); // HtmlView Page linking property 'Value' for element 'zmaxSlider'
          _view.zmaxSlider.linkProperty("Disabled",  function() { return autoscale; }, function(_v) { autoscale = _v; } ); // HtmlView Page linking property 'Disabled' for element 'zmaxSlider'
          _view.zmaxField.linkProperty("Value",  function() { return zmax; }, function(_v) { zmax = _v; } ); // HtmlView Page linking property 'Value' for element 'zmaxField'
          _view.zmaxField.linkProperty("Editable",  function() { return !autoscale; } ); // HtmlView Page linking property 'Editable' for element 'zmaxField'
          _view.zmaxField.setAction("OnChange", function(_data,_info) {
  zmax = Math.max(0.1, zmax);
  zmax = Math.min(n*2, zmax);

}); // HtmlView Page setting action 'OnChange' for element 'zmaxField'
          _view.zmaxField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'zmaxField'
          _view.typeSlider.linkProperty("Value",  function() { return type; }, function(_v) { type = _v; } ); // HtmlView Page linking property 'Value' for element 'typeSlider'
          _view.colormodeSlider.linkProperty("Value",  function() { return colormode; }, function(_v) { colormode = _v; } ); // HtmlView Page linking property 'Value' for element 'colormodeSlider'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.stepButton.setAction("OnPress", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnPress' for element 'stepButton'
          _view.stepButton.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.stepButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton'
          _view.resetButton.setAction("OnPress", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnPress' for element 'resetButton'
          _view.resetButton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.drawingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("BRMessage",  function() { return "t = " + _view._format(t, "0.0") + "s"; } ); // HtmlView Page linking property 'BRMessage' for element 'drawingPanel'
          _view.yc.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'yc'
          _view.yc.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'yc'
          _view.yc.linkProperty("X",  function() { return xc; }, function(_v) { xc = _v; } ); // HtmlView Page linking property 'X' for element 'yc'
          _view.yc.linkProperty("Y",  function() { return ycc; }, function(_v) { ycc = _v; } ); // HtmlView Page linking property 'Y' for element 'yc'
          _view.yc.linkProperty("Visibility",  function() { return nshow; }, function(_v) { nshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'yc'
          _view.yc.linkProperty("SizeY",  function() { return size/2; } ); // HtmlView Page linking property 'SizeY' for element 'yc'
          _view.topSegment.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'topSegment'
          _view.topSegment.linkProperty("Y",  function() { return w/2; } ); // HtmlView Page linking property 'Y' for element 'topSegment'
          _view.topSegment.linkProperty("SizeY",  function() { return ymax-w/2; } ); // HtmlView Page linking property 'SizeY' for element 'topSegment'
          _view.topSegment.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'topSegment'
          _view.bottomSegment.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'bottomSegment'
          _view.bottomSegment.linkProperty("Y",  function() { return -w/2; } ); // HtmlView Page linking property 'Y' for element 'bottomSegment'
          _view.bottomSegment.linkProperty("SizeY",  function() { return ymin+w/2; } ); // HtmlView Page linking property 'SizeY' for element 'bottomSegment'
          _view.bottomSegment.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'bottomSegment'
          _view.topwavelength.linkProperty("SizeX",  function() { return -wavelength; } ); // HtmlView Page linking property 'SizeX' for element 'topwavelength'
          _view.topwavelength.linkProperty("X",  function() { return x1arrow; }, function(_v) { x1arrow = _v; } ); // HtmlView Page linking property 'X' for element 'topwavelength'
          _view.topwavelength.linkProperty("Y",  function() { return y1arrow; }, function(_v) { y1arrow = _v; } ); // HtmlView Page linking property 'Y' for element 'topwavelength'
          _view.topwavelength.linkProperty("Visibility",  function() { return wavelengtharrow; }, function(_v) { wavelengtharrow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'topwavelength'
          _view.bottomwavelength.linkProperty("SizeX",  function() { return wavelength; }, function(_v) { wavelength = _v; } ); // HtmlView Page linking property 'SizeX' for element 'bottomwavelength'
          _view.bottomwavelength.linkProperty("X",  function() { return x1arrow-wavelength; } ); // HtmlView Page linking property 'X' for element 'bottomwavelength'
          _view.bottomwavelength.linkProperty("Y",  function() { return y1arrow; }, function(_v) { y1arrow = _v; } ); // HtmlView Page linking property 'Y' for element 'bottomwavelength'
          _view.bottomwavelength.linkProperty("Visibility",  function() { return wavelengtharrow; }, function(_v) { wavelengtharrow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'bottomwavelength'
          _view.topslitwidth.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'topslitwidth'
          _view.topslitwidth.linkProperty("Visibility",  function() { return slitshow; }, function(_v) { slitshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'topslitwidth'
          _view.topslitwidth.linkProperty("SizeY",  function() { return w/2; } ); // HtmlView Page linking property 'SizeY' for element 'topslitwidth'
          _view.bottomslitwidth.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'bottomslitwidth'
          _view.bottomslitwidth.linkProperty("Visibility",  function() { return slitshow; }, function(_v) { slitshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'bottomslitwidth'
          _view.bottomslitwidth.linkProperty("SizeY",  function() { return -w/2; } ); // HtmlView Page linking property 'SizeY' for element 'bottomslitwidth'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function wave_singleslit2wee03_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = wave_singleslit2wee03_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./wave_singleslit2wee03_Intro_1.html');

  return _view;
} // end of main function

function wave_singleslit2wee03_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"nsCheckBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nsCheckBox'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'nsCheckBox'
      .setProperty("Text","Prototype!! Not Working Yet") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'nsCheckBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"nsLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nsLabel'
      .setProperty("Background","RED") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'nsLabel'
      .setProperty("Text","n = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'nsLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"nsSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nsSlider'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'nsSlider'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'nsSlider'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'nsSlider'
      .setProperty("Background","RED") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'nsSlider'
      .setProperty("Tooltip","number of sources after the slit") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'nsSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"nsField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nsField'
      .setProperty("Width","2vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'nsField'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'nsField'
      .setProperty("Tooltip","number of sources after the slit") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'nsField'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"wavelengthCheckBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelengthCheckBox'
      .setProperty("Background","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wavelengthCheckBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wavelengthLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelengthLabel'
      .setProperty("Background","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wavelengthLabel'
      .setProperty("Tooltip","wavelength λ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wavelengthLabel'
      .setProperty("Foreground","WHITE") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'wavelengthLabel'
      .setProperty("Text","λ = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wavelengthLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"wavelengthSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelengthSlider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wavelengthSlider'
      .setProperty("Background","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wavelengthSlider'
      .setProperty("Tooltip","wavelength λ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wavelengthSlider'
      .setProperty("Foreground","WHITE") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'wavelengthSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"wavelengthField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelengthField'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'wavelengthField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wavelengthField'
      .setProperty("Tooltip","wavelength λ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wavelengthField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wavelengthUnitLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelengthUnitLabel'
      .setProperty("Background","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wavelengthUnitLabel'
      .setProperty("Foreground","WHITE") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'wavelengthUnitLabel'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wavelengthUnitLabel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"wCheckBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wCheckBox'
      .setProperty("Background","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wCheckBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wLabel'
      .setProperty("Background","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wLabel'
      .setProperty("Tooltip","slit width w, for simulation to be realistic, w <= λ*n") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wLabel'
      .setProperty("Text","w = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"wSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wSlider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wSlider'
      .setProperty("Background","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wSlider'
      .setProperty("Tooltip","slit width w, for simulation to be realistic, w <= λ*n") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"wField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wField'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'wField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wField'
      .setProperty("Tooltip","slit width w, for simulation to be realistic, w <= λ*n") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"wUnitLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wUnitLabel'
      .setProperty("Background","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wUnitLabel'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'wUnitLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel2'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"TLabel", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'TLabel'
      .setProperty("Tooltip","period of wave") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'TLabel'
      .setProperty("Text","T =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'TLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"TSlider", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'TSlider'
      .setProperty("Minimum",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'TSlider'
      .setProperty("Maximum",5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'TSlider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'TSlider'
      .setProperty("Tooltip","period of wave") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'TSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"TField", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'TField'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'TField'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'TField'
      .setProperty("Tooltip","period of wave") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'TField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"TUnitLabel", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'TUnitLabel'
      .setProperty("Tooltip","period of wave") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'TUnitLabel'
      .setProperty("Text","s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'TUnitLabel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"autoscaleCheckBox", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'autoscaleCheckBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"zmaxLabel", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'zmaxLabel'
      .setProperty("Text","zmax = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'zmaxLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"zmaxSlider", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'zmaxSlider'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'zmaxSlider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'zmaxSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"zmaxField", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'zmaxField'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'zmaxField'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'zmaxField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"typeLabel", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'typeLabel'
      .setProperty("Background","colormode") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'typeLabel'
      .setProperty("Tooltip","0 GRID, 1 INTERPOLATED; 2 CONTOUR, 3 SURFACE") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'typeLabel'
      .setProperty("Text","type = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'typeLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"typeSlider", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'typeSlider'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'typeSlider'
      .setProperty("Maximum",3) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'typeSlider'
      .setProperty("Background","colormode") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'typeSlider'
      .setProperty("Tooltip","0 GRID, 1 INTERPOLATED; 2 CONTOUR, 3 SURFACE") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'typeSlider'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"colormodeLabel", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'colormodeLabel'
      .setProperty("Text","colormode =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'colormodeLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"colormodeSlider", _view.controlPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'colormodeSlider'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'colormodeSlider'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'colormodeSlider'
      .setProperty("Background","colormode") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'colormodeSlider'
      .setProperty("Tooltip","0 SPECTRUM, 1 GREYSCALE; 2 DUALSHADE, 3 RED, 4 GREEN, 5 BLUE, 6 BLACK, 7 WIREFRAME, 8 NONRENDER, 9 REDBLUESHADE") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'colormodeSlider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel3", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel3'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel3'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.controlPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"feedback", _view.controlPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'feedback'
      .setProperty("Html","<a href=\"http://weelookang.blogspot.com/2011/10/ejs-open-source-single-slit-diffraction.html?m=1\"         target=\"_blank\">Feedback Google+</a>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'feedback'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displayPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'displayPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height","80vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("ShowCoordinates",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowCoordinates' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("GuttersColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'GuttersColor' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"yc", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yc'
      .setProperty("FillColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yc'
      .setProperty("LineColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yc'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'yc'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"topSegment", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topSegment'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'topSegment'
      .setProperty("LineColor","YELLOW") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'topSegment'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'topSegment'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"bottomSegment", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomSegment'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'bottomSegment'
      .setProperty("LineColor","YELLOW") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'bottomSegment'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'bottomSegment'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"topwavelength", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topwavelength'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'topwavelength'
      .setProperty("FillColor","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'topwavelength'
      .setProperty("LineColor","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'topwavelength'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'topwavelength'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'topwavelength'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"bottomwavelength", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomwavelength'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'bottomwavelength'
      .setProperty("FillColor","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bottomwavelength'
      .setProperty("LineColor","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'bottomwavelength'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'bottomwavelength'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'bottomwavelength'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"topslitwidth", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topslitwidth'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'topslitwidth'
      .setProperty("FillColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'topslitwidth'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'topslitwidth'
      .setProperty("LineColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'topslitwidth'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'topslitwidth'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"bottomslitwidth", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomslitwidth'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'bottomslitwidth'
      .setProperty("FillColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bottomslitwidth'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'bottomslitwidth'
      .setProperty("LineColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'bottomslitwidth'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'bottomslitwidth'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Ejs Open Source Single Slit Diffraction Model<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave_singleslit2wee03/Diffraction single slit/diffraction.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave_singleslit2wee03/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave_singleslit2wee03/1authorlookangphoto.png" />
 Fu-Kwun Hwang - Dept. of Physics,National Taiwan normal Univ. remixed by lookang (weelookang@gmail.com); lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Creative Commons Attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new wave_singleslit2wee03("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_11superposition/ejss_src_wave_singleslit2wee03/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
