<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Sound Spectrum Analyzer</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function sound_analyzer(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var audioCtx; // EjsS Model.Variables.Vars.audioCtx
  var analyser; // EjsS Model.Variables.Vars.analyser
  var dataArray; // EjsS Model.Variables.Vars.dataArray
  var dbArray; // EjsS Model.Variables.Vars.dbArray
  var freqArray; // EjsS Model.Variables.Vars.freqArray
  var peakArray; // EjsS Model.Variables.Vars.peakArray
  var fftSizeList; // EjsS Model.Variables.Vars.fftSizeList
  var maxDecibels; // EjsS Model.Variables.Vars.maxDecibels
  var minDecibels; // EjsS Model.Variables.Vars.minDecibels
  var maximumX; // EjsS Model.Variables.Vars.maximumX
  var baseFreq; // EjsS Model.Variables.Vars.baseFreq
  var barSize; // EjsS Model.Variables.Vars.barSize
  var peakShadow; // EjsS Model.Variables.Vars.peakShadow
  var areaShadow; // EjsS Model.Variables.Vars.areaShadow
  var xlabel; // EjsS Model.Variables.Vars.xlabel
  var ylabel; // EjsS Model.Variables.Vars.ylabel
  var tlabel; // EjsS Model.Variables.Vars.tlabel

  var font; // EjsS Model.Variables.lookang.font
  var fontaxis; // EjsS Model.Variables.lookang.fontaxis
  var fontmenu; // EjsS Model.Variables.lookang.fontmenu
  var elementinteracted; // EjsS Model.Variables.lookang.elementinteracted

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      audioCtx : audioCtx,
      analyser : analyser,
      dataArray : dataArray,
      dbArray : dbArray,
      freqArray : freqArray,
      peakArray : peakArray,
      fftSizeList : fftSizeList,
      maxDecibels : maxDecibels,
      minDecibels : minDecibels,
      maximumX : maximumX,
      baseFreq : baseFreq,
      barSize : barSize,
      peakShadow : peakShadow,
      areaShadow : areaShadow,
      xlabel : xlabel,
      ylabel : ylabel,
      tlabel : tlabel,
      font : font,
      fontaxis : fontaxis,
      fontmenu : fontmenu,
      elementinteracted : elementinteracted
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.audioCtx != "undefined") audioCtx = json.audioCtx;
    if(typeof json.analyser != "undefined") analyser = json.analyser;
    if(typeof json.dataArray != "undefined") dataArray = json.dataArray;
    if(typeof json.dbArray != "undefined") dbArray = json.dbArray;
    if(typeof json.freqArray != "undefined") freqArray = json.freqArray;
    if(typeof json.peakArray != "undefined") peakArray = json.peakArray;
    if(typeof json.fftSizeList != "undefined") fftSizeList = json.fftSizeList;
    if(typeof json.maxDecibels != "undefined") maxDecibels = json.maxDecibels;
    if(typeof json.minDecibels != "undefined") minDecibels = json.minDecibels;
    if(typeof json.maximumX != "undefined") maximumX = json.maximumX;
    if(typeof json.baseFreq != "undefined") baseFreq = json.baseFreq;
    if(typeof json.barSize != "undefined") barSize = json.barSize;
    if(typeof json.peakShadow != "undefined") peakShadow = json.peakShadow;
    if(typeof json.areaShadow != "undefined") areaShadow = json.areaShadow;
    if(typeof json.xlabel != "undefined") xlabel = json.xlabel;
    if(typeof json.ylabel != "undefined") ylabel = json.ylabel;
    if(typeof json.tlabel != "undefined") tlabel = json.tlabel;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontaxis != "undefined") fontaxis = json.fontaxis;
    if(typeof json.fontmenu != "undefined") fontmenu = json.fontmenu;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
  };

  _model._inputAndPublicParameters = ["audioCtx",  "analyser",  "dataArray",  "dbArray",  "freqArray",  "peakArray",  "fftSizeList",  "maxDecibels",  "minDecibels",  "maximumX",  "baseFreq",  "barSize",  "peakShadow",  "areaShadow",  "xlabel",  "ylabel",  "tlabel",  "font",  "fontaxis",  "fontmenu",  "elementinteracted"]; 

  _model._outputAndPublicParameters = ["audioCtx",  "analyser",  "dataArray",  "dbArray",  "freqArray",  "peakArray",  "fftSizeList",  "maxDecibels",  "minDecibels",  "maximumX",  "baseFreq",  "barSize",  "peakShadow",  "areaShadow",  "xlabel",  "ylabel",  "tlabel",  "font",  "fontaxis",  "fontmenu",  "elementinteracted"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Initialization"] = true;
    __pagesEnabled["evolution"] = true;
  });

  _model.addToReset(function() {
    dataArray = []; // EjsS Model.Variables.Vars.dataArray
    dbArray = []; // EjsS Model.Variables.Vars.dbArray
    freqArray = []; // EjsS Model.Variables.Vars.freqArray
    peakArray = []; // EjsS Model.Variables.Vars.peakArray
    fftSizeList = [1024, 2048, 4096, 8192, 16384, 32768]; // EjsS Model.Variables.Vars.fftSizeList
    maxDecibels = -10; // EjsS Model.Variables.Vars.maxDecibels
    minDecibels = -60; // EjsS Model.Variables.Vars.minDecibels
    peakShadow = true; // EjsS Model.Variables.Vars.peakShadow
    areaShadow = 10; // EjsS Model.Variables.Vars.areaShadow
    xlabel = []; // EjsS Model.Variables.Vars.xlabel
    ylabel = []; // EjsS Model.Variables.Vars.ylabel
    tlabel = []; // EjsS Model.Variables.Vars.tlabel
  });

  _model.addToReset(function() {
    font = "normal normal 2vw "; // EjsS Model.Variables.lookang.font
    fontaxis = "normal normal 1vw "; // EjsS Model.Variables.lookang.fontaxis
    fontmenu = "normal normal 2vw "; // EjsS Model.Variables.lookang.fontmenu
    elementinteracted = -1; // EjsS Model.Variables.lookang.elementinteracted
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function init_user_media () {  // > CustomCode.UserMedia:1
    navigator.getUserMedia = (navigator.getUserMedia ||  // > CustomCode.UserMedia:2
                            navigator.webkitGetUserMedia ||  // > CustomCode.UserMedia:3
                            navigator.mozGetUserMedia ||  // > CustomCode.UserMedia:4
                            navigator.msGetUserMedia);  // > CustomCode.UserMedia:5
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();  // > CustomCode.UserMedia:6
    //set up the analyser  // > CustomCode.UserMedia:7
    analyser = audioCtx.createAnalyser();  // > CustomCode.UserMedia:8
    analyser.minDecibels = minDecibels;   // > CustomCode.UserMedia:9
    analyser.maxDecibels = maxDecibels;  // > CustomCode.UserMedia:10
    analyser.smoothingTimeConstant = 0.85;  // > CustomCode.UserMedia:11
    // filter  // > CustomCode.UserMedia:12
    var distortion = audioCtx.createWaveShaper();  // > CustomCode.UserMedia:13
    var gainNode = audioCtx.createGain();  // > CustomCode.UserMedia:14
    var biquadFilter = audioCtx.createBiquadFilter();  // > CustomCode.UserMedia:15
    var convolver = audioCtx.createConvolver();  // > CustomCode.UserMedia:16
      // > CustomCode.UserMedia:17
    //main block for doing the audio recording  // > CustomCode.UserMedia:18
    if (navigator.getUserMedia) {  // > CustomCode.UserMedia:19
     console.log('getUserMedia supported.');  // > CustomCode.UserMedia:20
     navigator.getUserMedia (  // > CustomCode.UserMedia:21
        // constraints - only audio needed for this app  // > CustomCode.UserMedia:22
        { audio: true },  // > CustomCode.UserMedia:23
        // Success callback  // > CustomCode.UserMedia:24
        function(stream) {  // > CustomCode.UserMedia:25
           source = audioCtx.createMediaStreamSource(stream);  // > CustomCode.UserMedia:26
           source.connect(analyser);  // > CustomCode.UserMedia:27
           analyser.connect(distortion);  // > CustomCode.UserMedia:28
           distortion.connect(biquadFilter);  // > CustomCode.UserMedia:29
           biquadFilter.connect(convolver);  // > CustomCode.UserMedia:30
           convolver.connect(gainNode);  // > CustomCode.UserMedia:31
           gainNode.connect(audioCtx.destination);           // > CustomCode.UserMedia:32
        },  // > CustomCode.UserMedia:33
        // Error callback  // > CustomCode.UserMedia:34
        function(err) {  // > CustomCode.UserMedia:35
           console.log('The following gUM error occured: ' + err);  // > CustomCode.UserMedia:36
        }  // > CustomCode.UserMedia:37
     );  // > CustomCode.UserMedia:38
    } else {  // > CustomCode.UserMedia:39
     console.log('getUserMedia not supported on your browser!');  // > CustomCode.UserMedia:40
    }  // > CustomCode.UserMedia:41
  }  // > CustomCode.UserMedia:42

  function setFftSize (fftSize) {  // > CustomCode.fftSize:1
    // change fftSize in Analyzer  // > CustomCode.fftSize:2
    analyser.fftSize = fftSize;  // > CustomCode.fftSize:3
    // init arrays  // > CustomCode.fftSize:4
    var bufferLength = fftSize/2;  // > CustomCode.fftSize:5
    freqArray = new Array(bufferLength);  // > CustomCode.fftSize:6
    dbArray = new Array(bufferLength);  // > CustomCode.fftSize:7
    peakArray = new Array(bufferLength);  // > CustomCode.fftSize:8
    dataArray = new Uint8Array(bufferLength);  // > CustomCode.fftSize:9
    // base freq  // > CustomCode.fftSize:10
    baseFreq = audioCtx.sampleRate / fftSize;     // > CustomCode.fftSize:11
  }  // > CustomCode.fftSize:12

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Initialization"]) return;
    // init Audio Context and Analyzer  // > Initialization.Initialization:1
    init_user_media ();  // > Initialization.Initialization:2
    //maximumX = audioCtx.sampleRate / 2; // set maximum freq  // > Initialization.Initialization:3
    maximumX = 10000 ; //leong  // > Initialization.Initialization:4
    setFftSize(fftSizeList[0]);  // > Initialization.Initialization:5
    //setFftSize(fftSizeList[3]); // list 3 is 8192  // > Initialization.Initialization:6
    // set axisY for markers  // > Initialization.Initialization:7
    _view.trace.setMarkAxisY(minDecibels);  // > Initialization.Initialization:8
    _view.shadow.setMarkAxisY(minDecibels);  // > Initialization.Initialization:9
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["evolution"]) return;
    analyser.getByteFrequencyData(dataArray);  // > Evolution.evolution:1
    // values (db)  // > Evolution.evolution:2
    dbArray = Array.from(dataArray);  // > Evolution.evolution:3
    for (i=0; i<dataArray.length; i++) {  // > Evolution.evolution:4
      dbArray[i] = minDecibels + (dbArray[i] / 255) * Math.abs(minDecibels - maxDecibels);  // > Evolution.evolution:5
      freqArray[i] = i * baseFreq;  // > Evolution.evolution:6
    }  // > Evolution.evolution:7
    // peak shadow  // > Evolution.evolution:8
    for (i=0; i<dataArray.length; i++) {  // > Evolution.evolution:9
        // initialization  // > Evolution.evolution:10
        var pre = i-areaShadow/2;  // > Evolution.evolution:11
        if (pre < 0) pre = 0;  // > Evolution.evolution:12
        var end = i+areaShadow/2;  // > Evolution.evolution:13
        if (end > dataArray.length) end = dataArray.length; // lookang found a typo length typed worngly as lenght  // > Evolution.evolution:14
        var peak = minDecibels;  // > Evolution.evolution:15
        var peakj = -1;  // > Evolution.evolution:16
          // > Evolution.evolution:17
        // find peak in current values  // > Evolution.evolution:18
        for (var j=pre; j<end; j++) {  // > Evolution.evolution:19
          if(dbArray[j] > peak) {   // > Evolution.evolution:20
            peakj = j;  // > Evolution.evolution:21
            peak = dbArray[j];  // > Evolution.evolution:22
          }  // > Evolution.evolution:23
        }  // > Evolution.evolution:24
          // > Evolution.evolution:25
        // check if peak higher than previous one  // > Evolution.evolution:26
        for (var j=pre; j<end; j++) {  // > Evolution.evolution:27
          if(peakArray[j] > peak) {   // > Evolution.evolution:28
            peakj = j;  // > Evolution.evolution:29
            peak = peakArray[j];  // > Evolution.evolution:30
          }  // > Evolution.evolution:31
        }  // > Evolution.evolution:32
          // > Evolution.evolution:33
        // update peak array  // > Evolution.evolution:34
        if (peakj != -1) {        // > Evolution.evolution:35
          for (var j=pre; j<end; j++) {  // > Evolution.evolution:36
            if(j != peakj)   // > Evolution.evolution:37
              peakArray[j] = minDecibels; // mark as not peak  // > Evolution.evolution:38
            else   // > Evolution.evolution:39
              peakArray[j] = peak;  // > Evolution.evolution:40
          }          // > Evolution.evolution:41
        }  // > Evolution.evolution:42
    }  // > Evolution.evolution:43
    // update text values  // > Evolution.evolution:44
    for (var k=0; k<tlabel.length; k++) {  // > Evolution.evolution:45
      tlabel[k] = '';  // > Evolution.evolution:46
    }  // > Evolution.evolution:47
    var ct = 0;  // > Evolution.evolution:48
    for (var i=0; i<dataArray.length; i++) {  // > Evolution.evolution:49
       if(peakArray[i] > dbArray[i]) {  // > Evolution.evolution:50
          xlabel[ct] = freqArray[i];  // > Evolution.evolution:51
          ylabel[ct] = peakArray[i] + 1;  // > Evolution.evolution:52
          tlabel[ct] = Math.round(freqArray[i])+"Hz";  // > Evolution.evolution:53
          ct++;  // > Evolution.evolution:54
       }  // > Evolution.evolution:55
    }          // > Evolution.evolution:56
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new sound_analyzer_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.configPanel.linkProperty("Font",  function() { return fontmenu; }, function(_v) { fontmenu = _v; } ); // HtmlView Page linking property 'Font' for element 'configPanel'
          _view.fftSizeBox.linkProperty("Options",  function() { return fftSizeList; }, function(_v) { fftSizeList = _v; } ); // HtmlView Page linking property 'Options' for element 'fftSizeBox'
          _view.fftSizeBox.setAction("OnChange", function(_data,_info) {
  fftSize = _view.fftSizeBox.getSelectedOptions()[0];
  setFftSize(fftSize);

}); // HtmlView Page setting action 'OnChange' for element 'fftSizeBox'
          _view.fftSizeBox.linkProperty("Font",  function() { return fontmenu; }, function(_v) { fontmenu = _v; } ); // HtmlView Page linking property 'Font' for element 'fftSizeBox'
          _view.baseFreqValue.linkProperty("Value",  function() { return baseFreq; }, function(_v) { baseFreq = _v; } ); // HtmlView Page linking property 'Value' for element 'baseFreqValue'
          _view.baseFreqValue.linkProperty("Font",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'Font' for element 'baseFreqValue'
          _view.maxFreqValue.linkProperty("Value",  function() { return maximumX; }, function(_v) { maximumX = _v; } ); // HtmlView Page linking property 'Value' for element 'maxFreqValue'
          _view.maxFreqValue.linkProperty("Font",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'Font' for element 'maxFreqValue'
          _view.peakShadow.linkProperty("Checked",  function() { return peakShadow; }, function(_v) { peakShadow = _v; } ); // HtmlView Page linking property 'Checked' for element 'peakShadow'
          _view.peakShadow.linkProperty("Font",  function() { return fontmenu; }, function(_v) { fontmenu = _v; } ); // HtmlView Page linking property 'Font' for element 'peakShadow'
          _view.executionPanel.linkProperty("Font",  function() { return fontmenu; }, function(_v) { fontmenu = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("Font",  function() { return fontmenu; }, function(_v) { fontmenu = _v; } ); // HtmlView Page linking property 'Font' for element 'runPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontmenu; }, function(_v) { fontmenu = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.plottingPanel.linkProperty("AxisYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return "Sound Analyzer"+"\nMax Freq="+maximumX+ " Hz"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "baseFreq="+baseFreq.toFixed(1)+" Hz"; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return maxDecibels; }, function(_v) { maxDecibels = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDrag", function(_data,_info) {
  // fix axis Y
  _view.plottingPanel.setWorldYMin(minDecibels);
  _view.plottingPanel.setWorldYMax(maxDecibels);
  // control axis X
  var minX = _view.plottingPanel.getWorldXMin();
  if (minX < 0) {
    _view.plottingPanel.setWorldXMin(0);
  }
  maxX = _view.plottingPanel.getWorldXMax();

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return maximumX; }, function(_v) { maximumX = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return minDecibels; }, function(_v) { minDecibels = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnZoom", function(_data,_info) {
  // fix axis Y
  _view.plottingPanel.setWorldYMin(minDecibels);
  _view.plottingPanel.setWorldYMax(maxDecibels);
  // control axis X
  var minX = _view.plottingPanel.getWorldXMin();
  if (minX < 0) {
    _view.plottingPanel.setWorldXMin(0);
  }
  maxX = _view.plottingPanel.getWorldXMax();

}); // HtmlView Page setting action 'OnZoom' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'plottingPanel'
          _view.shadow.linkProperty("MarkSize",  function() { return [_view.plottingPanel.toPixelMod([baseFreq,0])[0],0]; } ); // HtmlView Page linking property 'MarkSize' for element 'shadow'
          _view.shadow.linkProperty("InputX",  function() { return freqArray; }, function(_v) { freqArray = _v; } ); // HtmlView Page linking property 'InputX' for element 'shadow'
          _view.shadow.linkProperty("Visibility",  function() { return peakShadow; }, function(_v) { peakShadow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shadow'
          _view.shadow.linkProperty("InputY",  function() { return peakArray; }, function(_v) { peakArray = _v; } ); // HtmlView Page linking property 'InputY' for element 'shadow'
          _view.trace.linkProperty("MarkSize",  function() { return [_view.plottingPanel.toPixelMod([baseFreq,0])[0],0]; } ); // HtmlView Page linking property 'MarkSize' for element 'trace'
          _view.trace.linkProperty("InputX",  function() { return freqArray; }, function(_v) { freqArray = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return dbArray; }, function(_v) { dbArray = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace'
          _view.labelSet.linkProperty("X",  function() { return xlabel; }, function(_v) { xlabel = _v; } ); // HtmlView Page linking property 'X' for element 'labelSet'
          _view.labelSet.linkProperty("Y",  function() { return ylabel; }, function(_v) { ylabel = _v; } ); // HtmlView Page linking property 'Y' for element 'labelSet'
          _view.labelSet.linkProperty("Text",  function() { return tlabel; }, function(_v) { tlabel = _v; } ); // HtmlView Page linking property 'Text' for element 'labelSet'
          _view.labelSet.linkProperty("Visibility",  function() { return peakShadow; }, function(_v) { peakShadow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'labelSet'
          _view.labelSet.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'labelSet'
          _view.labelSet.setAction("OnDrag", function(_data,_info) {
  //ylabel[elementinteracted]=_info._point[1];

}); // HtmlView Page setting action 'OnDrag' for element 'labelSet'
          _view.labelSet.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'labelSet'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function sound_analyzer_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = sound_analyzer_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function sound_analyzer_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Sound Analyzer</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"configPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'configPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'configPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"fftSizeLabel", _view.configPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fftSizeLabel'
      .setProperty("Tooltip","FFT size is 1024 and the Sampling Rate is 8192, the resolution of each spectral line will be: 8192 / 1024 = 8 Hz. Larger FFT sizes provide higher spectral resolution but take longer to compute.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fftSizeLabel'
      .setProperty("Text","FFT Size (Hz):") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'fftSizeLabel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"fftSizeBox", _view.configPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fftSizeBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"baseFreqLabel", _view.configPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'baseFreqLabel'
      .setProperty("Text","Base Freq. (Hz):") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'baseFreqLabel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'baseFreqLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"baseFreqValue", _view.configPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'baseFreqValue'
      .setProperty("Width","4em") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'baseFreqValue'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'baseFreqValue'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'baseFreqValue'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'baseFreqValue'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"maxFreqLabel", _view.configPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxFreqLabel'
      .setProperty("Text","Max Freq. (Hz):") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'maxFreqLabel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'maxFreqLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"maxFreqValue", _view.configPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxFreqValue'
      .setProperty("Width","6em") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'maxFreqValue'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'maxFreqValue'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'maxFreqValue'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'maxFreqValue'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"peakShadow", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'peakShadow'
      .setProperty("Text","Peak Shadow") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'peakShadow'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"padding":"5px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",512) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Title","Sound Visualizer") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",300) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("TitleY","Power (dB)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("TitleX","Frequency (Hz)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"shadow", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shadow'
      .setProperty("MarkFillColor","LightGrey") // EJsS HtmlView.HtmlView Page: setting property 'MarkFillColor' for element 'shadow'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shadow'
      .setProperty("MarkLineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'MarkLineColor' for element 'shadow'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shadow'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shadow'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'shadow'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'shadow'
      .setProperty("MarkType","AREA") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'shadow'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("MarkLineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'MarkLineWidth' for element 'trace'
      .setProperty("MarkFillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'MarkFillColor' for element 'trace'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'trace'
      .setProperty("MarkLineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'MarkLineColor' for element 'trace'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'trace'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'trace'
      .setProperty("MarkType","AREA") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'trace'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"labelSet", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'labelSet'
      .setProperty("NumberOfElements",20) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'labelSet'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'labelSet'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'labelSet'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Sound Spectrum Analyzer<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_14sound/ejss_model_sound_analyzer (1)/sound_analyzer/Screen Shot 2018-08-07 at 11.36.14 AM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_14sound/ejss_model_sound_analyzer (1)/01authorFelix_J_Garcia_Clemente.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_14sound/ejss_model_sound_analyzer (1)/01authorleongtzekwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_14sound/ejss_model_sound_analyzer (1)/01authorlookang50x50.png" />
 Felix J. Garcia Clemente; Tze Kwang Leong; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Felix J. Garcia Clemente; Tze Kwang Leong; Loo Kang Wee.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new sound_analyzer("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_14sound/ejss_model_sound_analyzer%20(1)/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
