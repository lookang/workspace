<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Kinematics Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function kinematics(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var showmotiondiagram; // EjsS Model.Variables.Var Table.showmotiondiagram
  var showdisplacementeverysec; // EjsS Model.Variables.Var Table.showdisplacementeverysec
  var clocktable; // EjsS Model.Variables.Var Table.clocktable
  var inputdropmenu; // EjsS Model.Variables.Var Table.inputdropmenu
  var font; // EjsS Model.Variables.Var Table.font
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var x; // EjsS Model.Variables.Var Table.x
  var xs; // EjsS Model.Variables.Var Table.xs
  var totaldistance; // EjsS Model.Variables.Var Table.totaldistance
  var y; // EjsS Model.Variables.Var Table.y
  var v; // EjsS Model.Variables.Var Table.v
  var vs; // EjsS Model.Variables.Var Table.vs
  var averagespeed; // EjsS Model.Variables.Var Table.averagespeed
  var a; // EjsS Model.Variables.Var Table.a
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var checkx; // EjsS Model.Variables.Var Table.checkx
  var checkv; // EjsS Model.Variables.Var Table.checkv
  var checka; // EjsS Model.Variables.Var Table.checka
  var booleanpause; // EjsS Model.Variables.Var Table.booleanpause
  var xdrag; // EjsS Model.Variables.Var Table.xdrag
  var vdrag; // EjsS Model.Variables.Var Table.vdrag
  var adrag; // EjsS Model.Variables.Var Table.adrag
  var memorycolory; // EjsS Model.Variables.Var Table.memorycolory
  var memorycolorv; // EjsS Model.Variables.Var Table.memorycolorv
  var memorycolora; // EjsS Model.Variables.Var Table.memorycolora

  var showcar2; // EjsS Model.Variables.secondcar.showcar2
  var x2; // EjsS Model.Variables.secondcar.x2
  var y2; // EjsS Model.Variables.secondcar.y2
  var v2; // EjsS Model.Variables.secondcar.v2
  var a2; // EjsS Model.Variables.secondcar.a2

  var numShadows; // EjsS Model.Variables.shadows.numShadows
  var colorv; // EjsS Model.Variables.shadows.colorv
  var xShadows; // EjsS Model.Variables.shadows.xShadows
  var xShadowstext; // EjsS Model.Variables.shadows.xShadowstext
  var dxShadows; // EjsS Model.Variables.shadows.dxShadows
  var xanddxShadows; // EjsS Model.Variables.shadows.xanddxShadows
  var yShadows; // EjsS Model.Variables.shadows.yShadows
  var vShadows; // EjsS Model.Variables.shadows.vShadows
  var vShadowsaverage; // EjsS Model.Variables.shadows.vShadowsaverage
  var vShadowstext; // EjsS Model.Variables.shadows.vShadowstext
  var aShadows; // EjsS Model.Variables.shadows.aShadows
  var tShadows; // EjsS Model.Variables.shadows.tShadows
  var shadowColor; // EjsS Model.Variables.shadows.shadowColor
  var shadowVis; // EjsS Model.Variables.shadows.shadowVis
  var counter; // EjsS Model.Variables.shadows.counter
  var next; // EjsS Model.Variables.shadows.next
  var prev; // EjsS Model.Variables.shadows.prev
  var xMarkVert; // EjsS Model.Variables.shadows.xMarkVert
  var yMarkVert; // EjsS Model.Variables.shadows.yMarkVert
  var xMarkHoriz; // EjsS Model.Variables.shadows.xMarkHoriz
  var yMarkHoriz; // EjsS Model.Variables.shadows.yMarkHoriz

  var sign; // EjsS Model.Variables.totaldistance.sign
  var n1; // EjsS Model.Variables.totaldistance.n1

  var vo; // EjsS Model.Variables.caluate.vo
  var texts; // EjsS Model.Variables.caluate.texts
  var textv; // EjsS Model.Variables.caluate.textv
  var textspeed; // EjsS Model.Variables.caluate.textspeed
  var texta; // EjsS Model.Variables.caluate.texta
  var xo; // EjsS Model.Variables.caluate.xo
  var isPaused; // EjsS Model.Variables.caluate.isPaused
  var ao; // EjsS Model.Variables.caluate.ao

  var graph; // EjsS Model.Variables.layout.graph
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Android; // EjsS Model.Variables.layout.Android
  var world; // EjsS Model.Variables.layout.world
  var mobilecode; // EjsS Model.Variables.layout.mobilecode
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var Widthv; // EjsS Model.Variables.layout.Widthv
  var Widtha; // EjsS Model.Variables.layout.Widtha
  var Height1; // EjsS Model.Variables.layout.Height1
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var Height2; // EjsS Model.Variables.layout.Height2
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var isAndroid; // EjsS Model.Variables.model.isAndroid
  var selectedmodel; // EjsS Model.Variables.model.selectedmodel
  var selectedmodelyv; // EjsS Model.Variables.model.selectedmodelyv
  var selectedmodelya; // EjsS Model.Variables.model.selectedmodelya
  var functionY; // EjsS Model.Variables.model.functionY
  var functionY2v; // EjsS Model.Variables.model.functionY2v
  var functionY2a; // EjsS Model.Variables.model.functionY2a
  var xmodel; // EjsS Model.Variables.model.xmodel
  var showmodel; // EjsS Model.Variables.model.showmodel
  var ymodels; // EjsS Model.Variables.model.ymodels
  var ymodelvy; // EjsS Model.Variables.model.ymodelvy
  var ymodelay; // EjsS Model.Variables.model.ymodelay
  var vymodel; // EjsS Model.Variables.model.vymodel
  var vymodels; // EjsS Model.Variables.model.vymodels
  var aymodel; // EjsS Model.Variables.model.aymodel
  var ymodelvyshow; // EjsS Model.Variables.model.ymodelvyshow
  var ymodelayshow; // EjsS Model.Variables.model.ymodelayshow
  var vymodelay; // EjsS Model.Variables.model.vymodelay

  var Fvst; // EjsS Model.Variables.force.Fvst
  var showforce; // EjsS Model.Variables.force.showforce
  var Widthf; // EjsS Model.Variables.force.Widthf
  var Widthe; // EjsS Model.Variables.force.Widthe
  var g; // EjsS Model.Variables.force.g
  var m; // EjsS Model.Variables.force.m
  var Nx; // EjsS Model.Variables.force.Nx
  var Ny; // EjsS Model.Variables.force.Ny
  var textN; // EjsS Model.Variables.force.textN
  var textW; // EjsS Model.Variables.force.textW
  var textT; // EjsS Model.Variables.force.textT

  var Evst; // EjsS Model.Variables.energy.Evst
  var showenergy; // EjsS Model.Variables.energy.showenergy
  var ke; // EjsS Model.Variables.energy.ke
  var pe; // EjsS Model.Variables.energy.pe
  var te; // EjsS Model.Variables.energy.te
  var keshow; // EjsS Model.Variables.energy.keshow
  var peshow; // EjsS Model.Variables.energy.peshow
  var teshow; // EjsS Model.Variables.energy.teshow

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      showmotiondiagram : showmotiondiagram,
      showdisplacementeverysec : showdisplacementeverysec,
      clocktable : clocktable,
      inputdropmenu : inputdropmenu,
      font : font,
      t : t,
      dt : dt,
      x : x,
      xs : xs,
      totaldistance : totaldistance,
      y : y,
      v : v,
      vs : vs,
      averagespeed : averagespeed,
      a : a,
      selected : selected,
      text : text,
      xmin : xmin,
      xmax : xmax,
      checkx : checkx,
      checkv : checkv,
      checka : checka,
      booleanpause : booleanpause,
      xdrag : xdrag,
      vdrag : vdrag,
      adrag : adrag,
      memorycolory : memorycolory,
      memorycolorv : memorycolorv,
      memorycolora : memorycolora,
      showcar2 : showcar2,
      x2 : x2,
      y2 : y2,
      v2 : v2,
      a2 : a2,
      numShadows : numShadows,
      colorv : colorv,
      xShadows : xShadows,
      xShadowstext : xShadowstext,
      dxShadows : dxShadows,
      xanddxShadows : xanddxShadows,
      yShadows : yShadows,
      vShadows : vShadows,
      vShadowsaverage : vShadowsaverage,
      vShadowstext : vShadowstext,
      aShadows : aShadows,
      tShadows : tShadows,
      shadowColor : shadowColor,
      shadowVis : shadowVis,
      counter : counter,
      next : next,
      prev : prev,
      xMarkVert : xMarkVert,
      yMarkVert : yMarkVert,
      xMarkHoriz : xMarkHoriz,
      yMarkHoriz : yMarkHoriz,
      sign : sign,
      n1 : n1,
      vo : vo,
      texts : texts,
      textv : textv,
      textspeed : textspeed,
      texta : texta,
      xo : xo,
      isPaused : isPaused,
      ao : ao,
      graph : graph,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Android : Android,
      world : world,
      mobilecode : mobilecode,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      Widthv : Widthv,
      Widtha : Widtha,
      Height1 : Height1,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      Height2 : Height2,
      disabledworld : disabledworld,
      disabled : disabled,
      isAndroid : isAndroid,
      selectedmodel : selectedmodel,
      selectedmodelyv : selectedmodelyv,
      selectedmodelya : selectedmodelya,
      functionY : functionY,
      functionY2v : functionY2v,
      functionY2a : functionY2a,
      xmodel : xmodel,
      showmodel : showmodel,
      ymodels : ymodels,
      ymodelvy : ymodelvy,
      ymodelay : ymodelay,
      vymodel : vymodel,
      vymodels : vymodels,
      aymodel : aymodel,
      ymodelvyshow : ymodelvyshow,
      ymodelayshow : ymodelayshow,
      vymodelay : vymodelay,
      Fvst : Fvst,
      showforce : showforce,
      Widthf : Widthf,
      Widthe : Widthe,
      g : g,
      m : m,
      Nx : Nx,
      Ny : Ny,
      textN : textN,
      textW : textW,
      textT : textT,
      Evst : Evst,
      showenergy : showenergy,
      ke : ke,
      pe : pe,
      te : te,
      keshow : keshow,
      peshow : peshow,
      teshow : teshow
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      showmotiondiagram : showmotiondiagram,
      showdisplacementeverysec : showdisplacementeverysec,
      clocktable : clocktable,
      inputdropmenu : inputdropmenu,
      font : font,
      t : t,
      dt : dt,
      x : x,
      xs : xs,
      totaldistance : totaldistance,
      y : y,
      v : v,
      vs : vs,
      averagespeed : averagespeed,
      a : a,
      selected : selected,
      text : text,
      xmin : xmin,
      xmax : xmax,
      checkx : checkx,
      checkv : checkv,
      checka : checka,
      booleanpause : booleanpause,
      xdrag : xdrag,
      vdrag : vdrag,
      adrag : adrag,
      memorycolory : memorycolory,
      memorycolorv : memorycolorv,
      memorycolora : memorycolora,
      showcar2 : showcar2,
      x2 : x2,
      y2 : y2,
      v2 : v2,
      a2 : a2,
      numShadows : numShadows,
      colorv : colorv,
      xShadows : xShadows,
      xShadowstext : xShadowstext,
      dxShadows : dxShadows,
      xanddxShadows : xanddxShadows,
      yShadows : yShadows,
      vShadows : vShadows,
      vShadowsaverage : vShadowsaverage,
      vShadowstext : vShadowstext,
      aShadows : aShadows,
      tShadows : tShadows,
      shadowColor : shadowColor,
      shadowVis : shadowVis,
      counter : counter,
      next : next,
      prev : prev,
      xMarkVert : xMarkVert,
      yMarkVert : yMarkVert,
      xMarkHoriz : xMarkHoriz,
      yMarkHoriz : yMarkHoriz,
      sign : sign,
      n1 : n1,
      vo : vo,
      texts : texts,
      textv : textv,
      textspeed : textspeed,
      texta : texta,
      xo : xo,
      isPaused : isPaused,
      ao : ao,
      graph : graph,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Android : Android,
      world : world,
      mobilecode : mobilecode,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      Widthv : Widthv,
      Widtha : Widtha,
      Height1 : Height1,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      Height2 : Height2,
      disabledworld : disabledworld,
      disabled : disabled,
      isAndroid : isAndroid,
      selectedmodel : selectedmodel,
      selectedmodelyv : selectedmodelyv,
      selectedmodelya : selectedmodelya,
      functionY : functionY,
      functionY2v : functionY2v,
      functionY2a : functionY2a,
      xmodel : xmodel,
      showmodel : showmodel,
      ymodels : ymodels,
      ymodelvy : ymodelvy,
      ymodelay : ymodelay,
      vymodel : vymodel,
      vymodels : vymodels,
      aymodel : aymodel,
      ymodelvyshow : ymodelvyshow,
      ymodelayshow : ymodelayshow,
      vymodelay : vymodelay,
      Fvst : Fvst,
      showforce : showforce,
      Widthf : Widthf,
      Widthe : Widthe,
      g : g,
      m : m,
      Nx : Nx,
      Ny : Ny,
      textN : textN,
      textW : textW,
      textT : textT,
      Evst : Evst,
      showenergy : showenergy,
      ke : ke,
      pe : pe,
      te : te,
      keshow : keshow,
      peshow : peshow,
      teshow : teshow
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.showmotiondiagram != "undefined") showmotiondiagram = json.showmotiondiagram;
    if(typeof json.showdisplacementeverysec != "undefined") showdisplacementeverysec = json.showdisplacementeverysec;
    if(typeof json.clocktable != "undefined") clocktable = json.clocktable;
    if(typeof json.inputdropmenu != "undefined") inputdropmenu = json.inputdropmenu;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.totaldistance != "undefined") totaldistance = json.totaldistance;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.vs != "undefined") vs = json.vs;
    if(typeof json.averagespeed != "undefined") averagespeed = json.averagespeed;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.checkx != "undefined") checkx = json.checkx;
    if(typeof json.checkv != "undefined") checkv = json.checkv;
    if(typeof json.checka != "undefined") checka = json.checka;
    if(typeof json.booleanpause != "undefined") booleanpause = json.booleanpause;
    if(typeof json.xdrag != "undefined") xdrag = json.xdrag;
    if(typeof json.vdrag != "undefined") vdrag = json.vdrag;
    if(typeof json.adrag != "undefined") adrag = json.adrag;
    if(typeof json.memorycolory != "undefined") memorycolory = json.memorycolory;
    if(typeof json.memorycolorv != "undefined") memorycolorv = json.memorycolorv;
    if(typeof json.memorycolora != "undefined") memorycolora = json.memorycolora;
    if(typeof json.showcar2 != "undefined") showcar2 = json.showcar2;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.v2 != "undefined") v2 = json.v2;
    if(typeof json.a2 != "undefined") a2 = json.a2;
    if(typeof json.numShadows != "undefined") numShadows = json.numShadows;
    if(typeof json.colorv != "undefined") colorv = json.colorv;
    if(typeof json.xShadows != "undefined") xShadows = json.xShadows;
    if(typeof json.xShadowstext != "undefined") xShadowstext = json.xShadowstext;
    if(typeof json.dxShadows != "undefined") dxShadows = json.dxShadows;
    if(typeof json.xanddxShadows != "undefined") xanddxShadows = json.xanddxShadows;
    if(typeof json.yShadows != "undefined") yShadows = json.yShadows;
    if(typeof json.vShadows != "undefined") vShadows = json.vShadows;
    if(typeof json.vShadowsaverage != "undefined") vShadowsaverage = json.vShadowsaverage;
    if(typeof json.vShadowstext != "undefined") vShadowstext = json.vShadowstext;
    if(typeof json.aShadows != "undefined") aShadows = json.aShadows;
    if(typeof json.tShadows != "undefined") tShadows = json.tShadows;
    if(typeof json.shadowColor != "undefined") shadowColor = json.shadowColor;
    if(typeof json.shadowVis != "undefined") shadowVis = json.shadowVis;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.next != "undefined") next = json.next;
    if(typeof json.prev != "undefined") prev = json.prev;
    if(typeof json.xMarkVert != "undefined") xMarkVert = json.xMarkVert;
    if(typeof json.yMarkVert != "undefined") yMarkVert = json.yMarkVert;
    if(typeof json.xMarkHoriz != "undefined") xMarkHoriz = json.xMarkHoriz;
    if(typeof json.yMarkHoriz != "undefined") yMarkHoriz = json.yMarkHoriz;
    if(typeof json.sign != "undefined") sign = json.sign;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.vo != "undefined") vo = json.vo;
    if(typeof json.texts != "undefined") texts = json.texts;
    if(typeof json.textv != "undefined") textv = json.textv;
    if(typeof json.textspeed != "undefined") textspeed = json.textspeed;
    if(typeof json.texta != "undefined") texta = json.texta;
    if(typeof json.xo != "undefined") xo = json.xo;
    if(typeof json.isPaused != "undefined") isPaused = json.isPaused;
    if(typeof json.ao != "undefined") ao = json.ao;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.mobilecode != "undefined") mobilecode = json.mobilecode;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Widthv != "undefined") Widthv = json.Widthv;
    if(typeof json.Widtha != "undefined") Widtha = json.Widtha;
    if(typeof json.Height1 != "undefined") Height1 = json.Height1;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.Height2 != "undefined") Height2 = json.Height2;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.selectedmodelyv != "undefined") selectedmodelyv = json.selectedmodelyv;
    if(typeof json.selectedmodelya != "undefined") selectedmodelya = json.selectedmodelya;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.functionY2v != "undefined") functionY2v = json.functionY2v;
    if(typeof json.functionY2a != "undefined") functionY2a = json.functionY2a;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.ymodels != "undefined") ymodels = json.ymodels;
    if(typeof json.ymodelvy != "undefined") ymodelvy = json.ymodelvy;
    if(typeof json.ymodelay != "undefined") ymodelay = json.ymodelay;
    if(typeof json.vymodel != "undefined") vymodel = json.vymodel;
    if(typeof json.vymodels != "undefined") vymodels = json.vymodels;
    if(typeof json.aymodel != "undefined") aymodel = json.aymodel;
    if(typeof json.ymodelvyshow != "undefined") ymodelvyshow = json.ymodelvyshow;
    if(typeof json.ymodelayshow != "undefined") ymodelayshow = json.ymodelayshow;
    if(typeof json.vymodelay != "undefined") vymodelay = json.vymodelay;
    if(typeof json.Fvst != "undefined") Fvst = json.Fvst;
    if(typeof json.showforce != "undefined") showforce = json.showforce;
    if(typeof json.Widthf != "undefined") Widthf = json.Widthf;
    if(typeof json.Widthe != "undefined") Widthe = json.Widthe;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.Nx != "undefined") Nx = json.Nx;
    if(typeof json.Ny != "undefined") Ny = json.Ny;
    if(typeof json.textN != "undefined") textN = json.textN;
    if(typeof json.textW != "undefined") textW = json.textW;
    if(typeof json.textT != "undefined") textT = json.textT;
    if(typeof json.Evst != "undefined") Evst = json.Evst;
    if(typeof json.showenergy != "undefined") showenergy = json.showenergy;
    if(typeof json.ke != "undefined") ke = json.ke;
    if(typeof json.pe != "undefined") pe = json.pe;
    if(typeof json.te != "undefined") te = json.te;
    if(typeof json.keshow != "undefined") keshow = json.keshow;
    if(typeof json.peshow != "undefined") peshow = json.peshow;
    if(typeof json.teshow != "undefined") teshow = json.teshow;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.showmotiondiagram != "undefined") showmotiondiagram = json.showmotiondiagram;
    if(typeof json.showdisplacementeverysec != "undefined") showdisplacementeverysec = json.showdisplacementeverysec;
    if(typeof json.clocktable != "undefined") clocktable = json.clocktable;
    if(typeof json.inputdropmenu != "undefined") inputdropmenu = json.inputdropmenu;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.totaldistance != "undefined") totaldistance = json.totaldistance;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.vs != "undefined") vs = json.vs;
    if(typeof json.averagespeed != "undefined") averagespeed = json.averagespeed;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.checkx != "undefined") checkx = json.checkx;
    if(typeof json.checkv != "undefined") checkv = json.checkv;
    if(typeof json.checka != "undefined") checka = json.checka;
    if(typeof json.booleanpause != "undefined") booleanpause = json.booleanpause;
    if(typeof json.xdrag != "undefined") xdrag = json.xdrag;
    if(typeof json.vdrag != "undefined") vdrag = json.vdrag;
    if(typeof json.adrag != "undefined") adrag = json.adrag;
    if(typeof json.memorycolory != "undefined") memorycolory = json.memorycolory;
    if(typeof json.memorycolorv != "undefined") memorycolorv = json.memorycolorv;
    if(typeof json.memorycolora != "undefined") memorycolora = json.memorycolora;
    if(typeof json.showcar2 != "undefined") showcar2 = json.showcar2;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.v2 != "undefined") v2 = json.v2;
    if(typeof json.a2 != "undefined") a2 = json.a2;
    if(typeof json.numShadows != "undefined") numShadows = json.numShadows;
    if(typeof json.colorv != "undefined") colorv = json.colorv;
    if(typeof json.xShadows != "undefined") xShadows = json.xShadows;
    if(typeof json.xShadowstext != "undefined") xShadowstext = json.xShadowstext;
    if(typeof json.dxShadows != "undefined") dxShadows = json.dxShadows;
    if(typeof json.xanddxShadows != "undefined") xanddxShadows = json.xanddxShadows;
    if(typeof json.yShadows != "undefined") yShadows = json.yShadows;
    if(typeof json.vShadows != "undefined") vShadows = json.vShadows;
    if(typeof json.vShadowsaverage != "undefined") vShadowsaverage = json.vShadowsaverage;
    if(typeof json.vShadowstext != "undefined") vShadowstext = json.vShadowstext;
    if(typeof json.aShadows != "undefined") aShadows = json.aShadows;
    if(typeof json.tShadows != "undefined") tShadows = json.tShadows;
    if(typeof json.shadowColor != "undefined") shadowColor = json.shadowColor;
    if(typeof json.shadowVis != "undefined") shadowVis = json.shadowVis;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.next != "undefined") next = json.next;
    if(typeof json.prev != "undefined") prev = json.prev;
    if(typeof json.xMarkVert != "undefined") xMarkVert = json.xMarkVert;
    if(typeof json.yMarkVert != "undefined") yMarkVert = json.yMarkVert;
    if(typeof json.xMarkHoriz != "undefined") xMarkHoriz = json.xMarkHoriz;
    if(typeof json.yMarkHoriz != "undefined") yMarkHoriz = json.yMarkHoriz;
    if(typeof json.sign != "undefined") sign = json.sign;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.vo != "undefined") vo = json.vo;
    if(typeof json.texts != "undefined") texts = json.texts;
    if(typeof json.textv != "undefined") textv = json.textv;
    if(typeof json.textspeed != "undefined") textspeed = json.textspeed;
    if(typeof json.texta != "undefined") texta = json.texta;
    if(typeof json.xo != "undefined") xo = json.xo;
    if(typeof json.isPaused != "undefined") isPaused = json.isPaused;
    if(typeof json.ao != "undefined") ao = json.ao;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.mobilecode != "undefined") mobilecode = json.mobilecode;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Widthv != "undefined") Widthv = json.Widthv;
    if(typeof json.Widtha != "undefined") Widtha = json.Widtha;
    if(typeof json.Height1 != "undefined") Height1 = json.Height1;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.Height2 != "undefined") Height2 = json.Height2;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.selectedmodelyv != "undefined") selectedmodelyv = json.selectedmodelyv;
    if(typeof json.selectedmodelya != "undefined") selectedmodelya = json.selectedmodelya;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.functionY2v != "undefined") functionY2v = json.functionY2v;
    if(typeof json.functionY2a != "undefined") functionY2a = json.functionY2a;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.ymodels != "undefined") ymodels = json.ymodels;
    if(typeof json.ymodelvy != "undefined") ymodelvy = json.ymodelvy;
    if(typeof json.ymodelay != "undefined") ymodelay = json.ymodelay;
    if(typeof json.vymodel != "undefined") vymodel = json.vymodel;
    if(typeof json.vymodels != "undefined") vymodels = json.vymodels;
    if(typeof json.aymodel != "undefined") aymodel = json.aymodel;
    if(typeof json.ymodelvyshow != "undefined") ymodelvyshow = json.ymodelvyshow;
    if(typeof json.ymodelayshow != "undefined") ymodelayshow = json.ymodelayshow;
    if(typeof json.vymodelay != "undefined") vymodelay = json.vymodelay;
    if(typeof json.Fvst != "undefined") Fvst = json.Fvst;
    if(typeof json.showforce != "undefined") showforce = json.showforce;
    if(typeof json.Widthf != "undefined") Widthf = json.Widthf;
    if(typeof json.Widthe != "undefined") Widthe = json.Widthe;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.Nx != "undefined") Nx = json.Nx;
    if(typeof json.Ny != "undefined") Ny = json.Ny;
    if(typeof json.textN != "undefined") textN = json.textN;
    if(typeof json.textW != "undefined") textW = json.textW;
    if(typeof json.textT != "undefined") textT = json.textT;
    if(typeof json.Evst != "undefined") Evst = json.Evst;
    if(typeof json.showenergy != "undefined") showenergy = json.showenergy;
    if(typeof json.ke != "undefined") ke = json.ke;
    if(typeof json.pe != "undefined") pe = json.pe;
    if(typeof json.te != "undefined") te = json.te;
    if(typeof json.keshow != "undefined") keshow = json.keshow;
    if(typeof json.peshow != "undefined") peshow = json.peshow;
    if(typeof json.teshow != "undefined") teshow = json.teshow;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["color"] = true;
    __pagesEnabled["zoom"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["menufa=orcereset"] = true;
    __pagesEnabled["shadows"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["svgradial"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = false;
    __pagesEnabled["Shadows"] = true;
    __pagesEnabled["stopleft"] = true;
    __pagesEnabled["stopright"] = true;
    __pagesEnabled["concepttest1"] = true;
    __pagesEnabled["concepttest2"] = true;
    __pagesEnabled["concepttest61"] = true;
    __pagesEnabled["concepttest61 2"] = true;
    __pagesEnabled["concepttest61 2 2"] = true;
    __pagesEnabled["concepttest61 3"] = true;
    __pagesEnabled["concepttest61 2 3"] = true;
    __pagesEnabled["concepttest61 2 2 2"] = true;
    __pagesEnabled["concepttest63"] = true;
    __pagesEnabled["concepttest63 2"] = true;
    __pagesEnabled["concepttest63 2 2"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["forces"] = true;
    __pagesEnabled["energy"] = true;
    __pagesEnabled["model"] = true;
    __pagesEnabled["max"] = true;
    __pagesEnabled["shadows"] = true;
    __pagesEnabled["totaldistance"] = true;
    __pagesEnabled["calculatex"] = true;
    __pagesEnabled["calculatev"] = true;
    __pagesEnabled["calculatea"] = true;
    __pagesEnabled["storedvaluesxva"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["table"] = true;
  });

  _model.addToReset(function() {
    clocktable = false; // EjsS Model.Variables.Var Table.clocktable
    inputdropmenu = true; // EjsS Model.Variables.Var Table.inputdropmenu
    font = "normal normal 1.5vw "; // EjsS Model.Variables.Var Table.font
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    x = 0; // EjsS Model.Variables.Var Table.x
    xs = x; // EjsS Model.Variables.Var Table.xs
    totaldistance = 0; // EjsS Model.Variables.Var Table.totaldistance
    y = 0; // EjsS Model.Variables.Var Table.y
    v = 0; // EjsS Model.Variables.Var Table.v
    vs = v; // EjsS Model.Variables.Var Table.vs
    a = 0; // EjsS Model.Variables.Var Table.a
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "uniform_motion_=_1";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "select scenario from menu and \n click play"; // EjsS Model.Variables.Var Table.text
    xmin = -20; // EjsS Model.Variables.Var Table.xmin
    xmax = 20; // EjsS Model.Variables.Var Table.xmax
    checkx = true; // EjsS Model.Variables.Var Table.checkx
    memorycolory = 2; // EjsS Model.Variables.Var Table.memorycolory
    memorycolorv = 5; // EjsS Model.Variables.Var Table.memorycolorv
    memorycolora = 0; // EjsS Model.Variables.Var Table.memorycolora
  });

  _model.addToReset(function() {
    x2 = 0; // EjsS Model.Variables.secondcar.x2
    y2 = 0; // EjsS Model.Variables.secondcar.y2
    v2 = 0; // EjsS Model.Variables.secondcar.v2
    a2 = 0; // EjsS Model.Variables.secondcar.a2
  });

  _model.addToReset(function() {
    numShadows = 100; // EjsS Model.Variables.shadows.numShadows
    colorv = new Array(numShadows); // EjsS Model.Variables.shadows.colorv
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.colorv
        colorv[_i0] = "rgba(255,255,255,1)";  // EjsS Model.Variables.shadows.colorv
      }
    }());
    xShadows = new Array(numShadows); // EjsS Model.Variables.shadows.xShadows
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.xShadows
        xShadows[_i0] = x;  // EjsS Model.Variables.shadows.xShadows
      }
    }());
    xShadowstext = new Array(numShadows); // EjsS Model.Variables.shadows.xShadowstext
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.xShadowstext
        xShadowstext[_i0] = "";  // EjsS Model.Variables.shadows.xShadowstext
      }
    }());
    dxShadows = new Array(numShadows); // EjsS Model.Variables.shadows.dxShadows
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.dxShadows
        dxShadows[_i0] = 0;  // EjsS Model.Variables.shadows.dxShadows
      }
    }());
    xanddxShadows = new Array(numShadows); // EjsS Model.Variables.shadows.xanddxShadows
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.xanddxShadows
        xanddxShadows[_i0] = -100;  // EjsS Model.Variables.shadows.xanddxShadows
      }
    }());
    yShadows = new Array(numShadows); // EjsS Model.Variables.shadows.yShadows
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.yShadows
        yShadows[_i0] = 2;  // EjsS Model.Variables.shadows.yShadows
      }
    }());
    vShadows = new Array(numShadows); // EjsS Model.Variables.shadows.vShadows
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.vShadows
        vShadows[_i0] = v;  // EjsS Model.Variables.shadows.vShadows
      }
    }());
    vShadowsaverage = new Array(numShadows); // EjsS Model.Variables.shadows.vShadowsaverage
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.vShadowsaverage
        vShadowsaverage[_i0] = v;  // EjsS Model.Variables.shadows.vShadowsaverage
      }
    }());
    vShadowstext = new Array(numShadows); // EjsS Model.Variables.shadows.vShadowstext
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.vShadowstext
        vShadowstext[_i0] = "";  // EjsS Model.Variables.shadows.vShadowstext
      }
    }());
    aShadows = new Array(numShadows); // EjsS Model.Variables.shadows.aShadows
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.aShadows
        aShadows[_i0] = a;  // EjsS Model.Variables.shadows.aShadows
      }
    }());
    tShadows = new Array(numShadows); // EjsS Model.Variables.shadows.tShadows
    (function () {
      var _i0;
      for (_i0=0; _i0<numShadows; _i0+=1) {  // EjsS Model.Variables.shadows.tShadows
        tShadows[_i0] = t;  // EjsS Model.Variables.shadows.tShadows
      }
    }());
    shadowColor = "rgba(0,0,255,100)"; // EjsS Model.Variables.shadows.shadowColor
    shadowVis = new Array(numShadows); // EjsS Model.Variables.shadows.shadowVis
    counter = 1; // EjsS Model.Variables.shadows.counter
    next = 1.0; // EjsS Model.Variables.shadows.next
    prev = -0.05; // EjsS Model.Variables.shadows.prev
    xMarkVert = new Array(numShadows); // EjsS Model.Variables.shadows.xMarkVert
    yMarkVert = new Array(numShadows); // EjsS Model.Variables.shadows.yMarkVert
    xMarkHoriz = new Array(numShadows); // EjsS Model.Variables.shadows.xMarkHoriz
    yMarkHoriz = new Array(numShadows); // EjsS Model.Variables.shadows.yMarkHoriz
  });

  _model.addToReset(function() {
    sign = 1; // EjsS Model.Variables.totaldistance.sign
    n1 = 0; // EjsS Model.Variables.totaldistance.n1
  });

  _model.addToReset(function() {
    vo = v; // EjsS Model.Variables.caluate.vo
    texts = ""; // EjsS Model.Variables.caluate.texts
    textv = ""; // EjsS Model.Variables.caluate.textv
    textspeed = ""; // EjsS Model.Variables.caluate.textspeed
    texta = ""; // EjsS Model.Variables.caluate.texta
    xo = x; // EjsS Model.Variables.caluate.xo
    ao = a; // EjsS Model.Variables.caluate.ao
  });

  _model.addToReset(function() {
    graph = true; // EjsS Model.Variables.layout.graph
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    mobilecode = (!_isMobile)?"0":"100%"; // EjsS Model.Variables.layout.mobilecode
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Height1 = "100%"; // EjsS Model.Variables.layout.Height1
    Height2 = "100%"; // EjsS Model.Variables.layout.Height2
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.model.isAndroid
    selectedmodel = new Array(1); // EjsS Model.Variables.model.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.model.selectedmodel
        selectedmodel[_i0] = "0";  // EjsS Model.Variables.model.selectedmodel
      }
    }());
    selectedmodelyv = new Array(1); // EjsS Model.Variables.model.selectedmodelyv
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.model.selectedmodelyv
        selectedmodelyv[_i0] = "0";  // EjsS Model.Variables.model.selectedmodelyv
      }
    }());
    selectedmodelya = new Array(1); // EjsS Model.Variables.model.selectedmodelya
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.model.selectedmodelya
        selectedmodelya[_i0] = "0";  // EjsS Model.Variables.model.selectedmodelya
      }
    }());
    functionY = "0"; // EjsS Model.Variables.model.functionY
    functionY2v = "0"; // EjsS Model.Variables.model.functionY2v
    functionY2a = "0"; // EjsS Model.Variables.model.functionY2a
    ymodels = xmodel; // EjsS Model.Variables.model.ymodels
    ymodelvy = 0; // EjsS Model.Variables.model.ymodelvy
    ymodelay = 0; // EjsS Model.Variables.model.ymodelay
    vymodel = v; // EjsS Model.Variables.model.vymodel
    vymodels = vymodel; // EjsS Model.Variables.model.vymodels
    aymodel = a; // EjsS Model.Variables.model.aymodel
    ymodelvyshow = false; // EjsS Model.Variables.model.ymodelvyshow
    ymodelayshow = false; // EjsS Model.Variables.model.ymodelayshow
    vymodelay = 0; // EjsS Model.Variables.model.vymodelay
  });

  _model.addToReset(function() {
    g = 9.81; // EjsS Model.Variables.force.g
    m = 1.700; // EjsS Model.Variables.force.m
    Nx = 0; // EjsS Model.Variables.force.Nx
    Ny = m*g; // EjsS Model.Variables.force.Ny
    textN = "N = " +(Ny*1000).toExponential(3)+ " N"; // EjsS Model.Variables.force.textN
    textW = "mg = " +(m*g*1000).toExponential(3)+ " N"; // EjsS Model.Variables.force.textW
    textT = "P = " +(m*a*1000).toExponential(3)+ " N"; // EjsS Model.Variables.force.textT
  });

  _model.addToReset(function() {
    ke = 0; // EjsS Model.Variables.energy.ke
    pe = 0; // EjsS Model.Variables.energy.pe
    te = 0; // EjsS Model.Variables.energy.te
    keshow = true; // EjsS Model.Variables.energy.keshow
    peshow = true; // EjsS Model.Variables.energy.peshow
    teshow = true; // EjsS Model.Variables.energy.teshow
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(5);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function storedata () {  // > CustomCode.storedata:1
    _view.plotTrail2.newSegment();  // > CustomCode.storedata:2
  _view.plotTrail22.newSegment();  // > CustomCode.storedata:3
  _view.plotTrail23.newSegment();  // > CustomCode.storedata:4
  memorycolory=memorycolory+1;  // > CustomCode.storedata:5
  memorycolorv=memorycolorv+1;  // > CustomCode.storedata:6
  memorycolora=memorycolora+1;  // > CustomCode.storedata:7
  t=0;  // > CustomCode.storedata:8
  x=xs;  // > CustomCode.storedata:9
  v=vs;  // > CustomCode.storedata:10
   counter=1;  // > CustomCode.storedata:11
   next=1;  // > CustomCode.storedata:12
  _initialize();  // > CustomCode.storedata:13
  }  // > CustomCode.storedata:14

  function changeOrientation() {  // > CustomCode.chengeOrientation:1
  var k =0.9;  // > CustomCode.chengeOrientation:2
  var kapple=0.85;  // > CustomCode.chengeOrientation:3
  //if(typeof parent.device != 'undefined')  // > CustomCode.chengeOrientation:4
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.chengeOrientation:5
  //else  // > CustomCode.chengeOrientation:6
  //  _view.mytext.setText("nada:");  // > CustomCode.chengeOrientation:7
  // check platform for Apps  // > CustomCode.chengeOrientation:8
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.chengeOrientation:9
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.chengeOrientation:10
  // check platform for web browsers  // > CustomCode.chengeOrientation:11
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.chengeOrientation:12
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.chengeOrientation:13
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.chengeOrientation:14
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.chengeOrientation:15
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.chengeOrientation:16
  switch (window.orientation) {  // > CustomCode.chengeOrientation:17
    case 0:  // > CustomCode.chengeOrientation:18
    case 180:  // > CustomCode.chengeOrientation:19
      this.screenOrientation = 'portrait';  // > CustomCode.chengeOrientation:20
      if (iOSapp){ // does not seems to work  // > CustomCode.chengeOrientation:21
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.chengeOrientation:22
        return window.screen.height*kapple;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.chengeOrientation:23
        // return window.screen.height;  // > CustomCode.chengeOrientation:24
        //  return window.innerHeight;  // > CustomCode.chengeOrientation:25
        // return document.documentElement.clientHeight;  // > CustomCode.chengeOrientation:26
      }  // > CustomCode.chengeOrientation:27
        // > CustomCode.chengeOrientation:28
      else {  // > CustomCode.chengeOrientation:29
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.chengeOrientation:30
        return window.innerHeight*k;  // > CustomCode.chengeOrientation:31
      }  // > CustomCode.chengeOrientation:32
      break;  // > CustomCode.chengeOrientation:33
    case 90:  // > CustomCode.chengeOrientation:34
    case -90:  // > CustomCode.chengeOrientation:35
      this.screenOrientation = 'landscape';  // > CustomCode.chengeOrientation:36
      if (iOSapp){ // App  // > CustomCode.chengeOrientation:37
        return window.screen.width*kapple;    // > CustomCode.chengeOrientation:38
        // return window.screen.height;  // > CustomCode.chengeOrientation:39
        //  return window.innerHeight;  // > CustomCode.chengeOrientation:40
        //  return document.documentElement.clientHeight;  // > CustomCode.chengeOrientation:41
      }  // > CustomCode.chengeOrientation:42
        // > CustomCode.chengeOrientation:43
      else { // browser Android and PC  // > CustomCode.chengeOrientation:44
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.chengeOrientation:45
        // alert("browser Android and PC");  // > CustomCode.chengeOrientation:46
        return window.innerHeight*k;  // > CustomCode.chengeOrientation:47
      }  // > CustomCode.chengeOrientation:48
      break;  // > CustomCode.chengeOrientation:49
    default:  // > CustomCode.chengeOrientation:50
      this.screenOrientation = 'unknown';  // > CustomCode.chengeOrientation:51
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.chengeOrientation:52
      return "90vh";  // > CustomCode.chengeOrientation:53
  }  // > CustomCode.chengeOrientation:54
  }  // > CustomCode.chengeOrientation:55

  function OnOrientationChange() {  // > CustomCode.chengeOrientation 2:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.chengeOrientation 2:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.chengeOrientation 2:3
  //else  // > CustomCode.chengeOrientation 2:4
  //  _view.mytext.setText("nada:");  // > CustomCode.chengeOrientation 2:5
  // check platform for Apps  // > CustomCode.chengeOrientation 2:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.chengeOrientation 2:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.chengeOrientation 2:8
  // check platform for web browsers  // > CustomCode.chengeOrientation 2:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.chengeOrientation 2:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.chengeOrientation 2:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.chengeOrientation 2:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.chengeOrientation 2:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.chengeOrientation 2:14
  switch (window.orientation) {  // > CustomCode.chengeOrientation 2:15
    case 0:  // > CustomCode.chengeOrientation 2:16
    case 180:  // > CustomCode.chengeOrientation 2:17
      this.screenOrientation = 'portrait';  // > CustomCode.chengeOrientation 2:18
    //  if (iOSapp){ // does not seems to work  // > CustomCode.chengeOrientation 2:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.chengeOrientation 2:20
     //   return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.chengeOrientation 2:21
        // return window.screen.height;  // > CustomCode.chengeOrientation 2:22
        //  return window.innerHeight;  // > CustomCode.chengeOrientation 2:23
        // return document.documentElement.clientHeight;  // > CustomCode.chengeOrientation 2:24
     // }  // > CustomCode.chengeOrientation 2:25
        // > CustomCode.chengeOrientation 2:26
     // else {  // > CustomCode.chengeOrientation 2:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.chengeOrientation 2:28
        return window.innerHeight*0.9;  // > CustomCode.chengeOrientation 2:29
     // }  // > CustomCode.chengeOrientation 2:30
      break;  // > CustomCode.chengeOrientation 2:31
    case 90:  // > CustomCode.chengeOrientation 2:32
    case -90:  // > CustomCode.chengeOrientation 2:33
      this.screenOrientation = 'landscape';  // > CustomCode.chengeOrientation 2:34
     // if (iOSapp){ // App  // > CustomCode.chengeOrientation 2:35
     //   return window.screen.width*0.7;    // > CustomCode.chengeOrientation 2:36
        // return window.screen.height;  // > CustomCode.chengeOrientation 2:37
        //  return window.innerHeight;  // > CustomCode.chengeOrientation 2:38
        //  return document.documentElement.clientHeight;  // > CustomCode.chengeOrientation 2:39
     // }  // > CustomCode.chengeOrientation 2:40
        // > CustomCode.chengeOrientation 2:41
    //  else { // browser Android and PC  // > CustomCode.chengeOrientation 2:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.chengeOrientation 2:43
        // alert("browser Android and PC");  // > CustomCode.chengeOrientation 2:44
        return window.innerHeight*0.9;  // > CustomCode.chengeOrientation 2:45
    //  }  // > CustomCode.chengeOrientation 2:46
      break;  // > CustomCode.chengeOrientation 2:47
    default:  // > CustomCode.chengeOrientation 2:48
      this.screenOrientation = 'unknown';  // > CustomCode.chengeOrientation 2:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.chengeOrientation 2:50
      return window.innerHeight*0.9;  // > CustomCode.chengeOrientation 2:51
  }  // > CustomCode.chengeOrientation 2:52
  }  // > CustomCode.chengeOrientation 2:53

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    //showmotiondiagram  // > Initialization.undefined:1
    if (showmotiondiagram==undefined){  // > Initialization.undefined:2
      showmotiondiagram=true;  // > Initialization.undefined:3
      }  // > Initialization.undefined:4
      //showdisplacementeverysec  // > Initialization.undefined:5
     if (showdisplacementeverysec==undefined){  // > Initialization.undefined:6
      showdisplacementeverysec=true;  // > Initialization.undefined:7
      }   // > Initialization.undefined:8
    if (world==undefined){  // > Initialization.undefined:9
      world=true;  // > Initialization.undefined:10
      }  // > Initialization.undefined:11
      if (Width1==undefined){   // > Initialization.undefined:12
      Width1="100%";  // > Initialization.undefined:13
      }  // > Initialization.undefined:14
      if (Width2==undefined){   // > Initialization.undefined:15
      Width2="0%";  // > Initialization.undefined:16
      }  // > Initialization.undefined:17
      if (Widthv==undefined){   // > Initialization.undefined:18
      Widthv="0%";  // > Initialization.undefined:19
      }  // > Initialization.undefined:20
      if (Widtha==undefined){   // > Initialization.undefined:21
      Widtha="0%";  // > Initialization.undefined:22
      }  // > Initialization.undefined:23
      if (Widthf==undefined){   // > Initialization.undefined:24
      Widthf="0%";  // > Initialization.undefined:25
      }  // > Initialization.undefined:26
      if (Widthe==undefined){   // > Initialization.undefined:27
      Widthe="0%";  // > Initialization.undefined:28
      }  // > Initialization.undefined:29
      //xvst  // > Initialization.undefined:30
      if (xvst==undefined){   // > Initialization.undefined:31
      xvst=false;  // > Initialization.undefined:32
      }  // > Initialization.undefined:33
      if (vvst==undefined){   // > Initialization.undefined:34
      vvst=false;  // > Initialization.undefined:35
      }  // > Initialization.undefined:36
      if (avst==undefined){   // > Initialization.undefined:37
      avst=false;  // > Initialization.undefined:38
      }  // > Initialization.undefined:39
       if (showmodel==undefined){   // > Initialization.undefined:40
      showmodel=false;  // > Initialization.undefined:41
      }  // > Initialization.undefined:42
    //showcar2  // > Initialization.undefined:43
    if (showcar2==undefined){   // > Initialization.undefined:44
      showcar2=false;  // > Initialization.undefined:45
      }  // > Initialization.undefined:46
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["color"]) return;
    colorv[0]="rgba(255, 0, 0,1)";  // > Initialization.color:1
    colorv[1]="rgba(190, 65, 0,1)";  // > Initialization.color:2
    colorv[2]="rgba(125, 125, 0,1)";  // > Initialization.color:3
    colorv[3]="rgba(65, 190, 0,1)";  // > Initialization.color:4
    colorv[4]="rgba(0,255,0,1)";  // > Initialization.color:5
    colorv[5]="rgba(0,190,65,1)";  // > Initialization.color:6
    colorv[6]="rgba(0,125,125,1)";  // > Initialization.color:7
    colorv[7]="rgba(0,65,190,1)";  // > Initialization.color:8
    colorv[8]="rgba(0,0,255,1)";  // > Initialization.color:9
    colorv[9]="rgba(65,0,190,1)";  // > Initialization.color:10
    colorv[10]="rgba(125,0,125,1)";  // > Initialization.color:11
    colorv[11]="rgba(190,0,65,1)";  // > Initialization.color:12
    colorv[12]="rgba(85,85,85,1)";  // > Initialization.color:13
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["zoom"]) return;
    //_view.worldgraph.setSelectedOptions(["world"]); // for example  // > Initialization.zoom:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //text = "select/change x,v and a and click play";  // > Initialization.Init Page:1
    xs=x; // for modelling pedaogogy to work  // > Initialization.Init Page:2
    vs=v;  // > Initialization.Init Page:3
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["menufa=orcereset"]) return;
    t=0;  // > Initialization.menufa=orcereset:1
    x=xs=0;  // > Initialization.menufa=orcereset:2
    v=vs=0  // > Initialization.menufa=orcereset:3
    a=0;;  // > Initialization.menufa=orcereset:4
     //counter=1;  // > Initialization.menufa=orcereset:5
     next=1;  // > Initialization.menufa=orcereset:6
    //_initialize();  // > Initialization.menufa=orcereset:7
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["shadows"]) return;
    // prev = Math.ceil(t);  // > Initialization.shadows:1
    for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {  // > Initialization.shadows:2
     //for (next=next; next<numShadows /* Iterations */ ; next++) {   // > Initialization.shadows:3
     xShadows[counter] = x; //put far away  // > Initialization.shadows:4
    yShadows[counter] = y;  // > Initialization.shadows:5
    tShadows[counter]=t;  // > Initialization.shadows:6
    vShadows[counter]=v;  // > Initialization.shadows:7
    vShadowsaverage[counter]=v;  // > Initialization.shadows:8
    aShadows[counter]=a;  // > Initialization.shadows:9
    xShadowstext[counter]=""; // blank text  // > Initialization.shadows:10
    dxShadows[counter]=0;  // > Initialization.shadows:11
    xanddxShadows[counter]=-100; // put far  // > Initialization.shadows:12
    vShadowstext[counter]="";  // > Initialization.shadows:13
    }  // > Initialization.shadows:14
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.25]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.2]);  // > Initialization.axes:2
    //_view.plottingPanel.getAxisX().setPosition([0,0.45]);  // > Initialization.axes:3
    //_view.plottingPanel.getTitleX().setPosition([0.95,0.4]);  // > Initialization.axes:4
    _view.plottingPanelxvst.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:5
    _view.plottingPanelxvst.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:6
    _view.plottingPanelxvst.getAxisY().setPosition([0.0545,0]);  // > Initialization.axes:7
    _view.plottingPanelxvst.getTitleY().setPosition([0.130,0.85]);  // > Initialization.axes:8
    _view.plottingPanelxvst2.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:9
    _view.plottingPanelxvst2.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:10
    _view.plottingPanelxvst2.getAxisY().setPosition([0.0545,0]);  // > Initialization.axes:11
    _view.plottingPanelxvst2.getTitleY().setPosition([0.13,0.85]);  // > Initialization.axes:12
    _view.plottingPanelxvst3.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:13
    _view.plottingPanelxvst3.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:14
    _view.plottingPanelxvst3.getAxisY().setPosition([0.0545,0]);  // > Initialization.axes:15
    _view.plottingPanelxvst3.getTitleY().setPosition([0.13,0.85]);  // > Initialization.axes:16
    //energy  // > Initialization.axes:17
    _view.plottingPanele.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:18
    _view.plottingPanele.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:19
    _view.plottingPanele.getAxisY().setPosition([0.0545,0]);  // > Initialization.axes:20
    _view.plottingPanele.getTitleY().setPosition([0.13,0.85]);  // > Initialization.axes:21
    //force  // > Initialization.axes:22
    _view.plottingPanel2.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:23
    _view.plottingPanel2.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:24
    _view.plottingPanel2.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:25
    _view.plottingPanel2.getTitleY().setPosition([0.5,0.85]);  // > Initialization.axes:26
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svgradial"]) return;
    var container = document.createElement('div');  // > Initialization.svgradial:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svgradial:3
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:1" />'+  // > Initialization.svgradial:4
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.5" />'+  // > Initialization.svgradial:5
      '  </radialGradient>'+  // > Initialization.svgradial:6
      '</defs></svg>';  // > Initialization.svgradial:7
    container.innerHTML = svggradient;  // > Initialization.svgradial:8
    document.body.appendChild(container);  // > Initialization.svgradial:9
    var container = document.createElement('div');  // > Initialization.svgradial:10
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:11
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svgradial:12
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.5" />'+  // > Initialization.svgradial:13
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.svgradial:14
      '  </radialGradient>'+  // > Initialization.svgradial:15
      '</defs></svg>';  // > Initialization.svgradial:16
    container.innerHTML = svggradient;  // > Initialization.svgradial:17
    document.body.appendChild(container);  // > Initialization.svgradial:18
    //"url(#mygrandient1)"  // > Initialization.svgradial:19
    var container = document.createElement('div');  // > Initialization.svgradial:20
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:21
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="70%" fx="90%" fy="50%">'+  // > Initialization.svgradial:22
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:0.5" />'+  // > Initialization.svgradial:23
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.5" />'+  // > Initialization.svgradial:24
      '  </radialGradient>'+  // > Initialization.svgradial:25
      '</defs></svg>';  // > Initialization.svgradial:26
    container.innerHTML = svggradient;  // > Initialization.svgradial:27
    document.body.appendChild(container);  // > Initialization.svgradial:28
    //"url(#mygrandient2)"  // > Initialization.svgradial:29
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
     if ( _view.comboBox.getProperty("SelectedOptions")=="deceleration v=5,a=-1"&&v<=0.0){ //choose 0.1 instead of 0 to avoid over stepping  // > FixedRelations.FixRel Page:1
      _pause();  // > FixedRelations.FixRel Page:2
        // > FixedRelations.FixRel Page:3
       text = "paused";  // > FixedRelations.FixRel Page:4
       v=0;  // > FixedRelations.FixRel Page:5
      }  // > FixedRelations.FixRel Page:6
        // > FixedRelations.FixRel Page:7
    if ( _view.comboBox.getProperty("SelectedOptions")=="deceleration v=-4,a=1"&&v>=0.0){  // > FixedRelations.FixRel Page:8
     _pause();  // > FixedRelations.FixRel Page:9
     text = "paused";  // > FixedRelations.FixRel Page:10
     v=0; //cheating fore zero value  // > FixedRelations.FixRel Page:11
      }  // > FixedRelations.FixRel Page:12
        // > FixedRelations.FixRel Page:13
          // > FixedRelations.FixRel Page:14
       // > FixedRelations.FixRel Page:15
        // > FixedRelations.FixRel Page:16
        // > FixedRelations.FixRel Page:17
        // > FixedRelations.FixRel Page:18
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["forces"]) return;
    textT = "P = " +(m*a*1000).toExponential(3)+ " N";  // > FixedRelations.forces:1
    // the restof the forces not calculated  // > FixedRelations.forces:2
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["energy"]) return;
    //energy  // > FixedRelations.energy:1
    //v=Math.sqrt(vx*vx+vy*vy);  // > FixedRelations.energy:2
    ke=0.5*m*1000*v*v; // x1000 because of the scale used  // > FixedRelations.energy:3
    //pe=-m*ay*(y-yo);  // > FixedRelations.energy:4
    pe=0;  // > FixedRelations.energy:5
    te = ke+pe;  // > FixedRelations.energy:6
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["model"]) return;
    xmodel=_view.fField.evaluate({ t : t, x : xmodel });   // > FixedRelations.model:1
    //vymodel=_view.fField2v.evaluate({ t : t, y : vymodel });   // > FixedRelations.model:2
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["max"]) return;
    //max screen  // > FixedRelations.max:1
    //if (x>=xmax&&x<100) xmax = xmax+10;  // > FixedRelations.max:2
    //if (x<=xmin&&x>-100) xmin = xmin-10;  // > FixedRelations.max:3
    if (x>=80) {  // > FixedRelations.max:4
      _pause();  // > FixedRelations.max:5
      text ="maximum position and paused";  // > FixedRelations.max:6
      }  // > FixedRelations.max:7
    if (x<=-80) {  // > FixedRelations.max:8
      _pause();  // > FixedRelations.max:9
      text ="minimum position and paused";  // > FixedRelations.max:10
      }  // > FixedRelations.max:11
    //if (y>ymax) ymax = ymax*1.2;  // > FixedRelations.max:12
    //if (y<ymin) ymin = ymin*1.2;  // > FixedRelations.max:13
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["shadows"]) return;
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["totaldistance"]) return;
    //if(v*vo<0){  // > FixedRelations.totaldistance:1
    //  sign =-sign; //sign change  // > FixedRelations.totaldistance:2
    //n1++;  // > FixedRelations.totaldistance:3
    //}  // > FixedRelations.totaldistance:4
    //falied attempt to calculate total distance   // > FixedRelations.totaldistance:5
    if (t>0){ // to start adding only after t>0  // > FixedRelations.totaldistance:6
    dx = x-xo;  // > FixedRelations.totaldistance:7
    totaldistance = totaldistance+Math.abs(dx);  // > FixedRelations.totaldistance:8
    }  // > FixedRelations.totaldistance:9
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["calculatex"]) return;
      if (vo===v&&xo<x) {  // > FixedRelations.calculatex:1
      texts = " displacement x is increasing \nat constant rate";  // > FixedRelations.calculatex:2
      }  // > FixedRelations.calculatex:3
     else if (vo===v&&xo>x) {  // > FixedRelations.calculatex:4
      texts = " displacement x is decreasing \nat constant rate";  // > FixedRelations.calculatex:5
      }  // > FixedRelations.calculatex:6
    else if (vo===v&&xo===x&&booleanpause===false) {  // > FixedRelations.calculatex:7
      texts = " displacement x \nis constant ";  // > FixedRelations.calculatex:8
      }  // > FixedRelations.calculatex:9
    else {  // > FixedRelations.calculatex:10
      texts = "displacement x = "+_view._format(x-xs,"0.00")+" m";  // > FixedRelations.calculatex:11
      }  // > FixedRelations.calculatex:12
        // > FixedRelations.calculatex:13
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["calculatev"]) return;
    //totaldistance =+Math.abs(x); // does not sense correct value  // > FixedRelations.calculatev:1
    averagespeed = totaldistance/t;  // > FixedRelations.calculatev:2
    if (vo<v&&a===ao) {  // > FixedRelations.calculatev:3
      textv = "velocity v is increasing and \nat "+_view._format(v,"0.00")+" m/s";  // > FixedRelations.calculatev:4
      }  // > FixedRelations.calculatev:5
     else if (vo>v&&a===ao) {  // > FixedRelations.calculatev:6
      textv = "velocity v is decreasing and \nat "+_view._format(v,"0.00")+" m/s";  // > FixedRelations.calculatev:7
      }  // > FixedRelations.calculatev:8
    else if (vo===v&&ao===a) {  // > FixedRelations.calculatev:9
      textv = "velocity v is constant \nat "+_view._format(v,"0.00")+" m/s";  // > FixedRelations.calculatev:10
      }  // > FixedRelations.calculatev:11
    else {  // > FixedRelations.calculatev:12
      textv = "velocity v = "+_view._format(v,"0.00")+" m/s";  // > FixedRelations.calculatev:13
      }  // > FixedRelations.calculatev:14
        // > FixedRelations.calculatev:15
        // > FixedRelations.calculatev:16
        if ((  Math.abs(vo)=== Math.abs(v))){  // > FixedRelations.calculatev:17
        // > FixedRelations.calculatev:18
      textspeed = "speed |v| is constant at "+_view._format(Math.abs(v),"0.00")+" m/s"+" and \naverage speed ="+_view._format(averagespeed,"0.00")+" m/s";  // > FixedRelations.calculatev:19
      }  // > FixedRelations.calculatev:20
        // > FixedRelations.calculatev:21
       else if ((  Math.abs(vo)< Math.abs(v))){  // > FixedRelations.calculatev:22
        // > FixedRelations.calculatev:23
      textspeed = "speed |v| is increasing and t "+_view._format(Math.abs(v),"0.00")+" m/s"+" and \naverage speed ="+_view._format(averagespeed,"0.00")+" m/s";  // > FixedRelations.calculatev:24
      }  // > FixedRelations.calculatev:25
     else if ((  Math.abs(v) - Math.abs(vo))<0){  // > FixedRelations.calculatev:26
        // > FixedRelations.calculatev:27
      textspeed = "speed |v| is decreasing and at "+_view._format(Math.abs(v),"0.00")+" m/s"+" and \naverage speed ="+_view._format(averagespeed,"0.00")+" m/s";  // > FixedRelations.calculatev:28
      }  // > FixedRelations.calculatev:29
      else {  // > FixedRelations.calculatev:30
        textspeed = "speed  |v| = "+_view._format(Math.abs(v),"0.00")+" m/s"+" and \naverage speed ="+_view._format(averagespeed,"0.00")+" m/s" ;  // > FixedRelations.calculatev:31
        }  // > FixedRelations.calculatev:32
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["calculatea"]) return;
     if ((Math.abs(v)-Math.abs(vo))<0) {  // > FixedRelations.calculatea:1
      texta = "acceleration a is decelerating \nat " +_view._format(a,"0.00")+" m/s²";  // > FixedRelations.calculatea:2
      }  // > FixedRelations.calculatea:3
    else if ((Math.abs(v)-Math.abs(vo))>0) {  // > FixedRelations.calculatea:4
      texta = "acceleration a is accelerating \nat " +_view._format(a,"0.00")+" m/s²";  // > FixedRelations.calculatea:5
      }  // > FixedRelations.calculatea:6
    else if (a<0) {  // > FixedRelations.calculatea:7
      texta = "acceleration a is negative \nat " +_view._format(a,"0.00")+" m/s²";  // > FixedRelations.calculatea:8
      }  // > FixedRelations.calculatea:9
     else if (a>0) {  // > FixedRelations.calculatea:10
      texta = "acceleration a is positive \nat " +_view._format(a,"0.00")+" m/s²";  // > FixedRelations.calculatea:11
      }  // > FixedRelations.calculatea:12
      else if (a===0){  // > FixedRelations.calculatea:13
        texta = "acceleration a is zero \nat " +_view._format(a,"0.00")+" m/s²";  // > FixedRelations.calculatea:14
        }  // > FixedRelations.calculatea:15
        // > FixedRelations.calculatea:16
    else {  // > FixedRelations.calculatea:17
     texta = "acceleration  a = "+_view._format(a,"0.00")+" m/s²";  // > FixedRelations.calculatea:18
      }  // > FixedRelations.calculatea:19
        // > FixedRelations.calculatea:20
    //  xo = x; // move to prelim codes  // > FixedRelations.calculatea:21
    //vo = v;  // > FixedRelations.calculatea:22
    //ao=a;  // > FixedRelations.calculatea:23
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["storedvaluesxva"]) return;
    xo = x;  // > FixedRelations.storedvaluesxva:1
    vo = v;  // > FixedRelations.storedvaluesxva:2
    ao=a;  // > FixedRelations.storedvaluesxva:3
    //for calculate totaldistance to work  // > FixedRelations.storedvaluesxva:4
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axes"]) return;
    if (_model.isPlaying()===true) { //NEED this for conflict with initialize page values  // > FixedRelations.axes:1
    //_view.plottingPanel.getGrid().setFixedTickY()=(M*y+m*y2)/(M+m);  // > FixedRelations.axes:2
    //_view.plottingPanel.setFixedTickY()=2;  // > FixedRelations.axes:3
    _view.plottingPanelxvst.getAxisX().setAbsoluteY(_view.plottingPanelxvst.getGrid().getFixedTickY());  // > FixedRelations.axes:4
    _view.plottingPanelxvst.getAxisY().setAbsoluteX(_view.plottingPanelxvst.getGrid().getFixedTickX());  // > FixedRelations.axes:5
    _view.plottingPanelxvst2.getAxisX().setAbsoluteY(_view.plottingPanelxvst2.getGrid().getFixedTickY());  // > FixedRelations.axes:6
    _view.plottingPanelxvst2.getAxisY().setAbsoluteX(_view.plottingPanelxvst2.getGrid().getFixedTickX());  // > FixedRelations.axes:7
    _view.plottingPanelxvst3.getAxisX().setAbsoluteY(_view.plottingPanelxvst3.getGrid().getFixedTickY());  // > FixedRelations.axes:8
    _view.plottingPanelxvst3.getAxisY().setAbsoluteX(_view.plottingPanelxvst3.getGrid().getFixedTickX());  // > FixedRelations.axes:9
    _view.plottingPanele.getAxisX().setAbsoluteY(_view.plottingPanele.getGrid().getFixedTickY());  // > FixedRelations.axes:10
    _view.plottingPanele.getAxisY().setAbsoluteX(_view.plottingPanele.getGrid().getFixedTickX());  // > FixedRelations.axes:11
    //var getRealWorldYMin = _view.plottingPanel.getRealWorldYMin();  // > FixedRelations.axes:12
    //var getRealWorldYMax = _view.plottingPanel.getRealWorldYMax();  // > FixedRelations.axes:13
    //_view.plottingPanel.getAxisX().setPosition([0,_view.plottingPanel.getRealWorldYMin()/(_view.plottingPanel.getRealWorldYMax()-_view.plottingPanel.getRealWorldYMin())]);  // > FixedRelations.axes:14
    //_view.plottingPanel.getTitleX().setPosition([0.95,-_view.plottingPanel.getRealWorldYMin()/(_view.plottingPanel.getRealWorldYMax()-_view.plottingPanel.getRealWorldYMin())]);  // > FixedRelations.axes:15
    }  // > FixedRelations.axes:16
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["table"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var _ODE_evolution1_Event5;
    var _ODE_evolution1_Event6;
    var _ODE_evolution1_Event7;
    var _ODE_evolution1_Event8;
    var _ODE_evolution1_Event9;
    var _ODE_evolution1_Event10;
    var _ODE_evolution1_Event11;
    var _ODE_evolution1_Event12;
    var _ODE_evolution1_Event13;
    var _ODE_evolution1_Event14;
    var _ODE_evolution1_Event15;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["x","v","ymodelvy","ymodelay","vymodelay","x2","v2","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Shadows"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["stopleft"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["stopright"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      if (__pagesEnabled["concepttest1"]) __eventSolver.addEvent(_ODE_evolution1_Event5());
      if (__pagesEnabled["concepttest2"]) __eventSolver.addEvent(_ODE_evolution1_Event6());
      if (__pagesEnabled["concepttest61"]) __eventSolver.addEvent(_ODE_evolution1_Event7());
      if (__pagesEnabled["concepttest61 2"]) __eventSolver.addEvent(_ODE_evolution1_Event8());
      if (__pagesEnabled["concepttest61 2 2"]) __eventSolver.addEvent(_ODE_evolution1_Event9());
      if (__pagesEnabled["concepttest61 3"]) __eventSolver.addEvent(_ODE_evolution1_Event10());
      if (__pagesEnabled["concepttest61 2 3"]) __eventSolver.addEvent(_ODE_evolution1_Event11());
      if (__pagesEnabled["concepttest61 2 2 2"]) __eventSolver.addEvent(_ODE_evolution1_Event12());
      if (__pagesEnabled["concepttest63"]) __eventSolver.addEvent(_ODE_evolution1_Event13());
      if (__pagesEnabled["concepttest63 2"]) __eventSolver.addEvent(_ODE_evolution1_Event14());
      if (__pagesEnabled["concepttest63 2 2"]) __eventSolver.addEvent(_ODE_evolution1_Event15());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=x) __mustReinitialize = true;
        __state[__cIn++] = x;
        if (__state[__cIn]!=v) __mustReinitialize = true;
        __state[__cIn++] = v;
        if (__state[__cIn]!=ymodelvy) __mustReinitialize = true;
        __state[__cIn++] = ymodelvy;
        if (__state[__cIn]!=ymodelay) __mustReinitialize = true;
        __state[__cIn++] = ymodelay;
        if (__state[__cIn]!=vymodelay) __mustReinitialize = true;
        __state[__cIn++] = vymodelay;
        if (__state[__cIn]!=x2) __mustReinitialize = true;
        __state[__cIn++] = x2;
        if (__state[__cIn]!=v2) __mustReinitialize = true;
        __state[__cIn++] = v2;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        // disabling model for faster rendering  // > Preliminary code for ODE.Evol Page:1
        //vymodel=_view.fField2v.evaluate({ t : t, y : vymodel }); //sync position with modelvy  // > Preliminary code for ODE.Evol Page:2
        //aymodel=_view.fField2a.evaluate({ t : t, y : a }); //sync position with modelay  // > Preliminary code for ODE.Evol Page:3
        if (vo*v <0) {  // > Preliminary code for ODE.Evol Page:4
          y = y+0.005; // move dots higher  // > Preliminary code for ODE.Evol Page:5
         // alert(y);  // > Preliminary code for ODE.Evol Page:6
          }  // > Preliminary code for ODE.Evol Page:7
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = v; // Rate for ODE: Evol Page:x
        _aRate[__cRate++] = a; // Rate for ODE: Evol Page:v
        _aRate[__cRate++] = vymodel; // Rate for ODE: Evol Page:ymodelvy
        _aRate[__cRate++] = vymodelay; // Rate for ODE: Evol Page:ymodelay
        _aRate[__cRate++] = aymodel; // Rate for ODE: Evol Page:vymodelay
        _aRate[__cRate++] = v2; // Rate for ODE: Evol Page:x2
        _aRate[__cRate++] = a2; // Rate for ODE: Evol Page:v2
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        return counter+1-t;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        // draw shadow every 1 second  // > Event action for page Evol Page:1
           // > Event action for page Evol Page:2
        //if (Math.ceil(t) > prev &&t>(0)) {  // > Event action for page Evol Page:3
          shadowVis[counter] = true;  // > Event action for page Evol Page:4
          xShadows[counter] = x;  // > Event action for page Evol Page:5
          yShadows[counter] = y;  // > Event action for page Evol Page:6
          tShadows[counter]=t;  // > Event action for page Evol Page:7
          vShadows[counter]=v;  // > Event action for page Evol Page:8
           aShadows[counter]=a;  // > Event action for page Evol Page:9
         // xMarkVert[counter] = x;  // > Event action for page Evol Page:10
         // yMarkVert[counter] = y - 0.15;  // > Event action for page Evol Page:11
         // xMarkHoriz[counter] = x - 0.15;  // > Event action for page Evol Page:12
        //  yMarkHoriz[counter] = y;  // > Event action for page Evol Page:13
            // > Event action for page Evol Page:14
         //prev = Math.ceil(t);  // > Event action for page Evol Page:15
          counter++;  // > Event action for page Evol Page:16
        //}  // > Event action for page Evol Page:17
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        var min = 1.0e-5;  // > Event zero-condition for page Evol Page:1
        if (next - t < min) { min = next - t; }  // > Event zero-condition for page Evol Page:2
        return min;  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        //xShadow[count] = x;  // > Event action for page Evol Page:1
        //yShadow[count] = y;  // > Event action for page Evol Page:2
        clocktable=true;  // > Event action for page Evol Page:3
        shadowVis[counter] = true;  // > Event action for page Evol Page:4
          xShadows[counter] = x.toFixed(1); // need toFixed to show values  // > Event action for page Evol Page:5
          xShadowstext[counter] =x.toFixed(0) + " m";  // > Event action for page Evol Page:6
          //if (counter==0){  // > Event action for page Evol Page:7
         //   dxShadows[counter] = ((v+a*1)*1).toFixed(1); //assume dt =1  // > Event action for page Evol Page:8
         //alert();  // > Event action for page Evol Page:9
         //xanddxShadows[counter] = (x+((v+a*1)*1)/2).toFixed(1); //position text dx  // > Event action for page Evol Page:10
         // dxShadows[1] = ((v+a*1)*1).toFixed(1);//show dx  // > Event action for page Evol Page:11
         //xanddxShadows[1]=(x+((v+a*1)*1)/2).toFixed(1);  // > Event action for page Evol Page:12
         //   }  // > Event action for page Evol Page:13
         // else {  // > Event action for page Evol Page:14
          dxShadows[counter] = (xShadows[counter]-xShadows[counter-1]).toFixed(1);//show orange backwards, not predictive  // > Event action for page Evol Page:15
         xanddxShadows[counter]=xShadows[counter]-dxShadows[counter]/2;  // > Event action for page Evol Page:16
        // }  // > Event action for page Evol Page:17
          yShadows[counter] = y;  // > Event action for page Evol Page:18
          tShadows[counter]=t;  // > Event action for page Evol Page:19
         vShadowsaverage[counter]=v+a/2; // must add a/2 to get correct length of v  // > Event action for page Evol Page:20
            vShadows[counter]=v; // must add a/2 to get correct length of v  // > Event action for page Evol Page:21
          vShadowstext[counter] =vShadows[counter].toFixed(0) + " ms⁻¹";  // > Event action for page Evol Page:22
         // colorv[counter]="rgba("+(255-40*counter)+","+0*40+","+counter*40+",1)";  // > Event action for page Evol Page:23
          // colorv[counter]=counter-1;  // > Event action for page Evol Page:24
           aShadows[counter]=a;  // > Event action for page Evol Page:25
        counter++;  // > Event action for page Evol Page:26
        next+=1.0;  // > Event action for page Evol Page:27
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        //return x-xmin;  // > Event zero-condition for page Evol Page:1
        return x-20;  // > Event zero-condition for page Evol Page:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        booleanpause==true;  // > Event action for page Evol Page:2
        text ="paused";  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        //return x-xmax;  // > Event zero-condition for page Evol Page:1
        return x-20;  // > Event zero-condition for page Evol Page:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        booleanpause==true;  // > Event action for page Evol Page:2
        text ="paused";  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 1"){  // > Event zero-condition for page Evol Page:1
        return t-5;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        var question =  "A car moves along a long straight track. The plot shows the position as a function of time for this car. The trail shows the position of that car. \nWhich option is correct?, \n(A) slows down all the time. \n(B) speeds up part of the time and slows down part of the time. \n(C) speeds up all the time. \n(D) Other ";  // > Event action for page Evol Page:1
        /*  // > Event action for page Evol Page:2
          if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:3
               parent.TTS.speak(question, function () {  // > Event action for page Evol Page:4
                    // success  // > Event action for page Evol Page:5
                }, function (reason) {  // > Event action for page Evol Page:6
                    // error  // > Event action for page Evol Page:7
                });  // > Event action for page Evol Page:8
            }  // > Event action for page Evol Page:9
            else {  // > Event action for page Evol Page:10
          var msg = new SpeechSynthesisUtterance(question);  // > Event action for page Evol Page:11
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:12
        }  // > Event action for page Evol Page:13
        */  // > Event action for page Evol Page:14
        var favDrink =  prompt(question);  // > Event action for page Evol Page:15
        var text;  // > Event action for page Evol Page:16
        //var favDrink = prompt("What's your favorite cocktail drink?");  // > Event action for page Evol Page:17
        switch(favDrink) {  // > Event action for page Evol Page:18
            case "a":  // > Event action for page Evol Page:19
                text = "Excellent choice! it is indeed slowing down all the time as evident from the decreasing gradient on the position vs time plot.";  // > Event action for page Evol Page:20
                break;  // > Event action for page Evol Page:21
            case "b":  // > Event action for page Evol Page:22
                text = "incorrect, the correct answer is it slows down all the time as evident from the decreasing gradient on the position vs time plot.";  // > Event action for page Evol Page:23
                break;  // > Event action for page Evol Page:24
            case "c":  // > Event action for page Evol Page:25
                text = "incorrect, for it to speeds up all the time, the gradient on the position vs time plot will need to be increasing at the time. ";  // > Event action for page Evol Page:26
                break;  // > Event action for page Evol Page:27
                case "d":  // > Event action for page Evol Page:28
                text = "Really? Please check with your teacher.";  // > Event action for page Evol Page:29
                break;  // > Event action for page Evol Page:30
                case "A":  // > Event action for page Evol Page:31
                text = "Excellent choice! it is indeed slowing down all the time as evident from the decreasing gradient on the position vs time plot.";  // > Event action for page Evol Page:32
                break;  // > Event action for page Evol Page:33
            case "B":  // > Event action for page Evol Page:34
                text = "incorrect, the correct answer is it slows down all the time as evident from the decreasing gradient on the position vs time plot.";  // > Event action for page Evol Page:35
                break;  // > Event action for page Evol Page:36
            case "C":  // > Event action for page Evol Page:37
                text = "incorrect, for it to speeds up all the time, the gradient on the position vs time plot will need to be increasing at the time. ";  // > Event action for page Evol Page:38
                break;  // > Event action for page Evol Page:39
                case "D":  // > Event action for page Evol Page:40
                text = "Really? Please check with your teacher.";  // > Event action for page Evol Page:41
                break;  // > Event action for page Evol Page:42
            default:  // > Event action for page Evol Page:43
                text = "I have never heard of that one..";  // > Event action for page Evol Page:44
                break;  // > Event action for page Evol Page:45
        }  // > Event action for page Evol Page:46
         if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:47
               parent.TTS.speak(text, function () {  // > Event action for page Evol Page:48
                    // success  // > Event action for page Evol Page:49
                }, function (reason) {  // > Event action for page Evol Page:50
                    // error  // > Event action for page Evol Page:51
                });  // > Event action for page Evol Page:52
            }  // > Event action for page Evol Page:53
            else {  // > Event action for page Evol Page:54
          var msg = new SpeechSynthesisUtterance(text);  // > Event action for page Evol Page:55
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:56
        }  // > Event action for page Evol Page:57
        alert(text);  // > Event action for page Evol Page:58
        _pause();  // > Event action for page Evol Page:59
        booleanpause==true;  // > Event action for page Evol Page:60
        text ="paused";  // > Event action for page Evol Page:61
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event6 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 2"){  // > Event zero-condition for page Evol Page:1
        return t-4;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        booleanpause==true;  // > Event action for page Evol Page:2
        text ="paused";  // > Event action for page Evol Page:3
        var question =  "The graph shows position as a function of time for two cars running on parallel tracks. \nWhich is true?  \n(A) Both cars have the same velocity at some time before t1, which is 3 seconds. \n(B) Both cars speed up all the time. \n(C) At time t1=3 seconds, both cars have the same velocity. \n(D) Other ";  // > Event action for page Evol Page:4
        /*  // > Event action for page Evol Page:5
          if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:6
               parent.TTS.speak(question, function () {  // > Event action for page Evol Page:7
                    // success  // > Event action for page Evol Page:8
                }, function (reason) {  // > Event action for page Evol Page:9
                    // error  // > Event action for page Evol Page:10
                });  // > Event action for page Evol Page:11
            }  // > Event action for page Evol Page:12
            else {  // > Event action for page Evol Page:13
          var msg = new SpeechSynthesisUtterance(question);  // > Event action for page Evol Page:14
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:15
        }  // > Event action for page Evol Page:16
        */  // > Event action for page Evol Page:17
        //  alert(question);  // > Event action for page Evol Page:18
        var favDrink =  prompt(question);  // > Event action for page Evol Page:19
        var text;  // > Event action for page Evol Page:20
        //var favDrink = prompt("What's your favorite cocktail drink?");  // > Event action for page Evol Page:21
        switch(favDrink) {  // > Event action for page Evol Page:22
            case "a":  // > Event action for page Evol Page:23
                text = "Excellent choice! it is correct that at a point in time 0<t<3 around t=1.5 s that the gradient on the position vs time plot is apprioximately the same, thus the same velocity.";  // > Event action for page Evol Page:24
                break;  // > Event action for page Evol Page:25
            case "b":  // > Event action for page Evol Page:26
                text = "incorrect, the answer cannot be 'Both cars speed up all the time' because Car Audi TT is constant velocity and Car Lotus is decreasing in velocity, as evident from the gradient on the position vs time plot.";  // > Event action for page Evol Page:27
                break;  // > Event action for page Evol Page:28
            case "c":  // > Event action for page Evol Page:29
                text = "incorrect, 'At time t1=3 seconds, car Audi TT is larger than car Lotus as evident from the gradient on the position vs time plot.  ";  // > Event action for page Evol Page:30
                break;  // > Event action for page Evol Page:31
                case "d":  // > Event action for page Evol Page:32
                text = "Really? Please check with your teacher.";  // > Event action for page Evol Page:33
                break;  // > Event action for page Evol Page:34
               case "A":  // > Event action for page Evol Page:35
                text = "Excellent choice! it is correct that at a point in time 0<t<3 around t=1.5 s that the gradient on the position vs time plot is apprioximately the same, thus the same velocity.";  // > Event action for page Evol Page:36
                break;  // > Event action for page Evol Page:37
            case "B":  // > Event action for page Evol Page:38
                text = "incorrect, the answer cannot be 'Both cars speed up all the time' because Car Audi TT is constant velocity and Car Lotus is decreasing in velocity, as evident from the gradient on the position vs time plot.";  // > Event action for page Evol Page:39
                break;  // > Event action for page Evol Page:40
            case "C":  // > Event action for page Evol Page:41
                text = "incorrect, 'At time t1=3 seconds, car Audi TT is larger than car Lotus as evident from the gradient on the position vs time plot.  ";  // > Event action for page Evol Page:42
                break;  // > Event action for page Evol Page:43
                case "D":  // > Event action for page Evol Page:44
                text = "Really? Please check with your teacher.";  // > Event action for page Evol Page:45
                break;  // > Event action for page Evol Page:46
            default:  // > Event action for page Evol Page:47
                text = "I have never heard of that one..";  // > Event action for page Evol Page:48
                break;  // > Event action for page Evol Page:49
        }  // > Event action for page Evol Page:50
         if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:51
               parent.TTS.speak(text, function () {  // > Event action for page Evol Page:52
                    // success  // > Event action for page Evol Page:53
                }, function (reason) {  // > Event action for page Evol Page:54
                    // error  // > Event action for page Evol Page:55
                });  // > Event action for page Evol Page:56
            }  // > Event action for page Evol Page:57
            else {  // > Event action for page Evol Page:58
          var msg = new SpeechSynthesisUtterance(text);  // > Event action for page Evol Page:59
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:60
        }  // > Event action for page Evol Page:61
        alert(text);  // > Event action for page Evol Page:62
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event7 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 1"){  // > Event zero-condition for page Evol Page:1
        return t-5;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        v=0;  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event8 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 1"){  // > Event zero-condition for page Evol Page:1
        return t-7;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        v=-8;  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event9 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 1"){  // > Event zero-condition for page Evol Page:1
        return t-10;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        booleanpause==true;  // > Event action for page Evol Page:2
        text ="paused";  // > Event action for page Evol Page:3
        var question =  "A car starts at the original position (x = 0 m), \ntravels forward slowly and steadily for 5 seconds, \nstops for 2 seconds, \nand then travels backward steadily about twice as fast for 3 seconds. \nDraw position versus time and velocity versus time graphs to illustrate its travel.";  // > Event action for page Evol Page:4
        /*  // > Event action for page Evol Page:5
          if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:6
               parent.TTS.speak(question, function () {  // > Event action for page Evol Page:7
                    // success  // > Event action for page Evol Page:8
                }, function (reason) {  // > Event action for page Evol Page:9
                    // error  // > Event action for page Evol Page:10
                });  // > Event action for page Evol Page:11
            }  // > Event action for page Evol Page:12
            else {  // > Event action for page Evol Page:13
          var msg = new SpeechSynthesisUtterance(question);  // > Event action for page Evol Page:14
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:15
        }  // > Event action for page Evol Page:16
        */  // > Event action for page Evol Page:17
          alert(question);  // > Event action for page Evol Page:18
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event10 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 2"){  // > Event zero-condition for page Evol Page:1
        return t-5;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        v=0;  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event11 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 2"){  // > Event zero-condition for page Evol Page:1
        return t-7;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        v=6;  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event12 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 2"){  // > Event zero-condition for page Evol Page:1
        return t-10;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        booleanpause==true;  // > Event action for page Evol Page:2
        text ="paused";  // > Event action for page Evol Page:3
        var question =  "A car starts at the original position (x = 0 m), \ntravels backward slowly and steadily for 5 seconds, \nstops for 2 seconds, \nand then travels forward steadily about twice as fast for 3 seconds. \nDraw position versus time and velocity versus time graphs to illustrate its travel.";  // > Event action for page Evol Page:4
        /*  // > Event action for page Evol Page:5
          if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:6
               parent.TTS.speak(question, function () {  // > Event action for page Evol Page:7
                    // success  // > Event action for page Evol Page:8
                }, function (reason) {  // > Event action for page Evol Page:9
                    // error  // > Event action for page Evol Page:10
                });  // > Event action for page Evol Page:11
            }  // > Event action for page Evol Page:12
            else {  // > Event action for page Evol Page:13
          var msg = new SpeechSynthesisUtterance(question);  // > Event action for page Evol Page:14
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:15
        }  // > Event action for page Evol Page:16
        */  // > Event action for page Evol Page:17
          alert(question);  // > Event action for page Evol Page:18
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event13 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 3"){  // > Event zero-condition for page Evol Page:1
        return t-3;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        a=-1;  // > Event action for page Evol Page:1
        a2=-1;  // > Event action for page Evol Page:2
        var question =  "Consider two cars, a 1,700 kg Audi TT and a 1,500 kg Lotus. \nThe Audi TT is speeding along at 6 m/s and the Lotus is going half the speed at 3 m/s. \nIf the two cars brake to a stop with the same constant acceleration, is the amount of time required to come to a stop influenced by their initial velocity? \nExplain your answer using diagrams, equations, or any explanatory rules/principles. ";  // > Event action for page Evol Page:3
        /*  // > Event action for page Evol Page:4
          if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:5
               parent.TTS.speak(question, function () {  // > Event action for page Evol Page:6
                    // success  // > Event action for page Evol Page:7
                }, function (reason) {  // > Event action for page Evol Page:8
                    // error  // > Event action for page Evol Page:9
                });  // > Event action for page Evol Page:10
            }  // > Event action for page Evol Page:11
            else {  // > Event action for page Evol Page:12
          var msg = new SpeechSynthesisUtterance(question);  // > Event action for page Evol Page:13
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:14
        }  // > Event action for page Evol Page:15
        */  // > Event action for page Evol Page:16
          alert(question);  // > Event action for page Evol Page:17
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event14 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 3"){  // > Event zero-condition for page Evol Page:1
        return t-6;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        a2=0;  // > Event action for page Evol Page:1
        var question =  "The Lotus stops. ";  // > Event action for page Evol Page:2
        /*  // > Event action for page Evol Page:3
          if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:4
               parent.TTS.speak(question, function () {  // > Event action for page Evol Page:5
                    // success  // > Event action for page Evol Page:6
                }, function (reason) {  // > Event action for page Evol Page:7
                    // error  // > Event action for page Evol Page:8
                });  // > Event action for page Evol Page:9
            }  // > Event action for page Evol Page:10
            else {  // > Event action for page Evol Page:11
          var msg = new SpeechSynthesisUtterance(question);  // > Event action for page Evol Page:12
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:13
        }  // > Event action for page Evol Page:14
        */  // > Event action for page Evol Page:15
          alert(question);  // > Event action for page Evol Page:16
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event15 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var ymodelvy = _aState[__cOut++];
        var ymodelay = _aState[__cOut++];
        var vymodelay = _aState[__cOut++];
        var x2 = _aState[__cOut++];
        var v2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (_view.comboBox.getProperty("SelectedOptions")== "ConcepTest 6 3"){  // > Event zero-condition for page Evol Page:1
        return t-9;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        ymodelvy = __state[__cOut++];
        ymodelay = __state[__cOut++];
        vymodelay = __state[__cOut++];
        x2 = __state[__cOut++];
        v2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = ymodelvy;
        __state[__cIn++] = ymodelay;
        __state[__cIn++] = vymodelay;
        __state[__cIn++] = x2;
        __state[__cIn++] = v2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        booleanpause==true;  // > Event action for page Evol Page:2
        text ="paused";  // > Event action for page Evol Page:3
        var question =  "The Audi TT stops. \n(B) is the distance travelled prior to stopping influenced by their initial velocity? \nExplain your answer using diagrams, equations, or any explanatory rules/principles.";  // > Event action for page Evol Page:4
        /*  // > Event action for page Evol Page:5
          if(parent.cordova) { // check it is running in Android  // > Event action for page Evol Page:6
               parent.TTS.speak(question, function () {  // > Event action for page Evol Page:7
                    // success  // > Event action for page Evol Page:8
                }, function (reason) {  // > Event action for page Evol Page:9
                    // error  // > Event action for page Evol Page:10
                });  // > Event action for page Evol Page:11
            }  // > Event action for page Evol Page:12
            else {  // > Event action for page Evol Page:13
          var msg = new SpeechSynthesisUtterance(question);  // > Event action for page Evol Page:14
        window.speechSynthesis.speak(msg);  // > Event action for page Evol Page:15
        }  // > Event action for page Evol Page:16
        */  // > Event action for page Evol Page:17
          alert(question);  // > Event action for page Evol Page:18
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_v(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_ymodelvy(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_ymodelay(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vymodelay(__time) {
    var __index = 0 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_x2(__time) {
    var __index = 0 + 1 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_v2(__time) {
    var __index = 0 + 1 + 1 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new kinematics_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.comboBox.linkProperty("Options",  function() { return ["at rest v=0","uniform motion v=2","uniform motion v=3","uniform motion v=-2","uniform motion v=-3","acceleration a=1","negative acceleration a=-1","deceleration v=5,a=-1","deceleration v=-4,a=1","x₀=10,v₀=0.75","x₀=5,v₀=2","ConcepTest 1","ConcepTest 2","ConcepTest 6 1","ConcepTest 6 2","ConcepTest 6 3","user defined"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //_initialize();
  storedata();
  if (  option=="user defined"){
    
    }
  else if (  option=="acceleration a=1"){
    x=0;
    v=0;
    a=1;
    showcar2=false;
    }
    else if (  option=="deceleration v=5,a=-1"){
    x=0;
    v=5;
    a=-1;
    showcar2=false;
    }
  else if (  option=="negative acceleration a=-1"){
    x=0;
    v=0;
    a=-1;
    showcar2=false;
    }
    else if (  option=="deceleration v=-4,a=1"){
    x=0;
    v=-4;
    a=1;
    showcar2=false;
    }
    //["at rest v=0","uniform motion v=1","uniform motion v=2","uniform motion v=-1","uniform motion v=-2","simple acceleration","simple deceleration","negative acceleration","positive deceleration","x₀=10,v₀=0.75","x₀=5,v₀=2","ConcepTest 1","ConcepTest 2","user defined"]
  else if (  option=="at rest v=0"){
    x=0;
    v=0;
    a=0;
    showcar2=false;
    }
  else if (  option=="uniform motion v=3"){
    x=0;
    v=3;
    a=0;
    showcar2=false;
    }
  else if (  option=="uniform motion v=2"){
    x=0;
    v=2;
    a=0;
    showcar2=false;
    }
  else if (  option=="uniform motion v=-3"){
    x=0;
    v=-3;
    a=0;
    showcar2=false;
    }
  else if (  option=="uniform motion v=-2"){
    x=0;
    v=-2;
    a=0;
    showcar2=false;
    }
  else if (  option=="x₀=10,v₀=0.75"){
    x=10;
    v=0.75;
    a=0;
    showcar2=false;
    }
    else if (  option=="x₀=5,v₀=2"){
    x=5;
    v=2;
    a=0;
    showcar2=false;
    }
    else if (  option=="ConcepTest 1"){
   _view.worldgraph.setSelectedOptions(["x vs t"]);
     world=false;
    xvst=true;
    vvst=false;
    avst=false;
  Width1 = "0%";
  Width2 = "100%";
  Widthv = "0%";
  Widtha = "0%";
  x=5;
    v=5;
    a=-1;
    showcar2=false;
    //set view to x vs t graph only
   
    }
    else if (  option=="ConcepTest 2"){
   _view.worldgraph.setSelectedOptions(["x vs t"]);
     world=false;
    xvst=true;
    vvst=false;
    avst=false;
  Width1 = "0%";
  Width2 = "100%";
  Widthv = "0%";
  Widtha = "0%";
  x=0;
    v=5;
    a=0;
    showcar2=true;
    x2=0;
    v2=8;
    a2=-2;
    
    
    }
    
    else if (  option=="ConcepTest 6 1"){
   x=0;
    v=4;
    a=0;
    showcar2=false;
    
    
    }
    else if (  option=="ConcepTest 6 2"){
   x=0;
    v=-3;
    a=0;
    showcar2=false;
    
    
    }
    
    else if (  option=="ConcepTest 6 3"){
   
  x=-18;
    v=6;
    a=0;
    showcar2=true;
    x2=-9;
    v2=3;
    a2=0;
    
    
    }
    
    
    xs=x; // for modelling pedaogogy to work
  vs=v;
  //  dxShadows[1] = (v*1+0.5*a*1^2).toFixed(1); // set first position generalise solution
  // xanddxShadows[1] = (x+v*1+0.5*a*1^2).toFixed(1);
  //need for always syncing with initial x, v ,a
  for (var counter=0; counter<numShadows  ; counter++) {
   xShadows[counter] = x;
  // dxShadows[counter] = ((v+a*1)*1).toFixed(1); //assume dt =1
  // xanddxShadows[counter] = (x+((v+a*1)*1)/2).toFixed(1); //position text dx
  yShadows[counter] = y;
  tShadows[counter]=t;
  vShadows[counter]=v;
  vShadowsaverage[counter]=v;
  aShadows[counter]=a;
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.worldgraph.linkProperty("Options",  function() { return ["","world","x vs t","v vs t","a vs t","FB Diagram","E vs t","","world and x vs t","world and v vs t","world and a vs t","world and E","world and FBD","show motion diagram","hide motion diagram","show displacement every sec","hide displacement every sec","","show model","hide model"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  //var option = _view.worldgraph.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.worldgraph.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["world","x vs t"," v vs t","a vs t","world and x vs t","world and v vs t","world and a vs t"]
  if ( option=="world"){
    world=true;
    xvst=false;
    vvst=false;
    avst=false;
    Evst=false;
    Fvst=false;
  Width1 = "100%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "0%";
  Widthe = "0%";
  Widthf = "0%";
    }
  else if ( option=="x vs t"){
    world=false;
    xvst=true;
    vvst=false;
    avst=false;
    Evst=false;
    Fvst=false;
  Width1 = "0%";
  Width2 = "100%";
  Widthv = "0%";
  Widtha = "0%";
  Widthe = "0%";
  Widthf = "0%";
    }  
    else if ( option=="v vs t"){
    world=false;
    xvst=false;
    vvst=true;
    avst=false;
    Evst=false;
    Fvst=false;
  Width1 = "0%";
  Width2 = "0%";
  Widthv = "100%";
  Widtha = "0%";
  Widthe = "0%";
  Widthf = "0%";
    }  
    else if ( option=="a vs t"){
   world=false;
    xvst=false;
    vvst=false;
    avst=true;
    Evst=false;
    Fvst=false;
  Width1 = "0%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "100%";
  Widthe = "0%";
  Widthf = "0%";
    }  
   else if ( option=="E vs t"){
  world=false;
    xvst=false;
    vvst=false;
    avst=false;
    Evst=true;
    Fvst=false;
  Width1 = "0%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "0%";
  Widthe = "100%";
  Widthf = "0%";
  //disabledworld=false;
  } 
    else if ( option=="FB Diagram"){
  world=false;
    xvst=false;
    vvst=false;
    avst=false;
    Evst=false;
    Fvst=true;
  Width1 = "0%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "0%";
  Widthe = "0%";
  Widthf = "100%";
    } 
    
    
  else if ( option=="world and x vs t"){
    world=true;
    xvst=true;
    vvst=false;
    avst=false;
    Evst=false;
    Fvst=false;
  Width1 = "50%";
  Width2 = "50%";
  Widthv = "0%";
  Widtha = "0%";
  Widthe = "0%";
  Widthf = "0%";
    }  
    else if ( option=="world and v vs t"){
   world=true;
    xvst=false;
    vvst=true;
    avst=false;
    Evst=false;
    Fvst=false;
  Width1 = "50%";
  Width2 = "0%";
  Widthv = "50%";
  Widtha = "0%";
  Widthe = "0%";
  Widthf = "0%";
    }  
    else if ( option=="world and a vs t"){
    world=true;
    xvst=false;
    vvst=false;
    avst=true;
    Evst=false;
    Fvst=false;
  Width1 = "50%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "50%";
  Widthe = "0%";
  Widthf = "0%";
    }  
    
    else if ( option=="world and FBD"){
    world=true;
    xvst=false;
    vvst=false;
    avst=false;
    Evst=false;
    Fvst=true;
  Width1 = "50%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "0%";
  Widthe = "0%";
  Widthf = "50%";
    } 
     else if ( option=="world and E"){
   world=true;
    xvst=false;
    vvst=false;
    avst=false;
    Evst=true;
    Fvst=false;
  Width1 = "50%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "0%";
  Widthe = "50%";
  Widthf = "0%";
    } 
    
      else if ( option=="show model"){
  showmodel=true;
  }
  else if ( option=="hide model"){
  showmodel=false;
  }
    
      //"show motion diagram","hide motion diagram","show displacement every sec","hide displacement every sec"
    else if (  option=="show motion diagram"){
    showmotiondiagram =true; 
      }
      else if (  option=="hide motion diagram"){
    showmotiondiagram =false; 
      }
      else if (  option=="show displacement every sec"){
    showdisplacementeverysec =true; 
      }
      else if (  option=="hide displacement every sec"){
    showdisplacementeverysec  =false; 
      }
  /*  
    if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg);
  }
  */;

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.worldgraph.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'worldgraph'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  text="paused";
  isPaused=true;
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();
  isPaused=false;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();
  //_step();
  //_step();
  //_step();
  //_step(); // 5times due to FPS is 5;

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.initialize.setAction("OnClick", function(_data,_info) {
  storedata();

}); // HtmlView Page setting action 'OnClick' for element 'initialize'
          _view.initialize.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'initialize'
          _view.resetButton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.modeling.linkProperty("Height",  function() { return (showmodel)?"0":"100%"; } ); // HtmlView Page linking property 'Height' for element 'modeling'
          _view.modeling.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'modeling'
          _view.model43.setAction("OnClick", function(_data,_info) {
  if (inputdropmenu==true){
    inputdropmenu=false;
    }
    else if (inputdropmenu==false){
    inputdropmenu=true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'model43'
          _view.model43.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'model43'
          _view.models2.linkProperty("Options",  function() { return ["0","t","2*t","-t","-2*t","0.5*1*t^2","5*t + 0.5*-t^2","0.5*-t^2","-4*t + 0.5*t^2","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models2'
          _view.models2.setAction("OnChange", function(_data,_info) {
  showmodel=true;
  var opts = _view.models2.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  functionY=option+"";
  xmodel=_view.fField.evaluate({ t : t, x : xmodel }); 
  if (option=="show me"){
    if (_view.comboBox.getProperty("SelectedOptions")=="ConcepTest 6 3") {
    functionY=  "if(t<3,-18.00+6.00*t ,-22.5+9*t-0.5*t^2)";
      }
      else {
  functionY= _view._format(xs,"0.00")+"+"+_view._format(vs,"0.00")+"*t + 0.5*" +_view._format(a,"0.00")+"*t^2";  
    }
    }
  _view._update();
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'models2'
          _view.models2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models2'
          _view.models2.linkProperty("Display",  function() { return inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models2'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.fField.linkProperty("Display",  function() { return !inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'fField'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return (_isMobile)?"":"Kinematics Model \nworld  view"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnRelease", function(_data,_info) {
  _view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());
  _view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());
  //_play();

}); // HtmlView Page setting action 'OnRelease' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("XTickStep",  function() { return _view.plottingPanel.getProperty("MaximumX")<21?2:10; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDrag", function(_data,_info) {
  _pause();
  _view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());
  _view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());
  //_view.plottingPanel.setProperty("MinimumY",-0.35);
  //_view.plottingPanel.setProperty("MaximumY",0.65);
  _view.plottingPanel.setProperty("MinimumX",Math.max(_view.plottingPanel.getProperty("MinimumX"),-80));
  _view.plottingPanel.setProperty("MaximumX",Math.min(_view.plottingPanel.getProperty("MaximumX"),80));

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnZoom", function(_data,_info) {
  _pause();
  _view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());
  _view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());
  _view.plottingPanel.setProperty("MinimumX",Math.max(_view.plottingPanel.getProperty("MinimumX"),-80));
  _view.plottingPanel.setProperty("MaximumX",Math.min(_view.plottingPanel.getProperty("MaximumX"),80));
  _view.plottingPanel.setProperty("MinimumY",Math.max(_view.plottingPanel.getProperty("MinimumY"),-1.6));
  _view.plottingPanel.setProperty("MaximumY",Math.min(_view.plottingPanel.getProperty("MaximumY"),1.6));
  var centre =(_view.plottingPanel.getRealWorldXMax()+_view.plottingPanel.getRealWorldXMin())/2;
  var rangeX =(_view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin())/2;
  //_view.plottingPanel.setRealWorldXMax(Math.max(centre+rangeX/2,3));
  //_view.plottingPanel.setRealWorldXMax(3);
  _view.plottingPanel.setZoomLimits([10,160]);

}); // HtmlView Page setting action 'OnZoom' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return (_isMobile)?"":"displacement=" +_view._format(x-xs,"0.00")+ " m"+"\ntotal distance="+_view._format(totaldistance,"0.00")+" m"+" , t  =  "+_view._format(t,"00.00")+ " s"; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Display",  function() { return world?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanel'
          _view.trace.linkProperty("Skip",  function() { return (1/dt); } ); // HtmlView Page linking property 'Skip' for element 'trace'
          _view.trace.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.cartext.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'cartext'
          _view.cartext.setAction("OnDrag", function(_data,_info) {
  _view.comboBox.setSelectedOptions(["user defined"]);
  x = Math.round(x);
  xs = x ;
  for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {
   xShadows[counter] = x;
  yShadows[counter] = y;
  tShadows[counter]=t;
  vShadows[counter]=v;
  aShadows[counter]=a;
  }
  vx=0;
  if (x <=-20) x = -20;
  if (x >=20) x = 20;
  //selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'cartext'
          _view.car2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'car2'
          _view.car.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'car'
          _view.secondcar2.linkProperty("Visibility",  function() { return showcar2; }, function(_v) { showcar2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'secondcar2'
          _view.cartext2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'cartext2'
          _view.secondcar8.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'secondcar8'
          _view.secondcar.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'secondcar'
          _view.shape22.setAction("OnDrag", function(_data,_info) {
  _view.comboBox.setSelectedOptions(["user defined"]);
  x2 = Math.round(x2);
  if (x2 <=-20) x2 = -20;
  if (x2 >=20) x2 = 20;
  //selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'shape22'
          _view.shape22.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'shape22'
          _view.secondcar7.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'secondcar7'
          _view.secondcar7.linkProperty("Visibility",  function() { return showcar2; }, function(_v) { showcar2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'secondcar7'
          _view.v3.linkProperty("SizeX",  function() { return v2; }, function(_v) { v2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'v3'
          _view.group23.linkProperty("X",  function() { return v2; }, function(_v) { v2 = _v; } ); // HtmlView Page linking property 'X' for element 'group23'
          _view.v23.linkProperty("Text",  function() { return "v₂ ="+v2.toFixed(2) + " m/s"; } ); // HtmlView Page linking property 'Text' for element 'v23'
          _view.velocitydrag222.linkProperty("X",  function() { return v2; }, function(_v) { v2 = _v; } ); // HtmlView Page linking property 'X' for element 'velocitydrag222'
          _view.velocitydrag222.setAction("OnDrag", function(_data,_info) {
  v2 = Math.round(v2);
  //vdrag = true;
  _view.comboBox.setSelectedOptions(["user defined"]);

}); // HtmlView Page setting action 'OnDrag' for element 'velocitydrag222'
          _view.a2.linkProperty("SizeX",  function() { return a2; }, function(_v) { a2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'a2'
          _view.group222.linkProperty("X",  function() { return a2; }, function(_v) { a2 = _v; } ); // HtmlView Page linking property 'X' for element 'group222'
          _view.v222.linkProperty("Text",  function() { return "a₂ ="+a2.toFixed(2) + " m/s²"; } ); // HtmlView Page linking property 'Text' for element 'v222'
          _view.adrag2.linkProperty("X",  function() { return a2; }, function(_v) { a2 = _v; } ); // HtmlView Page linking property 'X' for element 'adrag2'
          _view.adrag2.setAction("OnDrag", function(_data,_info) {
  a2 = Math.round(a2);
  _view.comboBox.setSelectedOptions(["user defined"]);

}); // HtmlView Page setting action 'OnDrag' for element 'adrag2'
          _view.displacevleongster.linkProperty("Visibility",  function() { return showmotiondiagram; }, function(_v) { showmotiondiagram = _v; } ); // HtmlView Page linking property 'Visibility' for element 'displacevleongster'
          _view.vxShadowsvalues2.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'vxShadowsvalues2'
          _view.vxShadowsvalues2.linkProperty("X",  function() { return xanddxShadows; }, function(_v) { xanddxShadows = _v; } ); // HtmlView Page linking property 'X' for element 'vxShadowsvalues2'
          _view.vxShadowsvalues2.linkProperty("Y",  function() { return yShadows; }, function(_v) { yShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'vxShadowsvalues2'
          _view.vxShadowsvalues2.linkProperty("Text",  function() { return vShadowstext; }, function(_v) { vShadowstext = _v; } ); // HtmlView Page linking property 'Text' for element 'vxShadowsvalues2'
          _view.group7.linkProperty("Visibility",  function() { return showmotiondiagram; }, function(_v) { showmotiondiagram = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group7'
          _view.vset.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'vset'
          _view.vset.linkProperty("SizeX",  function() { return vShadowsaverage; }, function(_v) { vShadowsaverage = _v; } ); // HtmlView Page linking property 'SizeX' for element 'vset'
          _view.vset.linkProperty("X",  function() { return xShadows; }, function(_v) { xShadows = _v; } ); // HtmlView Page linking property 'X' for element 'vset'
          _view.vset.linkProperty("LineColor",  function() { return colorv; }, function(_v) { colorv = _v; } ); // HtmlView Page linking property 'LineColor' for element 'vset'
          _view.vset.linkProperty("Y",  function() { return yShadows; }, function(_v) { yShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'vset'
          _view.shadows.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shadows'
          _view.shadows.linkProperty("FillColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'FillColor' for element 'shadows'
          _view.shadows.linkProperty("X",  function() { return xShadows; }, function(_v) { xShadows = _v; } ); // HtmlView Page linking property 'X' for element 'shadows'
          _view.shadows.linkProperty("LineColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'LineColor' for element 'shadows'
          _view.shadows.linkProperty("Y",  function() { return yShadows; }, function(_v) { yShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'shadows'
          _view.shadows.linkProperty("Visibility",  function() { return t>0&&showmotiondiagram; } ); // HtmlView Page linking property 'Visibility' for element 'shadows'
          _view.displace.linkProperty("Visibility",  function() { return showdisplacementeverysec; }, function(_v) { showdisplacementeverysec = _v; } ); // HtmlView Page linking property 'Visibility' for element 'displace'
          _view.dxShadows.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'dxShadows'
          _view.dxShadows.linkProperty("X",  function() { return xanddxShadows; }, function(_v) { xanddxShadows = _v; } ); // HtmlView Page linking property 'X' for element 'dxShadows'
          _view.dxShadows.linkProperty("Y",  function() { return yShadows; }, function(_v) { yShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'dxShadows'
          _view.dxShadows.linkProperty("Text",  function() { return dxShadows; }, function(_v) { dxShadows = _v; } ); // HtmlView Page linking property 'Text' for element 'dxShadows'
          _view.displace0_2.linkProperty("Visibility",  function() { return showdisplacementeverysec; }, function(_v) { showdisplacementeverysec = _v; } ); // HtmlView Page linking property 'Visibility' for element 'displace0_2'
          _view.arrowSetdx.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSetdx'
          _view.arrowSetdx.linkProperty("SizeX",  function() { return dxShadows; }, function(_v) { dxShadows = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSetdx'
          _view.arrowSetdx.linkProperty("X",  function() { return xShadows; }, function(_v) { xShadows = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSetdx'
          _view.arrowSetdx.linkProperty("Y",  function() { return yShadows; }, function(_v) { yShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSetdx'
          _view.xShadowsvalues.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'xShadowsvalues'
          _view.xShadowsvalues.linkProperty("X",  function() { return xanddxShadows; }, function(_v) { xanddxShadows = _v; } ); // HtmlView Page linking property 'X' for element 'xShadowsvalues'
          _view.xShadowsvalues.linkProperty("Y",  function() { return yShadows; }, function(_v) { yShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'xShadowsvalues'
          _view.xShadowsvalues.linkProperty("Text",  function() { return xShadowstext; }, function(_v) { xShadowstext = _v; } ); // HtmlView Page linking property 'Text' for element 'xShadowsvalues'
          _view.xset.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'xset'
          _view.xset.linkProperty("SizeX",  function() { return dxShadows; }, function(_v) { dxShadows = _v; } ); // HtmlView Page linking property 'SizeX' for element 'xset'
          _view.xset.linkProperty("X",  function() { return xShadows; }, function(_v) { xShadows = _v; } ); // HtmlView Page linking property 'X' for element 'xset'
          _view.xset.linkProperty("Y",  function() { return yShadows; }, function(_v) { yShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'xset'
          _view.shape2.linkProperty("FillColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'FillColor' for element 'shape2'
          _view.shape2.setAction("OnDrag", function(_data,_info) {
  _view.comboBox.setSelectedOptions(["user defined"]);
  xs = x ;
  if (t ==0) {
  xShadows[0] = x;
  }
  vx=0;
  if (x <=-20) x = -20;
  if (x >=20) x = 20;
  //selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'shape2'
          _view.shape2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shape2'
          _view.xDRAG.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'xDRAG'
          _view.xDRAG.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'xDRAG'
          _view.xDRAG.setAction("OnDrag", function(_data,_info) {
  _view.comboBox.setSelectedOptions(["user defined"]);
  var position = _view.plottingPanel.getInteraction().getInteractionPoint();
  //x = Math.round(_info.point[0]);
  x = Math.round(position[0]);
  //x = Math.round(x);
  xs = x ;
  for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {
   xShadows[counter] = x;
  yShadows[counter] = y;
  tShadows[counter]=t;
  vShadows[counter]=v;
  aShadows[counter]=a;
  }
  vx=0;
  if (x <=-20) x = -20;
  if (x >=20) x = 20;
  //selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'xDRAG'
          _view.position.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'position'
          _view.v.linkProperty("SizeX",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'SizeX' for element 'v'
          _view.group2.linkProperty("X",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.v2.linkProperty("Text",  function() { return "v ="+v.toFixed(2) + " m/s"; } ); // HtmlView Page linking property 'Text' for element 'v2'
          _view.velocitydrag22.setAction("OnRelease", function(_data,_info) {
  vdrag = false;

}); // HtmlView Page setting action 'OnRelease' for element 'velocitydrag22'
          _view.velocitydrag22.linkProperty("X",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'X' for element 'velocitydrag22'
          _view.velocitydrag22.setAction("OnDrag", function(_data,_info) {
  var position = _view.plottingPanel.getInteraction().getInteractionPoint();
  vs = v = Math.round(position[0]);
  //vs = v = Math.round(v);
  vdrag = true;
  for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {
  // xShadows[counter] = x;
  //yShadows[counter] = y;
  tShadows[counter]=t;
  vShadows[counter]=v;
  //aShadows[counter]=a;
  }
  _view.comboBox.setSelectedOptions(["user defined"]);

}); // HtmlView Page setting action 'OnDrag' for element 'velocitydrag22'
          _view.a.linkProperty("SizeX",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'SizeX' for element 'a'
          _view.group22.linkProperty("X",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'X' for element 'group22'
          _view.v22.linkProperty("Text",  function() { return "a ="+a.toFixed(2) + " m/s²"; } ); // HtmlView Page linking property 'Text' for element 'v22'
          _view.adrag.linkProperty("X",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'X' for element 'adrag'
          _view.adrag.setAction("OnDrag", function(_data,_info) {
  var position = _view.plottingPanel.getInteraction().getInteractionPoint();
  a = Math.round(position[0]);
  //a = Math.round(a);
  _view.comboBox.setSelectedOptions(["user defined"]);
  for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {
  // xShadows[counter] = x;
  //yShadows[counter] = y;
  tShadows[counter]=t;
  //vShadows[counter]=v;
  aShadows[counter]=a;
  }

}); // HtmlView Page setting action 'OnDrag' for element 'adrag'
          _view.model2.linkProperty("X",  function() { return xmodel; }, function(_v) { xmodel = _v; } ); // HtmlView Page linking property 'X' for element 'model2'
          _view.model2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'model2'
          _view.model2.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model2'
          _view.model2.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model2'
          _view.modelvy.linkProperty("X",  function() { return ymodelvy; }, function(_v) { ymodelvy = _v; } ); // HtmlView Page linking property 'X' for element 'modelvy'
          _view.modelvy.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'modelvy'
          _view.modelvy.linkProperty("Visibility",  function() { return ymodelvyshow; }, function(_v) { ymodelvyshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'modelvy'
          _view.modelvy.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'modelvy'
          _view.modeay.linkProperty("X",  function() { return ymodelay; }, function(_v) { ymodelay = _v; } ); // HtmlView Page linking property 'X' for element 'modeay'
          _view.modeay.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'modeay'
          _view.modeay.linkProperty("Visibility",  function() { return ymodelayshow; }, function(_v) { ymodelayshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'modeay'
          _view.modeay.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'modeay'
          _view.plottingPanelxvst.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("TRMessage",  function() { return texts; }, function(_v) { texts = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.setAction("OnOrientationChange", function(_data,_info) {
  _update();

}); // HtmlView Page setting action 'OnOrientationChange' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.setAction("OnDrag", function(_data,_info) {
  _view.plottingPanelxvst.getAxisX().setAbsoluteY(_view.plottingPanelxvst.getGrid().getFixedTickY());
  _view.plottingPanelxvst.getAxisY().setAbsoluteX(_view.plottingPanelxvst.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("Visibility",  function() { return xvst; }, function(_v) { xvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("BRMessage",  function() { return "displacement=" +_view._format(x-xs,"0.00")+ " m"+"\ntotal distance="+_view._format(totaldistance,"0.00")+" m"; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("Display",  function() { return xvst?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanelxvst'
          _view.model22.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'model22'
          _view.model22.linkProperty("Y",  function() { return xmodel; }, function(_v) { xmodel = _v; } ); // HtmlView Page linking property 'Y' for element 'model22'
          _view.model22.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model22'
          _view.model.linkProperty("FunctionY",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'model'
          _view.model.linkProperty("Maximum",  function() { return Math.max(t,10); } ); // HtmlView Page linking property 'Maximum' for element 'model'
          _view.model.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model'
          _view.plotTrail2.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'plotTrail2'
          _view.plotTrail2.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'plotTrail2'
          _view.plotTrail2.linkProperty("LineColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'LineColor' for element 'plotTrail2'
          _view.plotTrail2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'plotTrail2'
          _view.plotTrail2.linkProperty("Visibility",  function() { return checkx; }, function(_v) { checkx = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plotTrail2'
          _view.plotTrail2.linkProperty("InputY",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputY' for element 'plotTrail2'
          _view.group3.linkProperty("Visibility",  function() { return showcar2; }, function(_v) { showcar2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group3'
          _view.secondcar4.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'secondcar4'
          _view.secondcar4.linkProperty("Y",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'Y' for element 'secondcar4'
          _view.secondcar4.linkProperty("Visibility",  function() { return checkx; }, function(_v) { checkx = _v; } ); // HtmlView Page linking property 'Visibility' for element 'secondcar4'
          _view.secondcar4.setAction("OnDrag", function(_data,_info) {
  x2 = Math.round(x2);
  if (x2 <=-20) x2 = -20;
  if (x2 >=20) x2 = 20;

}); // HtmlView Page setting action 'OnDrag' for element 'secondcar4'
          _view.secondca.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'secondca'
          _view.secondca.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'secondca'
          _view.secondca.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'secondca'
          _view.secondca.linkProperty("Visibility",  function() { return checkx; }, function(_v) { checkx = _v; } ); // HtmlView Page linking property 'Visibility' for element 'secondca'
          _view.secondca.linkProperty("InputY",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'secondca'
          _view.shadows2.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shadows2'
          _view.shadows2.linkProperty("FillColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'FillColor' for element 'shadows2'
          _view.shadows2.linkProperty("X",  function() { return tShadows; }, function(_v) { tShadows = _v; } ); // HtmlView Page linking property 'X' for element 'shadows2'
          _view.shadows2.linkProperty("Y",  function() { return xShadows; }, function(_v) { xShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'shadows2'
          _view.shadows2.linkProperty("Visibility",  function() { return checkx; }, function(_v) { checkx = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shadows2'
          _view.trailDot2.linkProperty("FillColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'FillColor' for element 'trailDot2'
          _view.trailDot2.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot2'
          _view.trailDot2.linkProperty("Y",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot2'
          _view.trailDot2.linkProperty("Visibility",  function() { return checkx; }, function(_v) { checkx = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot2'
          _view.trailDot2.setAction("OnDrag", function(_data,_info) {
  _view.comboBox.setSelectedOptions(["user defined"]);
  x = Math.round(x);
  if (x <=-20) x = -20;
  if (x >=20) x = 20;
  for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {
   xShadows[counter] = x; //put far away
  yShadows[counter] = y;
  tShadows[counter]=t;
  vShadows[counter]=v;
  aShadows[counter]=a;
  }

}); // HtmlView Page setting action 'OnDrag' for element 'trailDot2'
          _view.xset22.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'xset22'
          _view.xset22.linkProperty("X",  function() { return tShadows; }, function(_v) { tShadows = _v; } ); // HtmlView Page linking property 'X' for element 'xset22'
          _view.xset22.linkProperty("LineColor",  function() { return colorv; }, function(_v) { colorv = _v; } ); // HtmlView Page linking property 'LineColor' for element 'xset22'
          _view.xset22.linkProperty("SizeY",  function() { return xShadows; }, function(_v) { xShadows = _v; } ); // HtmlView Page linking property 'SizeY' for element 'xset22'
          _view.plottingPanelxvst2.linkProperty("Width",  function() { return Widthv; }, function(_v) { Widthv = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("TRMessage",  function() { return textv; }, function(_v) { textv = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.setAction("OnRelease", function(_data,_info) {
  _view.plottingPanelxvst2.getAxisX().setAbsoluteY(_view.plottingPanelxvst2.getGrid().getFixedTickY());
  _view.plottingPanelxvst2.getAxisY().setAbsoluteX(_view.plottingPanelxvst2.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnRelease' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("XTickStep",  function() { return t<11?1:10; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.setAction("OnDrag", function(_data,_info) {
  _view.plottingPanelxvst2.getAxisX().setAbsoluteY(_view.plottingPanelxvst2.getGrid().getFixedTickY());
  _view.plottingPanelxvst2.getAxisY().setAbsoluteX(_view.plottingPanelxvst2.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.setAction("OnZoom", function(_data,_info) {
  _view.plottingPanelxvst2.getAxisX().setAbsoluteY(_view.plottingPanelxvst2.getGrid().getFixedTickY());
  _view.plottingPanelxvst2.getAxisY().setAbsoluteX(_view.plottingPanelxvst2.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnZoom' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("BRMessage",  function() { return textspeed; }, function(_v) { textspeed = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("Display",  function() { return vvst?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanelxvst2'
          _view.model7.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'model7'
          _view.model7.linkProperty("Y",  function() { return vymodel; }, function(_v) { vymodel = _v; } ); // HtmlView Page linking property 'Y' for element 'model7'
          _view.model7.linkProperty("Visibility",  function() { return ymodelvyshow; }, function(_v) { ymodelvyshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model7'
          _view.model5.linkProperty("FunctionY",  function() { return functionY2v; }, function(_v) { functionY2v = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'model5'
          _view.model5.linkProperty("Maximum",  function() { return Math.max(t,10); } ); // HtmlView Page linking property 'Maximum' for element 'model5'
          _view.model5.linkProperty("Visibility",  function() { return ymodelvyshow; }, function(_v) { ymodelvyshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model5'
          _view.group4.linkProperty("Visibility",  function() { return showcar2; }, function(_v) { showcar2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group4'
          _view.secondcar5.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'secondcar5'
          _view.secondcar5.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'secondcar5'
          _view.secondcar5.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'secondcar5'
          _view.secondcar5.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'secondcar5'
          _view.secondcar5.linkProperty("InputY",  function() { return v2; }, function(_v) { v2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'secondcar5'
          _view.secondcar3.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'secondcar3'
          _view.secondcar3.linkProperty("Y",  function() { return v2; }, function(_v) { v2 = _v; } ); // HtmlView Page linking property 'Y' for element 'secondcar3'
          _view.secondcar3.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'secondcar3'
          _view.plotTrail22.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'plotTrail22'
          _view.plotTrail22.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'plotTrail22'
          _view.plotTrail22.linkProperty("LineColor",  function() { return memorycolorv; }, function(_v) { memorycolorv = _v; } ); // HtmlView Page linking property 'LineColor' for element 'plotTrail22'
          _view.plotTrail22.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'plotTrail22'
          _view.plotTrail22.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plotTrail22'
          _view.plotTrail22.linkProperty("InputY",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'InputY' for element 'plotTrail22'
          _view.shadows223.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shadows223'
          _view.shadows223.linkProperty("FillColor",  function() { return memorycolorv; }, function(_v) { memorycolorv = _v; } ); // HtmlView Page linking property 'FillColor' for element 'shadows223'
          _view.shadows223.linkProperty("X",  function() { return tShadows; }, function(_v) { tShadows = _v; } ); // HtmlView Page linking property 'X' for element 'shadows223'
          _view.shadows223.linkProperty("Y",  function() { return vShadows; }, function(_v) { vShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'shadows223'
          _view.shadows223.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shadows223'
          _view.trailDot222.linkProperty("FillColor",  function() { return memorycolorv; }, function(_v) { memorycolorv = _v; } ); // HtmlView Page linking property 'FillColor' for element 'trailDot222'
          _view.trailDot222.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot222'
          _view.trailDot222.linkProperty("Y",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot222'
          _view.trailDot222.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot222'
          _view.trailDot222.setAction("OnDrag", function(_data,_info) {
  _view.comboBox.setSelectedOptions(["user defined"]);
  vs = v = Math.round(v);
  vdrag = true;
  for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {
   xShadows[counter] = x; //put far away
  yShadows[counter] = y;
  tShadows[counter]=t;
  vShadows[counter]=v;
  aShadows[counter]=a;
  }

}); // HtmlView Page setting action 'OnDrag' for element 'trailDot222'
          _view.vset2.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'vset2'
          _view.vset2.linkProperty("X",  function() { return tShadows; }, function(_v) { tShadows = _v; } ); // HtmlView Page linking property 'X' for element 'vset2'
          _view.vset2.linkProperty("LineColor",  function() { return colorv; }, function(_v) { colorv = _v; } ); // HtmlView Page linking property 'LineColor' for element 'vset2'
          _view.vset2.linkProperty("SizeY",  function() { return vShadows; }, function(_v) { vShadows = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vset2'
          _view.plottingPanelxvst3.linkProperty("Width",  function() { return Widtha; }, function(_v) { Widtha = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst3'
          _view.plottingPanelxvst3.linkProperty("TRMessage",  function() { return texta; }, function(_v) { texta = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanelxvst3'
          _view.plottingPanelxvst3.setAction("OnRelease", function(_data,_info) {
  _view.plottingPanelxvst3.getAxisX().setAbsoluteY(_view.plottingPanelxvst3.getGrid().getFixedTickY());
  _view.plottingPanelxvst3.getAxisY().setAbsoluteX(_view.plottingPanelxvst3.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnRelease' for element 'plottingPanelxvst3'
          _view.plottingPanelxvst3.linkProperty("XTickStep",  function() { return t<11?1:10; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanelxvst3'
          _view.plottingPanelxvst3.setAction("OnDrag", function(_data,_info) {
  _view.plottingPanelxvst3.getAxisX().setAbsoluteY(_view.plottingPanelxvst3.getGrid().getFixedTickY());
  _view.plottingPanelxvst3.getAxisY().setAbsoluteX(_view.plottingPanelxvst3.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanelxvst3'
          _view.plottingPanelxvst3.setAction("OnZoom", function(_data,_info) {
  _view.plottingPanelxvst3.getAxisX().setAbsoluteY(_view.plottingPanelxvst3.getGrid().getFixedTickY());
  _view.plottingPanelxvst3.getAxisY().setAbsoluteX(_view.plottingPanelxvst3.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnZoom' for element 'plottingPanelxvst3'
          _view.plottingPanelxvst3.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanelxvst3'
          _view.plottingPanelxvst3.linkProperty("Display",  function() { return avst?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanelxvst3'
          _view.model42.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'model42'
          _view.model42.linkProperty("Y",  function() { return aymodel; }, function(_v) { aymodel = _v; } ); // HtmlView Page linking property 'Y' for element 'model42'
          _view.model42.linkProperty("Visibility",  function() { return ymodelayshow; }, function(_v) { ymodelayshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model42'
          _view.model6.linkProperty("FunctionY",  function() { return functionY2a; }, function(_v) { functionY2a = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'model6'
          _view.model6.linkProperty("Maximum",  function() { return Math.max(t,10); } ); // HtmlView Page linking property 'Maximum' for element 'model6'
          _view.model6.linkProperty("Visibility",  function() { return ymodelayshow; }, function(_v) { ymodelayshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model6'
          _view.group5.linkProperty("Visibility",  function() { return _view.comboBox.getProperty("SelectedOptions")=="ConcepTest 2"; } ); // HtmlView Page linking property 'Visibility' for element 'group5'
          _view.scondcar.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'scondcar'
          _view.scondcar.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'scondcar'
          _view.scondcar.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'scondcar'
          _view.scondcar.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'scondcar'
          _view.scondcar.linkProperty("InputY",  function() { return a2; }, function(_v) { a2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'scondcar'
          _view.secondcar6.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'secondcar6'
          _view.secondcar6.linkProperty("Y",  function() { return a2; }, function(_v) { a2 = _v; } ); // HtmlView Page linking property 'Y' for element 'secondcar6'
          _view.secondcar6.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'secondcar6'
          _view.plotTrail23.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'plotTrail23'
          _view.plotTrail23.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'plotTrail23'
          _view.plotTrail23.linkProperty("LineColor",  function() { return memorycolora; }, function(_v) { memorycolora = _v; } ); // HtmlView Page linking property 'LineColor' for element 'plotTrail23'
          _view.plotTrail23.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'plotTrail23'
          _view.plotTrail23.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plotTrail23'
          _view.plotTrail23.linkProperty("InputY",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'InputY' for element 'plotTrail23'
          _view.shadows2223.linkProperty("NumberOfElements",  function() { return numShadows; }, function(_v) { numShadows = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shadows2223'
          _view.shadows2223.linkProperty("FillColor",  function() { return memorycolora; }, function(_v) { memorycolora = _v; } ); // HtmlView Page linking property 'FillColor' for element 'shadows2223'
          _view.shadows2223.linkProperty("X",  function() { return tShadows; }, function(_v) { tShadows = _v; } ); // HtmlView Page linking property 'X' for element 'shadows2223'
          _view.shadows2223.linkProperty("Y",  function() { return aShadows; }, function(_v) { aShadows = _v; } ); // HtmlView Page linking property 'Y' for element 'shadows2223'
          _view.shadows2223.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shadows2223'
          _view.trailDot233.linkProperty("FillColor",  function() { return memorycolora; }, function(_v) { memorycolora = _v; } ); // HtmlView Page linking property 'FillColor' for element 'trailDot233'
          _view.trailDot233.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot233'
          _view.trailDot233.linkProperty("Y",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot233'
          _view.trailDot233.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot233'
          _view.trailDot233.setAction("OnDrag", function(_data,_info) {
  _view.comboBox.setSelectedOptions(["user defined"]);
  a = Math.round(a);
  for (var counter=0; counter<numShadows /* Iterations */ ; counter++) {
   xShadows[counter] = x; //put far away
  yShadows[counter] = y;
  tShadows[counter]=t;
  vShadows[counter]=v;
  aShadows[counter]=a;
  }

}); // HtmlView Page setting action 'OnDrag' for element 'trailDot233'
          _view.plottingPanele.linkProperty("Width",  function() { return Widthe; }, function(_v) { Widthe = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanele'
          _view.plottingPanele.linkProperty("Visibility",  function() { return Evst; }, function(_v) { Evst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanele'
          _view.plottingPanele.linkProperty("Display",  function() { return Evst?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanele'
          _view.group24.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'group24'
          _view.group24.linkProperty("Y",  function() { return ke; }, function(_v) { ke = _v; } ); // HtmlView Page linking property 'Y' for element 'group24'
          _view.textpe2.linkProperty("Text",  function() { return "KE = "+_view._format(ke,"0.00")+ " J"; } ); // HtmlView Page linking property 'Text' for element 'textpe2'
          _view.textpe2.linkProperty("Visibility",  function() { return keshow; }, function(_v) { keshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textpe2'
          _view.yDot.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'yDot'
          _view.yDot.linkProperty("Y",  function() { return ke; }, function(_v) { ke = _v; } ); // HtmlView Page linking property 'Y' for element 'yDot'
          _view.yDot.linkProperty("Visibility",  function() { return keshow; }, function(_v) { keshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'yDot'
          _view.yTrail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'yTrail'
          _view.yTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'yTrail'
          _view.yTrail.linkProperty("Visibility",  function() { return keshow; }, function(_v) { keshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'yTrail'
          _view.yTrail.linkProperty("InputY",  function() { return ke; }, function(_v) { ke = _v; } ); // HtmlView Page linking property 'InputY' for element 'yTrail'
          _view.pe2.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'pe2'
          _view.pe2.linkProperty("Y",  function() { return pe; }, function(_v) { pe = _v; } ); // HtmlView Page linking property 'Y' for element 'pe2'
          _view.textpe.linkProperty("Text",  function() { return "PE = "+_view._format(pe,"0.00")+ " J"; } ); // HtmlView Page linking property 'Text' for element 'textpe'
          _view.textpe.linkProperty("Visibility",  function() { return peshow; }, function(_v) { peshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textpe'
          _view.pe3.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'pe3'
          _view.pe3.linkProperty("Y",  function() { return pe; }, function(_v) { pe = _v; } ); // HtmlView Page linking property 'Y' for element 'pe3'
          _view.pe3.linkProperty("Visibility",  function() { return peshow; }, function(_v) { peshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'pe3'
          _view.pe.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'pe'
          _view.pe.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'pe'
          _view.pe.linkProperty("Visibility",  function() { return peshow; }, function(_v) { peshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'pe'
          _view.pe.linkProperty("InputY",  function() { return pe; }, function(_v) { pe = _v; } ); // HtmlView Page linking property 'InputY' for element 'pe'
          _view.group223.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'group223'
          _view.group223.linkProperty("Y",  function() { return te; }, function(_v) { te = _v; } ); // HtmlView Page linking property 'Y' for element 'group223'
          _view.textpe22.linkProperty("Text",  function() { return "TE = "+_view._format(te,"0.00")+ " J"; } ); // HtmlView Page linking property 'Text' for element 'textpe22'
          _view.textpe22.linkProperty("Visibility",  function() { return teshow; }, function(_v) { teshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textpe22'
          _view.yDot22.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'yDot22'
          _view.yDot22.linkProperty("Y",  function() { return te; }, function(_v) { te = _v; } ); // HtmlView Page linking property 'Y' for element 'yDot22'
          _view.yDot22.linkProperty("Visibility",  function() { return teshow; }, function(_v) { teshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'yDot22'
          _view.yTrail22.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'yTrail22'
          _view.yTrail22.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'yTrail22'
          _view.yTrail22.linkProperty("Visibility",  function() { return teshow; }, function(_v) { teshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'yTrail22'
          _view.yTrail22.linkProperty("InputY",  function() { return te; }, function(_v) { te = _v; } ); // HtmlView Page linking property 'InputY' for element 'yTrail22'
          _view.plottingPanel2.linkProperty("Width",  function() { return Widthf; }, function(_v) { Widthf = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("Visibility",  function() { return Fvst; }, function(_v) { Fvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("Display",  function() { return Fvst?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanel2'
          _view.N2.linkProperty("X",  function() { return Nx; }, function(_v) { Nx = _v; } ); // HtmlView Page linking property 'X' for element 'N2'
          _view.N2.linkProperty("Y",  function() { return Ny; }, function(_v) { Ny = _v; } ); // HtmlView Page linking property 'Y' for element 'N2'
          _view.N.linkProperty("Text",  function() { return textN; }, function(_v) { textN = _v; } ); // HtmlView Page linking property 'Text' for element 'N'
          _view.FN.linkProperty("SizeY",  function() { return Ny; }, function(_v) { Ny = _v; } ); // HtmlView Page linking property 'SizeY' for element 'FN'
          _view.weight2.linkProperty("Y",  function() { return -m*g; } ); // HtmlView Page linking property 'Y' for element 'weight2'
          _view.W.linkProperty("Text",  function() { return textW; }, function(_v) { textW = _v; } ); // HtmlView Page linking property 'Text' for element 'W'
          _view.weight.linkProperty("SizeY",  function() { return -m*g; } ); // HtmlView Page linking property 'SizeY' for element 'weight'
          _view.thrust.linkProperty("X",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'X' for element 'thrust'
          _view.thrust2.linkProperty("Text",  function() { return textT; }, function(_v) { textT = _v; } ); // HtmlView Page linking property 'Text' for element 'thrust2'
          _view.thrust3.linkProperty("SizeX",  function() { return m*a; } ); // HtmlView Page linking property 'SizeX' for element 'thrust3'
          _view.dataTable.linkProperty("Input",  function() { return [t,x,v,a]; } ); // HtmlView Page linking property 'Input' for element 'dataTable'
          _view.dataTable.linkProperty("Skip",  function() { return t<=1?1/dt+2:1/dt; } ); // HtmlView Page linking property 'Skip' for element 'dataTable'
          _view.dataTable.linkProperty("HeadersText",  function() { return ["t/s","x/m","v m/s","a m/s²"]; } ); // HtmlView Page linking property 'HeadersText' for element 'dataTable'
          _view.dataTable.linkProperty("CellsFormat",  function() { return ["0.00","0.0","0.00","0.00"]; } ); // HtmlView Page linking property 'CellsFormat' for element 'dataTable'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(5);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function kinematics_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = kinematics_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function kinematics_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"_isMobile", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element '_isMobile'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element '_isMobile'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Text","▶|") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initialize", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'initialize'
      .setProperty("Tooltip","Store Data") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initialize'
      .setProperty("Text","▼") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'initialize'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'initialize'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"modeling", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'modeling'
      .setProperty("CSS",{"display":"inline-block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'modeling'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"model43", _view.modeling) // EJsS HtmlView.HtmlView Page: declaration of element 'model43'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model43'
      .setProperty("Tooltip","key in expression like 1*t, t^2+t+0, etc") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model43'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'model43'
      .setProperty("Text","model,X=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'model43'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models2", _view.modeling) // EJsS HtmlView.HtmlView Page: declaration of element 'models2'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'models2'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models2'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.modeling) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","model") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","Kinematics Model") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("YTicks",1) // EJsS HtmlView.HtmlView Page: setting property 'YTicks' for element 'plottingPanel'
      .setProperty("MaximumY",0.65) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-20) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-0.35) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AxisXFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanel'
      .setProperty("TitleX","Position x") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ground", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'ground'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ground'
      .setProperty("SizeX",220) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ground'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'ground'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ground'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ground'
      .setProperty("Y",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ground'
      .setProperty("SizeY",2.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ground'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ground22", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'ground22'
      .setProperty("FillColor","url(#mygrandient1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ground22'
      .setProperty("SizeX",220) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ground22'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'ground22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ground22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ground22'
      .setProperty("Y",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ground22'
      .setProperty("SizeY",2.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ground22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"sky", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'sky'
      .setProperty("FillColor","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'sky'
      .setProperty("SizeX",220) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'sky'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'sky'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'sky'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'sky'
      .setProperty("Y",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'sky'
      .setProperty("SizeY",2.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'sky'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trace'
      .setProperty("MarkSize",10) // EJsS HtmlView.HtmlView Page: setting property 'MarkSize' for element 'trace'
      .setProperty("Connected",false) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trace'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'trace'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'trace'
      .setProperty("Active",true) // EJsS HtmlView.HtmlView Page: setting property 'Active' for element 'trace'
      .setProperty("MarkFillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'MarkFillColor' for element 'trace'
      .setProperty("MarkLineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'MarkLineColor' for element 'trace'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'trace'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'trace'
      .setProperty("InputY",0) // EJsS HtmlView.HtmlView Page: setting property 'InputY' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"cartext", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cartext'
      .setProperty("Transformation",[-1,0,0,1,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Transformation' for element 'cartext'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'cartext'
      .setProperty("Y",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'cartext'
      .setProperty("Text","🚓") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'cartext'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'cartext'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cartext'
      .setProperty("Font","normal normal 50px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'cartext'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"car2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'car2'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'car2'
      .setProperty("SizeX",4) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'car2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'car2'
      .setProperty("ImageUrl","./kinematics/tt-07-side-01.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'car2'
      .setProperty("Y",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'car2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'car2'
      .setProperty("SizeY",0.1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'car2'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'car2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'car2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"car", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'car'
      .setProperty("SizeX",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'car'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'car'
      .setProperty("ImageUrl","./kinematics/tt-07-side-01.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'car'
      .setProperty("Y",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'car'
      .setProperty("SizeY",0.15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'car'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'car'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"secondcar2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'secondcar2'
      .setProperty("Y",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'secondcar2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"cartext2", _view.secondcar2) // EJsS HtmlView.HtmlView Page: declaration of element 'cartext2'
      .setProperty("Transformation",[-1,0,0,1,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Transformation' for element 'cartext2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'cartext2'
      .setProperty("Text","🚙") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'cartext2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'cartext2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cartext2'
      .setProperty("Font","normal normal 50px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'cartext2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"secondcar8", _view.secondcar2) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar8'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'secondcar8'
      .setProperty("SizeX",4) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'secondcar8'
      .setProperty("ImageUrl","./kinematics/Elise Sport SIDE-ON.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'secondcar8'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'secondcar8'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'secondcar8'
      .setProperty("SizeY",0.1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'secondcar8'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'secondcar8'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'secondcar8'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"secondcar", _view.secondcar2) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'secondcar'
      .setProperty("SizeX",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'secondcar'
      .setProperty("ImageUrl","./kinematics/Elise Sport SIDE-ON.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'secondcar'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'secondcar'
      .setProperty("SizeY",0.15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'secondcar'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'secondcar'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'secondcar'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape22", _view.secondcar2) // EJsS HtmlView.HtmlView Page: declaration of element 'shape22'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape22'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape22'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'shape22'
      .setProperty("ResizesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element 'shape22'
      .setProperty("Sensitivity",100) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape22'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape22'
      .setProperty("Y",0.05) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape22'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"secondcar7", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar7'
      .setProperty("Y",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'secondcar7'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"v3", _view.secondcar7) // EJsS HtmlView.HtmlView Page: declaration of element 'v3'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'v3'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'v3'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'v3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'v3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'v3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'v3'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'v3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group23", _view.secondcar7) // EJsS HtmlView.HtmlView Page: declaration of element 'group23'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group23'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"v23", _view.group23) // EJsS HtmlView.HtmlView Page: declaration of element 'v23'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'v23'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'v23'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"velocitydrag222", _view.secondcar7) // EJsS HtmlView.HtmlView Page: declaration of element 'velocitydrag222'
      .setProperty("FillColor","rgba(0,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'velocitydrag222'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'velocitydrag222'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'velocitydrag222'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'velocitydrag222'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'velocitydrag222'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'velocitydrag222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'velocitydrag222'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'velocitydrag222'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"a2", _view.secondcar7) // EJsS HtmlView.HtmlView Page: declaration of element 'a2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'a2'
      .setProperty("MarkMiddle","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkMiddle' for element 'a2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'a2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'a2'
      .setProperty("Y",0.4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'a2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'a2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'a2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'a2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group222", _view.secondcar7) // EJsS HtmlView.HtmlView Page: declaration of element 'group222'
      .setProperty("Y",0.3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group222'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"v222", _view.group222) // EJsS HtmlView.HtmlView Page: declaration of element 'v222'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'v222'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'v222'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"adrag2", _view.secondcar7) // EJsS HtmlView.HtmlView Page: declaration of element 'adrag2'
      .setProperty("FillColor","rgba(0,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'adrag2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'adrag2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'adrag2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'adrag2'
      .setProperty("Y",0.3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'adrag2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'adrag2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'adrag2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'adrag2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group6", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group6'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"displacevleongster", _view.group6) // EJsS HtmlView.HtmlView Page: declaration of element 'displacevleongster'
      .setProperty("Y",-0.01) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'displacevleongster'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"vxShadowsvalues2", _view.displacevleongster) // EJsS HtmlView.HtmlView Page: declaration of element 'vxShadowsvalues2'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vxShadowsvalues2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'vxShadowsvalues2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group7", _view.displacevleongster) // EJsS HtmlView.HtmlView Page: declaration of element 'group7'
      .setProperty("Y",0.01) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group7'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"vset", _view.group7) // EJsS HtmlView.HtmlView Page: declaration of element 'vset'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'vset'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vset'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'vset'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shadows", _view.group6) // EJsS HtmlView.HtmlView Page: declaration of element 'shadows'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shadows'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'shadows'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shadows'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shadows'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shadows'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shadows'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shadows'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"displace", _view.group6) // EJsS HtmlView.HtmlView Page: declaration of element 'displace'
      .setProperty("Y",0.22) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'displace'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"dxShadows", _view.displace) // EJsS HtmlView.HtmlView Page: declaration of element 'dxShadows'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dxShadows'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'dxShadows'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"displace0_2", _view.group6) // EJsS HtmlView.HtmlView Page: declaration of element 'displace0_2'
      .setProperty("Y",0.2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'displace0_2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSetdx", _view.displace0_2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSetdx'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSetdx'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSetdx'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'arrowSetdx'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSetdx'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSetdx'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowSetdx'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"displaceup", _view.group6) // EJsS HtmlView.HtmlView Page: declaration of element 'displaceup'
      .setProperty("Y",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'displaceup'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"displace2", _view.displaceup) // EJsS HtmlView.HtmlView Page: declaration of element 'displace2'
      .setProperty("Y",0.01) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'displace2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'displace2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"xShadowsvalues", _view.displace2) // EJsS HtmlView.HtmlView Page: declaration of element 'xShadowsvalues'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'xShadowsvalues'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'xShadowsvalues'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group8", _view.displace2) // EJsS HtmlView.HtmlView Page: declaration of element 'group8'
      .setProperty("Y",0.03) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group8'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"xset", _view.group8) // EJsS HtmlView.HtmlView Page: declaration of element 'xset'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xset'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xset'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xset'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'xset'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"thomas", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thomas'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'shape2'
      .setProperty("ResizesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element 'shape2'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'shape2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"xDRAG", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xDRAG'
      .setProperty("ResizesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element 'xDRAG'
      .setProperty("Sensitivity",100) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'xDRAG'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'xDRAG'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xDRAG'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'xDRAG'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xDRAG'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'xDRAG'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'xDRAG'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'xDRAG'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"position", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'position'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'position'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"v", _view.position) // EJsS HtmlView.HtmlView Page: declaration of element 'v'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'v'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'v'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'v'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'v'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'v'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'v'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'v'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.position) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"v2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'v2'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'v2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'v2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"velocitydrag22", _view.position) // EJsS HtmlView.HtmlView Page: declaration of element 'velocitydrag22'
      .setProperty("FillColor","rgba(0,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'velocitydrag22'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'velocitydrag22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'velocitydrag22'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'velocitydrag22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'velocitydrag22'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'velocitydrag22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'velocitydrag22'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'velocitydrag22'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"a", _view.position) // EJsS HtmlView.HtmlView Page: declaration of element 'a'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'a'
      .setProperty("MarkMiddle","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkMiddle' for element 'a'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'a'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'a'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'a'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'a'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'a'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'a'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group22", _view.position) // EJsS HtmlView.HtmlView Page: declaration of element 'group22'
      .setProperty("Y",0.4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"v22", _view.group22) // EJsS HtmlView.HtmlView Page: declaration of element 'v22'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'v22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'v22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"adrag", _view.position) // EJsS HtmlView.HtmlView Page: declaration of element 'adrag'
      .setProperty("FillColor","rgba(0,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'adrag'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'adrag'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'adrag'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'adrag'
      .setProperty("Y",0.4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'adrag'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'adrag'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'adrag'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'adrag'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'model2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'model2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"modelvy", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'modelvy'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'modelvy'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'modelvy'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'modelvy'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'modelvy'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'modelvy'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'modelvy'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"modeay", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'modeay'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'modeay'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'modeay'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'modeay'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'modeay'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'modeay'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'modeay'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'analyticCurve'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanelxvst'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanelxvst'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanelxvst'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst'
      .setProperty("XAutoStepMin",1) // EJsS HtmlView.HtmlView Page: setting property 'XAutoStepMin' for element 'plottingPanelxvst'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst'
      .setProperty("XAutoTicks",true) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst'
      .setProperty("Title","Position vs. Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst'
      .setProperty("MaximumY",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanelxvst'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanelxvst'
      .setProperty("EnabledDragging","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanelxvst'
      .setProperty("YAutoTicks",true) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst'
      .setProperty("MinimumX",-0.58) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst'
      .setProperty("MinimumY",-20) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanelxvst'
      .setProperty("TitleY","Position (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst'
      .setProperty("YAutoStepMin",2) // EJsS HtmlView.HtmlView Page: setting property 'YAutoStepMin' for element 'plottingPanelxvst'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model22", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'model22'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model22'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model22'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"model", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'model'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'model'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'model'
      .setProperty("NumPoints",100) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'model'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'model'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'model'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'model'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"plotTrail2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'plotTrail2'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plotTrail2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group3", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'group3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"secondcar4", _view.group3) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar4'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'secondcar4'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'secondcar4'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'secondcar4'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'secondcar4'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'secondcar4'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'secondcar4'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"secondca", _view.group3) // EJsS HtmlView.HtmlView Page: declaration of element 'secondca'
      .setProperty("LineColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'secondca'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'secondca'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shadows2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'shadows2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shadows2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shadows2'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shadows2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shadows2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shadows2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shadows2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot2'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'trailDot2'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot2'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot2'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'trailDot2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"xset22", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'xset22'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xset22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xset22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xset22'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'xset22'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst2'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanelxvst2'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst2'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanelxvst2'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanelxvst2'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst2'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst2'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst2'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanelxvst2'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst2'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst2'
      .setProperty("Title","Position vs. Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst2'
      .setProperty("MaximumY",2.5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanelxvst2'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanelxvst2'
      .setProperty("EnabledDragging","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanelxvst2'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst2'
      .setProperty("MinimumX",-0.58) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst2'
      .setProperty("MinimumY",-2.5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanelxvst2'
      .setProperty("TitleY","Velocity (m/s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst2'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst2'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst2'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model7", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'model7'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model7'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model7'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model7'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'model7'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model7'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model7'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"model5", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'model5'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'model5'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'model5'
      .setProperty("NumPoints",100) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'model5'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'model5'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'model5'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'model5'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group4", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'group4'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"secondcar5", _view.group4) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar5'
      .setProperty("LineColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'secondcar5'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'secondcar5'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"secondcar3", _view.group4) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar3'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'secondcar3'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'secondcar3'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'secondcar3'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'secondcar3'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'secondcar3'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"plotTrail22", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'plotTrail22'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plotTrail22'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shadows223", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'shadows223'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shadows223'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shadows223'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shadows223'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shadows223'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shadows223'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shadows223'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot222", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot222'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot222'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'trailDot222'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot222'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'trailDot222'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"vset2", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'vset2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vset2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'vset2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vset2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'vset2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst3", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst3'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanelxvst3'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst3'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanelxvst3'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanelxvst3'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst3'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst3'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst3'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanelxvst3'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst3'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst3'
      .setProperty("Title","Position vs. Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst3'
      .setProperty("MaximumY",2.5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanelxvst3'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanelxvst3'
      .setProperty("EnabledDragging","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanelxvst3'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst3'
      .setProperty("MinimumX",-0.58) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst3'
      .setProperty("MinimumY",-2.5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanelxvst3'
      .setProperty("TitleY","Acceleration (m/s²)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst3'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst3'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst3'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst3'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model42", _view.plottingPanelxvst3) // EJsS HtmlView.HtmlView Page: declaration of element 'model42'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model42'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model42'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model42'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'model42'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model42'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model42'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"model6", _view.plottingPanelxvst3) // EJsS HtmlView.HtmlView Page: declaration of element 'model6'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'model6'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'model6'
      .setProperty("NumPoints",100) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'model6'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'model6'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'model6'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'model6'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group5", _view.plottingPanelxvst3) // EJsS HtmlView.HtmlView Page: declaration of element 'group5'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"scondcar", _view.group5) // EJsS HtmlView.HtmlView Page: declaration of element 'scondcar'
      .setProperty("LineColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'scondcar'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'scondcar'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"secondcar6", _view.group5) // EJsS HtmlView.HtmlView Page: declaration of element 'secondcar6'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'secondcar6'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'secondcar6'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'secondcar6'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'secondcar6'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'secondcar6'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"plotTrail23", _view.plottingPanelxvst3) // EJsS HtmlView.HtmlView Page: declaration of element 'plotTrail23'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plotTrail23'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shadows2223", _view.plottingPanelxvst3) // EJsS HtmlView.HtmlView Page: declaration of element 'shadows2223'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shadows2223'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shadows2223'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shadows2223'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shadows2223'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shadows2223'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shadows2223'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot233", _view.plottingPanelxvst3) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot233'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot233'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'trailDot233'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot233'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot233'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'trailDot233'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanele", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanele'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanele'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanele'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanele'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanele'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanele'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanele'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanele'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanele'
      .setProperty("YTickStep",1000) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanele'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanele'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanele'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanele'
      .setProperty("SquareAspect",false) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanele'
      .setProperty("MaximumY",2100) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanele'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanele'
      .setProperty("EnabledDragging","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanele'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanele'
      .setProperty("MinimumX",-0.58) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanele'
      .setProperty("MinimumY",-100) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanele'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanele'
      .setProperty("TitleX","") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanele'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanele'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanele'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanele'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group24", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'group24'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textpe2", _view.group24) // EJsS HtmlView.HtmlView Page: declaration of element 'textpe2'
      .setProperty("Sensitivity",30) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'textpe2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'textpe2'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textpe2'
      .setProperty("X",0.1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textpe2'
      .setProperty("Y",-0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textpe2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'textpe2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textpe2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'textpe2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"yDot", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'yDot'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yDot'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yDot'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yDot'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'yDot'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"yTrail", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'yTrail'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"pe2", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'pe2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textpe", _view.pe2) // EJsS HtmlView.HtmlView Page: declaration of element 'textpe'
      .setProperty("Sensitivity",30) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'textpe'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'textpe'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textpe'
      .setProperty("X",0.1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textpe'
      .setProperty("Y",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textpe'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'textpe'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textpe'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'textpe'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"pe3", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'pe3'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'pe3'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pe3'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pe3'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pe3'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"pe", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'pe'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'pe'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'pe'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group223", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'group223'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"textpe22", _view.group223) // EJsS HtmlView.HtmlView Page: declaration of element 'textpe22'
      .setProperty("Sensitivity",30) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'textpe22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'textpe22'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textpe22'
      .setProperty("X",0.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textpe22'
      .setProperty("Y",-0.2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textpe22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'textpe22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textpe22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'textpe22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"yDot22", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'yDot22'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yDot22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yDot22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yDot22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'yDot22'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"yTrail22", _view.plottingPanele) // EJsS HtmlView.HtmlView Page: declaration of element 'yTrail22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yTrail22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yTrail22'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel2'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel2'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel2'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel2'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel2'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel2'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel2'
      .setProperty("TRMessage","Free Body Diagram of blue Carriage") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel2'
      .setProperty("XTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel2'
      .setProperty("YTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel2'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel2'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel2'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel2'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel2'
      .setProperty("MaximumY",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel2'
      .setProperty("MaximumX",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel2'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel2'
      .setProperty("MinimumX",-20) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel2'
      .setProperty("MinimumY",-20) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("TitleX","") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel2'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"carA2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'carA2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'carA2'
      .setProperty("SizeX",75) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'carA2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'carA2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'carA2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'carA2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'carA2'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'carA2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'carA2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'carA2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"FBD", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'FBD'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"N2", _view.FBD) // EJsS HtmlView.HtmlView Page: declaration of element 'N2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"N", _view.N2) // EJsS HtmlView.HtmlView Page: declaration of element 'N'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'N'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'N'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'N'
      .setProperty("PixelPosition",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelPosition' for element 'N'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'N'
      .setProperty("X",50) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'N'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'N'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'N'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'N'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"FN", _view.FBD) // EJsS HtmlView.HtmlView Page: declaration of element 'FN'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'FN'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'FN'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'FN'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'FN'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'FN'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'FN'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'FN'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'FN'
      .setProperty("LineWidth",7) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'FN'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'FN'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"weight2", _view.FBD) // EJsS HtmlView.HtmlView Page: declaration of element 'weight2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'weight2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"W", _view.weight2) // EJsS HtmlView.HtmlView Page: declaration of element 'W'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'W'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'W'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'W'
      .setProperty("PixelPosition",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelPosition' for element 'W'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'W'
      .setProperty("X",50) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'W'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'W'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'W'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'W'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"weight", _view.FBD) // EJsS HtmlView.HtmlView Page: declaration of element 'weight'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'weight'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'weight'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'weight'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'weight'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'weight'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'weight'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'weight'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'weight'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"thrust", _view.FBD) // EJsS HtmlView.HtmlView Page: declaration of element 'thrust'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'thrust'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"thrust2", _view.thrust) // EJsS HtmlView.HtmlView Page: declaration of element 'thrust2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'thrust2'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'thrust2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'thrust2'
      .setProperty("PixelPosition",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelPosition' for element 'thrust2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'thrust2'
      .setProperty("X",50) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'thrust2'
      .setProperty("Y",50) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'thrust2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'thrust2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'thrust2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'thrust2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"thrust3", _view.FBD) // EJsS HtmlView.HtmlView Page: declaration of element 'thrust3'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'thrust3'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'thrust3'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'thrust3'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'thrust3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'thrust3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'thrust3'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'thrust3'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'thrust3'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"table", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'table'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'table'
      ;

    _view._addElement(EJSS_INTERFACE.dataTable,"dataTable", _view.table) // EJsS HtmlView.HtmlView Page: declaration of element 'dataTable'
      .setProperty("Width","45%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'dataTable'
      .setProperty("ClearAtInput",false) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'dataTable'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'dataTable'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'dataTable'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Kinematics Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_2kinematics/kinematics/Screen Shot 2018-03-21 at 1.36.20 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_2kinematics/01authorlookang50x50.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_2kinematics/01authorPacoEsquembre2011.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_2kinematics/01authorwc_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_2kinematics/01authorFelix_J_Garcia_Clemente.png" />
 weelookang@gmail.com; Francisco Esquembre; Wolfgang Christian; Félix Jesús Garcia Clemente
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, creative commons attribution. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new kinematics("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_2kinematics/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
