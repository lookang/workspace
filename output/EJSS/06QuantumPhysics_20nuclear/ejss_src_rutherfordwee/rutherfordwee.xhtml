<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Rutherford's Atomic Model</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function rutherfordwee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var size; // EjsS Model.Variables.Var Table.size
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var text; // EjsS Model.Variables.Var Table.text
  var selected; // EjsS Model.Variables.Var Table.selected

  var print; // EjsS Model.Variables.ControlPanelVars.print
  var fontb; // EjsS Model.Variables.ControlPanelVars.fontb
  var font; // EjsS Model.Variables.ControlPanelVars.font

  var selectedview; // EjsS Model.Variables.layout.selectedview
  var selectedview1; // EjsS Model.Variables.layout.selectedview1
  var selectedview2; // EjsS Model.Variables.layout.selectedview2
  var memorycolor; // EjsS Model.Variables.layout.memorycolor
  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var datashow; // EjsS Model.Variables.layout.datashow
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph

  var selectedmodel; // EjsS Model.Variables.functionY.selectedmodel
  var showmodel; // EjsS Model.Variables.functionY.showmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var solutionY; // EjsS Model.Variables.functionY.solutionY

  var vxtest; // EjsS Model.Variables.variables.vxtest
  var k; // EjsS Model.Variables.variables.k
  var G; // EjsS Model.Variables.variables.G
  var x1; // EjsS Model.Variables.variables.x1
  var x2; // EjsS Model.Variables.variables.x2
  var xtest; // EjsS Model.Variables.variables.xtest
  var q1; // EjsS Model.Variables.variables.q1
  var m1; // EjsS Model.Variables.variables.m1
  var q2; // EjsS Model.Variables.variables.q2
  var m2; // EjsS Model.Variables.variables.m2
  var qtest; // EjsS Model.Variables.variables.qtest
  var mtest; // EjsS Model.Variables.variables.mtest
  var E1; // EjsS Model.Variables.variables.E1
  var g1; // EjsS Model.Variables.variables.g1
  var V1; // EjsS Model.Variables.variables.V1
  var phi1; // EjsS Model.Variables.variables.phi1
  var E2; // EjsS Model.Variables.variables.E2
  var g2; // EjsS Model.Variables.variables.g2
  var V2; // EjsS Model.Variables.variables.V2
  var phi2; // EjsS Model.Variables.variables.phi2
  var Enet; // EjsS Model.Variables.variables.Enet
  var gnet; // EjsS Model.Variables.variables.gnet
  var Vnet; // EjsS Model.Variables.variables.Vnet
  var phinet; // EjsS Model.Variables.variables.phinet
  var range; // EjsS Model.Variables.variables.range
  var dx; // EjsS Model.Variables.variables.dx
  var show1; // EjsS Model.Variables.variables.show1
  var show2; // EjsS Model.Variables.variables.show2
  var testc; // EjsS Model.Variables.variables.testc
  var g1show; // EjsS Model.Variables.variables.g1show
  var g2show; // EjsS Model.Variables.variables.g2show
  var gnetshow; // EjsS Model.Variables.variables.gnetshow
  var V1show; // EjsS Model.Variables.variables.V1show
  var V2show; // EjsS Model.Variables.variables.V2show
  var Vnetshow; // EjsS Model.Variables.variables.Vnetshow
  var showgraph; // EjsS Model.Variables.variables.showgraph
  var showgraphone; // EjsS Model.Variables.variables.showgraphone
  var showgraphtwo; // EjsS Model.Variables.variables.showgraphtwo
  var showVgraph; // EjsS Model.Variables.variables.showVgraph
  var showVgraphone; // EjsS Model.Variables.variables.showVgraphone
  var showVgraphtwo; // EjsS Model.Variables.variables.showVgraphtwo
  var showgradient; // EjsS Model.Variables.variables.showgradient
  var showF; // EjsS Model.Variables.variables.showF
  var showU; // EjsS Model.Variables.variables.showU
  var helpLabel; // EjsS Model.Variables.variables.helpLabel
  var helpFlag; // EjsS Model.Variables.variables.helpFlag
  var zeroval; // EjsS Model.Variables.variables.zeroval
  var scale1; // EjsS Model.Variables.variables.scale1
  var scale2; // EjsS Model.Variables.variables.scale2
  var plot2max; // EjsS Model.Variables.variables.plot2max
  var plot1max; // EjsS Model.Variables.variables.plot1max
  var showmidgraph; // EjsS Model.Variables.variables.showmidgraph
  var showmidVgraph; // EjsS Model.Variables.variables.showmidVgraph
  var rM1m; // EjsS Model.Variables.variables.rM1m
  var rM2m; // EjsS Model.Variables.variables.rM2m
  var rM1M2; // EjsS Model.Variables.variables.rM1M2
  var scalex; // EjsS Model.Variables.variables.scalex
  var scaley; // EjsS Model.Variables.variables.scaley
  var scalef; // EjsS Model.Variables.variables.scalef
  var gmax; // EjsS Model.Variables.variables.gmax
  var gmin; // EjsS Model.Variables.variables.gmin
  var gy; // EjsS Model.Variables.variables.gy
  var Vy; // EjsS Model.Variables.variables.Vy
  var F1; // EjsS Model.Variables.variables.F1
  var F2; // EjsS Model.Variables.variables.F2
  var colorball1; // EjsS Model.Variables.variables.colorball1
  var colorball2; // EjsS Model.Variables.variables.colorball2

  var n; // EjsS Model.Variables.FieldVars.n
  var nmax; // EjsS Model.Variables.FieldVars.nmax
  var spacing; // EjsS Model.Variables.FieldVars.spacing
  var q; // EjsS Model.Variables.FieldVars.q
  var q0; // EjsS Model.Variables.FieldVars.q0
  var q00; // EjsS Model.Variables.FieldVars.q00
  var q0true; // EjsS Model.Variables.FieldVars.q0true
  var q00true; // EjsS Model.Variables.FieldVars.q00true
  var m; // EjsS Model.Variables.FieldVars.m
  var m0; // EjsS Model.Variables.FieldVars.m0
  var m00; // EjsS Model.Variables.FieldVars.m00
  var x; // EjsS Model.Variables.FieldVars.x
  var xstore; // EjsS Model.Variables.FieldVars.xstore
  var xs; // EjsS Model.Variables.FieldVars.xs
  var vx; // EjsS Model.Variables.FieldVars.vx
  var vxs; // EjsS Model.Variables.FieldVars.vxs
  var vys; // EjsS Model.Variables.FieldVars.vys
  var y; // EjsS Model.Variables.FieldVars.y
  var ystore; // EjsS Model.Variables.FieldVars.ystore
  var y01slider; // EjsS Model.Variables.FieldVars.y01slider
  var ytext; // EjsS Model.Variables.FieldVars.ytext
  var vy; // EjsS Model.Variables.FieldVars.vy
  var xForce; // EjsS Model.Variables.FieldVars.xForce
  var xForcescale; // EjsS Model.Variables.FieldVars.xForcescale
  var yForce; // EjsS Model.Variables.FieldVars.yForce
  var yForcescale; // EjsS Model.Variables.FieldVars.yForcescale
  var elecForce; // EjsS Model.Variables.FieldVars.elecForce
  var forceValue; // EjsS Model.Variables.FieldVars.forceValue

  var color; // EjsS Model.Variables.DisplayVars.color
  var r; // EjsS Model.Variables.DisplayVars.r
  var radiusx; // EjsS Model.Variables.DisplayVars.radiusx
  var radiusy; // EjsS Model.Variables.DisplayVars.radiusy
  var colorStr; // EjsS Model.Variables.DisplayVars.colorStr
  var colorValue; // EjsS Model.Variables.DisplayVars.colorValue
  var qLabel; // EjsS Model.Variables.DisplayVars.qLabel
  var StrData; // EjsS Model.Variables.DisplayVars.StrData

  var datasetN; // EjsS Model.Variables.drageme.datasetN
  var datasetx; // EjsS Model.Variables.drageme.datasetx
  var datasety; // EjsS Model.Variables.drageme.datasety
  var ElementI; // EjsS Model.Variables.drageme.ElementI
  var mode; // EjsS Model.Variables.drageme.mode
  var mode1; // EjsS Model.Variables.drageme.mode1
  var radius; // EjsS Model.Variables.drageme.radius
  var movethomson; // EjsS Model.Variables.drageme.movethomson
  var disabledbutton; // EjsS Model.Variables.drageme.disabledbutton
  var dragmex; // EjsS Model.Variables.drageme.dragmex
  var dragmexs; // EjsS Model.Variables.drageme.dragmexs
  var dragmey; // EjsS Model.Variables.drageme.dragmey
  var dragemetrue; // EjsS Model.Variables.drageme.dragemetrue

  var pi; // EjsS Model.Variables.theta.pi
  var theta; // EjsS Model.Variables.theta.theta
  var thetadegrees; // EjsS Model.Variables.theta.thetadegrees
  var thetarecord; // EjsS Model.Variables.theta.thetarecord
  var counter; // EjsS Model.Variables.theta.counter
  var histogramcounter; // EjsS Model.Variables.theta.histogramcounter

  var showb; // EjsS Model.Variables.keyboard.showb
  var key; // EjsS Model.Variables.keyboard.key

  var maxy; // EjsS Model.Variables.drawcircle.maxy
  var ncircle; // EjsS Model.Variables.drawcircle.ncircle
  var n2; // EjsS Model.Variables.drawcircle.n2
  var c; // EjsS Model.Variables.drawcircle.c
  var cs; // EjsS Model.Variables.drawcircle.cs
  var xline; // EjsS Model.Variables.drawcircle.xline
  var yline; // EjsS Model.Variables.drawcircle.yline
  var msg; // EjsS Model.Variables.drawcircle.msg
  var Rs; // EjsS Model.Variables.drawcircle.Rs
  var dxs; // EjsS Model.Variables.drawcircle.dxs
  var ds; // EjsS Model.Variables.drawcircle.ds
  var xline2; // EjsS Model.Variables.drawcircle.xline2
  var yline2; // EjsS Model.Variables.drawcircle.yline2
  var dys; // EjsS Model.Variables.drawcircle.dys
  var D; // EjsS Model.Variables.drawcircle.D
  var D2; // EjsS Model.Variables.drawcircle.D2
  var red; // EjsS Model.Variables.drawcircle.red
  var green; // EjsS Model.Variables.drawcircle.green
  var blue; // EjsS Model.Variables.drawcircle.blue
  var stroke; // EjsS Model.Variables.drawcircle.stroke

  var styleList; // EjsS Model.Variables.spectrum.styleList

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      size : size,
      t : t,
      dt : dt,
      sizex : sizex,
      sizey : sizey,
      text : text,
      selected : selected,
      print : print,
      fontb : fontb,
      font : font,
      selectedview : selectedview,
      selectedview1 : selectedview1,
      selectedview2 : selectedview2,
      memorycolor : memorycolor,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      disabledworld : disabledworld,
      disabled : disabled,
      datashow : datashow,
      world : world,
      graph : graph,
      selectedmodel : selectedmodel,
      showmodel : showmodel,
      functionY : functionY,
      solutionY : solutionY,
      vxtest : vxtest,
      k : k,
      G : G,
      x1 : x1,
      x2 : x2,
      xtest : xtest,
      q1 : q1,
      m1 : m1,
      q2 : q2,
      m2 : m2,
      qtest : qtest,
      mtest : mtest,
      E1 : E1,
      g1 : g1,
      V1 : V1,
      phi1 : phi1,
      E2 : E2,
      g2 : g2,
      V2 : V2,
      phi2 : phi2,
      Enet : Enet,
      gnet : gnet,
      Vnet : Vnet,
      phinet : phinet,
      range : range,
      dx : dx,
      show1 : show1,
      show2 : show2,
      testc : testc,
      g1show : g1show,
      g2show : g2show,
      gnetshow : gnetshow,
      V1show : V1show,
      V2show : V2show,
      Vnetshow : Vnetshow,
      showgraph : showgraph,
      showgraphone : showgraphone,
      showgraphtwo : showgraphtwo,
      showVgraph : showVgraph,
      showVgraphone : showVgraphone,
      showVgraphtwo : showVgraphtwo,
      showgradient : showgradient,
      showF : showF,
      showU : showU,
      helpLabel : helpLabel,
      helpFlag : helpFlag,
      zeroval : zeroval,
      scale1 : scale1,
      scale2 : scale2,
      plot2max : plot2max,
      plot1max : plot1max,
      showmidgraph : showmidgraph,
      showmidVgraph : showmidVgraph,
      rM1m : rM1m,
      rM2m : rM2m,
      rM1M2 : rM1M2,
      scalex : scalex,
      scaley : scaley,
      scalef : scalef,
      gmax : gmax,
      gmin : gmin,
      gy : gy,
      Vy : Vy,
      F1 : F1,
      F2 : F2,
      colorball1 : colorball1,
      colorball2 : colorball2,
      n : n,
      nmax : nmax,
      spacing : spacing,
      q : q,
      q0 : q0,
      q00 : q00,
      q0true : q0true,
      q00true : q00true,
      m : m,
      m0 : m0,
      m00 : m00,
      x : x,
      xstore : xstore,
      xs : xs,
      vx : vx,
      vxs : vxs,
      vys : vys,
      y : y,
      ystore : ystore,
      y01slider : y01slider,
      ytext : ytext,
      vy : vy,
      xForce : xForce,
      xForcescale : xForcescale,
      yForce : yForce,
      yForcescale : yForcescale,
      elecForce : elecForce,
      forceValue : forceValue,
      color : color,
      r : r,
      radiusx : radiusx,
      radiusy : radiusy,
      colorStr : colorStr,
      colorValue : colorValue,
      qLabel : qLabel,
      StrData : StrData,
      datasetN : datasetN,
      datasetx : datasetx,
      datasety : datasety,
      ElementI : ElementI,
      mode : mode,
      mode1 : mode1,
      radius : radius,
      movethomson : movethomson,
      disabledbutton : disabledbutton,
      dragmex : dragmex,
      dragmexs : dragmexs,
      dragmey : dragmey,
      dragemetrue : dragemetrue,
      pi : pi,
      theta : theta,
      thetadegrees : thetadegrees,
      thetarecord : thetarecord,
      counter : counter,
      histogramcounter : histogramcounter,
      showb : showb,
      key : key,
      maxy : maxy,
      ncircle : ncircle,
      n2 : n2,
      c : c,
      cs : cs,
      xline : xline,
      yline : yline,
      msg : msg,
      Rs : Rs,
      dxs : dxs,
      ds : ds,
      xline2 : xline2,
      yline2 : yline2,
      dys : dys,
      D : D,
      D2 : D2,
      red : red,
      green : green,
      blue : blue,
      stroke : stroke,
      styleList : styleList
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.selectedview1 != "undefined") selectedview1 = json.selectedview1;
    if(typeof json.selectedview2 != "undefined") selectedview2 = json.selectedview2;
    if(typeof json.memorycolor != "undefined") memorycolor = json.memorycolor;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.datashow != "undefined") datashow = json.datashow;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.solutionY != "undefined") solutionY = json.solutionY;
    if(typeof json.vxtest != "undefined") vxtest = json.vxtest;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.G != "undefined") G = json.G;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.xtest != "undefined") xtest = json.xtest;
    if(typeof json.q1 != "undefined") q1 = json.q1;
    if(typeof json.m1 != "undefined") m1 = json.m1;
    if(typeof json.q2 != "undefined") q2 = json.q2;
    if(typeof json.m2 != "undefined") m2 = json.m2;
    if(typeof json.qtest != "undefined") qtest = json.qtest;
    if(typeof json.mtest != "undefined") mtest = json.mtest;
    if(typeof json.E1 != "undefined") E1 = json.E1;
    if(typeof json.g1 != "undefined") g1 = json.g1;
    if(typeof json.V1 != "undefined") V1 = json.V1;
    if(typeof json.phi1 != "undefined") phi1 = json.phi1;
    if(typeof json.E2 != "undefined") E2 = json.E2;
    if(typeof json.g2 != "undefined") g2 = json.g2;
    if(typeof json.V2 != "undefined") V2 = json.V2;
    if(typeof json.phi2 != "undefined") phi2 = json.phi2;
    if(typeof json.Enet != "undefined") Enet = json.Enet;
    if(typeof json.gnet != "undefined") gnet = json.gnet;
    if(typeof json.Vnet != "undefined") Vnet = json.Vnet;
    if(typeof json.phinet != "undefined") phinet = json.phinet;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.show1 != "undefined") show1 = json.show1;
    if(typeof json.show2 != "undefined") show2 = json.show2;
    if(typeof json.testc != "undefined") testc = json.testc;
    if(typeof json.g1show != "undefined") g1show = json.g1show;
    if(typeof json.g2show != "undefined") g2show = json.g2show;
    if(typeof json.gnetshow != "undefined") gnetshow = json.gnetshow;
    if(typeof json.V1show != "undefined") V1show = json.V1show;
    if(typeof json.V2show != "undefined") V2show = json.V2show;
    if(typeof json.Vnetshow != "undefined") Vnetshow = json.Vnetshow;
    if(typeof json.showgraph != "undefined") showgraph = json.showgraph;
    if(typeof json.showgraphone != "undefined") showgraphone = json.showgraphone;
    if(typeof json.showgraphtwo != "undefined") showgraphtwo = json.showgraphtwo;
    if(typeof json.showVgraph != "undefined") showVgraph = json.showVgraph;
    if(typeof json.showVgraphone != "undefined") showVgraphone = json.showVgraphone;
    if(typeof json.showVgraphtwo != "undefined") showVgraphtwo = json.showVgraphtwo;
    if(typeof json.showgradient != "undefined") showgradient = json.showgradient;
    if(typeof json.showF != "undefined") showF = json.showF;
    if(typeof json.showU != "undefined") showU = json.showU;
    if(typeof json.helpLabel != "undefined") helpLabel = json.helpLabel;
    if(typeof json.helpFlag != "undefined") helpFlag = json.helpFlag;
    if(typeof json.zeroval != "undefined") zeroval = json.zeroval;
    if(typeof json.scale1 != "undefined") scale1 = json.scale1;
    if(typeof json.scale2 != "undefined") scale2 = json.scale2;
    if(typeof json.plot2max != "undefined") plot2max = json.plot2max;
    if(typeof json.plot1max != "undefined") plot1max = json.plot1max;
    if(typeof json.showmidgraph != "undefined") showmidgraph = json.showmidgraph;
    if(typeof json.showmidVgraph != "undefined") showmidVgraph = json.showmidVgraph;
    if(typeof json.rM1m != "undefined") rM1m = json.rM1m;
    if(typeof json.rM2m != "undefined") rM2m = json.rM2m;
    if(typeof json.rM1M2 != "undefined") rM1M2 = json.rM1M2;
    if(typeof json.scalex != "undefined") scalex = json.scalex;
    if(typeof json.scaley != "undefined") scaley = json.scaley;
    if(typeof json.scalef != "undefined") scalef = json.scalef;
    if(typeof json.gmax != "undefined") gmax = json.gmax;
    if(typeof json.gmin != "undefined") gmin = json.gmin;
    if(typeof json.gy != "undefined") gy = json.gy;
    if(typeof json.Vy != "undefined") Vy = json.Vy;
    if(typeof json.F1 != "undefined") F1 = json.F1;
    if(typeof json.F2 != "undefined") F2 = json.F2;
    if(typeof json.colorball1 != "undefined") colorball1 = json.colorball1;
    if(typeof json.colorball2 != "undefined") colorball2 = json.colorball2;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.nmax != "undefined") nmax = json.nmax;
    if(typeof json.spacing != "undefined") spacing = json.spacing;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.q0 != "undefined") q0 = json.q0;
    if(typeof json.q00 != "undefined") q00 = json.q00;
    if(typeof json.q0true != "undefined") q0true = json.q0true;
    if(typeof json.q00true != "undefined") q00true = json.q00true;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.m0 != "undefined") m0 = json.m0;
    if(typeof json.m00 != "undefined") m00 = json.m00;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xstore != "undefined") xstore = json.xstore;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vxs != "undefined") vxs = json.vxs;
    if(typeof json.vys != "undefined") vys = json.vys;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.ystore != "undefined") ystore = json.ystore;
    if(typeof json.y01slider != "undefined") y01slider = json.y01slider;
    if(typeof json.ytext != "undefined") ytext = json.ytext;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.xForce != "undefined") xForce = json.xForce;
    if(typeof json.xForcescale != "undefined") xForcescale = json.xForcescale;
    if(typeof json.yForce != "undefined") yForce = json.yForce;
    if(typeof json.yForcescale != "undefined") yForcescale = json.yForcescale;
    if(typeof json.elecForce != "undefined") elecForce = json.elecForce;
    if(typeof json.forceValue != "undefined") forceValue = json.forceValue;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.radiusx != "undefined") radiusx = json.radiusx;
    if(typeof json.radiusy != "undefined") radiusy = json.radiusy;
    if(typeof json.colorStr != "undefined") colorStr = json.colorStr;
    if(typeof json.colorValue != "undefined") colorValue = json.colorValue;
    if(typeof json.qLabel != "undefined") qLabel = json.qLabel;
    if(typeof json.StrData != "undefined") StrData = json.StrData;
    if(typeof json.datasetN != "undefined") datasetN = json.datasetN;
    if(typeof json.datasetx != "undefined") datasetx = json.datasetx;
    if(typeof json.datasety != "undefined") datasety = json.datasety;
    if(typeof json.ElementI != "undefined") ElementI = json.ElementI;
    if(typeof json.mode != "undefined") mode = json.mode;
    if(typeof json.mode1 != "undefined") mode1 = json.mode1;
    if(typeof json.radius != "undefined") radius = json.radius;
    if(typeof json.movethomson != "undefined") movethomson = json.movethomson;
    if(typeof json.disabledbutton != "undefined") disabledbutton = json.disabledbutton;
    if(typeof json.dragmex != "undefined") dragmex = json.dragmex;
    if(typeof json.dragmexs != "undefined") dragmexs = json.dragmexs;
    if(typeof json.dragmey != "undefined") dragmey = json.dragmey;
    if(typeof json.dragemetrue != "undefined") dragemetrue = json.dragemetrue;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.thetadegrees != "undefined") thetadegrees = json.thetadegrees;
    if(typeof json.thetarecord != "undefined") thetarecord = json.thetarecord;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.histogramcounter != "undefined") histogramcounter = json.histogramcounter;
    if(typeof json.showb != "undefined") showb = json.showb;
    if(typeof json.key != "undefined") key = json.key;
    if(typeof json.maxy != "undefined") maxy = json.maxy;
    if(typeof json.ncircle != "undefined") ncircle = json.ncircle;
    if(typeof json.n2 != "undefined") n2 = json.n2;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.cs != "undefined") cs = json.cs;
    if(typeof json.xline != "undefined") xline = json.xline;
    if(typeof json.yline != "undefined") yline = json.yline;
    if(typeof json.msg != "undefined") msg = json.msg;
    if(typeof json.Rs != "undefined") Rs = json.Rs;
    if(typeof json.dxs != "undefined") dxs = json.dxs;
    if(typeof json.ds != "undefined") ds = json.ds;
    if(typeof json.xline2 != "undefined") xline2 = json.xline2;
    if(typeof json.yline2 != "undefined") yline2 = json.yline2;
    if(typeof json.dys != "undefined") dys = json.dys;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.D2 != "undefined") D2 = json.D2;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.styleList != "undefined") styleList = json.styleList;
  };

  _model._inputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "text",  "selected",  "print",  "fontb",  "font",  "selectedview",  "selectedview1",  "selectedview2",  "memorycolor",  "isAndroid",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "datashow",  "world",  "graph",  "selectedmodel",  "showmodel",  "functionY",  "solutionY",  "vxtest",  "k",  "G",  "x1",  "x2",  "xtest",  "q1",  "m1",  "q2",  "m2",  "qtest",  "mtest",  "E1",  "g1",  "V1",  "phi1",  "E2",  "g2",  "V2",  "phi2",  "Enet",  "gnet",  "Vnet",  "phinet",  "range",  "dx",  "show1",  "show2",  "testc",  "g1show",  "g2show",  "gnetshow",  "V1show",  "V2show",  "Vnetshow",  "showgraph",  "showgraphone",  "showgraphtwo",  "showVgraph",  "showVgraphone",  "showVgraphtwo",  "showgradient",  "showF",  "showU",  "helpLabel",  "helpFlag",  "zeroval",  "scale1",  "scale2",  "plot2max",  "plot1max",  "showmidgraph",  "showmidVgraph",  "rM1m",  "rM2m",  "rM1M2",  "scalex",  "scaley",  "scalef",  "gmax",  "gmin",  "gy",  "Vy",  "F1",  "F2",  "colorball1",  "colorball2",  "n",  "nmax",  "spacing",  "q",  "q0",  "q00",  "q0true",  "q00true",  "m",  "m0",  "m00",  "x",  "xstore",  "xs",  "vx",  "vxs",  "vys",  "y",  "ystore",  "y01slider",  "ytext",  "vy",  "xForce",  "xForcescale",  "yForce",  "yForcescale",  "elecForce",  "forceValue",  "color",  "r",  "radiusx",  "radiusy",  "colorStr",  "colorValue",  "qLabel",  "StrData",  "datasetN",  "datasetx",  "datasety",  "ElementI",  "mode",  "mode1",  "radius",  "movethomson",  "disabledbutton",  "dragmex",  "dragmexs",  "dragmey",  "dragemetrue",  "pi",  "theta",  "thetadegrees",  "thetarecord",  "counter",  "histogramcounter",  "showb",  "key",  "maxy",  "ncircle",  "n2",  "c",  "cs",  "xline",  "yline",  "msg",  "Rs",  "dxs",  "ds",  "xline2",  "yline2",  "dys",  "D",  "D2",  "red",  "green",  "blue",  "stroke",  "styleList"]; 

  _model._outputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "text",  "selected",  "print",  "fontb",  "font",  "selectedview",  "selectedview1",  "selectedview2",  "memorycolor",  "isAndroid",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "datashow",  "world",  "graph",  "selectedmodel",  "showmodel",  "functionY",  "solutionY",  "vxtest",  "k",  "G",  "x1",  "x2",  "xtest",  "q1",  "m1",  "q2",  "m2",  "qtest",  "mtest",  "E1",  "g1",  "V1",  "phi1",  "E2",  "g2",  "V2",  "phi2",  "Enet",  "gnet",  "Vnet",  "phinet",  "range",  "dx",  "show1",  "show2",  "testc",  "g1show",  "g2show",  "gnetshow",  "V1show",  "V2show",  "Vnetshow",  "showgraph",  "showgraphone",  "showgraphtwo",  "showVgraph",  "showVgraphone",  "showVgraphtwo",  "showgradient",  "showF",  "showU",  "helpLabel",  "helpFlag",  "zeroval",  "scale1",  "scale2",  "plot2max",  "plot1max",  "showmidgraph",  "showmidVgraph",  "rM1m",  "rM2m",  "rM1M2",  "scalex",  "scaley",  "scalef",  "gmax",  "gmin",  "gy",  "Vy",  "F1",  "F2",  "colorball1",  "colorball2",  "n",  "nmax",  "spacing",  "q",  "q0",  "q00",  "q0true",  "q00true",  "m",  "m0",  "m00",  "x",  "xstore",  "xs",  "vx",  "vxs",  "vys",  "y",  "ystore",  "y01slider",  "ytext",  "vy",  "xForce",  "xForcescale",  "yForce",  "yForcescale",  "elecForce",  "forceValue",  "color",  "r",  "radiusx",  "radiusy",  "colorStr",  "colorValue",  "qLabel",  "StrData",  "datasetN",  "datasetx",  "datasety",  "ElementI",  "mode",  "mode1",  "radius",  "movethomson",  "disabledbutton",  "dragmex",  "dragmexs",  "dragmey",  "dragemetrue",  "pi",  "theta",  "thetadegrees",  "thetarecord",  "counter",  "histogramcounter",  "showb",  "key",  "maxy",  "ncircle",  "n2",  "c",  "cs",  "xline",  "yline",  "msg",  "Rs",  "dxs",  "ds",  "xline2",  "yline2",  "dys",  "D",  "D2",  "red",  "green",  "blue",  "stroke",  "styleList"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = false;
    __pagesEnabled["SVG"] = true;
    __pagesEnabled["Init Page 2"] = true;
    __pagesEnabled["modelchoice"] = true;
    __pagesEnabled["drawcircle"] = true;
    __pagesEnabled["spectrum"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["left"] = true;
    __pagesEnabled["right"] = true;
    __pagesEnabled["top"] = true;
    __pagesEnabled["bottom"] = true;
    __pagesEnabled["spectrum"] = true;
    __pagesEnabled["colors"] = true;
    __pagesEnabled["force"] = true;
    __pagesEnabled["fixedx0"] = true;
    __pagesEnabled["model"] = false;
  });

  _model.addToReset(function() {
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -5; // EjsS Model.Variables.Var Table.ymin
    ymax = 5; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    size = rangex/20; // EjsS Model.Variables.Var Table.size
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.01; // EjsS Model.Variables.Var Table.dt
    sizex = rangex/10; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/10; // EjsS Model.Variables.Var Table.sizey
    text = "shoot alpha particles and observe motion giving hints to the structure of gold atoms"; // EjsS Model.Variables.Var Table.text
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "auto";  // EjsS Model.Variables.Var Table.selected
      }
    }());
  });

  _model.addToReset(function() {
    print = false; // EjsS Model.Variables.ControlPanelVars.print
    fontb = "normal bold 1.5vw "; // EjsS Model.Variables.ControlPanelVars.fontb
    font = "normal normal 1vw "; // EjsS Model.Variables.ControlPanelVars.font
  });

  _model.addToReset(function() {
    selectedview = new Array(1); // EjsS Model.Variables.layout.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview
        selectedview[_i0] = "both";  // EjsS Model.Variables.layout.selectedview
      }
    }());
    selectedview1 = new Array(1); // EjsS Model.Variables.layout.selectedview1
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview1
        selectedview1[_i0] = "both";  // EjsS Model.Variables.layout.selectedview1
      }
    }());
    selectedview2 = new Array(1); // EjsS Model.Variables.layout.selectedview2
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview2
        selectedview2[_i0] = "both";  // EjsS Model.Variables.layout.selectedview2
      }
    }());
    memorycolor = 0; // EjsS Model.Variables.layout.memorycolor
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "50%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    vvst = true; // EjsS Model.Variables.layout.vvst
    datashow = true; // EjsS Model.Variables.layout.datashow
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.functionY.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.functionY.selectedmodel
        selectedmodel[_i0] = "0";  // EjsS Model.Variables.functionY.selectedmodel
      }
    }());
    functionY = "0"; // EjsS Model.Variables.functionY.functionY
  });

  _model.addToReset(function() {
    vxtest = 0; // EjsS Model.Variables.variables.vxtest
    k = 9.0*0.03; // EjsS Model.Variables.variables.k
    G = 6.673; // EjsS Model.Variables.variables.G
    x1 = -2.0; // EjsS Model.Variables.variables.x1
    x2 = 2.0; // EjsS Model.Variables.variables.x2
    xtest = 0.0; // EjsS Model.Variables.variables.xtest
    q1 = 20.0; // EjsS Model.Variables.variables.q1
    q2 = -10.0; // EjsS Model.Variables.variables.q2
    qtest = 1.0; // EjsS Model.Variables.variables.qtest
    E1 = 0.0; // EjsS Model.Variables.variables.E1
    V1 = 0.0; // EjsS Model.Variables.variables.V1
    E2 = 0.0; // EjsS Model.Variables.variables.E2
    V2 = 0.0; // EjsS Model.Variables.variables.V2
    Enet = 0.0; // EjsS Model.Variables.variables.Enet
    Vnet = 0.0; // EjsS Model.Variables.variables.Vnet
    range = xmax-xmin; // EjsS Model.Variables.variables.range
    dx = 0.1; // EjsS Model.Variables.variables.dx
    helpLabel = "Show Help"; // EjsS Model.Variables.variables.helpLabel
    zeroval = 0.0; // EjsS Model.Variables.variables.zeroval
    scale2 = 1; // EjsS Model.Variables.variables.scale2
    plot2max = 5.2; // EjsS Model.Variables.variables.plot2max
    plot1max = -5.2; // EjsS Model.Variables.variables.plot1max
    scalex = 1; // EjsS Model.Variables.variables.scalex
    scaley = 1; // EjsS Model.Variables.variables.scaley
    scalef = 1; // EjsS Model.Variables.variables.scalef
    gmax = ymax*scaley; // EjsS Model.Variables.variables.gmax
    gmin = ymin*scaley; // EjsS Model.Variables.variables.gmin
    gy = 0; // EjsS Model.Variables.variables.gy
    Vy = 0; // EjsS Model.Variables.variables.Vy
    F1 = 0; // EjsS Model.Variables.variables.F1
    F2 = 0; // EjsS Model.Variables.variables.F2
    colorball1 = ""; // EjsS Model.Variables.variables.colorball1
    colorball2 = ""; // EjsS Model.Variables.variables.colorball2
  });

  _model.addToReset(function() {
    n = 80; // EjsS Model.Variables.FieldVars.n
    nmax = 80; // EjsS Model.Variables.FieldVars.nmax
    spacing = 2; // EjsS Model.Variables.FieldVars.spacing
    q = new Array(nmax); // EjsS Model.Variables.FieldVars.q
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.q
        q[_i0] = 79;  // EjsS Model.Variables.FieldVars.q
      }
    }());
    q0 = 79; // EjsS Model.Variables.FieldVars.q0
    q00 = 2; // EjsS Model.Variables.FieldVars.q00
    q0true = true; // EjsS Model.Variables.FieldVars.q0true
    q00true = true; // EjsS Model.Variables.FieldVars.q00true
    m = new Array(nmax); // EjsS Model.Variables.FieldVars.m
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.m
        m[_i0] = 4;  // EjsS Model.Variables.FieldVars.m
      }
    }());
    m0 = 197; // EjsS Model.Variables.FieldVars.m0
    m00 = 4; // EjsS Model.Variables.FieldVars.m00
    x = new Array(nmax); // EjsS Model.Variables.FieldVars.x
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.x
        x[_i0] = 0;  // EjsS Model.Variables.FieldVars.x
      }
    }());
    xstore = new Array(nmax); // EjsS Model.Variables.FieldVars.xstore
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.xstore
        xstore[_i0] = 0;  // EjsS Model.Variables.FieldVars.xstore
      }
    }());
    xs = -5; // EjsS Model.Variables.FieldVars.xs
    vx = new Array(nmax); // EjsS Model.Variables.FieldVars.vx
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.vx
        vx[_i0] = 0;  // EjsS Model.Variables.FieldVars.vx
      }
    }());
    vxs = 10; // EjsS Model.Variables.FieldVars.vxs
    vys = 0; // EjsS Model.Variables.FieldVars.vys
    y = new Array(nmax); // EjsS Model.Variables.FieldVars.y
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.y
        y[_i0] = 0;  // EjsS Model.Variables.FieldVars.y
      }
    }());
    ystore = new Array(nmax); // EjsS Model.Variables.FieldVars.ystore
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.ystore
        ystore[_i0] = 0;  // EjsS Model.Variables.FieldVars.ystore
      }
    }());
    y01slider = y[1]; // EjsS Model.Variables.FieldVars.y01slider
    ytext = new Array(nmax); // EjsS Model.Variables.FieldVars.ytext
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.ytext
        ytext[_i0] = 0;  // EjsS Model.Variables.FieldVars.ytext
      }
    }());
    vy = new Array(nmax); // EjsS Model.Variables.FieldVars.vy
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.vy
        vy[_i0] = 0;  // EjsS Model.Variables.FieldVars.vy
      }
    }());
    xForce = new Array(nmax); // EjsS Model.Variables.FieldVars.xForce
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.xForce
        xForce[_i0] = 0;  // EjsS Model.Variables.FieldVars.xForce
      }
    }());
    xForcescale = new Array(nmax); // EjsS Model.Variables.FieldVars.xForcescale
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.xForcescale
        xForcescale[_i0] = 0;  // EjsS Model.Variables.FieldVars.xForcescale
      }
    }());
    yForce = new Array(nmax); // EjsS Model.Variables.FieldVars.yForce
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.yForce
        yForce[_i0] = 0;  // EjsS Model.Variables.FieldVars.yForce
      }
    }());
    yForcescale = new Array(nmax); // EjsS Model.Variables.FieldVars.yForcescale
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.yForcescale
        yForcescale[_i0] = 0;  // EjsS Model.Variables.FieldVars.yForcescale
      }
    }());
    elecForce = new Array(nmax); // EjsS Model.Variables.FieldVars.elecForce
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.elecForce
        elecForce[_i0] = 0;  // EjsS Model.Variables.FieldVars.elecForce
      }
    }());
    forceValue = new Array(nmax); // EjsS Model.Variables.FieldVars.forceValue
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.forceValue
        forceValue[_i0] = 0;  // EjsS Model.Variables.FieldVars.forceValue
      }
    }());
  });

  _model.addToReset(function() {
    color = new Array(nmax); // EjsS Model.Variables.DisplayVars.color
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.DisplayVars.color
        color[_i0] = 0;  // EjsS Model.Variables.DisplayVars.color
      }
    }());
    r = new Array(nmax); // EjsS Model.Variables.DisplayVars.r
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.DisplayVars.r
        r[_i0] = 1;  // EjsS Model.Variables.DisplayVars.r
      }
    }());
    radiusx = new Array(nmax); // EjsS Model.Variables.DisplayVars.radiusx
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.DisplayVars.radiusx
        radiusx[_i0] = r*scalex;  // EjsS Model.Variables.DisplayVars.radiusx
      }
    }());
    radiusy = new Array(nmax); // EjsS Model.Variables.DisplayVars.radiusy
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.DisplayVars.radiusy
        radiusy[_i0] = r*scaley;  // EjsS Model.Variables.DisplayVars.radiusy
      }
    }());
    colorStr = ""; // EjsS Model.Variables.DisplayVars.colorStr
    colorValue = "null"; // EjsS Model.Variables.DisplayVars.colorValue
    qLabel = 0; // EjsS Model.Variables.DisplayVars.qLabel
    StrData = ["red","green","blue","yellow","cyan","magneta"]; // EjsS Model.Variables.DisplayVars.StrData
  });

  _model.addToReset(function() {
    datasetN = 13; // EjsS Model.Variables.drageme.datasetN
    datasetx = new Array(datasetN); // EjsS Model.Variables.drageme.datasetx
    (function () {
      var _i0;
      for (_i0=0; _i0<datasetN; _i0+=1) {  // EjsS Model.Variables.drageme.datasetx
        datasetx[_i0] = 0;  // EjsS Model.Variables.drageme.datasetx
      }
    }());
    datasety = new Array(datasetN); // EjsS Model.Variables.drageme.datasety
    (function () {
      var _i0;
      for (_i0=0; _i0<datasetN; _i0+=1) {  // EjsS Model.Variables.drageme.datasety
        datasety[_i0] = 0;  // EjsS Model.Variables.drageme.datasety
      }
    }());
    ElementI = 0; // EjsS Model.Variables.drageme.ElementI
    mode = new Array(1); // EjsS Model.Variables.drageme.mode
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.drageme.mode
        mode[_i0] = "auto";  // EjsS Model.Variables.drageme.mode
      }
    }());
    mode1 = new Array(1); // EjsS Model.Variables.drageme.mode1
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.drageme.mode1
        mode1[_i0] = "Rutherford Atom-Model";  // EjsS Model.Variables.drageme.mode1
      }
    }());
    radius = 0.05; // EjsS Model.Variables.drageme.radius
    movethomson = false; // EjsS Model.Variables.drageme.movethomson
    disabledbutton = false; // EjsS Model.Variables.drageme.disabledbutton
    dragmex = Math.random()*4; // EjsS Model.Variables.drageme.dragmex
    dragmexs = dragmex; // EjsS Model.Variables.drageme.dragmexs
    dragmey = -ymax/2*scaley; // EjsS Model.Variables.drageme.dragmey
    dragemetrue = false; // EjsS Model.Variables.drageme.dragemetrue
  });

  _model.addToReset(function() {
    pi = Math.PI; // EjsS Model.Variables.theta.pi
    theta = 0; // EjsS Model.Variables.theta.theta
    thetadegrees = -200; // EjsS Model.Variables.theta.thetadegrees
    thetarecord = false; // EjsS Model.Variables.theta.thetarecord
    counter = 0; // EjsS Model.Variables.theta.counter
    histogramcounter = 0; // EjsS Model.Variables.theta.histogramcounter
  });

  _model.addToReset(function() {
    showb = true; // EjsS Model.Variables.keyboard.showb
    key = 0; // EjsS Model.Variables.keyboard.key
  });

  _model.addToReset(function() {
    maxy = 1; // EjsS Model.Variables.drawcircle.maxy
    ncircle = 12; // EjsS Model.Variables.drawcircle.ncircle
    n2 = n*10; // EjsS Model.Variables.drawcircle.n2
    c = pi*2/n; // EjsS Model.Variables.drawcircle.c
    cs = new Array(ncircle); // EjsS Model.Variables.drawcircle.cs
    (function () {
      var _i0;
      for (_i0=0; _i0<ncircle; _i0+=1) {  // EjsS Model.Variables.drawcircle.cs
        cs[_i0] = 0;  // EjsS Model.Variables.drawcircle.cs
      }
    }());
    xline = new Array(ncircle); // EjsS Model.Variables.drawcircle.xline
    (function () {
      var _i0;
      for (_i0=0; _i0<ncircle; _i0+=1) {  // EjsS Model.Variables.drawcircle.xline
        xline[_i0] = 0.0;  // EjsS Model.Variables.drawcircle.xline
      }
    }());
    yline = new Array(ncircle); // EjsS Model.Variables.drawcircle.yline
    (function () {
      var _i0;
      for (_i0=0; _i0<ncircle; _i0+=1) {  // EjsS Model.Variables.drawcircle.yline
        yline[_i0] = 0.0;  // EjsS Model.Variables.drawcircle.yline
      }
    }());
    msg = new Array(ncircle); // EjsS Model.Variables.drawcircle.msg
    (function () {
      var _i0;
      for (_i0=0; _i0<ncircle; _i0+=1) {  // EjsS Model.Variables.drawcircle.msg
        msg[_i0] = "";  // EjsS Model.Variables.drawcircle.msg
      }
    }());
    Rs = xmax*0.75; // EjsS Model.Variables.drawcircle.Rs
    dxs = new Array(n2); // EjsS Model.Variables.drawcircle.dxs
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.drawcircle.dxs
        dxs[_i0] = 0.0;  // EjsS Model.Variables.drawcircle.dxs
      }
    }());
    ds = Rs*0.045; // EjsS Model.Variables.drawcircle.ds
    xline2 = new Array(n); // EjsS Model.Variables.drawcircle.xline2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.drawcircle.xline2
        xline2[_i0] = 0.0;  // EjsS Model.Variables.drawcircle.xline2
      }
    }());
    yline2 = new Array(n); // EjsS Model.Variables.drawcircle.yline2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.drawcircle.yline2
        yline2[_i0] = 0.0;  // EjsS Model.Variables.drawcircle.yline2
      }
    }());
    dys = new Array(n2); // EjsS Model.Variables.drawcircle.dys
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.drawcircle.dys
        dys[_i0] = 0.0;  // EjsS Model.Variables.drawcircle.dys
      }
    }());
    D = (xmax-xmin)*0.9; // EjsS Model.Variables.drawcircle.D
    D2 = D/2; // EjsS Model.Variables.drawcircle.D2
    red = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.drawcircle.red
    green = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.drawcircle.green
    blue = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.drawcircle.blue
    stroke = new Array(n2); // EjsS Model.Variables.drawcircle.stroke
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.drawcircle.stroke
        stroke[_i0] = 1;  // EjsS Model.Variables.drawcircle.stroke
      }
    }());
  });

  _model.addToReset(function() {
    styleList = []; // EjsS Model.Variables.spectrum.styleList
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(20);
  });

  // computes force between charges  // > CustomCode.calcF:1
  function calcF() {  // > CustomCode.calcF:2
    for (var i=0; i<n; i++) {  // > CustomCode.calcF:3
      xForce[i]=0;  // > CustomCode.calcF:4
      yForce[i]=0;  // > CustomCode.calcF:5
      elecForce[i]=0;  // > CustomCode.calcF:6
   var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options  // > CustomCode.calcF:7
      var option = (opts.length > 0)? opts[0]:""; // selected option   // > CustomCode.calcF:8
        // > CustomCode.calcF:9
      if (q0true===true&&((option=="Rutherford Atom-Model")||(option=="Rutherford Atom-Model Two")))  // > CustomCode.calcF:10
      {  // > CustomCode.calcF:11
      q[qLabel]=q0;  //charge value from slider  // > CustomCode.calcF:12
       }  // > CustomCode.calcF:13
      else if (q0true===true&&(option=="Thomson Atom-Model configurable"))  // > CustomCode.calcF:14
      {  // > CustomCode.calcF:15
      q[qLabel]=q0/(nmax-1);  //charge value from slider  // > CustomCode.calcF:16
       }  // > CustomCode.calcF:17
       else if (q0true===true&&(option=="Thomson Atom-Model configurable each atom"))  // > CustomCode.calcF:18
      {  // > CustomCode.calcF:19
    //  q[qLabel]=q0/(nmax-1);  //charge value from slider  // > CustomCode.calcF:20
       q[qLabel]=0;  //charge value from slider  // > CustomCode.calcF:21
       }  // > CustomCode.calcF:22
        // > CustomCode.calcF:23
       else if(q00true===true){  // > CustomCode.calcF:24
       // if(q00true===true){  // > CustomCode.calcF:25
              q[qLabel]=q00;  //charge value from slider2  // > CustomCode.calcF:26
         }  // > CustomCode.calcF:27
      for (var j=0; j<n; j++) {  // > CustomCode.calcF:28
        if (i!=j) {  // > CustomCode.calcF:29
          //calculate force on ith particle due to  // > CustomCode.calcF:30
          //jth particle (therefore exclude i=j calculation)  // > CustomCode.calcF:31
          var deltaX=x[i]-x[j];  // > CustomCode.calcF:32
         var deltaY=y[i]-y[j];  // > CustomCode.calcF:33
          var r2=deltaX*deltaX+deltaY*deltaY;  // > CustomCode.calcF:34
          var r=Math.sqrt(r2);  // > CustomCode.calcF:35
          var cos=deltaX/r;  // > CustomCode.calcF:36
          var sin=deltaY/r;  // > CustomCode.calcF:37
          var r3=r2*r;  // > CustomCode.calcF:38
          var    magnitude;  // > CustomCode.calcF:39
       //  if (r >= Math.abs(radiusx[0]/2)){  // > CustomCode.calcF:40
           magnitude=k*q[i]*q[j]/r2; // added G by lookang  // > CustomCode.calcF:41
       //    }  // > CustomCode.calcF:42
        //  else if(r < Math.abs(radiusx[0]/2)){  // > CustomCode.calcF:43
       //  magnitude=k*q[i]*q[j]*r; // added G by lookang -2.669*2*x[1]/q[1]*(q[0]/100)  // > CustomCode.calcF:44
       //  }  // > CustomCode.calcF:45
          xForce[i]=xForce[i]+magnitude*cos;  // x component  // > CustomCode.calcF:46
          yForce[i]=yForce[i]+magnitude*sin;  // y component  // > CustomCode.calcF:47
        //  xForce[i]=-xForce[i]-magnitude*cos;  // x component negative for mass lookang  // > CustomCode.calcF:48
        //  yForce[i]=-yForce[i]-magnitude*sin;  // y component  // > CustomCode.calcF:49
        }  // > CustomCode.calcF:50
      }  // > CustomCode.calcF:51
      elecForce[i]=Math.sqrt(xForce[i]*xForce[i]+yForce[i]*yForce[i]);//magnitude  // > CustomCode.calcF:52
    //forceValue[i]=" F"+" = "+_view._format(elecForce[i],"0.00E00");  // > CustomCode.calcF:53
  //  forceValue[i]=" |F"+_view._format([i+1],"0")+ "|="+_view._format(elecForce[i],"0.00")+"x10^-7 N ";  // > CustomCode.calcF:54
   forceValue[0]=" |F₁|="+_view._format(elecForce[i],"0.00")+"x10^-7 N ";  // > CustomCode.calcF:55
   forceValue[1]=" |F₂|="+_view._format(elecForce[i],"0.00")+"x10^-7 N ";  // > CustomCode.calcF:56
    }  // > CustomCode.calcF:57
  }  // > CustomCode.calcF:58

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function spectrum () {  // > CustomCode.spectrum:1
  // style  // > CustomCode.spectrum:2
      var style = EJSS_DRAWING2D.style("mystyl"+i);  // > CustomCode.spectrum:3
      style.setFillColor("rgb("+r+","+g+","+b+")");  // > CustomCode.spectrum:4
      style.setLineColor("rgb("+r+","+g+","+b+")");  // > CustomCode.spectrum:5
      style.setLineWidth(1.5);  // > CustomCode.spectrum:6
      styleList.push(style);  // > CustomCode.spectrum:7
        // > CustomCode.spectrum:8
      }  // > CustomCode.spectrum:9

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //setting up initial configuration with two charges  // > Initialization.Init Page:1
    n=2;  // > Initialization.Init Page:2
    for (var i=0;i<n;i++){  // > Initialization.Init Page:3
    //  q[0]=q0/q0; //slider 1  // > Initialization.Init Page:4
     // q[1]=q00/q00; //slider 2  // > Initialization.Init Page:5
       q[0]=q0; //slider 1  // > Initialization.Init Page:6
      q[1]=q00; //slider 2  // > Initialization.Init Page:7
      m[0] = m0 =197;  // > Initialization.Init Page:8
      m[1] = m00 =4;  // > Initialization.Init Page:9
        // > Initialization.Init Page:10
      //q[i]=1;  // > Initialization.Init Page:11
    //x[i]=rangex/2*(2*i-1)/n; // equal space at 0  // > Initialization.Init Page:12
    //x[i]=rangex/2*(i)/n;  // > Initialization.Init Page:13
    x[0] =0;  // > Initialization.Init Page:14
    //x[1] = -5;  // > Initialization.Init Page:15
    //y[i]=0;  // > Initialization.Init Page:16
    vx[1] = vxs; // velocity of aplha particles  // > Initialization.Init Page:17
    color[i]=i+13;  // > Initialization.Init Page:18
    //r[i]=q[i]*1;// make radius bigger  // > Initialization.Init Page:19
    r[i]=1;  // > Initialization.Init Page:20
    //radiusx[1]=0.1; //set green test mass size smaller  // > Initialization.Init Page:21
    forceValue[i]="F";  // > Initialization.Init Page:22
    //colorStr+=StrData[i]+";";  // > Initialization.Init Page:23
    }  // > Initialization.Init Page:24
    //slider color  // > Initialization.Init Page:25
    color0=color[0];  // > Initialization.Init Page:26
    color1=color[1];  // > Initialization.Init Page:27
    calcF();  // > Initialization.Init Page:28
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["SVG"]) return;
    var container = document.createElement('div');  // > Initialization.SVG:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.SVG:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.SVG:3
      '    <stop offset="0%" style="stop-color:rgb(200,220,208); stop-opacity:1" />'+  // > Initialization.SVG:4
      '    <stop offset="100%" style="stop-color:rgb(100,200,208);stop-opacity:1" />'+  // > Initialization.SVG:5
      '  </radialGradient>'+  // > Initialization.SVG:6
      '</defs></svg>';  // > Initialization.SVG:7
    container.innerHTML = svggradient;  // > Initialization.SVG:8
    document.body.appendChild(container);  // > Initialization.SVG:9
    //"url(#mygrandient)"  // > Initialization.SVG:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page 2"]) return;
    if(mode[0]==="auto") {  // > Initialization.Init Page 2:1
      y[1]= (Math.random()-0.5)*8;  // > Initialization.Init Page 2:2
      y01slider=y[1];  // > Initialization.Init Page 2:3
        // > Initialization.Init Page 2:4
    }  // > Initialization.Init Page 2:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["modelchoice"]) return;
    vx[1] = vxs; // velocity of aplha particles  // > Initialization.modelchoice:1
    //vx[1]=0;  // > Initialization.modelchoice:2
    x[1] = -5;  // > Initialization.modelchoice:3
    var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options  // > Initialization.modelchoice:4
        var option = (opts.length > 0)? opts[0]:""; // selected option   // > Initialization.modelchoice:5
    if(mode1=="Rutherford Atom-Model") { // set to mode1 currently  // > Initialization.modelchoice:6
    //setting up initial configuration with two charges  // > Initialization.modelchoice:7
    n=2;  // > Initialization.modelchoice:8
    for (var i=0;i<n;i++){  // > Initialization.modelchoice:9
    //  q[0]=q0/q0; //slider 1  // > Initialization.modelchoice:10
     // q[1]=q00/q00; //slider 2  // > Initialization.modelchoice:11
       q[0]=q0; //slider 1  // > Initialization.modelchoice:12
      q[1]=q00; //slider 2  // > Initialization.modelchoice:13
    //  m[0] = m0 =197;  // > Initialization.modelchoice:14
    //  m[1] = m00 =4;  // > Initialization.modelchoice:15
       m[0] = m0 ;  // > Initialization.modelchoice:16
      m[1] = m00;  // > Initialization.modelchoice:17
        // > Initialization.modelchoice:18
      //q[i]=1;  // > Initialization.modelchoice:19
    //x[i]=rangex/2*(2*i-1)/n; // equal space at 0  // > Initialization.modelchoice:20
    //x[i]=rangex/2*(i)/n;  // > Initialization.modelchoice:21
    x[0] =0;  // > Initialization.modelchoice:22
    //x[1] = -5;  // > Initialization.modelchoice:23
    y[0]=0;  // > Initialization.modelchoice:24
    color[i]=i+13;  // > Initialization.modelchoice:25
    //r[i]=q[i]*1;// make radius bigger  // > Initialization.modelchoice:26
    r[i]=1;  // > Initialization.modelchoice:27
    //radiusx[1]=0.1; //set green test mass size smaller  // > Initialization.modelchoice:28
    forceValue[i]="F";  // > Initialization.modelchoice:29
    //colorStr+=StrData[i]+";";  // > Initialization.modelchoice:30
    }  // > Initialization.modelchoice:31
        // > Initialization.modelchoice:32
    }  // > Initialization.modelchoice:33
    //slider color  // > Initialization.modelchoice:34
    color0=color[0];  // > Initialization.modelchoice:35
    color1=color[1];  // > Initialization.modelchoice:36
    calcF();  // > Initialization.modelchoice:37
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["drawcircle"]) return;
    // text 1 to 12 on the clock  // > Initialization.drawcircle:1
    ncircle =12;  // > Initialization.drawcircle:2
    n2 =ncircle*12;  // > Initialization.drawcircle:3
    var c=Math.PI*2/ncircle;  // > Initialization.drawcircle:4
    //for(var i=0;i<ncircle/2+1;i++){  // > Initialization.drawcircle:5
     for(var i=3;i<ncircle/2+1;i++){ // for 90 to 180 degree only  // > Initialization.drawcircle:6
      //cs[i]=-c*i;  // > Initialization.drawcircle:7
      xline[i]=Rs*1.2*Math.cos(c*i);  // > Initialization.drawcircle:8
      yline[i]=Rs*1.2*Math.sin(c*i);  // > Initialization.drawcircle:9
       msg[i]=i*30;  // > Initialization.drawcircle:10
    }  // > Initialization.drawcircle:11
    //for(var i=ncircle/2+1;i<ncircle;i++){  // > Initialization.drawcircle:12
      for(var i=ncircle/2+3;i<ncircle;i++){// for -90 to -150 degree only  // > Initialization.drawcircle:13
      //cs[i]=-c*i;  // > Initialization.drawcircle:14
      xline[i]=-Rs*1.2*Math.cos(-c*i);  // > Initialization.drawcircle:15
      yline[i]=-Rs*1.2*Math.sin(-c*i);  // > Initialization.drawcircle:16
       msg[i]=-i*30+180;  // > Initialization.drawcircle:17
    }  // > Initialization.drawcircle:18
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["spectrum"]) return;
     styleList = [];  // > Initialization.spectrum:1
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["spectrum"]) return;
    spectrum();  // > Evolution.spectrum:1
    _view.spec.setMarkStyleList(styleList);  // > Evolution.spectrum:2
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["colors"]) return;
    if (q1 > 0.0)  // > FixedRelations.colors:1
    {  // > FixedRelations.colors:2
    colorball1 = "rgba(255,0,0,255)";  // > FixedRelations.colors:3
    }  // > FixedRelations.colors:4
    else if  (q1 < 0.0)  // > FixedRelations.colors:5
      {  // > FixedRelations.colors:6
        colorball1 = "rgba(0,0,255,255)";  // > FixedRelations.colors:7
      }  // > FixedRelations.colors:8
      else if (q1===0)  // > FixedRelations.colors:9
      {  // > FixedRelations.colors:10
      colorball1 = "rgba(255,255,255,255)";  // > FixedRelations.colors:11
      }    // > FixedRelations.colors:12
        // > FixedRelations.colors:13
      //q2  // > FixedRelations.colors:14
        if (q2 > 0.0)  // > FixedRelations.colors:15
    {  // > FixedRelations.colors:16
    colorball2 = "rgba(255,0,0,255)";  // > FixedRelations.colors:17
    }  // > FixedRelations.colors:18
    else if  (q2 < 0.0)  // > FixedRelations.colors:19
      {  // > FixedRelations.colors:20
        colorball2 = "rgba(0,0,255,255)";  // > FixedRelations.colors:21
      }  // > FixedRelations.colors:22
      else if (q2===0.0)  // > FixedRelations.colors:23
      {  // > FixedRelations.colors:24
      colorball2 = "rgba(255,255,255,255)";  // > FixedRelations.colors:25
      }  // > FixedRelations.colors:26
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["force"]) return;
    calcF();  // > FixedRelations.force:1
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["fixedx0"]) return;
    //x[0]=0;  // > FixedRelations.fixedx0:1
    var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options  // > FixedRelations.fixedx0:2
        var option = (opts.length > 0)? opts[0]:""; // selected option   // > FixedRelations.fixedx0:3
    if(option=="Rutherford Atom-Model") {  // > FixedRelations.fixedx0:4
    radiusx[0] =scalex*r[0]*0.2;  // > FixedRelations.fixedx0:5
    radiusy[0] =scaley*r[0]*0.2;  // > FixedRelations.fixedx0:6
    radiusx[1] =scalex*r[1]*0.2;  // > FixedRelations.fixedx0:7
    radiusy[1] =scaley*r[1]*0.2;  // > FixedRelations.fixedx0:8
    //xForcescale[0] =xForce[0]*scalef;  // > FixedRelations.fixedx0:9
    //xForcescale[1] =xForce[1]*scalef;  // > FixedRelations.fixedx0:10
    //yForcescale[0] =yForce[0]*scalef;  // > FixedRelations.fixedx0:11
    //yForcescale[1] =yForce[1]*scalef;  // > FixedRelations.fixedx0:12
    //x[0]=0;  // > FixedRelations.fixedx0:13
    //y[0]=0;  // > FixedRelations.fixedx0:14
    vx[0]=0; //force gold to be stationary  // > FixedRelations.fixedx0:15
    vy[0]=0;  // > FixedRelations.fixedx0:16
    }  // > FixedRelations.fixedx0:17
    if(option=="Thomson Atom-Model configurable") {  // > FixedRelations.fixedx0:18
      for (var i=0;i<n;i++){  // > FixedRelations.fixedx0:19
    radiusx[i] =scalex*r[i]*0.2;  // > FixedRelations.fixedx0:20
    radiusy[i] =scaley*r[i]*0.2;  // > FixedRelations.fixedx0:21
    //xForcescale[i] =xForce[i]*scalef;  // > FixedRelations.fixedx0:22
    //yForcescale[i] =yForce[i]*scalef;  // > FixedRelations.fixedx0:23
    }  // > FixedRelations.fixedx0:24
    vx[0]=0; //force gold to be stationary  // > FixedRelations.fixedx0:25
    vy[0]=0;  // > FixedRelations.fixedx0:26
    //vx[1]=0; //force gold to be stationary  // > FixedRelations.fixedx0:27
    //vy[1]=0;  // > FixedRelations.fixedx0:28
    vx[2]=0; //force gold to be stationary  // > FixedRelations.fixedx0:29
    vy[2]=0;  // > FixedRelations.fixedx0:30
    vx[3]=0; //force gold to be stationary  // > FixedRelations.fixedx0:31
    vy[3]=0;  // > FixedRelations.fixedx0:32
    vx[4]=0; //force gold to be stationary  // > FixedRelations.fixedx0:33
    vy[4]=0;  // > FixedRelations.fixedx0:34
    vx[5]=0; //force gold to be stationary  // > FixedRelations.fixedx0:35
    vy[5]=0;  // > FixedRelations.fixedx0:36
    vx[6]=0; //force gold to be stationary  // > FixedRelations.fixedx0:37
    vy[6]=0;  // > FixedRelations.fixedx0:38
    vx[7]=0; //force gold to be stationary  // > FixedRelations.fixedx0:39
    vy[7]=0;  // > FixedRelations.fixedx0:40
    vx[8]=0; //force gold to be stationary  // > FixedRelations.fixedx0:41
    vy[8]=0;  // > FixedRelations.fixedx0:42
    vx[9]=0; //force gold to be stationary  // > FixedRelations.fixedx0:43
    vy[9]=0;  // > FixedRelations.fixedx0:44
    vx[10]=0; //force gold to be stationary  // > FixedRelations.fixedx0:45
    vy[10]=0;  // > FixedRelations.fixedx0:46
    x[0]=0;  // > FixedRelations.fixedx0:47
    y[0]=0;  // > FixedRelations.fixedx0:48
    //x[0]=xstore[0];  // > FixedRelations.fixedx0:49
    //y[0]=ystore[0];  // > FixedRelations.fixedx0:50
    //x[2] = -2; // spread x  // > FixedRelations.fixedx0:51
    x[2] = xstore[2];  // > FixedRelations.fixedx0:52
    x[3] = xstore[3];  // > FixedRelations.fixedx0:53
    x[4] = xstore[4];  // > FixedRelations.fixedx0:54
    x[5] = xstore[5];  // > FixedRelations.fixedx0:55
    x[6] = xstore[6];  // > FixedRelations.fixedx0:56
    x[7] = xstore[7];  // > FixedRelations.fixedx0:57
    x[8] = xstore[8];  // > FixedRelations.fixedx0:58
    x[9] = xstore[9];  // > FixedRelations.fixedx0:59
    y[2] = ystore[2];  // > FixedRelations.fixedx0:60
    y[3] = ystore[3];  // > FixedRelations.fixedx0:61
    y[4] = ystore[4];  // > FixedRelations.fixedx0:62
    y[5] = ystore[5];  // > FixedRelations.fixedx0:63
    y[6] = ystore[6];  // > FixedRelations.fixedx0:64
    y[7] = ystore[7];  // > FixedRelations.fixedx0:65
    y[8] = ystore[8];  // > FixedRelations.fixedx0:66
    y[9] = ystore[9];  // > FixedRelations.fixedx0:67
    /*  // > FixedRelations.fixedx0:68
      x[4] = x[0]+spacing;  // > FixedRelations.fixedx0:69
      x[5] = x[0]-spacing;  // > FixedRelations.fixedx0:70
      x[6] = x[0]+spacing;  // > FixedRelations.fixedx0:71
      x[7] = x[0]-spacing;  // > FixedRelations.fixedx0:72
      x[8] = x[0];  // > FixedRelations.fixedx0:73
      x[9] = x[0]+spacing;  // > FixedRelations.fixedx0:74
    //  y[2] = -2; // spread y  // > FixedRelations.fixedx0:75
    y[2] =ystore[2];  // > FixedRelations.fixedx0:76
      y[3] = y[0]-spacing;  // > FixedRelations.fixedx0:77
      y[4] = y[0]-spacing;  // > FixedRelations.fixedx0:78
      y[5] = y[0];  // > FixedRelations.fixedx0:79
      y[6] = y[0];  // > FixedRelations.fixedx0:80
      y[7] = y[0]+spacing;  // > FixedRelations.fixedx0:81
     y[8] = y[0]+spacing;  // > FixedRelations.fixedx0:82
      y[9] = y[0]+spacing;  // > FixedRelations.fixedx0:83
     */  // > FixedRelations.fixedx0:84
        // > FixedRelations.fixedx0:85
    }  // > FixedRelations.fixedx0:86
    if(option=="Thomson Atom-Model configurable each atom") {  // > FixedRelations.fixedx0:87
      for (var i=0;i<n;i++){  // > FixedRelations.fixedx0:88
    radiusx[i] =scalex*r[i]*0.2;  // > FixedRelations.fixedx0:89
    radiusy[i] =scaley*r[i]*0.2;  // > FixedRelations.fixedx0:90
    //xForcescale[i] =xForce[i]*scalef;  // > FixedRelations.fixedx0:91
    //yForcescale[i] =yForce[i]*scalef;  // > FixedRelations.fixedx0:92
    xForce[i]=xForce[i]*0.1; // make forces smaller still to achieve historic data  // > FixedRelations.fixedx0:93
    yForce[i]=yForce[i]*0.1;  // > FixedRelations.fixedx0:94
    }  // > FixedRelations.fixedx0:95
    vx[0]=0; //force gold to be stationary  // > FixedRelations.fixedx0:96
    vy[0]=0;  // > FixedRelations.fixedx0:97
    //vx[1]=0; //force gold to be stationary  // > FixedRelations.fixedx0:98
    //vy[1]=0;  // > FixedRelations.fixedx0:99
    for (var i=2;i<n;i++){  // > FixedRelations.fixedx0:100
    vx[i]=0; //force gold to be stationary  // > FixedRelations.fixedx0:101
    vy[i]=0;  // > FixedRelations.fixedx0:102
    x[i] = xstore[i];  // > FixedRelations.fixedx0:103
    y[i] = ystore[i];  // > FixedRelations.fixedx0:104
    }  // > FixedRelations.fixedx0:105
    x[0]=xstore[0];  // > FixedRelations.fixedx0:106
    y[0]=ystore[0];  // > FixedRelations.fixedx0:107
    //x[0]=xstore[0];  // > FixedRelations.fixedx0:108
    //y[0]=ystore[0];  // > FixedRelations.fixedx0:109
        // > FixedRelations.fixedx0:110
    }  // > FixedRelations.fixedx0:111
    if(option=="Rutherford Atom-Model Two") {  // > FixedRelations.fixedx0:112
      for (var i=0;i<n;i++){  // > FixedRelations.fixedx0:113
    radiusx[i] =scalex*r[i]*0.2;  // > FixedRelations.fixedx0:114
    radiusy[i] =scaley*r[i]*0.2;  // > FixedRelations.fixedx0:115
    //xForcescale[i] =xForce[i]*scalef;  // > FixedRelations.fixedx0:116
    //yForcescale[i] =yForce[i]*scalef;  // > FixedRelations.fixedx0:117
    }  // > FixedRelations.fixedx0:118
    vx[0]=0; //force gold to be stationary  // > FixedRelations.fixedx0:119
    vy[0]=0;  // > FixedRelations.fixedx0:120
    //vx[1]=0; //force gold to be stationary  // > FixedRelations.fixedx0:121
    //vy[1]=0;  // > FixedRelations.fixedx0:122
    vx[2]=0; //force gold to be stationary  // > FixedRelations.fixedx0:123
    vy[2]=0;  // > FixedRelations.fixedx0:124
    vx[3]=0; //force gold to be stationary  // > FixedRelations.fixedx0:125
    vy[3]=0;  // > FixedRelations.fixedx0:126
    vx[4]=0; //force gold to be stationary  // > FixedRelations.fixedx0:127
    vy[4]=0;  // > FixedRelations.fixedx0:128
    vx[5]=0; //force gold to be stationary  // > FixedRelations.fixedx0:129
    vy[5]=0;  // > FixedRelations.fixedx0:130
    vx[6]=0; //force gold to be stationary  // > FixedRelations.fixedx0:131
    vy[6]=0;  // > FixedRelations.fixedx0:132
    vx[7]=0; //force gold to be stationary  // > FixedRelations.fixedx0:133
    vy[7]=0;  // > FixedRelations.fixedx0:134
    vx[8]=0; //force gold to be stationary  // > FixedRelations.fixedx0:135
    vy[8]=0;  // > FixedRelations.fixedx0:136
    vx[9]=0; //force gold to be stationary  // > FixedRelations.fixedx0:137
    vy[9]=0;  // > FixedRelations.fixedx0:138
    vx[10]=0; //force gold to be stationary  // > FixedRelations.fixedx0:139
    vy[10]=0;  // > FixedRelations.fixedx0:140
    x[0]=0;  // > FixedRelations.fixedx0:141
    y[0]=0;  // > FixedRelations.fixedx0:142
    //x[0]=xstore[0];  // > FixedRelations.fixedx0:143
    //y[0]=ystore[0];  // > FixedRelations.fixedx0:144
    //x[2] = -2; // spread x  // > FixedRelations.fixedx0:145
    x[2] = xstore[2];  // > FixedRelations.fixedx0:146
    x[3] = xstore[3];  // > FixedRelations.fixedx0:147
    x[4] = xstore[4];  // > FixedRelations.fixedx0:148
    x[5] = xstore[5];  // > FixedRelations.fixedx0:149
    x[6] = xstore[6];  // > FixedRelations.fixedx0:150
    x[7] = xstore[7];  // > FixedRelations.fixedx0:151
    x[8] = xstore[8];  // > FixedRelations.fixedx0:152
    x[9] = xstore[9];  // > FixedRelations.fixedx0:153
    y[2] = ystore[2];  // > FixedRelations.fixedx0:154
    y[3] = ystore[3];  // > FixedRelations.fixedx0:155
    y[4] = ystore[4];  // > FixedRelations.fixedx0:156
    y[5] = ystore[5];  // > FixedRelations.fixedx0:157
    y[6] = ystore[6];  // > FixedRelations.fixedx0:158
    y[7] = ystore[7];  // > FixedRelations.fixedx0:159
    y[8] = ystore[8];  // > FixedRelations.fixedx0:160
    y[9] = ystore[9];  // > FixedRelations.fixedx0:161
    /*  // > FixedRelations.fixedx0:162
      x[4] = x[0]+spacing;  // > FixedRelations.fixedx0:163
      x[5] = x[0]-spacing;  // > FixedRelations.fixedx0:164
      x[6] = x[0]+spacing;  // > FixedRelations.fixedx0:165
      x[7] = x[0]-spacing;  // > FixedRelations.fixedx0:166
      x[8] = x[0];  // > FixedRelations.fixedx0:167
      x[9] = x[0]+spacing;  // > FixedRelations.fixedx0:168
    //  y[2] = -2; // spread y  // > FixedRelations.fixedx0:169
    y[2] =ystore[2];  // > FixedRelations.fixedx0:170
      y[3] = y[0]-spacing;  // > FixedRelations.fixedx0:171
      y[4] = y[0]-spacing;  // > FixedRelations.fixedx0:172
      y[5] = y[0];  // > FixedRelations.fixedx0:173
      y[6] = y[0];  // > FixedRelations.fixedx0:174
      y[7] = y[0]+spacing;  // > FixedRelations.fixedx0:175
     y[8] = y[0]+spacing;  // > FixedRelations.fixedx0:176
      y[9] = y[0]+spacing;  // > FixedRelations.fixedx0:177
     */  // > FixedRelations.fixedx0:178
        // > FixedRelations.fixedx0:179
    }  // > FixedRelations.fixedx0:180
    ytext[0]= y[0]+radiusy[0];  // > FixedRelations.fixedx0:181
    ytext[1]= y[1]+2*radiusy[1]; //visualization  // > FixedRelations.fixedx0:182
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["model"]) return;
    if (x[1]-x[0]>0.5){  // > FixedRelations.model:1
      functionY= "-6.67*"+_view._format(q[0],"0.00")+"/r^2" ;    // > FixedRelations.model:2
      }  // > FixedRelations.model:3
      else if (x[1]-x[0]<-0.5){  // > FixedRelations.model:4
      functionY= "6.67*"+_view._format(q[0],"0.00")+"/r^2" ;    // > FixedRelations.model:5
      }  // > FixedRelations.model:6
    else if (Math.abs(x[1]-x[0])<0.5){  // > FixedRelations.model:7
      functionY= "-6.67*"+_view._format(q[0],"0.00")+"/0.5^2/0.5*r" ;    // > FixedRelations.model:8
          // > FixedRelations.model:9
      }  // > FixedRelations.model:10
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _xLength;
    var _vxLength;
    var _yLength;
    var _vyLength;

    __odeSelf._getOdeVars = function (){ return["x","vx","y","vy","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _xLength = x.length;
      _vxLength = vx.length;
      _yLength = y.length;
      _vyLength = vy.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["left"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["right"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["top"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["bottom"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xLength; __j++)
          if (__state[__n++]!=x[__j] || __state[__n++]!=vx[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_yLength; __j++)
          if (__state[__n++]!=y[__j] || __state[__n++]!=vy[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_xLength != x.length) return true;
      if (_vxLength != vx.length) return true;
      if (_yLength != y.length) return true;
      if (_vyLength != vy.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_xLength;i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(vx[i]) ? vx[i][i] : vx[i]; // Rate for ODE: Evol Page:x
          _aRate[__cRate++] = Array.isArray(xForce[i]/m[i]) ? xForce[i]/m[i][i] : xForce[i]/m[i]; // Rate for ODE: Evol Page:vx
        }
        for (i=0;i<_yLength;i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(vy[i]) ? vy[i][i] : vy[i]; // Rate for ODE: Evol Page:y
          _aRate[__cRate++] = Array.isArray(yForce[i]/m[i]) ? yForce[i]/m[i][i] : yForce[i]/m[i]; // Rate for ODE: Evol Page:vy
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return x[1]-xmin+0.0001;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        thetarecord=true;  // > Event action for page Evol Page:1
        theta = Math.atan2(vy[1],vx[1]);  // > Event action for page Evol Page:2
        thetadegrees=theta*180/pi;  // > Event action for page Evol Page:3
        counter++;  // > Event action for page Evol Page:4
        histogramcounter=1;  // > Event action for page Evol Page:5
        //_view.histogram.append(theta);  // > Event action for page Evol Page:6
        thetarecord=false;  // > Event action for page Evol Page:7
        if(mode[0]==="auto"){  // > Event action for page Evol Page:8
          _view.trail.newSegment();  // > Event action for page Evol Page:9
        //_view.trail.newSegment() ==_view.trail2.newSegment() ;  // > Event action for page Evol Page:10
        memorycolor=memorycolor+1;  // > Event action for page Evol Page:11
        t=0;  // > Event action for page Evol Page:12
        x[1] = 0;  // > Event action for page Evol Page:13
        vx[1]=vxs;  // > Event action for page Evol Page:14
        vy[1]=vys;  // > Event action for page Evol Page:15
        //y[1]= (Math.random()-0.5)*10;  // > Event action for page Evol Page:16
        //a=0;  // > Event action for page Evol Page:17
        _initialize();  // > Event action for page Evol Page:18
        _play();  // > Event action for page Evol Page:19
          }  // > Event action for page Evol Page:20
          else if(mode[0]==="manual"){  // > Event action for page Evol Page:21
        _pause();  // > Event action for page Evol Page:22
        }  // > Event action for page Evol Page:23
        histogramcounter=0;  // > Event action for page Evol Page:24
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return xmax -x[1];  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        thetarecord=true;  // > Event action for page Evol Page:1
        theta = Math.atan2(vy[1],vx[1]);  // > Event action for page Evol Page:2
        thetadegrees=theta*180/pi;  // > Event action for page Evol Page:3
        counter++;  // > Event action for page Evol Page:4
        histogramcounter=1;  // > Event action for page Evol Page:5
        //_view.histogram.append(theta);  // > Event action for page Evol Page:6
        thetarecord=false;  // > Event action for page Evol Page:7
        if(mode[0]==="auto"){  // > Event action for page Evol Page:8
          _view.trail.newSegment();  // > Event action for page Evol Page:9
        //  _view.histogram.newHistogram();  // > Event action for page Evol Page:10
           // > Event action for page Evol Page:11
          //_view.histogram.newSegment();  // > Event action for page Evol Page:12
        //_view.trail.newSegment() ==_view.trail2.newSegment() ;  // > Event action for page Evol Page:13
        memorycolor=memorycolor+1;  // > Event action for page Evol Page:14
        t=0;  // > Event action for page Evol Page:15
        x[1] = 0;  // > Event action for page Evol Page:16
        vx[1]=vxs;  // > Event action for page Evol Page:17
        vy[1]=vys;  // > Event action for page Evol Page:18
        //y[1]= (Math.random()-0.5)*10;  // > Event action for page Evol Page:19
        //a=0;  // > Event action for page Evol Page:20
        _initialize();  // > Event action for page Evol Page:21
        _play();  // > Event action for page Evol Page:22
          }  // > Event action for page Evol Page:23
          else if(mode[0]==="manual"){  // > Event action for page Evol Page:24
        _pause();  // > Event action for page Evol Page:25
        }  // > Event action for page Evol Page:26
        histogramcounter=0;  // > Event action for page Evol Page:27
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return ymax -y[1];  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        thetarecord=true;  // > Event action for page Evol Page:1
        theta = Math.atan2(vy[1],vx[1]);  // > Event action for page Evol Page:2
        thetadegrees=theta*180/pi;  // > Event action for page Evol Page:3
        counter++;  // > Event action for page Evol Page:4
        histogramcounter=1;  // > Event action for page Evol Page:5
        //_view.histogram.append(theta);  // > Event action for page Evol Page:6
        thetarecord=false;  // > Event action for page Evol Page:7
        if(mode[0]==="auto"){  // > Event action for page Evol Page:8
          _view.trail.newSegment();  // > Event action for page Evol Page:9
        //_view.trail.newSegment() ==_view.trail2.newSegment() ;  // > Event action for page Evol Page:10
        memorycolor=memorycolor+1;  // > Event action for page Evol Page:11
        t=0;  // > Event action for page Evol Page:12
        x[1] = 0;  // > Event action for page Evol Page:13
        vx[1]=vxs;  // > Event action for page Evol Page:14
        vy[1]=vys;  // > Event action for page Evol Page:15
        //y[1]= (Math.random()-0.5)*10;  // > Event action for page Evol Page:16
        //a=0;  // > Event action for page Evol Page:17
        _initialize();  // > Event action for page Evol Page:18
        _play();  // > Event action for page Evol Page:19
          }  // > Event action for page Evol Page:20
          else if(mode[0]==="manual"){  // > Event action for page Evol Page:21
        _pause();  // > Event action for page Evol Page:22
        }  // > Event action for page Evol Page:23
        histogramcounter=0;  // > Event action for page Evol Page:24
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return y[1]-ymin;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        //thetarecord=true;  // > Event action for page Evol Page:1
        theta = Math.atan2(vy[1],vx[1]);  // > Event action for page Evol Page:2
        thetadegrees=theta*180/pi;  // > Event action for page Evol Page:3
        counter++;  // > Event action for page Evol Page:4
        histogramcounter=1;  // > Event action for page Evol Page:5
        //_view.histogram.append(theta);  // > Event action for page Evol Page:6
        //thetarecord=false;  // > Event action for page Evol Page:7
        if(mode[0]==="auto"){  // > Event action for page Evol Page:8
          _view.trail.newSegment();  // > Event action for page Evol Page:9
        //_view.trail.newSegment() ==_view.trail2.newSegment() ;  // > Event action for page Evol Page:10
        memorycolor=memorycolor+1;  // > Event action for page Evol Page:11
        t=0;  // > Event action for page Evol Page:12
        x[1] = 0;  // > Event action for page Evol Page:13
        vx[1]=vxs;  // > Event action for page Evol Page:14
        vy[1]=vys;  // > Event action for page Evol Page:15
        //y[1]= (Math.random()-0.5)*10;  // > Event action for page Evol Page:16
        //a=0;  // > Event action for page Evol Page:17
        _initialize();  // > Event action for page Evol Page:18
        _play();  // > Event action for page Evol Page:19
          }  // > Event action for page Evol Page:20
          else if(mode[0]==="manual"){  // > Event action for page Evol Page:21
        _pause();  // > Event action for page Evol Page:22
        }  // > Event action for page Evol Page:23
        histogramcounter=0;  // > Event action for page Evol Page:24
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(x.length),__beginIndex,x.ength);
  }

  function _historic_vx(__time) {
    var __beginIndex = 0 + x.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(vx.length),__beginIndex,vx.ength);
  }

  function _historic_y(__time) {
    var __beginIndex = 0 + x.length + vx.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(y.length),__beginIndex,y.ength);
  }

  function _historic_vy(__time) {
    var __beginIndex = 0 + x.length + vx.length + y.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(vy.length),__beginIndex,vy.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new rutherfordwee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return print?"":"RutherFord's Atomic Model, Drawing not to scale"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return print?"":"shoot alpha particles and observe motion giving hints to the structure of gold atoms"; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return print?"":" runs = "+_view._format(counter,"0") +" ,  t = "+_view._format(t,"0.00")+" units "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.circle.linkProperty("NumberOfElements",  function() { return ncircle; }, function(_v) { ncircle = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'circle'
          _view.circle.linkProperty("SizeX",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'circle'
          _view.circle.linkProperty("X",  function() { return xline; }, function(_v) { xline = _v; } ); // HtmlView Page linking property 'X' for element 'circle'
          _view.circle.linkProperty("Y",  function() { return yline; }, function(_v) { yline = _v; } ); // HtmlView Page linking property 'Y' for element 'circle'
          _view.circle.linkProperty("Text",  function() { return msg; }, function(_v) { msg = _v; } ); // HtmlView Page linking property 'Text' for element 'circle'
          _view.circle.linkProperty("SizeY",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'circle'
          _view.rutherfordgoldfoil2.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'rutherfordgoldfoil2'
          _view.rutherfordgoldfoil2.linkProperty("Y",  function() { return y[0]; } ); // HtmlView Page linking property 'Y' for element 'rutherfordgoldfoil2'
          _view.rutherfordgoldfoil.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'rutherfordgoldfoil'
          _view.rutherfordgoldfoil.linkProperty("Y",  function() { return y[0]; } ); // HtmlView Page linking property 'Y' for element 'rutherfordgoldfoil'
          _view.thomson2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'thomson2'
          _view.thomson2.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'thomson2'
          _view.thomson2.linkProperty("SizeX",  function() { return radiusx; }, function(_v) { radiusx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'thomson2'
          _view.thomson2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'thomson2'
          _view.thomson2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'thomson2'
          _view.thomson2.linkProperty("SizeY",  function() { return radiusy; }, function(_v) { radiusy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'thomson2'
          _view.thomson2.setAction("OnDrag", function(_data,_info) {
  //if (ElementI===ElementI){
    x[ElementI]=xstore[ElementI]=x[ElementI];
    y[ElementI]=ystore[ElementI]=y[ElementI];
   // }

}); // HtmlView Page setting action 'OnDrag' for element 'thomson2'
          _view.thomson2.linkProperty("ElementInteracted",  function() { return ElementI; }, function(_v) { ElementI = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'thomson2'
          _view.thomson.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'thomson'
          _view.thomson.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'thomson'
          _view.thomson.setAction("OnDrag", function(_data,_info) {
  if (ElementI===2){
    x[2]=xstore[2]=x[ElementI];
    y[2]=ystore[2]=y[ElementI];
    }
  else if (ElementI===3){
    x[3]=xstore[3]=x[ElementI];
    y[3]=ystore[3]=y[ElementI];
    }
    else if (ElementI===4){
    x[4]=xstore[4]=x[ElementI];
    y[4]=ystore[4]=y[ElementI];
    }
    else if (ElementI===5){
    x[5]=xstore[5]=x[ElementI];
    y[5]=ystore[5]=y[ElementI];
    }
  else if (ElementI===6){
    x[6]=xstore[6]=x[ElementI];
    y[6]=ystore[6]=y[ElementI];
    }
    else if (ElementI===7){
    x[7]=xstore[7]=x[ElementI];
    y[7]=ystore[7]=y[ElementI];
    }
    else if (ElementI===8){
    x[8]=xstore[8]=x[ElementI];
    y[8]=ystore[8]=y[ElementI];
    }
    else if (ElementI===9){
    x[9]=xstore[9]=x[ElementI];
    y[9]=ystore[9]=y[ElementI];
    }
    else if (ElementI===10){
    x[10]=xstore[10]=x[ElementI];
    y[10]=ystore[10]=y[ElementI];
    }
    else if (ElementI===11){
    x[11]=xstore[11]=x[ElementI];
    y[11]=ystore[11]=y[ElementI];
    }
    else if (ElementI===ElementI){
    x[ElementI]=xstore[ElementI]=x[ElementI];
    y[ElementI]=ystore[ElementI]=y[ElementI];
    }

}); // HtmlView Page setting action 'OnDrag' for element 'thomson'
          _view.thomson.linkProperty("ElementInteracted",  function() { return ElementI; }, function(_v) { ElementI = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'thomson'
          _view.thomson.linkProperty("SizeX",  function() { return radiusx; }, function(_v) { radiusx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'thomson'
          _view.thomson.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'thomson'
          _view.thomson.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'thomson'
          _view.thomson.linkProperty("SizeY",  function() { return radiusy; }, function(_v) { radiusy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'thomson'
          _view.segmentSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet'
          _view.segmentSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet'
          _view.segmentSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeY",  function() { return ytext; }, function(_v) { ytext = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet'
          _view.arrowSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet'
          _view.arrowSet.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeX",  function() { return xForcescale; }, function(_v) { xForcescale = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSet'
          _view.arrowSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet'
          _view.arrowSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeY",  function() { return yForcescale; }, function(_v) { yForcescale = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowSet'
          _view.dataset.linkProperty("NumberOfElements",  function() { return datasetN; }, function(_v) { datasetN = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'dataset'
          _view.dataset.linkProperty("X",  function() { return datasetx; }, function(_v) { datasetx = _v; } ); // HtmlView Page linking property 'X' for element 'dataset'
          _view.dataset.linkProperty("Y",  function() { return datasety; }, function(_v) { datasety = _v; } ); // HtmlView Page linking property 'Y' for element 'dataset'
          _view.trace.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trace'
          _view.trace.linkProperty("InputX",  function() { return x[1]; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return y[1]; } ); // HtmlView Page linking property 'InputY' for element 'trace'
          _view.trail.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return x[1]; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return y[1]; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.textSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return ytext; }, function(_v) { ytext = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return forceValue; }, function(_v) { forceValue = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.arrowdragme.linkProperty("SizeX",  function() { return x[1]-dragmex; } ); // HtmlView Page linking property 'SizeX' for element 'arrowdragme'
          _view.arrowdragme.linkProperty("X",  function() { return dragmex; }, function(_v) { dragmex = _v; } ); // HtmlView Page linking property 'X' for element 'arrowdragme'
          _view.arrowdragme.linkProperty("Y",  function() { return dragmey; }, function(_v) { dragmey = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowdragme'
          _view.arrowdragme.linkProperty("SizeY",  function() { return y[1]-dragmey; } ); // HtmlView Page linking property 'SizeY' for element 'arrowdragme'
          _view.dragme.linkProperty("X",  function() { return dragmex; }, function(_v) { dragmex = _v; } ); // HtmlView Page linking property 'X' for element 'dragme'
          _view.dragme.linkProperty("Y",  function() { return dragmey; }, function(_v) { dragmey = _v; } ); // HtmlView Page linking property 'Y' for element 'dragme'
          _view.plottingPanelxvst2.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("TRMessage",  function() { return print?"":"θ = "+_view._format(theta*180/pi,"000")+" ° "; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("Visibility",  function() { return graph; }, function(_v) { graph = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanelxvst2'
          _view.histogram.linkProperty("Input",  function() { return thetadegrees; }, function(_v) { thetadegrees = _v; } ); // HtmlView Page linking property 'Input' for element 'histogram'
          _view.histogram.linkProperty("Active",  function() { return histogramcounter===1; } ); // HtmlView Page linking property 'Active' for element 'histogram'
          _view.spec.linkProperty("Input",  function() { return thetadegrees; }, function(_v) { thetadegrees = _v; } ); // HtmlView Page linking property 'Input' for element 'spec'
          _view.spec.linkProperty("Visibility",  function() { return spec; } ); // HtmlView Page linking property 'Visibility' for element 'spec'
          _view.mrocket.linkProperty("Visibility",  function() { return showb && !print; } ); // HtmlView Page linking property 'Visibility' for element 'mrocket'
          _view.mrocket.linkProperty("Display",  function() { return print?"none":"inline-flex"; } ); // HtmlView Page linking property 'Display' for element 'mrocket'
          _view.comboBox.linkProperty("Options",  function() { return ["Rutherford Atom-Model","Rutherford Atom-Model Two","Thomson Atom-Model configurable","Thomson Atom-Model configurable each atom"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if(option=="Rutherford Atom-Model") {
  //dt=0.05; // compromise speed for accuracy
  //setting up initial configuration with two charges
  n=2;
  for (var i=0;i<n;i++){
  //  q[0]=q0/q0; //slider 1
   // q[1]=q00/q00; //slider 2
     q[0]=q0; //slider 1
    q[1]=q00; //slider 2
  //  m[0] = m0 =197;
  //  m[1] = m00 =4;
     m[0] = m0 ;
    m[1] = m00;
    
    //q[i]=1;
  //x[i]=rangex/2*(2*i-1)/n; // equal space at 0
  //x[i]=rangex/2*(i)/n;
  x[0] =0;
  //x[1] = -5;
  y[0]=0;
  color[i]=i+13;
  //r[i]=q[i]*1;// make radius bigger
  r[i]=1;
  //radiusx[1]=0.1; //set green test mass size smaller
  forceValue[i]="F";
  //colorStr+=StrData[i]+";";
  }
    
  }
  else if(option=="Thomson Atom-Model configurable") {
  n=10;
  for (var i=0; i<(n+1) /* Iterations */ ; i++) {
   
   q[0] = q0/(nmax-1);
   q[2] = q[0]; //spread the charge with 9 atoms positions
    q[3] = q[0];
    q[4] = q[0];
    q[5] = q[0];
    q[6] = q[0];
    q[7] = q[0];
   q[8] = q[0];
   q[9] = q[0];
   
   m[0] = m0/nmax;
   m[2] = m[0]; //spread the mass 9 atoms positions
    m[3] = m[0];
    m[4] = m[0];
    m[5] = m[0];
    m[6] = m[0];
    m[7] = m[0];
   m[8] = m[0];
   m[9] = m[0];
   
   
   
    x[2] =xstore[2]= -2; // spread x
    x[3] = xstore[3]=x[0];
    x[4] = xstore[4]=x[0]+spacing;
    x[5] = xstore[5]=x[0]-spacing;
    x[6] = xstore[6]=x[0]+spacing;
    x[7] = xstore[7]=x[0]-spacing;
    x[8] = xstore[8]=x[0];
    x[9] = xstore[9]=x[0]+spacing;
    y[2] =ystore[2]= -2; // spread y
    y[3] =ystore[3]= y[0]-spacing;
    y[4] =ystore[4]= y[0]-spacing;
    y[5] =ystore[5]= y[0];
    y[6] =ystore[6]= y[0];
    y[7] =ystore[7]= y[0]+spacing;
   y[8] =ystore[8]= y[0]+spacing;
    y[9] =ystore[9]= y[0]+spacing;
   color[i]=i+13;
  //r[i]=q[i]*1;// make radius bigger
  r[i]=1;
  //vx[1] = vxs*5;
  }
    
  }
  //print
  else if (option== "print"){
    print = true;
    }
  //oprint
  else if(option=="Thomson Atom-Model configurable each atom") {
  n=79;
  scalef=0;
  //dt=0.2;
   //cheat set each charge to 1 instead of 79/25
   q[0] = 1; // idenitfy
   r[0]=0.2;
   m[0] = m0/nmax;
   x[0] =xstore[0];
   y[0] =ystore[0];
   for (var i=2; i<(n) /* Iterations */ ; i++) {
   q[i] = q[0]; //spread the charge with 9 atoms positions
   m[i] = m[0]; //spread the mass 9 atoms positions
    color[i]=i+13;
  //r[i]=q[i]*1;// make radius bigger
  r[i]=0.5; // make even smaller
  //vx[1] = vxs*5;
   x[i] =xstore[i]= (Math.random()-0.5)*5.5; // spread x
  y[i] =ystore[i]= (Math.random()-0.5)*5.5;
   
    
   
  }
    
  }
  else if(option=="Rutherford Atom-Model Two") {
  //dt=0.01; // need to be smaller for better computation
  n=10;
  for (var i=0; i<(n+1) /* Iterations */ ; i++) {
   
   q[0] = q0/(nmax-1);
   q[2] = q[0]; //spread the charge with 9 atoms positions
    q[3] = q[0];
    q[4] = q[0];
    q[5] = q[0];
    q[6] = q[0];
    q[7] = q[0];
   q[8] = q[0];
   q[9] = q[0];
   
   m[0] = m0/nmax;
   m[2] = m[0]; //spread the mass 9 atoms positions
    m[3] = m[0];
    m[4] = m[0];
    m[5] = m[0];
    m[6] = m[0];
    m[7] = m[0];
   m[8] = m[0];
   m[9] = m[0];
   
   
   
    x[2] =xstore[2]= x[0]+radius*Math.cos(0); // spread x
    x[3] = xstore[3]=x[0]+radius*Math.cos(pi/4);
    x[4] = xstore[4]=x[0]+radius*Math.cos(pi/2);
    x[5] = xstore[5]=x[0]+radius*Math.cos(3*pi/4);
    x[6] = xstore[6]=x[0]+radius*Math.cos(pi);
    x[7] = xstore[7]=x[0]+radius*Math.cos(-pi/4);
    x[8] = xstore[8]=x[0]+radius*Math.cos(-pi/2);
    x[9] = xstore[9]=x[0]+radius*Math.cos(3*pi/4);
    y[2] =ystore[2]= y[0]+radius*Math.sin(0); // spread y
    y[3] =ystore[3]= y[0]+radius*Math.sin(pi/4);
    y[4] =ystore[4]= y[0]+radius*Math.sin(pi/2);
    y[5] =ystore[5]= y[0]+radius*Math.sin(3*pi/4);
    y[6] =ystore[6]= y[0]+radius*Math.sin(pi);
    y[7] =ystore[7]= y[0]+radius*Math.sin(-pi/4);
   y[8] =ystore[8]= y[0]+radius*Math.sin(-pi/2);
    y[9] =ystore[9]= y[0]+radius*Math.sin(-3*pi/4);
   color[i]=i+13;
  //r[i]=q[i]*1;// make radius bigger
  r[i]=1;
  }
    
  }
  _initialize();
  _view.trail.clear();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.comboBox.linkProperty("SelectedOptions",  function() { return mode1; }, function(_v) { mode1 = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'comboBox'
          _view.comboBox3.linkProperty("Options",  function() { return ["auto","manual"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox3'
          _view.comboBox3.setAction("OnChange", function(_data,_info) {
  if(mode[0]==="auto") {
    y[1]= (Math.random()-0.5)*8;
    y01slider=y[1];
    
  }
  //print
  else if (mode[0] == "print"){
    print = true;
    }
  //oprint
  _initailize();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox3'
          _view.comboBox3.linkProperty("SelectedOptions",  function() { return mode; }, function(_v) { mode = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'comboBox3'
          _view.comboBox3.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox3'
          _view.worldgraph.linkProperty("Options",  function() { return ["both","world","histogram N vs θ","","print"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  if ( selectedview[0]==="world"){
    world=true;
  Width1 = "100%";
  Width2 = "0%";
  //disabled=false;
    }
  //print
  else if (selectedview[0] == "print"){
    print = true;
    }
  //oprint
  else if ( selectedview[0]==="histogram N vs θ"){
  graph=true;
  Width1 = "0%";
  Width2 = "100%";
  //disabledworld=false;
  }
  else if ( selectedview[0]==="both"){
  world=true;
  graph=true;
  Width1 = "50%";
  Width2 = "50%";
  //disabledworld=false;
  }
  else if ( selectedview[0]==="show model"){
  showmodel=true;
  }
  else if ( selectedview[0]==="hide model"){
  showmodel=false;
  }

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.worldgraph.linkProperty("SelectedOptions",  function() { return selectedview; }, function(_v) { selectedview = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'worldgraph'
          _view.worldgraph.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'worldgraph'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Disabled",  function() { return disabledbutton; }, function(_v) { disabledbutton = _v; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.stepButton2.linkProperty("Disabled",  function() { return disabledbutton; }, function(_v) { disabledbutton = _v; } ); // HtmlView Page linking property 'Disabled' for element 'stepButton2'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.initialize.setAction("OnClick", function(_data,_info) {
  histogramcounter=1;
  _view.trail.newSegment();
  _view.histogram.newMarker();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  x[1] = xs;
  vx[1]=vxs;
  vy[1]=vys;
  //a=0;
  _initialize();
  histogramcounter=0;

}); // HtmlView Page setting action 'OnClick' for element 'initialize'
          _view.initialize.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'initialize'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.label323.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'label323'
          _view.slider223.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'slider223'
          _view.slider223.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'slider223'
          _view.slider223.linkProperty("Value",  function() { return y01slider; }, function(_v) { y01slider = _v; } ); // HtmlView Page linking property 'Value' for element 'slider223'
          _view.slider223.setAction("OnChange", function(_data,_info) {
  y[1]=y01slider;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'slider223'
          _view.field223.linkProperty("Value",  function() { return y01slider; }, function(_v) { y01slider = _v; } ); // HtmlView Page linking property 'Value' for element 'field223'
          _view.field223.setAction("OnChange", function(_data,_info) {
  y[1]=y01slider;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'field223'
          _view.label2223.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'label2223'
          _view.label2223.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'label2223'
          _view.label32.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'label32'
          _view.slider22.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'slider22'
          _view.slider22.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'slider22'
          _view.slider22.linkProperty("Value",  function() { return m00; }, function(_v) { m00 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider22'
          _view.slider22.setAction("OnChange", function(_data,_info) {
  m[1]=m00;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'slider22'
          _view.field22.linkProperty("Value",  function() { return m00; }, function(_v) { m00 = _v; } ); // HtmlView Page linking property 'Value' for element 'field22'
          _view.field22.setAction("OnChange", function(_data,_info) {
  m[1]=m00;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'field22'
          _view.label222.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'label222'
          _view.label222.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'label222'
          _view.label3.linkProperty("Background",  function() { return color[0]; }, function(_v) { color[0] = _v; } ); // HtmlView Page linking property 'Background' for element 'label3'
          _view.slider2.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'slider2'
          _view.slider2.linkProperty("Background",  function() { return color[0]; }, function(_v) { color[0] = _v; } ); // HtmlView Page linking property 'Background' for element 'slider2'
          _view.slider2.linkProperty("Value",  function() { return m0; }, function(_v) { m0 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider2'
          _view.slider2.setAction("OnChange", function(_data,_info) {
  m[0]=m0;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'slider2'
          _view.field2.linkProperty("Value",  function() { return m0; }, function(_v) { m0 = _v; } ); // HtmlView Page linking property 'Value' for element 'field2'
          _view.field2.setAction("OnChange", function(_data,_info) {
  m[0]=m0;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'field2'
          _view.label22.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'label22'
          _view.label22.linkProperty("Background",  function() { return color[0]; }, function(_v) { color[0] = _v; } ); // HtmlView Page linking property 'Background' for element 'label22'
          _view.label322.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'label322'
          _view.slider222.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'slider222'
          _view.slider222.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'slider222'
          _view.slider222.linkProperty("Value",  function() { return q00; }, function(_v) { q00 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider222'
          _view.slider222.setAction("OnChange", function(_data,_info) {
  q00true=true;
  q0true=false;
  qLabel=1;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'slider222'
          _view.field222.linkProperty("Value",  function() { return q00; }, function(_v) { q00 = _v; } ); // HtmlView Page linking property 'Value' for element 'field222'
          _view.field222.setAction("OnChange", function(_data,_info) {
  q00true=true;
  q0true=false;
  qLabel=1;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'field222'
          _view.label2222.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'label2222'
          _view.label2222.linkProperty("Background",  function() { return color[1]; }, function(_v) { color[1] = _v; } ); // HtmlView Page linking property 'Background' for element 'label2222'
          _view.label33.linkProperty("Background",  function() { return color[0]; }, function(_v) { color[0] = _v; } ); // HtmlView Page linking property 'Background' for element 'label33'
          _view.slider23.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'slider23'
          _view.slider23.linkProperty("Background",  function() { return color[0]; }, function(_v) { color[0] = _v; } ); // HtmlView Page linking property 'Background' for element 'slider23'
          _view.slider23.linkProperty("Value",  function() { return q0; }, function(_v) { q0 = _v; } ); // HtmlView Page linking property 'Value' for element 'slider23'
          _view.slider23.setAction("OnChange", function(_data,_info) {
  q0true=true;
  q00true=false;
  qLabel=0;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'slider23'
          _view.field23.linkProperty("Value",  function() { return q0; }, function(_v) { q0 = _v; } ); // HtmlView Page linking property 'Value' for element 'field23'
          _view.field23.setAction("OnChange", function(_data,_info) {
  q0true=true;
  q00true=false;
  qLabel=0;
  calcF();

}); // HtmlView Page setting action 'OnChange' for element 'field23'
          _view.label223.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'label223'
          _view.label223.linkProperty("Background",  function() { return color[0]; }, function(_v) { color[0] = _v; } ); // HtmlView Page linking property 'Background' for element 'label223'
          _view.world.linkProperty("Checked",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Checked' for element 'world'
          _view.world.setAction("OnCheckOff", function(_data,_info) {
  world=false;
  Width1 = "0%";
  Width2 = "100%";
  disabled=true;

}); // HtmlView Page setting action 'OnCheckOff' for element 'world'
          _view.world.linkProperty("Disabled",  function() { return disabledworld; }, function(_v) { disabledworld = _v; } ); // HtmlView Page linking property 'Disabled' for element 'world'
          _view.world.setAction("OnCheckOn", function(_data,_info) {
  world=true;
  Width1 = "50%";
  Width2 = "50%";
  disabled=false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'world'
          _view.graph.linkProperty("Checked",  function() { return graph; }, function(_v) { graph = _v; } ); // HtmlView Page linking property 'Checked' for element 'graph'
          _view.graph.setAction("OnCheckOff", function(_data,_info) {
  Width1 = "100%";
  Width2 = "0%";
  disabledworld=true;
  graph=false;

}); // HtmlView Page setting action 'OnCheckOff' for element 'graph'
          _view.graph.linkProperty("Disabled",  function() { return disabled; }, function(_v) { disabled = _v; } ); // HtmlView Page linking property 'Disabled' for element 'graph'
          _view.graph.setAction("OnCheckOn", function(_data,_info) {
  Width1 = "50%";
  Width2 = "50%";
  disabledworld=false;
  graph=true;

}); // HtmlView Page setting action 'OnCheckOn' for element 'graph'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(20);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function rutherfordwee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = rutherfordwee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function rutherfordwee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("CSS",{   "position" : "absolute",   "bottom" : "0px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",4) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",4) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","r") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"circle", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'circle'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"bottomatom", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomatom'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape22", _view.bottomatom) // EJsS HtmlView.HtmlView Page: declaration of element 'shape22'
      .setProperty("FillColor","rgba(200,220,208,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape22'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape22'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape22'
      .setProperty("Y",-8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape22'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.bottomatom) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape2'
      .setProperty("Y",-8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape2'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rutherfordgoldfoil2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rutherfordgoldfoil2'
      .setProperty("FillColor","rgba(200,220,208,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rutherfordgoldfoil2'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rutherfordgoldfoil2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rutherfordgoldfoil2'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rutherfordgoldfoil2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rutherfordgoldfoil", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rutherfordgoldfoil'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rutherfordgoldfoil'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rutherfordgoldfoil'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rutherfordgoldfoil'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rutherfordgoldfoil'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"topatom", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topatom'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape3", _view.topatom) // EJsS HtmlView.HtmlView Page: declaration of element 'shape3'
      .setProperty("FillColor","rgba(200,220,208,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape3'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape3'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape3'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape3'
      .setProperty("Y",8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape3'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape32", _view.topatom) // EJsS HtmlView.HtmlView Page: declaration of element 'shape32'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape32'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape32'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape32'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape32'
      .setProperty("Y",8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape32'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape32'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"thomson2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thomson2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'thomson2'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'thomson2'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'thomson2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'thomson2'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"thomson", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thomson'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'thomson'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'thomson'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'thomson'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'thomson'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'thomson'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'segmentSet'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSet'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'segmentSet'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'segmentSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'arrowSet'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"dataset", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dataset'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dataset'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'dataset'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dataset'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'dataset'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'dataset'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'dataset'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("MarkSize",1) // EJsS HtmlView.HtmlView Page: setting property 'MarkSize' for element 'trace'
      .setProperty("MarkFillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'MarkFillColor' for element 'trace'
      .setProperty("MarkLineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'MarkLineColor' for element 'trace'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'trace'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSet'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowdragme", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowdragme'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowdragme'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowdragme'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'arrowdragme'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowdragme'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowdragme'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"dragme", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dragme'
      .setProperty("Text","drag me") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dragme'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'dragme'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragme'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst2'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanelxvst2'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst2'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst2'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst2'
      .setProperty("AxisYFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanelxvst2'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst2'
      .setProperty("XTickStep",30) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanelxvst2'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanelxvst2'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst2'
      .setProperty("TitleYFont","normal normal 1.5vw") // EJsS HtmlView.HtmlView Page: setting property 'TitleYFont' for element 'plottingPanelxvst2'
      .setProperty("TitleXFont","normal normal 1.5vw") // EJsS HtmlView.HtmlView Page: setting property 'TitleXFont' for element 'plottingPanelxvst2'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst2'
      .setProperty("MaximumY",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanelxvst2'
      .setProperty("MaximumX",180) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanelxvst2'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst2'
      .setProperty("MinimumX",-180) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst2'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanelxvst2'
      .setProperty("TitleY","Number recorded") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst2'
      .setProperty("AxisXFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanelxvst2'
      .setProperty("TitleX","angle deflected °") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst2'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst2'
      .setProperty("MarginY",5) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanelxvst2'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst2'
      ;

    _view._addElement(EJSS_DRAWING2D.histogram,"histogram", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'histogram'
      .setProperty("BinWidth",30) // EJsS HtmlView.HtmlView Page: setting property 'BinWidth' for element 'histogram'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'histogram'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'histogram'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape'
      .setProperty("LineColor","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"spec", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'spec'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'spec'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'spec'
      .setProperty("MarkType","AREA") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'spec'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"mrocket", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'mrocket'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'mrocket'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "4%",    "margin-left":"0px",    "left":"4%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'mrocket'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select atom-model to investigate") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox3", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox3'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox3'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initialize", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'initialize'
      .setProperty("Tooltip","Store Data") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initialize'
      .setProperty("Text","▼") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'initialize'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"control", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'control'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'control'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label323", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label323'
      .setProperty("Tooltip","y position of radiation ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label323'
      .setProperty("Text"," y_projectile = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label323'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider223", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'slider223'
      .setProperty("Maximum",4.0) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider223'
      .setProperty("Minimum",-4.0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider223'
      .setProperty("Tooltip","y position of radiation rays") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider223'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field223", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'field223'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field223'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field223'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label2223", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label2223'
      .setProperty("Tooltip","femo metre") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label2223'
      .setProperty("Text"," fm ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label2223'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label32", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label32'
      .setProperty("Tooltip","mass of radiation ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label32'
      .setProperty("Text"," M_projectile = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label32'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider22", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'slider22'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider22'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider22'
      .setProperty("Tooltip","mass of radiation rays") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider22'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider22'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field22", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'field22'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field22'
      .setProperty("Format","00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field22'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label222", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label222'
      .setProperty("Tooltip","atomic mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label222'
      .setProperty("Text"," u ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label222'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label3", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label3'
      .setProperty("Tooltip","mass of foil ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label3'
      .setProperty("Text"," M_foil = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label3'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider2", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'slider2'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider2'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider2'
      .setProperty("Tooltip","mass of object 1") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider2'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field2", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'field2'
      .setProperty("Width",40) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field2'
      .setProperty("Format","00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label22", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label22'
      .setProperty("Tooltip","atomic mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label22'
      .setProperty("Text"," u ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label22'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label322", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label322'
      .setProperty("Tooltip","charge of radiation ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label322'
      .setProperty("Text"," Q_projectile = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label322'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider222", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'slider222'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider222'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider222'
      .setProperty("Tooltip","charge of radiation rays") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider222'
      .setProperty("Step",10) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider222'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field222", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'field222'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field222'
      .setProperty("Format","00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field222'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label2222", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label2222'
      .setProperty("Tooltip","atomic charge") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label2222'
      .setProperty("Text"," e ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label2222'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label33", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label33'
      .setProperty("Tooltip","electrical charge of foil ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label33'
      .setProperty("Text"," Q_foil = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label33'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider23", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'slider23'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider23'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider23'
      .setProperty("Tooltip","electrical charge of stationary atom in thin foil") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider23'
      .setProperty("Step",10) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider23'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field23", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'field23'
      .setProperty("Width",40) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field23'
      .setProperty("Format","00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field23'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label223", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'label223'
      .setProperty("Tooltip","atomic charge") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'label223'
      .setProperty("Text"," e ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label223'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"world", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'world'
      .setProperty("Background","Orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'world'
      .setProperty("Tooltip","acceleration vs displacement") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'world'
      .setProperty("Text","world") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'world'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"graph", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'graph'
      .setProperty("Tooltip","graph") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'graph'
      .setProperty("Text","N vs θ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'graph'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Rutherford's Atomic Model<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_src_rutherfordwee/RutherFord/2016-06-22_1137s.png" />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_src_rutherfordwee/RutherFord/2016-06-22_1132s.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_src_rutherfordwee/01authorlookang50x50.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_src_rutherfordwee/01authorannecox.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_src_rutherfordwee/01authorwc_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_src_rutherfordwee/01authorPacoEsquembre2011.png" />
 weelookang@gmail.com; Anne Cox; Wolfgang Christian; Francisco Esquembre
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com; Anne Cox; Wolfgang Christian; Francisco Esquembre.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new rutherfordwee("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_src_rutherfordwee/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
