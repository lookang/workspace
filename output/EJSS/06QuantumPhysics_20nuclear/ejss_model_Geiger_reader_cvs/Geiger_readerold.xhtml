<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Geiger Reader App ( requires A Geiger Reader Detector to work properly)</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function Geiger_readerold(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var audioCtx; // EjsS Model.Variables.Vars.audioCtx
  var analyser; // EjsS Model.Variables.Vars.analyser
  var cvsArray; // EjsS Model.Variables.Vars.cvsArray
  var cvsIterations; // EjsS Model.Variables.Vars.cvsIterations
  var cvsCounter; // EjsS Model.Variables.Vars.cvsCounter
  var dataArray; // EjsS Model.Variables.Vars.dataArray
  var dbArray; // EjsS Model.Variables.Vars.dbArray
  var timeArray; // EjsS Model.Variables.Vars.timeArray
  var countArray; // EjsS Model.Variables.Vars.countArray
  var minArray; // EjsS Model.Variables.Vars.minArray
  var maxY; // EjsS Model.Variables.Vars.maxY
  var minY; // EjsS Model.Variables.Vars.minY
  var baseFreq; // EjsS Model.Variables.Vars.baseFreq
  var oscGraph; // EjsS Model.Variables.Vars.oscGraph
  var cpmGraph; // EjsS Model.Variables.Vars.cpmGraph
  var myTime; // EjsS Model.Variables.Vars.myTime
  var seconds; // EjsS Model.Variables.Vars.seconds
  var samples; // EjsS Model.Variables.Vars.samples
  var myFftSize; // EjsS Model.Variables.Vars.myFftSize
  var minPeak; // EjsS Model.Variables.Vars.minPeak
  var peakCount; // EjsS Model.Variables.Vars.peakCount

  var font; // EjsS Model.Variables.lookang.font
  var fontaxis; // EjsS Model.Variables.lookang.fontaxis

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      audioCtx : audioCtx,
      analyser : analyser,
      cvsArray : cvsArray,
      cvsIterations : cvsIterations,
      cvsCounter : cvsCounter,
      dataArray : dataArray,
      dbArray : dbArray,
      timeArray : timeArray,
      countArray : countArray,
      minArray : minArray,
      maxY : maxY,
      minY : minY,
      baseFreq : baseFreq,
      oscGraph : oscGraph,
      cpmGraph : cpmGraph,
      myTime : myTime,
      seconds : seconds,
      samples : samples,
      myFftSize : myFftSize,
      minPeak : minPeak,
      peakCount : peakCount,
      font : font,
      fontaxis : fontaxis
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      audioCtx : audioCtx,
      analyser : analyser,
      cvsArray : cvsArray,
      cvsIterations : cvsIterations,
      cvsCounter : cvsCounter,
      dataArray : dataArray,
      dbArray : dbArray,
      timeArray : timeArray,
      countArray : countArray,
      minArray : minArray,
      maxY : maxY,
      minY : minY,
      baseFreq : baseFreq,
      oscGraph : oscGraph,
      cpmGraph : cpmGraph,
      myTime : myTime,
      seconds : seconds,
      samples : samples,
      myFftSize : myFftSize,
      minPeak : minPeak,
      peakCount : peakCount,
      font : font,
      fontaxis : fontaxis
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.audioCtx != "undefined") audioCtx = json.audioCtx;
    if(typeof json.analyser != "undefined") analyser = json.analyser;
    if(typeof json.cvsArray != "undefined") cvsArray = json.cvsArray;
    if(typeof json.cvsIterations != "undefined") cvsIterations = json.cvsIterations;
    if(typeof json.cvsCounter != "undefined") cvsCounter = json.cvsCounter;
    if(typeof json.dataArray != "undefined") dataArray = json.dataArray;
    if(typeof json.dbArray != "undefined") dbArray = json.dbArray;
    if(typeof json.timeArray != "undefined") timeArray = json.timeArray;
    if(typeof json.countArray != "undefined") countArray = json.countArray;
    if(typeof json.minArray != "undefined") minArray = json.minArray;
    if(typeof json.maxY != "undefined") maxY = json.maxY;
    if(typeof json.minY != "undefined") minY = json.minY;
    if(typeof json.baseFreq != "undefined") baseFreq = json.baseFreq;
    if(typeof json.oscGraph != "undefined") oscGraph = json.oscGraph;
    if(typeof json.cpmGraph != "undefined") cpmGraph = json.cpmGraph;
    if(typeof json.myTime != "undefined") myTime = json.myTime;
    if(typeof json.seconds != "undefined") seconds = json.seconds;
    if(typeof json.samples != "undefined") samples = json.samples;
    if(typeof json.myFftSize != "undefined") myFftSize = json.myFftSize;
    if(typeof json.minPeak != "undefined") minPeak = json.minPeak;
    if(typeof json.peakCount != "undefined") peakCount = json.peakCount;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontaxis != "undefined") fontaxis = json.fontaxis;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.audioCtx != "undefined") audioCtx = json.audioCtx;
    if(typeof json.analyser != "undefined") analyser = json.analyser;
    if(typeof json.cvsArray != "undefined") cvsArray = json.cvsArray;
    if(typeof json.cvsIterations != "undefined") cvsIterations = json.cvsIterations;
    if(typeof json.cvsCounter != "undefined") cvsCounter = json.cvsCounter;
    if(typeof json.dataArray != "undefined") dataArray = json.dataArray;
    if(typeof json.dbArray != "undefined") dbArray = json.dbArray;
    if(typeof json.timeArray != "undefined") timeArray = json.timeArray;
    if(typeof json.countArray != "undefined") countArray = json.countArray;
    if(typeof json.minArray != "undefined") minArray = json.minArray;
    if(typeof json.maxY != "undefined") maxY = json.maxY;
    if(typeof json.minY != "undefined") minY = json.minY;
    if(typeof json.baseFreq != "undefined") baseFreq = json.baseFreq;
    if(typeof json.oscGraph != "undefined") oscGraph = json.oscGraph;
    if(typeof json.cpmGraph != "undefined") cpmGraph = json.cpmGraph;
    if(typeof json.myTime != "undefined") myTime = json.myTime;
    if(typeof json.seconds != "undefined") seconds = json.seconds;
    if(typeof json.samples != "undefined") samples = json.samples;
    if(typeof json.myFftSize != "undefined") myFftSize = json.myFftSize;
    if(typeof json.minPeak != "undefined") minPeak = json.minPeak;
    if(typeof json.peakCount != "undefined") peakCount = json.peakCount;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontaxis != "undefined") fontaxis = json.fontaxis;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Initialization"] = true;
    __pagesEnabled["evolution"] = true;
    __pagesEnabled["Counter"] = true;
  });

  _model.addToReset(function() {
    cvsArray = []; // EjsS Model.Variables.Vars.cvsArray
    cvsIterations = 5; // EjsS Model.Variables.Vars.cvsIterations
    cvsCounter = 0; // EjsS Model.Variables.Vars.cvsCounter
    dataArray = []; // EjsS Model.Variables.Vars.dataArray
    dbArray = []; // EjsS Model.Variables.Vars.dbArray
    timeArray = []; // EjsS Model.Variables.Vars.timeArray
    countArray = []; // EjsS Model.Variables.Vars.countArray
    minArray = []; // EjsS Model.Variables.Vars.minArray
    maxY = 1; // EjsS Model.Variables.Vars.maxY
    minY = -1; // EjsS Model.Variables.Vars.minY
    oscGraph = false; // EjsS Model.Variables.Vars.oscGraph
    cpmGraph = true; // EjsS Model.Variables.Vars.cpmGraph
    myTime = 0; // EjsS Model.Variables.Vars.myTime
    seconds = 0; // EjsS Model.Variables.Vars.seconds
    samples = 0; // EjsS Model.Variables.Vars.samples
    myFftSize = 32768; // EjsS Model.Variables.Vars.myFftSize
    minPeak = 0.3; // EjsS Model.Variables.Vars.minPeak
    peakCount = 0; // EjsS Model.Variables.Vars.peakCount
  });

  _model.addToReset(function() {
    font = "normal normal 2vw "; // EjsS Model.Variables.lookang.font
    fontaxis = "normal normal 1vw "; // EjsS Model.Variables.lookang.fontaxis
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(24);
    _model.setStepsPerDisplay(1);
  });

  function init_user_media () {  // > CustomCode.UserMedia:1
    navigator.getUserMedia = (navigator.getUserMedia ||  // > CustomCode.UserMedia:2
                            navigator.webkitGetUserMedia ||  // > CustomCode.UserMedia:3
                            navigator.mozGetUserMedia ||  // > CustomCode.UserMedia:4
                            navigator.msGetUserMedia);  // > CustomCode.UserMedia:5
    audioCtx = new (window.AudioContext || window.webkitAudioContext)();  // > CustomCode.UserMedia:6
    //set up the analyser  // > CustomCode.UserMedia:7
    analyser = audioCtx.createAnalyser();  // > CustomCode.UserMedia:8
    analyser.smoothingTimeConstant = 0.85;  // > CustomCode.UserMedia:9
    // filter  // > CustomCode.UserMedia:10
    var gainNode = audioCtx.createGain();  // > CustomCode.UserMedia:11
    gainNode.gain.setTargetAtTime(0, audioCtx.currentTime, 0)  // > CustomCode.UserMedia:12
    var biquadFilter = audioCtx.createBiquadFilter();  // > CustomCode.UserMedia:13
      // > CustomCode.UserMedia:14
    //main block for doing the audio recording  // > CustomCode.UserMedia:15
    if (navigator.getUserMedia) {  // > CustomCode.UserMedia:16
     console.log('getUserMedia supported.');  // > CustomCode.UserMedia:17
     navigator.getUserMedia (  // > CustomCode.UserMedia:18
        // constraints - only audio needed for this app  // > CustomCode.UserMedia:19
        { audio: true },  // > CustomCode.UserMedia:20
        // Success callback  // > CustomCode.UserMedia:21
        function(stream) {  // > CustomCode.UserMedia:22
             source = audioCtx.createMediaStreamSource(stream);  // > CustomCode.UserMedia:23
             source.connect(analyser);  // > CustomCode.UserMedia:24
             analyser.connect(biquadFilter);  // > CustomCode.UserMedia:25
             biquadFilter.connect(gainNode);  // > CustomCode.UserMedia:26
             gainNode.connect(audioCtx.destination);  // > CustomCode.UserMedia:27
        },  // > CustomCode.UserMedia:28
        // Error callback  // > CustomCode.UserMedia:29
        function(err) {  // > CustomCode.UserMedia:30
           console.log('The following gUM error occured: ' + err);  // > CustomCode.UserMedia:31
        }  // > CustomCode.UserMedia:32
     );  // > CustomCode.UserMedia:33
    } else {  // > CustomCode.UserMedia:34
     console.log('getUserMedia not supported on your browser!');  // > CustomCode.UserMedia:35
    }  // > CustomCode.UserMedia:36
  }  // > CustomCode.UserMedia:37

  function setFftSize (fftSize) {  // > CustomCode.fftSize:1
    // change fftSize in Analyzer  // > CustomCode.fftSize:2
    analyser.fftSize = fftSize;  // > CustomCode.fftSize:3
    // init arrays  // > CustomCode.fftSize:4
    var bufferLength = fftSize;  // > CustomCode.fftSize:5
    dataArray = new Uint8Array(bufferLength);  // > CustomCode.fftSize:6
    timeArray = [...Array(bufferLength).keys()];  // > CustomCode.fftSize:7
    cvsArray = new Array(cvsIterations*bufferLength);  // > CustomCode.fftSize:8
    // base freq  // > CustomCode.fftSize:9
    baseFreq = audioCtx.sampleRate / fftSize;     // > CustomCode.fftSize:10
  }  // > CustomCode.fftSize:11

  function downloadCVS () {  // > CustomCode.downloadCVS:1
    var csvContent = "data:text/csv;charset=utf-8,";  // > CustomCode.downloadCVS:2
    for (var i=0; i<cvsArray.length; i++) {  // > CustomCode.downloadCVS:3
  //    csvContent += i + "," + (Math.floor(cvsArray[i] * 10000) / 10000) + "\r\n";  // > CustomCode.downloadCVS:4
      csvContent += (Math.floor(cvsArray[i] * 10000) / 10000) + "\r\n";  // > CustomCode.downloadCVS:5
    }  // > CustomCode.downloadCVS:6
    var encodedUri = encodeURI(csvContent);  // > CustomCode.downloadCVS:7
    var link = document.createElement("a");  // > CustomCode.downloadCVS:8
    link.setAttribute("href", encodedUri);  // > CustomCode.downloadCVS:9
    link.setAttribute("download", "my_data.csv");  // > CustomCode.downloadCVS:10
    link.innerHTML= "";  // > CustomCode.downloadCVS:11
    document.body.appendChild(link); // Required for FF  // > CustomCode.downloadCVS:12
    link.click();  // > CustomCode.downloadCVS:13
  }  // > CustomCode.downloadCVS:14

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Initialization"]) return;
    // init Audio Context and Analyzer  // > Initialization.Initialization:1
    init_user_media ();  // > Initialization.Initialization:2
    setFftSize(myFftSize);  // > Initialization.Initialization:3
    // init counters  // > Initialization.Initialization:4
    myTime = new Date().getTime();  // > Initialization.Initialization:5
    seconds = 0;  // > Initialization.Initialization:6
    countArray = [];  // > Initialization.Initialization:7
    countArray.push(0);  // > Initialization.Initialization:8
    minArray = []  // > Initialization.Initialization:9
    minArray.push(1);  // > Initialization.Initialization:10
    samples = 0;  // > Initialization.Initialization:11
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["evolution"]) return;
    dataArray.fill(0);  // > Evolution.evolution:1
    analyser.getByteTimeDomainData(dataArray)  // > Evolution.evolution:2
    // values (db)  // > Evolution.evolution:3
    dbArray = Array.from(dataArray);  // > Evolution.evolution:4
    for (i=0; i<dataArray.length; i++) {  // > Evolution.evolution:5
      dbArray[i] = minY + (dbArray[i] / 255) * Math.abs(minY - maxY);   // > Evolution.evolution:6
      cvsArray[i + cvsCounter * dataArray.length] = dbArray[i];  // > Evolution.evolution:7
    }  // > Evolution.evolution:8
    cvsCounter++;  // > Evolution.evolution:9
    if (cvsCounter == cvsIterations) cvsCounter = 0;  // > Evolution.evolution:10
    // peaks   // > Evolution.evolution:11
    peakCount = 0;  // > Evolution.evolution:12
    for (i=0; i<dataArray.length; i++) {  // > Evolution.evolution:13
        // find peak in current values  // > Evolution.evolution:14
        if(dbArray[i] > minPeak) {   // > Evolution.evolution:15
          peakCount++;  // > Evolution.evolution:16
          var j=i+1  // > Evolution.evolution:17
          while(dbArray[j]>dbArray[i] && j<dataArray.length) j++  // > Evolution.evolution:18
          i = j+1  // > Evolution.evolution:19
        }  // > Evolution.evolution:20
    }  // > Evolution.evolution:21
    countArray[countArray.length-1] += peakCount;  // > Evolution.evolution:22
    samples++;  // > Evolution.evolution:23
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Counter"]) return;
    var now = new Date().getTime();  // > FixedRelations.Counter:1
    var distance = now - myTime;  // > FixedRelations.Counter:2
    seconds = Math.floor(distance / 1000);  // > FixedRelations.Counter:3
    if (seconds > 59) {  // > FixedRelations.Counter:4
      samples = 0;  // > FixedRelations.Counter:5
      seconds = 0;  // > FixedRelations.Counter:6
      myTime = now;  // > FixedRelations.Counter:7
      countArray.push(0);  // > FixedRelations.Counter:8
      minArray.push(minArray.length+1);  // > FixedRelations.Counter:9
    }  // > FixedRelations.Counter:10
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new Geiger_readerold_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.cpmOpt2.linkProperty("Checked",  function() { return cpmGraph; }, function(_v) { cpmGraph = _v; } ); // HtmlView Page linking property 'Checked' for element 'cpmOpt2'
          _view.cpmOpt2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'cpmOpt2'
          _view.oscilloscopeOpt1.linkProperty("Checked",  function() { return oscGraph; }, function(_v) { oscGraph = _v; } ); // HtmlView Page linking property 'Checked' for element 'oscilloscopeOpt1'
          _view.oscilloscopeOpt1.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'oscilloscopeOpt1'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'runPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.stepButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.cvs.setAction("OnClick", function(_data,_info) {
  downloadCVS();

}); // HtmlView Page setting action 'OnClick' for element 'cvs'
          _view.cpm.linkProperty("Width",  function() { return ""+window.innerWidth; } ); // HtmlView Page linking property 'Width' for element 'cpm'
          _view.cpm.linkProperty("AxisYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'cpm'
          _view.cpm.linkProperty("TRMessage",  function() { return "Time: "+seconds+" sec"; } ); // HtmlView Page linking property 'TRMessage' for element 'cpm'
          _view.cpm.linkProperty("TLMessage",  function() { return "Count: " + countArray[countArray.length-1]; } ); // HtmlView Page linking property 'TLMessage' for element 'cpm'
          _view.cpm.linkProperty("TitleYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'cpm'
          _view.cpm.linkProperty("TitleXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'cpm'
          _view.cpm.linkProperty("AxisXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'cpm'
          _view.cpm.linkProperty("TitleFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'cpm'
          _view.cpm.linkProperty("Display",  function() { return cpmGraph?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'cpm'
          _view.counter.linkProperty("InputX",  function() { return minArray; }, function(_v) { minArray = _v; } ); // HtmlView Page linking property 'InputX' for element 'counter'
          _view.counter.linkProperty("InputY",  function() { return countArray; }, function(_v) { countArray = _v; } ); // HtmlView Page linking property 'InputY' for element 'counter'
          _view.oscilloscope.linkProperty("Width",  function() { return ""+window.innerWidth; } ); // HtmlView Page linking property 'Width' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("TitleYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("AxisYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("TitleXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("MaximumY",  function() { return maxY; }, function(_v) { maxY = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("TRMessage",  function() { return "Geiger Reader"+"\nTime: "+seconds+" sec"; } ); // HtmlView Page linking property 'TRMessage' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("MinimumY",  function() { return minY; }, function(_v) { minY = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("AxisXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("BLMessage",  function() { return (myFftSize * Math.round(samples/ (seconds+1))) + " samples/sec (" + Math.round(samples/ (seconds+1)) + " iterations/sec) - Sample Rate: " + audioCtx.sampleRate; } ); // HtmlView Page linking property 'BLMessage' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("TLMessage",  function() { return "Count: " + countArray[countArray.length-1] + "(" + peakCount + ")"; } ); // HtmlView Page linking property 'TLMessage' for element 'oscilloscope'
          _view.oscilloscope.linkProperty("Display",  function() { return oscGraph?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'oscilloscope'
          _view.trace.linkProperty("InputX",  function() { return timeArray; }, function(_v) { timeArray = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return dbArray; }, function(_v) { dbArray = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(24);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function Geiger_readerold_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = Geiger_readerold_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function Geiger_readerold_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Geiger Reader</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"cpmOpt2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cpmOpt2'
      .setProperty("Text","CPM") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'cpmOpt2'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"oscilloscopeOpt1", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'oscilloscopeOpt1'
      .setProperty("Text","Oscilloscope") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'oscilloscopeOpt1'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"padding":"5px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"cvs", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cvs'
      .setProperty("Text","CVS") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'cvs'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"cpm", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'cpm'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'cpm'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'cpm'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'cpm'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'cpm'
      .setProperty("XAutoTicks",true) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'cpm'
      .setProperty("Title","CPM Counter") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'cpm'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'cpm'
      .setProperty("MaximumY",150) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'cpm'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'cpm'
      .setProperty("YAutoTicks",true) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'cpm'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'cpm'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'cpm'
      .setProperty("TitleY","Counts") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'cpm'
      .setProperty("TitleX","Time (min)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'cpm'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'cpm'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'cpm'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"counter", _view.cpm) // EJsS HtmlView.HtmlView Page: declaration of element 'counter'
      .setProperty("MarkSize",[20,20]) // EJsS HtmlView.HtmlView Page: setting property 'MarkSize' for element 'counter'
      .setProperty("MarkFillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'MarkFillColor' for element 'counter'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'counter'
      .setProperty("MarkLineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'MarkLineColor' for element 'counter'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'counter'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'counter'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'counter'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'counter'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'counter'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'counter'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"oscilloscope", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'oscilloscope'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'oscilloscope'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'oscilloscope'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'oscilloscope'
      .setProperty("CSS",{"width":"100vw"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'oscilloscope'
      .setProperty("Title","Oscilloscope") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'oscilloscope'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'oscilloscope'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'oscilloscope'
      .setProperty("YAutoTicks",true) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'oscilloscope'
      .setProperty("TitleY","Amplitude") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'oscilloscope'
      .setProperty("TitleX","Time") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'oscilloscope'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'oscilloscope'
      .setProperty("XAutoTicks",true) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'oscilloscope'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.oscilloscope) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'trace'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trace'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'trace'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Geiger Reader App ( requires A Geiger Reader Detector to work properly)<br />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_model_Geiger_reader_cvs/01authorFelix_J_Garcia_Clemente.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_model_Geiger_reader_cvs/01authorleongtzekwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_model_Geiger_reader_cvs/01authorlookang50x50.png" />
 Felix J. Garcia Clemente; Tze Kwang Leong; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Felix J. Garcia Clemente; Tze Kwang Leong; Loo Kang Wee. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new Geiger_readerold("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_20nuclear/ejss_model_Geiger_reader_cvs/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
