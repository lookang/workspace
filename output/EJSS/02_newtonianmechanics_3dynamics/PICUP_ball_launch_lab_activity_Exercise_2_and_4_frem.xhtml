<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Projectile Motion: Experiment and Computational Model Ex 2 n 4</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var init_velocity; // EjsS Model.Variables.inputs.init_velocity
  var time_in_air; // EjsS Model.Variables.inputs.time_in_air
  var distance_traveled; // EjsS Model.Variables.inputs.distance_traveled

  var font; // EjsS Model.Variables.graph and display.font
  var fontb; // EjsS Model.Variables.graph and display.fontb
  var fonta; // EjsS Model.Variables.graph and display.fonta

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      init_velocity : init_velocity,
      time_in_air : time_in_air,
      distance_traveled : distance_traveled,
      font : font,
      fontb : fontb,
      fonta : fonta
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.init_velocity != "undefined") init_velocity = json.init_velocity;
    if(typeof json.time_in_air != "undefined") time_in_air = json.time_in_air;
    if(typeof json.distance_traveled != "undefined") distance_traveled = json.distance_traveled;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
  };

  _model._inputAndPublicParameters = ["init_velocity",  "time_in_air",  "distance_traveled",  "font",  "fontb",  "fonta"]; 

  _model._outputAndPublicParameters = ["init_velocity",  "time_in_air",  "distance_traveled",  "font",  "fontb",  "fonta"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Exercise 2"] = true;
    __pagesEnabled["Exercise 4"] = true;
  });

  _model.addToReset(function() {
    init_velocity = [2,4,6,8,10]; // EjsS Model.Variables.inputs.init_velocity
    time_in_air = [0.65,0.65,0.65,0.65,0.65]; // EjsS Model.Variables.inputs.time_in_air
    distance_traveled = [1.3,2.6,3.9,5.2,6.5]; // EjsS Model.Variables.inputs.distance_traveled
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.graph and display.font
    fontb = "normal bold 2vw"; // EjsS Model.Variables.graph and display.fontb
    fonta = "normal normal 1vw"; // EjsS Model.Variables.graph and display.fonta
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.toggleFullScreen:1
  // does not work for iOS   // > CustomCode.toggleFullScreen:2
  /*jslint browser:true */  // > CustomCode.toggleFullScreen:3
  function toggleFullScreen() {  // > CustomCode.toggleFullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.toggleFullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.toggleFullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.toggleFullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.toggleFullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.toggleFullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.toggleFullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.toggleFullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.toggleFullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.toggleFullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.toggleFullScreen:14
      }  // > CustomCode.toggleFullScreen:15
    } else {  // > CustomCode.toggleFullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.toggleFullScreen:17
        document.exitFullscreen();  // > CustomCode.toggleFullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.toggleFullScreen:19
        document.msExitFullscreen();  // > CustomCode.toggleFullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.toggleFullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.toggleFullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.toggleFullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.toggleFullScreen:24
      }  // > CustomCode.toggleFullScreen:25
    }  // > CustomCode.toggleFullScreen:26
  }  // > CustomCode.toggleFullScreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Exercise 2"]) return;
    var userPlay = "[ 2, 4, 6, 8, 10]";  // > Initialization.Exercise 2:1
    _view.initvelocity.setValue(userPlay);  // > Initialization.Exercise 2:2
    userPlay = "[0.65, 0.65, 0.65, 0.65, 0.65]";  // > Initialization.Exercise 2:3
    _view.timeinair.setValue(userPlay);  // > Initialization.Exercise 2:4
    userPlay = "[1.3, 2.6, 3.9, 5.2,6.5]";  // > Initialization.Exercise 2:5
    _view.distance.setValue(userPlay);  // > Initialization.Exercise 2:6
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Exercise 4"]) return;
    var userPlay = "[ 2, 4, 6, 8, 10]";  // > Initialization.Exercise 4:1
    _view.initvelocity.setValue(userPlay);  // > Initialization.Exercise 4:2
    userPlay = "[0.86, 1.15, 1.49, 1.85, 2.22]";  // > Initialization.Exercise 4:3
    _view.timeinair.setValue(userPlay);  // > Initialization.Exercise 4:4
    userPlay = "[0, 0, 0, 0,0]";  // > Initialization.Exercise 4:5
    _view.distance.setValue(userPlay);  // > Initialization.Exercise 4:6
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.init_velocity.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'init_velocity'
          _view.initvelocity.setAction("OnChange", function(_data,_info) {
  var userPlay = _view.initvelocity.getValue();
   try {
     init_velocity =[];
     init_velocity = eval(userPlay);
   
  }
  catch(error) {
    _tools.showOkCancelDialog("Invalid, try again!");
    }

}); // HtmlView Page setting action 'OnChange' for element 'initvelocity'
          _view.initvelocity.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'initvelocity'
          _view.time_in_air.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'time_in_air'
          _view.timeinair.setAction("OnChange", function(_data,_info) {
  var userPlay = _view.timeinair.getValue();
   try {
     time_in_air =[];
     time_in_air = eval(userPlay);
   
  }
  catch(error) {
    _tools.showOkCancelDialog("Invalid, try again!");
    }

}); // HtmlView Page setting action 'OnChange' for element 'timeinair'
          _view.timeinair.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'timeinair'
          _view.distancetraveled.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'distancetraveled'
          _view.distance.setAction("OnChange", function(_data,_info) {
  var userPlay = _view.distance.getValue();
   try {
     distance_traveled =[];
     distance_traveled = eval(userPlay);
   
  }
  catch(error) {
    _tools.showOkCancelDialog("Invalid, try again!");
    }

}); // HtmlView Page setting action 'OnChange' for element 'distance'
          _view.distance.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'distance'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.AirTimeVsInitialSpeed.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'AirTimeVsInitialSpeed'
          _view.AirTimeVsInitialSpeed.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'AirTimeVsInitialSpeed'
          _view.AirTimeVsInitialSpeed.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'AirTimeVsInitialSpeed'
          _view.AirTimeVsInitialSpeed.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'AirTimeVsInitialSpeed'
          _view.AirTimeVsInitialSpeed.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'AirTimeVsInitialSpeed'
          _view.AirTimeVsInitialSpeed.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'AirTimeVsInitialSpeed'
          _view.trace.linkProperty("InputX",  function() { return init_velocity; }, function(_v) { init_velocity = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return time_in_air; }, function(_v) { time_in_air = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace'
          _view.DistanceTraveledVsInitialSpeed.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'DistanceTraveledVsInitialSpeed'
          _view.DistanceTraveledVsInitialSpeed.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'DistanceTraveledVsInitialSpeed'
          _view.DistanceTraveledVsInitialSpeed.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'DistanceTraveledVsInitialSpeed'
          _view.DistanceTraveledVsInitialSpeed.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'DistanceTraveledVsInitialSpeed'
          _view.DistanceTraveledVsInitialSpeed.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'DistanceTraveledVsInitialSpeed'
          _view.DistanceTraveledVsInitialSpeed.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'DistanceTraveledVsInitialSpeed'
          _view.trace2.linkProperty("InputX",  function() { return init_velocity; }, function(_v) { init_velocity = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace2'
          _view.trace2.linkProperty("InputY",  function() { return distance_traveled; }, function(_v) { distance_traveled = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_Intro_1.html');
  _view._addDescriptionPage('Exercise 2','./PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_Intro_2.html');
  _view._addDescriptionPage('ball_launch_lab_activity(Exercise 2).ipynb','./PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_Intro_3.html');
  _view._addDescriptionPage('Exercise 4','./PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_Intro_4.html');
  _view._addDescriptionPage('ball_launch_lab_activity(Exercise 4).ipynb','./PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_Intro_5.html');

  return _view;
} // end of main function

function PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"init_velocity", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'init_velocity'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'init_velocity'
      .setProperty("Tooltip","Initial Velocities") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'init_velocity'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'init_velocity'
      .setProperty("Text","vi=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'init_velocity'
      ;

    _view._addElement(EJSS_INTERFACE.textArea,"initvelocity", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initvelocity'
      .setProperty("Width","20vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'initvelocity'
      .setProperty("ChangeColorOnEdit",true) // EJsS HtmlView.HtmlView Page: setting property 'ChangeColorOnEdit' for element 'initvelocity'
      .setProperty("Tooltip","Initial Velocities") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initvelocity'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'initvelocity'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'initvelocity'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"time_in_air", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'time_in_air'
      .setProperty("Background","black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'time_in_air'
      .setProperty("Tooltip","Time in Air") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'time_in_air'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'time_in_air'
      .setProperty("Text","t=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'time_in_air'
      ;

    _view._addElement(EJSS_INTERFACE.textArea,"timeinair", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'timeinair'
      .setProperty("Width","35vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'timeinair'
      .setProperty("ChangeColorOnEdit",true) // EJsS HtmlView.HtmlView Page: setting property 'ChangeColorOnEdit' for element 'timeinair'
      .setProperty("Tooltip","Time in Air") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'timeinair'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'timeinair'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"distancetraveled", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'distancetraveled'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'distancetraveled'
      .setProperty("Tooltip","Distance Traveled") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'distancetraveled'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'distancetraveled'
      .setProperty("Text","x=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'distancetraveled'
      ;

    _view._addElement(EJSS_INTERFACE.textArea,"distance", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'distance'
      .setProperty("Width","28vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'distance'
      .setProperty("ChangeColorOnEdit",true) // EJsS HtmlView.HtmlView Page: setting property 'ChangeColorOnEdit' for element 'distance'
      .setProperty("Tooltip","Distance Traveled") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'distance'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'distance'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'distance'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"AirTimeVsInitialSpeed", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'AirTimeVsInitialSpeed'
      .setProperty("Height","85vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'AirTimeVsInitialSpeed'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'AirTimeVsInitialSpeed'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'AirTimeVsInitialSpeed'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'AirTimeVsInitialSpeed'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'AirTimeVsInitialSpeed'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'AirTimeVsInitialSpeed'
      .setProperty("Title","Air Time vs. Initial Speed") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'AirTimeVsInitialSpeed'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'AirTimeVsInitialSpeed'
      .setProperty("TRMessage","Air Time vs. Initial Speed") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'AirTimeVsInitialSpeed'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'AirTimeVsInitialSpeed'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'AirTimeVsInitialSpeed'
      .setProperty("TitleY","Time in the air") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'AirTimeVsInitialSpeed'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'AirTimeVsInitialSpeed'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'AirTimeVsInitialSpeed'
      .setProperty("TitleX","Initial Speed") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'AirTimeVsInitialSpeed'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'AirTimeVsInitialSpeed'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'AirTimeVsInitialSpeed'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'AirTimeVsInitialSpeed'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.AirTimeVsInitialSpeed) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("Active",true) // EJsS HtmlView.HtmlView Page: setting property 'Active' for element 'trace'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trace'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'trace'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"DistanceTraveledVsInitialSpeed", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'DistanceTraveledVsInitialSpeed'
      .setProperty("Height","85vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("Title","Distance Traveled vs. Initial Speed") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("TRMessage","Distance Traveled vs. Initial Speed") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("TitleY","Total horizontal distance traveled") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("TitleX","Initial Speed") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'DistanceTraveledVsInitialSpeed'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'DistanceTraveledVsInitialSpeed'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace2", _view.DistanceTraveledVsInitialSpeed) // EJsS HtmlView.HtmlView Page: declaration of element 'trace2'
      .setProperty("Active",true) // EJsS HtmlView.HtmlView Page: setting property 'Active' for element 'trace2'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trace2'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'trace2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Projectile Motion: Experiment and Computational Model Ex 2 n 4<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/PICUP_ball_launch_lab_activity_Exercise_2_and_4/Screen Shot 2018-06-27 at 5.13.53 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/01authorlookang50x50.png" />
 Fremont Teng; Loo Kang Wee; based on codes by Todd Zimmerman
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng; Loo Kang Wee; based on codes by Todd Zimmerman.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PICUP_ball_launch_lab_activity_Exercise_2_and_4_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
