<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var dt; // EjsS Model.Variables.inputs.dt
  var g; // EjsS Model.Variables.inputs.g
  var h; // EjsS Model.Variables.inputs.h
  var v_init; // EjsS Model.Variables.inputs.v_init
  var ballm; // EjsS Model.Variables.inputs.ballm
  var theta; // EjsS Model.Variables.inputs.theta
  var ballradius; // EjsS Model.Variables.inputs.ballradius
  var thetadeg; // EjsS Model.Variables.inputs.thetadeg

  var ballv; // EjsS Model.Variables.variables.ballv
  var t; // EjsS Model.Variables.variables.t
  var ballpos; // EjsS Model.Variables.variables.ballpos
  var v; // EjsS Model.Variables.variables.v

  var font; // EjsS Model.Variables.graph and display.font
  var fontb; // EjsS Model.Variables.graph and display.fontb

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      dt : dt,
      g : g,
      h : h,
      v_init : v_init,
      ballm : ballm,
      theta : theta,
      ballradius : ballradius,
      thetadeg : thetadeg,
      ballv : ballv,
      t : t,
      ballpos : ballpos,
      v : v,
      font : font,
      fontb : fontb
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.h != "undefined") h = json.h;
    if(typeof json.v_init != "undefined") v_init = json.v_init;
    if(typeof json.ballm != "undefined") ballm = json.ballm;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.ballradius != "undefined") ballradius = json.ballradius;
    if(typeof json.thetadeg != "undefined") thetadeg = json.thetadeg;
    if(typeof json.ballv != "undefined") ballv = json.ballv;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.ballpos != "undefined") ballpos = json.ballpos;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
  };

  _model._inputAndPublicParameters = ["dt",  "g",  "h",  "v_init",  "ballm",  "theta",  "ballradius",  "thetadeg",  "ballv",  "t",  "ballpos",  "v",  "font",  "fontb"]; 

  _model._outputAndPublicParameters = ["dt",  "g",  "h",  "v_init",  "ballm",  "theta",  "ballradius",  "thetadeg",  "ballv",  "t",  "ballpos",  "v",  "font",  "fontb"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
  });

  _model.addToReset(function() {
    dt = 0.01; // EjsS Model.Variables.inputs.dt
    g = [0,-9.8]; // EjsS Model.Variables.inputs.g
    h = 2; // EjsS Model.Variables.inputs.h
    v_init = 5; // EjsS Model.Variables.inputs.v_init
    ballm = 1; // EjsS Model.Variables.inputs.ballm
    theta = Math.PI/4; // EjsS Model.Variables.inputs.theta
    ballradius = 0.2; // EjsS Model.Variables.inputs.ballradius
    thetadeg = 360*theta/(2*Math.PI); // EjsS Model.Variables.inputs.thetadeg
  });

  _model.addToReset(function() {
    ballv = [v_init,0]; // EjsS Model.Variables.variables.ballv
    t = 0; // EjsS Model.Variables.variables.t
    ballpos = [0,h]; // EjsS Model.Variables.variables.ballpos
    v = new Array(2); // EjsS Model.Variables.variables.v
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.variables.v
        v[_i0] = 0;  // EjsS Model.Variables.variables.v
      }
    }());
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.graph and display.font
    fontb = "normal bold 2vw"; // EjsS Model.Variables.graph and display.fontb
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.toggleFullScreen:1
  // does not work for iOS   // > CustomCode.toggleFullScreen:2
  /*jslint browser:true */  // > CustomCode.toggleFullScreen:3
  function toggleFullScreen() {  // > CustomCode.toggleFullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.toggleFullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.toggleFullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.toggleFullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.toggleFullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.toggleFullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.toggleFullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.toggleFullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.toggleFullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.toggleFullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.toggleFullScreen:14
      }  // > CustomCode.toggleFullScreen:15
    } else {  // > CustomCode.toggleFullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.toggleFullScreen:17
        document.exitFullscreen();  // > CustomCode.toggleFullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.toggleFullScreen:19
        document.msExitFullscreen();  // > CustomCode.toggleFullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.toggleFullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.toggleFullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.toggleFullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.toggleFullScreen:24
      }  // > CustomCode.toggleFullScreen:25
    }  // > CustomCode.toggleFullScreen:26
  }  // > CustomCode.toggleFullScreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
     v = [v_init*Math.cos(theta),v_init*Math.sin(theta)];  // > Initialization.Init Page:1
     //Set initial time to zero  // > Initialization.Init Page:2
     t=0;  // > Initialization.Init Page:3
     //#Create sphere position that will appear on screen  // > Initialization.Init Page:4
     ballpos = [0,h];  // > Initialization.Init Page:5
     //Initial velocity vector of ball  // > Initialization.Init Page:6
     ballv = v  // > Initialization.Init Page:7
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    if (ballpos[1]>ballradius){//Stop when ball hits floor  // > Evolution.Evol Page:1
    //Update position of ball  // > Evolution.Evol Page:2
      ballpos[0] = ballpos[0] + ballv[0]*dt;  // > Evolution.Evol Page:3
      ballpos[1] = ballpos[1] + ballv[1]*dt;  // > Evolution.Evol Page:4
      //Update velocity of ball  // > Evolution.Evol Page:5
      ballv[0] = ballv[0] +g[0]*dt;  // > Evolution.Evol Page:6
      ballv[1] = ballv[1] +g[1]*dt;  // > Evolution.Evol Page:7
      //Calculate total time elapsed  // > Evolution.Evol Page:8
      t+=dt;  // > Evolution.Evol Page:9
      }  // > Evolution.Evol Page:10
    else{_pause();}  // > Evolution.Evol Page:11
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.Height.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Height'
          _view.h.linkProperty("Value",  function() { return h; }, function(_v) { h = _v; } ); // HtmlView Page linking property 'Value' for element 'h'
          _view.h.setAction("OnChange", function(_data,_info) {
  if (h<0.1){h=0.1;}
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'h'
          _view.h.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'h'
          _view.InitialVel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'InitialVel'
          _view.v_init.linkProperty("Value",  function() { return v_init; }, function(_v) { v_init = _v; } ); // HtmlView Page linking property 'Value' for element 'v_init'
          _view.v_init.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'v_init'
          _view.v_init.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'v_init'
          _view.Angle.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Angle'
          _view.thetadeg.linkProperty("Value",  function() { return thetadeg; }, function(_v) { thetadeg = _v; } ); // HtmlView Page linking property 'Value' for element 'thetadeg'
          _view.thetadeg.setAction("OnChange", function(_data,_info) {
  theta = thetadeg/360*(2*Math.PI);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'thetadeg'
          _view.thetadeg.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'thetadeg'
          _view.deg.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'deg'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.scene.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'scene'
          _view.scene.linkProperty("BLMessage",  function() { return "Horizontal distance traveled = "+ballpos[0].toFixed(2); } ); // HtmlView Page linking property 'BLMessage' for element 'scene'
          _view.scene.linkProperty("BRMessage",  function() { return "Time elapsed = "+t.toFixed(2)+" s"; } ); // HtmlView Page linking property 'BRMessage' for element 'scene'
          _view.ground.linkProperty("SizeX",  function() { return 10*h; } ); // HtmlView Page linking property 'SizeX' for element 'ground'
          _view.table.linkProperty("Y",  function() { return h/2; } ); // HtmlView Page linking property 'Y' for element 'table'
          _view.table.linkProperty("SizeY",  function() { return h; }, function(_v) { h = _v; } ); // HtmlView Page linking property 'SizeY' for element 'table'
          _view.vArrow.linkProperty("SizeX",  function() { return ballv[0]*0.1; } ); // HtmlView Page linking property 'SizeX' for element 'vArrow'
          _view.vArrow.linkProperty("Position",  function() { return ballpos; }, function(_v) { ballpos = _v; } ); // HtmlView Page linking property 'Position' for element 'vArrow'
          _view.vArrow.linkProperty("SizeY",  function() { return ballv[1]*0.1; } ); // HtmlView Page linking property 'SizeY' for element 'vArrow'
          _view.ball.linkProperty("SizeX",  function() { return ballradius; }, function(_v) { ballradius = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ball'
          _view.ball.linkProperty("Position",  function() { return ballpos; }, function(_v) { ballpos = _v; } ); // HtmlView Page linking property 'Position' for element 'ball'
          _view.ball.linkProperty("SizeY",  function() { return ballradius; }, function(_v) { ballradius = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ball'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_Intro_1.html');
  _view._addDescriptionPage('ball_launch_lab_activity(Exercise 1).ipynb','./PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_Intro_2.html');
  _view._addDescriptionPage('Exercise 1','./PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_Intro_3.html');
  _view._addDescriptionPage('Exercise 3','./PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_Intro_4.html');
  _view._addDescriptionPage('ball_launch_lab_activity(Exercise 3).ipynb','./PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_Intro_5.html');

  return _view;
} // end of main function

function PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Height", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Height'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Height'
      .setProperty("Tooltip","#initial height of ball") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Height'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Height'
      .setProperty("Text","Initial Height") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Height'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"h", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'h'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'h'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'h'
      .setProperty("Tooltip","initial height of ball") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'h'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'h'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"InitialVel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'InitialVel'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'InitialVel'
      .setProperty("Tooltip","Initial velocity vector of ball") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'InitialVel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'InitialVel'
      .setProperty("Text","Initial Velocity") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'InitialVel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"v_init", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'v_init'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'v_init'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'v_init'
      .setProperty("Tooltip","Initial velocity vector of ball") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'v_init'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'v_init'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Angle", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Angle'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Angle'
      .setProperty("Tooltip","Angle In Degrees") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Angle'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Angle'
      .setProperty("Text","Angle") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Angle'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"thetadeg", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thetadeg'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'thetadeg'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'thetadeg'
      .setProperty("Tooltip","Angle In Degrees") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'thetadeg'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'thetadeg'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"deg", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'deg'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'deg'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'deg'
      .setProperty("Text","°") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'deg'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"scene", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'scene'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'scene'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'scene'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'scene'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'scene'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'scene'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'scene'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'scene'
      .setProperty("MaximumY",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'scene'
      .setProperty("MaximumX",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'scene'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'scene'
      .setProperty("TRMessage","Ball Spring Launcher") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'scene'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'scene'
      .setProperty("MinimumX",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'scene'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'scene'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'scene'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'scene'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'scene'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'scene'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'scene'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'scene'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ground", _view.scene) // EJsS HtmlView.HtmlView Page: declaration of element 'ground'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ground'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ground'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ground'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ground'
      .setProperty("SizeY",1.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ground'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"table", _view.scene) // EJsS HtmlView.HtmlView Page: declaration of element 'table'
      .setProperty("FillColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'table'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'table'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'table'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'table'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vArrow", _view.scene) // EJsS HtmlView.HtmlView Page: declaration of element 'vArrow'
      .setProperty("LineColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vArrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vArrow'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ball", _view.scene) // EJsS HtmlView.HtmlView Page: declaration of element 'ball'
      .setProperty("FillColor","red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ball'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Fremont Teng
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PICUP_ball_launch_lab_activity_Exercise_1_and_3_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
