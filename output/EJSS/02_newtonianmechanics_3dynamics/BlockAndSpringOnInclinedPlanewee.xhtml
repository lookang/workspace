<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Block and Spring on an Inclined Plane</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function BlockAndSpringOnInclinedPlanewee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var motionDone; // EjsS Model.Variables.Drawing Vars.motionDone
  var bounce; // EjsS Model.Variables.Drawing Vars.bounce
  var L; // EjsS Model.Variables.Drawing Vars.L
  var angle; // EjsS Model.Variables.Drawing Vars.angle
  var angleDegrees; // EjsS Model.Variables.Drawing Vars.angleDegrees
  var bumperX; // EjsS Model.Variables.Drawing Vars.bumperX
  var bumperY; // EjsS Model.Variables.Drawing Vars.bumperY
  var blockSize; // EjsS Model.Variables.Drawing Vars.blockSize
  var mass; // EjsS Model.Variables.Drawing Vars.mass
  var initX; // EjsS Model.Variables.Drawing Vars.initX
  var minX; // EjsS Model.Variables.Drawing Vars.minX
  var maxX; // EjsS Model.Variables.Drawing Vars.maxX
  var trMessage; // EjsS Model.Variables.Drawing Vars.trMessage
  var showGraphX; // EjsS Model.Variables.Drawing Vars.showGraphX
  var showGraphV; // EjsS Model.Variables.Drawing Vars.showGraphV
  var showGraphF; // EjsS Model.Variables.Drawing Vars.showGraphF

  var slippingMsg; // EjsS Model.Variables.Constants.slippingMsg
  var direction; // EjsS Model.Variables.Constants.direction
  var m; // EjsS Model.Variables.Constants.m
  var g; // EjsS Model.Variables.Constants.g
  var k; // EjsS Model.Variables.Constants.k
  var muKinetic; // EjsS Model.Variables.Constants.muKinetic
  var muStatic; // EjsS Model.Variables.Constants.muStatic

  var t; // EjsS Model.Variables.Dynamical Vars.t
  var ttext; // EjsS Model.Variables.Dynamical Vars.ttext
  var dt; // EjsS Model.Variables.Dynamical Vars.dt
  var x; // EjsS Model.Variables.Dynamical Vars.x
  var y; // EjsS Model.Variables.Dynamical Vars.y
  var v; // EjsS Model.Variables.Dynamical Vars.v
  var tol; // EjsS Model.Variables.Dynamical Vars.tol

  var showVectors; // EjsS Model.Variables.Vector Vars.showVectors
  var arrowScale; // EjsS Model.Variables.Vector Vars.arrowScale
  var frictionForce; // EjsS Model.Variables.Vector Vars.frictionForce
  var springForce; // EjsS Model.Variables.Vector Vars.springForce
  var netForce; // EjsS Model.Variables.Vector Vars.netForce
  var weightX; // EjsS Model.Variables.Vector Vars.weightX
  var weightY; // EjsS Model.Variables.Vector Vars.weightY

  var text; // EjsS Model.Variables.layout.text
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var Width3; // EjsS Model.Variables.layout.Width3
  var Width4; // EjsS Model.Variables.layout.Width4
  var Height1; // EjsS Model.Variables.layout.Height1
  var graph; // EjsS Model.Variables.layout.graph
  var world; // EjsS Model.Variables.layout.world
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var datashow; // EjsS Model.Variables.layout.datashow
  var datashow2; // EjsS Model.Variables.layout.datashow2

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      motionDone : motionDone,
      bounce : bounce,
      L : L,
      angle : angle,
      angleDegrees : angleDegrees,
      bumperX : bumperX,
      bumperY : bumperY,
      blockSize : blockSize,
      mass : mass,
      initX : initX,
      minX : minX,
      maxX : maxX,
      trMessage : trMessage,
      showGraphX : showGraphX,
      showGraphV : showGraphV,
      showGraphF : showGraphF,
      slippingMsg : slippingMsg,
      direction : direction,
      m : m,
      g : g,
      k : k,
      muKinetic : muKinetic,
      muStatic : muStatic,
      t : t,
      ttext : ttext,
      dt : dt,
      x : x,
      y : y,
      v : v,
      tol : tol,
      showVectors : showVectors,
      arrowScale : arrowScale,
      frictionForce : frictionForce,
      springForce : springForce,
      netForce : netForce,
      weightX : weightX,
      weightY : weightY,
      text : text,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      Width3 : Width3,
      Width4 : Width4,
      Height1 : Height1,
      graph : graph,
      world : world,
      disabledworld : disabledworld,
      disabled : disabled,
      datashow : datashow,
      datashow2 : datashow2
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.motionDone != "undefined") motionDone = json.motionDone;
    if(typeof json.bounce != "undefined") bounce = json.bounce;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.angle != "undefined") angle = json.angle;
    if(typeof json.angleDegrees != "undefined") angleDegrees = json.angleDegrees;
    if(typeof json.bumperX != "undefined") bumperX = json.bumperX;
    if(typeof json.bumperY != "undefined") bumperY = json.bumperY;
    if(typeof json.blockSize != "undefined") blockSize = json.blockSize;
    if(typeof json.mass != "undefined") mass = json.mass;
    if(typeof json.initX != "undefined") initX = json.initX;
    if(typeof json.minX != "undefined") minX = json.minX;
    if(typeof json.maxX != "undefined") maxX = json.maxX;
    if(typeof json.trMessage != "undefined") trMessage = json.trMessage;
    if(typeof json.showGraphX != "undefined") showGraphX = json.showGraphX;
    if(typeof json.showGraphV != "undefined") showGraphV = json.showGraphV;
    if(typeof json.showGraphF != "undefined") showGraphF = json.showGraphF;
    if(typeof json.slippingMsg != "undefined") slippingMsg = json.slippingMsg;
    if(typeof json.direction != "undefined") direction = json.direction;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.muKinetic != "undefined") muKinetic = json.muKinetic;
    if(typeof json.muStatic != "undefined") muStatic = json.muStatic;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.ttext != "undefined") ttext = json.ttext;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.tol != "undefined") tol = json.tol;
    if(typeof json.showVectors != "undefined") showVectors = json.showVectors;
    if(typeof json.arrowScale != "undefined") arrowScale = json.arrowScale;
    if(typeof json.frictionForce != "undefined") frictionForce = json.frictionForce;
    if(typeof json.springForce != "undefined") springForce = json.springForce;
    if(typeof json.netForce != "undefined") netForce = json.netForce;
    if(typeof json.weightX != "undefined") weightX = json.weightX;
    if(typeof json.weightY != "undefined") weightY = json.weightY;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Width3 != "undefined") Width3 = json.Width3;
    if(typeof json.Width4 != "undefined") Width4 = json.Width4;
    if(typeof json.Height1 != "undefined") Height1 = json.Height1;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.datashow != "undefined") datashow = json.datashow;
    if(typeof json.datashow2 != "undefined") datashow2 = json.datashow2;
  };

  _model._inputAndPublicParameters = ["motionDone",  "bounce",  "L",  "angle",  "angleDegrees",  "bumperX",  "bumperY",  "blockSize",  "mass",  "initX",  "minX",  "maxX",  "trMessage",  "showGraphX",  "showGraphV",  "showGraphF",  "slippingMsg",  "direction",  "m",  "g",  "k",  "muKinetic",  "muStatic",  "t",  "ttext",  "dt",  "x",  "y",  "v",  "tol",  "showVectors",  "arrowScale",  "frictionForce",  "springForce",  "netForce",  "weightX",  "weightY",  "text",  "Width",  "Height",  "Width1",  "Width2",  "Width3",  "Width4",  "Height1",  "graph",  "world",  "disabledworld",  "disabled",  "datashow",  "datashow2"]; 

  _model._outputAndPublicParameters = ["motionDone",  "bounce",  "L",  "angle",  "angleDegrees",  "bumperX",  "bumperY",  "blockSize",  "mass",  "initX",  "minX",  "maxX",  "trMessage",  "showGraphX",  "showGraphV",  "showGraphF",  "slippingMsg",  "direction",  "m",  "g",  "k",  "muKinetic",  "muStatic",  "t",  "ttext",  "dt",  "x",  "y",  "v",  "tol",  "showVectors",  "arrowScale",  "frictionForce",  "springForce",  "netForce",  "weightX",  "weightY",  "text",  "Width",  "Height",  "Width1",  "Width2",  "Width3",  "Width4",  "Height1",  "graph",  "world",  "disabledworld",  "disabled",  "datashow",  "datashow2"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Check Intial Direction"] = true;
    __pagesEnabled["Evolution"] = true;
    __pagesEnabled["Bottom bounce"] = true;
    __pagesEnabled["Top bounce"] = true;
    __pagesEnabled["Stop slipping"] = true;
    __pagesEnabled["Error handling code"] = true;
    __pagesEnabled["Compute forces"] = true;
  });

  _model.addToReset(function() {
    motionDone = false; // EjsS Model.Variables.Drawing Vars.motionDone
    L = 1.0; // EjsS Model.Variables.Drawing Vars.L
    angle = 0; // EjsS Model.Variables.Drawing Vars.angle
    angleDegrees = 0; // EjsS Model.Variables.Drawing Vars.angleDegrees
    bumperX = L; // EjsS Model.Variables.Drawing Vars.bumperX
    bumperY = 0; // EjsS Model.Variables.Drawing Vars.bumperY
    blockSize = 0.15*L; // EjsS Model.Variables.Drawing Vars.blockSize
    mass = 1; // EjsS Model.Variables.Drawing Vars.mass
    initX = 0.1; // EjsS Model.Variables.Drawing Vars.initX
    minX = -blockSize/2; // EjsS Model.Variables.Drawing Vars.minX
    maxX = L+blockSize/2; // EjsS Model.Variables.Drawing Vars.maxX
    trMessage = "Drag the block or the top of incline and click play"; // EjsS Model.Variables.Drawing Vars.trMessage
    showGraphX = false; // EjsS Model.Variables.Drawing Vars.showGraphX
    showGraphV = false; // EjsS Model.Variables.Drawing Vars.showGraphV
    showGraphF = false; // EjsS Model.Variables.Drawing Vars.showGraphF
  });

  _model.addToReset(function() {
    slippingMsg = "not slipping"; // EjsS Model.Variables.Constants.slippingMsg
    m = 0.1; // EjsS Model.Variables.Constants.m
    g = 9.8; // EjsS Model.Variables.Constants.g
    k = 10; // EjsS Model.Variables.Constants.k
    muKinetic = 0.00; // EjsS Model.Variables.Constants.muKinetic
    muStatic = 0.00; // EjsS Model.Variables.Constants.muStatic
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.Dynamical Vars.t
    dt = 0.02; // EjsS Model.Variables.Dynamical Vars.dt
    x = initX; // EjsS Model.Variables.Dynamical Vars.x
    y = 0.0; // EjsS Model.Variables.Dynamical Vars.y
    v = 0.0; // EjsS Model.Variables.Dynamical Vars.v
    tol = 1.0E-9; // EjsS Model.Variables.Dynamical Vars.tol
  });

  _model.addToReset(function() {
    showVectors = false; // EjsS Model.Variables.Vector Vars.showVectors
    arrowScale = 0.2; // EjsS Model.Variables.Vector Vars.arrowScale
    weightX = -m*g*Math.sin(angle); // EjsS Model.Variables.Vector Vars.weightX
    weightY = -m*g*Math.cos(angle); // EjsS Model.Variables.Vector Vars.weightY
  });

  _model.addToReset(function() {
    text = "select the different position of RED and Blue dots and click play"; // EjsS Model.Variables.layout.text
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "0%"; // EjsS Model.Variables.layout.Width2
    Width3 = "0%"; // EjsS Model.Variables.layout.Width3
    Width4 = "0%"; // EjsS Model.Variables.layout.Width4
    Height1 = "15"; // EjsS Model.Variables.layout.Height1
    graph = true; // EjsS Model.Variables.layout.graph
    world = true; // EjsS Model.Variables.layout.world
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
    datashow = true; // EjsS Model.Variables.layout.datashow
    datashow2 = true; // EjsS Model.Variables.layout.datashow2
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(10);
    _model.setStepsPerDisplay(1);
  });

  // check direction of friction force  // > CustomCode.Check for slipping:1
  function checkDirection() {  // > CustomCode.Check for slipping:2
    trMessage=null;  // > CustomCode.Check for slipping:3
    motionDone= x<minX || x>maxX;  // > CustomCode.Check for slipping:4
      // > CustomCode.Check for slipping:5
    if(v>0) direction=-1; // bug removed by lookang  // > CustomCode.Check for slipping:6
    else if (v<0) direction =1; // bug removed by lookang  // > CustomCode.Check for slipping:7
      // > CustomCode.Check for slipping:8
    //if (v==0) {  // check for static friction  // > CustomCode.Check for slipping:9
    else {  // > CustomCode.Check for slipping:10
      springForce=-k*(x-L/2);  // > CustomCode.Check for slipping:11
      weightX=-m*g*Math.sin(angle);  // > CustomCode.Check for slipping:12
      weightY=-m*g*Math.cos(angle);  // > CustomCode.Check for slipping:13
      if(Math.abs(weightX+springForce)>Math.abs(muStatic*weightY)) {  // sliding condition  // > CustomCode.Check for slipping:14
        direction=(weightX+springForce>0)?-1:1;  // > CustomCode.Check for slipping:15
        frictionForce=Math.sign(v)*muKinetic*weightY;  // > CustomCode.Check for slipping:16
        slippingMsg= "slipping";  // > CustomCode.Check for slipping:17
        //_println("slipping friction="+frictionForce);  // > CustomCode.Check for slipping:18
      } else {  // > CustomCode.Check for slipping:19
        frictionForce=-weightX-springForce;  // > CustomCode.Check for slipping:20
        direction=0;  // static friction  // > CustomCode.Check for slipping:21
        slippingMsg= "not slipping";  // > CustomCode.Check for slipping:22
        //_println("not slipping friction="+frictionForce);  // > CustomCode.Check for slipping:23
      }  // > CustomCode.Check for slipping:24
    }  // > CustomCode.Check for slipping:25
  }  // > CustomCode.Check for slipping:26

  function displayAlert() {  // > CustomCode.alert:1
  /*  _alert("drawingPanel","Warning",  // > CustomCode.alert:2
           "End of motion reached.\n"+  // > CustomCode.alert:3
           "Please reset the simulation or drag the block\n"+  // > CustomCode.alert:4
           "to a new position before starting the motion."); */  // > CustomCode.alert:5
  }  // > CustomCode.alert:6

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  // Converts from degrees to radians.  // > CustomCode.MathsFn:1
  Math.radians = function(degrees) {  // > CustomCode.MathsFn:2
    return degrees * Math.PI / 180;  // > CustomCode.MathsFn:3
  };  // > CustomCode.MathsFn:4
     // > CustomCode.MathsFn:5
  // Converts from radians to degrees.  // > CustomCode.MathsFn:6
  Math.degrees = function(radians) {  // > CustomCode.MathsFn:7
    return radians * 180 / Math.PI;  // > CustomCode.MathsFn:8
  };  // > CustomCode.MathsFn:9

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Check Intial Direction"]) return;
    checkDirection();  // > Initialization.Check Intial Direction:1
    trMessage="Drag the block or the top of incline and click play";  // > Initialization.Check Intial Direction:2
    angleDegrees = Math.degrees(angle);  // > Initialization.Check Intial Direction:3
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evolution"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Compute forces"]) return;
    springForce=-k*(x-L/2);  // > FixedRelations.Compute forces:1
    weightX=-m*g*Math.sin(angle);  // > FixedRelations.Compute forces:2
    weightY=-m*g*Math.cos(angle);  // > FixedRelations.Compute forces:3
    if(direction===0) {  // > FixedRelations.Compute forces:4
      // not slipping so friction is equal and opposite to spring and gravitation force  // > FixedRelations.Compute forces:5
      frictionForce=-weightX-springForce;  // > FixedRelations.Compute forces:6
      netForce=0;  // > FixedRelations.Compute forces:7
    } else {  // > FixedRelations.Compute forces:8
      // use kinetic coefficient when slipping  // > FixedRelations.Compute forces:9
      frictionForce=-direction*muKinetic*weightY;  // > FixedRelations.Compute forces:10
      netForce=weightX+springForce+frictionForce;  // > FixedRelations.Compute forces:11
    }  // > FixedRelations.Compute forces:12
    ttext= " t = " + _view._format(t,"0.00") + " s ";  // > FixedRelations.Compute forces:13
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evolution") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["x","v","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Bottom bounce"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Top bounce"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["Stop slipping"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(tol,tol);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=x) __mustReinitialize = true;
        __state[__cIn++] = x;
        if (__state[__cIn]!=v) __mustReinitialize = true;
        __state[__cIn++] = v;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
      var _errorCode = __eventSolver.getErrorCode();
      if (__pagesEnabled["Error handling code"]) {
        { // For any error: 
        }
      }
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(tol,tol);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Preliminary code: 
        var ax=0;  // > Preliminary code for ODE.Evolution:1
        if(direction!=0){  // > Preliminary code for ODE.Evolution:2
          var as=-k*(x-L/2)/m;        // acceleration due to spring  // > Preliminary code for ODE.Evolution:3
          var gx=-g*Math.sin(angle);  // x-component of g  // > Preliminary code for ODE.Evolution:4
          var gy=-g*Math.cos(angle);  // y-component of g  // > Preliminary code for ODE.Evolution:5
          var friction=-direction*muKinetic*gy;  // > Preliminary code for ODE.Evolution:6
          ax=gx+as+friction;  // > Preliminary code for ODE.Evolution:7
        }  // > Preliminary code for ODE.Evolution:8
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = v; // Rate for ODE: Evolution:x
        _aRate[__cRate++] = ax; // Rate for ODE: Evolution:v
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.SECANT; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return tol; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
        if(v>=0) return 1;  // block is moving up the incline and away from bottom bumper  // > Event zero-condition for page Evolution:1
        return x-blockSize/2;//  positive if block is above bumper  // > Event zero-condition for page Evolution:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        v=Math.abs(v);//  block moves up incline  // > Event action for page Evolution:1
        if(!bounce){  // > Event action for page Evolution:2
          _pause();    // > Event action for page Evolution:3
          motionDone=true;  // > Event action for page Evolution:4
          slippingMsg = "Hit bumper at: "+_format(t,"0.00")+" s.";  // > Event action for page Evolution:5
        }  // > Event action for page Evolution:6
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.SECANT; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return tol; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
        if(v<=0) return 1;     // block is moving down the incline and away from top bumper  // > Event zero-condition for page Evolution:1
        return L-blockSize/2-x; //  positive if block is below top bumper  // > Event zero-condition for page Evolution:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        v=-Math.abs(v);//  block moves down incline  // > Event action for page Evolution:1
        if(!bounce){  // > Event action for page Evolution:2
          _pause();   // > Event action for page Evolution:3
          motionDone=true;  // > Event action for page Evolution:4
          slippingMsg = "Hit bumper at: "+_format(t,"0.00")+" s.";  // > Event action for page Evolution:5
        }  // > Event action for page Evolution:6
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return tol; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var v = _aState[__cOut++];
        var t = _aState[__cOut++];
        return v;  // > Event zero-condition for page Evolution:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        v = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = v;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        v=0;  // need exact zero before checking direction  // > Event action for page Evolution:1
        checkDirection();  // > Event action for page Evolution:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_v(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new BlockAndSpringOnInclinedPlanewee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.controlPanel.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'controlPanel'
          _view.velocitySlider.linkProperty("Value",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'Value' for element 'velocitySlider'
          _view.velocitySlider.setAction("OnChange", function(_data,_info) {
  v=Math.max(-99,v);
  v=Math.min(v,99);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'velocitySlider'
          _view.velocityField.linkProperty("Value",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'Value' for element 'velocityField'
          _view.velocityField.setAction("OnChange", function(_data,_info) {
  v=Math.max(-99,v);
  v=Math.min(v,99);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'velocityField'
          _view.muSlider.linkProperty("Value",  function() { return muStatic; }, function(_v) { muStatic = _v; } ); // HtmlView Page linking property 'Value' for element 'muSlider'
          _view.muSlider.setAction("OnChange", function(_data,_info) {
  muStatic=Math.max(muStatic,muKinetic);  // static must be larger than kinetic
  muStatic=Math.max(0,muStatic);
  muStatic=Math.min(muStatic,2);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'muSlider'
          _view.muField.linkProperty("Value",  function() { return muStatic; }, function(_v) { muStatic = _v; } ); // HtmlView Page linking property 'Value' for element 'muField'
          _view.muField.setAction("OnChange", function(_data,_info) {
  muStatic=Math.max(muStatic,muKinetic);  // static must be larger than kinetic
  muStatic=Math.max(0,muStatic);
  muStatic=Math.min(muStatic,2);
  checkDirection () ;

}); // HtmlView Page setting action 'OnChange' for element 'muField'
          _view.muKineticSlider.linkProperty("Value",  function() { return muKinetic; }, function(_v) { muKinetic = _v; } ); // HtmlView Page linking property 'Value' for element 'muKineticSlider'
          _view.muKineticSlider.setAction("OnChange", function(_data,_info) {
  muKinetic=Math.min(muStatic,muKinetic);  // kinetic cann be larger than static
  muKinetic=Math.max(0,muKinetic);
  muKinetic=Math.min(muKinetic,2);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'muKineticSlider'
          _view.muKineticField.linkProperty("Value",  function() { return muKinetic; }, function(_v) { muKinetic = _v; } ); // HtmlView Page linking property 'Value' for element 'muKineticField'
          _view.muKineticField.setAction("OnChange", function(_data,_info) {
  muKinetic=Math.min(muStatic,muKinetic);  // kinetic cann be larger than static
  muKinetic=Math.max(0,muKinetic);
  muKinetic=Math.min(muKinetic,2);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'muKineticField'
          _view.thetaSlider.linkProperty("Value",  function() { return angleDegrees; }, function(_v) { angleDegrees = _v; } ); // HtmlView Page linking property 'Value' for element 'thetaSlider'
          _view.thetaSlider.setAction("OnChange", function(_data,_info) {
  angleDegrees=Math.max(0,angleDegrees);
  angleDegrees=Math.min(angleDegrees,90);
  angle=Math.radians(angleDegrees);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'thetaSlider'
          _view.thetaField.linkProperty("Value",  function() { return angleDegrees; }, function(_v) { angleDegrees = _v; } ); // HtmlView Page linking property 'Value' for element 'thetaField'
          _view.thetaField.setAction("OnChange", function(_data,_info) {
  angleDegrees=Math.max(0,angleDegrees);
  angleDegrees=Math.min(angleDegrees,90);
  angle=Math.radians(angleDegrees);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'thetaField'
          _view.springConstantSlider.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'Value' for element 'springConstantSlider'
          _view.springConstantSlider.setAction("OnChange", function(_data,_info) {
  k=Math.max(0,k);
  k=Math.min(k,10);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'springConstantSlider'
          _view.springConstantField.linkProperty("Value",  function() { return k; }, function(_v) { k = _v; } ); // HtmlView Page linking property 'Value' for element 'springConstantField'
          _view.springConstantField.setAction("OnChange", function(_data,_info) {
  k=Math.max(0,k);
  k=Math.min(k,10);
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'springConstantField'
          _view.lengthSlider.linkProperty("Value",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'Value' for element 'lengthSlider'
          _view.lengthSlider.setAction("OnChange", function(_data,_info) {
  L=Math.max(0.1,L);
  L=Math.min(L,10);
  bumperX=L;
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'lengthSlider'
          _view.lengthField.linkProperty("Value",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'Value' for element 'lengthField'
          _view.lengthField.setAction("OnChange", function(_data,_info) {
  L=Math.max(0.1,L);
  L=Math.min(L,10);
  bumperX=L;
  checkDirection();

}); // HtmlView Page setting action 'OnChange' for element 'lengthField'
          _view.bounceCheckBox.linkProperty("Checked",  function() { return bounce; }, function(_v) { bounce = _v; } ); // HtmlView Page linking property 'Checked' for element 'bounceCheckBox'
          _view.world.linkProperty("Checked",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Checked' for element 'world'
          _view.world.setAction("OnCheckOff", function(_data,_info) {
  Width1 = "0%";
  disabled=false;
  if (showGraphV) 
    Width2 = "100%";
  else if (showGraphX)
    Width3 = "100%";
  else if (showGraphF)
    Width4 = "100%";

}); // HtmlView Page setting action 'OnCheckOff' for element 'world'
          _view.world.linkProperty("Disabled",  function() { return disabledworld; }, function(_v) { disabledworld = _v; } ); // HtmlView Page linking property 'Disabled' for element 'world'
          _view.world.setAction("OnCheckOn", function(_data,_info) {
  if (showGraphV)
    Width1 = Width2 = "50%";
  else if (showGraphX)
    Width1 = Width3 = "50%";
  else if (showGraphF)
    Width1 = Width4 = "50%";
  else
    Width1 = "100%";

}); // HtmlView Page setting action 'OnCheckOn' for element 'world'
          _view.vvst.linkProperty("Checked",  function() { return showGraphV; }, function(_v) { showGraphV = _v; } ); // HtmlView Page linking property 'Checked' for element 'vvst'
          _view.vvst.setAction("OnCheckOff", function(_data,_info) {
  Width2 = "0%";
  if ((!showGraphX) && (!showGraphF))
  {
    world = true;
    disabledworld=true;
    Width1 = "100%";
  }

}); // HtmlView Page setting action 'OnCheckOff' for element 'vvst'
          _view.vvst.linkProperty("Disabled",  function() { return disabled; }, function(_v) { disabled = _v; } ); // HtmlView Page linking property 'Disabled' for element 'vvst'
          _view.vvst.setAction("OnCheckOn", function(_data,_info) {
  if (world) 
    Width1 = Width2 = "50%";
  else
    Width2 = "100%";
   
  Width3 = "0%";
  Width4 = "0%";  
  disabledworld = showVectors = showGraphF = showGraphX = false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'vvst'
          _view.xvst.linkProperty("Checked",  function() { return showGraphX; }, function(_v) { showGraphX = _v; } ); // HtmlView Page linking property 'Checked' for element 'xvst'
          _view.xvst.setAction("OnCheckOff", function(_data,_info) {
  Width3 = "0%";
  if ((!showGraphV) && (!showGraphF))
  {
    world = true;
    disabledworld=true;
    Width1 = "100%";
  }

}); // HtmlView Page setting action 'OnCheckOff' for element 'xvst'
          _view.xvst.linkProperty("Disabled",  function() { return disabled; }, function(_v) { disabled = _v; } ); // HtmlView Page linking property 'Disabled' for element 'xvst'
          _view.xvst.setAction("OnCheckOn", function(_data,_info) {
  if (world)
    Width1 = Width3 = "50%";  
  else 
    Width3 = "100%";
   
  Width2 = "0%";
  Width4 = "0%";  
  disabledworld = showVectors = showGraphF = showGraphV = false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'xvst'
          _view.forceVsT.linkProperty("Checked",  function() { return showGraphF; }, function(_v) { showGraphF = _v; } ); // HtmlView Page linking property 'Checked' for element 'forceVsT'
          _view.forceVsT.setAction("OnCheckOff", function(_data,_info) {
  Width4 = "0%";
  if ((!showGraphX) && (!showGraphV))
  {
    world = true;
    disabledworld=true;
    Width1 = "100%";
  }

}); // HtmlView Page setting action 'OnCheckOff' for element 'forceVsT'
          _view.forceVsT.setAction("OnChange", function(_data,_info) {
  showVectors=showGraphF;

}); // HtmlView Page setting action 'OnChange' for element 'forceVsT'
          _view.forceVsT.linkProperty("Disabled",  function() { return disabled; }, function(_v) { disabled = _v; } ); // HtmlView Page linking property 'Disabled' for element 'forceVsT'
          _view.forceVsT.setAction("OnCheckOn", function(_data,_info) {
  if (world)
    Width1 = Width4 = "50%";
  else
    Width4 = "100%";
  Width2 = "0%";
  Width3 = "0%";  
  disabledworld = showGraphV = showGraphX = false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'forceVsT'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Disabled",  function() { return motionDone; }, function(_v) { motionDone = _v; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  trMessage=null;
  if (x<=maxX && x>=minX) _play();
  else if (x>maxX && v<=0) _play();
  else if (x<minX && v>=0) _play();
  else displayAlert();

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.stepButton.setAction("OnRelease", function(_data,_info) {
  trMessage=null;
  if (x<=maxX && x>=minX)_step();
  else if (x>maxX && v<=0)_step();
  else if (x<minX && v>=0)_step();
  else displayAlert();

}); // HtmlView Page setting action 'OnRelease' for element 'stepButton'
          _view.stepButton.linkProperty("Disabled",  function() { return motionDone; }, function(_v) { motionDone = _v; } ); // HtmlView Page linking property 'Disabled' for element 'stepButton'
          _view.resetButton.setAction("OnRelease", _reset); // HtmlView Page setting action 'OnRelease' for element 'resetButton'
          _view.displayPanel.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'displayPanel'
          _view.drawingPanel.linkProperty("Height",  function() { return +_view._format(window.innerHeight*0.9,"0"); } ); // HtmlView Page linking property 'Height' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumY",  function() { return L*Math.sin(Math.max(angle, Math.PI/5))+0.05*L+0.05*L; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumX",  function() { return L*Math.cos(angle)+0.05*L; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("TRMessage",  function() { return slippingMsg; }, function(_v) { slippingMsg = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumX",  function() { return -0.05*L; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumY",  function() { return -0.04*L; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("TLMessage",  function() { return trMessage; }, function(_v) { trMessage = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("BRMessage",  function() { return ttext; }, function(_v) { ttext = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'drawingPanel'
          _view.ground.linkProperty("SizeX",  function() { return 4*L; } ); // HtmlView Page linking property 'SizeX' for element 'ground'
          _view.ground.linkProperty("SizeY",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ground'
          _view.coordinates.linkProperty("Transformation",  function() { return angle; }, function(_v) { angle = _v; } ); // HtmlView Page linking property 'Transformation' for element 'coordinates'
          _view.coordinates.linkProperty("Visibility",  function() { return showVectors; }, function(_v) { showVectors = _v; } ); // HtmlView Page linking property 'Visibility' for element 'coordinates'
          _view.xArrow.linkProperty("SizeX",  function() { return 2*blockSize; } ); // HtmlView Page linking property 'SizeX' for element 'xArrow'
          _view.xArrow.linkProperty("Y",  function() { return 1.5*blockSize; } ); // HtmlView Page linking property 'Y' for element 'xArrow'
          _view.yArrow.linkProperty("Y",  function() { return 1.5*blockSize; } ); // HtmlView Page linking property 'Y' for element 'yArrow'
          _view.yArrow.linkProperty("SizeY",  function() { return 2*blockSize; } ); // HtmlView Page linking property 'SizeY' for element 'yArrow'
          _view.x.linkProperty("X",  function() { return 2*blockSize+0.03; } ); // HtmlView Page linking property 'X' for element 'x'
          _view.x.linkProperty("Y",  function() { return 1.5*blockSize; } ); // HtmlView Page linking property 'Y' for element 'x'
          _view.y.linkProperty("Y",  function() { return 3.5*blockSize+0.03; } ); // HtmlView Page linking property 'Y' for element 'y'
          _view.inclineReferenceFrame.linkProperty("Transformation",  function() { return angle; }, function(_v) { angle = _v; } ); // HtmlView Page linking property 'Transformation' for element 'inclineReferenceFrame'
          _view.spring.linkProperty("Radius",  function() { return blockSize/5; } ); // HtmlView Page linking property 'Radius' for element 'spring'
          _view.spring.linkProperty("SizeX",  function() { return -L+x+blockSize/2; } ); // HtmlView Page linking property 'SizeX' for element 'spring'
          _view.spring.linkProperty("X",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'X' for element 'spring'
          _view.spring.linkProperty("Y",  function() { return blockSize/4; } ); // HtmlView Page linking property 'Y' for element 'spring'
          _view.incline.linkProperty("SizeX",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'SizeX' for element 'incline'
          _view.bottomBumper.linkProperty("SizeX",  function() { return 0.01*L; } ); // HtmlView Page linking property 'SizeX' for element 'bottomBumper'
          _view.bottomBumper.linkProperty("X",  function() { return 0.01*L; } ); // HtmlView Page linking property 'X' for element 'bottomBumper'
          _view.bottomBumper.linkProperty("SizeY",  function() { return blockSize/2; } ); // HtmlView Page linking property 'SizeY' for element 'bottomBumper'
          _view.topBumper.linkProperty("SizeX",  function() { return 0.01*L; } ); // HtmlView Page linking property 'SizeX' for element 'topBumper'
          _view.topBumper.linkProperty("X",  function() { return bumperX; }, function(_v) { bumperX = _v; } ); // HtmlView Page linking property 'X' for element 'topBumper'
          _view.topBumper.linkProperty("Y",  function() { return bumperY; }, function(_v) { bumperY = _v; } ); // HtmlView Page linking property 'Y' for element 'topBumper'
          _view.topBumper.linkProperty("SizeY",  function() { return blockSize/2; } ); // HtmlView Page linking property 'SizeY' for element 'topBumper'
          _view.topBumper.setAction("OnDrag", function(_data,_info) {
  angle += Math.atan2(bumperY,bumperX);
  angle = Math.max(0,angle);
  angle = Math.min(Math.PI/2,angle);
  angleDegrees = Math.degrees(angle); // added by lookang
  bumperX = L;
  bumperY = 0;
  checkDirection();

}); // HtmlView Page setting action 'OnDrag' for element 'topBumper'
          _view.block.linkProperty("SizeX",  function() { return blockSize; }, function(_v) { blockSize = _v; } ); // HtmlView Page linking property 'SizeX' for element 'block'
          _view.block.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'block'
          _view.block.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'block'
          _view.block.linkProperty("SizeY",  function() { return blockSize/2; } ); // HtmlView Page linking property 'SizeY' for element 'block'
          _view.block.setAction("OnDrag", function(_data,_info) {
  y = 0;
  //x = _view.block.getX();
  x=Math.max(blockSize/2,x);
  x=Math.min(x,L-blockSize/2);
  v = 0;
  t = 0;
  checkDirection();

}); // HtmlView Page setting action 'OnDrag' for element 'block'
          _view.blockForces.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'blockForces'
          _view.blockForces.linkProperty("Y",  function() { return y+blockSize/4; } ); // HtmlView Page linking property 'Y' for element 'blockForces'
          _view.blockForces.linkProperty("Visibility",  function() { return showVectors; }, function(_v) { showVectors = _v; } ); // HtmlView Page linking property 'Visibility' for element 'blockForces'
          _view.gravity.linkProperty("SizeX",  function() { return (-m*g*Math.sin(angle))*arrowScale; } ); // HtmlView Page linking property 'SizeX' for element 'gravity'
          _view.gravity.linkProperty("SizeY",  function() { return (-m*g*Math.cos(angle))*arrowScale; } ); // HtmlView Page linking property 'SizeY' for element 'gravity'
          _view.friction.linkProperty("SizeX",  function() { return frictionForce*arrowScale; } ); // HtmlView Page linking property 'SizeX' for element 'friction'
          _view.friction.linkProperty("SizeY",  function() { return 0*arrowScale; } ); // HtmlView Page linking property 'SizeY' for element 'friction'
          _view.normal.linkProperty("SizeX",  function() { return 0*arrowScale; } ); // HtmlView Page linking property 'SizeX' for element 'normal'
          _view.normal.linkProperty("SizeY",  function() { return -weightY*arrowScale; } ); // HtmlView Page linking property 'SizeY' for element 'normal'
          _view.springForce.linkProperty("SizeX",  function() { return springForce*arrowScale; } ); // HtmlView Page linking property 'SizeX' for element 'springForce'
          _view.springForce.linkProperty("SizeY",  function() { return 0*arrowScale; } ); // HtmlView Page linking property 'SizeY' for element 'springForce'
          _view.verticalSupport.linkProperty("X",  function() { return L*Math.cos(angle); } ); // HtmlView Page linking property 'X' for element 'verticalSupport'
          _view.verticalSupport.linkProperty("SizeY",  function() { return L*Math.sin(angle); } ); // HtmlView Page linking property 'SizeY' for element 'verticalSupport'
          _view.vPlottingPanel.linkProperty("Height",  function() { return +_view._format(window.innerHeight*0.9,"0"); } ); // HtmlView Page linking property 'Height' for element 'vPlottingPanel'
          _view.vPlottingPanel.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'vPlottingPanel'
          _view.vPlottingPanel.linkProperty("MaximumX",  function() { return 20*dt; } ); // HtmlView Page linking property 'MaximumX' for element 'vPlottingPanel'
          _view.vPlottingPanel.linkProperty("Visibility",  function() { return showGraphV; }, function(_v) { showGraphV = _v; } ); // HtmlView Page linking property 'Visibility' for element 'vPlottingPanel'
          _view.vTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'vTrail'
          _view.vTrail.linkProperty("InputY",  function() { return v; }, function(_v) { v = _v; } ); // HtmlView Page linking property 'InputY' for element 'vTrail'
          _view.xPlottingPanel.linkProperty("Height",  function() { return +_view._format(window.innerHeight*0.9,"0"); } ); // HtmlView Page linking property 'Height' for element 'xPlottingPanel'
          _view.xPlottingPanel.linkProperty("Width",  function() { return Width3; }, function(_v) { Width3 = _v; } ); // HtmlView Page linking property 'Width' for element 'xPlottingPanel'
          _view.xPlottingPanel.linkProperty("MaximumX",  function() { return 20*dt; } ); // HtmlView Page linking property 'MaximumX' for element 'xPlottingPanel'
          _view.xPlottingPanel.linkProperty("Visibility",  function() { return showGraphX; }, function(_v) { showGraphX = _v; } ); // HtmlView Page linking property 'Visibility' for element 'xPlottingPanel'
          _view.xpositionTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'xpositionTrail'
          _view.xpositionTrail.linkProperty("InputY",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputY' for element 'xpositionTrail'
          _view.forcePlottingPanel.linkProperty("Height",  function() { return +_view._format(window.innerHeight*0.9,"0"); } ); // HtmlView Page linking property 'Height' for element 'forcePlottingPanel'
          _view.forcePlottingPanel.linkProperty("Width",  function() { return Width4; }, function(_v) { Width4 = _v; } ); // HtmlView Page linking property 'Width' for element 'forcePlottingPanel'
          _view.forcePlottingPanel.linkProperty("MaximumX",  function() { return 20*dt; } ); // HtmlView Page linking property 'MaximumX' for element 'forcePlottingPanel'
          _view.forcePlottingPanel.linkProperty("Visibility",  function() { return showGraphF; }, function(_v) { showGraphF = _v; } ); // HtmlView Page linking property 'Visibility' for element 'forcePlottingPanel'
          _view.forceTrail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'forceTrail'
          _view.forceTrail.linkProperty("InputY",  function() { return netForce; }, function(_v) { netForce = _v; } ); // HtmlView Page linking property 'InputY' for element 'forceTrail'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(10);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function BlockAndSpringOnInclinedPlanewee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = BlockAndSpringOnInclinedPlanewee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('About','./BlockAndSpringOnInclinedPlanewee_Intro_1.html');
  _view._addDescriptionPage('ForTeacher','./BlockAndSpringOnInclinedPlanewee_Intro_2.html');
  _view._addDescriptionPage('Intro Page','./BlockAndSpringOnInclinedPlanewee_Intro_3.html');
  _view._addDescriptionPage('Block and Spring on an Incline Plane','./BlockAndSpringOnInclinedPlane/BlockAndSpringOnInclinedPlane.html');

  return _view;
} // end of main function

function BlockAndSpringOnInclinedPlanewee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"velocityLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocityLabel'
      .setProperty("Background","MAGENTA") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'velocityLabel'
      .setProperty("Tooltip","Velocity") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'velocityLabel'
      .setProperty("Text","v = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'velocityLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"velocitySlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocitySlider'
      .setProperty("Minimum",-5) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'velocitySlider'
      .setProperty("Maximum",5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'velocitySlider'
      .setProperty("Background","MAGENTA") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'velocitySlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"velocityField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocityField'
      .setProperty("Width","5%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'velocityField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'velocityField'
      .setProperty("Tooltip","Block velocity") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'velocityField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"velocityUnitLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocityUnitLabel'
      .setProperty("Background","MAGENTA") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'velocityUnitLabel'
      .setProperty("Text","m/s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'velocityUnitLabel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"muLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'muLabel'
      .setProperty("Background","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'muLabel'
      .setProperty("Text","μs = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'muLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"muSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'muSlider'
      .setProperty("Minimum",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'muSlider'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'muSlider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'muSlider'
      .setProperty("Background","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'muSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"muField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'muField'
      .setProperty("Width","5%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'muField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'muField'
      .setProperty("Tooltip","Static coefficient of friction.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'muField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"muKineticLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'muKineticLabel'
      .setProperty("Background","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'muKineticLabel'
      .setProperty("Text","μk = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'muKineticLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"muKineticSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'muKineticSlider'
      .setProperty("Minimum",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'muKineticSlider'
      .setProperty("Maximum",2) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'muKineticSlider'
      .setProperty("Background","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'muKineticSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"muKineticField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'muKineticField'
      .setProperty("Width","5%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'muKineticField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'muKineticField'
      .setProperty("Tooltip","Kinetic coefficient of friction.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'muKineticField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"thetaLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thetaLabel'
      .setProperty("Background","rgba(128,192,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'thetaLabel'
      .setProperty("Text","θ = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'thetaLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"thetaSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thetaSlider'
      .setProperty("Minimum",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'thetaSlider'
      .setProperty("Maximum",90) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'thetaSlider'
      .setProperty("Background","rgba(128,192,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'thetaSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"thetaField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thetaField'
      .setProperty("Width","5%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'thetaField'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'thetaField'
      .setProperty("Tooltip","Incline plane angle in degrees.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'thetaField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"springConstantLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'springConstantLabel'
      .setProperty("Background","RED") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'springConstantLabel'
      .setProperty("Text","k = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'springConstantLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"springConstantSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'springConstantSlider'
      .setProperty("Minimum",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'springConstantSlider'
      .setProperty("Maximum",1.0) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'springConstantSlider'
      .setProperty("Background","RED") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'springConstantSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"springConstantField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'springConstantField'
      .setProperty("Width","5%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'springConstantField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'springConstantField'
      .setProperty("Tooltip","Spring constant in N/m.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'springConstantField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"springConstantUnitLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'springConstantUnitLabel'
      .setProperty("Background","RED") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'springConstantUnitLabel'
      .setProperty("Text","N/m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'springConstantUnitLabel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"lengthLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lengthLabel'
      .setProperty("Background","BLACK") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'lengthLabel'
      .setProperty("Tooltip","Length") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'lengthLabel'
      .setProperty("Foreground","WHITE") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'lengthLabel'
      .setProperty("Text","L = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lengthLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"lengthSlider", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lengthSlider'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'lengthSlider'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'lengthSlider'
      .setProperty("Background","BLACK") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'lengthSlider'
      .setProperty("Foreground","WHITE") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'lengthSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"lengthField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lengthField'
      .setProperty("Width","5%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'lengthField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'lengthField'
      .setProperty("Tooltip","Length of incline plane in meters.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'lengthField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"lengthUnitLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lengthUnitLabel'
      .setProperty("Background","Black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'lengthUnitLabel'
      .setProperty("Foreground","WHITE") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'lengthUnitLabel'
      .setProperty("Text","m") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lengthUnitLabel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"bounceCheckBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bounceCheckBox'
      .setProperty("Tooltip","Bounce at ends of incline.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'bounceCheckBox'
      .setProperty("Text","bounce") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'bounceCheckBox'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"world", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'world'
      .setProperty("Background","Orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'world'
      .setProperty("Tooltip","world view") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'world'
      .setProperty("Text","world") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'world'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"vvst", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vvst'
      .setProperty("Background","MAGENTA") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vvst'
      .setProperty("Tooltip","Show velocity graph.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vvst'
      .setProperty("Text","v vs t") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vvst'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"xvst", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xvst'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'xvst'
      .setProperty("Tooltip","Show position graph.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'xvst'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'xvst'
      .setProperty("Text","x vs t") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'xvst'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"forceVsT", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'forceVsT'
      .setProperty("Background","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'forceVsT'
      .setProperty("Tooltip","Show total force graph.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'forceVsT'
      .setProperty("Text","force vs t") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'forceVsT'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("Tooltip","Starts and stops the simulation.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Steps the simulation.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Resets the simulation to its default state.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displayPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'displayPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ground", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ground'
      .setProperty("FillColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ground'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'ground'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ground'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ground'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ground'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"coordinates", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'coordinates'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'coordinates'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'coordinates'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"xArrow", _view.coordinates) // EJsS HtmlView.HtmlView Page: declaration of element 'xArrow'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'xArrow'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xArrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xArrow'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"yArrow", _view.coordinates) // EJsS HtmlView.HtmlView Page: declaration of element 'yArrow'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yArrow'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yArrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yArrow'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"x", _view.coordinates) // EJsS HtmlView.HtmlView Page: declaration of element 'x'
      .setProperty("Text","x") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'x'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'x'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"y", _view.coordinates) // EJsS HtmlView.HtmlView Page: declaration of element 'y'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'y'
      .setProperty("Text","y") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'y'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'y'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"inclineReferenceFrame", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'inclineReferenceFrame'
      .setProperty("X",0.0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'inclineReferenceFrame'
      .setProperty("Y",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'inclineReferenceFrame'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring", _view.inclineReferenceFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'spring'
      .setProperty("LineColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'spring'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'spring'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'spring'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"incline", _view.inclineReferenceFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'incline'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'incline'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'incline'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'incline'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'incline'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"bottomBumper", _view.inclineReferenceFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomBumper'
      .setProperty("FillColor","BLACK") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bottomBumper'
      .setProperty("MovesGroup",false) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'bottomBumper'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'bottomBumper'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'bottomBumper'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'bottomBumper'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"topBumper", _view.inclineReferenceFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'topBumper'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'topBumper'
      .setProperty("MovesGroup",false) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'topBumper'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'topBumper'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'topBumper'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'topBumper'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"block", _view.inclineReferenceFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'block'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'block'
      .setProperty("FillColor","rgba(128,192,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'block'
      .setProperty("MovesGroup",false) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'block'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'block'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'block'
      .setProperty("LineColor","BLACK") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'block'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'block'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"blockForces", _view.inclineReferenceFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'blockForces'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"gravity", _view.blockForces) // EJsS HtmlView.HtmlView Page: declaration of element 'gravity'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'gravity'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'gravity'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"friction", _view.blockForces) // EJsS HtmlView.HtmlView Page: declaration of element 'friction'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'friction'
      .setProperty("LineColor","YELLOW") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'friction'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'friction'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'friction'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"normal", _view.blockForces) // EJsS HtmlView.HtmlView Page: declaration of element 'normal'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'normal'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'normal'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"springForce", _view.blockForces) // EJsS HtmlView.HtmlView Page: declaration of element 'springForce'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'springForce'
      .setProperty("LineColor","RED") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'springForce'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'springForce'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'springForce'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"verticalSupport", _view.inclineReferenceFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'verticalSupport'
      .setProperty("ResizesGroup",false) // EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element 'verticalSupport'
      .setProperty("MovesGroup",false) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'verticalSupport'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'verticalSupport'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'verticalSupport'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'verticalSupport'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"vPlottingPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vPlottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'vPlottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'vPlottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'vPlottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'vPlottingPanel'
      .setProperty("XTickStep",0.1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'vPlottingPanel'
      .setProperty("TitleY","velocity (m/s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'vPlottingPanel'
      .setProperty("YTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'vPlottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'vPlottingPanel'
      .setProperty("TitleX","time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'vPlottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'vPlottingPanel'
      .setProperty("GuttersColor","MAGENTA") // EJsS HtmlView.HtmlView Page: setting property 'GuttersColor' for element 'vPlottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'vPlottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"vTrail", _view.vPlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vTrail'
      .setProperty("Maximum",200) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'vTrail'
      .setProperty("LineColor","MAGENTA") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vTrail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'vTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"xPlottingPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xPlottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'xPlottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'xPlottingPanel'
      .setProperty("GuttersLineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'GuttersLineColor' for element 'xPlottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'xPlottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'xPlottingPanel'
      .setProperty("XTickStep",0.1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'xPlottingPanel'
      .setProperty("TitleY","position (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'xPlottingPanel'
      .setProperty("YTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'xPlottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'xPlottingPanel'
      .setProperty("TitleX","time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'xPlottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'xPlottingPanel'
      .setProperty("GuttersColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'GuttersColor' for element 'xPlottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'xPlottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"xpositionTrail", _view.xPlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xpositionTrail'
      .setProperty("Maximum",200) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'xpositionTrail'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xpositionTrail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'xpositionTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xpositionTrail'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"forcePlottingPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'forcePlottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'forcePlottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'forcePlottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'forcePlottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'forcePlottingPanel'
      .setProperty("XTickStep",0.1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'forcePlottingPanel'
      .setProperty("TitleY","force (N)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'forcePlottingPanel'
      .setProperty("YTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'forcePlottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'forcePlottingPanel'
      .setProperty("TitleX","time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'forcePlottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'forcePlottingPanel'
      .setProperty("GuttersColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'GuttersColor' for element 'forcePlottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'forcePlottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"forceTrail", _view.forcePlottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'forceTrail'
      .setProperty("Maximum",200) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'forceTrail'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'forceTrail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'forceTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'forceTrail'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Block and Spring on an Inclined Plane<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/BlockAndSpringOnInclinedPlane/block_2013-12-20_1506320by180.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/BlockAndSpringOnInclinedPlane/01authorwc_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/BlockAndSpringOnInclinedPlane/1authorlookangphoto.png" />
 Wolfgang Christian, remixed by lookang (weelookang@gmail.com)  for simple harmonic motion; lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Wolfgang Christian, remixed by lookang (weelookang@gmail.com)  for simple harmonic motion; lookang.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new BlockAndSpringOnInclinedPlanewee("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
