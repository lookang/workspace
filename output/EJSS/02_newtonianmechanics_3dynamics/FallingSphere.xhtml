<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Falling Sphere</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3_180211/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3_180211/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3_180211/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function FallingSphere(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var dt; // EjsS Model.Variables.Model Variables.dt
  var dt2; // EjsS Model.Variables.Model Variables.dt2
  var vi; // EjsS Model.Variables.Model Variables.vi
  var yi; // EjsS Model.Variables.Model Variables.yi
  var ai; // EjsS Model.Variables.Model Variables.ai
  var m; // EjsS Model.Variables.Model Variables.m
  var g; // EjsS Model.Variables.Model Variables.g
  var rho; // EjsS Model.Variables.Model Variables.rho
  var D; // EjsS Model.Variables.Model Variables.D
  var radius; // EjsS Model.Variables.Model Variables.radius
  var A; // EjsS Model.Variables.Model Variables.A
  var tmax; // EjsS Model.Variables.Model Variables.tmax
  var a; // EjsS Model.Variables.Model Variables.a
  var v; // EjsS Model.Variables.Model Variables.v
  var y; // EjsS Model.Variables.Model Variables.y
  var t; // EjsS Model.Variables.Model Variables.t
  var t2; // EjsS Model.Variables.Model Variables.t2
  var x; // EjsS Model.Variables.Model Variables.x
  var graphActual; // EjsS Model.Variables.Model Variables.graphActual
  var vSelect; // EjsS Model.Variables.Model Variables.vSelect
  var ySelect; // EjsS Model.Variables.Model Variables.ySelect

  var yPos; // EjsS Model.Variables.World View.yPos
  var vPos; // EjsS Model.Variables.World View.vPos
  var yPos2; // EjsS Model.Variables.World View.yPos2
  var vPos2; // EjsS Model.Variables.World View.vPos2
  var memorycolory; // EjsS Model.Variables.World View.memorycolory

  var font; // EjsS Model.Variables.Font.font
  var spd; // EjsS Model.Variables.Font.spd

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];
  var _ODEi_evolution2;
  var userEvents2=[];

  _model.getOdes = function() { return [_ODEi_evolution1,_ODEi_evolution2]; };

  _model.removeEvents = function(){
    userEvents1=[];
    userEvents2=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      dt : dt,
      dt2 : dt2,
      vi : vi,
      yi : yi,
      ai : ai,
      m : m,
      g : g,
      rho : rho,
      D : D,
      radius : radius,
      A : A,
      tmax : tmax,
      a : a,
      v : v,
      y : y,
      t : t,
      t2 : t2,
      x : x,
      graphActual : graphActual,
      vSelect : vSelect,
      ySelect : ySelect,
      yPos : yPos,
      vPos : vPos,
      yPos2 : yPos2,
      vPos2 : vPos2,
      memorycolory : memorycolory,
      font : font,
      spd : spd
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      dt : dt,
      dt2 : dt2,
      vi : vi,
      yi : yi,
      ai : ai,
      m : m,
      g : g,
      rho : rho,
      D : D,
      radius : radius,
      A : A,
      tmax : tmax,
      a : a,
      v : v,
      y : y,
      t : t,
      t2 : t2,
      x : x,
      graphActual : graphActual,
      vSelect : vSelect,
      ySelect : ySelect,
      yPos : yPos,
      vPos : vPos,
      yPos2 : yPos2,
      vPos2 : vPos2,
      memorycolory : memorycolory,
      font : font,
      spd : spd
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.dt2 != "undefined") dt2 = json.dt2;
    if(typeof json.vi != "undefined") vi = json.vi;
    if(typeof json.yi != "undefined") yi = json.yi;
    if(typeof json.ai != "undefined") ai = json.ai;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.rho != "undefined") rho = json.rho;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.radius != "undefined") radius = json.radius;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.t2 != "undefined") t2 = json.t2;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.graphActual != "undefined") graphActual = json.graphActual;
    if(typeof json.vSelect != "undefined") vSelect = json.vSelect;
    if(typeof json.ySelect != "undefined") ySelect = json.ySelect;
    if(typeof json.yPos != "undefined") yPos = json.yPos;
    if(typeof json.vPos != "undefined") vPos = json.vPos;
    if(typeof json.yPos2 != "undefined") yPos2 = json.yPos2;
    if(typeof json.vPos2 != "undefined") vPos2 = json.vPos2;
    if(typeof json.memorycolory != "undefined") memorycolory = json.memorycolory;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.spd != "undefined") spd = json.spd;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.dt2 != "undefined") dt2 = json.dt2;
    if(typeof json.vi != "undefined") vi = json.vi;
    if(typeof json.yi != "undefined") yi = json.yi;
    if(typeof json.ai != "undefined") ai = json.ai;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.rho != "undefined") rho = json.rho;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.radius != "undefined") radius = json.radius;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.t2 != "undefined") t2 = json.t2;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.graphActual != "undefined") graphActual = json.graphActual;
    if(typeof json.vSelect != "undefined") vSelect = json.vSelect;
    if(typeof json.ySelect != "undefined") ySelect = json.ySelect;
    if(typeof json.yPos != "undefined") yPos = json.yPos;
    if(typeof json.vPos != "undefined") vPos = json.vPos;
    if(typeof json.yPos2 != "undefined") yPos2 = json.yPos2;
    if(typeof json.vPos2 != "undefined") vPos2 = json.vPos2;
    if(typeof json.memorycolory != "undefined") memorycolory = json.memorycolory;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.spd != "undefined") spd = json.spd;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["Evol Page 2"] = false;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["ODE"] = true;
  });

  _model.addToReset(function() {
    dt = 1; // EjsS Model.Variables.Model Variables.dt
    dt2 = 1e-4; // EjsS Model.Variables.Model Variables.dt2
    vi = 0; // EjsS Model.Variables.Model Variables.vi
    yi = 0; // EjsS Model.Variables.Model Variables.yi
    ai = 9.8; // EjsS Model.Variables.Model Variables.ai
    m = 7.26; // EjsS Model.Variables.Model Variables.m
    g = 9.8; // EjsS Model.Variables.Model Variables.g
    rho = 1.29; // EjsS Model.Variables.Model Variables.rho
    D = 0.5; // EjsS Model.Variables.Model Variables.D
    radius = 0.1085; // EjsS Model.Variables.Model Variables.radius
    A = 3.14*radius*radius; // EjsS Model.Variables.Model Variables.A
    tmax = 10; // EjsS Model.Variables.Model Variables.tmax
    a = new Array((tmax/dt)+1); // EjsS Model.Variables.Model Variables.a
    (function () {
      var _i0;
      for (_i0=0; _i0<(tmax/dt)+1; _i0+=1) {  // EjsS Model.Variables.Model Variables.a
        a[_i0] = 0;  // EjsS Model.Variables.Model Variables.a
      }
    }());
    v = new Array((tmax/dt)+1); // EjsS Model.Variables.Model Variables.v
    (function () {
      var _i0;
      for (_i0=0; _i0<(tmax/dt)+1; _i0+=1) {  // EjsS Model.Variables.Model Variables.v
        v[_i0] = 0;  // EjsS Model.Variables.Model Variables.v
      }
    }());
    y = new Array((tmax/dt)+1); // EjsS Model.Variables.Model Variables.y
    (function () {
      var _i0;
      for (_i0=0; _i0<(tmax/dt)+1; _i0+=1) {  // EjsS Model.Variables.Model Variables.y
        y[_i0] = 0;  // EjsS Model.Variables.Model Variables.y
      }
    }());
    t = 0; // EjsS Model.Variables.Model Variables.t
    t2 = 0; // EjsS Model.Variables.Model Variables.t2
    x = new Array((tmax/dt)+1); // EjsS Model.Variables.Model Variables.x
    (function () {
      var _i0;
      for (_i0=0; _i0<(tmax/dt)+1; _i0+=1) {  // EjsS Model.Variables.Model Variables.x
        x[_i0] = 0;  // EjsS Model.Variables.Model Variables.x
      }
    }());
    graphActual = ""; // EjsS Model.Variables.Model Variables.graphActual
    vSelect = false; // EjsS Model.Variables.Model Variables.vSelect
    ySelect = true; // EjsS Model.Variables.Model Variables.ySelect
  });

  _model.addToReset(function() {
    yPos = 0; // EjsS Model.Variables.World View.yPos
    vPos = 0; // EjsS Model.Variables.World View.vPos
    yPos2 = 0; // EjsS Model.Variables.World View.yPos2
    vPos2 = 0; // EjsS Model.Variables.World View.vPos2
    memorycolory = 0; // EjsS Model.Variables.World View.memorycolory
  });

  _model.addToReset(function() {
    font = "normal normal 1.5vw"; // EjsS Model.Variables.Font.font
    spd = 1; // EjsS Model.Variables.Font.spd
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
    _ODEi_evolution2 = _ODE_evolution2();
    _privateOdesList.push(_ODEi_evolution2);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(spd);
  });

  function plotter () {  // > CustomCode.Plot Function:1
    y[0] = yi;  // > CustomCode.Plot Function:2
    v[0] = vi;  // > CustomCode.Plot Function:3
    a[0] = ai;  // > CustomCode.Plot Function:4
    x[0] = 0;  // > CustomCode.Plot Function:5
    for (var i=1; i<tmax/dt+1; i++) {  // > CustomCode.Plot Function:6
      x[i] = i;  // > CustomCode.Plot Function:7
      v[i] = v[i-1] + a[i-1]*dt;  // > CustomCode.Plot Function:8
      y[i] = y[i-1] + v[i-1]*dt;  // > CustomCode.Plot Function:9
      a[i] = g - rho*D*A*v[i]*v[i]/(2*m);  // > CustomCode.Plot Function:10
    }  // > CustomCode.Plot Function:11
      // > CustomCode.Plot Function:12
  }  // > CustomCode.Plot Function:13

  function storedata () {  // > CustomCode.storedata:1
    _view.trail.newSegment();  // > CustomCode.storedata:2
  memorycolory=memorycolory+1;  // > CustomCode.storedata:3
  t=0;  // > CustomCode.storedata:4
  yPos=0;  // > CustomCode.storedata:5
  vPos=0;  // > CustomCode.storedata:6
  //_initialize();  // > CustomCode.storedata:7
  }  // > CustomCode.storedata:8

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    v[0] = vi;  // > Initialization.Init Page:1
    y[0] = yi;  // > Initialization.Init Page:2
    plotter();  // > Initialization.Init Page:3
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page 2"]) return;
    _ODEi_evolution2.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    if (vSelect==true) {  // > FixedRelations.FixRel Page:1
      graphActual = vi+" + "+(g - (D*rho*A*vi*vi/(2*m)))+"*t";  // > FixedRelations.FixRel Page:2
    } else if (ySelect==true) {  // > FixedRelations.FixRel Page:3
      graphActual = vi+"*t + 0.5*"+(g - D*rho*A*vi*vi)+"*t*t";  // > FixedRelations.FixRel Page:4
    }  // > FixedRelations.FixRel Page:5
    if (yPos<-490) {  // > FixedRelations.FixRel Page:6
      yPos = -490;  // > FixedRelations.FixRel Page:7
    }  // > FixedRelations.FixRel Page:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["ODE"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    if (_odeName=="Evol Page 2") return _ODEi_evolution2;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["yPos","vPos","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=yPos) __mustReinitialize = true;
        __state[__cIn++] = yPos;
        if (__state[__cIn]!=vPos) __mustReinitialize = true;
        __state[__cIn++] = vPos;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        yPos = __state[__cOut++];
        vPos = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var yPos = _aState[__cOut++];
        var vPos = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vPos; // Rate for ODE: Evol Page:yPos
        _aRate[__cRate++] = -g-Math.sign(vPos)*D*rho*A/2*vPos*vPos/m; // Rate for ODE: Evol Page:vPos
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var yPos = _aState[__cOut++];
        var vPos = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        yPos = __state[__cOut++];
        vPos = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = yPos;
        __state[__cIn++] = vPos;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var yPos = _aState[__cOut++];
        var vPos = _aState[__cOut++];
        var t = _aState[__cOut++];
        return yPos - (-490);  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        yPos = __state[__cOut++];
        vPos = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = yPos;
        __state[__cIn++] = vPos;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_yPos(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vPos(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _ODE_evolution2() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution2_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["yPos2","vPos2","t2"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt2);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution2_Event1());
      for(k in userEvents2){__eventSolver.addEvent(userEvents2[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=yPos2) __mustReinitialize = true;
        __state[__cIn++] = yPos2;
        if (__state[__cIn]!=vPos2) __mustReinitialize = true;
        __state[__cIn++] = vPos2;
        if (__state[__cIn]!=t2) __mustReinitialize = true;
        __state[__cIn++] = t2;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt2===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt2);
      __eventSolver.setInternalStepSize(dt2);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        yPos2 = __state[__cOut++];
        vPos2 = __state[__cOut++];
        t2 = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var yPos2 = _aState[__cOut++];
        var vPos2 = _aState[__cOut++];
        var t2 = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vPos2; // Rate for ODE: Evol Page 2:yPos2
        _aRate[__cRate++] = -g-Math.sign(vPos2)*D*rho*A/2*vPos2*vPos2/m; // Rate for ODE: Evol Page 2:vPos2
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var yPos2 = _aState[__cOut++];
        var vPos2 = _aState[__cOut++];
        var t2 = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        yPos2 = __state[__cOut++];
        vPos2 = __state[__cOut++];
        t2 = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = yPos2;
        __state[__cIn++] = vPos2;
        __state[__cIn++] = t2;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents2.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution2_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var yPos2 = _aState[__cOut++];
        var vPos2 = _aState[__cOut++];
        var t2 = _aState[__cOut++];
        return yPos - (-490);  // > Event zero-condition for page Evol Page 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        yPos2 = __state[__cOut++];
        vPos2 = __state[__cOut++];
        t2 = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = yPos2;
        __state[__cIn++] = vPos2;
        __state[__cIn++] = t2;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page 2:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_yPos2(__time) {
    var __index = 0;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vPos2(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "Simulation View", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new FallingSphere_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.controlPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'controlPanel'
          _view.dt2.linkProperty("Value",  function() { return dt; }, function(_v) { dt = _v; } ); // Simulation View linking property 'Value' for element 'dt2'
          _view.dt2.setAction("OnChange", function(_data,_info) {
  storedata ();
  if (dt<0) dt = 1e-2;//prevent negative
  if (dt>1) spd=1;
  else if (dt>=0.1) spd=100;
  else if (dt>=0.01) spd=1000;
  else if (dt>=0.001) spd=10000;
  else if (dt>=0.0001) spd=100000;
  else if (dt<0.0001)spd=1000000;

}); // Simulation View setting action 'OnChange' for element 'dt2'
          _view.dt2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'dt2'
          _view.playPauseButton.setAction("OffClick", _pause); // Simulation View setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // Simulation View linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // Simulation View setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'playPauseButton'
          _view.initialize.setAction("OnClick", function(_data,_info) {
  storedata();

}); // Simulation View setting action 'OnClick' for element 'initialize'
          _view.resetButton.setAction("OnClick", _reset); // Simulation View setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'resetButton'
          _view.velocityShow.setAction("OnCheckOff", function(_data,_info) {
  vSelect = false;
  ySelect = true;

}); // Simulation View setting action 'OnCheckOff' for element 'velocityShow'
          _view.velocityShow.setAction("OnCheckOn", function(_data,_info) {
  vSelect = true;
  ySelect = false;

}); // Simulation View setting action 'OnCheckOn' for element 'velocityShow'
          _view.velocityShow.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'velocityShow'
          _view.positionShow.setAction("OnCheckOff", function(_data,_info) {
  vSelect = true;
  ySelect = false;

}); // Simulation View setting action 'OnCheckOff' for element 'positionShow'
          _view.positionShow.setAction("OnCheckOn", function(_data,_info) {
  vSelect = false;
  ySelect = true;

}); // Simulation View setting action 'OnCheckOn' for element 'positionShow'
          _view.positionShow.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'positionShow'
          _view.worldView.linkProperty("TLMessage",  function() { return "spd="+spd; } ); // Simulation View linking property 'TLMessage' for element 'worldView'
          _view.worldView.linkProperty("BRMessage",  function() { return "t="+t+" s"; } ); // Simulation View linking property 'BRMessage' for element 'worldView'
          _view.shape.linkProperty("Y",  function() { return yPos; }, function(_v) { yPos = _v; } ); // Simulation View linking property 'Y' for element 'shape'
          _view.graphPanel.linkProperty("TRMessage",  function() { return (vSelect==true)?"Velocity-time graph":"Position-time graph"; } ); // Simulation View linking property 'TRMessage' for element 'graphPanel'
          _view.graphPanel.linkProperty("BLMessage",  function() { return "yi="+yi; } ); // Simulation View linking property 'BLMessage' for element 'graphPanel'
          _view.graphPanel.linkProperty("BRMessage",  function() { return "yPos="+yPos; } ); // Simulation View linking property 'BRMessage' for element 'graphPanel'
          _view.trace.linkProperty("Maximum",  function() { return tmax/dt+1; } ); // Simulation View linking property 'Maximum' for element 'trace'
          _view.trace.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // Simulation View linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return (vSelect==true)?v:y; } ); // Simulation View linking property 'InputY' for element 'trace'
          _view.graphActual.linkProperty("FunctionY",  function() { return graphActual; }, function(_v) { graphActual = _v; } ); // Simulation View linking property 'FunctionY' for element 'graphActual'
          _view.trail.linkProperty("Active",  function() { return t>0; } ); // Simulation View linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return t>0; } ); // Simulation View linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("LineColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // Simulation View linking property 'LineColor' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return -yPos; } ); // Simulation View linking property 'InputY' for element 'trail'
          _view.actual.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // Simulation View linking property 'X' for element 'actual'
          _view.actual.linkProperty("Y",  function() { return vSelect?-vPos:-yPos; } ); // Simulation View linking property 'Y' for element 'actual'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(spd);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function FallingSphere_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = FallingSphere_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function FallingSphere_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"dt", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'dt'
      .setProperty("Text","dt=") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'dt'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"dt2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'dt2'
      .setProperty("Format","0.00E0") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'dt2'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.Simulation View: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.Simulation View: setting property 'TextOff' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause the simulation") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initialize", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'initialize'
      .setProperty("Tooltip","Store Data") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'initialize'
      .setProperty("Text","▼") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'initialize'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset the simulation") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"velocityShow", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'velocityShow'
      .setProperty("Checked",false) // EJsS HtmlView.Simulation View: setting property 'Checked' for element 'velocityShow'
      .setProperty("Text","Show Velocity-Time Graph") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'velocityShow'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"positionShow", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'positionShow'
      .setProperty("Checked",true) // EJsS HtmlView.Simulation View: setting property 'Checked' for element 'positionShow'
      .setProperty("Text","Show Position-Time Graph") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'positionShow'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"worldView", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'worldView'
      .setProperty("Height","90vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'worldView'
      .setProperty("Width","45vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'worldView'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'worldView'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.Simulation View: setting property 'YScalePrecision' for element 'worldView'
      .setProperty("XFixedTick",0) // EJsS HtmlView.Simulation View: setting property 'XFixedTick' for element 'worldView'
      .setProperty("SquareAspect",true) // EJsS HtmlView.Simulation View: setting property 'SquareAspect' for element 'worldView'
      .setProperty("MaximumY",0) // EJsS HtmlView.Simulation View: setting property 'MaximumY' for element 'worldView'
      .setProperty("YFixedTick",0) // EJsS HtmlView.Simulation View: setting property 'YFixedTick' for element 'worldView'
      .setProperty("TRMessage","World View") // EJsS HtmlView.Simulation View: setting property 'TRMessage' for element 'worldView'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.Simulation View: setting property 'YAutoTicks' for element 'worldView'
      .setProperty("MinimumY",-490) // EJsS HtmlView.Simulation View: setting property 'MinimumY' for element 'worldView'
      .setProperty("XTickStep",100) // EJsS HtmlView.Simulation View: setting property 'XTickStep' for element 'worldView'
      .setProperty("TitleY","Velocity (m/s)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'worldView'
      .setProperty("YTickStep",100) // EJsS HtmlView.Simulation View: setting property 'YTickStep' for element 'worldView'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'worldView'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'worldView'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'worldView'
      .setProperty("MarginY",10) // EJsS HtmlView.Simulation View: setting property 'MarginY' for element 'worldView'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.Simulation View: setting property 'XAutoTicks' for element 'worldView'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.Simulation View: setting property 'XScalePrecision' for element 'worldView'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.worldView) // EJsS HtmlView.Simulation View: declaration of element 'shape'
      .setProperty("FillColor","blue") // EJsS HtmlView.Simulation View: setting property 'FillColor' for element 'shape'
      .setProperty("SizeX",20) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'shape'
      .setProperty("X",0) // EJsS HtmlView.Simulation View: setting property 'X' for element 'shape'
      .setProperty("SizeY",20) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"graphPanel", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'graphPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'graphPanel'
      .setProperty("Width","45vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'graphPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'graphPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.Simulation View: setting property 'YScalePrecision' for element 'graphPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.Simulation View: setting property 'XFixedTick' for element 'graphPanel'
      .setProperty("MaximumX",10) // EJsS HtmlView.Simulation View: setting property 'MaximumX' for element 'graphPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.Simulation View: setting property 'YFixedTick' for element 'graphPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.Simulation View: setting property 'YAutoTicks' for element 'graphPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.Simulation View: setting property 'MinimumX' for element 'graphPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.Simulation View: setting property 'XTickStep' for element 'graphPanel'
      .setProperty("TitleY","Position (m)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'graphPanel'
      .setProperty("YTickStep",100) // EJsS HtmlView.Simulation View: setting property 'YTickStep' for element 'graphPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'graphPanel'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'graphPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'graphPanel'
      .setProperty("MarginX",10) // EJsS HtmlView.Simulation View: setting property 'MarginX' for element 'graphPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.Simulation View: setting property 'MarginY' for element 'graphPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.Simulation View: setting property 'XAutoTicks' for element 'graphPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.Simulation View: setting property 'XScalePrecision' for element 'graphPanel'
      .setProperty("TLMessage","Blue: Approximation, Black: Actual") // EJsS HtmlView.Simulation View: setting property 'TLMessage' for element 'graphPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.graphPanel) // EJsS HtmlView.Simulation View: declaration of element 'trace'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'trace'
      .setProperty("LineColor","blue") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'trace'
      .setProperty("Visibility",false) // EJsS HtmlView.Simulation View: setting property 'Visibility' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'trace'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'trace'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.Simulation View: setting property 'MarkType' for element 'trace'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"graphActual", _view.graphPanel) // EJsS HtmlView.Simulation View: declaration of element 'graphActual'
      .setProperty("FunctionX","t") // EJsS HtmlView.Simulation View: setting property 'FunctionX' for element 'graphActual'
      .setProperty("Minimum",0) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'graphActual'
      .setProperty("Maximum",10) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'graphActual'
      .setProperty("Variable","t") // EJsS HtmlView.Simulation View: setting property 'Variable' for element 'graphActual'
      .setProperty("LineColor","Black") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'graphActual'
      .setProperty("Visibility",false) // EJsS HtmlView.Simulation View: setting property 'Visibility' for element 'graphActual'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'graphActual'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.graphPanel) // EJsS HtmlView.Simulation View: declaration of element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"actual", _view.graphPanel) // EJsS HtmlView.Simulation View: declaration of element 'actual'
      .setProperty("SizeX",20) // EJsS HtmlView.Simulation View: setting property 'SizeX' for element 'actual'
      .setProperty("SizeY",20) // EJsS HtmlView.Simulation View: setting property 'SizeY' for element 'actual'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'actual'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Falling Sphere<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/FallingSphere/FallingSphereWCthumb.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/01authorlookang50x50.png" />
 Tan Wei Chiong; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Tan Wei Chiong; Loo Kang Wee.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3_180211/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new FallingSphere("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3_180211/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_3dynamics/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
