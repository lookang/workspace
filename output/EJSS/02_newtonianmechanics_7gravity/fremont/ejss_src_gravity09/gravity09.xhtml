<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Solar System Model</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function gravity09(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var mode; // EjsS Model.Variables.Var Table.mode
  var iOS; // EjsS Model.Variables.Var Table.iOS
  var iPad; // EjsS Model.Variables.Var Table.iPad
  var iPhone; // EjsS Model.Variables.Var Table.iPhone
  var range; // EjsS Model.Variables.Var Table.range
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var zmin; // EjsS Model.Variables.Var Table.zmin
  var zmax; // EjsS Model.Variables.Var Table.zmax
  var t; // EjsS Model.Variables.Var Table.t
  var stepperdisplay; // EjsS Model.Variables.Var Table.stepperdisplay
  var t0; // EjsS Model.Variables.Var Table.t0
  var dt; // EjsS Model.Variables.Var Table.dt
  var size; // EjsS Model.Variables.Var Table.size
  var size2; // EjsS Model.Variables.Var Table.size2
  var stroke; // EjsS Model.Variables.Var Table.stroke
  var pi; // EjsS Model.Variables.Var Table.pi
  var blue; // EjsS Model.Variables.Var Table.blue
  var green; // EjsS Model.Variables.Var Table.green
  var green2; // EjsS Model.Variables.Var Table.green2
  var yellow; // EjsS Model.Variables.Var Table.yellow
  var clr; // EjsS Model.Variables.Var Table.clr
  var clr2; // EjsS Model.Variables.Var Table.clr2
  var clabel; // EjsS Model.Variables.Var Table.clabel
  var npt; // EjsS Model.Variables.Var Table.npt

  var rE; // EjsS Model.Variables.Earth.rE
  var phiE; // EjsS Model.Variables.Earth.phiE
  var aE; // EjsS Model.Variables.Earth.aE
  var eE; // EjsS Model.Variables.Earth.eE
  var xE; // EjsS Model.Variables.Earth.xE
  var yE; // EjsS Model.Variables.Earth.yE
  var lonPE; // EjsS Model.Variables.Earth.lonPE
  var lonPEdeg; // EjsS Model.Variables.Earth.lonPEdeg
  var lonS; // EjsS Model.Variables.Earth.lonS
  var scale; // EjsS Model.Variables.Earth.scale
  var scalecamera; // EjsS Model.Variables.Earth.scalecamera
  var decorationtypeaxes; // EjsS Model.Variables.Earth.decorationtypeaxes
  var zoom; // EjsS Model.Variables.Earth.zoom

  var names; // EjsS Model.Variables.planets.names
  var radius; // EjsS Model.Variables.planets.radius
  var r; // EjsS Model.Variables.planets.r
  var phi; // EjsS Model.Variables.planets.phi
  var a; // EjsS Model.Variables.planets.a
  var e; // EjsS Model.Variables.planets.e
  var x; // EjsS Model.Variables.planets.x
  var y; // EjsS Model.Variables.planets.y
  var incl; // EjsS Model.Variables.planets.incl
  var lat; // EjsS Model.Variables.planets.lat
  var lon; // EjsS Model.Variables.planets.lon
  var dist; // EjsS Model.Variables.planets.dist
  var inclDeg; // EjsS Model.Variables.planets.inclDeg
  var lonAN; // EjsS Model.Variables.planets.lonAN
  var lonANdeg; // EjsS Model.Variables.planets.lonANdeg
  var arg; // EjsS Model.Variables.planets.arg
  var argDeg; // EjsS Model.Variables.planets.argDeg
  var pColor; // EjsS Model.Variables.planets.pColor
  var xP; // EjsS Model.Variables.planets.xP
  var yP; // EjsS Model.Variables.planets.yP
  var zP; // EjsS Model.Variables.planets.zP
  var xlos; // EjsS Model.Variables.planets.xlos
  var ylos; // EjsS Model.Variables.planets.ylos
  var zlos; // EjsS Model.Variables.planets.zlos
  var T; // EjsS Model.Variables.planets.T
  var TMars; // EjsS Model.Variables.planets.TMars
  var TVenus; // EjsS Model.Variables.planets.TVenus
  var TEarth; // EjsS Model.Variables.planets.TEarth

  var textureurl; // EjsS Model.Variables.MercuryGeneralarray.textureurl
  var n; // EjsS Model.Variables.MercuryGeneralarray.n
  var aMercury; // EjsS Model.Variables.MercuryGeneralarray.aMercury
  var eMercury; // EjsS Model.Variables.MercuryGeneralarray.eMercury
  var inclDegMercury; // EjsS Model.Variables.MercuryGeneralarray.inclDegMercury
  var lonANdegMercury; // EjsS Model.Variables.MercuryGeneralarray.lonANdegMercury
  var argDegMercury; // EjsS Model.Variables.MercuryGeneralarray.argDegMercury
  var inclMercury; // EjsS Model.Variables.MercuryGeneralarray.inclMercury
  var lonANMercury; // EjsS Model.Variables.MercuryGeneralarray.lonANMercury
  var argMercury; // EjsS Model.Variables.MercuryGeneralarray.argMercury
  var phiMercury; // EjsS Model.Variables.MercuryGeneralarray.phiMercury
  var rMercury; // EjsS Model.Variables.MercuryGeneralarray.rMercury
  var xMercury; // EjsS Model.Variables.MercuryGeneralarray.xMercury
  var yMercury; // EjsS Model.Variables.MercuryGeneralarray.yMercury
  var xPMercury; // EjsS Model.Variables.MercuryGeneralarray.xPMercury
  var yPMercury; // EjsS Model.Variables.MercuryGeneralarray.yPMercury
  var zPMercury; // EjsS Model.Variables.MercuryGeneralarray.zPMercury
  var zPMercurytext; // EjsS Model.Variables.MercuryGeneralarray.zPMercurytext
  var lonEMercury; // EjsS Model.Variables.MercuryGeneralarray.lonEMercury
  var lonMercuryEdeg; // EjsS Model.Variables.MercuryGeneralarray.lonMercuryEdeg
  var latEMercury; // EjsS Model.Variables.MercuryGeneralarray.latEMercury
  var xlosMercury; // EjsS Model.Variables.MercuryGeneralarray.xlosMercury
  var ylosMercury; // EjsS Model.Variables.MercuryGeneralarray.ylosMercury
  var zlosMercury; // EjsS Model.Variables.MercuryGeneralarray.zlosMercury

  var nst; // EjsS Model.Variables.Stars.nst
  var xstar; // EjsS Model.Variables.Stars.xstar
  var ystar; // EjsS Model.Variables.Stars.ystar
  var zstar; // EjsS Model.Variables.Stars.zstar
  var magstar; // EjsS Model.Variables.Stars.magstar
  var nES; // EjsS Model.Variables.Stars.nES
  var lonES; // EjsS Model.Variables.Stars.lonES
  var latES; // EjsS Model.Variables.Stars.latES
  var magES; // EjsS Model.Variables.Stars.magES
  var xst; // EjsS Model.Variables.Stars.xst
  var yst; // EjsS Model.Variables.Stars.yst
  var zst; // EjsS Model.Variables.Stars.zst
  var magst; // EjsS Model.Variables.Stars.magst

  var traceEV; // EjsS Model.Variables.Control.traceEV
  var showEcl; // EjsS Model.Variables.Control.showEcl
  var eTrace; // EjsS Model.Variables.Control.eTrace
  var pTrace; // EjsS Model.Variables.Control.pTrace
  var lineES; // EjsS Model.Variables.Control.lineES
  var lineEP; // EjsS Model.Variables.Control.lineEP
  var linePS; // EjsS Model.Variables.Control.linePS
  var los; // EjsS Model.Variables.Control.los
  var userDef; // EjsS Model.Variables.Control.userDef
  var traceon; // EjsS Model.Variables.Control.traceon
  var eGrid; // EjsS Model.Variables.Control.eGrid
  var globeStars; // EjsS Model.Variables.Control.globeStars
  var evStars; // EjsS Model.Variables.Control.evStars
  var poPlane; // EjsS Model.Variables.Control.poPlane
  var vearrow; // EjsS Model.Variables.Control.vearrow
  var sunFront; // EjsS Model.Variables.Control.sunFront
  var useTrans; // EjsS Model.Variables.Control.useTrans
  var mars; // EjsS Model.Variables.Control.mars
  var notmars; // EjsS Model.Variables.Control.notmars
  var text; // EjsS Model.Variables.Control.text
  var text3D; // EjsS Model.Variables.Control.text3D

  var PlutoB; // EjsS Model.Variables.PlanetB.PlutoB
  var NeptuneB; // EjsS Model.Variables.PlanetB.NeptuneB
  var memory; // EjsS Model.Variables.PlanetB.memory
  var cmode; // EjsS Model.Variables.PlanetB.cmode
  var cmode1; // EjsS Model.Variables.PlanetB.cmode1
  var cmodeenabled; // EjsS Model.Variables.PlanetB.cmodeenabled
  var eclipticview; // EjsS Model.Variables.PlanetB.eclipticview

  var magRow; // EjsS Model.Variables.recorddata.magRow
  var Tm; // EjsS Model.Variables.recorddata.Tm
  var Rm; // EjsS Model.Variables.recorddata.Rm
  var Rave; // EjsS Model.Variables.recorddata.Rave
  var magRowa; // EjsS Model.Variables.recorddata.magRowa
  var magRowta; // EjsS Model.Variables.recorddata.magRowta
  var magRowra; // EjsS Model.Variables.recorddata.magRowra
  var collectData; // EjsS Model.Variables.recorddata.collectData
  var datai; // EjsS Model.Variables.recorddata.datai
  var countdatai; // EjsS Model.Variables.recorddata.countdatai
  var countdataitext; // EjsS Model.Variables.recorddata.countdataitext

  var xP1; // EjsS Model.Variables.drawpaths.xP1
  var yP1; // EjsS Model.Variables.drawpaths.yP1
  var zP1; // EjsS Model.Variables.drawpaths.zP1
  var xP2; // EjsS Model.Variables.drawpaths.xP2
  var yP2; // EjsS Model.Variables.drawpaths.yP2
  var zP2; // EjsS Model.Variables.drawpaths.zP2
  var radius10; // EjsS Model.Variables.drawpaths.radius10

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      print : print,
      fontb : fontb,
      font : font,
      mode : mode,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      zmin : zmin,
      zmax : zmax,
      t : t,
      stepperdisplay : stepperdisplay,
      t0 : t0,
      dt : dt,
      size : size,
      size2 : size2,
      stroke : stroke,
      pi : pi,
      blue : blue,
      green : green,
      green2 : green2,
      yellow : yellow,
      clr : clr,
      clr2 : clr2,
      clabel : clabel,
      npt : npt,
      rE : rE,
      phiE : phiE,
      aE : aE,
      eE : eE,
      xE : xE,
      yE : yE,
      lonPE : lonPE,
      lonPEdeg : lonPEdeg,
      lonS : lonS,
      scale : scale,
      scalecamera : scalecamera,
      decorationtypeaxes : decorationtypeaxes,
      zoom : zoom,
      names : names,
      radius : radius,
      r : r,
      phi : phi,
      a : a,
      e : e,
      x : x,
      y : y,
      incl : incl,
      lat : lat,
      lon : lon,
      dist : dist,
      inclDeg : inclDeg,
      lonAN : lonAN,
      lonANdeg : lonANdeg,
      arg : arg,
      argDeg : argDeg,
      pColor : pColor,
      xP : xP,
      yP : yP,
      zP : zP,
      xlos : xlos,
      ylos : ylos,
      zlos : zlos,
      T : T,
      TMars : TMars,
      TVenus : TVenus,
      TEarth : TEarth,
      textureurl : textureurl,
      n : n,
      aMercury : aMercury,
      eMercury : eMercury,
      inclDegMercury : inclDegMercury,
      lonANdegMercury : lonANdegMercury,
      argDegMercury : argDegMercury,
      inclMercury : inclMercury,
      lonANMercury : lonANMercury,
      argMercury : argMercury,
      phiMercury : phiMercury,
      rMercury : rMercury,
      xMercury : xMercury,
      yMercury : yMercury,
      xPMercury : xPMercury,
      yPMercury : yPMercury,
      zPMercury : zPMercury,
      zPMercurytext : zPMercurytext,
      lonEMercury : lonEMercury,
      lonMercuryEdeg : lonMercuryEdeg,
      latEMercury : latEMercury,
      xlosMercury : xlosMercury,
      ylosMercury : ylosMercury,
      zlosMercury : zlosMercury,
      nst : nst,
      xstar : xstar,
      ystar : ystar,
      zstar : zstar,
      magstar : magstar,
      nES : nES,
      lonES : lonES,
      latES : latES,
      magES : magES,
      xst : xst,
      yst : yst,
      zst : zst,
      magst : magst,
      traceEV : traceEV,
      showEcl : showEcl,
      eTrace : eTrace,
      pTrace : pTrace,
      lineES : lineES,
      lineEP : lineEP,
      linePS : linePS,
      los : los,
      userDef : userDef,
      traceon : traceon,
      eGrid : eGrid,
      globeStars : globeStars,
      evStars : evStars,
      poPlane : poPlane,
      vearrow : vearrow,
      sunFront : sunFront,
      useTrans : useTrans,
      mars : mars,
      notmars : notmars,
      text : text,
      text3D : text3D,
      PlutoB : PlutoB,
      NeptuneB : NeptuneB,
      memory : memory,
      cmode : cmode,
      cmode1 : cmode1,
      cmodeenabled : cmodeenabled,
      eclipticview : eclipticview,
      magRow : magRow,
      Tm : Tm,
      Rm : Rm,
      Rave : Rave,
      magRowa : magRowa,
      magRowta : magRowta,
      magRowra : magRowra,
      collectData : collectData,
      datai : datai,
      countdatai : countdatai,
      countdataitext : countdataitext,
      xP1 : xP1,
      yP1 : yP1,
      zP1 : zP1,
      xP2 : xP2,
      yP2 : yP2,
      zP2 : zP2,
      radius10 : radius10
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.mode != "undefined") mode = json.mode;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.zmin != "undefined") zmin = json.zmin;
    if(typeof json.zmax != "undefined") zmax = json.zmax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.stepperdisplay != "undefined") stepperdisplay = json.stepperdisplay;
    if(typeof json.t0 != "undefined") t0 = json.t0;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.size2 != "undefined") size2 = json.size2;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.green2 != "undefined") green2 = json.green2;
    if(typeof json.yellow != "undefined") yellow = json.yellow;
    if(typeof json.clr != "undefined") clr = json.clr;
    if(typeof json.clr2 != "undefined") clr2 = json.clr2;
    if(typeof json.clabel != "undefined") clabel = json.clabel;
    if(typeof json.npt != "undefined") npt = json.npt;
    if(typeof json.rE != "undefined") rE = json.rE;
    if(typeof json.phiE != "undefined") phiE = json.phiE;
    if(typeof json.aE != "undefined") aE = json.aE;
    if(typeof json.eE != "undefined") eE = json.eE;
    if(typeof json.xE != "undefined") xE = json.xE;
    if(typeof json.yE != "undefined") yE = json.yE;
    if(typeof json.lonPE != "undefined") lonPE = json.lonPE;
    if(typeof json.lonPEdeg != "undefined") lonPEdeg = json.lonPEdeg;
    if(typeof json.lonS != "undefined") lonS = json.lonS;
    if(typeof json.scale != "undefined") scale = json.scale;
    if(typeof json.scalecamera != "undefined") scalecamera = json.scalecamera;
    if(typeof json.decorationtypeaxes != "undefined") decorationtypeaxes = json.decorationtypeaxes;
    if(typeof json.zoom != "undefined") zoom = json.zoom;
    if(typeof json.names != "undefined") names = json.names;
    if(typeof json.radius != "undefined") radius = json.radius;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.phi != "undefined") phi = json.phi;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.e != "undefined") e = json.e;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.incl != "undefined") incl = json.incl;
    if(typeof json.lat != "undefined") lat = json.lat;
    if(typeof json.lon != "undefined") lon = json.lon;
    if(typeof json.dist != "undefined") dist = json.dist;
    if(typeof json.inclDeg != "undefined") inclDeg = json.inclDeg;
    if(typeof json.lonAN != "undefined") lonAN = json.lonAN;
    if(typeof json.lonANdeg != "undefined") lonANdeg = json.lonANdeg;
    if(typeof json.arg != "undefined") arg = json.arg;
    if(typeof json.argDeg != "undefined") argDeg = json.argDeg;
    if(typeof json.pColor != "undefined") pColor = json.pColor;
    if(typeof json.xP != "undefined") xP = json.xP;
    if(typeof json.yP != "undefined") yP = json.yP;
    if(typeof json.zP != "undefined") zP = json.zP;
    if(typeof json.xlos != "undefined") xlos = json.xlos;
    if(typeof json.ylos != "undefined") ylos = json.ylos;
    if(typeof json.zlos != "undefined") zlos = json.zlos;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.TMars != "undefined") TMars = json.TMars;
    if(typeof json.TVenus != "undefined") TVenus = json.TVenus;
    if(typeof json.TEarth != "undefined") TEarth = json.TEarth;
    if(typeof json.textureurl != "undefined") textureurl = json.textureurl;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.aMercury != "undefined") aMercury = json.aMercury;
    if(typeof json.eMercury != "undefined") eMercury = json.eMercury;
    if(typeof json.inclDegMercury != "undefined") inclDegMercury = json.inclDegMercury;
    if(typeof json.lonANdegMercury != "undefined") lonANdegMercury = json.lonANdegMercury;
    if(typeof json.argDegMercury != "undefined") argDegMercury = json.argDegMercury;
    if(typeof json.inclMercury != "undefined") inclMercury = json.inclMercury;
    if(typeof json.lonANMercury != "undefined") lonANMercury = json.lonANMercury;
    if(typeof json.argMercury != "undefined") argMercury = json.argMercury;
    if(typeof json.phiMercury != "undefined") phiMercury = json.phiMercury;
    if(typeof json.rMercury != "undefined") rMercury = json.rMercury;
    if(typeof json.xMercury != "undefined") xMercury = json.xMercury;
    if(typeof json.yMercury != "undefined") yMercury = json.yMercury;
    if(typeof json.xPMercury != "undefined") xPMercury = json.xPMercury;
    if(typeof json.yPMercury != "undefined") yPMercury = json.yPMercury;
    if(typeof json.zPMercury != "undefined") zPMercury = json.zPMercury;
    if(typeof json.zPMercurytext != "undefined") zPMercurytext = json.zPMercurytext;
    if(typeof json.lonEMercury != "undefined") lonEMercury = json.lonEMercury;
    if(typeof json.lonMercuryEdeg != "undefined") lonMercuryEdeg = json.lonMercuryEdeg;
    if(typeof json.latEMercury != "undefined") latEMercury = json.latEMercury;
    if(typeof json.xlosMercury != "undefined") xlosMercury = json.xlosMercury;
    if(typeof json.ylosMercury != "undefined") ylosMercury = json.ylosMercury;
    if(typeof json.zlosMercury != "undefined") zlosMercury = json.zlosMercury;
    if(typeof json.nst != "undefined") nst = json.nst;
    if(typeof json.xstar != "undefined") xstar = json.xstar;
    if(typeof json.ystar != "undefined") ystar = json.ystar;
    if(typeof json.zstar != "undefined") zstar = json.zstar;
    if(typeof json.magstar != "undefined") magstar = json.magstar;
    if(typeof json.nES != "undefined") nES = json.nES;
    if(typeof json.lonES != "undefined") lonES = json.lonES;
    if(typeof json.latES != "undefined") latES = json.latES;
    if(typeof json.magES != "undefined") magES = json.magES;
    if(typeof json.xst != "undefined") xst = json.xst;
    if(typeof json.yst != "undefined") yst = json.yst;
    if(typeof json.zst != "undefined") zst = json.zst;
    if(typeof json.magst != "undefined") magst = json.magst;
    if(typeof json.traceEV != "undefined") traceEV = json.traceEV;
    if(typeof json.showEcl != "undefined") showEcl = json.showEcl;
    if(typeof json.eTrace != "undefined") eTrace = json.eTrace;
    if(typeof json.pTrace != "undefined") pTrace = json.pTrace;
    if(typeof json.lineES != "undefined") lineES = json.lineES;
    if(typeof json.lineEP != "undefined") lineEP = json.lineEP;
    if(typeof json.linePS != "undefined") linePS = json.linePS;
    if(typeof json.los != "undefined") los = json.los;
    if(typeof json.userDef != "undefined") userDef = json.userDef;
    if(typeof json.traceon != "undefined") traceon = json.traceon;
    if(typeof json.eGrid != "undefined") eGrid = json.eGrid;
    if(typeof json.globeStars != "undefined") globeStars = json.globeStars;
    if(typeof json.evStars != "undefined") evStars = json.evStars;
    if(typeof json.poPlane != "undefined") poPlane = json.poPlane;
    if(typeof json.vearrow != "undefined") vearrow = json.vearrow;
    if(typeof json.sunFront != "undefined") sunFront = json.sunFront;
    if(typeof json.useTrans != "undefined") useTrans = json.useTrans;
    if(typeof json.mars != "undefined") mars = json.mars;
    if(typeof json.notmars != "undefined") notmars = json.notmars;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.text3D != "undefined") text3D = json.text3D;
    if(typeof json.PlutoB != "undefined") PlutoB = json.PlutoB;
    if(typeof json.NeptuneB != "undefined") NeptuneB = json.NeptuneB;
    if(typeof json.memory != "undefined") memory = json.memory;
    if(typeof json.cmode != "undefined") cmode = json.cmode;
    if(typeof json.cmode1 != "undefined") cmode1 = json.cmode1;
    if(typeof json.cmodeenabled != "undefined") cmodeenabled = json.cmodeenabled;
    if(typeof json.eclipticview != "undefined") eclipticview = json.eclipticview;
    if(typeof json.magRow != "undefined") magRow = json.magRow;
    if(typeof json.Tm != "undefined") Tm = json.Tm;
    if(typeof json.Rm != "undefined") Rm = json.Rm;
    if(typeof json.Rave != "undefined") Rave = json.Rave;
    if(typeof json.magRowa != "undefined") magRowa = json.magRowa;
    if(typeof json.magRowta != "undefined") magRowta = json.magRowta;
    if(typeof json.magRowra != "undefined") magRowra = json.magRowra;
    if(typeof json.collectData != "undefined") collectData = json.collectData;
    if(typeof json.datai != "undefined") datai = json.datai;
    if(typeof json.countdatai != "undefined") countdatai = json.countdatai;
    if(typeof json.countdataitext != "undefined") countdataitext = json.countdataitext;
    if(typeof json.xP1 != "undefined") xP1 = json.xP1;
    if(typeof json.yP1 != "undefined") yP1 = json.yP1;
    if(typeof json.zP1 != "undefined") zP1 = json.zP1;
    if(typeof json.xP2 != "undefined") xP2 = json.xP2;
    if(typeof json.yP2 != "undefined") yP2 = json.yP2;
    if(typeof json.zP2 != "undefined") zP2 = json.zP2;
    if(typeof json.radius10 != "undefined") radius10 = json.radius10;
  };

  _model._inputAndPublicParameters = ["print",  "fontb",  "font",  "mode",  "iOS",  "iPad",  "iPhone",  "range",  "xmin",  "xmax",  "ymin",  "ymax",  "zmin",  "zmax",  "t",  "stepperdisplay",  "t0",  "dt",  "size",  "size2",  "stroke",  "pi",  "blue",  "green",  "green2",  "yellow",  "clr",  "clr2",  "clabel",  "npt",  "rE",  "phiE",  "aE",  "eE",  "xE",  "yE",  "lonPE",  "lonPEdeg",  "lonS",  "scale",  "scalecamera",  "decorationtypeaxes",  "zoom",  "names",  "radius",  "r",  "phi",  "a",  "e",  "x",  "y",  "incl",  "lat",  "lon",  "dist",  "inclDeg",  "lonAN",  "lonANdeg",  "arg",  "argDeg",  "pColor",  "xP",  "yP",  "zP",  "xlos",  "ylos",  "zlos",  "T",  "TMars",  "TVenus",  "TEarth",  "textureurl",  "n",  "aMercury",  "eMercury",  "inclDegMercury",  "lonANdegMercury",  "argDegMercury",  "inclMercury",  "lonANMercury",  "argMercury",  "phiMercury",  "rMercury",  "xMercury",  "yMercury",  "xPMercury",  "yPMercury",  "zPMercury",  "zPMercurytext",  "lonEMercury",  "lonMercuryEdeg",  "latEMercury",  "xlosMercury",  "ylosMercury",  "zlosMercury",  "nst",  "xstar",  "ystar",  "zstar",  "magstar",  "nES",  "lonES",  "latES",  "magES",  "xst",  "yst",  "zst",  "magst",  "traceEV",  "showEcl",  "eTrace",  "pTrace",  "lineES",  "lineEP",  "linePS",  "los",  "userDef",  "traceon",  "eGrid",  "globeStars",  "evStars",  "poPlane",  "vearrow",  "sunFront",  "useTrans",  "mars",  "notmars",  "text",  "text3D",  "PlutoB",  "NeptuneB",  "memory",  "cmode",  "cmode1",  "cmodeenabled",  "eclipticview",  "magRow",  "Tm",  "Rm",  "Rave",  "magRowa",  "magRowta",  "magRowra",  "collectData",  "datai",  "countdatai",  "countdataitext",  "xP1",  "yP1",  "zP1",  "xP2",  "yP2",  "zP2",  "radius10"]; 

  _model._outputAndPublicParameters = ["print",  "fontb",  "font",  "mode",  "iOS",  "iPad",  "iPhone",  "range",  "xmin",  "xmax",  "ymin",  "ymax",  "zmin",  "zmax",  "t",  "stepperdisplay",  "t0",  "dt",  "size",  "size2",  "stroke",  "pi",  "blue",  "green",  "green2",  "yellow",  "clr",  "clr2",  "clabel",  "npt",  "rE",  "phiE",  "aE",  "eE",  "xE",  "yE",  "lonPE",  "lonPEdeg",  "lonS",  "scale",  "scalecamera",  "decorationtypeaxes",  "zoom",  "names",  "radius",  "r",  "phi",  "a",  "e",  "x",  "y",  "incl",  "lat",  "lon",  "dist",  "inclDeg",  "lonAN",  "lonANdeg",  "arg",  "argDeg",  "pColor",  "xP",  "yP",  "zP",  "xlos",  "ylos",  "zlos",  "T",  "TMars",  "TVenus",  "TEarth",  "textureurl",  "n",  "aMercury",  "eMercury",  "inclDegMercury",  "lonANdegMercury",  "argDegMercury",  "inclMercury",  "lonANMercury",  "argMercury",  "phiMercury",  "rMercury",  "xMercury",  "yMercury",  "xPMercury",  "yPMercury",  "zPMercury",  "zPMercurytext",  "lonEMercury",  "lonMercuryEdeg",  "latEMercury",  "xlosMercury",  "ylosMercury",  "zlosMercury",  "nst",  "xstar",  "ystar",  "zstar",  "magstar",  "nES",  "lonES",  "latES",  "magES",  "xst",  "yst",  "zst",  "magst",  "traceEV",  "showEcl",  "eTrace",  "pTrace",  "lineES",  "lineEP",  "linePS",  "los",  "userDef",  "traceon",  "eGrid",  "globeStars",  "evStars",  "poPlane",  "vearrow",  "sunFront",  "useTrans",  "mars",  "notmars",  "text",  "text3D",  "PlutoB",  "NeptuneB",  "memory",  "cmode",  "cmode1",  "cmodeenabled",  "eclipticview",  "magRow",  "Tm",  "Rm",  "Rave",  "magRowa",  "magRowta",  "magRowra",  "collectData",  "datai",  "countdatai",  "countdataitext",  "xP1",  "yP1",  "zP1",  "xP2",  "yP2",  "zP2",  "radius10"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["selectPlanet"] = true;
    __pagesEnabled["draw planets"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["_view.drawingPanel3D.setCamLocX(8);"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["mercury"] = true;
    __pagesEnabled["orbitFR"] = true;
    __pagesEnabled["eciplticFR"] = true;
  });

  _model.addToReset(function() {
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.Var Table.font
    mode = 0; // EjsS Model.Variables.Var Table.mode
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.Var Table.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.Var Table.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.Var Table.iPhone
    range = 4; // EjsS Model.Variables.Var Table.range
    xmin = -range/2; // EjsS Model.Variables.Var Table.xmin
    xmax = range/2; // EjsS Model.Variables.Var Table.xmax
    ymin = -range/2; // EjsS Model.Variables.Var Table.ymin
    ymax = range/2; // EjsS Model.Variables.Var Table.ymax
    zmin = -range/2; // EjsS Model.Variables.Var Table.zmin
    zmax = range/2; // EjsS Model.Variables.Var Table.zmax
    t = 0.0; // EjsS Model.Variables.Var Table.t
    stepperdisplay = 1; // EjsS Model.Variables.Var Table.stepperdisplay
    t0 = t; // EjsS Model.Variables.Var Table.t0
    dt = 0.01; // EjsS Model.Variables.Var Table.dt
    size = range/50.; // EjsS Model.Variables.Var Table.size
    size2 = size/2; // EjsS Model.Variables.Var Table.size2
    stroke = 5; // EjsS Model.Variables.Var Table.stroke
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    blue = "rgb(0,0,255)"; // EjsS Model.Variables.Var Table.blue
    green = "rgb(0,255,0)"; // EjsS Model.Variables.Var Table.green
    green2 = "rgb(0,255,0)"; // EjsS Model.Variables.Var Table.green2
    yellow = "rgb(255,255,0)"; // EjsS Model.Variables.Var Table.yellow
    clr = "yellow"; // EjsS Model.Variables.Var Table.clr
    clr2 = "yellow"; // EjsS Model.Variables.Var Table.clr2
    clabel = "current flow"; // EjsS Model.Variables.Var Table.clabel
    npt = 500; // EjsS Model.Variables.Var Table.npt
  });

  _model.addToReset(function() {
    rE = 1; // EjsS Model.Variables.Earth.rE
    phiE = 0; // EjsS Model.Variables.Earth.phiE
    aE = 1; // EjsS Model.Variables.Earth.aE
    eE = 0.0167; // EjsS Model.Variables.Earth.eE
    xE = 1; // EjsS Model.Variables.Earth.xE
    yE = 0; // EjsS Model.Variables.Earth.yE
    lonPE = 0; // EjsS Model.Variables.Earth.lonPE
    lonPEdeg = 102.9472; // EjsS Model.Variables.Earth.lonPEdeg
    lonS = 0; // EjsS Model.Variables.Earth.lonS
    scale = 4; // EjsS Model.Variables.Earth.scale
    scalecamera = 2; // EjsS Model.Variables.Earth.scalecamera
    decorationtypeaxes = "NONE"; // EjsS Model.Variables.Earth.decorationtypeaxes
    zoom = 1.7; // EjsS Model.Variables.Earth.zoom
  });

  _model.addToReset(function() {
    names = ["Mercury","Venus","Mars","Jupiter","Saturn","Uranus","Neptune","Pluto","9"]; // EjsS Model.Variables.planets.names
    radius = new Array(9); // EjsS Model.Variables.planets.radius
    (function () {
      var _i0;
      for (_i0=0; _i0<9; _i0+=1) {  // EjsS Model.Variables.planets.radius
        radius[_i0] = 0;  // EjsS Model.Variables.planets.radius
      }
    }());
    r = 0; // EjsS Model.Variables.planets.r
    phi = 0.0; // EjsS Model.Variables.planets.phi
    a = 0; // EjsS Model.Variables.planets.a
    e = 0; // EjsS Model.Variables.planets.e
    x = 0; // EjsS Model.Variables.planets.x
    y = 0; // EjsS Model.Variables.planets.y
    incl = 15; // EjsS Model.Variables.planets.incl
    lat = 0; // EjsS Model.Variables.planets.lat
    lon = 0; // EjsS Model.Variables.planets.lon
    dist = 0; // EjsS Model.Variables.planets.dist
    inclDeg = 0; // EjsS Model.Variables.planets.inclDeg
    lonAN = 0; // EjsS Model.Variables.planets.lonAN
    lonANdeg = 30; // EjsS Model.Variables.planets.lonANdeg
    arg = 0; // EjsS Model.Variables.planets.arg
    argDeg = 0; // EjsS Model.Variables.planets.argDeg
    pColor = "rgba(1,2,3,1.0)"; // EjsS Model.Variables.planets.pColor
    xP = 0; // EjsS Model.Variables.planets.xP
    yP = 0; // EjsS Model.Variables.planets.yP
    zP = 0; // EjsS Model.Variables.planets.zP
    xlos = 0; // EjsS Model.Variables.planets.xlos
    ylos = 0; // EjsS Model.Variables.planets.ylos
    zlos = 0; // EjsS Model.Variables.planets.zlos
    T = 0; // EjsS Model.Variables.planets.T
    TMars = 1.88; // EjsS Model.Variables.planets.TMars
    TVenus = 0.615; // EjsS Model.Variables.planets.TVenus
    TEarth = 1; // EjsS Model.Variables.planets.TEarth
  });

  _model.addToReset(function() {
    textureurl = new Array(8); // EjsS Model.Variables.MercuryGeneralarray.textureurl
    (function () {
      var _i0;
      for (_i0=0; _i0<8; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.textureurl
        textureurl[_i0] = "";  // EjsS Model.Variables.MercuryGeneralarray.textureurl
      }
    }());
    n = 8; // EjsS Model.Variables.MercuryGeneralarray.n
    aMercury = [0.3871,0.7233,1.5237,5.2034,9.5371,19.19,30.06,39.48]; // EjsS Model.Variables.MercuryGeneralarray.aMercury
    eMercury = [0.2056,0.0068,0.0934,0.0484,0.0542,0.046,0.010,0.248]; // EjsS Model.Variables.MercuryGeneralarray.eMercury
    inclDegMercury = [7.0049,3.3947,1.8506,1.3053,2.4845,0.77,1.77,17.15]; // EjsS Model.Variables.MercuryGeneralarray.inclDegMercury
    lonANdegMercury = [48.3317,76.6807,49.5785,100.5562,113.7150,73.989821,131.794310,110.30347]; // EjsS Model.Variables.MercuryGeneralarray.lonANdegMercury
    argDegMercury = [29.1248,54.8523,286.4623,274.1977,338.7169,96.541318,265.646853,113.76329]; // EjsS Model.Variables.MercuryGeneralarray.argDegMercury
    inclMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.inclMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.inclMercury
        inclMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.inclMercury
      }
    }());
    lonANMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.lonANMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.lonANMercury
        lonANMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.lonANMercury
      }
    }());
    argMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.argMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.argMercury
        argMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.argMercury
      }
    }());
    phiMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.phiMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.phiMercury
        phiMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.phiMercury
      }
    }());
    rMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.rMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.rMercury
        rMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.rMercury
      }
    }());
    xMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.xMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.xMercury
        xMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.xMercury
      }
    }());
    yMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.yMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.yMercury
        yMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.yMercury
      }
    }());
    xPMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.xPMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.xPMercury
        xPMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.xPMercury
      }
    }());
    yPMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.yPMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.yPMercury
        yPMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.yPMercury
      }
    }());
    zPMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.zPMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.zPMercury
        zPMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.zPMercury
      }
    }());
    zPMercurytext = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.zPMercurytext
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.zPMercurytext
        zPMercurytext[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.zPMercurytext
      }
    }());
    lonEMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.lonEMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.lonEMercury
        lonEMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.lonEMercury
      }
    }());
    lonMercuryEdeg = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.lonMercuryEdeg
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.lonMercuryEdeg
        lonMercuryEdeg[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.lonMercuryEdeg
      }
    }());
    latEMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.latEMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.latEMercury
        latEMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.latEMercury
      }
    }());
    xlosMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.xlosMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.xlosMercury
        xlosMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.xlosMercury
      }
    }());
    ylosMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.ylosMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.ylosMercury
        ylosMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.ylosMercury
      }
    }());
    zlosMercury = new Array(n); // EjsS Model.Variables.MercuryGeneralarray.zlosMercury
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.MercuryGeneralarray.zlosMercury
        zlosMercury[_i0] = 0;  // EjsS Model.Variables.MercuryGeneralarray.zlosMercury
      }
    }());
  });

  _model.addToReset(function() {
    nst = 300; // EjsS Model.Variables.Stars.nst
    xstar = new Array(nst); // EjsS Model.Variables.Stars.xstar
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.xstar
        xstar[_i0] = 0;  // EjsS Model.Variables.Stars.xstar
      }
    }());
    ystar = new Array(nst); // EjsS Model.Variables.Stars.ystar
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.ystar
        ystar[_i0] = 0;  // EjsS Model.Variables.Stars.ystar
      }
    }());
    zstar = new Array(nst); // EjsS Model.Variables.Stars.zstar
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.zstar
        zstar[_i0] = 0;  // EjsS Model.Variables.Stars.zstar
      }
    }());
    magstar = new Array(nst); // EjsS Model.Variables.Stars.magstar
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.magstar
        magstar[_i0] = 0;  // EjsS Model.Variables.Stars.magstar
      }
    }());
    nES = 168; // EjsS Model.Variables.Stars.nES
    lonES = new Array(nES); // EjsS Model.Variables.Stars.lonES
    (function () {
      var _i0;
      for (_i0=0; _i0<nES; _i0+=1) {  // EjsS Model.Variables.Stars.lonES
        lonES[_i0] = 0;  // EjsS Model.Variables.Stars.lonES
      }
    }());
    latES = new Array(nES); // EjsS Model.Variables.Stars.latES
    (function () {
      var _i0;
      for (_i0=0; _i0<nES; _i0+=1) {  // EjsS Model.Variables.Stars.latES
        latES[_i0] = 0;  // EjsS Model.Variables.Stars.latES
      }
    }());
    magES = new Array(nES); // EjsS Model.Variables.Stars.magES
    (function () {
      var _i0;
      for (_i0=0; _i0<nES; _i0+=1) {  // EjsS Model.Variables.Stars.magES
        magES[_i0] = 0;  // EjsS Model.Variables.Stars.magES
      }
    }());
    xst = new Array(nst); // EjsS Model.Variables.Stars.xst
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.xst
        xst[_i0] = 0;  // EjsS Model.Variables.Stars.xst
      }
    }());
    yst = new Array(nst); // EjsS Model.Variables.Stars.yst
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.yst
        yst[_i0] = 0;  // EjsS Model.Variables.Stars.yst
      }
    }());
    zst = new Array(nst); // EjsS Model.Variables.Stars.zst
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.zst
        zst[_i0] = 0;  // EjsS Model.Variables.Stars.zst
      }
    }());
    magst = new Array(nst); // EjsS Model.Variables.Stars.magst
    (function () {
      var _i0;
      for (_i0=0; _i0<nst; _i0+=1) {  // EjsS Model.Variables.Stars.magst
        magst[_i0] = 0;  // EjsS Model.Variables.Stars.magst
      }
    }());
  });

  _model.addToReset(function() {
    eTrace = true; // EjsS Model.Variables.Control.eTrace
    pTrace = true; // EjsS Model.Variables.Control.pTrace
    text3D = ""; // EjsS Model.Variables.Control.text3D
  });

  _model.addToReset(function() {
    cmode = new Array(1); // EjsS Model.Variables.PlanetB.cmode
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.PlanetB.cmode
        cmode[_i0] = "";  // EjsS Model.Variables.PlanetB.cmode
      }
    }());
    cmode1 = new Array(1); // EjsS Model.Variables.PlanetB.cmode1
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.PlanetB.cmode1
        cmode1[_i0] = "labels off";  // EjsS Model.Variables.PlanetB.cmode1
      }
    }());
    cmodeenabled = 0; // EjsS Model.Variables.PlanetB.cmodeenabled
  });

  _model.addToReset(function() {
    magRow = new Array(2); // EjsS Model.Variables.recorddata.magRow
    (function () {
      var _i0;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.recorddata.magRow
        magRow[_i0] = 0;  // EjsS Model.Variables.recorddata.magRow
      }
    }());
    Tm = new Array(9); // EjsS Model.Variables.recorddata.Tm
    (function () {
      var _i0;
      for (_i0=0; _i0<9; _i0+=1) {  // EjsS Model.Variables.recorddata.Tm
        Tm[_i0] = 0;  // EjsS Model.Variables.recorddata.Tm
      }
    }());
    Rm = new Array(9); // EjsS Model.Variables.recorddata.Rm
    (function () {
      var _i0;
      for (_i0=0; _i0<9; _i0+=1) {  // EjsS Model.Variables.recorddata.Rm
        Rm[_i0] = 0;  // EjsS Model.Variables.recorddata.Rm
      }
    }());
    Rave = new Array(9); // EjsS Model.Variables.recorddata.Rave
    (function () {
      var _i0;
      for (_i0=0; _i0<9; _i0+=1) {  // EjsS Model.Variables.recorddata.Rave
        Rave[_i0] = 0;  // EjsS Model.Variables.recorddata.Rave
      }
    }());
    magRowa = new Array(9); // EjsS Model.Variables.recorddata.magRowa
    (function () {
      var _i0;
      for (_i0=0; _i0<9; _i0+=1) {  // EjsS Model.Variables.recorddata.magRowa
        magRowa[_i0] = 0;  // EjsS Model.Variables.recorddata.magRowa
      }
    }());
    magRowta = 0; // EjsS Model.Variables.recorddata.magRowta
    magRowra = 0; // EjsS Model.Variables.recorddata.magRowra
    datai = 0; // EjsS Model.Variables.recorddata.datai
    countdatai = new Array(9); // EjsS Model.Variables.recorddata.countdatai
    (function () {
      var _i0;
      for (_i0=0; _i0<9; _i0+=1) {  // EjsS Model.Variables.recorddata.countdatai
        countdatai[_i0] = 0;  // EjsS Model.Variables.recorddata.countdatai
      }
    }());
    countdataitext = new Array(9); // EjsS Model.Variables.recorddata.countdataitext
    (function () {
      var _i0;
      for (_i0=0; _i0<9; _i0+=1) {  // EjsS Model.Variables.recorddata.countdataitext
        countdataitext[_i0] = "";  // EjsS Model.Variables.recorddata.countdataitext
      }
    }());
  });

  _model.addToReset(function() {
    xP1 = [-0.2986745057130907,-0.2986745057130907,-0.2986745057130907,-0.2986745057130907,-0.2731539026077988,-0.2731539026077988,-0.12432673120511058,0.0688544296103076,0.24774075263018497,0.3809384061930414,0.45249580001741624,0.4541133187818017,0.38230798922837994,0.23971201578512943,0.23971201578512943,0.23971201578512943,0.04218746547799604,0.04218746547799604,-0.16511279346804575,-0.16511279346804575,-0.2962051099216315,-0.2962051099216315]; // EjsS Model.Variables.drawpaths.xP1
    yP1 = [0.06545269808826158,0.06545269808826158,0.06545269808826158,0.06545269808826158,-0.1730138347044706,-0.1730138347044706,-0.3386154406941175,-0.3947969120574678,-0.3561533642980798,-0.24992028586239518,-0.10271128072307892,0.06038198597029279,0.21328302730894655,0.3254903354184237,0.3254903354184237,0.3254903354184237,0.3595068074785559,0.3595068074785559,0.2771467481687894,0.2771467481687894,0.07570784455394484,0.07570784455394484]; // EjsS Model.Variables.drawpaths.yP1
    zP1 = [0.032760673067344696,0.032760673067344696,0.032760673067344696,0.032760673067344696,0.010938632574005538,0.010938632574005538,-0.016249066489796155,-0.03856962386277141,-0.051832148974826825,-0.055379923306217646,-0.04992280488726128,-0.03674867076202052,-0.017667943811047474,0.004586200748640755,0.004586200748640755,0.004586200748640755,0.02549482679473875,0.02549482679473875,0.03779427342636162,0.03779427342636162,0.033371730044645616,0.033371730044645616]; // EjsS Model.Variables.drawpaths.zP1
    xP2 = [-0.5370555712682216,-0.5370555712682216,-0.5370555712682216,-0.36622808707106935,-0.36622808707106935,-0.36622808707106935,-0.16061451442019645,0.06022271332478216,0.2753983482081732,0.464763688979638,0.6108184553075049,0.700286383766911,0.7252302429244567,0.6836478493242786,0.579544640788534,0.42251509072675075,0.22688663455963357,0.01049222102435543,-0.2068512498980288,-0.4050653887969417,-0.5656173248507306,-0.6732672977797363,-0.7175888868011524,-0.7175888868011524,-0.7175888868011524,-0.6940855133737047,-0.6940855133737047,-0.6047460219647238,-0.6047460219647238,-0.4579355210291691,-0.4579355210291691]; // EjsS Model.Variables.drawpaths.xP2
    yP2 = [-0.47649101038552694,-0.47649101038552694,-0.47649101038552694,-0.6181598578611602,-0.6181598578611602,-0.6181598578611602,-0.7011261217988228,-0.7176939953668686,-0.6665823827634026,-0.5529454063362743,-0.3877471709001483,-0.18660357832741864,0.03175166090390394,0.24720739999173197,0.4400637153607825,0.5927336216320751,0.6912463246126613,0.726458736795349,0.694893741410242,0.5991327178626645,0.44770308648221313,0.2544269110177595,0.03723951727050173,0.03723951727050173,0.03723951727050173,-0.18345233226554436,-0.18345233226554436,-0.3867329336057065,-0.3867329336057065,-0.5532569443467861,-0.5532569443467861]; // EjsS Model.Variables.drawpaths.yP2
    zP2 = [0.024488694117440205,0.024488694117440205,0.024488694117440205,0.012692113413627734,0.012692113413627734,0.012692113413627734,-3.102048653489308E-4,-0.013283899853604142,-0.025005915099105384,-0.03438365036981862,-0.040556775692137434,-0.0429723514984592,-0.041428227315365176,-0.03608366215459828,-0.02743907059007472,-0.01628860603702715,-0.003650203213747886,0.009321829354957302,0.021436093114640738,0.0315688884327209,0.03876698292664912,0.0423395851970175,0.04192995206354581,0.04192995206354581,0.04192995206354581,0.0375573994728189,0.0375573994728189,0.029622553431151888,0.029622553431151888,0.01887263422333419,0.01887263422333419]; // EjsS Model.Variables.drawpaths.zP2
    radius10 = 0.003*scale; // EjsS Model.Variables.drawpaths.radius10
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(stepperdisplay);
  });

  //sets scale for Orbit Frame and rescales celestial sphere  // > CustomCode.scaleStars:1
  function scaleStars () {  // > CustomCode.scaleStars:2
    for (var i=0; i<nst; i++) {  // > CustomCode.scaleStars:3
      scale = 1.5*Math.max(a/(1-e*e),aE/(1-eE*eE));  // > CustomCode.scaleStars:4
      xst[i] = scale*xstar[i];  // > CustomCode.scaleStars:5
      yst[i] = scale*ystar[i];  // > CustomCode.scaleStars:6
      zst[i] = scale*zstar[i];  // > CustomCode.scaleStars:7
      magst[i] = scale*magstar[i];}  // > CustomCode.scaleStars:8
        // > CustomCode.scaleStars:9
      // error in Ejs4.3  // > CustomCode.scaleStars:10
   // _view.orbitDrawingPanel3D.setScaleFactor(scale,scale,scale);  // > CustomCode.scaleStars:11
  //_view.orbitDrawingPanel3D.  // > CustomCode.scaleStars:12
  }  // > CustomCode.scaleStars:13

  //custom calls to set parameter values for various planets  // > CustomCode.selectPlanet:1
  function selectMercury () {  // > CustomCode.selectPlanet:2
    userDef=false;  // > CustomCode.selectPlanet:3
    notmars=true;  // > CustomCode.selectPlanet:4
    mars=false;  // > CustomCode.selectPlanet:5
    a = 0.3871; //Mean Distance from the Sun (AU)  // > CustomCode.selectPlanet:6
    e = 0.2056; // Orbital  Eccentricity  // > CustomCode.selectPlanet:7
    inclDeg = 7.0049; // Inclination to ecliptic (degrees)  // > CustomCode.selectPlanet:8
    lonANdeg = 48.3317; //longitude of planet's ascending node in degrees  // > CustomCode.selectPlanet:9
    argDeg = 29.1248; //argument of planet's perihelion in degrees  // > CustomCode.selectPlanet:10
   // _view.resetTraces();  // > CustomCode.selectPlanet:11
  //  scaleStars();  // > CustomCode.selectPlanet:12
  text3D = "Mercury"; // added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:13
  T = 1.88;  // > CustomCode.selectPlanet:14
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:15
  }  // > CustomCode.selectPlanet:16
  function selectVenus () {  // > CustomCode.selectPlanet:17
    userDef=false;  // > CustomCode.selectPlanet:18
    notmars=true;  // > CustomCode.selectPlanet:19
    mars=false;  // > CustomCode.selectPlanet:20
    a = 0.7233;  // > CustomCode.selectPlanet:21
    e = 0.0068;  // > CustomCode.selectPlanet:22
    inclDeg = 3.3947;  // > CustomCode.selectPlanet:23
    lonANdeg = 76.6807;  // > CustomCode.selectPlanet:24
    argDeg = 54.8523;  // > CustomCode.selectPlanet:25
  //  _view.resetTraces();  // > CustomCode.selectPlanet:26
  //  scaleStars();  // > CustomCode.selectPlanet:27
  text3D = "Venus"; // added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:28
  TVenus = 0.615;  // > CustomCode.selectPlanet:29
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:30
  }  // > CustomCode.selectPlanet:31
  function selectMars () {  // > CustomCode.selectPlanet:32
     mars=true;  // > CustomCode.selectPlanet:33
   userDef=false;  // > CustomCode.selectPlanet:34
    notmars=false;  // > CustomCode.selectPlanet:35
    a = 1.5237;  // > CustomCode.selectPlanet:36
    e = 0.0934;  // > CustomCode.selectPlanet:37
    inclDeg = 1.8506;  // > CustomCode.selectPlanet:38
    lonANdeg = 49.5785;  // > CustomCode.selectPlanet:39
    argDeg = 286.4623;  // > CustomCode.selectPlanet:40
  //  _view.resetTraces();  // > CustomCode.selectPlanet:41
   // scaleStars();  // > CustomCode.selectPlanet:42
  text3D = "Mars";// added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:43
  TMars = 1.88;  // > CustomCode.selectPlanet:44
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:45
  }  // > CustomCode.selectPlanet:46
  function selectJupiter () {  // > CustomCode.selectPlanet:47
    userDef=false;  // > CustomCode.selectPlanet:48
    notmars=true;  // > CustomCode.selectPlanet:49
    mars=false;  // > CustomCode.selectPlanet:50
    a = 5.2034;  // > CustomCode.selectPlanet:51
    e = 0.0484;  // > CustomCode.selectPlanet:52
    inclDeg = 1.3053;  // > CustomCode.selectPlanet:53
    lonANdeg = 100.5562;  // > CustomCode.selectPlanet:54
    argDeg = 274.1977;  // > CustomCode.selectPlanet:55
   // _view.resetTraces();  // > CustomCode.selectPlanet:56
  //  scaleStars();  // > CustomCode.selectPlanet:57
  text3D = "Jupiter";// added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:58
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:59
  }  // > CustomCode.selectPlanet:60
  function selectSaturn () {  // > CustomCode.selectPlanet:61
    userDef=false;  // > CustomCode.selectPlanet:62
    notmars=true;  // > CustomCode.selectPlanet:63
    mars=false;  // > CustomCode.selectPlanet:64
    a = 9.5371;  // > CustomCode.selectPlanet:65
    e = 0.0542;  // > CustomCode.selectPlanet:66
    inclDeg = 2.4845;  // > CustomCode.selectPlanet:67
    lonANdeg = 113.7150;  // > CustomCode.selectPlanet:68
    argDeg = 338.7169;  // > CustomCode.selectPlanet:69
  //  _view.resetTraces();  // > CustomCode.selectPlanet:70
  //  scaleStars();  // > CustomCode.selectPlanet:71
  text3D = "Saturn";// added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:72
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:73
  }  // > CustomCode.selectPlanet:74
  function selectUserDef () {  // > CustomCode.selectPlanet:75
    userDef=true;  // > CustomCode.selectPlanet:76
    notmars=true;  // > CustomCode.selectPlanet:77
    mars=false;  // > CustomCode.selectPlanet:78
    a = 1.5237;  // > CustomCode.selectPlanet:79
    e = 0.0934;  // > CustomCode.selectPlanet:80
    inclDeg = 1.8506;  // > CustomCode.selectPlanet:81
    lonANdeg = 49.5785;  // > CustomCode.selectPlanet:82
    argDeg = 286.4623;  // > CustomCode.selectPlanet:83
   // _view.resetTraces();  // > CustomCode.selectPlanet:84
   // scaleStars();  // > CustomCode.selectPlanet:85
  text3D = "UserDef";// added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:86
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:87
  }  // > CustomCode.selectPlanet:88
  //added by lookang to include Uranus  	Neptune  	Pluto  // > CustomCode.selectPlanet:89
  //http://www.nasm.si.edu/etp/ss/ss_planetdata.html  // > CustomCode.selectPlanet:90
  function selectUranus () {  // > CustomCode.selectPlanet:91
    userDef=false;  // > CustomCode.selectPlanet:92
    notmars=true;  // > CustomCode.selectPlanet:93
    mars=false;  // > CustomCode.selectPlanet:94
    a = 19.19; //Mean Distance from the Sun (AU)  // > CustomCode.selectPlanet:95
    e = 0.046;  // > CustomCode.selectPlanet:96
    inclDeg = 0.77; // Inclination to ecliptic (degrees)  // > CustomCode.selectPlanet:97
    lonANdeg = 73.989821; // from wikipedia  // > CustomCode.selectPlanet:98
    argDeg = 96.541318; // from wikipedia  // > CustomCode.selectPlanet:99
  //  _view.resetTraces();  // > CustomCode.selectPlanet:100
   // scaleStars();  // > CustomCode.selectPlanet:101
  text3D = "Uranus"; // added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:102
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:103
  }  // > CustomCode.selectPlanet:104
  function selectNeptune () {  // > CustomCode.selectPlanet:105
    userDef=false;  // > CustomCode.selectPlanet:106
    notmars=true;  // > CustomCode.selectPlanet:107
    mars=false;  // > CustomCode.selectPlanet:108
    a = 30.06;  // > CustomCode.selectPlanet:109
    e = 0.010;  // > CustomCode.selectPlanet:110
    inclDeg = 1.77; // Inclination to ecliptic (degrees)  // > CustomCode.selectPlanet:111
    lonANdeg = 131.794310; // from wikipedia  // > CustomCode.selectPlanet:112
    argDeg = 265.646853; // from wikipedia  // > CustomCode.selectPlanet:113
   // _view.resetTraces();  // > CustomCode.selectPlanet:114
   // scaleStars();  // > CustomCode.selectPlanet:115
  text3D = "Neptune"; // added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:116
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:117
  }  // > CustomCode.selectPlanet:118
  function selectPluto () {  // > CustomCode.selectPlanet:119
    userDef=false;  // > CustomCode.selectPlanet:120
    notmars=true;  // > CustomCode.selectPlanet:121
    mars=false;  // > CustomCode.selectPlanet:122
    a = 39.48;  //Mean Distance from the Sun (AU)  // > CustomCode.selectPlanet:123
    e = 0.248; //Orbital  Eccentricity  // > CustomCode.selectPlanet:124
    inclDeg = 17.15; // Inclination to ecliptic (degrees)  // > CustomCode.selectPlanet:125
    lonANdeg = 110.30347; // from wikipedia  // > CustomCode.selectPlanet:126
    argDeg = 113.76329; // from wikipedia  // > CustomCode.selectPlanet:127
   // _view.resetTraces();  // > CustomCode.selectPlanet:128
    //scaleStars();  // > CustomCode.selectPlanet:129
  text3D = "Pluto"; // added by lookang to make text appear in the gallaxy  // > CustomCode.selectPlanet:130
  t=0.0; // needed to fix bug of double planets  // > CustomCode.selectPlanet:131
  }  // > CustomCode.selectPlanet:132

  //this section of the model is correct as well  // > CustomCode.collectData:1
  //it recorded the data in a table  // > CustomCode.collectData:2
  function recordData () {  // > CustomCode.collectData:3
    collectData = false;  // > CustomCode.collectData:4
    magRow[0]=t; // period  // > CustomCode.collectData:5
    magRow[1]=r; // radius  // > CustomCode.collectData:6
   // _view.xytrail  // > CustomCode.collectData:7
     //adding points to a trail to be accessed by dataTool  // > CustomCode.collectData:8
      // > CustomCode.collectData:9
  //  _view.xytrail.addPoint(t, r);  // > CustomCode.collectData:10
  //  _view.Etrail.addPoint(r,getE(xDetector,yDetector)[2]);  // > CustomCode.collectData:11
    collectData = true;  // > CustomCode.collectData:12
  }  // > CustomCode.collectData:13

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =1 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  var kepub =1 ;  // > CustomCode.changeOrientation:4
  // check platform for Apps  // > CustomCode.changeOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:7
     // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
     // > CustomCode.changeOrientation:15
  switch (window.orientation) {  // > CustomCode.changeOrientation:16
    case 0:  // > CustomCode.changeOrientation:17
    case 180:  // > CustomCode.changeOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:21
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:22
        // return window.screen.height;  // > CustomCode.changeOrientation:23
        //  return window.innerHeight;  // > CustomCode.changeOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
      }  // > CustomCode.changeOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:29
        // return window.screen.height;  // > CustomCode.changeOrientation:30
        //  return window.innerHeight;  // > CustomCode.changeOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:32
      }  // > CustomCode.changeOrientation:33
      else {  // > CustomCode.changeOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:35
        return window.innerHeight*k;  // > CustomCode.changeOrientation:36
      }  // > CustomCode.changeOrientation:37
      break;  // > CustomCode.changeOrientation:38
    case 90:  // > CustomCode.changeOrientation:39
    case -90:  // > CustomCode.changeOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:41
     // > CustomCode.changeOrientation:42
      if (iOSapp){ // App  // > CustomCode.changeOrientation:43
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:44
        // return window.screen.height;  // > CustomCode.changeOrientation:45
        //  return window.innerHeight;  // > CustomCode.changeOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:47
      }  // > CustomCode.changeOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:51
        // return window.screen.height;  // > CustomCode.changeOrientation:52
        //  return window.innerHeight;  // > CustomCode.changeOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:54
      }  // > CustomCode.changeOrientation:55
      else { // browser Android and PC  // > CustomCode.changeOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:57
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:58
        return window.innerHeight*k;  // > CustomCode.changeOrientation:59
      }  // > CustomCode.changeOrientation:60
      break;  // > CustomCode.changeOrientation:61
    default:  // > CustomCode.changeOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:64
      return window.innerHeight*k;  // > CustomCode.changeOrientation:65
  }  // > CustomCode.changeOrientation:66
     // > CustomCode.changeOrientation:67
  }  // > CustomCode.changeOrientation:68
     // > CustomCode.changeOrientation:69

  _model.addToInitialization(function() {
    if (!__pagesEnabled["selectPlanet"]) return;
    //custom calls to set parameter values for various planets  // > Initialization.selectPlanet:1
    t=0.0; // needed to fix bug of double planets  // > Initialization.selectPlanet:2
    //scaleStars(); // draw stars  // > Initialization.selectPlanet:3
    scale = 1.5*Math.max(a/(1-e*e),aE/(1-eE*eE));  // > Initialization.selectPlanet:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["draw planets"]) return;
    //for (var i=0; i<9 /* Iterations */ ; i++) {  // > Initialization.draw planets:1
    // radius[i] = 0.04*scale;  // > Initialization.draw planets:2
    //}  // > Initialization.draw planets:3
    textureurl[0] = "./KeplerSystem/Mercury_Map.jpg";  // > Initialization.draw planets:4
    radius[0] = 0.03*scale;  // > Initialization.draw planets:5
    textureurl[1] = "./KeplerSystem/ven0aaa2.jpg";  // > Initialization.draw planets:6
    radius[1] = 0.03*scale;  // > Initialization.draw planets:7
    //textureurl[2] = "./KeplerSystem/2_no_clouds_2k.jpg";  // > Initialization.draw planets:8
    textureurl[2] = "./KeplerSystem/mars_texture.jpg";  // > Initialization.draw planets:9
    radius[2] = 0.03*scale;  // > Initialization.draw planets:10
    textureurl[3] = "./KeplerSystem/jupiter.jpg";  // > Initialization.draw planets:11
    radius[3] = 0.03*scale;  // > Initialization.draw planets:12
    textureurl[4] = "./KeplerSystem/saturn.jpg";  // > Initialization.draw planets:13
    radius[4] = 0.03*scale;  // > Initialization.draw planets:14
    textureurl[5] = "./KeplerSystem/uranus.jpg";  // > Initialization.draw planets:15
    radius[5] = 0.03*scale;  // > Initialization.draw planets:16
    textureurl[6] = "./KeplerSystem/texture_neptune.jpg";  // > Initialization.draw planets:17
    radius[6] = 0.03*scale;  // > Initialization.draw planets:18
    textureurl[7] = "./KeplerSystem/plutobynasa.jpg";  // > Initialization.draw planets:19
    radius[7] = 0.03*scale;  // > Initialization.draw planets:20
    radius10 = 0.003*scale;  // > Initialization.draw planets:21
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (poPlane==undefined){  // > Initialization.undefined:1
      poPlane =false;  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
      //  // > Initialization.undefined:4
     if (showEcl==undefined){  // > Initialization.undefined:5
      showEcl =false;  // > Initialization.undefined:6
      }   // > Initialization.undefined:7
    if (_view.comboBox.getProperty("SelectedOptions")==undefined){ //does not work  // > Initialization.undefined:8
      _view.comboBox.setProperty("SelectedOptions")="Mercury";  // > Initialization.undefined:9
     cmodeenabled=1;  // > Initialization.undefined:10
      userDef=false;  // > Initialization.undefined:11
      notmars=true;  // > Initialization.undefined:12
      mars=false;  // > Initialization.undefined:13
      a = 0.3871; //Mean Distance from the Sun (AU)  // > Initialization.undefined:14
      e = 0.2056; // Orbital  Eccentricity  // > Initialization.undefined:15
      inclDeg = 7.0049; // Inclination to ecliptic (degrees)  // > Initialization.undefined:16
      lonANdeg = 48.3317; //longitude of planet's ascending node in degrees  // > Initialization.undefined:17
      argDeg = 29.1248; //argument of planet's perihelion in degrees  // > Initialization.undefined:18
    //    _view.resetTraces();  // > Initialization.undefined:19
    //  scaleStars();  // > Initialization.undefined:20
    text3D = "Mercury"; // added by lookang to make text appear in the gallaxy  // > Initialization.undefined:21
    T = 1.88;  // > Initialization.undefined:22
    dt=0.01;  // > Initialization.undefined:23
      }  // > Initialization.undefined:24
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["_view.drawingPanel3D.setCamLocX(8);"]) return;
    _view.drawingPanel3D.setCamLocX(2);  // > Initialization._view.drawingPanel3D.setCamLocX(8);:1
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["mercury"]) return;
    for (var i=0; i<n /* Iterations */ ; i++) {  // > FixedRelations.mercury:1
        // > FixedRelations.mercury:2
    //convert degree values to radians  // > FixedRelations.mercury:3
    lonEMercury[i] = pi*lonMercuryEdeg[i]/180.0;  // > FixedRelations.mercury:4
    lonANMercury[i] = pi*lonANdegMercury[i]/180.0;  // > FixedRelations.mercury:5
    inclMercury[i] = pi*inclDegMercury[i]/180.0;  // > FixedRelations.mercury:6
    argMercury[i] = pi*argDegMercury[i]/180.0;  // > FixedRelations.mercury:7
    //compute radial coordinate for Earth  // > FixedRelations.mercury:8
    rMercury[i] = aMercury[i]*(1-eMercury[i]*eMercury[i])/(1+eMercury[i]*Math.cos(phiMercury[i]));  // > FixedRelations.mercury:9
    //compute x and y coordinates for planet in its orbital plane  // > FixedRelations.mercury:10
    xMercury[i] = rMercury[i]*Math.cos(phiMercury[i]+argMercury[i]);  // > FixedRelations.mercury:11
    yMercury[i] = rMercury[i]*Math.sin(phiMercury[i]+argMercury[i]);  // > FixedRelations.mercury:12
    //compute true x,y,z coordinates for planet  // > FixedRelations.mercury:13
    xPMercury[i] = -yMercury[i]*Math.cos(lonANMercury[i])-xMercury[i]*Math.cos(inclMercury[i])*Math.sin(lonANMercury[i]);  // > FixedRelations.mercury:14
    yPMercury[i] = xMercury[i]*Math.cos(inclMercury[i])*Math.cos(lonANMercury[i])-yMercury[i]*Math.sin(lonANMercury[i]);  // > FixedRelations.mercury:15
    zPMercury[i] = xMercury[i]*Math.sin(inclMercury[i]);  // > FixedRelations.mercury:16
    zPMercurytext[i] = zPMercury[i]+0.07*scale;  // > FixedRelations.mercury:17
    //compute longitude and latitude of planet  // > FixedRelations.mercury:18
    lonEMercury[i] = Math.atan2(yPMercury[i]-yE,xPMercury[i]-xE);  // > FixedRelations.mercury:19
    latEMercury[i] = Math.atan2(zPMercury[i],Math.sqrt((xPMercury[i]-xE)*(xPMercury[i]-xE)+(yPMercury[i]-yE)*(yPMercury[i]-yE)));  // > FixedRelations.mercury:20
    //compute components of line-of-sight vector  // > FixedRelations.mercury:21
    xlosMercury[i] = scale*Math.cos(latEMercury[i])*Math.cos(lonEMercury[i]);  // > FixedRelations.mercury:22
    ylosMercury[i] = scale*Math.cos(latEMercury[i])*Math.sin(lonEMercury[i]);  // > FixedRelations.mercury:23
    zlosMercury[i] = scale*Math.sin(latEMercury[i]);  // > FixedRelations.mercury:24
    }  // > FixedRelations.mercury:25
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["orbitFR"]) return;
    //set color for inferior/superior planet  // > FixedRelations.orbitFR:1
    if (a >= aE) {  // > FixedRelations.orbitFR:2
    pColor = "rgb(255,0,0)" ;  // > FixedRelations.orbitFR:3
      }  // > FixedRelations.orbitFR:4
    else {  // > FixedRelations.orbitFR:5
      pColor = "rgb(255,255,0)";  // > FixedRelations.orbitFR:6
      }  // > FixedRelations.orbitFR:7
      //pColor = new Color(255,0,0,255);}  // > FixedRelations.orbitFR:8
    //else {  // > FixedRelations.orbitFR:9
     // pColor = new Color(255,255,0,255);}  // > FixedRelations.orbitFR:10
    //convert degree values to radians  // > FixedRelations.orbitFR:11
    lonPE = Math.PI*lonPEdeg/180.0;  // > FixedRelations.orbitFR:12
    lonAN = Math.PI*lonANdeg/180.0;  // > FixedRelations.orbitFR:13
    incl = Math.PI*inclDeg/180.0;  // > FixedRelations.orbitFR:14
    arg = Math.PI*argDeg/180.0;  // > FixedRelations.orbitFR:15
    //compute radial coordinate for Earth  // > FixedRelations.orbitFR:16
    rE = aE*(1-eE*eE)/(1+eE*Math.cos(phiE));  // > FixedRelations.orbitFR:17
    //compute x and y coordinates for Earth  // > FixedRelations.orbitFR:18
    xE = rE*Math.cos(phiE+lonPE);  // > FixedRelations.orbitFR:19
    yE = rE*Math.sin(phiE+lonPE);  // > FixedRelations.orbitFR:20
    //compute radial coordinate for planet  // > FixedRelations.orbitFR:21
    r = a*(1-e*e)/(1+e*Math.cos(phi));  // > FixedRelations.orbitFR:22
    //compute x and y coordinates for planet in its orbital plane  // > FixedRelations.orbitFR:23
    x = r*Math.cos(phi+arg);  // > FixedRelations.orbitFR:24
    y = r*Math.sin(phi+arg);  // > FixedRelations.orbitFR:25
    //compute true x,y,z coordinates for planet  // > FixedRelations.orbitFR:26
    xP = -y*Math.cos(lonAN)-x*Math.cos(incl)*Math.sin(lonAN);  // > FixedRelations.orbitFR:27
    yP = x*Math.cos(incl)*Math.cos(lonAN)-y*Math.sin(lonAN);  // > FixedRelations.orbitFR:28
    zP = x*Math.sin(incl);  // > FixedRelations.orbitFR:29
    //compute longitude and latitude of planet  // > FixedRelations.orbitFR:30
    lon = Math.atan2(yP-yE,xP-xE);  // > FixedRelations.orbitFR:31
    lat = Math.atan2(zP,Math.sqrt((xP-xE)*(xP-xE)+(yP-yE)*(yP-yE)));  // > FixedRelations.orbitFR:32
    //compute components of line-of-sight vector  // > FixedRelations.orbitFR:33
    //xlos = scale*Math.cos(lat)*Math.cos(lon);  // > FixedRelations.orbitFR:34
    //ylos = scale*Math.cos(lat)*Math.sin(lon);  // > FixedRelations.orbitFR:35
    //zlos = scale*Math.sin(lat);  // > FixedRelations.orbitFR:36
    xlos = Math.cos(lat)*Math.cos(lon);  // > FixedRelations.orbitFR:37
    ylos = Math.cos(lat)*Math.sin(lon);  // > FixedRelations.orbitFR:38
    zlos = Math.sin(lat);  // > FixedRelations.orbitFR:39
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["eciplticFR"]) return;
    //compute longitude of Sun (sign reversed)  // > FixedRelations.eciplticFR:1
    lonS = -Math.atan2(-yE,-xE);  // > FixedRelations.eciplticFR:2
    //compute distance from Earth to planet  // > FixedRelations.eciplticFR:3
    dist = Math.sqrt((xP-xE)*(xP-xE)+(yP-yE)*(yP-yE)+zP*zP);  // > FixedRelations.eciplticFR:4
    //check to see if Sun is closer to Earth than planet  // > FixedRelations.eciplticFR:5
    if (rE < dist) {  // > FixedRelations.eciplticFR:6
      sunFront=true;}  // > FixedRelations.eciplticFR:7
    else {  // > FixedRelations.eciplticFR:8
      sunFront=false;}  // > FixedRelations.eciplticFR:9
    //de-activate ecliptic trace when too close to edge  // > FixedRelations.eciplticFR:10
    if ((Math.PI-Math.abs(lon))<0.05) {  // > FixedRelations.eciplticFR:11
      traceon=false;  // > FixedRelations.eciplticFR:12
    }  // > FixedRelations.eciplticFR:13
    else {  // > FixedRelations.eciplticFR:14
      traceon=true;}  // > FixedRelations.eciplticFR:15
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _phiMercuryLength;

    __odeSelf._getOdeVars = function (){ return["phiE","phi","phiMercury","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _phiMercuryLength = phiMercury.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=phiE) __mustReinitialize = true;
        __state[__cIn++] = phiE;
        if (__state[__cIn]!=phi) __mustReinitialize = true;
        __state[__cIn++] = phi;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_phiMercuryLength; __j++)
           if (__state[__n++]!=phiMercury[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_phiMercuryLength; __j++) {
          __state[__cIn++] = phiMercury[__j];
        }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_phiMercuryLength != phiMercury.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        phiE = __state[__cOut++];
        phi = __state[__cOut++];
        for (__i=0;__i<_phiMercuryLength; __i++) {
          phiMercury[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var phiE = _aState[__cOut++];
        var phi = _aState[__cOut++];
        var phiMercury = [];
        for (__i=0;__i<_phiMercuryLength; __i++) {
          phiMercury[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 2*pi*(1+eE*Math.cos(phiE))*(1+eE*Math.cos(phiE))/Math.pow(aE*(1-eE*eE),1.5); // Rate for ODE: Evol Page:phiE
        _aRate[__cRate++] = 2*pi*(1+e*Math.cos(phi))*(1+e*Math.cos(phi))/Math.pow(a*(1-e*e),1.5); // Rate for ODE: Evol Page:phi
        var i;
        for (i=0;i<_phiMercuryLength;i++) {
          _aRate[__cRate++] = Array.isArray(2*pi*(1+eMercury[i]*Math.cos(phiMercury[i]))*(1+eMercury[i]*Math.cos(phiMercury[i]))/Math.pow(aMercury[i]*(1-eMercury[i]*eMercury[i]),1.5)) ? 2*pi*(1+eMercury[i]*Math.cos(phiMercury[i]))*(1+eMercury[i]*Math.cos(phiMercury[i]))/Math.pow(aMercury[i]*(1-eMercury[i]*eMercury[i]),1.5)[i] : 2*pi*(1+eMercury[i]*Math.cos(phiMercury[i]))*(1+eMercury[i]*Math.cos(phiMercury[i]))/Math.pow(aMercury[i]*(1-eMercury[i]*eMercury[i]),1.5); // Rate for ODE: Evol Page:phiMercury
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var phiE = _aState[__cOut++];
        var phi = _aState[__cOut++];
        var phiMercury = [];
        for (__i=0;__i<_phiMercuryLength; __i++) {
          phiMercury[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        phiE = __state[__cOut++];
        phi = __state[__cOut++];
        for (__i=0;__i<_phiMercuryLength; __i++) {
          phiMercury[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = phiE;
        __state[__cIn++] = phi;
        for (__j=0;__j<_phiMercuryLength; __j++) {
          __state[__cIn++] = phiMercury[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var phiE = _aState[__cOut++];
        var phi = _aState[__cOut++];
        var phiMercury = [];
        for (__i=0;__i<_phiMercuryLength; __i++) {
          phiMercury[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return phi-2*pi;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        phiE = __state[__cOut++];
        phi = __state[__cOut++];
        for (__i=0;__i<_phiMercuryLength; __i++) {
          phiMercury[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = phiE;
        __state[__cIn++] = phi;
        for (__j=0;__j<_phiMercuryLength; __j++) {
          __state[__cIn++] = phiMercury[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_phiE(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_phi(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_phiMercury(__time) {
    var __beginIndex = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(phiMercury.length),__beginIndex,phiMercury.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new gravity09_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.drawingPanel3D.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumZ",  function() { return zmax; }, function(_v) { zmax = _v; } ); // HtmlView Page linking property 'MaximumZ' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumY",  function() { return scale; }, function(_v) { scale = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumX",  function() { return scale; }, function(_v) { scale = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumX",  function() { return -scale; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumY",  function() { return -scale; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumZ",  function() { return zmin; }, function(_v) { zmin = _v; } ); // HtmlView Page linking property 'MinimumZ' for element 'drawingPanel3D'
          _view.drawingPanel3D.setAction("OnZoom", function(_data,_info) {
  _view.drawingPanel3D.setCamLocX(Math.min(40,_view.drawingPanel3D.getCamLocX()));
  _view.drawingPanel3D.setCamLocX(Math.max(1,_view.drawingPanel3D.getCamLocX()));

}); // HtmlView Page setting action 'OnZoom' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("DecorationType",  function() { return decorationtypeaxes; }, function(_v) { decorationtypeaxes = _v; } ); // HtmlView Page linking property 'DecorationType' for element 'drawingPanel3D'
          _view.Sun.linkProperty("Radius",  function() { return 0.05*scale; } ); // HtmlView Page linking property 'Radius' for element 'Sun'
          _view.Sun2.linkProperty("SizeX",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeX' for element 'Sun2'
          _view.Sun2.linkProperty("Z",  function() { return 0.07*scale; } ); // HtmlView Page linking property 'Z' for element 'Sun2'
          _view.Sun2.linkProperty("SizeZ",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeZ' for element 'Sun2'
          _view.Sun2.linkProperty("SizeY",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeY' for element 'Sun2'
          _view.Earth.linkProperty("Radius",  function() { return 0.03*scale; } ); // HtmlView Page linking property 'Radius' for element 'Earth'
          _view.Earth.linkProperty("X",  function() { return xE; }, function(_v) { xE = _v; } ); // HtmlView Page linking property 'X' for element 'Earth'
          _view.Earth.linkProperty("Y",  function() { return yE; }, function(_v) { yE = _v; } ); // HtmlView Page linking property 'Y' for element 'Earth'
          _view.eTrace.linkProperty("Connected",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Connected' for element 'eTrace'
          _view.eTrace.linkProperty("InputX",  function() { return xE; }, function(_v) { xE = _v; } ); // HtmlView Page linking property 'InputX' for element 'eTrace'
          _view.eTrace.linkProperty("Visibility",  function() { return eTrace; }, function(_v) { eTrace = _v; } ); // HtmlView Page linking property 'Visibility' for element 'eTrace'
          _view.eTrace.linkProperty("InputY",  function() { return yE; }, function(_v) { yE = _v; } ); // HtmlView Page linking property 'InputY' for element 'eTrace'
          _view.Earth2.linkProperty("SizeX",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeX' for element 'Earth2'
          _view.Earth2.linkProperty("X",  function() { return xE; }, function(_v) { xE = _v; } ); // HtmlView Page linking property 'X' for element 'Earth2'
          _view.Earth2.linkProperty("Y",  function() { return yE; }, function(_v) { yE = _v; } ); // HtmlView Page linking property 'Y' for element 'Earth2'
          _view.Earth2.linkProperty("Z",  function() { return 0.07*scale; } ); // HtmlView Page linking property 'Z' for element 'Earth2'
          _view.Earth2.linkProperty("SizeZ",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeZ' for element 'Earth2'
          _view.Earth2.linkProperty("SizeY",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeY' for element 'Earth2'
          _view.Planet.linkProperty("Radius",  function() { return 0.03*scale; } ); // HtmlView Page linking property 'Radius' for element 'Planet'
          _view.Planet.linkProperty("X",  function() { return xP; }, function(_v) { xP = _v; } ); // HtmlView Page linking property 'X' for element 'Planet'
          _view.Planet.linkProperty("Y",  function() { return yP; }, function(_v) { yP = _v; } ); // HtmlView Page linking property 'Y' for element 'Planet'
          _view.Planet.linkProperty("Z",  function() { return zP; }, function(_v) { zP = _v; } ); // HtmlView Page linking property 'Z' for element 'Planet'
          _view.pTrace.linkProperty("InputZ",  function() { return zP; }, function(_v) { zP = _v; } ); // HtmlView Page linking property 'InputZ' for element 'pTrace'
          _view.pTrace.linkProperty("Connected",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Connected' for element 'pTrace'
          _view.pTrace.linkProperty("InputX",  function() { return xP; }, function(_v) { xP = _v; } ); // HtmlView Page linking property 'InputX' for element 'pTrace'
          _view.pTrace.linkProperty("Visibility",  function() { return pTrace; }, function(_v) { pTrace = _v; } ); // HtmlView Page linking property 'Visibility' for element 'pTrace'
          _view.pTrace.linkProperty("InputY",  function() { return yP; }, function(_v) { yP = _v; } ); // HtmlView Page linking property 'InputY' for element 'pTrace'
          _view.Planet2.linkProperty("SizeX",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeX' for element 'Planet2'
          _view.Planet2.linkProperty("X",  function() { return xP; }, function(_v) { xP = _v; } ); // HtmlView Page linking property 'X' for element 'Planet2'
          _view.Planet2.linkProperty("Y",  function() { return yP; }, function(_v) { yP = _v; } ); // HtmlView Page linking property 'Y' for element 'Planet2'
          _view.Planet2.linkProperty("Z",  function() { return zP+0.07*scale; } ); // HtmlView Page linking property 'Z' for element 'Planet2'
          _view.Planet2.linkProperty("Text",  function() { return text3D; }, function(_v) { text3D = _v; } ); // HtmlView Page linking property 'Text' for element 'Planet2'
          _view.Planet2.linkProperty("SizeZ",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeZ' for element 'Planet2'
          _view.Planet2.linkProperty("SizeY",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeY' for element 'Planet2'
          _view.earthSunLine.linkProperty("SizeX",  function() { return xE; }, function(_v) { xE = _v; } ); // HtmlView Page linking property 'SizeX' for element 'earthSunLine'
          _view.earthSunLine.linkProperty("SizeY",  function() { return yE; }, function(_v) { yE = _v; } ); // HtmlView Page linking property 'SizeY' for element 'earthSunLine'
          _view.earthPlanet.linkProperty("SizeX",  function() { return xP-xE; } ); // HtmlView Page linking property 'SizeX' for element 'earthPlanet'
          _view.earthPlanet.linkProperty("X",  function() { return xE; }, function(_v) { xE = _v; } ); // HtmlView Page linking property 'X' for element 'earthPlanet'
          _view.earthPlanet.linkProperty("LineColor",  function() { return pColor; }, function(_v) { pColor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'earthPlanet'
          _view.earthPlanet.linkProperty("Y",  function() { return yE; }, function(_v) { yE = _v; } ); // HtmlView Page linking property 'Y' for element 'earthPlanet'
          _view.earthPlanet.linkProperty("SizeZ",  function() { return zP; }, function(_v) { zP = _v; } ); // HtmlView Page linking property 'SizeZ' for element 'earthPlanet'
          _view.earthPlanet.linkProperty("SizeY",  function() { return yP-yE; } ); // HtmlView Page linking property 'SizeY' for element 'earthPlanet'
          _view.PlanetSun.linkProperty("SizeX",  function() { return xP; }, function(_v) { xP = _v; } ); // HtmlView Page linking property 'SizeX' for element 'PlanetSun'
          _view.PlanetSun.linkProperty("LineColor",  function() { return pColor; }, function(_v) { pColor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'PlanetSun'
          _view.PlanetSun.linkProperty("SizeZ",  function() { return zP; }, function(_v) { zP = _v; } ); // HtmlView Page linking property 'SizeZ' for element 'PlanetSun'
          _view.PlanetSun.linkProperty("SizeY",  function() { return yP; }, function(_v) { yP = _v; } ); // HtmlView Page linking property 'SizeY' for element 'PlanetSun'
          _view.sphereSet3D.linkProperty("Radius",  function() { return radius; }, function(_v) { radius = _v; } ); // HtmlView Page linking property 'Radius' for element 'sphereSet3D'
          _view.sphereSet3D.linkProperty("TextureUrl",  function() { return textureurl; }, function(_v) { textureurl = _v; } ); // HtmlView Page linking property 'TextureUrl' for element 'sphereSet3D'
          _view.sphereSet3D.linkProperty("X",  function() { return xPMercury; }, function(_v) { xPMercury = _v; } ); // HtmlView Page linking property 'X' for element 'sphereSet3D'
          _view.sphereSet3D.linkProperty("Y",  function() { return yPMercury; }, function(_v) { yPMercury = _v; } ); // HtmlView Page linking property 'Y' for element 'sphereSet3D'
          _view.sphereSet3D.linkProperty("Z",  function() { return zPMercury; }, function(_v) { zPMercury = _v; } ); // HtmlView Page linking property 'Z' for element 'sphereSet3D'
          _view.textSet3D.linkProperty("SizeX",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeX' for element 'textSet3D'
          _view.textSet3D.linkProperty("X",  function() { return xPMercury; }, function(_v) { xPMercury = _v; } ); // HtmlView Page linking property 'X' for element 'textSet3D'
          _view.textSet3D.linkProperty("Y",  function() { return yPMercury; }, function(_v) { yPMercury = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet3D'
          _view.textSet3D.linkProperty("Z",  function() { return zPMercurytext; }, function(_v) { zPMercurytext = _v; } ); // HtmlView Page linking property 'Z' for element 'textSet3D'
          _view.textSet3D.linkProperty("Text",  function() { return names; }, function(_v) { names = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet3D'
          _view.textSet3D.linkProperty("SizeZ",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeZ' for element 'textSet3D'
          _view.textSet3D.linkProperty("SizeY",  function() { return scale/10; } ); // HtmlView Page linking property 'SizeY' for element 'textSet3D'
          _view.cylinder3D.linkProperty("SizeX",  function() { return 2*scale; } ); // HtmlView Page linking property 'SizeX' for element 'cylinder3D'
          _view.cylinder3D.linkProperty("Visibility",  function() { return showEcl; }, function(_v) { showEcl = _v; } ); // HtmlView Page linking property 'Visibility' for element 'cylinder3D'
          _view.cylinder3D.linkProperty("SizeY",  function() { return 2*scale; } ); // HtmlView Page linking property 'SizeY' for element 'cylinder3D'
          _view.rotateZ.linkProperty("Transformation",  function() { return [[lonAN+pi/2,0,0,1]]; } ); // HtmlView Page linking property 'Transformation' for element 'rotateZ'
          _view.rotatey.linkProperty("Transformation",  function() { return [[-incl,0,1,0]]; } ); // HtmlView Page linking property 'Transformation' for element 'rotatey'
          _view.orbitalPlane.linkProperty("Transformation",  function() { return [[-inclDeg*pi/180,0,0,0]]; } ); // HtmlView Page linking property 'Transformation' for element 'orbitalPlane'
          _view.orbitalPlane.linkProperty("SizeX",  function() { return 2*scale; } ); // HtmlView Page linking property 'SizeX' for element 'orbitalPlane'
          _view.orbitalPlane.linkProperty("Visibility",  function() { return poPlane; }, function(_v) { poPlane = _v; } ); // HtmlView Page linking property 'Visibility' for element 'orbitalPlane'
          _view.orbitalPlane.linkProperty("SizeY",  function() { return 2*scale; } ); // HtmlView Page linking property 'SizeY' for element 'orbitalPlane'
          _view.controlPanel.linkProperty("Display",  function() { return !print?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'controlPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["Select_Planet","Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune","Pluto","Chelyabinsk Meteoroid","","","Front View","Top View","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  // "Select_Planet","Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune","Pluto","Chelyabinsk Meteoroid"
  //var option = _view.comboBox.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if (option== "Mercury") {
    cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 0.3871; //Mean Distance from the Sun (AU)
    e = 0.2056; // Orbital  Eccentricity
    inclDeg = 7.0049; // Inclination to ecliptic (degrees)
    lonANdeg = 48.3317; //longitude of planet's ascending node in degrees
    argDeg = 29.1248; //argument of planet's perihelion in degrees
  //    _view.resetTraces();
  //  scaleStars();
  text3D = "Mercury"; // added by lookang to make text appear in the gallaxy
  T = 1.88;
  dt=0.01;
  _view.drawingPanel3D.setCamLocX(3);
  }
  //printing starts
  else if (option == "print"){
    print = true;
    }
  //printing ends
  else if(option== "Venus")
  {
    cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 0.7233;
    e = 0.0068;
    inclDeg = 3.3947;
    lonANdeg = 76.6807;
    argDeg = 54.8523;
  //  _view.resetTraces();
  //  scaleStars();
  text3D = "Venus"; // added by lookang to make text appear in the gallaxy
  TVenus = 0.615;
  dt=0.01;
  _view.drawingPanel3D.setCamLocX(3);
  }
  else if(option== "Earth")
  {
    cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 1.0;
    e = 0.0167;
    inclDeg = 0.0;
    lonANdeg = 258.7; // by trail or error //102.9472; //348.73936; // http://en.wikipedia.org/wiki/Earth
    argDeg = 114.20783; //http://en.wikipedia.org/wiki/Earth
  //  _view.resetTraces();
   // scaleStars();
  text3D = "Earth"; // added by lookang to make text appear in the gallaxy
  TEarth = 1.0;
  dt=0.01;
  _view.drawingPanel3D.setCamLocX(3);
  }
  else if(option== "Mars")
  {
    cmodeenabled=1;
     mars=true;
   userDef=false;
    notmars=false;
    a = 1.5237;
    e = 0.0934;
    inclDeg = 1.8506;
    lonANdeg = 49.5785;
    argDeg = 286.4623;
   // _view.resetTraces();
  //  scaleStars();
  text3D = "Mars";// added by lookang to make text appear in the gallaxy
  TMars = 1.88;
  dt=0.01;
  _view.drawingPanel3D.setCamLocX(3);
  }
  else if(option== "Jupiter")
  {
    cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 5.2034;
    e = 0.0484;
    inclDeg = 1.3053;
    lonANdeg = 100.5562;
    argDeg = 274.1977;
   // _view.resetTraces();
   // scaleStars();
  text3D = "Jupiter";// added by lookang to make text appear in the gallaxy
  radius[3] = 0.03*scale;
  radius[4] = 0.03*scale;
  radius[5] = 0.03*scale;
  radius[6] = 0.03*scale;
  radius[7] = 0.03*scale;
  _view.drawingPanel3D.setCamLocX(5);
  }
  else if(option== "Saturn")
  {
    cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 9.5371;
    e = 0.0542;
    inclDeg = 2.4845;
    lonANdeg = 113.7150;
    argDeg = 338.7169;
   // _view.resetTraces();
  //  scaleStars();
  text3D = "Saturn";// added by lookang to make text appear in the gallaxy
  dt=0.1;
  radius[3] = 0.03*scale;
  radius[4] = 0.03*scale;
  radius[5] = 0.03*scale;
  radius[6] = 0.03*scale;
  radius[7] = 0.03*scale;
  }
  else if(option== "UserDefine")
  {
    cmodeenabled=1;
    userDef=true;
    notmars=true;
    mars=false;
    a = 1.5237;
    e = 0.0934;
    inclDeg = 1.8506;
    lonANdeg = 49.5785;
    argDeg = 286.4623;
   // _view.resetTraces();
  //  scaleStars();
  text3D = "UserDef";// added by lookang to make text appear in the gallaxy
  }
  //added by lookang to include Uranus  	Neptune  	Pluto
  //http://www.nasm.si.edu/etp/ss/ss_planetdata.html
  else if(option== "Uranus")
  { 
  cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 19.19; //Mean Distance from the Sun (AU)
    e = 0.046;
    inclDeg = 0.77; // Inclination to ecliptic (degrees)
    lonANdeg = 73.989821; // from wikipedia
    argDeg = 96.541318; // from wikipedia
  //  _view.resetTraces();
  //  scaleStars();
  text3D = "Uranus"; // added by lookang to make text appear in the gallaxy
  dt=0.5;
  radius[3] = 0.03*scale;
  radius[4] = 0.03*scale;
  radius[5] = 0.03*scale;
  radius[6] = 0.03*scale;
  radius[7] = 0.03*scale;
  }
  else if(option== "Neptune")
  { 
  cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 30.06;
    e = 0.010;
    inclDeg = 1.77; // Inclination to ecliptic (degrees)
    lonANdeg = 131.794310; // from wikipedia
    argDeg = 265.646853; // from wikipedia
  //  _view.resetTraces();
   // scaleStars();
  text3D = "Neptune"; // added by lookang to make text appear in the gallaxy
  dt=1;
  //stepperdisplay=4;
  radius[3] = 0.03*scale;
  radius[4] = 0.03*scale;
  radius[5] = 0.03*scale;
  radius[6] = 0.03*scale;
  radius[7] = 0.03*scale;
  }
  else if(option== "Pluto")
  { 
  cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    a = 39.48;  //Mean Distance from the Sun (AU)
    e = 0.248; //Orbital  Eccentricity
    inclDeg = 17.15; // Inclination to ecliptic (degrees)
    lonANdeg = 110.30347; // from wikipedia
    argDeg = 113.76329; // from wikipedia
  //  _view.resetTraces();
   // scaleStars();
  text3D = "Pluto"; // added by lookang to make text appear in the gallaxy
  dt=2.0;
  radius[3] = 0.03*scale;
  radius[4] = 0.03*scale;
  radius[5] = 0.03*scale;
  radius[6] = 0.03*scale;
  radius[7] = 0.03*scale;
  }
  else if(option== "Chelyabinsk Meteoroid")
  { 
  cmodeenabled=1;
    userDef=false;
    notmars=true;
    mars=false;
    //taken from http://urania.udea.edu.co/sitios/facom/research/chelyabinsk-meteoroid.php?#
    a = 1.37;  //Mean Distance from the Sun (AU)
    e = 0.48; //Orbital  Eccentricity
    inclDeg = 4.31; // Inclination to ecliptic (degrees)
    lonANdeg = 326.5; // from wikipedia capital omega
    argDeg = 98.0; // from wikipedia small omega
  //  _view.resetTraces();
  //  scaleStars();
  text3D = "Chelyabinsk Meteoroid"; // added by lookang to make text appear in the gallaxy
  dt=0.01;
  }
  else if(option== "Select_Planet")
  {
   cmodeenabled=0;
  }
  //scalecamera = scale;
  scale = 1.5*Math.max(a/(1-e*e),aE/(1-eE*eE));
  radius[0] = 0.03*scale;
  radius[1] = 0.03*scale;
  radius[2] = 0.03*scale;
  radius[3] = 0.03*scale;
  radius[4] = 0.03*scale;
  radius[5] = 0.03*scale;
  radius[6] = 0.03*scale;
  radius[7] = 0.03*scale;
  radius10 = 0.03*scale;
  alert( "play the simulation and record the time for one revolution");
   
  if (option== "labels show") {
  text=true;
    
  }
  else if(option== "labels off")
  {
    text=false;
  }
  //"Earth trail show","Earth trail off"
  else if (option== "Earth trail show") {
  eTrace=true;
    
  }
  else if(option== "Earth trail off")
  {
   eTrace=false;
  }
  //"Planet trail show","Planet trail off"
  else if (option== "Planet trail show") {
  pTrace=true;
    
  }
  else if(option== "Planet trail off")
  {
   pTrace=false;
  }
  //"axes show","axes off"
  else if (option== "axes show") {
  decorationtypeaxes="CENTERED_AXES";
    
  }
  else if(option== "axes off")
  {
   decorationtypeaxes="NONE";
  }
  //"speed up","speed down"
  else if (option== "speed up") {
  dt=dt*10;
    
  }
  else if (option== "speed up2") {
  dt=dt*10;
    
  }
  else if(option== "speed down")
  {
  dt=dt*0.1;
  }
  else if(option== "speed down2")
  {
  dt=dt*0.1;
  }
  //"Show Ecliptic Plane","Hide Ecliptic Plane"
  else if(option== "Show Ecliptic Plane")
  {
  showEcl=true;
  }
  else if(option== "Hide Ecliptic Plane")
  {
  showEcl=false;
  }
  //
  else if(option== "Show Planet Orbital Plane")
  {
  poPlane=true;
  }
  else if(option== "Hide Planet Orbital Plane")
  {
  poPlane=false;
  }
   //"PERSPECTIVE_OFF"
  else if ( option=="Isometric"){
  _view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  _view.drawingPanel3D.setCamLocX(0.5);
  }
  //"PERSPECTIVE_ON"
  else if ( option=="Real 3D"){
  _view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_ON");
  _view.drawingPanel3D.setCamLocX(2);
  }
  else if ( option=="Front View"){
  //_view.drawingPanel3D.setProperty("Projection","PLANAR_XY");
  _view.drawingPanel3D.setCamLocX(2);
  _view.drawingPanel3D.setCamLocY(0);
  _view.drawingPanel3D.setCamLocZ(0);
  _view.drawingPanel3D.setCamTilt(0); //-90
  _view.drawingPanel3D.setCamAltitude(0);
  _view.drawingPanel3D.setCamAzimuth(0);
  // new method
  //rotationangle=0; //release the rotationangle compensated by _view.drawingPanel3D.setCamTilt(0); //-90
  //_view.drawingPanel3D.setCamTilt(-90);
  }
  else if ( option=="Side View"){
  //_view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  _view.drawingPanel3D.setCamLocX(2);
  _view.drawingPanel3D.setCamLocY(0);
  _view.drawingPanel3D.setCamLocZ(0);
  _view.drawingPanel3D.setCamTilt(0);
  _view.drawingPanel3D.setCamAltitude(0);
  _view.drawingPanel3D.setCamAzimuth(90);
  //rotationangle=0; //release the rotationangle
  }
  else if ( option=="Top View"){
  //_view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  //_view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  _view.drawingPanel3D.setCamLocX(2);
  //_view.drawingPanel3D.setCamLocY(0);
  //_view.drawingPanel3D.setCamLocZ(0);
  _view.drawingPanel3D.setCamTilt(0);
  _view.drawingPanel3D.setCamAltitude(90);
  _view.drawingPanel3D.setCamAzimuth(0);
  //rotationangle=0; //release the rotationangle
  }
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    //var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Disabled",  function() { return t>0; } ); // HtmlView Page linking property 'Disabled' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.comboBox2.linkProperty("Options",  function() { return ["Earth trail show","Earth trail off","Planet trail show","Planet trail off","axes show","axes off","Show Ecliptic Plane","Hide Ecliptic Plane","Show Planet Orbital Plane","Hide Planet Orbital Plane","speed up","speed up2","speed down","speed down2","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox2'
          _view.comboBox2.setAction("OnChange", function(_data,_info) {
  //var option = _view.comboBox2.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox2.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  // "Select_Planet","Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune","Pluto","Chelyabinsk Meteoroid"
  if (option== "labels show") {
  text=true;
    
  }
  //printing starts
  else if (option == "print"){
    print = true;
    }
  //printing ends
  else if(option== "labels off")
  {
    text=false;
  }
  //"Earth trail show","Earth trail off"
  else if (option== "Earth trail show") {
  eTrace=true;
    
  }
  else if(option== "Earth trail off")
  {
   eTrace=false;
  }
  //"Planet trail show","Planet trail off"
  else if (option== "Planet trail show") {
  pTrace=true;
    
  }
  else if(option== "Planet trail off")
  {
   pTrace=false;
  }
  //"axes show","axes off"
  else if (option== "axes show") {
  decorationtypeaxes="CENTERED_AXES";
    
  }
  else if(option== "axes off")
  {
   decorationtypeaxes="NONE";
  }
  //"speed up","speed down"
  else if (option== "speed up") {
  dt=dt*10;
    
  }
  else if (option== "speed up2") {
  dt=dt*10;
    
  }
  else if(option== "speed down")
  {
  dt=dt*0.1;
  }
  else if(option== "speed down2")
  {
  dt=dt*0.1;
  }
  //"Show Ecliptic Plane","Hide Ecliptic Plane"
  else if(option== "Show Ecliptic Plane")
  {
  showEcl=true;
  }
  else if(option== "Hide Ecliptic Plane")
  {
  showEcl=false;
  }
  //
  else if(option== "Show Planet Orbital Plane")
  {
  poPlane=true;
  }
  else if(option== "Hide Planet Orbital Plane")
  {
  poPlane=false;
  }
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox2'
          _view.comboBox2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox2'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.step.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'step'
          _view.step.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'step'
          _view.init.setAction("OnClick", function(_data,_info) {
  //_view.eTrace.newSegment();
  _view.pTrace.newSegment();
  t =0;
  _initialize();

}); // HtmlView Page setting action 'OnClick' for element 'init'
          _view.init.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'init'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.zoom.linkProperty("Value",  function() { return scale; }, function(_v) { scale = _v; } ); // HtmlView Page linking property 'Value' for element 'zoom'
          _view.zoom2.linkProperty("Value",  function() { return scale; }, function(_v) { scale = _v; } ); // HtmlView Page linking property 'Value' for element 'zoom2'
          _view.time.linkProperty("Visibility",  function() { return !print; } ); // HtmlView Page linking property 'Visibility' for element 'time'
          _view.timeLabel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'timeLabel2'
          _view.timeField2.linkProperty("Value",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'Value' for element 'timeField2'
          _view.timeField2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'timeField2'
          _view.messagesLabel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'messagesLabel2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(stepperdisplay);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function gravity09_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = gravity09_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./gravity09.xhtml');

  return _view;
} // end of main function

function gravity09_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displayPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'displayPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'topPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'topPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topPanel'
      ;

    _view._addElement(EJSS_DRAWING3D.drawingPanel,"drawingPanel3D", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel3D'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel3D'
      .setProperty("Background","Black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'drawingPanel3D'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel3D'
      .setProperty("Lights",[0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Lights' for element 'drawingPanel3D'
      ;

    _view._addElement(EJSS_DRAWING3D.sphere,"Sun", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'Sun'
      .setProperty("TextureUrl","./KeplerSystem/640px-Map_of_the_full_sun.jpg") // EJsS HtmlView.HtmlView Page: setting property 'TextureUrl' for element 'Sun'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Sun'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Sun'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Sun'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Sun'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'Sun'
      ;

    _view._addElement(EJSS_DRAWING3D.text,"Sun2", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'Sun2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Sun2'
      .setProperty("FontColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'Sun2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Sun2'
      .setProperty("Text","Sun") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Sun2'
      .setProperty("Font","normal normal 49px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Sun2'
      ;

    _view._addElement(EJSS_DRAWING3D.sphere,"Earth", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'Earth'
      .setProperty("TextureUrl","./KeplerSystem/2_no_clouds_2k.jpg") // EJsS HtmlView.HtmlView Page: setting property 'TextureUrl' for element 'Earth'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Earth'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Earth'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'Earth'
      ;

    _view._addElement(EJSS_DRAWING3D.trail,"eTrace", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'eTrace'
      .setProperty("InputZ",0) // EJsS HtmlView.HtmlView Page: setting property 'InputZ' for element 'eTrace'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'eTrace'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'eTrace'
      ;

    _view._addElement(EJSS_DRAWING3D.text,"Earth2", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'Earth2'
      .setProperty("FontColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'Earth2'
      .setProperty("Text","Earth") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Earth2'
      .setProperty("Font","normal normal 49px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Earth2'
      ;

    _view._addElement(EJSS_DRAWING3D.sphere,"Planet", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'Planet'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Planet'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Planet'
      ;

    _view._addElement(EJSS_DRAWING3D.trail,"pTrace", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'pTrace'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'pTrace'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'pTrace'
      ;

    _view._addElement(EJSS_DRAWING3D.text,"Planet2", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'Planet2'
      .setProperty("FontColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'Planet2'
      .setProperty("Font","normal normal 49px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Planet2'
      ;

    _view._addElement(EJSS_DRAWING3D.segment,"earthSunLine", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'earthSunLine'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'earthSunLine'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'earthSunLine'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'earthSunLine'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'earthSunLine'
      .setProperty("SizeZ",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'earthSunLine'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'earthSunLine'
      ;

    _view._addElement(EJSS_DRAWING3D.segment,"earthPlanet", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'earthPlanet'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'earthPlanet'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'earthPlanet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'earthPlanet'
      ;

    _view._addElement(EJSS_DRAWING3D.segment,"PlanetSun", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'PlanetSun'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'PlanetSun'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'PlanetSun'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'PlanetSun'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'PlanetSun'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"planets", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'planets'
      ;

    _view._addElement(EJSS_DRAWING3D.sphereSet,"sphereSet3D", _view.planets) // EJsS HtmlView.HtmlView Page: declaration of element 'sphereSet3D'
      .setProperty("NumberOfElements",8) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'sphereSet3D'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'sphereSet3D'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sphereSet3D'
      ;

    _view._addElement(EJSS_DRAWING3D.textSet,"textSet3D", _view.planets) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet3D'
      .setProperty("NumberOfElements",8) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'textSet3D'
      .setProperty("FontColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FontColor' for element 'textSet3D'
      .setProperty("Font","normal normal 49px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'textSet3D'
      ;

    _view._addElement(EJSS_DRAWING3D.cylinder,"cylinder3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'cylinder3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'cylinder3D'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'cylinder3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'cylinder3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'cylinder3D'
      .setProperty("SizeZ",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'cylinder3D'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'cylinder3D'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'cylinder3D'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'cylinder3D'
      .setProperty("Resolution",72) // EJsS HtmlView.HtmlView Page: setting property 'Resolution' for element 'cylinder3D'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"rotateZ", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'rotateZ'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"rotatey", _view.rotateZ) // EJsS HtmlView.HtmlView Page: declaration of element 'rotatey'
      ;

    _view._addElement(EJSS_DRAWING3D.cylinder,"orbitalPlane", _view.rotatey) // EJsS HtmlView.HtmlView Page: declaration of element 'orbitalPlane'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'orbitalPlane'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'orbitalPlane'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'orbitalPlane'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'orbitalPlane'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'orbitalPlane'
      .setProperty("SizeZ",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'orbitalPlane'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'orbitalPlane'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'orbitalPlane'
      .setProperty("Resolution",72) // EJsS HtmlView.HtmlView Page: setting property 'Resolution' for element 'orbitalPlane'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox2'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox2'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"step", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'step'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'step'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'step'
      ;

    _view._addElement(EJSS_INTERFACE.button,"init", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'init'
      .setProperty("Tooltip","initialize to t=0 while retaining the traces") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'init'
      .setProperty("Text","▼") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'init'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"zoom", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'zoom'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'zoom'
      .setProperty("Maximum",30) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'zoom'
      .setProperty("Background","Black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'zoom'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'zoom'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"zoom2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'zoom2'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'zoom2'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'zoom2'
      .setProperty("Tooltip","zoom") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'zoom2'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'zoom2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"time", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'time'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"timeLabel2", _view.time) // EJsS HtmlView.HtmlView Page: declaration of element 'timeLabel2'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'timeLabel2'
      .setProperty("Tooltip","time") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'timeLabel2'
      .setProperty("Text","Time = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'timeLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"timeField2", _view.time) // EJsS HtmlView.HtmlView Page: declaration of element 'timeField2'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'timeField2'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'timeField2'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'timeField2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"messagesLabel2", _view.time) // EJsS HtmlView.HtmlView Page: declaration of element 'messagesLabel2'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'messagesLabel2'
      .setProperty("Tooltip","years") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'messagesLabel2'
      .setProperty("Text"," years ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'messagesLabel2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Solar System Model<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity09/KeplerSystem/2016-07-01_1512s.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity09/01authorlookang50x50.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity09/01authortoddtimberlake_icon.png" />
 lookang (weelookang@gmail.com); Todd TimberLake
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Creative Commons Attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new gravity09("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity09/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
