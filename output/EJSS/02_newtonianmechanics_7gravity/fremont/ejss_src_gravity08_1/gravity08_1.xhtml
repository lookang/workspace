<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>NewtonsMountain</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function gravity08_1(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var inputdropmenu; // EjsS Model.Variables.modelVars.inputdropmenu
  var print; // EjsS Model.Variables.modelVars.print
  var fontb; // EjsS Model.Variables.modelVars.fontb
  var font; // EjsS Model.Variables.modelVars.font
  var R; // EjsS Model.Variables.modelVars.R
  var xmin; // EjsS Model.Variables.modelVars.xmin
  var xmax; // EjsS Model.Variables.modelVars.xmax
  var ymin; // EjsS Model.Variables.modelVars.ymin
  var ymax; // EjsS Model.Variables.modelVars.ymax
  var pi; // EjsS Model.Variables.modelVars.pi
  var x; // EjsS Model.Variables.modelVars.x
  var y; // EjsS Model.Variables.modelVars.y
  var r; // EjsS Model.Variables.modelVars.r
  var rmax; // EjsS Model.Variables.modelVars.rmax
  var anglex; // EjsS Model.Variables.modelVars.anglex
  var anglexs; // EjsS Model.Variables.modelVars.anglexs
  var vi; // EjsS Model.Variables.modelVars.vi
  var vx; // EjsS Model.Variables.modelVars.vx
  var vy; // EjsS Model.Variables.modelVars.vy
  var v; // EjsS Model.Variables.modelVars.v
  var vxdrag; // EjsS Model.Variables.modelVars.vxdrag
  var vydrag; // EjsS Model.Variables.modelVars.vydrag
  var ax; // EjsS Model.Variables.modelVars.ax
  var ay; // EjsS Model.Variables.modelVars.ay
  var a; // EjsS Model.Variables.modelVars.a
  var anglev; // EjsS Model.Variables.modelVars.anglev
  var anglevf; // EjsS Model.Variables.modelVars.anglevf
  var anglevs; // EjsS Model.Variables.modelVars.anglevs
  var t; // EjsS Model.Variables.modelVars.t
  var dt; // EjsS Model.Variables.modelVars.dt
  var G; // EjsS Model.Variables.modelVars.G
  var M; // EjsS Model.Variables.modelVars.M
  var fx; // EjsS Model.Variables.modelVars.fx
  var fy; // EjsS Model.Variables.modelVars.fy
  var m; // EjsS Model.Variables.modelVars.m
  var theta; // EjsS Model.Variables.modelVars.theta
  var mode; // EjsS Model.Variables.modelVars.mode
  var xshow; // EjsS Model.Variables.modelVars.xshow
  var backgroundcolor; // EjsS Model.Variables.modelVars.backgroundcolor
  var white; // EjsS Model.Variables.modelVars.white
  var memorycolor; // EjsS Model.Variables.modelVars.memorycolor
  var memorycolorpe; // EjsS Model.Variables.modelVars.memorycolorpe
  var memorycolorke; // EjsS Model.Variables.modelVars.memorycolorke
  var memorycolorte; // EjsS Model.Variables.modelVars.memorycolorte

  var selectedmodel; // EjsS Model.Variables.model.selectedmodel
  var showmodel; // EjsS Model.Variables.model.showmodel
  var functionY; // EjsS Model.Variables.model.functionY
  var solutionY; // EjsS Model.Variables.model.solutionY

  var selected; // EjsS Model.Variables.menu.selected

  var pass; // EjsS Model.Variables.controlVars.pass
  var point; // EjsS Model.Variables.controlVars.point
  var center; // EjsS Model.Variables.controlVars.center
  var velocity; // EjsS Model.Variables.controlVars.velocity
  var force; // EjsS Model.Variables.controlVars.force
  var trace; // EjsS Model.Variables.controlVars.trace
  var diagram; // EjsS Model.Variables.controlVars.diagram

  var showDialog2; // EjsS Model.Variables.graphs.showDialog2
  var showDialog2sy; // EjsS Model.Variables.graphs.showDialog2sy
  var am; // EjsS Model.Variables.graphs.am
  var KE; // EjsS Model.Variables.graphs.KE
  var KEmax; // EjsS Model.Variables.graphs.KEmax
  var KEs; // EjsS Model.Variables.graphs.KEs
  var PE; // EjsS Model.Variables.graphs.PE
  var PEs; // EjsS Model.Variables.graphs.PEs
  var PEmax; // EjsS Model.Variables.graphs.PEmax
  var TE; // EjsS Model.Variables.graphs.TE
  var TEs; // EjsS Model.Variables.graphs.TEs
  var TEmax; // EjsS Model.Variables.graphs.TEmax
  var QE; // EjsS Model.Variables.graphs.QE
  var xvstime; // EjsS Model.Variables.graphs.xvstime
  var yvstime; // EjsS Model.Variables.graphs.yvstime
  var rvstime; // EjsS Model.Variables.graphs.rvstime
  var KEvstime; // EjsS Model.Variables.graphs.KEvstime
  var PEvstime; // EjsS Model.Variables.graphs.PEvstime
  var TEvstime; // EjsS Model.Variables.graphs.TEvstime
  var QEvstime; // EjsS Model.Variables.graphs.QEvstime
  var withs; // EjsS Model.Variables.graphs.withs
  var withv; // EjsS Model.Variables.graphs.withv
  var witha; // EjsS Model.Variables.graphs.witha
  var withE; // EjsS Model.Variables.graphs.withE
  var count; // EjsS Model.Variables.graphs.count
  var kexarray; // EjsS Model.Variables.graphs.kexarray
  var keyarray; // EjsS Model.Variables.graphs.keyarray
  var pexarray; // EjsS Model.Variables.graphs.pexarray
  var peyarray; // EjsS Model.Variables.graphs.peyarray
  var texarray; // EjsS Model.Variables.graphs.texarray
  var teyarray; // EjsS Model.Variables.graphs.teyarray

  var cta; // EjsS Model.Variables.geostationary.cta
  var omega; // EjsS Model.Variables.geostationary.omega
  var referenceframe; // EjsS Model.Variables.geostationary.referenceframe
  var text3; // EjsS Model.Variables.geostationary.text3
  var text; // EjsS Model.Variables.geostationary.text
  var text2; // EjsS Model.Variables.geostationary.text2
  var twoD; // EjsS Model.Variables.geostationary.twoD
  var threeD; // EjsS Model.Variables.geostationary.threeD
  var active; // EjsS Model.Variables.geostationary.active
  var activeshow; // EjsS Model.Variables.geostationary.activeshow

  var trigger; // EjsS Model.Variables.impluse.trigger
  var circular; // EjsS Model.Variables.impluse.circular
  var xf; // EjsS Model.Variables.impluse.xf
  var yf; // EjsS Model.Variables.impluse.yf
  var size; // EjsS Model.Variables.impluse.size
  var c; // EjsS Model.Variables.impluse.c
  var k; // EjsS Model.Variables.impluse.k
  var v0; // EjsS Model.Variables.impluse.v0
  var next; // EjsS Model.Variables.impluse.next

  var selectedview; // EjsS Model.Variables.layout.selectedview
  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var graph; // EjsS Model.Variables.layout.graph
  var disabled; // EjsS Model.Variables.layout.disabled
  var datashow; // EjsS Model.Variables.layout.datashow
  var datashow2; // EjsS Model.Variables.layout.datashow2
  var drawingsizex; // EjsS Model.Variables.layout.drawingsizex
  var drawingsizey; // EjsS Model.Variables.layout.drawingsizey

  var disabledbutton; // EjsS Model.Variables.dragem.disabledbutton

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      inputdropmenu : inputdropmenu,
      print : print,
      fontb : fontb,
      font : font,
      R : R,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      pi : pi,
      x : x,
      y : y,
      r : r,
      rmax : rmax,
      anglex : anglex,
      anglexs : anglexs,
      vi : vi,
      vx : vx,
      vy : vy,
      v : v,
      vxdrag : vxdrag,
      vydrag : vydrag,
      ax : ax,
      ay : ay,
      a : a,
      anglev : anglev,
      anglevf : anglevf,
      anglevs : anglevs,
      t : t,
      dt : dt,
      G : G,
      M : M,
      fx : fx,
      fy : fy,
      m : m,
      theta : theta,
      mode : mode,
      xshow : xshow,
      backgroundcolor : backgroundcolor,
      white : white,
      memorycolor : memorycolor,
      memorycolorpe : memorycolorpe,
      memorycolorke : memorycolorke,
      memorycolorte : memorycolorte,
      selectedmodel : selectedmodel,
      showmodel : showmodel,
      functionY : functionY,
      solutionY : solutionY,
      selected : selected,
      pass : pass,
      point : point,
      center : center,
      velocity : velocity,
      force : force,
      trace : trace,
      diagram : diagram,
      showDialog2 : showDialog2,
      showDialog2sy : showDialog2sy,
      am : am,
      KE : KE,
      KEmax : KEmax,
      KEs : KEs,
      PE : PE,
      PEs : PEs,
      PEmax : PEmax,
      TE : TE,
      TEs : TEs,
      TEmax : TEmax,
      QE : QE,
      xvstime : xvstime,
      yvstime : yvstime,
      rvstime : rvstime,
      KEvstime : KEvstime,
      PEvstime : PEvstime,
      TEvstime : TEvstime,
      QEvstime : QEvstime,
      withs : withs,
      withv : withv,
      witha : witha,
      withE : withE,
      count : count,
      kexarray : kexarray,
      keyarray : keyarray,
      pexarray : pexarray,
      peyarray : peyarray,
      texarray : texarray,
      teyarray : teyarray,
      cta : cta,
      omega : omega,
      referenceframe : referenceframe,
      text3 : text3,
      text : text,
      text2 : text2,
      twoD : twoD,
      threeD : threeD,
      active : active,
      activeshow : activeshow,
      trigger : trigger,
      circular : circular,
      xf : xf,
      yf : yf,
      size : size,
      c : c,
      k : k,
      v0 : v0,
      next : next,
      selectedview : selectedview,
      isAndroid : isAndroid,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      disabledworld : disabledworld,
      graph : graph,
      disabled : disabled,
      datashow : datashow,
      datashow2 : datashow2,
      drawingsizex : drawingsizex,
      drawingsizey : drawingsizey,
      disabledbutton : disabledbutton
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.inputdropmenu != "undefined") inputdropmenu = json.inputdropmenu;
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.rmax != "undefined") rmax = json.rmax;
    if(typeof json.anglex != "undefined") anglex = json.anglex;
    if(typeof json.anglexs != "undefined") anglexs = json.anglexs;
    if(typeof json.vi != "undefined") vi = json.vi;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.vxdrag != "undefined") vxdrag = json.vxdrag;
    if(typeof json.vydrag != "undefined") vydrag = json.vydrag;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.ay != "undefined") ay = json.ay;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.anglev != "undefined") anglev = json.anglev;
    if(typeof json.anglevf != "undefined") anglevf = json.anglevf;
    if(typeof json.anglevs != "undefined") anglevs = json.anglevs;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.G != "undefined") G = json.G;
    if(typeof json.M != "undefined") M = json.M;
    if(typeof json.fx != "undefined") fx = json.fx;
    if(typeof json.fy != "undefined") fy = json.fy;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.mode != "undefined") mode = json.mode;
    if(typeof json.xshow != "undefined") xshow = json.xshow;
    if(typeof json.backgroundcolor != "undefined") backgroundcolor = json.backgroundcolor;
    if(typeof json.white != "undefined") white = json.white;
    if(typeof json.memorycolor != "undefined") memorycolor = json.memorycolor;
    if(typeof json.memorycolorpe != "undefined") memorycolorpe = json.memorycolorpe;
    if(typeof json.memorycolorke != "undefined") memorycolorke = json.memorycolorke;
    if(typeof json.memorycolorte != "undefined") memorycolorte = json.memorycolorte;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.solutionY != "undefined") solutionY = json.solutionY;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.pass != "undefined") pass = json.pass;
    if(typeof json.point != "undefined") point = json.point;
    if(typeof json.center != "undefined") center = json.center;
    if(typeof json.velocity != "undefined") velocity = json.velocity;
    if(typeof json.force != "undefined") force = json.force;
    if(typeof json.trace != "undefined") trace = json.trace;
    if(typeof json.diagram != "undefined") diagram = json.diagram;
    if(typeof json.showDialog2 != "undefined") showDialog2 = json.showDialog2;
    if(typeof json.showDialog2sy != "undefined") showDialog2sy = json.showDialog2sy;
    if(typeof json.am != "undefined") am = json.am;
    if(typeof json.KE != "undefined") KE = json.KE;
    if(typeof json.KEmax != "undefined") KEmax = json.KEmax;
    if(typeof json.KEs != "undefined") KEs = json.KEs;
    if(typeof json.PE != "undefined") PE = json.PE;
    if(typeof json.PEs != "undefined") PEs = json.PEs;
    if(typeof json.PEmax != "undefined") PEmax = json.PEmax;
    if(typeof json.TE != "undefined") TE = json.TE;
    if(typeof json.TEs != "undefined") TEs = json.TEs;
    if(typeof json.TEmax != "undefined") TEmax = json.TEmax;
    if(typeof json.QE != "undefined") QE = json.QE;
    if(typeof json.xvstime != "undefined") xvstime = json.xvstime;
    if(typeof json.yvstime != "undefined") yvstime = json.yvstime;
    if(typeof json.rvstime != "undefined") rvstime = json.rvstime;
    if(typeof json.KEvstime != "undefined") KEvstime = json.KEvstime;
    if(typeof json.PEvstime != "undefined") PEvstime = json.PEvstime;
    if(typeof json.TEvstime != "undefined") TEvstime = json.TEvstime;
    if(typeof json.QEvstime != "undefined") QEvstime = json.QEvstime;
    if(typeof json.withs != "undefined") withs = json.withs;
    if(typeof json.withv != "undefined") withv = json.withv;
    if(typeof json.witha != "undefined") witha = json.witha;
    if(typeof json.withE != "undefined") withE = json.withE;
    if(typeof json.count != "undefined") count = json.count;
    if(typeof json.kexarray != "undefined") kexarray = json.kexarray;
    if(typeof json.keyarray != "undefined") keyarray = json.keyarray;
    if(typeof json.pexarray != "undefined") pexarray = json.pexarray;
    if(typeof json.peyarray != "undefined") peyarray = json.peyarray;
    if(typeof json.texarray != "undefined") texarray = json.texarray;
    if(typeof json.teyarray != "undefined") teyarray = json.teyarray;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.referenceframe != "undefined") referenceframe = json.referenceframe;
    if(typeof json.text3 != "undefined") text3 = json.text3;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.text2 != "undefined") text2 = json.text2;
    if(typeof json.twoD != "undefined") twoD = json.twoD;
    if(typeof json.threeD != "undefined") threeD = json.threeD;
    if(typeof json.active != "undefined") active = json.active;
    if(typeof json.activeshow != "undefined") activeshow = json.activeshow;
    if(typeof json.trigger != "undefined") trigger = json.trigger;
    if(typeof json.circular != "undefined") circular = json.circular;
    if(typeof json.xf != "undefined") xf = json.xf;
    if(typeof json.yf != "undefined") yf = json.yf;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.v0 != "undefined") v0 = json.v0;
    if(typeof json.next != "undefined") next = json.next;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.datashow != "undefined") datashow = json.datashow;
    if(typeof json.datashow2 != "undefined") datashow2 = json.datashow2;
    if(typeof json.drawingsizex != "undefined") drawingsizex = json.drawingsizex;
    if(typeof json.drawingsizey != "undefined") drawingsizey = json.drawingsizey;
    if(typeof json.disabledbutton != "undefined") disabledbutton = json.disabledbutton;
  };

  _model._inputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "R",  "xmin",  "xmax",  "ymin",  "ymax",  "pi",  "x",  "y",  "r",  "rmax",  "anglex",  "anglexs",  "vi",  "vx",  "vy",  "v",  "vxdrag",  "vydrag",  "ax",  "ay",  "a",  "anglev",  "anglevf",  "anglevs",  "t",  "dt",  "G",  "M",  "fx",  "fy",  "m",  "theta",  "mode",  "xshow",  "backgroundcolor",  "white",  "memorycolor",  "memorycolorpe",  "memorycolorke",  "memorycolorte",  "selectedmodel",  "showmodel",  "functionY",  "solutionY",  "selected",  "pass",  "point",  "center",  "velocity",  "force",  "trace",  "diagram",  "showDialog2",  "showDialog2sy",  "am",  "KE",  "KEmax",  "KEs",  "PE",  "PEs",  "PEmax",  "TE",  "TEs",  "TEmax",  "QE",  "xvstime",  "yvstime",  "rvstime",  "KEvstime",  "PEvstime",  "TEvstime",  "QEvstime",  "withs",  "withv",  "witha",  "withE",  "count",  "kexarray",  "keyarray",  "pexarray",  "peyarray",  "texarray",  "teyarray",  "cta",  "omega",  "referenceframe",  "text3",  "text",  "text2",  "twoD",  "threeD",  "active",  "activeshow",  "trigger",  "circular",  "xf",  "yf",  "size",  "c",  "k",  "v0",  "next",  "selectedview",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "disabledworld",  "graph",  "disabled",  "datashow",  "datashow2",  "drawingsizex",  "drawingsizey",  "disabledbutton"]; 

  _model._outputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "R",  "xmin",  "xmax",  "ymin",  "ymax",  "pi",  "x",  "y",  "r",  "rmax",  "anglex",  "anglexs",  "vi",  "vx",  "vy",  "v",  "vxdrag",  "vydrag",  "ax",  "ay",  "a",  "anglev",  "anglevf",  "anglevs",  "t",  "dt",  "G",  "M",  "fx",  "fy",  "m",  "theta",  "mode",  "xshow",  "backgroundcolor",  "white",  "memorycolor",  "memorycolorpe",  "memorycolorke",  "memorycolorte",  "selectedmodel",  "showmodel",  "functionY",  "solutionY",  "selected",  "pass",  "point",  "center",  "velocity",  "force",  "trace",  "diagram",  "showDialog2",  "showDialog2sy",  "am",  "KE",  "KEmax",  "KEs",  "PE",  "PEs",  "PEmax",  "TE",  "TEs",  "TEmax",  "QE",  "xvstime",  "yvstime",  "rvstime",  "KEvstime",  "PEvstime",  "TEvstime",  "QEvstime",  "withs",  "withv",  "witha",  "withE",  "count",  "kexarray",  "keyarray",  "pexarray",  "peyarray",  "texarray",  "teyarray",  "cta",  "omega",  "referenceframe",  "text3",  "text",  "text2",  "twoD",  "threeD",  "active",  "activeshow",  "trigger",  "circular",  "xf",  "yf",  "size",  "c",  "k",  "v0",  "next",  "selectedview",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "disabledworld",  "graph",  "disabled",  "datashow",  "datashow2",  "drawingsizex",  "drawingsizey",  "disabledbutton"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["referenceframe"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["svgradial"] = true;
    __pagesEnabled["Init Page 2"] = true;
    __pagesEnabled["newtonsMountainODE"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["Error handling code"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["drawing"] = true;
    __pagesEnabled["text2"] = true;
    __pagesEnabled["axes"] = true;
  });

  _model.addToReset(function() {
    inputdropmenu = true; // EjsS Model.Variables.modelVars.inputdropmenu
    print = false; // EjsS Model.Variables.modelVars.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.modelVars.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.modelVars.font
    R = 6.3781E6; // EjsS Model.Variables.modelVars.R
    xmin = -1.2*R; // EjsS Model.Variables.modelVars.xmin
    xmax = 1.2*R; // EjsS Model.Variables.modelVars.xmax
    ymin = -1.2*R; // EjsS Model.Variables.modelVars.ymin
    ymax = 1.2*R; // EjsS Model.Variables.modelVars.ymax
    pi = Math.PI; // EjsS Model.Variables.modelVars.pi
    x = 0; // EjsS Model.Variables.modelVars.x
    y = 6.384E6; // EjsS Model.Variables.modelVars.y
    r = Math.sqrt(x*x+y*y); // EjsS Model.Variables.modelVars.r
    rmax = r; // EjsS Model.Variables.modelVars.rmax
    vi = Math.sqrt(6.67E-11*6.0E24/r); // EjsS Model.Variables.modelVars.vi
    vx = vi; // EjsS Model.Variables.modelVars.vx
    vy = 0; // EjsS Model.Variables.modelVars.vy
    v = 0; // EjsS Model.Variables.modelVars.v
    vxdrag = vx*R/10000; // EjsS Model.Variables.modelVars.vxdrag
    vydrag = vy*R/10000; // EjsS Model.Variables.modelVars.vydrag
    anglev = Math.atan2(vy,vx); // EjsS Model.Variables.modelVars.anglev
    t = 0; // EjsS Model.Variables.modelVars.t
    dt = 100; // EjsS Model.Variables.modelVars.dt
    G = 6.67E-11*1; // EjsS Model.Variables.modelVars.G
    M = 6.0E24; // EjsS Model.Variables.modelVars.M
    fx = 0; // EjsS Model.Variables.modelVars.fx
    fy = -9.81; // EjsS Model.Variables.modelVars.fy
    m = 1; // EjsS Model.Variables.modelVars.m
    theta = 0; // EjsS Model.Variables.modelVars.theta
    mode = ""; // EjsS Model.Variables.modelVars.mode
    backgroundcolor = rgb(255,255,255); // EjsS Model.Variables.modelVars.backgroundcolor
    memorycolor = 0; // EjsS Model.Variables.modelVars.memorycolor
    memorycolorpe = 5; // EjsS Model.Variables.modelVars.memorycolorpe
    memorycolorke = 10; // EjsS Model.Variables.modelVars.memorycolorke
    memorycolorte = 15; // EjsS Model.Variables.modelVars.memorycolorte
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.model.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.model.selectedmodel
        selectedmodel[_i0] = "0";  // EjsS Model.Variables.model.selectedmodel
      }
    }());
    functionY = "0"; // EjsS Model.Variables.model.functionY
  });

  _model.addToReset(function() {
    selected = new Array(1); // EjsS Model.Variables.menu.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.menu.selected
        selected[_i0] = "circular_motion_at_r_=_R_earth";  // EjsS Model.Variables.menu.selected
      }
    }());
  });

  _model.addToReset(function() {
    pass = false; // EjsS Model.Variables.controlVars.pass
    point = false; // EjsS Model.Variables.controlVars.point
    center = true; // EjsS Model.Variables.controlVars.center
    velocity = true; // EjsS Model.Variables.controlVars.velocity
    force = true; // EjsS Model.Variables.controlVars.force
    trace = true; // EjsS Model.Variables.controlVars.trace
    diagram = true; // EjsS Model.Variables.controlVars.diagram
  });

  _model.addToReset(function() {
    KE = 0.5*m*(vx*vx+vy*vy); // EjsS Model.Variables.graphs.KE
    KEmax = KE; // EjsS Model.Variables.graphs.KEmax
    KEs = KE; // EjsS Model.Variables.graphs.KEs
    PE = -6.67E-11*m*6.0E24/Math.sqrt(x*x+y*y); // EjsS Model.Variables.graphs.PE
    PEs = PE; // EjsS Model.Variables.graphs.PEs
    PEmax = PE; // EjsS Model.Variables.graphs.PEmax
    TE = KE+PE; // EjsS Model.Variables.graphs.TE
    TEs = TE; // EjsS Model.Variables.graphs.TEs
    TEmax = Math.min(TE,TEmax); // EjsS Model.Variables.graphs.TEmax
    count = 2; // EjsS Model.Variables.graphs.count
    kexarray = new Array(count); // EjsS Model.Variables.graphs.kexarray
    (function () {
      var _i0;
      for (_i0=0; _i0<count; _i0+=1) {  // EjsS Model.Variables.graphs.kexarray
        kexarray[_i0] = r;  // EjsS Model.Variables.graphs.kexarray
      }
    }());
    keyarray = new Array(count); // EjsS Model.Variables.graphs.keyarray
    (function () {
      var _i0;
      for (_i0=0; _i0<count; _i0+=1) {  // EjsS Model.Variables.graphs.keyarray
        keyarray[_i0] = KE;  // EjsS Model.Variables.graphs.keyarray
      }
    }());
    pexarray = new Array(count); // EjsS Model.Variables.graphs.pexarray
    (function () {
      var _i0;
      for (_i0=0; _i0<count; _i0+=1) {  // EjsS Model.Variables.graphs.pexarray
        pexarray[_i0] = r;  // EjsS Model.Variables.graphs.pexarray
      }
    }());
    peyarray = new Array(count); // EjsS Model.Variables.graphs.peyarray
    (function () {
      var _i0;
      for (_i0=0; _i0<count; _i0+=1) {  // EjsS Model.Variables.graphs.peyarray
        peyarray[_i0] = PE;  // EjsS Model.Variables.graphs.peyarray
      }
    }());
    texarray = new Array(count); // EjsS Model.Variables.graphs.texarray
    (function () {
      var _i0;
      for (_i0=0; _i0<count; _i0+=1) {  // EjsS Model.Variables.graphs.texarray
        texarray[_i0] = r;  // EjsS Model.Variables.graphs.texarray
      }
    }());
    teyarray = new Array(count); // EjsS Model.Variables.graphs.teyarray
    (function () {
      var _i0;
      for (_i0=0; _i0<count; _i0+=1) {  // EjsS Model.Variables.graphs.teyarray
        teyarray[_i0] = TE;  // EjsS Model.Variables.graphs.teyarray
      }
    }());
  });

  _model.addToReset(function() {
    cta = 0; // EjsS Model.Variables.geostationary.cta
    omega = 2*pi/(24*60*60); // EjsS Model.Variables.geostationary.omega
    referenceframe = true; // EjsS Model.Variables.geostationary.referenceframe
    text3 = ""; // EjsS Model.Variables.geostationary.text3
    text = "select from dropdown menu and \nclick play"; // EjsS Model.Variables.geostationary.text
    text2 = ""; // EjsS Model.Variables.geostationary.text2
    twoD = true; // EjsS Model.Variables.geostationary.twoD
  });

  _model.addToReset(function() {
    xf = x; // EjsS Model.Variables.impluse.xf
    yf = y; // EjsS Model.Variables.impluse.yf
    size = 20; // EjsS Model.Variables.impluse.size
    k = 0.1; // EjsS Model.Variables.impluse.k
  });

  _model.addToReset(function() {
    selectedview = new Array(1); // EjsS Model.Variables.layout.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview
        selectedview[_i0] = "both";  // EjsS Model.Variables.layout.selectedview
      }
    }());
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    vvst = true; // EjsS Model.Variables.layout.vvst
    graph = true; // EjsS Model.Variables.layout.graph
    datashow = true; // EjsS Model.Variables.layout.datashow
    datashow2 = true; // EjsS Model.Variables.layout.datashow2
  });

  _model.addToReset(function() {
    disabledbutton = false; // EjsS Model.Variables.dragem.disabledbutton
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //computes x-component of projectile's acceleration  // > CustomCode.getAccels:1
  function getAx (x,y) {  // > CustomCode.getAccels:2
    if ((!point) && (x*x+y*y < R)) {  // > CustomCode.getAccels:3
      return -G*M*x;}  // > CustomCode.getAccels:4
    else {  // > CustomCode.getAccels:5
      return -G*M*x/Math.pow(x*x+y*y,1.5);}  // > CustomCode.getAccels:6
  }  // > CustomCode.getAccels:7
  //computes y-component of projectile's acceleration  // > CustomCode.getAccels:8
  function getAy (x,y) {  // > CustomCode.getAccels:9
    if ((!point) && (x*x+y*y < R)) {  // > CustomCode.getAccels:10
      return -G*M*y;}  // > CustomCode.getAccels:11
    else {  // > CustomCode.getAccels:12
      return -G*M*y/Math.pow(x*x+y*y,1.5);}  // > CustomCode.getAccels:13
  }  // > CustomCode.getAccels:14

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.98 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  var kepub =0.9 ;  // > CustomCode.changeOrientation:4
  // check platform for Apps  // > CustomCode.changeOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:7
     // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
     // > CustomCode.changeOrientation:15
  switch (window.orientation) {  // > CustomCode.changeOrientation:16
    case 0:  // > CustomCode.changeOrientation:17
    case 180:  // > CustomCode.changeOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:21
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:22
        // return window.screen.height;  // > CustomCode.changeOrientation:23
        //  return window.innerHeight;  // > CustomCode.changeOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
      }  // > CustomCode.changeOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:29
        // return window.screen.height;  // > CustomCode.changeOrientation:30
        //  return window.innerHeight;  // > CustomCode.changeOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:32
      }  // > CustomCode.changeOrientation:33
      else {  // > CustomCode.changeOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:35
        return window.innerHeight*k;  // > CustomCode.changeOrientation:36
      }  // > CustomCode.changeOrientation:37
      break;  // > CustomCode.changeOrientation:38
    case 90:  // > CustomCode.changeOrientation:39
    case -90:  // > CustomCode.changeOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:41
     // > CustomCode.changeOrientation:42
      if (iOSapp){ // App  // > CustomCode.changeOrientation:43
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:44
        // return window.screen.height;  // > CustomCode.changeOrientation:45
        //  return window.innerHeight;  // > CustomCode.changeOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:47
      }  // > CustomCode.changeOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:51
        // return window.screen.height;  // > CustomCode.changeOrientation:52
        //  return window.innerHeight;  // > CustomCode.changeOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:54
      }  // > CustomCode.changeOrientation:55
      else { // browser Android and PC  // > CustomCode.changeOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:57
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:58
        return window.innerHeight*k;  // > CustomCode.changeOrientation:59
      }  // > CustomCode.changeOrientation:60
      break;  // > CustomCode.changeOrientation:61
    default:  // > CustomCode.changeOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:64
      return window.innerHeight*k;  // > CustomCode.changeOrientation:65
  }  // > CustomCode.changeOrientation:66
     // > CustomCode.changeOrientation:67
  }  // > CustomCode.changeOrientation:68
     // > CustomCode.changeOrientation:69

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  function rgb(r, g, b){  // > CustomCode.color:1
    return "rgb("+r+","+g+","+b+")";  // > CustomCode.color:2
  }  // > CustomCode.color:3

  //function to determine if projectile has hit earth  // > CustomCode.hitEarth:1
  //(used in ODE event handling)  // > CustomCode.hitEarth:2
  function hitEarth(x,y) {  // > CustomCode.hitEarth:3
    if (!pass) {  // > CustomCode.hitEarth:4
      return x*x+y*y-R*R;}  // > CustomCode.hitEarth:5
    else {  // > CustomCode.hitEarth:6
      return 0;}  // > CustomCode.hitEarth:7
  }  // > CustomCode.hitEarth:8

  function circle(){  // > CustomCode.circle:1
   r=Math.sqrt(x*x+y*y);  // > CustomCode.circle:2
   v=Math.sqrt(G*M/r);  // > CustomCode.circle:3
   c=Math.atan2(y,x);  // > CustomCode.circle:4
   vx=-v*Math.sin(-c); // lookang added - to make assignment of velocity correct  // > CustomCode.circle:5
   vy=-v*Math.cos(+c);  // > CustomCode.circle:6
   anglevs = Math.atan2(vy,vx);  // > CustomCode.circle:7
   if ( Math.abs(anglevs-anglev)>pi/2){  // > CustomCode.circle:8
      vx=-vx; // lookang added - to make assignment of velocity correct when direction is anticlockwise  // > CustomCode.circle:9
   vy=-vy;  // > CustomCode.circle:10
  }  // > CustomCode.circle:11
   xf=x;  // > CustomCode.circle:12
   yf=y;  // > CustomCode.circle:13
   circular=true;  // > CustomCode.circle:14
   trigger=0;  // > CustomCode.circle:15
  }  // > CustomCode.circle:16

  function fire(){  // > CustomCode.fire:1
  c=Math.atan2(vy,vx);  // > CustomCode.fire:2
  v=Math.sqrt(vx*vx+vy*vy);  // > CustomCode.fire:3
  v0=v; //lookang  // > CustomCode.fire:4
  vx=vx+k*v0*Math.cos(c);  // > CustomCode.fire:5
  vy=vy+k*v0*Math.sin(c);  // > CustomCode.fire:6
  xf=x;  // > CustomCode.fire:7
  yf=y;  // > CustomCode.fire:8
  anglevf=anglev; // make the fire appear n remember angle  // > CustomCode.fire:9
  trigger=0;  // > CustomCode.fire:10
  r=Math.sqrt(x*x+y*y); // lookang change to real radius  // > CustomCode.fire:11
  if(G*M/r==vx*vx+vy*vy)circular=true;  // > CustomCode.fire:12
  else circular=false;  // > CustomCode.fire:13
  }  // > CustomCode.fire:14

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.Lib Page:1
  // does not work for iOS   // > CustomCode.Lib Page:2
  /*jslint browser:true */  // > CustomCode.Lib Page:3
  function toggleFullScreen() {  // > CustomCode.Lib Page:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.Lib Page:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.Lib Page:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.Lib Page:7
        document.documentElement.requestFullscreen();  // > CustomCode.Lib Page:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.Lib Page:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.Lib Page:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.Lib Page:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.Lib Page:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.Lib Page:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.Lib Page:14
      }  // > CustomCode.Lib Page:15
    } else {  // > CustomCode.Lib Page:16
      if (document.exitFullscreen) {  // > CustomCode.Lib Page:17
        document.exitFullscreen();  // > CustomCode.Lib Page:18
      } else if (document.msExitFullscreen) {  // > CustomCode.Lib Page:19
        document.msExitFullscreen();  // > CustomCode.Lib Page:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.Lib Page:21
        document.mozCancelFullScreen();  // > CustomCode.Lib Page:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.Lib Page:23
        document.webkitExitFullscreen();  // > CustomCode.Lib Page:24
      }  // > CustomCode.Lib Page:25
    }  // > CustomCode.Lib Page:26
  }  // > CustomCode.Lib Page:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    /*  // > Initialization.Init Page:1
    // need this page to initialise, maybe can delete if new codes are added  // > Initialization.Init Page:2
    if(selected[0]==="user_defined"){  // > Initialization.Init Page:3
    //set projectile at top of mountain and compute velocity components  // > Initialization.Init Page:4
    //_pause(); // prevent trace to draw from any point back to origin causing a ugly straight line  // > Initialization.Init Page:5
    t = 0;  // > Initialization.Init Page:6
    x = 0.0*R;  // > Initialization.Init Page:7
    y = 1.185*R;  // > Initialization.Init Page:8
    //vx = vi*Math.cos(theta*Math.PI/180.0);  // > Initialization.Init Page:9
    //vy = vi*Math.sin(theta*Math.PI/180.0);  // > Initialization.Init Page:10
    }  // > Initialization.Init Page:11
    else if(selected[0]==="v=2000"){  // > Initialization.Init Page:12
    t = 0;  // > Initialization.Init Page:13
    //x = 0;  // > Initialization.Init Page:14
    //y = 6.384E6;  // > Initialization.Init Page:15
    // = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:16
    theta = 0;  // > Initialization.Init Page:17
    vi = 2000;  // > Initialization.Init Page:18
    }  // > Initialization.Init Page:19
    else if(selected[0]==="v=4000"){  // > Initialization.Init Page:20
    t = 0;  // > Initialization.Init Page:21
    //x = 0;  // > Initialization.Init Page:22
    //y = 6.384E6;  // > Initialization.Init Page:23
    // = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:24
    theta = 0;  // > Initialization.Init Page:25
    vi = 4000;  // > Initialization.Init Page:26
    }  // > Initialization.Init Page:27
    else if(selected[0]==="v=6000"){  // > Initialization.Init Page:28
    t = 0;  // > Initialization.Init Page:29
    //x = 0;  // > Initialization.Init Page:30
    //y = 6.384E6;  // > Initialization.Init Page:31
    // = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:32
    theta = 0;  // > Initialization.Init Page:33
    vi = 6000;  // > Initialization.Init Page:34
    }  // > Initialization.Init Page:35
    else if(selected[0]==="v=8000"){  // > Initialization.Init Page:36
    t = 0;  // > Initialization.Init Page:37
    //x = 0;  // > Initialization.Init Page:38
    //y = 6.384E6;  // > Initialization.Init Page:39
    // = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:40
    theta = 0;  // > Initialization.Init Page:41
    vi = 8000;  // > Initialization.Init Page:42
    }  // > Initialization.Init Page:43
    else if(selected[0]==="v=10000"){  // > Initialization.Init Page:44
    t = 0;  // > Initialization.Init Page:45
    //x = 0;  // > Initialization.Init Page:46
    //y = 6.384E6;  // > Initialization.Init Page:47
    // = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:48
    theta = 0;  // > Initialization.Init Page:49
    vi = 10000;  // > Initialization.Init Page:50
    }  // > Initialization.Init Page:51
    else if(selected[0]==="v=12000"){  // > Initialization.Init Page:52
    t = 0;  // > Initialization.Init Page:53
    //x = 0;  // > Initialization.Init Page:54
    //y = 6.384E6;  // > Initialization.Init Page:55
    // = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:56
    theta = 0;  // > Initialization.Init Page:57
    vi = 12000;  // > Initialization.Init Page:58
    }  // > Initialization.Init Page:59
    else if(selected[0]==="circular_motion_at_r_=_R_earth"){  // > Initialization.Init Page:60
    t = 0;  // > Initialization.Init Page:61
    x = 0;  // > Initialization.Init Page:62
    y = 6.384E6;  // > Initialization.Init Page:63
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:64
    theta = 0;  // > Initialization.Init Page:65
    vi = Math.sqrt(6.67E-11*6.0E24/r);  // > Initialization.Init Page:66
    }else if(selected[0]==="circular_motion_at_r_=_2*R_earth"){  // > Initialization.Init Page:67
    t = 0;  // > Initialization.Init Page:68
    x = 0;  // > Initialization.Init Page:69
    y = 2*6.38E6;  // > Initialization.Init Page:70
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:71
    theta = 0;  // > Initialization.Init Page:72
    vi = Math.sqrt(6.67E-11*6.0E24/r);  // > Initialization.Init Page:73
    }  // > Initialization.Init Page:74
    else if(selected[0]==="circular_motion_at_r_=_3*R_earth"){  // > Initialization.Init Page:75
    t = 0;  // > Initialization.Init Page:76
    x = 0;  // > Initialization.Init Page:77
    y = 3*6.38E6;  // > Initialization.Init Page:78
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:79
    theta = 0;  // > Initialization.Init Page:80
    vi = Math.sqrt(6.67E-11*6.0E24/r);  // > Initialization.Init Page:81
    }  // > Initialization.Init Page:82
    else if(selected[0]==="circular_motion_at_r_=_4*R_earth"){  // > Initialization.Init Page:83
    t = 0;  // > Initialization.Init Page:84
    x = 0;  // > Initialization.Init Page:85
    y = 4*6.38E6;  // > Initialization.Init Page:86
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:87
    theta = 0;  // > Initialization.Init Page:88
    vi = Math.sqrt(6.67E-11*6.0E24/r);  // > Initialization.Init Page:89
    }  // > Initialization.Init Page:90
    else if(selected[0]==="escape_velocity_at_r_=_R_earth_theta=_0"){  // > Initialization.Init Page:91
    t = 0;  // > Initialization.Init Page:92
    x = 0;  // > Initialization.Init Page:93
    y = 6.38E6;  // > Initialization.Init Page:94
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:95
    theta = 0;  // > Initialization.Init Page:96
    vi = Math.sqrt(2*6.67E-11*6.0E24/r);  // > Initialization.Init Page:97
    }  // > Initialization.Init Page:98
    else if(selected[0]==="escape_velocity_at_r_=_R_earth_theta=45"){  // > Initialization.Init Page:99
    t = 0;  // > Initialization.Init Page:100
    x = 0;  // > Initialization.Init Page:101
    y = 6.38E6;  // > Initialization.Init Page:102
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:103
    theta = 45;  // > Initialization.Init Page:104
    vi = Math.sqrt(2*6.67E-11*6.0E24/r);  // > Initialization.Init Page:105
    }  // > Initialization.Init Page:106
    else if(selected[0]==="escape_velocity_at_r_=_R_earth_theta=90"){  // > Initialization.Init Page:107
    t = 0;  // > Initialization.Init Page:108
    x = 0;  // > Initialization.Init Page:109
    y = 6.38E6;  // > Initialization.Init Page:110
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:111
    theta = 90;  // > Initialization.Init Page:112
    vi = Math.sqrt(2*6.67E-11*6.0E24/r);  // > Initialization.Init Page:113
    }  // > Initialization.Init Page:114
    else if(selected[0]==="geostationary_at_r=35,786_km_above_Earth"){  // > Initialization.Init Page:115
    t = 0;  // > Initialization.Init Page:116
    x = 0;  // > Initialization.Init Page:117
    //y = Math.pow(6.67E-11*6.0E24/(omega*omega),(0.3333333));  // > Initialization.Init Page:118
    y = 42297523.87;  // > Initialization.Init Page:119
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:120
    theta = 0;  // > Initialization.Init Page:121
    omega= 2*pi/(24*60*60);  // > Initialization.Init Page:122
    vi = omega*r;  // > Initialization.Init Page:123
    }  // > Initialization.Init Page:124
    else if(selected[0]==="non-geostationary_at_r=35,786_km_above_Earth_due_to_direction"){  // > Initialization.Init Page:125
    t = 0;  // > Initialization.Init Page:126
    x = 0;  // > Initialization.Init Page:127
    //y = Math.pow(6.67E-11*6.0E24/(omega*omega),(0.3333333));  // > Initialization.Init Page:128
    y= 42297523.87;  // > Initialization.Init Page:129
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:130
    theta = 0;  // > Initialization.Init Page:131
    omega= 2*pi/(24*60*60);  // > Initialization.Init Page:132
    vi = -omega*r;  // > Initialization.Init Page:133
    }  // > Initialization.Init Page:134
    else if(selected[0]==="non-geostationary_at_r=60,720_km_above_Earth_due_speed"){  // > Initialization.Init Page:135
    t = 0;  // > Initialization.Init Page:136
    x = 0;  // > Initialization.Init Page:137
    //y = Math.pow(6.67E-11*6.0E24/(0.5*0.5*omega*omega),0.3333333);  // > Initialization.Init Page:138
    y = 67143133.89;  // > Initialization.Init Page:139
    r = Math.sqrt(x*x+y*y);  // > Initialization.Init Page:140
    theta = 0;  // > Initialization.Init Page:141
    omega= 2*pi/(24*60*60);  // > Initialization.Init Page:142
    vi = 0.5*omega*r;  // > Initialization.Init Page:143
    }  // > Initialization.Init Page:144
    */  // > Initialization.Init Page:145
    vx = vi*Math.cos(theta*Math.PI/180.0);  // > Initialization.Init Page:146
    vy = vi*Math.sin(theta*Math.PI/180.0);  // > Initialization.Init Page:147
    KEs = 0.5*m*(vx*vx+vy*vy);  // > Initialization.Init Page:148
    PEs = -6.67E-11*m*6.0E24/Math.sqrt(x*x+y*y);  // > Initialization.Init Page:149
    TEs = KEs +PEs;  // > Initialization.Init Page:150
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["referenceframe"]) return;
    if (referenceframe==true) {  // > Initialization.referenceframe:1
      cta = 0;  // > Initialization.referenceframe:2
    t = 0 ;  // > Initialization.referenceframe:3
    omega = 0;  // > Initialization.referenceframe:4
    text3 = "Projectile m = 1kg, \nGravity Earth Model \nNorth Pole View of Earth with \nreference frame Earth";  // > Initialization.referenceframe:5
      }  // > Initialization.referenceframe:6
      else {  // > Initialization.referenceframe:7
        cta = 0;  // > Initialization.referenceframe:8
    t = 0 ;  // > Initialization.referenceframe:9
    omega = 2*pi/(24*60*60);  // > Initialization.referenceframe:10
    text3 = "Projectile m = 1kg, \nGravity Earth Model \nNorth Pole View of Earth with \nreference frame Space";  // > Initialization.referenceframe:11
        }  // > Initialization.referenceframe:12
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (KEvstime==undefined){  // > Initialization.undefined:1
      KEvstime=true;  // > Initialization.undefined:2
      }   // > Initialization.undefined:3
        // > Initialization.undefined:4
      if (PEvstime==undefined){  // > Initialization.undefined:5
      PEvstime=true;  // > Initialization.undefined:6
      }   // > Initialization.undefined:7
      if (TEvstime==undefined){  // > Initialization.undefined:8
      TEvstime=true;  // > Initialization.undefined:9
      }   // > Initialization.undefined:10
        // > Initialization.undefined:11
      if (Width1==undefined){  // > Initialization.undefined:12
      Width1="50%";  // > Initialization.undefined:13
      }  // > Initialization.undefined:14
      if (Width2==undefined){  // > Initialization.undefined:15
      Width2="50%";  // > Initialization.undefined:16
      }  // > Initialization.undefined:17
        // > Initialization.undefined:18
      if (cta==undefined){  // > Initialization.undefined:19
      cta = 0;  // > Initialization.undefined:20
      }     // > Initialization.undefined:21
      if (omega==undefined){  // > Initialization.undefined:22
        omega=0;  // > Initialization.undefined:23
      }  // > Initialization.undefined:24
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.16,0]);  // > Initialization.axes:3
    _view.plottingPanel.getTitleY().setPosition([0.2,0.9]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svgradial"]) return;
    var container = document.createElement('div');  // > Initialization.svgradial:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svgradial:3
      '    <stop offset="0%" style="stop-color:rgb(0,255,255); stop-opacity:1" />'+  // > Initialization.svgradial:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />'+  // > Initialization.svgradial:5
      '  </radialGradient>'+  // > Initialization.svgradial:6
      '</defs></svg>';  // > Initialization.svgradial:7
    container.innerHTML = svggradient;  // > Initialization.svgradial:8
    document.body.appendChild(container);  // > Initialization.svgradial:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page 2"]) return;
    _update();  // > Initialization.Init Page 2:1
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["newtonsMountainODE"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    //compute force/acceleration components (scaled to be visible)  // > FixedRelations.FixRel Page:1
    fx = R*0.05*getAx(x,y); // which are actually acceleration lookang  // > FixedRelations.FixRel Page:2
    fy = R*0.05*getAy(x,y); //   // > FixedRelations.FixRel Page:3
    //max screen  // > FixedRelations.FixRel Page:4
    if (x>xmax) xmax = xmax*1.2;  // > FixedRelations.FixRel Page:5
    if (x<xmin) xmin = xmin*1.2;  // > FixedRelations.FixRel Page:6
    if (y>ymax) ymax = ymax*1.2;  // > FixedRelations.FixRel Page:7
    if (y<ymin) ymin = ymin*1.2;  // > FixedRelations.FixRel Page:8
    //energy  // > FixedRelations.FixRel Page:9
    r = Math.sqrt(x*x+y*y);  // > FixedRelations.FixRel Page:10
    am = Math.sqrt(getAx(x,y)*getAx(x,y)+getAy(x,y)*getAy(x,y));  // > FixedRelations.FixRel Page:11
    KE = 0.5*m*(vx*vx+vy*vy);  // > FixedRelations.FixRel Page:12
    PE = -6.67E-11*m*6.0E24/Math.sqrt(x*x+y*y);  // > FixedRelations.FixRel Page:13
    TE = KE +PE;  // > FixedRelations.FixRel Page:14
    //energymax  // > FixedRelations.FixRel Page:15
    KEmax = Math.max(KE,KEmax);  // > FixedRelations.FixRel Page:16
    PEmax = Math.min(PE,PEmax); //negative values  // > FixedRelations.FixRel Page:17
    TEmax = Math.min(TE,TEmax);  // > FixedRelations.FixRel Page:18
    rmax = Math.max(r,rmax);  // > FixedRelations.FixRel Page:19
    anglexs=anglex;  // > FixedRelations.FixRel Page:20
    // velocity  // > FixedRelations.FixRel Page:21
    v = Math.sqrt(vx*vx+vy*vy);  // > FixedRelations.FixRel Page:22
    anglev = Math.atan2(vy,vx);  // > FixedRelations.FixRel Page:23
    anglex = Math.atan2(y,v);  // > FixedRelations.FixRel Page:24
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["drawing"]) return;
    drawingsizex = 2*(_view.drawingPanel.getRealWorldXMax()- _view.drawingPanel.getRealWorldXMin());  // > FixedRelations.drawing:1
    drawingsizey = 2*(_view.drawingPanel.getRealWorldYMax()- _view.drawingPanel.getRealWorldYMin());  // > FixedRelations.drawing:2
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["text2"]) return;
    text2 = "x = " +x.toExponential(3) + " m ,"+" y = " +y.toExponential(3) + " m \n"+"vx = " +_view._format(vx,"0") + " m/s ,"+" vy = " +_view._format(vy,"0") + " m/s ,\n"+"ax = " +_view._format(getAx(x,y),"0.00") + " m/s^2 ,"+" ay = " +_view._format(getAy(x,y),"0.00") + " m/s^2 ,\n"+" t = " +_view._format(t,"0") + " s ";  // > FixedRelations.text2:1
    //text2 = " x = " +_view._format(x,"0.00") + " m ,"+" y = " +_view._format(y,"0.00") + " m "+" vx = " +_view._format(vx,"0.00") + " m/s ,"+" vy = " +_view._format(vy,"0.00") + " m/s "+" ax = " +_view._format(getAx(x,y),"0.00") + " m/s^2 ,"+" ay = " +_view._format(getAy(x,y),"0.00") + " m/s^2 ";  // > FixedRelations.text2:2
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axes"]) return;
    if (_model.isPlaying()===true) { //NEED this for conflict with initialize page values  // > FixedRelations.axes:1
    _view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());  // > FixedRelations.axes:2
    _view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());  // > FixedRelations.axes:3
    }  // > FixedRelations.axes:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="newtonsMountainODE") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["x","vx","y","vy","cta","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.001,0.001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=x) __mustReinitialize = true;
        __state[__cIn++] = x;
        if (__state[__cIn]!=vx) __mustReinitialize = true;
        __state[__cIn++] = vx;
        if (__state[__cIn]!=y) __mustReinitialize = true;
        __state[__cIn++] = y;
        if (__state[__cIn]!=vy) __mustReinitialize = true;
        __state[__cIn++] = vy;
        if (__state[__cIn]!=cta) __mustReinitialize = true;
        __state[__cIn++] = cta;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
      var _errorCode = __eventSolver.getErrorCode();
      if (__pagesEnabled["Error handling code"]) {
        { // For any error: 
        }
      }
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setTolerances(0.001,0.001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        vx = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        cta = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var cta = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vx; // Rate for ODE: newtonsMountainODE:x
        _aRate[__cRate++] = getAx(x,y); // Rate for ODE: newtonsMountainODE:vx
        _aRate[__cRate++] = vy; // Rate for ODE: newtonsMountainODE:y
        _aRate[__cRate++] = getAy(x,y); // Rate for ODE: newtonsMountainODE:vy
        _aRate[__cRate++] = omega; // Rate for ODE: newtonsMountainODE:cta
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var cta = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        vx = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        cta = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = vx;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = cta;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 0.00000001; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var y = _aState[__cOut++];
        var vy = _aState[__cOut++];
        var cta = _aState[__cOut++];
        var t = _aState[__cOut++];
        return hitEarth(x,y);  // > Event zero-condition for page newtonsMountainODE:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        vx = __state[__cOut++];
        y = __state[__cOut++];
        vy = __state[__cOut++];
        cta = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = vx;
        __state[__cIn++] = y;
        __state[__cIn++] = vy;
        __state[__cIn++] = cta;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page newtonsMountainODE:1
        text = "paused";  // > Event action for page newtonsMountainODE:2
        disabledbutton=true;  // > Event action for page newtonsMountainODE:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vx(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vy(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_cta(__time) {
    var __index = 0 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new gravity08_1_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.panel2.linkProperty("Display",  function() { return !print?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'panel2'
          _view.comboBox.linkProperty("Options",  function() { return ["circular motion at surface","circular motion, 2*Earth radius","circular motion, 3*Earth radius","circular motion, 4*Earth radius","v=2000","v=4000","v=6000","v=8000","v=10000","v=12000","surface escape velocity, θ=0","surface escape velocity, θ=45","surface escape velocity, θ=90","geostationary, h=35,786 km","non-geostationary, h=35,786 km","non-geostationary, h=60,720 km","user defined","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  //var option = _view.comboBox.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if(option=="user defined"){
  //set projectile at top of mountain and compute velocity components
  // pause(); // prevent trace to draw from any point back to origin causing a ugly straight line
  t = 0;
  x = 0.0*R;
  y = 1.185*R;
  //vx = vi*Math.cos(theta*Math.PI/180.0);
  //vy = vi*Math.sin(theta*Math.PI/180.0);
  }
  //printing starts here
  else if (option == "print"){
    print = true;
    }
  //printing ends here
  else if(option=="v=2000"){
  t = 0;
  //x = 0;
  //y = 6.384E6;
  // = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = 2000;
  }
  else if(option=="v=4000"){
  t = 0;
  //x = 0;
  //y = 6.384E6;
  // = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = 4000;
  }
  else if(option=="v=6000"){
  t = 0;
  //x = 0;
  //y = 6.384E6;
  // = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = 6000;
  }
  else if(option=="v=8000"){
  t = 0;
  //x = 0;
  //y = 6.384E6;
  // = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = 8000;
  }
  else if(option=="v=10000"){
  t = 0;
  //x = 0;
  //y = 6.384E6;
  // = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = 10000;
  }
  else if(option=="v=12000"){
  t = 0;
  //x = 0;
  //y = 6.384E6;
  // = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = 12000;
  }
  else if(option=="circular motion at surface"){
  t = 0;
  x = 0;
  y = 6.384E6;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = Math.sqrt(6.67E-11*6.0E24/r);
  }else if(option=="circular motion, 2*Earth radius"){
  t = 0;
  x = 0;
  y = 2*6.38E6;
  //y = 2*6.38*10^6;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = Math.sqrt(6.67E-11*6.0E24/r);
  }
  else if(option=="circular motion, 3*Earth radius"){
  t = 0;
  x = 0;
  y = 3*6.38E6;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = Math.sqrt(6.67E-11*6.0E24/r);
  }
  else if(option=="circular motion, 4*Earth radius"){
  t = 0;
  x = 0;
  y = 4*6.38E6;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = Math.sqrt(6.67E-11*6.0E24/r);
  }
  else if(option=="surface escape velocity, θ=0"){
  t = 0;
  x = 0;
  y = 6.38E6;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  vi = Math.sqrt(2*6.67E-11*6.0E24/r);
  }
  else if(option=="surface escape velocity, θ=45"){
  t = 0;
  x = 0;
  y = 6.38E6;
  r = Math.sqrt(x*x+y*y);
  theta = 45;
  vi = Math.sqrt(2*6.67E-11*6.0E24/r);
  }
  else if(option=="surface escape velocity, θ=90"){
  t = 0;
  x = 0;
  y = 6.38E6;
  r = Math.sqrt(x*x+y*y);
  theta = 90;
  vi = Math.sqrt(2*6.67E-11*6.0E24/r);
  }
  else if(option=="geostationary, h=35,786 km"){
  t = 0;
  x = 0;
  //y = Math.pow(6.67E-11*6.0E24/(omega*omega),(0.3333333));
  y= 42297523.87;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  omega= 2*pi/(24*60*60);
  vi = omega*r;
  }
  else if(option=="non-geostationary, h=35,786 km"){
  t = 0;
  x = 0;
  //y = Math.pow(6.67E-11*6.0E24/(omega*omega),(0.3333333));
  y= 42297523.87;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  omega= 2*pi/(24*60*60);
  vi = -omega*r;
  }
  else if(option=="non-geostationary, h=60,720 km"){
  t = 0;
  x = 0;
  //y = Math.pow(6.67E-11*6.0E24/(0.5*0.5*omega*omega),(0.3333333));
  y = 67143133.89;
  r = Math.sqrt(x*x+y*y);
  theta = 0;
  omega= 2*pi/(24*60*60);
  vi = 0.5*omega*r;
  }
  if (referenceframe==true) {
    cta = 0;
  t = 0 ;
  omega = 0;
  text3 = "South Pole View of Earth \nwith reference frame Earth";
    }
    else {
      cta = 0;
  t = 0 ;
  omega = 2*pi/(24*60*60);
  text3 = "South Pole View of Earth \nwith reference frame Space";
      }
  vx =  vi*Math.cos(theta*Math.PI/180.0);
  vy =  vi*Math.sin(theta*Math.PI/180.0);
  vxdrag = vx*R/10000;
  vydrag = vy*R/10000;
  xf=x;
  yf=y;
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.worldgraph.linkProperty("Options",  function() { return ["both","world","graph","velocity show","velocity off","acceleration show","acceleration off","reference frame Space","reference frame Earth","circular orbit v","fire backward thrusters","fire backward 2","fire forward thrusters","fire forward 2","KE vs r","KE vs r off","PE vs r","PE vs r off","TE vs r","TE vs r off","show model","hide model","","print"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  //var option = _view.worldgraph.getProperty("SelectedOptions");
  var opts = _view.worldgraph.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="world"){
   world=true;
    graph=false;
  Width1 = "100%";
  Width2 = "0%";
  //disabled=false;
    }
  //printing starts now
  else if (option == "print"){
    print = true;
    }
  //printing ends then
    if ( option=="both"){
    world=true;
    graph=true;
  Width1 = "50%";
  Width2 = "50%";
  //disabled=false;
    }
    if ( option=="graph"){
   world=false;
    graph=true;
  Width1 = "0%";
  Width2 = "100%";
  //disabled=false;
    }
  else if ( option=="x vs t"){
  graph=true;
  xvst=true;
  //disabledworld=false;
  }
  else if ( option=="velocity show"){
  velocity=true;
  //disabledworld=false;
  }
  else if ( option=="acceleration show"){
  graph=true;
  force=true;
  //disabledworld=false;
  }
  else if ( option=="KE vs r"){
  graph=true;
  KEvstime=true;
  //disabledworld=false;
  }
  else if ( option=="PE vs r"){
  graph=true;
  PEvstime=true;
  //disabledworld=false;
  }
  else if ( option=="TE vs r"){
  graph=true;
  TEvstime=true;
  //disabledworld=false;
  }
  else if ( option=="x vs t off"){
  xvst=false;
  //disabledworld=false;
  }
  else if ( option=="velocity off"){
  velocity=false;
  //disabledworld=false;
  }
  else if ( option=="acceleration off"){
  force=false;
  //disabledworld=false;
  }
  else if ( option=="reference frame Earth"){
  cta = 0;
  t = 0 ;
  omega = 0;
  text3 = "reference frame Earth";
  //disabledworld=false;
  }
  else if ( option=="reference frame Space"){
  cta = 0;
  t = 0 ;
  omega = 2*pi/(24*60*60);
  text3 = "reference frame Space";
  //disabledworld=false;
  }
  else if ( option=="circular orbit v"){
  circular=true;
  circle();
  //disabledworld=false;
  }
  else if ( option=="fire backward thrusters"){
  k = -k; 
  fire();
  vxdrag = vx*R/10000;
  vydrag = vy*R/10000;
  //vx = vxdrag*10000/R;
  //vy = vydrag*10000/R;
  k= -k;
  }
  else if ( option=="fire forward thrusters"){
  fire();
  vxdrag = vx*R/10000;
  vydrag = vy*R/10000;
  }
  else if ( option=="fire backward 2"){
  k = -k; 
  fire();
  vxdrag = vx*R/10000;
  vydrag = vy*R/10000;
  //vx = vxdrag*10000/R;
  //vy = vydrag*10000/R;
  k= -k;
  }
  else if ( option=="fire forward 2"){
  fire();
  vxdrag = vx*R/10000;
  vydrag = vy*R/10000;
  }
  else if ( option=="KE vs r off"){
  KEvstime=false;
  //disabledworld=false;
  }
  else if ( option=="PE vs r off"){
  PEvstime=false;
  //disabledworld=false;
  }
  else if ( option=="TE vs r off"){
  TEvstime=false;
  //disabledworld=false;
  }
  else if ( option=="show model"){
  showmodel=true;
  }
  else if ( option=="hide model"){
  showmodel=false;
  }
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.worldgraph.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'worldgraph'
          _view.playPauseButton22.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton22'
          _view.playPauseButton22.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton22'
          _view.playPauseButton22.linkProperty("Disabled",  function() { return disabledbutton; }, function(_v) { disabledbutton = _v; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton22'
          _view.playPauseButton22.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton22'
          _view.playPauseButton22.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton22'
          _view.stepButton222.linkProperty("Disabled",  function() { return disabledbutton; }, function(_v) { disabledbutton = _v; } ); // HtmlView Page linking property 'Disabled' for element 'stepButton222'
          _view.stepButton222.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton222'
          _view.stepButton222.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton222'
          _view.init.setAction("OnClick", function(_data,_info) {
  _view.trail.newSegment();
  _view.ketrail.newSegment();
  _view.petrail.newSegment();
  _view.tetrail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  memorycolorpe=memorycolorpe+1;
  memorycolorke=memorycolorke+1;
  memorycolorte=memorycolorte+1;
  kexarray[count]=r;
  keyarray[count]=KE;
  pexarray[count]=r;
  peyarray[count]=PE;
  texarray[count]=r;
  teyarray[count]=TE;
  count++;
  _initialize();
  disabledbutton=false;

}); // HtmlView Page setting action 'OnClick' for element 'init'
          _view.init.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'init'
          _view.resetButton22.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton22'
          _view.resetButton22.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton22'
          _view.model3.linkProperty("Display",  function() { return (showmodel)?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'model3'
          _view.model.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model'
          _view.model.setAction("OnClick", function(_data,_info) {
  if (inputdropmenu==true){
    inputdropmenu=false;
    }
    else if (inputdropmenu==false){
    inputdropmenu=true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'model'
          _view.model.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'model'
          _view.models.linkProperty("Options",  function() { return ["6.67*6.0/r^2","-6.67*500/r^2*1000000000000000000","10000000","r","100000000000000/r","-6.67*500/5.0^2/5.0*r","-400000000000000/r","200000000000000/r","-200000000000000/r","0.0000000000667*1*6000000000000000000000000/(2*r)","show me KE","show me PE","show me TE"]; } ); // HtmlView Page linking property 'Options' for element 'models'
          _view.models.setAction("OnChange", function(_data,_info) {
  //var option = _view.models.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.models.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  showmodel=true;
  Width1 = "50%";
  Width2= "50%";
  functionY=option+"";
  if (option=="show me KE"){
  functionY= "0.0000000000667*"+_view._format(m,"0.00")+"*"+_view._format(M/1000000000000000000000000,"0.0")+"*1000000000000000000000000/(2*r)" ;  
  //functionY= "6.67*"+_view._format(m,"0.00")+"*"+_view._format(M/1000000000000000000000000,"0.00")+"/(2*r)*10000000000000" ;  
  KEvstime=true;
    }
    if (option=="show me PE"){
  functionY= "-0.0000000000667*"+_view._format(m,"0.00")+"*"+_view._format(M/1000000000000000000000000,"0.0")+"*1000000000000000000000000/r" ;  
  //functionY= "-6.67*"+_view._format(m,"0.00")+"*"+_view._format(M/1000000000000000000000000,"0.00")+"/r*10000000000000" ;
  PEvstime=true;
  }
  if (option=="show me TE"){
  functionY= "-0.0000000000667*"+_view._format(m,"0.00")+"*"+_view._format(M/1000000000000000000000000,"0.0")+"*1000000000000000000000000/(2*r)" ;  
  //functionY= "-6.67*"+_view._format(m,"0.00")+"*"+_view._format(M/1000000000000000000000000,"0.00")+"/(2*r)*10000000000000" ;
  TEvstime=true;
  }
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'models'
          _view.models.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'models'
          _view.models.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models'
          _view.models.linkProperty("Display",  function() { return inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.fField.linkProperty("Display",  function() { return !inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'fField'
          _view.drawingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("Background",  function() { return backgroundcolor; }, function(_v) { backgroundcolor = _v; } ); // HtmlView Page linking property 'Background' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("Visibility",  function() { return twoD; }, function(_v) { twoD = _v; } ); // HtmlView Page linking property 'Visibility' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("BRMessage",  function() { return !print?text2:""; } ); // HtmlView Page linking property 'BRMessage' for element 'drawingPanel'
          _view.background2.linkProperty("SizeX",  function() { return drawingsizex; }, function(_v) { drawingsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'background2'
          _view.background2.linkProperty("SizeY",  function() { return drawingsizey; }, function(_v) { drawingsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'background2'
          _view.fire.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'fire'
          _view.fire.linkProperty("X",  function() { return xf; }, function(_v) { xf = _v; } ); // HtmlView Page linking property 'X' for element 'fire'
          _view.fire.linkProperty("Y",  function() { return yf; }, function(_v) { yf = _v; } ); // HtmlView Page linking property 'Y' for element 'fire'
          _view.fire.linkProperty("SizeY",  function() { return size/2; } ); // HtmlView Page linking property 'SizeY' for element 'fire'
          _view.mountain.linkProperty("Transformation",  function() { return -cta; } ); // HtmlView Page linking property 'Transformation' for element 'mountain'
          _view.mountain.linkProperty("SizeX",  function() { return R/20; } ); // HtmlView Page linking property 'SizeX' for element 'mountain'
          _view.mountain.linkProperty("Visibility",  function() { return diagram; }, function(_v) { diagram = _v; } ); // HtmlView Page linking property 'Visibility' for element 'mountain'
          _view.mountain.linkProperty("SizeY",  function() { return 1.185*R; } ); // HtmlView Page linking property 'SizeY' for element 'mountain'
          _view.image.linkProperty("Transformation",  function() { return -cta; } ); // HtmlView Page linking property 'Transformation' for element 'image'
          _view.image.linkProperty("SizeX",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeX' for element 'image'
          _view.image.linkProperty("SizeY",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeY' for element 'image'
          _view.earth.linkProperty("Transformation",  function() { return -cta; } ); // HtmlView Page linking property 'Transformation' for element 'earth'
          _view.earth.linkProperty("SizeX",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeX' for element 'earth'
          _view.earth.linkProperty("SizeY",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeY' for element 'earth'
          _view.centrepoint.linkProperty("SizeX",  function() { return 0.04*R; } ); // HtmlView Page linking property 'SizeX' for element 'centrepoint'
          _view.centrepoint.linkProperty("Visibility",  function() { return center; }, function(_v) { center = _v; } ); // HtmlView Page linking property 'Visibility' for element 'centrepoint'
          _view.centrepoint.linkProperty("SizeY",  function() { return 0.04*R; } ); // HtmlView Page linking property 'SizeY' for element 'centrepoint'
          _view.trail.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("Visibility",  function() { return trace; }, function(_v) { trace = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.ball2.linkProperty("Transformation",  function() { return anglev; }, function(_v) { anglev = _v; } ); // HtmlView Page linking property 'Transformation' for element 'ball2'
          _view.ball2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'ball2'
          _view.ball2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'ball2'
          _view.ball2.linkProperty("Visibility",  function() { return !print; } ); // HtmlView Page linking property 'Visibility' for element 'ball2'
          _view.ball2.setAction("OnDrag", function(_data,_info) {
  //y = Math.round(y/1000)*1000;
  if (y <=6384000) y = 6384000;
  if (y >=2*R) y = 2*R;
  //selected[0]="user_defined";
  _view.comboBox.setSelectedOptions(["user_defined"]);
  xf=x; // align firing position display
  yf=y;

}); // HtmlView Page setting action 'OnDrag' for element 'ball2'
          _view.ball.linkProperty("Transformation",  function() { return anglev; }, function(_v) { anglev = _v; } ); // HtmlView Page linking property 'Transformation' for element 'ball'
          _view.ball.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'ball'
          _view.ball.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'ball'
          _view.acceleration.linkProperty("SizeX",  function() { return fx; }, function(_v) { fx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'acceleration'
          _view.acceleration.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'acceleration'
          _view.acceleration.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'acceleration'
          _view.acceleration.linkProperty("Visibility",  function() { return force; }, function(_v) { force = _v; } ); // HtmlView Page linking property 'Visibility' for element 'acceleration'
          _view.acceleration.linkProperty("SizeY",  function() { return fy; }, function(_v) { fy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'acceleration'
          _view.segment.linkProperty("SizeX",  function() { return -x; } ); // HtmlView Page linking property 'SizeX' for element 'segment'
          _view.segment.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'segment'
          _view.segment.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'segment'
          _view.segment.linkProperty("SizeY",  function() { return -y; } ); // HtmlView Page linking property 'SizeY' for element 'segment'
          _view.velocitydrag.linkProperty("SizeX",  function() { return vxdrag; }, function(_v) { vxdrag = _v; } ); // HtmlView Page linking property 'SizeX' for element 'velocitydrag'
          _view.velocitydrag.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'velocitydrag'
          _view.velocitydrag.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'velocitydrag'
          _view.velocitydrag.linkProperty("Visibility",  function() { return t==0; } ); // HtmlView Page linking property 'Visibility' for element 'velocitydrag'
          _view.velocitydrag.linkProperty("SizeY",  function() { return vydrag; }, function(_v) { vydrag = _v; } ); // HtmlView Page linking property 'SizeY' for element 'velocitydrag'
          _view.velocitydrag.setAction("OnDrag", function(_data,_info) {
  vx = vxdrag*10000/R;
  vy = vydrag*10000/R;
  //selected[0]="user_defined";
  _view.comboBox.setSelectedOptions(["user_defined"]);

}); // HtmlView Page setting action 'OnDrag' for element 'velocitydrag'
          _view.velocitydrag2.linkProperty("X",  function() { return x+vx*R/10000; } ); // HtmlView Page linking property 'X' for element 'velocitydrag2'
          _view.velocitydrag2.linkProperty("Y",  function() { return y+vy*R/10000; } ); // HtmlView Page linking property 'Y' for element 'velocitydrag2'
          _view.velocitydrag2.linkProperty("Visibility",  function() { return t==0; } ); // HtmlView Page linking property 'Visibility' for element 'velocitydrag2'
          _view.velocitydrag2.setAction("OnDrag", function(_data,_info) {
  velocity=true;

}); // HtmlView Page setting action 'OnDrag' for element 'velocitydrag2'
          _view.vgroup.linkProperty("X",  function() { return x+vx*R/10000+R/3; } ); // HtmlView Page linking property 'X' for element 'vgroup'
          _view.vgroup.linkProperty("Y",  function() { return y+vy*R/10000; } ); // HtmlView Page linking property 'Y' for element 'vgroup'
          _view.vgroup.linkProperty("Visibility",  function() { return velocity; }, function(_v) { velocity = _v; } ); // HtmlView Page linking property 'Visibility' for element 'vgroup'
          _view.vtext.linkProperty("Text",  function() { return !print?"v = " + v.toFixed(0) + " m/s":""; } ); // HtmlView Page linking property 'Text' for element 'vtext'
          _view.velocity.linkProperty("SizeX",  function() { return vx*R/10000; } ); // HtmlView Page linking property 'SizeX' for element 'velocity'
          _view.velocity.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'velocity'
          _view.velocity.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'velocity'
          _view.velocity.linkProperty("Visibility",  function() { return velocity&&t>0; } ); // HtmlView Page linking property 'Visibility' for element 'velocity'
          _view.velocity.linkProperty("SizeY",  function() { return vy*R/10000; } ); // HtmlView Page linking property 'SizeY' for element 'velocity'
          _view.agroup.linkProperty("X",  function() { return x+1.2*fx; } ); // HtmlView Page linking property 'X' for element 'agroup'
          _view.agroup.linkProperty("Y",  function() { return y+1.2*fy-R/10; } ); // HtmlView Page linking property 'Y' for element 'agroup'
          _view.agroup.linkProperty("Visibility",  function() { return force; }, function(_v) { force = _v; } ); // HtmlView Page linking property 'Visibility' for element 'agroup'
          _view.atext.linkProperty("Text",  function() { return !print?"a = " + am.toFixed(0) + " m/s2":"a"; } ); // HtmlView Page linking property 'Text' for element 'atext'
          _view.printgroup.linkProperty("Visibility",  function() { return print; }, function(_v) { print = _v; } ); // HtmlView Page linking property 'Visibility' for element 'printgroup'
          _view.printtheballs.linkProperty("Transformation",  function() { return anglev; }, function(_v) { anglev = _v; } ); // HtmlView Page linking property 'Transformation' for element 'printtheballs'
          _view.printtheballs.setAction("OnDrag", function(_data,_info) {
  //y = Math.round(y/1000)*1000;
  if (y <=6384000) y = 6384000;
  if (y >=2*R) y = 2*R;
  //selected[0]="user_defined";
  _view.comboBox.setSelectedOptions(["user_defined"]);
  xf=x; // align firing position display
  yf=y;

}); // HtmlView Page setting action 'OnDrag' for element 'printtheballs'
          _view.plottingPanel.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return print?"":"energies versus distance \naway from centre of Earth"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("XTickStep",  function() { return R; }, function(_v) { R = _v; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return -PE; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return 7*R; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return -R; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return graph; }, function(_v) { graph = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return !print?"PE = "+PE.toExponential(3)+" J \n"+"KE = "+KE.toExponential(3)+" J \n"+"TE = "+TE.toExponential(3)+" J ":""; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.shape.linkProperty("SizeX",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeX' for element 'shape'
          _view.shape.linkProperty("SizeY",  function() { return 2*R*2; } ); // HtmlView Page linking property 'SizeY' for element 'shape'
          _view.svgradial.linkProperty("SizeX",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeX' for element 'svgradial'
          _view.svgradial.linkProperty("SizeY",  function() { return 2*R*2; } ); // HtmlView Page linking property 'SizeY' for element 'svgradial'
          _view.model2.linkProperty("FunctionY",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'model2'
          _view.model2.linkProperty("Minimum",  function() { return R; }, function(_v) { R = _v; } ); // HtmlView Page linking property 'Minimum' for element 'model2'
          _view.model2.linkProperty("Maximum",  function() { return Math.max(7*R,r); } ); // HtmlView Page linking property 'Maximum' for element 'model2'
          _view.axes2.linkProperty("SizeY",  function() { return 70000000*2; } ); // HtmlView Page linking property 'SizeY' for element 'axes2'
          _view.axes.linkProperty("SizeX",  function() { return Math.max(7*R,rmax); } ); // HtmlView Page linking property 'SizeX' for element 'axes'
          _view.ketrail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'ketrail'
          _view.ketrail.linkProperty("LineColor",  function() { return memorycolorke; }, function(_v) { memorycolorke = _v; } ); // HtmlView Page linking property 'LineColor' for element 'ketrail'
          _view.ketrail.linkProperty("InputX",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'InputX' for element 'ketrail'
          _view.ketrail.linkProperty("Visibility",  function() { return KEvstime; }, function(_v) { KEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'ketrail'
          _view.ketrail.linkProperty("InputY",  function() { return KE; }, function(_v) { KE = _v; } ); // HtmlView Page linking property 'InputY' for element 'ketrail'
          _view.kept.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'kept'
          _view.kept.linkProperty("Y",  function() { return KE; }, function(_v) { KE = _v; } ); // HtmlView Page linking property 'Y' for element 'kept'
          _view.kept.linkProperty("Visibility",  function() { return KEvstime; }, function(_v) { KEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'kept'
          _view.kept.linkProperty("EnabledPosition",  function() { return _isPaused?"ENABLED_Y":""; } ); // HtmlView Page linking property 'EnabledPosition' for element 'kept'
          _view.kept.setAction("OnDrag", function(_data,_info) {
  //if (KE < 0) {
  //  KE = 0;
  //  }
  //else {
  anglev = Math.atan2(vy,vx);
  v = Math.sqrt(2*KE/m);
  vx = v*Math.cos(anglev);
  vy = v*Math.sin(anglev);
  vxdrag = R*vx/10000;
  vydrag = R*vy/10000;
  //}

}); // HtmlView Page setting action 'OnDrag' for element 'kept'
          _view.text.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return KE; }, function(_v) { KE = _v; } ); // HtmlView Page linking property 'Y' for element 'text'
          _view.text.linkProperty("Text",  function() { return !print?"KE ="+KE.toExponential(3)+ " J":""; } ); // HtmlView Page linking property 'Text' for element 'text'
          _view.text.linkProperty("Visibility",  function() { return KEvstime; }, function(_v) { KEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text'
          _view.kearray.linkProperty("NumberOfElements",  function() { return count; }, function(_v) { count = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'kearray'
          _view.kearray.linkProperty("X",  function() { return kexarray; }, function(_v) { kexarray = _v; } ); // HtmlView Page linking property 'X' for element 'kearray'
          _view.kearray.linkProperty("Y",  function() { return keyarray; }, function(_v) { keyarray = _v; } ); // HtmlView Page linking property 'Y' for element 'kearray'
          _view.kearray.linkProperty("Visibility",  function() { return KEvstime; }, function(_v) { KEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'kearray'
          _view.petrail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'petrail'
          _view.petrail.linkProperty("LineColor",  function() { return memorycolorpe; }, function(_v) { memorycolorpe = _v; } ); // HtmlView Page linking property 'LineColor' for element 'petrail'
          _view.petrail.linkProperty("InputX",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'InputX' for element 'petrail'
          _view.petrail.linkProperty("Visibility",  function() { return PEvstime; }, function(_v) { PEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'petrail'
          _view.petrail.linkProperty("InputY",  function() { return PE; }, function(_v) { PE = _v; } ); // HtmlView Page linking property 'InputY' for element 'petrail'
          _view.pept.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'pept'
          _view.pept.linkProperty("Y",  function() { return PE; }, function(_v) { PE = _v; } ); // HtmlView Page linking property 'Y' for element 'pept'
          _view.pept.linkProperty("Visibility",  function() { return PEvstime; }, function(_v) { PEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'pept'
          _view.text2.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'text2'
          _view.text2.linkProperty("Y",  function() { return PE; }, function(_v) { PE = _v; } ); // HtmlView Page linking property 'Y' for element 'text2'
          _view.text2.linkProperty("Text",  function() { return !print?"PE ="+PE.toExponential(3)+ " J":""; } ); // HtmlView Page linking property 'Text' for element 'text2'
          _view.text2.linkProperty("Visibility",  function() { return PEvstime; }, function(_v) { PEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text2'
          _view.pearray.linkProperty("NumberOfElements",  function() { return count; }, function(_v) { count = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'pearray'
          _view.pearray.linkProperty("X",  function() { return pexarray; }, function(_v) { pexarray = _v; } ); // HtmlView Page linking property 'X' for element 'pearray'
          _view.pearray.linkProperty("Y",  function() { return peyarray; }, function(_v) { peyarray = _v; } ); // HtmlView Page linking property 'Y' for element 'pearray'
          _view.pearray.linkProperty("Visibility",  function() { return PEvstime; }, function(_v) { PEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'pearray'
          _view.tetrail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'tetrail'
          _view.tetrail.linkProperty("LineColor",  function() { return memorycolorte; }, function(_v) { memorycolorte = _v; } ); // HtmlView Page linking property 'LineColor' for element 'tetrail'
          _view.tetrail.linkProperty("InputX",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'InputX' for element 'tetrail'
          _view.tetrail.linkProperty("Visibility",  function() { return TEvstime; }, function(_v) { TEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'tetrail'
          _view.tetrail.linkProperty("InputY",  function() { return TE; }, function(_v) { TE = _v; } ); // HtmlView Page linking property 'InputY' for element 'tetrail'
          _view.tearray.linkProperty("NumberOfElements",  function() { return count; }, function(_v) { count = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'tearray'
          _view.tearray.linkProperty("X",  function() { return texarray; }, function(_v) { texarray = _v; } ); // HtmlView Page linking property 'X' for element 'tearray'
          _view.tearray.linkProperty("Y",  function() { return teyarray; }, function(_v) { teyarray = _v; } ); // HtmlView Page linking property 'Y' for element 'tearray'
          _view.tearray.linkProperty("Visibility",  function() { return TEvstime; }, function(_v) { TEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'tearray'
          _view.text22.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'text22'
          _view.text22.linkProperty("Y",  function() { return TE; }, function(_v) { TE = _v; } ); // HtmlView Page linking property 'Y' for element 'text22'
          _view.text22.linkProperty("Text",  function() { return !print?"TE ="+TE.toExponential(3)+ " J":""; } ); // HtmlView Page linking property 'Text' for element 'text22'
          _view.text22.linkProperty("Visibility",  function() { return TEvstime; }, function(_v) { TEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text22'
          _view.tept.linkProperty("X",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'X' for element 'tept'
          _view.tept.linkProperty("Y",  function() { return TE; }, function(_v) { TE = _v; } ); // HtmlView Page linking property 'Y' for element 'tept'
          _view.tept.linkProperty("Visibility",  function() { return TEvstime; }, function(_v) { TEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'tept'
          _view.earthimage.linkProperty("SizeX",  function() { return _view.plottingPanel.toPixelMod([2*R,0])[0]; } ); // HtmlView Page linking property 'SizeX' for element 'earthimage'
          _view.earthimage.linkProperty("SizeY",  function() { return _view.plottingPanel.toPixelMod([2*R,0])[0]; } ); // HtmlView Page linking property 'SizeY' for element 'earthimage'
          _view.printgroupplot.linkProperty("Visibility",  function() { return print; }, function(_v) { print = _v; } ); // HtmlView Page linking property 'Visibility' for element 'printgroupplot'
          _view.printKE.linkProperty("Visibility",  function() { return KEvstime; }, function(_v) { KEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'printKE'
          _view.printPE.linkProperty("Visibility",  function() { return PEvstime; }, function(_v) { PEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'printPE'
          _view.printTE.linkProperty("Visibility",  function() { return TEvstime; }, function(_v) { TEvstime = _v; } ); // HtmlView Page linking property 'Visibility' for element 'printTE'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function gravity08_1_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = gravity08_1_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('7.4.3_Energies_of_Circular_Orbits_Satellites','./gravity08_1.xhtml');

  return _view;
} // end of main function

function gravity08_1_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'fullscreen'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton22", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton22'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton22'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton22'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton22'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton222", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton222'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton222'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton222'
      ;

    _view._addElement(EJSS_INTERFACE.button,"init", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'init'
      .setProperty("Tooltip","Read in values and reset projectile to top of mountain.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'init'
      .setProperty("Text","▼") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'init'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton22", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton22'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton22'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton22'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"model3", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'model3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"model", _view.model3) // EJsS HtmlView.HtmlView Page: declaration of element 'model'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model'
      .setProperty("Tooltip","key in expression like   -400000000000000/r or 400000000000000/(2*r) or -400000000000000/(2*r)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model'
      .setProperty("Text","?E =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'model'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models", _view.model3) // EJsS HtmlView.HtmlView Page: declaration of element 'models'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'models'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.model3) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","21vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","model") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'drawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'drawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'drawingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"background2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'background2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'background2'
      .setProperty("ImageUrl","./stars2.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'background2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'background2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"fire", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fire'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'fire'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'fire'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'fire'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mountain", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mountain'
      .setProperty("FillColor","LIGHTGRAY") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mountain'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mountain'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'mountain'
      .setProperty("LineColor","LIGHTGRAY") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mountain'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'mountain'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'image'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'image'
      .setProperty("ImageUrl","./NewtonsMountain/southpolepo00009_cV2.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"earth", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'earth'
      .setProperty("FillColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'earth'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'earth'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'earth'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'earth'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'earth'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'earth'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"centrepoint", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centrepoint'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'centrepoint'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'centrepoint'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'centrepoint'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'centrepoint'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ball2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ball2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ball2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ball2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ball2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ball2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ball2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'ball2'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'ball2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ball", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ball'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"acceleration", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'acceleration'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'acceleration'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'acceleration'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'acceleration'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"segment", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segment'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segment'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"velocitydrag", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocitydrag'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'velocitydrag'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'velocitydrag'
      .setProperty("EnabledSize","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'velocitydrag'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'velocitydrag'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'velocitydrag'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'velocitydrag'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"velocitydrag2", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocitydrag2'
      .setProperty("FillColor","rgba(0,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'velocitydrag2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'velocitydrag2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'velocitydrag2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'velocitydrag2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'velocitydrag2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'velocitydrag2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"vgroup", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"vtext", _view.vgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'vtext'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vtext'
      .setProperty("OutlineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'OutlineColor' for element 'vtext'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'vtext'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'vtext'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"velocity", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'velocity'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'velocity'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'velocity'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'velocity'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'velocity'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"agroup", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'agroup'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"atext", _view.agroup) // EJsS HtmlView.HtmlView Page: declaration of element 'atext'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'atext'
      .setProperty("OutlineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'OutlineColor' for element 'atext'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'atext'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'atext'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"printgroup", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'printgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"printv", _view.printgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'printv'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'printv'
      .setProperty("OutlineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'OutlineColor' for element 'printv'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'printv'
      .setProperty("X",200000) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'printv'
      .setProperty("Y",200000) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'printv'
      .setProperty("Text","v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'printv'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'printv'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"printtheballs", _view.printgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'printtheballs'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'printtheballs'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'printtheballs'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'printtheballs'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'printtheballs'
      .setProperty("X",20000) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'printtheballs'
      .setProperty("Y",20000) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'printtheballs'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'printtheballs'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'printtheballs'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'printtheballs'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("AxisYFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YTickStep",10000000) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("TitleY","energies") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AxisXFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","r") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"svgradial", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'svgradial'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'svgradial'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'svgradial'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'svgradial'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'svgradial'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'svgradial'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"model2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'model2'
      .setProperty("FunctionX","r") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'model2'
      .setProperty("NumPoints",100) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'model2'
      .setProperty("Variable","r") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'model2'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'model2'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'model2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axes2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'axes2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axes2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axes2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axes2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axes2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axes2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axes2'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axes2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axes", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'axes'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axes'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axes'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axes'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axes'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axes'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axes'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"ketrail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ketrail'
      .setProperty("Active",true) // EJsS HtmlView.HtmlView Page: setting property 'Active' for element 'ketrail'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'ketrail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'ketrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'ketrail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"kept", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'kept'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'kept'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'kept'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'kept'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'kept'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'kept'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"kearray", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'kearray'
      .setProperty("FillColor","rgba(200,0,200,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'kearray'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'kearray'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'kearray'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'kearray'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'kearray'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'kearray'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"petrail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'petrail'
      .setProperty("Active",true) // EJsS HtmlView.HtmlView Page: setting property 'Active' for element 'petrail'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'petrail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'petrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'petrail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"pept", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'pept'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'pept'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pept'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'pept'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pept'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pept'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text2'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"pearray", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'pearray'
      .setProperty("FillColor","rgba(0,0,200,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'pearray'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'pearray'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'pearray'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'pearray'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'pearray'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'pearray'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"tetrail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tetrail'
      .setProperty("Active",true) // EJsS HtmlView.HtmlView Page: setting property 'Active' for element 'tetrail'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'tetrail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'tetrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tetrail'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"tearray", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tearray'
      .setProperty("FillColor","rgba(50,50,50,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'tearray'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'tearray'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'tearray'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tearray'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'tearray'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'tearray'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text22", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text22'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"tept", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tept'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'tept'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'tept'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'tept'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'tept'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'tept'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"earthimage", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'earthimage'
      .setProperty("ImageUrl","./NewtonsMountain/southpolepo00009_cV2.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'earthimage'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'earthimage'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"printgroupplot", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'printgroupplot'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"printKE", _view.printgroupplot) // EJsS HtmlView.HtmlView Page: declaration of element 'printKE'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'printKE'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'printKE'
      .setProperty("X",12756200) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'printKE'
      .setProperty("Text","KE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'printKE'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'printKE'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"printPE", _view.printgroupplot) // EJsS HtmlView.HtmlView Page: declaration of element 'printPE'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'printPE'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'printPE'
      .setProperty("X",12756200) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'printPE'
      .setProperty("Text","PE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'printPE'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'printPE'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"printTE", _view.printgroupplot) // EJsS HtmlView.HtmlView Page: declaration of element 'printTE'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'printTE'
      .setProperty("X",12756200) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'printTE'
      .setProperty("Text","TE") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'printTE'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'printTE'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      NewtonsMountain<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity08_1/gravity08_1/2017-07-19_1128.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity08_1/01authortoddtimberlake_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity08_1/1authorlookangphoto.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity08_1/01authorfu-kwun.hwang.png" />
 Todd Timberlake, this remixed version is by lookang (weelookang@gmail.com); lookang; fu-kwun hwang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Creative Commons Attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new gravity08_1("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity08_1/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
