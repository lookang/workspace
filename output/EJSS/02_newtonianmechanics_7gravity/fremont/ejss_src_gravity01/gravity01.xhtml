<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Moon Phases Model with SeaTides</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function gravity01(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var fontb; // EjsS Model.Variables.Model Variables.fontb
  var font; // EjsS Model.Variables.Model Variables.font
  var pi; // EjsS Model.Variables.Model Variables.pi
  var selected; // EjsS Model.Variables.Model Variables.selected
  var ang; // EjsS Model.Variables.Model Variables.ang
  var angdeg; // EjsS Model.Variables.Model Variables.angdeg
  var ang2; // EjsS Model.Variables.Model Variables.ang2
  var theta; // EjsS Model.Variables.Model Variables.theta
  var x; // EjsS Model.Variables.Model Variables.x
  var y; // EjsS Model.Variables.Model Variables.y
  var d; // EjsS Model.Variables.Model Variables.d
  var rE; // EjsS Model.Variables.Model Variables.rE
  var rM; // EjsS Model.Variables.Model Variables.rM
  var angle; // EjsS Model.Variables.Model Variables.angle
  var time; // EjsS Model.Variables.Model Variables.time
  var dtime; // EjsS Model.Variables.Model Variables.dtime
  var timecon; // EjsS Model.Variables.Model Variables.timecon
  var tang; // EjsS Model.Variables.Model Variables.tang
  var xobs; // EjsS Model.Variables.Model Variables.xobs
  var yobs; // EjsS Model.Variables.Model Variables.yobs
  var dspot; // EjsS Model.Variables.Model Variables.dspot
  var day; // EjsS Model.Variables.Model Variables.day
  var y1; // EjsS Model.Variables.Model Variables.y1
  var y2; // EjsS Model.Variables.Model Variables.y2
  var showy1; // EjsS Model.Variables.Model Variables.showy1
  var showy2; // EjsS Model.Variables.Model Variables.showy2
  var showysum; // EjsS Model.Variables.Model Variables.showysum
  var counter; // EjsS Model.Variables.Model Variables.counter

  var np; // EjsS Model.Variables.Drawing Variables.np
  var pl; // EjsS Model.Variables.Drawing Variables.pl
  var pd; // EjsS Model.Variables.Drawing Variables.pd
  var el; // EjsS Model.Variables.Drawing Variables.el
  var ed; // EjsS Model.Variables.Drawing Variables.ed
  var cone; // EjsS Model.Variables.Drawing Variables.cone
  var h1x; // EjsS Model.Variables.Drawing Variables.h1x
  var h1y; // EjsS Model.Variables.Drawing Variables.h1y
  var lhx; // EjsS Model.Variables.Drawing Variables.lhx
  var lhy; // EjsS Model.Variables.Drawing Variables.lhy

  var pv; // EjsS Model.Variables.Moon View Variables.pv
  var ShowMoon; // EjsS Model.Variables.Moon View Variables.ShowMoon
  var transp; // EjsS Model.Variables.Moon View Variables.transp
  var color; // EjsS Model.Variables.Moon View Variables.color
  var colorobs; // EjsS Model.Variables.Moon View Variables.colorobs
  var colorday; // EjsS Model.Variables.Moon View Variables.colorday

  var observer; // EjsS Model.Variables.Control Variables.observer
  var ShowMO; // EjsS Model.Variables.Control Variables.ShowMO
  var ShowLC; // EjsS Model.Variables.Control Variables.ShowLC
  var overhead; // EjsS Model.Variables.Control Variables.overhead
  var observable; // EjsS Model.Variables.Control Variables.observable
  var inside; // EjsS Model.Variables.Control Variables.inside
  var special; // EjsS Model.Variables.Control Variables.special
  var blueness; // EjsS Model.Variables.Control Variables.blueness
  var text; // EjsS Model.Variables.Control Variables.text
  var textstring; // EjsS Model.Variables.Control Variables.textstring
  var seatextstring; // EjsS Model.Variables.Control Variables.seatextstring
  var seatextstring2; // EjsS Model.Variables.Control Variables.seatextstring2

  var nm; // EjsS Model.Variables.circle.nm
  var xm; // EjsS Model.Variables.circle.xm
  var ym; // EjsS Model.Variables.circle.ym
  var dym; // EjsS Model.Variables.circle.dym
  var dxm; // EjsS Model.Variables.circle.dxm
  var nmt; // EjsS Model.Variables.circle.nmt
  var xmt; // EjsS Model.Variables.circle.xmt
  var ymt; // EjsS Model.Variables.circle.ymt
  var tmt; // EjsS Model.Variables.circle.tmt
  var timebolean; // EjsS Model.Variables.circle.timebolean

  var xmin; // EjsS Model.Variables.layout.xmin
  var selectedview; // EjsS Model.Variables.layout.selectedview
  var xmax; // EjsS Model.Variables.layout.xmax
  var ymin; // EjsS Model.Variables.layout.ymin
  var ymax; // EjsS Model.Variables.layout.ymax
  var rangex; // EjsS Model.Variables.layout.rangex
  var rangey; // EjsS Model.Variables.layout.rangey
  var size; // EjsS Model.Variables.layout.size
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var Width3; // EjsS Model.Variables.layout.Width3
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var graph2; // EjsS Model.Variables.layout.graph2
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var disabled2; // EjsS Model.Variables.layout.disabled2
  var datashow; // EjsS Model.Variables.layout.datashow
  var datashow2; // EjsS Model.Variables.layout.datashow2
  var textplay; // EjsS Model.Variables.layout.textplay
  var timetext; // EjsS Model.Variables.layout.timetext
  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var iOS; // EjsS Model.Variables.layout.iOS

  var sunbeamn; // EjsS Model.Variables.sunbeam.sunbeamn
  var sunbeamx; // EjsS Model.Variables.sunbeam.sunbeamx
  var sunbeamy; // EjsS Model.Variables.sunbeam.sunbeamy

  var moonsealevelshow; // EjsS Model.Variables.show.moonsealevelshow
  var sunsealevelshow; // EjsS Model.Variables.show.sunsealevelshow
  var moonsunsealevelshow; // EjsS Model.Variables.show.moonsunsealevelshow

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      fontb : fontb,
      font : font,
      pi : pi,
      selected : selected,
      ang : ang,
      angdeg : angdeg,
      ang2 : ang2,
      theta : theta,
      x : x,
      y : y,
      d : d,
      rE : rE,
      rM : rM,
      angle : angle,
      time : time,
      dtime : dtime,
      timecon : timecon,
      tang : tang,
      xobs : xobs,
      yobs : yobs,
      dspot : dspot,
      day : day,
      y1 : y1,
      y2 : y2,
      showy1 : showy1,
      showy2 : showy2,
      showysum : showysum,
      counter : counter,
      np : np,
      pl : pl,
      pd : pd,
      el : el,
      ed : ed,
      cone : cone,
      h1x : h1x,
      h1y : h1y,
      lhx : lhx,
      lhy : lhy,
      pv : pv,
      ShowMoon : ShowMoon,
      transp : transp,
      color : color,
      colorobs : colorobs,
      colorday : colorday,
      observer : observer,
      ShowMO : ShowMO,
      ShowLC : ShowLC,
      overhead : overhead,
      observable : observable,
      inside : inside,
      special : special,
      blueness : blueness,
      text : text,
      textstring : textstring,
      seatextstring : seatextstring,
      seatextstring2 : seatextstring2,
      nm : nm,
      xm : xm,
      ym : ym,
      dym : dym,
      dxm : dxm,
      nmt : nmt,
      xmt : xmt,
      ymt : ymt,
      tmt : tmt,
      timebolean : timebolean,
      xmin : xmin,
      selectedview : selectedview,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      size : size,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      Width3 : Width3,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      world : world,
      graph : graph,
      graph2 : graph2,
      disabledworld : disabledworld,
      disabled : disabled,
      disabled2 : disabled2,
      datashow : datashow,
      datashow2 : datashow2,
      textplay : textplay,
      timetext : timetext,
      isAndroid : isAndroid,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      iOS : iOS,
      sunbeamn : sunbeamn,
      sunbeamx : sunbeamx,
      sunbeamy : sunbeamy,
      moonsealevelshow : moonsealevelshow,
      sunsealevelshow : sunsealevelshow,
      moonsunsealevelshow : moonsunsealevelshow
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.ang != "undefined") ang = json.ang;
    if(typeof json.angdeg != "undefined") angdeg = json.angdeg;
    if(typeof json.ang2 != "undefined") ang2 = json.ang2;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.rE != "undefined") rE = json.rE;
    if(typeof json.rM != "undefined") rM = json.rM;
    if(typeof json.angle != "undefined") angle = json.angle;
    if(typeof json.time != "undefined") time = json.time;
    if(typeof json.dtime != "undefined") dtime = json.dtime;
    if(typeof json.timecon != "undefined") timecon = json.timecon;
    if(typeof json.tang != "undefined") tang = json.tang;
    if(typeof json.xobs != "undefined") xobs = json.xobs;
    if(typeof json.yobs != "undefined") yobs = json.yobs;
    if(typeof json.dspot != "undefined") dspot = json.dspot;
    if(typeof json.day != "undefined") day = json.day;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.showy1 != "undefined") showy1 = json.showy1;
    if(typeof json.showy2 != "undefined") showy2 = json.showy2;
    if(typeof json.showysum != "undefined") showysum = json.showysum;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.np != "undefined") np = json.np;
    if(typeof json.pl != "undefined") pl = json.pl;
    if(typeof json.pd != "undefined") pd = json.pd;
    if(typeof json.el != "undefined") el = json.el;
    if(typeof json.ed != "undefined") ed = json.ed;
    if(typeof json.cone != "undefined") cone = json.cone;
    if(typeof json.h1x != "undefined") h1x = json.h1x;
    if(typeof json.h1y != "undefined") h1y = json.h1y;
    if(typeof json.lhx != "undefined") lhx = json.lhx;
    if(typeof json.lhy != "undefined") lhy = json.lhy;
    if(typeof json.pv != "undefined") pv = json.pv;
    if(typeof json.ShowMoon != "undefined") ShowMoon = json.ShowMoon;
    if(typeof json.transp != "undefined") transp = json.transp;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.colorobs != "undefined") colorobs = json.colorobs;
    if(typeof json.colorday != "undefined") colorday = json.colorday;
    if(typeof json.observer != "undefined") observer = json.observer;
    if(typeof json.ShowMO != "undefined") ShowMO = json.ShowMO;
    if(typeof json.ShowLC != "undefined") ShowLC = json.ShowLC;
    if(typeof json.overhead != "undefined") overhead = json.overhead;
    if(typeof json.observable != "undefined") observable = json.observable;
    if(typeof json.inside != "undefined") inside = json.inside;
    if(typeof json.special != "undefined") special = json.special;
    if(typeof json.blueness != "undefined") blueness = json.blueness;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.textstring != "undefined") textstring = json.textstring;
    if(typeof json.seatextstring != "undefined") seatextstring = json.seatextstring;
    if(typeof json.seatextstring2 != "undefined") seatextstring2 = json.seatextstring2;
    if(typeof json.nm != "undefined") nm = json.nm;
    if(typeof json.xm != "undefined") xm = json.xm;
    if(typeof json.ym != "undefined") ym = json.ym;
    if(typeof json.dym != "undefined") dym = json.dym;
    if(typeof json.dxm != "undefined") dxm = json.dxm;
    if(typeof json.nmt != "undefined") nmt = json.nmt;
    if(typeof json.xmt != "undefined") xmt = json.xmt;
    if(typeof json.ymt != "undefined") ymt = json.ymt;
    if(typeof json.tmt != "undefined") tmt = json.tmt;
    if(typeof json.timebolean != "undefined") timebolean = json.timebolean;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Width3 != "undefined") Width3 = json.Width3;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.graph2 != "undefined") graph2 = json.graph2;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.disabled2 != "undefined") disabled2 = json.disabled2;
    if(typeof json.datashow != "undefined") datashow = json.datashow;
    if(typeof json.datashow2 != "undefined") datashow2 = json.datashow2;
    if(typeof json.textplay != "undefined") textplay = json.textplay;
    if(typeof json.timetext != "undefined") timetext = json.timetext;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.sunbeamn != "undefined") sunbeamn = json.sunbeamn;
    if(typeof json.sunbeamx != "undefined") sunbeamx = json.sunbeamx;
    if(typeof json.sunbeamy != "undefined") sunbeamy = json.sunbeamy;
    if(typeof json.moonsealevelshow != "undefined") moonsealevelshow = json.moonsealevelshow;
    if(typeof json.sunsealevelshow != "undefined") sunsealevelshow = json.sunsealevelshow;
    if(typeof json.moonsunsealevelshow != "undefined") moonsunsealevelshow = json.moonsunsealevelshow;
  };

  _model._inputAndPublicParameters = ["fontb",  "font",  "pi",  "selected",  "ang",  "angdeg",  "ang2",  "theta",  "x",  "y",  "d",  "rE",  "rM",  "angle",  "time",  "dtime",  "timecon",  "tang",  "xobs",  "yobs",  "dspot",  "day",  "y1",  "y2",  "showy1",  "showy2",  "showysum",  "counter",  "np",  "pl",  "pd",  "el",  "ed",  "cone",  "h1x",  "h1y",  "lhx",  "lhy",  "pv",  "ShowMoon",  "transp",  "color",  "colorobs",  "colorday",  "observer",  "ShowMO",  "ShowLC",  "overhead",  "observable",  "inside",  "special",  "blueness",  "text",  "textstring",  "seatextstring",  "seatextstring2",  "nm",  "xm",  "ym",  "dym",  "dxm",  "nmt",  "xmt",  "ymt",  "tmt",  "timebolean",  "xmin",  "selectedview",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "Width",  "Height",  "Width1",  "Width2",  "Width3",  "xvst",  "vvst",  "avst",  "world",  "graph",  "graph2",  "disabledworld",  "disabled",  "disabled2",  "datashow",  "datashow2",  "textplay",  "timetext",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "iOS",  "sunbeamn",  "sunbeamx",  "sunbeamy",  "moonsealevelshow",  "sunsealevelshow",  "moonsunsealevelshow"]; 

  _model._outputAndPublicParameters = ["fontb",  "font",  "pi",  "selected",  "ang",  "angdeg",  "ang2",  "theta",  "x",  "y",  "d",  "rE",  "rM",  "angle",  "time",  "dtime",  "timecon",  "tang",  "xobs",  "yobs",  "dspot",  "day",  "y1",  "y2",  "showy1",  "showy2",  "showysum",  "counter",  "np",  "pl",  "pd",  "el",  "ed",  "cone",  "h1x",  "h1y",  "lhx",  "lhy",  "pv",  "ShowMoon",  "transp",  "color",  "colorobs",  "colorday",  "observer",  "ShowMO",  "ShowLC",  "overhead",  "observable",  "inside",  "special",  "blueness",  "text",  "textstring",  "seatextstring",  "seatextstring2",  "nm",  "xm",  "ym",  "dym",  "dxm",  "nmt",  "xmt",  "ymt",  "tmt",  "timebolean",  "xmin",  "selectedview",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "Width",  "Height",  "Width1",  "Width2",  "Width3",  "xvst",  "vvst",  "avst",  "world",  "graph",  "graph2",  "disabledworld",  "disabled",  "disabled2",  "datashow",  "datashow2",  "textplay",  "timetext",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "iOS",  "sunbeamn",  "sunbeamx",  "sunbeamy",  "moonsealevelshow",  "sunsealevelshow",  "moonsunsealevelshow"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["circlemarking"] = true;
    __pagesEnabled["moon"] = true;
    __pagesEnabled["sunbeam"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["MoonPhaseEvol"] = false;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["Event 2"] = true;
    __pagesEnabled["moon"] = true;
    __pagesEnabled["observable"] = true;
    __pagesEnabled["daylight"] = true;
    __pagesEnabled["textstring"] = true;
    __pagesEnabled["sealeveltext"] = true;
    __pagesEnabled["timetext"] = true;
    __pagesEnabled["layout"] = false;
  });

  _model.addToReset(function() {
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Model Variables.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.Model Variables.font
    pi = Math.PI; // EjsS Model.Variables.Model Variables.pi
    selected = new Array(1); // EjsS Model.Variables.Model Variables.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Model Variables.selected
        selected[_i0] = "Orbit";  // EjsS Model.Variables.Model Variables.selected
      }
    }());
    ang = 0; // EjsS Model.Variables.Model Variables.ang
    angdeg = ang*180/pi; // EjsS Model.Variables.Model Variables.angdeg
    ang2 = ang; // EjsS Model.Variables.Model Variables.ang2
    theta = 0; // EjsS Model.Variables.Model Variables.theta
    x = 0; // EjsS Model.Variables.Model Variables.x
    y = 0; // EjsS Model.Variables.Model Variables.y
    d = 10; // EjsS Model.Variables.Model Variables.d
    rE = 4; // EjsS Model.Variables.Model Variables.rE
    rM = 2; // EjsS Model.Variables.Model Variables.rM
    angle = 0; // EjsS Model.Variables.Model Variables.angle
    time = 0.0; // EjsS Model.Variables.Model Variables.time
    dtime = 1; // EjsS Model.Variables.Model Variables.dtime
    timecon = 0; // EjsS Model.Variables.Model Variables.timecon
    tang = 0; // EjsS Model.Variables.Model Variables.tang
    xobs = 0; // EjsS Model.Variables.Model Variables.xobs
    yobs = 0; // EjsS Model.Variables.Model Variables.yobs
    dspot = rE/4; // EjsS Model.Variables.Model Variables.dspot
    day = 0; // EjsS Model.Variables.Model Variables.day
    y1 = 0; // EjsS Model.Variables.Model Variables.y1
    y2 = 0; // EjsS Model.Variables.Model Variables.y2
    showy1 = true; // EjsS Model.Variables.Model Variables.showy1
    showy2 = true; // EjsS Model.Variables.Model Variables.showy2
    showysum = true; // EjsS Model.Variables.Model Variables.showysum
    counter = 0; // EjsS Model.Variables.Model Variables.counter
  });

  _model.addToReset(function() {
    np = 100; // EjsS Model.Variables.Drawing Variables.np
    pl = new Array(np); // EjsS Model.Variables.Drawing Variables.pl
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.pl
        pl[_i0] = [];
        for (_i1=0; _i1<2; _i1+=1) {  // EjsS Model.Variables.Drawing Variables.pl
          pl[_i0][_i1] = 0;  // EjsS Model.Variables.Drawing Variables.pl
        }
      }
    }());
    pd = new Array(np); // EjsS Model.Variables.Drawing Variables.pd
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.pd
        pd[_i0] = [];
        for (_i1=0; _i1<2; _i1+=1) {  // EjsS Model.Variables.Drawing Variables.pd
          pd[_i0][_i1] = 0;  // EjsS Model.Variables.Drawing Variables.pd
        }
      }
    }());
    el = new Array(np); // EjsS Model.Variables.Drawing Variables.el
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.el
        el[_i0] = [];
        for (_i1=0; _i1<2; _i1+=1) {  // EjsS Model.Variables.Drawing Variables.el
          el[_i0][_i1] = 0;  // EjsS Model.Variables.Drawing Variables.el
        }
      }
    }());
    ed = new Array(np); // EjsS Model.Variables.Drawing Variables.ed
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.ed
        ed[_i0] = [];
        for (_i1=0; _i1<2; _i1+=1) {  // EjsS Model.Variables.Drawing Variables.ed
          ed[_i0][_i1] = 0;  // EjsS Model.Variables.Drawing Variables.ed
        }
      }
    }());
    cone = new Array(4); // EjsS Model.Variables.Drawing Variables.cone
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<4; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.cone
        cone[_i0] = [];
        for (_i1=0; _i1<2; _i1+=1) {  // EjsS Model.Variables.Drawing Variables.cone
          cone[_i0][_i1] = 0;  // EjsS Model.Variables.Drawing Variables.cone
        }
      }
    }());
    h1x = 0; // EjsS Model.Variables.Drawing Variables.h1x
    h1y = 0; // EjsS Model.Variables.Drawing Variables.h1y
    lhx = 0; // EjsS Model.Variables.Drawing Variables.lhx
    lhy = 0; // EjsS Model.Variables.Drawing Variables.lhy
  });

  _model.addToReset(function() {
    pv = new Array(2*np); // EjsS Model.Variables.Moon View Variables.pv
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<2*np; _i0+=1) {  // EjsS Model.Variables.Moon View Variables.pv
        pv[_i0] = [];
        for (_i1=0; _i1<2; _i1+=1) {  // EjsS Model.Variables.Moon View Variables.pv
          pv[_i0][_i1] = 0;  // EjsS Model.Variables.Moon View Variables.pv
        }
      }
    }());
    ShowMoon = true; // EjsS Model.Variables.Moon View Variables.ShowMoon
    transp = 0; // EjsS Model.Variables.Moon View Variables.transp
    color = ""; // EjsS Model.Variables.Moon View Variables.color
    colorobs = ""; // EjsS Model.Variables.Moon View Variables.colorobs
    colorday = ""; // EjsS Model.Variables.Moon View Variables.colorday
  });

  _model.addToReset(function() {
    observer = true; // EjsS Model.Variables.Control Variables.observer
    ShowMO = true; // EjsS Model.Variables.Control Variables.ShowMO
    ShowLC = true; // EjsS Model.Variables.Control Variables.ShowLC
    overhead = true; // EjsS Model.Variables.Control Variables.overhead
    observable = true; // EjsS Model.Variables.Control Variables.observable
    inside = true; // EjsS Model.Variables.Control Variables.inside
    special = true; // EjsS Model.Variables.Control Variables.special
    blueness = 1.0; // EjsS Model.Variables.Control Variables.blueness
    text = true; // EjsS Model.Variables.Control Variables.text
    textstring = ""; // EjsS Model.Variables.Control Variables.textstring
    seatextstring = ""; // EjsS Model.Variables.Control Variables.seatextstring
    seatextstring2 = ""; // EjsS Model.Variables.Control Variables.seatextstring2
  });

  _model.addToReset(function() {
    nm = 24; // EjsS Model.Variables.circle.nm
    xm = new Array(nm); // EjsS Model.Variables.circle.xm
    (function () {
      var _i0;
      for (_i0=0; _i0<nm; _i0+=1) {  // EjsS Model.Variables.circle.xm
        xm[_i0] = 0;  // EjsS Model.Variables.circle.xm
      }
    }());
    ym = new Array(nm); // EjsS Model.Variables.circle.ym
    (function () {
      var _i0;
      for (_i0=0; _i0<nm; _i0+=1) {  // EjsS Model.Variables.circle.ym
        ym[_i0] = 0;  // EjsS Model.Variables.circle.ym
      }
    }());
    dym = new Array(nm); // EjsS Model.Variables.circle.dym
    (function () {
      var _i0;
      for (_i0=0; _i0<nm; _i0+=1) {  // EjsS Model.Variables.circle.dym
        dym[_i0] = 0;  // EjsS Model.Variables.circle.dym
      }
    }());
    dxm = new Array(nm); // EjsS Model.Variables.circle.dxm
    (function () {
      var _i0;
      for (_i0=0; _i0<nm; _i0+=1) {  // EjsS Model.Variables.circle.dxm
        dxm[_i0] = 0;  // EjsS Model.Variables.circle.dxm
      }
    }());
    nmt = nm/6; // EjsS Model.Variables.circle.nmt
    xmt = new Array(nmt); // EjsS Model.Variables.circle.xmt
    (function () {
      var _i0;
      for (_i0=0; _i0<nmt; _i0+=1) {  // EjsS Model.Variables.circle.xmt
        xmt[_i0] = 0;  // EjsS Model.Variables.circle.xmt
      }
    }());
    ymt = new Array(nmt); // EjsS Model.Variables.circle.ymt
    (function () {
      var _i0;
      for (_i0=0; _i0<nmt; _i0+=1) {  // EjsS Model.Variables.circle.ymt
        ymt[_i0] = 0;  // EjsS Model.Variables.circle.ymt
      }
    }());
    tmt = new Array(nmt); // EjsS Model.Variables.circle.tmt
    (function () {
      var _i0;
      for (_i0=0; _i0<nmt; _i0+=1) {  // EjsS Model.Variables.circle.tmt
        tmt[_i0] = "";  // EjsS Model.Variables.circle.tmt
      }
    }());
    timebolean = true; // EjsS Model.Variables.circle.timebolean
  });

  _model.addToReset(function() {
    xmin = -11; // EjsS Model.Variables.layout.xmin
    selectedview = new Array(1); // EjsS Model.Variables.layout.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview
        selectedview[_i0] = "world";  // EjsS Model.Variables.layout.selectedview
      }
    }());
    xmax = 17.5; // EjsS Model.Variables.layout.xmax
    ymin = -11; // EjsS Model.Variables.layout.ymin
    ymax = 11; // EjsS Model.Variables.layout.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.layout.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.layout.rangey
    size = rangex/20; // EjsS Model.Variables.layout.size
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "0%"; // EjsS Model.Variables.layout.Width2
    Width3 = "0%"; // EjsS Model.Variables.layout.Width3
    vvst = true; // EjsS Model.Variables.layout.vvst
    world = true; // EjsS Model.Variables.layout.world
    disabledworld = true; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
    disabled2 = false; // EjsS Model.Variables.layout.disabled2
    datashow = true; // EjsS Model.Variables.layout.datashow
    datashow2 = true; // EjsS Model.Variables.layout.datashow2
    textplay = "Select the options,\nclick play to simulate"; // EjsS Model.Variables.layout.textplay
    timetext = ""; // EjsS Model.Variables.layout.timetext
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
  });

  _model.addToReset(function() {
    sunbeamn = 5; // EjsS Model.Variables.sunbeam.sunbeamn
    sunbeamx = new Array(sunbeamn); // EjsS Model.Variables.sunbeam.sunbeamx
    (function () {
      var _i0;
      for (_i0=0; _i0<sunbeamn; _i0+=1) {  // EjsS Model.Variables.sunbeam.sunbeamx
        sunbeamx[_i0] = 0;  // EjsS Model.Variables.sunbeam.sunbeamx
      }
    }());
    sunbeamy = new Array(sunbeamn); // EjsS Model.Variables.sunbeam.sunbeamy
    (function () {
      var _i0;
      for (_i0=0; _i0<sunbeamn; _i0+=1) {  // EjsS Model.Variables.sunbeam.sunbeamy
        sunbeamy[_i0] = 0;  // EjsS Model.Variables.sunbeam.sunbeamy
      }
    }());
  });

  _model.addToReset(function() {
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function rgb(r,g,b){  // > CustomCode.rgb:1
  return "rgb("+r+","+g+","+b+")";  // > CustomCode.rgb:2
  }   // > CustomCode.rgb:3

  function rgbt(r,g,b,t){  // > CustomCode.rgbt:1
  return "rgbt("+r+","+g+","+b+","+t+")";  // > CustomCode.rgbt:2
  }   // > CustomCode.rgbt:3

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.9 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  var kepub =0.85 ;  // > CustomCode.changeOrientation:4
  // check platform for Apps  // > CustomCode.changeOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:7
     // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
     // > CustomCode.changeOrientation:15
  switch (window.orientation) {  // > CustomCode.changeOrientation:16
    case 0:  // > CustomCode.changeOrientation:17
    case 180:  // > CustomCode.changeOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:21
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:22
        // return window.screen.height;  // > CustomCode.changeOrientation:23
        //  return window.innerHeight;  // > CustomCode.changeOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
      }  // > CustomCode.changeOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:29
        // return window.screen.height;  // > CustomCode.changeOrientation:30
        //  return window.innerHeight;  // > CustomCode.changeOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:32
      }  // > CustomCode.changeOrientation:33
      else {  // > CustomCode.changeOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:35
        return window.innerHeight*k;  // > CustomCode.changeOrientation:36
      }  // > CustomCode.changeOrientation:37
      break;  // > CustomCode.changeOrientation:38
    case 90:  // > CustomCode.changeOrientation:39
    case -90:  // > CustomCode.changeOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:41
     // > CustomCode.changeOrientation:42
      if (iOSapp){ // App  // > CustomCode.changeOrientation:43
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:44
        // return window.screen.height;  // > CustomCode.changeOrientation:45
        //  return window.innerHeight;  // > CustomCode.changeOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:47
      }  // > CustomCode.changeOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:51
        // return window.screen.height;  // > CustomCode.changeOrientation:52
        //  return window.innerHeight;  // > CustomCode.changeOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:54
      }  // > CustomCode.changeOrientation:55
      else { // browser Android and PC  // > CustomCode.changeOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:57
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:58
        return window.innerHeight*k;  // > CustomCode.changeOrientation:59
      }  // > CustomCode.changeOrientation:60
      break;  // > CustomCode.changeOrientation:61
    default:  // > CustomCode.changeOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:64
      return window.innerHeight*k;  // > CustomCode.changeOrientation:65
  }  // > CustomCode.changeOrientation:66
     // > CustomCode.changeOrientation:67
  }  // > CustomCode.changeOrientation:68
     // > CustomCode.changeOrientation:69

  _model.addToInitialization(function() {
    if (!__pagesEnabled["circlemarking"]) return;
    for(var i=0;i<nm;i++){  // > Initialization.circlemarking:1
    // xm[i]=x2+zerox+i*dxm; //Initizlize Tab: xm=x2+zerox+i*dxm; drawing the top scale  // > Initialization.circlemarking:2
    // if(i%10==0){  // > Initialization.circlemarking:3
     xm[i] = 1.25*rE*Math.cos(i/24.0*2*pi);   // > Initialization.circlemarking:4
     ym[i] = 1.25*rE*Math.sin(i/24.0*2*pi);   // > Initialization.circlemarking:5
    dxm[i]= 0.25*rE*Math.cos(i/24.0*2*pi);  // > Initialization.circlemarking:6
    dym[i]= 0.25*rE*Math.sin(i/24.0*2*pi);  // > Initialization.circlemarking:7
    //  xmt[i/10]=xm[i];  // numbers position  // > Initialization.circlemarking:8
    //  tmt[i/10]=i+"";    // texts for upper scale  // > Initialization.circlemarking:9
     if(i%6==0){  // > Initialization.circlemarking:10
    dxm[i]= 0.5*rE*Math.cos(i/24.0*2*pi);  // > Initialization.circlemarking:11
    dym[i]= 0.5*rE*Math.sin(i/24.0*2*pi);  // > Initialization.circlemarking:12
    // else dym[i]=y2/4;  // > Initialization.circlemarking:13
    }  // > Initialization.circlemarking:14
    }  // > Initialization.circlemarking:15
    //text  // > Initialization.circlemarking:16
    for(var i=0;i<nmt;i++){  // > Initialization.circlemarking:17
     xmt[i] = 2.25*rE*Math.cos(i/4.0*2*pi);   // > Initialization.circlemarking:18
     ymt[i] = 2.25*rE*Math.sin(i/4.0*2*pi);   // > Initialization.circlemarking:19
    }  // > Initialization.circlemarking:20
    tmt[0] = "noon";  // > Initialization.circlemarking:21
    tmt[1] = "sunset";  // > Initialization.circlemarking:22
    tmt[2] = "midnight";  // > Initialization.circlemarking:23
    tmt[3] = "sunrise";  // > Initialization.circlemarking:24
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["moon"]) return;
    for (var i = 0; i < np; i++)  // > Initialization.moon:1
    {  // > Initialization.moon:2
      theta = i*Math.PI/(np-1) - Math.PI/2.0;  // > Initialization.moon:3
      el[i][0] = rE*Math.cos(theta);  // > Initialization.moon:4
      el[i][1] = rE*Math.sin(theta);  // > Initialization.moon:5
      ed[i][0] = rE*Math.cos(theta + Math.PI);  // > Initialization.moon:6
      ed[i][1] = rE*Math.sin(theta + Math.PI);  // > Initialization.moon:7
      }  // > Initialization.moon:8
        // > Initialization.moon:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["sunbeam"]) return;
    for (var i = 0; i < sunbeamn+1; i++)  // > Initialization.sunbeam:1
    {  // > Initialization.sunbeam:2
      sunbeamx[i] = xmax;  // > Initialization.sunbeam:3
      sunbeamy[i] = ymin+rangey/(sunbeamn-1)*i;  // > Initialization.sunbeam:4
      }  // > Initialization.sunbeam:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    //_view.plottingPanel.getAxisX().setPosition([0,0.05]);  // > Initialization.axes:1
    //_view.plottingPanel.getTitleX().setPosition([0.48,0.075]);  // > Initialization.axes:2
    _view.plottingPanel22.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:3
    _view.plottingPanel22.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:4
    _view.plottingPanel22.getAxisY().setPosition([0.045,0]);  // > Initialization.axes:5
    _view.plottingPanel22.getTitleY().setPosition([0.1,0.85]);  // > Initialization.axes:6
    //_view.plottingPanel22.getAxisX().setAbsoluteY(0.5);  // > Initialization.axes:7
    //_view.plottingPanel22.getAxisY().setAbsoluteX(5);  // > Initialization.axes:8
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (moonsunsealevelshow==undefined){  // > Initialization.undefined:1
      moonsunsealevelshow=true;  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["MoonPhaseEvol"]) return;
    ang += 2*Math.PI/(24*29.5);  // > Evolution.MoonPhaseEvol:1
    if (ang >= 2*Math.PI)  // > Evolution.MoonPhaseEvol:2
      {  // > Evolution.MoonPhaseEvol:3
        ang -= 2*Math.PI;  // > Evolution.MoonPhaseEvol:4
        }   // > Evolution.MoonPhaseEvol:5
    time += 1;  // > Evolution.MoonPhaseEvol:6
    //timecon +=1;  // > Evolution.MoonPhaseEvol:7
    if (time > 24)  // > Evolution.MoonPhaseEvol:8
      {  // > Evolution.MoonPhaseEvol:9
        time -= 24;  // > Evolution.MoonPhaseEvol:10
        day+=1; // added by lookang  // > Evolution.MoonPhaseEvol:11
        }  // > Evolution.MoonPhaseEvol:12
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["moon"]) return;
    //set x and y coordinates of Moon's position in orbit  // > FixedRelations.moon:1
    x = d*Math.cos(ang);  // > FixedRelations.moon:2
    y = d*Math.sin(ang);  // > FixedRelations.moon:3
    //set polygons for bright and dark sides of Moon  // > FixedRelations.moon:4
    for (var i = 0; i < np; i++)  // > FixedRelations.moon:5
    {  // > FixedRelations.moon:6
      theta = i*Math.PI/(np-1) - Math.PI/2.0;  // > FixedRelations.moon:7
      pl[i][0] = x + rM*Math.cos(theta);  // > FixedRelations.moon:8
      pl[i][1] = y + rM*Math.sin(theta);  // > FixedRelations.moon:9
      pd[i][0] = x + rM*Math.cos(theta + Math.PI);  // > FixedRelations.moon:10
      pd[i][1] = y + rM*Math.sin(theta + Math.PI);  // > FixedRelations.moon:11
      }  // > FixedRelations.moon:12
    //set polygon for shadow in Moon View  // > FixedRelations.moon:13
    if (y > 0)  // > FixedRelations.moon:14
    {  // > FixedRelations.moon:15
    for (var i = 0; i < np; i++)  // > FixedRelations.moon:16
    {  // > FixedRelations.moon:17
      theta = i*Math.PI/(np-1) - Math.PI/2.0;  // > FixedRelations.moon:18
      pv[i][0] = Math.cos(ang)*Math.cos(theta);  // > FixedRelations.moon:19
      pv[i][1] = Math.sin(theta);  // > FixedRelations.moon:20
      }  // > FixedRelations.moon:21
    for (var i = np; i < 2*np; i++)  // > FixedRelations.moon:22
    {  // > FixedRelations.moon:23
      theta = Math.PI/2.0 - (i-np)*Math.PI/(np-1);  // > FixedRelations.moon:24
      pv[i][0] = -Math.cos(theta);  // > FixedRelations.moon:25
      pv[i][1] = Math.sin(theta);  // > FixedRelations.moon:26
      }  // > FixedRelations.moon:27
      }  // > FixedRelations.moon:28
    else  // > FixedRelations.moon:29
    {  // > FixedRelations.moon:30
      for (var i = 0; i < np; i++)  // > FixedRelations.moon:31
    {  // > FixedRelations.moon:32
      theta = i*Math.PI/(np-1) + Math.PI/2.0;  // > FixedRelations.moon:33
      pv[i][0] = -Math.cos(theta);  // > FixedRelations.moon:34
      pv[i][1] = Math.sin(theta);  // > FixedRelations.moon:35
      }  // > FixedRelations.moon:36
    for (var i = np; i < 2*np; i++)  // > FixedRelations.moon:37
    {  // > FixedRelations.moon:38
      theta = 3.0*Math.PI/2.0 - (i-np)*Math.PI/(np-1);  // > FixedRelations.moon:39
      pv[i][0] = Math.cos(ang)*Math.cos(theta);  // > FixedRelations.moon:40
      pv[i][1] = Math.sin(theta);  // > FixedRelations.moon:41
      }  // > FixedRelations.moon:42
      }  // > FixedRelations.moon:43
    //set polygon for Light Cone   // > FixedRelations.moon:44
    //0 earth bottom by lookang  // > FixedRelations.moon:45
    // 1 moon bottom  // > FixedRelations.moon:46
    // 2 moon top  // > FixedRelations.moon:47
    // 3 eath top  // > FixedRelations.moon:48
    cone[0][0] = rE*Math.cos(ang-Math.PI/2.0);  // > FixedRelations.moon:49
    cone[0][1] = rE*Math.sin(ang-Math.PI/2.0);  // > FixedRelations.moon:50
    cone[1][0] = x + rM*Math.cos(ang-Math.PI/2.0);  // > FixedRelations.moon:51
    cone[1][1] = y + rM*Math.sin(ang-Math.PI/2.0);  // > FixedRelations.moon:52
    cone[2][0] = x - rM*Math.cos(ang-Math.PI/2.0);  // > FixedRelations.moon:53
    cone[2][1] = y - rM*Math.sin(ang-Math.PI/2.0);  // > FixedRelations.moon:54
    cone[3][0] = -rE*Math.cos(ang-Math.PI/2.0);  // > FixedRelations.moon:55
    cone[3][1] = -rE*Math.sin(ang-Math.PI/2.0);  // > FixedRelations.moon:56
    //compute earth-moon-sun angle in degrees  // > FixedRelations.moon:57
    angle = 180.0*ang/Math.PI;  // > FixedRelations.moon:58
    angdeg = 180.0*ang/Math.PI;  // > FixedRelations.moon:59
    //compute angular position of observer on Earth at time  // > FixedRelations.moon:60
    tang = (time-12.0)*Math.PI/12.0;  // > FixedRelations.moon:61
    //compute x and y coordinates of observer  // > FixedRelations.moon:62
    xobs = rE*Math.cos(tang);  // > FixedRelations.moon:63
    yobs = rE*Math.sin(tang);  // > FixedRelations.moon:64
    //computer coordinates for horizon line  // > FixedRelations.moon:65
    h1x = xobs/60 - 12*Math.cos(tang+Math.PI/2.0);  // > FixedRelations.moon:66
    h1y = yobs/60 - 12*Math.sin(tang+Math.PI/2.0);  // > FixedRelations.moon:67
    lhx = 24*Math.cos(tang+Math.PI/2.0);  // > FixedRelations.moon:68
    lhy = 24*Math.sin(tang+Math.PI/2.0);  // > FixedRelations.moon:69
    //change transparency of darknessPolygon to emulate Earthlight  // > FixedRelations.moon:70
    //transp = 230-parseInt(20*Math.cos(ang));  // > FixedRelations.moon:71
    transp = 1-0.2*Math.cos(ang);  // > FixedRelations.moon:72
    color = rgb(0,0,0,transp);  // > FixedRelations.moon:73
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["observable"]) return;
    // added by lookang  // > FixedRelations.observable:1
    // ang sun-earth-moon angle  // > FixedRelations.observable:2
    // angle sun-earth-moon in degree  // > FixedRelations.observable:3
    // tang angle for position of observer on earth  // > FixedRelations.observable:4
    if (ang >= 2*Math.PI)ang -= 2*Math.PI;// clever way to reset the ang to zero if greater than 2pi  // > FixedRelations.observable:5
    if ( tang<0) tang= tang+2*pi;  // > FixedRelations.observable:6
    //1 Q, 4Q, 4Q  // > FixedRelations.observable:7
     // if (observable===true&&(Math.abs(tang-ang)<=pi/2||Math.abs(tang-ang)<=pi/2||(2*pi-tang+ang)<=pi/2||(tang-ang+2*pi)<=pi/2))  // > FixedRelations.observable:8
    if (observable===true&&(Math.abs(tang-ang)<=pi/2||Math.abs(2*pi-tang+ang)<=pi/2||Math.abs(2*pi+tang-ang)<=pi/2))  // > FixedRelations.observable:9
    {  // > FixedRelations.observable:10
      special = true; // for debug  // > FixedRelations.observable:11
      inside = true; // for testing inside light cone  // > FixedRelations.observable:12
      colorobs = rgb(0,255,0); //green  // > FixedRelations.observable:13
      }  // > FixedRelations.observable:14
    else if (observable===true&&(Math.abs(tang-ang)>pi/2))  // > FixedRelations.observable:15
    {  // > FixedRelations.observable:16
      special = false; // for debug  // > FixedRelations.observable:17
      inside = false; // for testing inside light cone  // > FixedRelations.observable:18
      colorobs = rgb(255,0,0); //red  // > FixedRelations.observable:19
      }  // > FixedRelations.observable:20
    else if (observable===false) // to allow the colorobservable to stay the same after boolean unchecked  // > FixedRelations.observable:21
    {  // > FixedRelations.observable:22
        // > FixedRelations.observable:23
      }  // > FixedRelations.observable:24
    else   // > FixedRelations.observable:25
    {  // > FixedRelations.observable:26
         // > FixedRelations.observable:27
         colorobs = rgb(255,255,255); // white  // > FixedRelations.observable:28
      }  // > FixedRelations.observable:29
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["daylight"]) return;
    if (time>=0&&time<=5||time>18)  // > FixedRelations.daylight:1
    {  // > FixedRelations.daylight:2
     colorday = rgbt(0,0,0,transp);  // > FixedRelations.daylight:3
      }  // > FixedRelations.daylight:4
    if (time>=6&&time<=18)  // > FixedRelations.daylight:5
    {  // > FixedRelations.daylight:6
      // a simple model for daylight by lookang  // > FixedRelations.daylight:7
    blueness =  parseInt(255*Math.abs(Math.sin((time-6)*2*pi/24)));  // > FixedRelations.daylight:8
    //blueness =  255*Math.abs(Math.sin((time-6)*2*pi/24));  // > FixedRelations.daylight:9
    //blueness =  255;  // > FixedRelations.daylight:10
    // colorday = new Color(62,106,blueness,100);  // > FixedRelations.daylight:11
     colorday = rgb(0,0,blueness,0.3);  // > FixedRelations.daylight:12
      }  // > FixedRelations.daylight:13
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["textstring"]) return;
    //textstring by lookang  // > FixedRelations.textstring:1
    if (ang>=-pi/18&&ang<=pi/18)  // > FixedRelations.textstring:2
    {  // > FixedRelations.textstring:3
    textstring = "New Moon";  // > FixedRelations.textstring:4
    }  // > FixedRelations.textstring:5
    else if (ang>=pi/18&&ang<=pi/2-pi/18)  // > FixedRelations.textstring:6
    {  // > FixedRelations.textstring:7
    textstring = "Waxing Crescent Moon";  // > FixedRelations.textstring:8
    }  // > FixedRelations.textstring:9
    else if (ang>=pi/2-pi/18&&ang<=pi/2+pi/18)  // > FixedRelations.textstring:10
    {  // > FixedRelations.textstring:11
    textstring = "Quarter Moon";  // > FixedRelations.textstring:12
    }  // > FixedRelations.textstring:13
    else if (ang>=pi/2+pi/18&&ang<=pi-pi/18)  // > FixedRelations.textstring:14
    {  // > FixedRelations.textstring:15
    textstring = "Waxing Gibbous Moon";  // > FixedRelations.textstring:16
    }  // > FixedRelations.textstring:17
    else if (ang>=pi/2-pi/18&&ang<=pi+pi/18)  // > FixedRelations.textstring:18
    {  // > FixedRelations.textstring:19
    textstring = "Full Moon";  // > FixedRelations.textstring:20
    }  // > FixedRelations.textstring:21
    else if (ang>=pi+pi/18&&ang<=1.5*pi-pi/18)  // > FixedRelations.textstring:22
    {  // > FixedRelations.textstring:23
    textstring = "Waning Gibbous Moon";  // > FixedRelations.textstring:24
    }  // > FixedRelations.textstring:25
    else if (ang>=1.5*pi-pi/18&&ang<=1.5*pi+pi/18)  // > FixedRelations.textstring:26
    {  // > FixedRelations.textstring:27
    textstring = "3rd Quarter Moon";  // > FixedRelations.textstring:28
    }  // > FixedRelations.textstring:29
    else if (ang>=1.5*pi+pi/18&&ang<=2*pi-pi/18)  // > FixedRelations.textstring:30
    {  // > FixedRelations.textstring:31
    textstring = "Waning Crescent Moon";  // > FixedRelations.textstring:32
    }  // > FixedRelations.textstring:33
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["sealeveltext"]) return;
    //model sealevel by lookang  // > FixedRelations.sealeveltext:1
    y1= 0.25*Math.cos(2*pi/12*timecon); // sun  // > FixedRelations.sealeveltext:2
    y2 = 0.54*Math.cos(2*pi/(61./59.*12.)*timecon); // moon  // > FixedRelations.sealeveltext:3
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["timetext"]) return;
    timetext = " t = "+_view._format(day,"00") + " day ," +_view._format(time,"00") + " hr \n"+ " angle_Moon-Earth-Sun =" +_view._format(angle,"00") + " ° ";  // > FixedRelations.timetext:1
    timecon=time+counter*24; // method to have continous time  // > FixedRelations.timetext:2
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["layout"]) return;
    if (world&&graph) {  // > FixedRelations.layout:1
      disabled2 =true;  // > FixedRelations.layout:2
      disabled =false;  // > FixedRelations.layout:3
      disabledworld =false;  // > FixedRelations.layout:4
      Width1 = "50%";  // > FixedRelations.layout:5
      Width2 = "50%";  // > FixedRelations.layout:6
      Width3 = "0%";  // > FixedRelations.layout:7
      }  // > FixedRelations.layout:8
      else if (world&&graph2) {  // > FixedRelations.layout:9
      disabled =true;  // > FixedRelations.layout:10
      disabled2 =false;  // > FixedRelations.layout:11
      disabledworld =false;  // > FixedRelations.layout:12
       Width1 = "50%";  // > FixedRelations.layout:13
      Width2 = "0%";  // > FixedRelations.layout:14
      Width3 = "50%";  // > FixedRelations.layout:15
      }  // > FixedRelations.layout:16
      else if (graph&&graph2) {  // > FixedRelations.layout:17
      disabledworld =true;  // > FixedRelations.layout:18
      disabled =false;  // > FixedRelations.layout:19
      disabled2 =false;  // > FixedRelations.layout:20
       Width1 = "0%";  // > FixedRelations.layout:21
      Width2 = "50%";  // > FixedRelations.layout:22
      Width3 = "50%";  // > FixedRelations.layout:23
      }  // > FixedRelations.layout:24
      else if (world===true&&graph===false&&graph2===false) {  // > FixedRelations.layout:25
      disabledworld =true;  // > FixedRelations.layout:26
      disabled =false;  // > FixedRelations.layout:27
      disabled2 =false;  // > FixedRelations.layout:28
       Width1 = "100%";  // > FixedRelations.layout:29
      Width2 = "0%";  // > FixedRelations.layout:30
      Width3 = "0%";  // > FixedRelations.layout:31
      }  // > FixedRelations.layout:32
      else if (world===false&&graph===true&&graph2===false) {  // > FixedRelations.layout:33
      disabledworld =false;  // > FixedRelations.layout:34
      disabled =true;  // > FixedRelations.layout:35
      disabled2 =false;  // > FixedRelations.layout:36
       Width1 = "0%";  // > FixedRelations.layout:37
      Width2 = "100%";  // > FixedRelations.layout:38
      Width3 = "0%";  // > FixedRelations.layout:39
      }  // > FixedRelations.layout:40
      else if (world===false&&graph===false&&graph2===true) {  // > FixedRelations.layout:41
      disabledworld =false;  // > FixedRelations.layout:42
      disabled =false;  // > FixedRelations.layout:43
      disabled2 =true;  // > FixedRelations.layout:44
       Width1 = "0%";  // > FixedRelations.layout:45
      Width2 = "0%";  // > FixedRelations.layout:46
      Width3 = "100%";  // > FixedRelations.layout:47
      }  // > FixedRelations.layout:48
        // > FixedRelations.layout:49
        // > FixedRelations.layout:50
      else {  // > FixedRelations.layout:51
        disabledworld =false;  // > FixedRelations.layout:52
      disabled =false;  // > FixedRelations.layout:53
      disabled2 =false;  // > FixedRelations.layout:54
        }  // > FixedRelations.layout:55
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["ang","time"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dtime);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Event 2"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=ang) __mustReinitialize = true;
        __state[__cIn++] = ang;
        if (__state[__cIn]!=time) __mustReinitialize = true;
        __state[__cIn++] = time;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dtime===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dtime);
      __eventSolver.setInternalStepSize(dtime);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ang = __state[__cOut++];
        time = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ang = _aState[__cOut++];
        var time = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 2*Math.PI/(24*29.5); // Rate for ODE: Evol Page:ang
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ang = _aState[__cOut++];
        var time = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ang = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = ang;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ang = _aState[__cOut++];
        var time = _aState[__cOut++];
        return ang-2*pi;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ang = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = ang;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        ang = 0;  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ang = _aState[__cOut++];
        var time = _aState[__cOut++];
        return time-24;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ang = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = ang;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        time=0;  // > Event action for page Evol Page:1
        counter=counter+1;  // > Event action for page Evol Page:2
        day=day+1;  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_ang(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new gravity01_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.comboBox.linkProperty("Options",  function() { return ["user_defined","Orbit","Orbit off","LightCone","LightCone off","Overhead","Overhead off","Observable","Observable off","Time","Time off","","world","both","y vs t","y vs t due to moon","y vs t due to moon off","y vs t due to sun","y vs t due to sun off","y vs t due to moon and sun","y vs t due to moon and sun off","Moon Phase","Both 2"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  //var option = _view.comboBox.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
      
  if ( option=="user_defined"){
    
    }
    else if ( option=="Orbit"){
   ShowMO=true;
   
    }
    else if ( option=="Orbit off"){
   ShowMO=false;
   
    }
    else if ( option=="LightCone"){
   ShowLC=true;
   
    }
    else if ( option=="LightCone off"){
   ShowLC=false;
   
    }
    else if ( option=="Overhead"){
   overhead=true;
   
    }
    else if ( option=="Overhead off"){
   overhead=false;
   
    }
     else if ( option=="Observable"){
   observable=true;
   
    }
    else if ( option=="Observable off"){
   observable=false;
   
    }
   else if ( option=="Time"){
   timebolean=true;
   
    }
    else if ( option=="Time off"){
   timebolean=false;
   
    }
  if ( option=="world"){
    world=true;
  Width1 = "100%";
  Width2 = "0%";
  Width3 = "0%";
  //disabled=false;
    }
  else if ( option=="y vs t"){
  graph=false; // off moon phase dave lommen
  graph2=true;
  Width1 = "0%";
  Width2 = "0%";
  Width3 = "100%";
  //disabledworld=false;
  }
  else if ( option=="both"){
  world=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  //disabledworld=false;
  }
  else if ( option=="y vs t due to moon"){
  moonsealevelshow=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  }
  else if ( option=="y vs t due to moon off"){
  moonsealevelshow=false;
  }
  else if ( option=="y vs t due to sun"){
  sunsealevelshow=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  }
  else if ( option=="y vs t due to sun off"){
  sunsealevelshow=false;
  }
  else if ( option=="y vs t due to moon and sun"){
  moonsunsealevelshow=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  }
  else if ( option=="y vs t due to moon and sun off"){
  moonsunsealevelshow=false;
  }
  else if ( option=="Moon Phase"){
  graph =true;
  Width1 = "0%";
  Width2 = "100%";
  Width3 = "0%";
  }
  else if ( option=="Both 2"){
  world=true;
  graph =true;
  Width1 = "50%";
  Width2 = "50%";
  Width3 = "0%";
  }
  //if (!_isMobile){
    if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    //var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }
  //}

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.worldgraph.linkProperty("Options",  function() { return ["world","both","y vs t","y vs t due to moon","y vs t due to moon off","y vs t due to sun","y vs t due to sun off","y vs t due to moon and sun","y vs t due to moon and sun off","Moon Phase","Both 2"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  //var option = _view.worldgraph.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.worldgraph.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
   
  if ( option=="world"){
    world=true;
  Width1 = "100%";
  Width2 = "0%";
  Width3 = "0%";
  //disabled=false;
    }
  else if ( option=="y vs t"){
  graph=false; // off moon phase dave lommen
  graph2=true;
  Width1 = "0%";
  Width2 = "0%";
  Width3 = "100%";
  //disabledworld=false;
  }
  else if ( option=="both"){
  world=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  //disabledworld=false;
  }
  else if ( option=="y vs t due to moon"){
  moonsealevelshow=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  }
  else if ( option=="y vs t due to moon off"){
  moonsealevelshow=false;
  }
  else if ( option=="y vs t due to sun"){
  sunsealevelshow=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  }
  else if ( option=="y vs t due to sun off"){
  sunsealevelshow=false;
  }
  else if ( option=="y vs t due to moon and sun"){
  moonsunsealevelshow=true;
  graph2=true;
  Width1 = "50%";
  Width2 = "0%";
  Width3 = "50%";
  }
  else if ( option=="y vs t due to moon and sun off"){
  moonsunsealevelshow=false;
  }
  else if ( option=="Moon Phase"){
  graph =true;
  Width1 = "0%";
  Width2 = "100%";
  Width3 = "0%";
  }
  else if ( option=="Both 2"){
  world=true;
  graph =true;
  Width1 = "50%";
  Width2 = "50%";
  Width3 = "0%";
  }
    if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.worldgraph.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'worldgraph'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  textplay="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();
  textplay="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.stepButton.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.stepButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton'
          _view.resetButton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return textplay; }, function(_v) { textplay = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return timetext; }, function(_v) { timetext = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.orbitCircle.linkProperty("SizeX",  function() { return 2*d; } ); // HtmlView Page linking property 'SizeX' for element 'orbitCircle'
          _view.orbitCircle.linkProperty("Visibility",  function() { return ShowMO; }, function(_v) { ShowMO = _v; } ); // HtmlView Page linking property 'Visibility' for element 'orbitCircle'
          _view.orbitCircle.linkProperty("SizeY",  function() { return 2*d; } ); // HtmlView Page linking property 'SizeY' for element 'orbitCircle'
          _view.sealevel.linkProperty("SizeX",  function() { return rE*2+0.25*2+Math.abs(0.54*2*Math.cos(ang)); } ); // HtmlView Page linking property 'SizeX' for element 'sealevel'
          _view.sealevel.linkProperty("SizeY",  function() { return rE*2-0.25*2+0.54*2*Math.abs(Math.sin(ang)); } ); // HtmlView Page linking property 'SizeY' for element 'sealevel'
          _view.moon.linkProperty("Transformation",  function() { return ang; }, function(_v) { ang = _v; } ); // HtmlView Page linking property 'Transformation' for element 'moon'
          _view.moon.linkProperty("SizeX",  function() { return rM*2; } ); // HtmlView Page linking property 'SizeX' for element 'moon'
          _view.moon.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'moon'
          _view.moon.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'moon'
          _view.moon.linkProperty("SizeY",  function() { return rM*2; } ); // HtmlView Page linking property 'SizeY' for element 'moon'
          _view.moon.setAction("OnDrag", function(_data,_info) {
  ang = Math.atan2(y,x);

}); // HtmlView Page setting action 'OnDrag' for element 'moon'
          _view.brightmoon.linkProperty("Points",  function() { return pl; }, function(_v) { pl = _v; } ); // HtmlView Page linking property 'Points' for element 'brightmoon'
          _view.darkmoon.linkProperty("Points",  function() { return pd; }, function(_v) { pd = _v; } ); // HtmlView Page linking property 'Points' for element 'darkmoon'
          _view.earthmoonline.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'earthmoonline'
          _view.earthmoonline.linkProperty("Visibility",  function() { return overhead; }, function(_v) { overhead = _v; } ); // HtmlView Page linking property 'Visibility' for element 'earthmoonline'
          _view.earthmoonline.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'earthmoonline'
          _view.earth.linkProperty("Transformation",  function() { return tang; }, function(_v) { tang = _v; } ); // HtmlView Page linking property 'Transformation' for element 'earth'
          _view.earth.linkProperty("SizeX",  function() { return rE*2; } ); // HtmlView Page linking property 'SizeX' for element 'earth'
          _view.earth.linkProperty("SizeY",  function() { return rE*2; } ); // HtmlView Page linking property 'SizeY' for element 'earth'
          _view.brightearth.linkProperty("Points",  function() { return el; }, function(_v) { el = _v; } ); // HtmlView Page linking property 'Points' for element 'brightearth'
          _view.darktearth2.linkProperty("Points",  function() { return ed; }, function(_v) { ed = _v; } ); // HtmlView Page linking property 'Points' for element 'darktearth2'
          _view.sunbeam.linkProperty("NumberOfElements",  function() { return sunbeamn; }, function(_v) { sunbeamn = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'sunbeam'
          _view.sunbeam.linkProperty("SizeX",  function() { return -rangex/5; } ); // HtmlView Page linking property 'SizeX' for element 'sunbeam'
          _view.sunbeam.linkProperty("X",  function() { return sunbeamx; }, function(_v) { sunbeamx = _v; } ); // HtmlView Page linking property 'X' for element 'sunbeam'
          _view.sunbeam.linkProperty("Y",  function() { return sunbeamy; }, function(_v) { sunbeamy = _v; } ); // HtmlView Page linking property 'Y' for element 'sunbeam'
          _view.sunbeam.linkProperty("Visibility",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Visibility' for element 'sunbeam'
          _view.sunlight.linkProperty("X",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'X' for element 'sunlight'
          _view.sunlight.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'sunlight'
          _view.observer.linkProperty("Transformation",  function() { return tang; }, function(_v) { tang = _v; } ); // HtmlView Page linking property 'Transformation' for element 'observer'
          _view.observer.linkProperty("SizeX",  function() { return dspot; }, function(_v) { dspot = _v; } ); // HtmlView Page linking property 'SizeX' for element 'observer'
          _view.observer.linkProperty("X",  function() { return xobs; }, function(_v) { xobs = _v; } ); // HtmlView Page linking property 'X' for element 'observer'
          _view.observer.linkProperty("Y",  function() { return yobs; }, function(_v) { yobs = _v; } ); // HtmlView Page linking property 'Y' for element 'observer'
          _view.observer.linkProperty("SizeY",  function() { return dspot; }, function(_v) { dspot = _v; } ); // HtmlView Page linking property 'SizeY' for element 'observer'
          _view.spot.linkProperty("FillColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'FillColor' for element 'spot'
          _view.spot.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'spot'
          _view.body.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'body'
          _view.arms.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'arms'
          _view.legs2.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'legs2'
          _view.legs.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'legs'
          _view.drag.linkProperty("X",  function() { return xobs; }, function(_v) { xobs = _v; } ); // HtmlView Page linking property 'X' for element 'drag'
          _view.drag.linkProperty("Y",  function() { return yobs; }, function(_v) { yobs = _v; } ); // HtmlView Page linking property 'Y' for element 'drag'
          _view.drag.setAction("OnDrag", function(_data,_info) {
  tang = Math.tan2(yobs,xobs);

}); // HtmlView Page setting action 'OnDrag' for element 'drag'
          _view.lightcone.linkProperty("Points",  function() { return cone; }, function(_v) { cone = _v; } ); // HtmlView Page linking property 'Points' for element 'lightcone'
          _view.lightcone.linkProperty("Visibility",  function() { return ShowLC; }, function(_v) { ShowLC = _v; } ); // HtmlView Page linking property 'Visibility' for element 'lightcone'
          _view.circlemarking.linkProperty("Visibility",  function() { return timebolean; }, function(_v) { timebolean = _v; } ); // HtmlView Page linking property 'Visibility' for element 'circlemarking'
          _view.textSet.linkProperty("NumberOfElements",  function() { return nm; }, function(_v) { nm = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return xmt; }, function(_v) { xmt = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return ymt; }, function(_v) { ymt = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return tmt; }, function(_v) { tmt = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.textSet.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet'
          _view.arrowSet.linkProperty("NumberOfElements",  function() { return nm; }, function(_v) { nm = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeX",  function() { return dxm; }, function(_v) { dxm = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSet'
          _view.arrowSet.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet'
          _view.arrowSet.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeY",  function() { return dym; }, function(_v) { dym = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowSet'
          _view.plottingPanel2.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("Background",  function() { return colorday; }, function(_v) { colorday = _v; } ); // HtmlView Page linking property 'Background' for element 'plottingPanel2'
          _view.plottingPanel2.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("TRMessage",  function() { return textstring; }, function(_v) { textstring = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("Visibility",  function() { return graph; }, function(_v) { graph = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("BLMessage",  function() { return timetext; }, function(_v) { timetext = _v; } ); // HtmlView Page linking property 'BLMessage' for element 'plottingPanel2'
          _view.dark.linkProperty("Points",  function() { return pv; }, function(_v) { pv = _v; } ); // HtmlView Page linking property 'Points' for element 'dark'
          _view.dark.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'dark'
          _view.dark.linkProperty("LineColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'LineColor' for element 'dark'
          _view.plottingPanel22.linkProperty("Width",  function() { return Width3; }, function(_v) { Width3 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel22'
          _view.plottingPanel22.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel22'
          _view.plottingPanel22.linkProperty("TRMessage",  function() { return " y1sun_orange = " + _view._format(y1,"0.0")+", \ny2moon_grey = " + _view._format(y2,"0.0")+", \nysun+moon_blue = " + _view._format(y1+y2,"0.0"); } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel22'
          _view.plottingPanel22.linkProperty("Visibility",  function() { return graph2; }, function(_v) { graph2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel22'
          _view.plottingPanel22.linkProperty("BRMessage",  function() { return " t = " +_view._format (timecon,"0")+ " hr "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel22'
          _view.spot2.linkProperty("FillColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'FillColor' for element 'spot2'
          _view.spot2.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'spot2'
          _view.body2.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'body2'
          _view.arms2.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'arms2'
          _view.legs222.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'legs222'
          _view.legs22.linkProperty("LineColor",  function() { return colorobs; }, function(_v) { colorobs = _v; } ); // HtmlView Page linking property 'LineColor' for element 'legs22'
          _view.arrow.linkProperty("SizeX",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrow'
          _view.trail.linkProperty("Connected",  function() { return timecon>0; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("Visibility",  function() { return sunsealevelshow; }, function(_v) { sunsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.shape.linkProperty("X",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.shape.linkProperty("Visibility",  function() { return sunsealevelshow; }, function(_v) { sunsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shape'
          _view.text.linkProperty("X",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'text'
          _view.text.linkProperty("Visibility",  function() { return sunsealevelshow; }, function(_v) { sunsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text'
          _view.text.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'text'
          _view.trail2.linkProperty("Connected",  function() { return timecon>0; } ); // HtmlView Page linking property 'Connected' for element 'trail2'
          _view.trail2.linkProperty("InputX",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail2'
          _view.trail2.linkProperty("Visibility",  function() { return moonsealevelshow; }, function(_v) { moonsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail2'
          _view.trail2.linkProperty("InputY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail2'
          _view.shape2.linkProperty("X",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'X' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'shape2'
          _view.shape2.linkProperty("Visibility",  function() { return moonsealevelshow; }, function(_v) { moonsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shape2'
          _view.text2.linkProperty("X",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'X' for element 'text2'
          _view.text2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'text2'
          _view.text2.linkProperty("Visibility",  function() { return moonsealevelshow; }, function(_v) { moonsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text2'
          _view.text2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'text2'
          _view.trail3.linkProperty("Connected",  function() { return timecon>0; } ); // HtmlView Page linking property 'Connected' for element 'trail3'
          _view.trail3.linkProperty("InputX",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail3'
          _view.trail3.linkProperty("Visibility",  function() { return moonsunsealevelshow; }, function(_v) { moonsunsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail3'
          _view.trail3.linkProperty("InputY",  function() { return y1+y2; } ); // HtmlView Page linking property 'InputY' for element 'trail3'
          _view.shape22.linkProperty("X",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'X' for element 'shape22'
          _view.shape22.linkProperty("Y",  function() { return y2+y1; } ); // HtmlView Page linking property 'Y' for element 'shape22'
          _view.shape22.linkProperty("Visibility",  function() { return moonsunsealevelshow; }, function(_v) { moonsunsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shape22'
          _view.text22.linkProperty("X",  function() { return timecon; }, function(_v) { timecon = _v; } ); // HtmlView Page linking property 'X' for element 'text22'
          _view.text22.linkProperty("Y",  function() { return y2+y1; } ); // HtmlView Page linking property 'Y' for element 'text22'
          _view.text22.linkProperty("Visibility",  function() { return moonsunsealevelshow; }, function(_v) { moonsunsealevelshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text22'
          _view.text22.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'text22'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function gravity01_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = gravity01_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('7_intro_sea_tides','./gravity01.xhtml');

  return _view;
} // end of main function

function gravity01_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","||") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("Text","|►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'topPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'topPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("Background","Black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("TRMessage","Orbital Top View of Moon Earth Model, \nNot to Scale") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"orbitCircle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'orbitCircle'
      .setProperty("FillColor","rgba(255,255,255,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'orbitCircle'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'orbitCircle'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'orbitCircle'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'orbitCircle'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'orbitCircle'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'orbitCircle'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"sealevel", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sealevel'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'sealevel'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'sealevel'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'sealevel'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sealevel'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'sealevel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"moon", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'moon'
      .setProperty("ImageUrl","./MoonPhases/moon.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'moon'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'moon'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"brightmoon", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'brightmoon'
      .setProperty("FillColor","rgba(192,192,192,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'brightmoon'
      .setProperty("LineColor","rgba(192,192,192,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'brightmoon'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'brightmoon'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"darkmoon", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'darkmoon'
      .setProperty("FillColor","rgba(64,64,64,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'darkmoon'
      .setProperty("LineColor","rgba(64,64,64,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'darkmoon'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"earthmoonline", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'earthmoonline'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'earthmoonline'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'earthmoonline'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'earthmoonline'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'earthmoonline'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'earthmoonline'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'earthmoonline'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"earth", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'earth'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'earth'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'earth'
      .setProperty("ImageUrl","./MoonPhases/earthtopview.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'earth'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"brightearth", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'brightearth'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'brightearth'
      .setProperty("LineColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'brightearth'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'brightearth'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"darktearth2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'darktearth2'
      .setProperty("FillColor","rgba(0,0,0,100)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'darktearth2'
      .setProperty("LineColor","rgba(0,0,0,100)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'darktearth2'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'darktearth2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"sunbeam", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sunbeam'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sunbeam'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'sunbeam'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'sunbeam'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"sunlight", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sunlight'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'sunlight'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'sunlight'
      .setProperty("RelativePosition","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'sunlight'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sunlight'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'sunlight'
      .setProperty("Text","sunlight") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'sunlight'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'sunlight'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'sunlight'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"observer", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'observer'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"spot", _view.observer) // EJsS HtmlView.HtmlView Page: declaration of element 'spot'
      .setProperty("SizeX",0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'spot'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'spot'
      .setProperty("X",1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'spot'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'spot'
      .setProperty("SizeY",0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'spot'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"body", _view.observer) // EJsS HtmlView.HtmlView Page: declaration of element 'body'
      .setProperty("SizeX",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'body'
      .setProperty("X",1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'body'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'body'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'body'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'body'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"arms", _view.observer) // EJsS HtmlView.HtmlView Page: declaration of element 'arms'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arms'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arms'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arms'
      .setProperty("SizeY",0.75) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arms'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arms'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arms'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"legs2", _view.observer) // EJsS HtmlView.HtmlView Page: declaration of element 'legs2'
      .setProperty("SizeX",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'legs2'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'legs2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'legs2'
      .setProperty("SizeY",-0.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'legs2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'legs2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"legs", _view.observer) // EJsS HtmlView.HtmlView Page: declaration of element 'legs'
      .setProperty("SizeX",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'legs'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'legs'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'legs'
      .setProperty("SizeY",0.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'legs'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'legs'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"drag", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drag'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'drag'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'drag'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'drag'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'drag'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'drag'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'drag'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"lightcone", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lightcone'
      .setProperty("FillColor","rgba(255,255,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'lightcone'
      .setProperty("LineColor","rgba(255,255,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'lightcone'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"circlemarking", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'circlemarking'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'circlemarking'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'circlemarking'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.circlemarking) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSet'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'textSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet", _view.circlemarking) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSet'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel2'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel2'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel2'
      .setProperty("MaximumY",1.2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel2'
      .setProperty("MaximumX",1.2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel2'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel2'
      .setProperty("MinimumX",-1.2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel2'
      .setProperty("MinimumY",-1.2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel2'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel2'
      .setProperty("TLMessage","Earth View of the Moon") // EJsS HtmlView.HtmlView Page: setting property 'TLMessage' for element 'plottingPanel2'
      .setProperty("BRMessage","Sky turn blue daytime,\n dark in nighttime") // EJsS HtmlView.HtmlView Page: setting property 'BRMessage' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"moon2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'moon2'
      .setProperty("SizeX",1.98) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'moon2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'moon2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'moon2'
      .setProperty("ImageUrl","./MoonPhases/moon.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'moon2'
      .setProperty("SizeY",1.98) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'moon2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"dark", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'dark'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel22", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel22'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel22'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel22'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel22'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel22'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel22'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel22'
      .setProperty("XTickStep",24) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel22'
      .setProperty("YTickStep",0.1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel22'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel22'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel22'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanel22'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel22'
      .setProperty("TLMessage","sea level height in m") // EJsS HtmlView.HtmlView Page: setting property 'TLMessage' for element 'plottingPanel22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"spot2", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'spot2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'spot2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'spot2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'spot2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'spot2'
      .setProperty("Y",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'spot2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'spot2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'spot2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"body2", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'body2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'body2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'body2'
      .setProperty("Y",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'body2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'body2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'body2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'body2'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'body2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"arms2", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'arms2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arms2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arms2'
      .setProperty("Y",0.05) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arms2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arms2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arms2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arms2'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arms2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"legs222", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'legs222'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'legs222'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'legs222'
      .setProperty("Y",0.05) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'legs222'
      .setProperty("SizeY",-15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'legs222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'legs222'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'legs222'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'legs222'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"legs22", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'legs22'
      .setProperty("SizeX",-10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'legs22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'legs22'
      .setProperty("Y",0.05) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'legs22'
      .setProperty("SizeY",-15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'legs22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'legs22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'legs22'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'legs22'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrow'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrow'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'text'
      .setProperty("Text","Sun") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'text'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail2", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'trail2'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text2", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'text2'
      .setProperty("Text","Moon") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'text2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'text2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail3", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'trail3'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail3'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape22", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'shape22'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape22'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape22'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape22'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text22", _view.plottingPanel22) // EJsS HtmlView.HtmlView Page: declaration of element 'text22'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'text22'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text22'
      .setProperty("Text","Sun+Moon") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text22'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'text22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'text22'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Moon Phases Model with SeaTides<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01/gravity01/2015-06-05_0903s.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01/01authortoddtimberlake_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01/01authorlooakng50x50.png" />
 Todd Timberlake; lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Creative Commons Attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new gravity01("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
