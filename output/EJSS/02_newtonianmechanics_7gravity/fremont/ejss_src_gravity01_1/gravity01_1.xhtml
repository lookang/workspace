<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Gravitational Force Model (Basic)</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function gravity01_1(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var size; // EjsS Model.Variables.Var Table.size
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var text; // EjsS Model.Variables.Var Table.text
  var selected; // EjsS Model.Variables.Var Table.selected

  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var datashow; // EjsS Model.Variables.layout.datashow
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var isAndroid; // EjsS Model.Variables.layout.isAndroid

  var showmodel; // EjsS Model.Variables.functionY.showmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var solutionY; // EjsS Model.Variables.functionY.solutionY

  var vxtest; // EjsS Model.Variables.variables.vxtest
  var k; // EjsS Model.Variables.variables.k
  var G; // EjsS Model.Variables.variables.G
  var x1; // EjsS Model.Variables.variables.x1
  var x2; // EjsS Model.Variables.variables.x2
  var xtest; // EjsS Model.Variables.variables.xtest
  var q1; // EjsS Model.Variables.variables.q1
  var m1; // EjsS Model.Variables.variables.m1
  var q2; // EjsS Model.Variables.variables.q2
  var m2; // EjsS Model.Variables.variables.m2
  var qtest; // EjsS Model.Variables.variables.qtest
  var mtest; // EjsS Model.Variables.variables.mtest
  var E1; // EjsS Model.Variables.variables.E1
  var g1; // EjsS Model.Variables.variables.g1
  var V1; // EjsS Model.Variables.variables.V1
  var phi1; // EjsS Model.Variables.variables.phi1
  var E2; // EjsS Model.Variables.variables.E2
  var g2; // EjsS Model.Variables.variables.g2
  var V2; // EjsS Model.Variables.variables.V2
  var phi2; // EjsS Model.Variables.variables.phi2
  var Enet; // EjsS Model.Variables.variables.Enet
  var gnet; // EjsS Model.Variables.variables.gnet
  var Vnet; // EjsS Model.Variables.variables.Vnet
  var phinet; // EjsS Model.Variables.variables.phinet
  var range; // EjsS Model.Variables.variables.range
  var dx; // EjsS Model.Variables.variables.dx
  var show1; // EjsS Model.Variables.variables.show1
  var show2; // EjsS Model.Variables.variables.show2
  var testc; // EjsS Model.Variables.variables.testc
  var g1show; // EjsS Model.Variables.variables.g1show
  var g2show; // EjsS Model.Variables.variables.g2show
  var gnetshow; // EjsS Model.Variables.variables.gnetshow
  var V1show; // EjsS Model.Variables.variables.V1show
  var V2show; // EjsS Model.Variables.variables.V2show
  var Vnetshow; // EjsS Model.Variables.variables.Vnetshow
  var showgraph; // EjsS Model.Variables.variables.showgraph
  var showgraphone; // EjsS Model.Variables.variables.showgraphone
  var showgraphtwo; // EjsS Model.Variables.variables.showgraphtwo
  var showVgraph; // EjsS Model.Variables.variables.showVgraph
  var showVgraphone; // EjsS Model.Variables.variables.showVgraphone
  var showVgraphtwo; // EjsS Model.Variables.variables.showVgraphtwo
  var showgradient; // EjsS Model.Variables.variables.showgradient
  var showF; // EjsS Model.Variables.variables.showF
  var showU; // EjsS Model.Variables.variables.showU
  var helpLabel; // EjsS Model.Variables.variables.helpLabel
  var helpFlag; // EjsS Model.Variables.variables.helpFlag
  var zeroval; // EjsS Model.Variables.variables.zeroval
  var scale1; // EjsS Model.Variables.variables.scale1
  var scale2; // EjsS Model.Variables.variables.scale2
  var plot2max; // EjsS Model.Variables.variables.plot2max
  var plot1max; // EjsS Model.Variables.variables.plot1max
  var showmidgraph; // EjsS Model.Variables.variables.showmidgraph
  var showmidVgraph; // EjsS Model.Variables.variables.showmidVgraph
  var rM1m; // EjsS Model.Variables.variables.rM1m
  var rM2m; // EjsS Model.Variables.variables.rM2m
  var rM1M2; // EjsS Model.Variables.variables.rM1M2
  var scalex; // EjsS Model.Variables.variables.scalex
  var scaley; // EjsS Model.Variables.variables.scaley
  var scalef; // EjsS Model.Variables.variables.scalef
  var gmax; // EjsS Model.Variables.variables.gmax
  var gmin; // EjsS Model.Variables.variables.gmin
  var gy; // EjsS Model.Variables.variables.gy
  var Vy; // EjsS Model.Variables.variables.Vy
  var F1; // EjsS Model.Variables.variables.F1
  var F2; // EjsS Model.Variables.variables.F2
  var colorball1; // EjsS Model.Variables.variables.colorball1
  var colorball2; // EjsS Model.Variables.variables.colorball2

  var n; // EjsS Model.Variables.FieldVars.n
  var nmax; // EjsS Model.Variables.FieldVars.nmax
  var q0; // EjsS Model.Variables.FieldVars.q0
  var q00; // EjsS Model.Variables.FieldVars.q00
  var q0true; // EjsS Model.Variables.FieldVars.q0true
  var q00true; // EjsS Model.Variables.FieldVars.q00true
  var q; // EjsS Model.Variables.FieldVars.q
  var x; // EjsS Model.Variables.FieldVars.x
  var ElementI; // EjsS Model.Variables.FieldVars.ElementI
  var vx; // EjsS Model.Variables.FieldVars.vx
  var y; // EjsS Model.Variables.FieldVars.y
  var ytext; // EjsS Model.Variables.FieldVars.ytext
  var ymtext; // EjsS Model.Variables.FieldVars.ymtext
  var aytext; // EjsS Model.Variables.FieldVars.aytext
  var vy; // EjsS Model.Variables.FieldVars.vy
  var xForce; // EjsS Model.Variables.FieldVars.xForce
  var xForcescale; // EjsS Model.Variables.FieldVars.xForcescale
  var yForce; // EjsS Model.Variables.FieldVars.yForce
  var elecForce; // EjsS Model.Variables.FieldVars.elecForce
  var forceValue; // EjsS Model.Variables.FieldVars.forceValue
  var massValue; // EjsS Model.Variables.FieldVars.massValue
  var acceleration; // EjsS Model.Variables.FieldVars.acceleration
  var aValue; // EjsS Model.Variables.FieldVars.aValue

  var color; // EjsS Model.Variables.DisplayVars.color
  var r; // EjsS Model.Variables.DisplayVars.r
  var radiusx; // EjsS Model.Variables.DisplayVars.radiusx
  var radiusy; // EjsS Model.Variables.DisplayVars.radiusy
  var colorStr; // EjsS Model.Variables.DisplayVars.colorStr
  var colorValue; // EjsS Model.Variables.DisplayVars.colorValue
  var qLabel; // EjsS Model.Variables.DisplayVars.qLabel
  var StrData; // EjsS Model.Variables.DisplayVars.StrData

  var disabledbutton; // EjsS Model.Variables.dragme.disabledbutton
  var dragmex; // EjsS Model.Variables.dragme.dragmex
  var dragmexs; // EjsS Model.Variables.dragme.dragmexs
  var dragmey; // EjsS Model.Variables.dragme.dragmey
  var dragemetrue; // EjsS Model.Variables.dragme.dragemetrue

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      print : print,
      fontb : fontb,
      font : font,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      size : size,
      t : t,
      dt : dt,
      sizex : sizex,
      sizey : sizey,
      text : text,
      selected : selected,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      disabledworld : disabledworld,
      disabled : disabled,
      datashow : datashow,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      isAndroid : isAndroid,
      showmodel : showmodel,
      functionY : functionY,
      solutionY : solutionY,
      vxtest : vxtest,
      k : k,
      G : G,
      x1 : x1,
      x2 : x2,
      xtest : xtest,
      q1 : q1,
      m1 : m1,
      q2 : q2,
      m2 : m2,
      qtest : qtest,
      mtest : mtest,
      E1 : E1,
      g1 : g1,
      V1 : V1,
      phi1 : phi1,
      E2 : E2,
      g2 : g2,
      V2 : V2,
      phi2 : phi2,
      Enet : Enet,
      gnet : gnet,
      Vnet : Vnet,
      phinet : phinet,
      range : range,
      dx : dx,
      show1 : show1,
      show2 : show2,
      testc : testc,
      g1show : g1show,
      g2show : g2show,
      gnetshow : gnetshow,
      V1show : V1show,
      V2show : V2show,
      Vnetshow : Vnetshow,
      showgraph : showgraph,
      showgraphone : showgraphone,
      showgraphtwo : showgraphtwo,
      showVgraph : showVgraph,
      showVgraphone : showVgraphone,
      showVgraphtwo : showVgraphtwo,
      showgradient : showgradient,
      showF : showF,
      showU : showU,
      helpLabel : helpLabel,
      helpFlag : helpFlag,
      zeroval : zeroval,
      scale1 : scale1,
      scale2 : scale2,
      plot2max : plot2max,
      plot1max : plot1max,
      showmidgraph : showmidgraph,
      showmidVgraph : showmidVgraph,
      rM1m : rM1m,
      rM2m : rM2m,
      rM1M2 : rM1M2,
      scalex : scalex,
      scaley : scaley,
      scalef : scalef,
      gmax : gmax,
      gmin : gmin,
      gy : gy,
      Vy : Vy,
      F1 : F1,
      F2 : F2,
      colorball1 : colorball1,
      colorball2 : colorball2,
      n : n,
      nmax : nmax,
      q0 : q0,
      q00 : q00,
      q0true : q0true,
      q00true : q00true,
      q : q,
      x : x,
      ElementI : ElementI,
      vx : vx,
      y : y,
      ytext : ytext,
      ymtext : ymtext,
      aytext : aytext,
      vy : vy,
      xForce : xForce,
      xForcescale : xForcescale,
      yForce : yForce,
      elecForce : elecForce,
      forceValue : forceValue,
      massValue : massValue,
      acceleration : acceleration,
      aValue : aValue,
      color : color,
      r : r,
      radiusx : radiusx,
      radiusy : radiusy,
      colorStr : colorStr,
      colorValue : colorValue,
      qLabel : qLabel,
      StrData : StrData,
      disabledbutton : disabledbutton,
      dragmex : dragmex,
      dragmexs : dragmexs,
      dragmey : dragmey,
      dragemetrue : dragemetrue
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.datashow != "undefined") datashow = json.datashow;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.solutionY != "undefined") solutionY = json.solutionY;
    if(typeof json.vxtest != "undefined") vxtest = json.vxtest;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.G != "undefined") G = json.G;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.xtest != "undefined") xtest = json.xtest;
    if(typeof json.q1 != "undefined") q1 = json.q1;
    if(typeof json.m1 != "undefined") m1 = json.m1;
    if(typeof json.q2 != "undefined") q2 = json.q2;
    if(typeof json.m2 != "undefined") m2 = json.m2;
    if(typeof json.qtest != "undefined") qtest = json.qtest;
    if(typeof json.mtest != "undefined") mtest = json.mtest;
    if(typeof json.E1 != "undefined") E1 = json.E1;
    if(typeof json.g1 != "undefined") g1 = json.g1;
    if(typeof json.V1 != "undefined") V1 = json.V1;
    if(typeof json.phi1 != "undefined") phi1 = json.phi1;
    if(typeof json.E2 != "undefined") E2 = json.E2;
    if(typeof json.g2 != "undefined") g2 = json.g2;
    if(typeof json.V2 != "undefined") V2 = json.V2;
    if(typeof json.phi2 != "undefined") phi2 = json.phi2;
    if(typeof json.Enet != "undefined") Enet = json.Enet;
    if(typeof json.gnet != "undefined") gnet = json.gnet;
    if(typeof json.Vnet != "undefined") Vnet = json.Vnet;
    if(typeof json.phinet != "undefined") phinet = json.phinet;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.show1 != "undefined") show1 = json.show1;
    if(typeof json.show2 != "undefined") show2 = json.show2;
    if(typeof json.testc != "undefined") testc = json.testc;
    if(typeof json.g1show != "undefined") g1show = json.g1show;
    if(typeof json.g2show != "undefined") g2show = json.g2show;
    if(typeof json.gnetshow != "undefined") gnetshow = json.gnetshow;
    if(typeof json.V1show != "undefined") V1show = json.V1show;
    if(typeof json.V2show != "undefined") V2show = json.V2show;
    if(typeof json.Vnetshow != "undefined") Vnetshow = json.Vnetshow;
    if(typeof json.showgraph != "undefined") showgraph = json.showgraph;
    if(typeof json.showgraphone != "undefined") showgraphone = json.showgraphone;
    if(typeof json.showgraphtwo != "undefined") showgraphtwo = json.showgraphtwo;
    if(typeof json.showVgraph != "undefined") showVgraph = json.showVgraph;
    if(typeof json.showVgraphone != "undefined") showVgraphone = json.showVgraphone;
    if(typeof json.showVgraphtwo != "undefined") showVgraphtwo = json.showVgraphtwo;
    if(typeof json.showgradient != "undefined") showgradient = json.showgradient;
    if(typeof json.showF != "undefined") showF = json.showF;
    if(typeof json.showU != "undefined") showU = json.showU;
    if(typeof json.helpLabel != "undefined") helpLabel = json.helpLabel;
    if(typeof json.helpFlag != "undefined") helpFlag = json.helpFlag;
    if(typeof json.zeroval != "undefined") zeroval = json.zeroval;
    if(typeof json.scale1 != "undefined") scale1 = json.scale1;
    if(typeof json.scale2 != "undefined") scale2 = json.scale2;
    if(typeof json.plot2max != "undefined") plot2max = json.plot2max;
    if(typeof json.plot1max != "undefined") plot1max = json.plot1max;
    if(typeof json.showmidgraph != "undefined") showmidgraph = json.showmidgraph;
    if(typeof json.showmidVgraph != "undefined") showmidVgraph = json.showmidVgraph;
    if(typeof json.rM1m != "undefined") rM1m = json.rM1m;
    if(typeof json.rM2m != "undefined") rM2m = json.rM2m;
    if(typeof json.rM1M2 != "undefined") rM1M2 = json.rM1M2;
    if(typeof json.scalex != "undefined") scalex = json.scalex;
    if(typeof json.scaley != "undefined") scaley = json.scaley;
    if(typeof json.scalef != "undefined") scalef = json.scalef;
    if(typeof json.gmax != "undefined") gmax = json.gmax;
    if(typeof json.gmin != "undefined") gmin = json.gmin;
    if(typeof json.gy != "undefined") gy = json.gy;
    if(typeof json.Vy != "undefined") Vy = json.Vy;
    if(typeof json.F1 != "undefined") F1 = json.F1;
    if(typeof json.F2 != "undefined") F2 = json.F2;
    if(typeof json.colorball1 != "undefined") colorball1 = json.colorball1;
    if(typeof json.colorball2 != "undefined") colorball2 = json.colorball2;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.nmax != "undefined") nmax = json.nmax;
    if(typeof json.q0 != "undefined") q0 = json.q0;
    if(typeof json.q00 != "undefined") q00 = json.q00;
    if(typeof json.q0true != "undefined") q0true = json.q0true;
    if(typeof json.q00true != "undefined") q00true = json.q00true;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.ElementI != "undefined") ElementI = json.ElementI;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.ytext != "undefined") ytext = json.ytext;
    if(typeof json.ymtext != "undefined") ymtext = json.ymtext;
    if(typeof json.aytext != "undefined") aytext = json.aytext;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.xForce != "undefined") xForce = json.xForce;
    if(typeof json.xForcescale != "undefined") xForcescale = json.xForcescale;
    if(typeof json.yForce != "undefined") yForce = json.yForce;
    if(typeof json.elecForce != "undefined") elecForce = json.elecForce;
    if(typeof json.forceValue != "undefined") forceValue = json.forceValue;
    if(typeof json.massValue != "undefined") massValue = json.massValue;
    if(typeof json.acceleration != "undefined") acceleration = json.acceleration;
    if(typeof json.aValue != "undefined") aValue = json.aValue;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.radiusx != "undefined") radiusx = json.radiusx;
    if(typeof json.radiusy != "undefined") radiusy = json.radiusy;
    if(typeof json.colorStr != "undefined") colorStr = json.colorStr;
    if(typeof json.colorValue != "undefined") colorValue = json.colorValue;
    if(typeof json.qLabel != "undefined") qLabel = json.qLabel;
    if(typeof json.StrData != "undefined") StrData = json.StrData;
    if(typeof json.disabledbutton != "undefined") disabledbutton = json.disabledbutton;
    if(typeof json.dragmex != "undefined") dragmex = json.dragmex;
    if(typeof json.dragmexs != "undefined") dragmexs = json.dragmexs;
    if(typeof json.dragmey != "undefined") dragmey = json.dragmey;
    if(typeof json.dragemetrue != "undefined") dragemetrue = json.dragemetrue;
  };

  _model._inputAndPublicParameters = ["print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "text",  "selected",  "Width",  "Height",  "Width1",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "datashow",  "iOS",  "iPad",  "iPhone",  "isAndroid",  "showmodel",  "functionY",  "solutionY",  "vxtest",  "k",  "G",  "x1",  "x2",  "xtest",  "q1",  "m1",  "q2",  "m2",  "qtest",  "mtest",  "E1",  "g1",  "V1",  "phi1",  "E2",  "g2",  "V2",  "phi2",  "Enet",  "gnet",  "Vnet",  "phinet",  "range",  "dx",  "show1",  "show2",  "testc",  "g1show",  "g2show",  "gnetshow",  "V1show",  "V2show",  "Vnetshow",  "showgraph",  "showgraphone",  "showgraphtwo",  "showVgraph",  "showVgraphone",  "showVgraphtwo",  "showgradient",  "showF",  "showU",  "helpLabel",  "helpFlag",  "zeroval",  "scale1",  "scale2",  "plot2max",  "plot1max",  "showmidgraph",  "showmidVgraph",  "rM1m",  "rM2m",  "rM1M2",  "scalex",  "scaley",  "scalef",  "gmax",  "gmin",  "gy",  "Vy",  "F1",  "F2",  "colorball1",  "colorball2",  "n",  "nmax",  "q0",  "q00",  "q0true",  "q00true",  "q",  "x",  "ElementI",  "vx",  "y",  "ytext",  "ymtext",  "aytext",  "vy",  "xForce",  "xForcescale",  "yForce",  "elecForce",  "forceValue",  "massValue",  "acceleration",  "aValue",  "color",  "r",  "radiusx",  "radiusy",  "colorStr",  "colorValue",  "qLabel",  "StrData",  "disabledbutton",  "dragmex",  "dragmexs",  "dragmey",  "dragemetrue"]; 

  _model._outputAndPublicParameters = ["print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "text",  "selected",  "Width",  "Height",  "Width1",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "datashow",  "iOS",  "iPad",  "iPhone",  "isAndroid",  "showmodel",  "functionY",  "solutionY",  "vxtest",  "k",  "G",  "x1",  "x2",  "xtest",  "q1",  "m1",  "q2",  "m2",  "qtest",  "mtest",  "E1",  "g1",  "V1",  "phi1",  "E2",  "g2",  "V2",  "phi2",  "Enet",  "gnet",  "Vnet",  "phinet",  "range",  "dx",  "show1",  "show2",  "testc",  "g1show",  "g2show",  "gnetshow",  "V1show",  "V2show",  "Vnetshow",  "showgraph",  "showgraphone",  "showgraphtwo",  "showVgraph",  "showVgraphone",  "showVgraphtwo",  "showgradient",  "showF",  "showU",  "helpLabel",  "helpFlag",  "zeroval",  "scale1",  "scale2",  "plot2max",  "plot1max",  "showmidgraph",  "showmidVgraph",  "rM1m",  "rM2m",  "rM1M2",  "scalex",  "scaley",  "scalef",  "gmax",  "gmin",  "gy",  "Vy",  "F1",  "F2",  "colorball1",  "colorball2",  "n",  "nmax",  "q0",  "q00",  "q0true",  "q00true",  "q",  "x",  "ElementI",  "vx",  "y",  "ytext",  "ymtext",  "aytext",  "vy",  "xForce",  "xForcescale",  "yForce",  "elecForce",  "forceValue",  "massValue",  "acceleration",  "aValue",  "color",  "r",  "radiusx",  "radiusy",  "colorStr",  "colorValue",  "qLabel",  "StrData",  "disabledbutton",  "dragmex",  "dragmexs",  "dragmey",  "dragemetrue"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["svgradial"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["Event 2"] = true;
    __pagesEnabled["colors"] = true;
    __pagesEnabled["force"] = true;
    __pagesEnabled["fixedx0"] = true;
  });

  _model.addToReset(function() {
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.Var Table.font
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -5; // EjsS Model.Variables.Var Table.ymin
    ymax = 5; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    size = rangex/20; // EjsS Model.Variables.Var Table.size
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.001; // EjsS Model.Variables.Var Table.dt
    sizex = rangex/10; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/10; // EjsS Model.Variables.Var Table.sizey
    text = "Drag mass1 and mass2 and click play \n to observe the forces F1 and F2"; // EjsS Model.Variables.Var Table.text
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected
      }
    }());
  });

  _model.addToReset(function() {
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    vvst = true; // EjsS Model.Variables.layout.vvst
    datashow = true; // EjsS Model.Variables.layout.datashow
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
  });

  _model.addToReset(function() {
    functionY = "0"; // EjsS Model.Variables.functionY.functionY
  });

  _model.addToReset(function() {
    vxtest = 0; // EjsS Model.Variables.variables.vxtest
    k = 9.0; // EjsS Model.Variables.variables.k
    G = 6.67408; // EjsS Model.Variables.variables.G
    x1 = -2.0; // EjsS Model.Variables.variables.x1
    x2 = 2.0; // EjsS Model.Variables.variables.x2
    xtest = 0.0; // EjsS Model.Variables.variables.xtest
    q1 = 20.0; // EjsS Model.Variables.variables.q1
    q2 = -10.0; // EjsS Model.Variables.variables.q2
    qtest = 1.0; // EjsS Model.Variables.variables.qtest
    E1 = 0.0; // EjsS Model.Variables.variables.E1
    V1 = 0.0; // EjsS Model.Variables.variables.V1
    E2 = 0.0; // EjsS Model.Variables.variables.E2
    V2 = 0.0; // EjsS Model.Variables.variables.V2
    Enet = 0.0; // EjsS Model.Variables.variables.Enet
    Vnet = 0.0; // EjsS Model.Variables.variables.Vnet
    range = xmax-xmin; // EjsS Model.Variables.variables.range
    dx = 0.1; // EjsS Model.Variables.variables.dx
    helpLabel = "Show Help"; // EjsS Model.Variables.variables.helpLabel
    zeroval = 0.0; // EjsS Model.Variables.variables.zeroval
    scale2 = 1; // EjsS Model.Variables.variables.scale2
    plot2max = 5.2; // EjsS Model.Variables.variables.plot2max
    plot1max = -5.2; // EjsS Model.Variables.variables.plot1max
    scalex = 1; // EjsS Model.Variables.variables.scalex
    scaley = 1; // EjsS Model.Variables.variables.scaley
    scalef = 0.0000072; // EjsS Model.Variables.variables.scalef
    gmax = ymax*scaley; // EjsS Model.Variables.variables.gmax
    gmin = ymin*scaley; // EjsS Model.Variables.variables.gmin
    F1 = 0; // EjsS Model.Variables.variables.F1
    F2 = 0; // EjsS Model.Variables.variables.F2
    colorball1 = ""; // EjsS Model.Variables.variables.colorball1
    colorball2 = ""; // EjsS Model.Variables.variables.colorball2
  });

  _model.addToReset(function() {
    n = 2; // EjsS Model.Variables.FieldVars.n
    nmax = 2; // EjsS Model.Variables.FieldVars.nmax
    q0 = 100; // EjsS Model.Variables.FieldVars.q0
    q00 = 100; // EjsS Model.Variables.FieldVars.q00
    q0true = true; // EjsS Model.Variables.FieldVars.q0true
    q00true = true; // EjsS Model.Variables.FieldVars.q00true
    q = new Array(nmax); // EjsS Model.Variables.FieldVars.q
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.q
        q[_i0] = 100;  // EjsS Model.Variables.FieldVars.q
      }
    }());
    x = new Array(nmax); // EjsS Model.Variables.FieldVars.x
    ElementI = 0; // EjsS Model.Variables.FieldVars.ElementI
    vx = new Array(nmax); // EjsS Model.Variables.FieldVars.vx
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.vx
        vx[_i0] = 0;  // EjsS Model.Variables.FieldVars.vx
      }
    }());
    y = new Array(nmax); // EjsS Model.Variables.FieldVars.y
    ytext = new Array(nmax); // EjsS Model.Variables.FieldVars.ytext
    ymtext = new Array(nmax); // EjsS Model.Variables.FieldVars.ymtext
    aytext = new Array(nmax); // EjsS Model.Variables.FieldVars.aytext
    vy = new Array(nmax); // EjsS Model.Variables.FieldVars.vy
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.FieldVars.vy
        vy[_i0] = 0;  // EjsS Model.Variables.FieldVars.vy
      }
    }());
    xForce = new Array(nmax); // EjsS Model.Variables.FieldVars.xForce
    xForcescale = new Array(nmax); // EjsS Model.Variables.FieldVars.xForcescale
    yForce = new Array(nmax); // EjsS Model.Variables.FieldVars.yForce
    elecForce = new Array(nmax); // EjsS Model.Variables.FieldVars.elecForce
    forceValue = new Array(nmax); // EjsS Model.Variables.FieldVars.forceValue
    massValue = new Array(nmax); // EjsS Model.Variables.FieldVars.massValue
    acceleration = new Array(nmax); // EjsS Model.Variables.FieldVars.acceleration
    aValue = new Array(nmax); // EjsS Model.Variables.FieldVars.aValue
  });

  _model.addToReset(function() {
    color = new Array(nmax); // EjsS Model.Variables.DisplayVars.color
    r = new Array(nmax); // EjsS Model.Variables.DisplayVars.r
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.DisplayVars.r
        r[_i0] = 1;  // EjsS Model.Variables.DisplayVars.r
      }
    }());
    radiusx = new Array(nmax); // EjsS Model.Variables.DisplayVars.radiusx
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.DisplayVars.radiusx
        radiusx[_i0] = r*scalex;  // EjsS Model.Variables.DisplayVars.radiusx
      }
    }());
    radiusy = new Array(nmax); // EjsS Model.Variables.DisplayVars.radiusy
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.DisplayVars.radiusy
        radiusy[_i0] = r*scaley;  // EjsS Model.Variables.DisplayVars.radiusy
      }
    }());
    colorStr = ""; // EjsS Model.Variables.DisplayVars.colorStr
    colorValue = "null"; // EjsS Model.Variables.DisplayVars.colorValue
    qLabel = 0; // EjsS Model.Variables.DisplayVars.qLabel
    StrData = ["red","green","blue","yellow","cyan","magneta"]; // EjsS Model.Variables.DisplayVars.StrData
  });

  _model.addToReset(function() {
    disabledbutton = false; // EjsS Model.Variables.dragme.disabledbutton
    dragmex = Math.random()*4; // EjsS Model.Variables.dragme.dragmex
    dragmexs = dragmex; // EjsS Model.Variables.dragme.dragmexs
    dragmey = -ymax/2*scaley; // EjsS Model.Variables.dragme.dragmey
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  // computes force between charges  // > CustomCode.calcF:1
  function calcF() {  // > CustomCode.calcF:2
    for (var i=0; i<n; i++) {  // > CustomCode.calcF:3
      xForce[i]=0;  // > CustomCode.calcF:4
      yForce[i]=0;  // > CustomCode.calcF:5
      elecForce[i]=0;  // > CustomCode.calcF:6
        // > CustomCode.calcF:7
      if (q0true===true)  // > CustomCode.calcF:8
      {  // > CustomCode.calcF:9
      q[qLabel]=q0;  //charge value from slider  // > CustomCode.calcF:10
       }  // > CustomCode.calcF:11
       else if(q00true===true){  // > CustomCode.calcF:12
              q[qLabel]=q00;  //charge value from slider2  // > CustomCode.calcF:13
         }  // > CustomCode.calcF:14
      for (var j=0; j<n; j++) {  // > CustomCode.calcF:15
        if (i!=j) {  // > CustomCode.calcF:16
          //calculate force on ith particle due to  // > CustomCode.calcF:17
          //jth particle (therefore exclude i=j calculation)  // > CustomCode.calcF:18
          var deltaX=x[i]-x[j];  // > CustomCode.calcF:19
         var deltaY=y[i]-y[j];  // > CustomCode.calcF:20
          var r2=deltaX*deltaX+deltaY*deltaY;  // > CustomCode.calcF:21
          var r=Math.sqrt(r2);  // > CustomCode.calcF:22
          var cos=deltaX/r;  // > CustomCode.calcF:23
          var sin=deltaY/r;  // > CustomCode.calcF:24
          var r3=r2*r;  // > CustomCode.calcF:25
          var magnitude=G*q[i]*q[j]/r2; // added G by lookang  // > CustomCode.calcF:26
        //  xForce[i]=xForce[i]+magnitude*cos;  // x component  // > CustomCode.calcF:27
        //  yForce[i]=yForce[i]+magnitude*sin;  // y component  // > CustomCode.calcF:28
          xForce[i]=-xForce[i]-magnitude*cos;  // x component negative for mass lookang  // > CustomCode.calcF:29
          yForce[i]=-yForce[i]-magnitude*sin;  // y component  // > CustomCode.calcF:30
        }  // > CustomCode.calcF:31
      }  // > CustomCode.calcF:32
      elecForce[i]=Math.sqrt(xForce[i]*xForce[i]+yForce[i]*yForce[i]);//magnitude  // > CustomCode.calcF:33
    //forceValue[i]=" F"+" = "+_view._format(elecForce[i],"0.00E00");  // > CustomCode.calcF:34
  //  forceValue[i]=" |F"+_view._format([i+1],"0")+ "|="+_view._format(elecForce[i],"0.00")+"x10^-7 N ";  // > CustomCode.calcF:35
  if (print==false){  // > CustomCode.calcF:36
  forceValue[0]=" |F₁|="+(elecForce[i]*0.00000000001).toExponential(3)+" N ";  // > CustomCode.calcF:37
   forceValue[1]=" |F₂|="+(elecForce[i]*0.00000000001).toExponential(3)+" N ";  // > CustomCode.calcF:38
    massValue[0]=" M₁="+(q0).toFixed(0)+" kg ";  // > CustomCode.calcF:39
     // > CustomCode.calcF:40
   massValue[1]=" M₂="+(q00).toFixed(0)+" kg ";  // > CustomCode.calcF:41
   aValue[0] = "|a₁|="+(elecForce[i]*0.00000000001/q0).toExponential(3)+" m/s²";  // > CustomCode.calcF:42
   aValue[1] = "|a₂|="+(elecForce[i]*0.00000000001/q00).toExponential(3)+" m/s²";  // > CustomCode.calcF:43
   }  // > CustomCode.calcF:44
   else {  // > CustomCode.calcF:45
     forceValue[0]=" |F₁|";  // > CustomCode.calcF:46
   forceValue[1]=" |F₂| ";  // > CustomCode.calcF:47
    massValue[0]=" M₁";  // > CustomCode.calcF:48
     // > CustomCode.calcF:49
   massValue[1]=" M₂";  // > CustomCode.calcF:50
   aValue[0] = "";  // > CustomCode.calcF:51
   aValue[1] = "";  // > CustomCode.calcF:52
     }  // > CustomCode.calcF:53
  }  // > CustomCode.calcF:54
  }  // > CustomCode.calcF:55

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.98 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  var kepub =0.9 ;  // > CustomCode.changeOrientation:4
  // check platform for Apps  // > CustomCode.changeOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:7
     // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
     // > CustomCode.changeOrientation:15
  switch (window.orientation) {  // > CustomCode.changeOrientation:16
    case 0:  // > CustomCode.changeOrientation:17
    case 180:  // > CustomCode.changeOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:21
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:22
        // return window.screen.height;  // > CustomCode.changeOrientation:23
        //  return window.innerHeight;  // > CustomCode.changeOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
      }  // > CustomCode.changeOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:29
        // return window.screen.height;  // > CustomCode.changeOrientation:30
        //  return window.innerHeight;  // > CustomCode.changeOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:32
      }  // > CustomCode.changeOrientation:33
      else {  // > CustomCode.changeOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:35
        return window.innerHeight*k;  // > CustomCode.changeOrientation:36
      }  // > CustomCode.changeOrientation:37
      break;  // > CustomCode.changeOrientation:38
    case 90:  // > CustomCode.changeOrientation:39
    case -90:  // > CustomCode.changeOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:41
     // > CustomCode.changeOrientation:42
      if (iOSapp){ // App  // > CustomCode.changeOrientation:43
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:44
        // return window.screen.height;  // > CustomCode.changeOrientation:45
        //  return window.innerHeight;  // > CustomCode.changeOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:47
      }  // > CustomCode.changeOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:51
        // return window.screen.height;  // > CustomCode.changeOrientation:52
        //  return window.innerHeight;  // > CustomCode.changeOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:54
      }  // > CustomCode.changeOrientation:55
      else { // browser Android and PC  // > CustomCode.changeOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:57
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:58
        return window.innerHeight*k;  // > CustomCode.changeOrientation:59
      }  // > CustomCode.changeOrientation:60
      break;  // > CustomCode.changeOrientation:61
    default:  // > CustomCode.changeOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:64
      return window.innerHeight*k;  // > CustomCode.changeOrientation:65
  }  // > CustomCode.changeOrientation:66
     // > CustomCode.changeOrientation:67
  }  // > CustomCode.changeOrientation:68
     // > CustomCode.changeOrientation:69

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (x[0]==undefined){ // does not seems to work  // > Initialization.undefined:1
      x[0]=0;  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
      if (x[1]==undefined){  // > Initialization.undefined:4
      x[1]=4;  // > Initialization.undefined:5
      }  // > Initialization.undefined:6
     if (dragemetrue==undefined){  // > Initialization.undefined:7
      dragemetrue=false;  // > Initialization.undefined:8
      }   // > Initialization.undefined:9
        // > Initialization.undefined:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //setting up initial configuration with two charges  // > Initialization.Init Page:1
    n=2;  // > Initialization.Init Page:2
    for (var i=0;i<n;i++){  // > Initialization.Init Page:3
     // q[0]=q0/q0; //slider 1  // > Initialization.Init Page:4
     // q[1]=q00/q00; //slider 2  // > Initialization.Init Page:5
        q[0]=q0; //slider 1  // > Initialization.Init Page:6
      q[1]=q00; //slider 2  // > Initialization.Init Page:7
      //q[i]=1;  // > Initialization.Init Page:8
    //x[i]=rangex/2*(2*i-1)/n; // equal space at 0  // > Initialization.Init Page:9
    //x[i]=rangex/2*(i)/n;  // > Initialization.Init Page:10
    //x[0] =0;  // > Initialization.Init Page:11
    //x[1] = 4;  // > Initialization.Init Page:12
    y[i]=0;  // > Initialization.Init Page:13
    color[i]=i;  // > Initialization.Init Page:14
    //r[i]=q[i]*1;// make radius bigger  // > Initialization.Init Page:15
    r[i]=1;  // > Initialization.Init Page:16
    forceValue[i]="F";  // > Initialization.Init Page:17
    //colorStr+=StrData[i]+";";  // > Initialization.Init Page:18
    }  // > Initialization.Init Page:19
    //slider color  // > Initialization.Init Page:20
    color0=color[0];  // > Initialization.Init Page:21
    color1=color[1];  // > Initialization.Init Page:22
    calcF();  // > Initialization.Init Page:23
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    //_view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    //_view.plottingPanel.getTitleY().setPosition([0.5,0.98]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svgradial"]) return;
    var container = document.createElement('div');  // > Initialization.svgradial:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:2
      '  <radialGradient id="mygrandientglint" cx="50%" cy="50%" r="90%" fx="90%" fy="10%">'+  // > Initialization.svgradial:3
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:0.5" />'+  // > Initialization.svgradial:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.svgradial:5
      '  </radialGradient>'+  // > Initialization.svgradial:6
      '</defs></svg>';  // > Initialization.svgradial:7
    container.innerHTML = svggradient;  // > Initialization.svgradial:8
    document.body.appendChild(container);  // > Initialization.svgradial:9
    //"url(#mygrandientglint)"  // > Initialization.svgradial:10
    var container = document.createElement('div');  // > Initialization.svgradial:11
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:12
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svgradial:13
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:0" />'+  // > Initialization.svgradial:14
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.svgradial:15
      '  </radialGradient>'+  // > Initialization.svgradial:16
      '</defs></svg>';  // > Initialization.svgradial:17
    container.innerHTML = svggradient;  // > Initialization.svgradial:18
    document.body.appendChild(container);  // > Initialization.svgradial:19
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["colors"]) return;
    if (q1 > 0.0)  // > FixedRelations.colors:1
    {  // > FixedRelations.colors:2
    colorball1 = "rgba(255,0,0,255)";  // > FixedRelations.colors:3
    }  // > FixedRelations.colors:4
    else if  (q1 < 0.0)  // > FixedRelations.colors:5
      {  // > FixedRelations.colors:6
        colorball1 = "rgba(0,0,255,255)";  // > FixedRelations.colors:7
      }  // > FixedRelations.colors:8
      else if (q1===0)  // > FixedRelations.colors:9
      {  // > FixedRelations.colors:10
      colorball1 = "rgba(255,255,255,255)";  // > FixedRelations.colors:11
      }    // > FixedRelations.colors:12
        // > FixedRelations.colors:13
      //q2  // > FixedRelations.colors:14
        if (q2 > 0.0)  // > FixedRelations.colors:15
    {  // > FixedRelations.colors:16
    colorball2 = "rgba(255,0,0,255)";  // > FixedRelations.colors:17
    }  // > FixedRelations.colors:18
    else if  (q2 < 0.0)  // > FixedRelations.colors:19
      {  // > FixedRelations.colors:20
        colorball2 = "rgba(0,0,255,255)";  // > FixedRelations.colors:21
      }  // > FixedRelations.colors:22
      else if (q2===0.0)  // > FixedRelations.colors:23
      {  // > FixedRelations.colors:24
      colorball2 = "rgba(255,255,255,255)";  // > FixedRelations.colors:25
      }  // > FixedRelations.colors:26
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["force"]) return;
    calcF();  // > FixedRelations.force:1
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["fixedx0"]) return;
    //x[0]=0;  // > FixedRelations.fixedx0:1
    radiusx[0] =scalex*r[0];  // > FixedRelations.fixedx0:2
    radiusy[0] =scaley*r[0];  // > FixedRelations.fixedx0:3
    radiusx[1] =scalex*r[1];  // > FixedRelations.fixedx0:4
    radiusy[1] =scaley*r[1];  // > FixedRelations.fixedx0:5
    xForcescale[0] =xForce[0]*scalef;  // > FixedRelations.fixedx0:6
    xForcescale[1] =xForce[1]*scalef;  // > FixedRelations.fixedx0:7
    ytext[0]= y[0]+radiusy[0];  // > FixedRelations.fixedx0:8
    ytext[1]= y[1]+2*radiusy[1]; //change the poistion for text for better visualization  // > FixedRelations.fixedx0:9
    ymtext[0]= y[0]+0.8*radiusy[0];  // > FixedRelations.fixedx0:10
    ymtext[1]= y[1]+1.8*radiusy[1];  // > FixedRelations.fixedx0:11
    aytext[0]= y[0]-radiusy[0];  // > FixedRelations.fixedx0:12
    aytext[1]= y[1]-2*radiusy[1];  // > FixedRelations.fixedx0:13
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _xLength;
    var _vxLength;

    __odeSelf._getOdeVars = function (){ return["x","vx","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _xLength = x.length;
      _vxLength = vx.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Event 2"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xLength; __j++)
          if (__state[__n++]!=x[__j] || __state[__n++]!=vx[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_xLength != x.length) return true;
      if (_vxLength != vx.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_xLength;i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(vx[i]) ? vx[i][i] : vx[i]; // Rate for ODE: Evol Page:x
          _aRate[__cRate++] = Array.isArray(acceleration[i]=xForce[i]/q[i]) ? acceleration[i]=xForce[i]/q[i][i] : acceleration[i]=xForce[i]/q[i]; // Rate for ODE: Evol Page:vx
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        //return (x[0]-radiusx[0]/2)-x[1];  // > Event zero-condition for page Evol Page:1
        return (x[0]-(x[1])+(1.01*radiusx[0]/2)+(1.01*radiusx[1]/2));  // > Event zero-condition for page Evol Page:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        text="paused";  // > Event action for page Evol Page:2
        disabledbutton=true;  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        //return (x[0]-radiusx[0]/2)-x[1];  // > Event zero-condition for page Evol Page:1
        return (-x[0]+(x[1])+(1.01*radiusx[0]/2)+(1.01*radiusx[1]/2));  // > Event zero-condition for page Evol Page:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        text="paused";  // > Event action for page Evol Page:2
        disabledbutton=true;  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(x.length),__beginIndex,x.ength);
  }

  function _historic_vx(__time) {
    var __beginIndex = 0 + x.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(vx.length),__beginIndex,vx.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new gravity01_1_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax*scaley; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax*scalex; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return _isMobile?"":"Basic Gravitational Force Model"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin*scalex; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin*scaley; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return !print?text:""; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return !print?" |F1|="+(elecForce[0]*0.00000000001).toExponential(3)+" N "+", |F2|="+ (elecForce[1]*0.00000000001).toExponential(3)+" N ,\n"+" r = "+_view._format(Math.abs(x[0]-x[1]),"0.00")+" m ,\n"+" t = "+_view._format(t,"0.000")+" s ":""; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.massset.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'massset'
          _view.massset.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'massset'
          _view.massset.linkProperty("SizeX",  function() { return radiusx; }, function(_v) { radiusx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'massset'
          _view.massset.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'massset'
          _view.massset.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'massset'
          _view.massset.linkProperty("SizeY",  function() { return radiusy; }, function(_v) { radiusy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'massset'
          _view.massset.setAction("OnDrag", function(_data,_info) {
  calcF();
  var x0 ;
  var x1;
   dragemetrue=true;
   
   
   // Math.round
  // x[ElementI]=Math.round(x[ElementI]);
   var position = _view.plottingPanel.getInteraction().getInteractionPoint();
  x[ElementI] = Math.round(position[0]);
  //yi = position[1];
  //collision detection
  if((x[0]+(1.011*radiusx[0]/2)>x[1]-1.011*radiusx[1]/2)&&ElementI===0){
   x[1] =x[0]+(1.011*radiusx[0]/2)+1.011*radiusx[1]/2;
  //(x[0] =-(-(x[1])+(radiusx[0]/2)+radiusx[1]/2));
   
    }
   else if((x[0]+(1.011*radiusx[0]/2)>x[1]-1.011*radiusx[1]/2)&&ElementI===1){
  // x[1] =x[0]+radiusx[0]/2+radiusx[1]/2;
  (x[0] =-(-(x[1])+(1.011*radiusx[0]/2)+1.011*radiusx[1]/2));
    }
    x0 = x[0];
    x1 = x[1];
  // x0 = x[0] =Math.round(x[0]*10)/10;
  //x1 = x[1]=Math.round(x[1]*10)/10;

}); // HtmlView Page setting action 'OnDrag' for element 'massset'
          _view.massset.linkProperty("ElementInteracted",  function() { return ElementI; }, function(_v) { ElementI = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'massset'
          _view.svgradial.linkProperty("SizeX",  function() { return radiusx[1]; } ); // HtmlView Page linking property 'SizeX' for element 'svgradial'
          _view.svgradial.linkProperty("X",  function() { return x[1]; } ); // HtmlView Page linking property 'X' for element 'svgradial'
          _view.svgradial.linkProperty("Y",  function() { return y[1]; } ); // HtmlView Page linking property 'Y' for element 'svgradial'
          _view.svgradial.linkProperty("SizeY",  function() { return radiusy[1]; } ); // HtmlView Page linking property 'SizeY' for element 'svgradial'
          _view.unicodearrows.linkProperty("X",  function() { return x[1]; } ); // HtmlView Page linking property 'X' for element 'unicodearrows'
          _view.unicodearrows.linkProperty("Y",  function() { return y[1]-0.25; } ); // HtmlView Page linking property 'Y' for element 'unicodearrows'
          _view.unicodearrows.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'unicodearrows'
          _view.svgradial2.linkProperty("SizeX",  function() { return radiusx[0]; } ); // HtmlView Page linking property 'SizeX' for element 'svgradial2'
          _view.svgradial2.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'svgradial2'
          _view.svgradial2.linkProperty("Y",  function() { return y[0]; } ); // HtmlView Page linking property 'Y' for element 'svgradial2'
          _view.svgradial2.linkProperty("SizeY",  function() { return radiusy[0]; } ); // HtmlView Page linking property 'SizeY' for element 'svgradial2'
          _view.unicodearrows2.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'unicodearrows2'
          _view.unicodearrows2.linkProperty("Y",  function() { return y[0]-0.25; } ); // HtmlView Page linking property 'Y' for element 'unicodearrows2'
          _view.unicodearrows2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'unicodearrows2'
          _view.dragbutton1.linkProperty("SizeX",  function() { return radiusx[1]/3; } ); // HtmlView Page linking property 'SizeX' for element 'dragbutton1'
          _view.dragbutton1.linkProperty("X",  function() { return x[1]; } ); // HtmlView Page linking property 'X' for element 'dragbutton1'
          _view.dragbutton1.linkProperty("Y",  function() { return y[1]; } ); // HtmlView Page linking property 'Y' for element 'dragbutton1'
          _view.dragbutton1.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'dragbutton1'
          _view.dragbutton1.linkProperty("SizeY",  function() { return radiusy[1]/3; } ); // HtmlView Page linking property 'SizeY' for element 'dragbutton1'
          _view.dragbutton13.linkProperty("SizeX",  function() { return radiusx[0]/3; } ); // HtmlView Page linking property 'SizeX' for element 'dragbutton13'
          _view.dragbutton13.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'dragbutton13'
          _view.dragbutton13.linkProperty("Y",  function() { return y[0]; } ); // HtmlView Page linking property 'Y' for element 'dragbutton13'
          _view.dragbutton13.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'dragbutton13'
          _view.dragbutton13.linkProperty("SizeY",  function() { return radiusy[0]/3; } ); // HtmlView Page linking property 'SizeY' for element 'dragbutton13'
          _view.force0.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'force0'
          _view.force0.linkProperty("Y",  function() { return ytext[0]; } ); // HtmlView Page linking property 'Y' for element 'force0'
          _view.force0t.linkProperty("Text",  function() { return forceValue[0]; }, function(_v) { forceValue[0] = _v; } ); // HtmlView Page linking property 'Text' for element 'force0t'
          _view.force0t.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'force0t'
          _view.force1.linkProperty("X",  function() { return x[1]; } ); // HtmlView Page linking property 'X' for element 'force1'
          _view.force1.linkProperty("Y",  function() { return ytext[1]; } ); // HtmlView Page linking property 'Y' for element 'force1'
          _view.force1t.linkProperty("Text",  function() { return forceValue[1]; }, function(_v) { forceValue[1] = _v; } ); // HtmlView Page linking property 'Text' for element 'force1t'
          _view.force1t.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'force1t'
          _view.mass0.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'mass0'
          _view.mass0.linkProperty("Y",  function() { return ymtext[0]; } ); // HtmlView Page linking property 'Y' for element 'mass0'
          _view.mass0t.linkProperty("Text",  function() { return massValue[0]; }, function(_v) { massValue[0] = _v; } ); // HtmlView Page linking property 'Text' for element 'mass0t'
          _view.mass0t.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'mass0t'
          _view.mass1.linkProperty("X",  function() { return x[1]; } ); // HtmlView Page linking property 'X' for element 'mass1'
          _view.mass1.linkProperty("Y",  function() { return ymtext[1]; } ); // HtmlView Page linking property 'Y' for element 'mass1'
          _view.mass1t.linkProperty("Text",  function() { return massValue[1]; }, function(_v) { massValue[1] = _v; } ); // HtmlView Page linking property 'Text' for element 'mass1t'
          _view.mass1t.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'mass1t'
          _view.acc0.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'acc0'
          _view.acc0.linkProperty("Y",  function() { return aytext[0]; } ); // HtmlView Page linking property 'Y' for element 'acc0'
          _view.acc0t.linkProperty("Text",  function() { return aValue[0]; }, function(_v) { aValue[0] = _v; } ); // HtmlView Page linking property 'Text' for element 'acc0t'
          _view.acc0t.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'acc0t'
          _view.acc1.linkProperty("X",  function() { return x[1]; } ); // HtmlView Page linking property 'X' for element 'acc1'
          _view.acc1.linkProperty("Y",  function() { return aytext[1]; } ); // HtmlView Page linking property 'Y' for element 'acc1'
          _view.acc1t.linkProperty("Text",  function() { return aValue[1]; }, function(_v) { aValue[1] = _v; } ); // HtmlView Page linking property 'Text' for element 'acc1t'
          _view.acc1t.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'acc1t'
          _view.textSet2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet2'
          _view.textSet2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet2'
          _view.textSet2.linkProperty("Y",  function() { return ytext; }, function(_v) { ytext = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet2'
          _view.textSet2.linkProperty("Text",  function() { return forceValue; }, function(_v) { forceValue = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet2'
          _view.textSetmass2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSetmass2'
          _view.textSetmass2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSetmass2'
          _view.textSetmass2.linkProperty("Y",  function() { return ymtext; }, function(_v) { ymtext = _v; } ); // HtmlView Page linking property 'Y' for element 'textSetmass2'
          _view.textSetmass2.linkProperty("Text",  function() { return massValue; }, function(_v) { massValue = _v; } ); // HtmlView Page linking property 'Text' for element 'textSetmass2'
          _view.acceleration2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'acceleration2'
          _view.acceleration2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'acceleration2'
          _view.acceleration2.linkProperty("Y",  function() { return aytext; }, function(_v) { aytext = _v; } ); // HtmlView Page linking property 'Y' for element 'acceleration2'
          _view.acceleration2.linkProperty("Text",  function() { return aValue; }, function(_v) { aValue = _v; } ); // HtmlView Page linking property 'Text' for element 'acceleration2'
          _view.segmentSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet'
          _view.segmentSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet'
          _view.segmentSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeY",  function() { return ytext; }, function(_v) { ytext = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet'
          _view.arrowSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet'
          _view.arrowSet.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeX",  function() { return xForcescale; }, function(_v) { xForcescale = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSet'
          _view.arrowSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet'
          _view.arrowSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeY",  function() { return yForce; }, function(_v) { yForce = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowSet'
          _view.acceleration.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'acceleration'
          _view.acceleration.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'acceleration'
          _view.acceleration.linkProperty("SizeX",  function() { return xForce/q; } ); // HtmlView Page linking property 'SizeX' for element 'acceleration'
          _view.acceleration.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'acceleration'
          _view.acceleration.linkProperty("Y",  function() { return -ytext; } ); // HtmlView Page linking property 'Y' for element 'acceleration'
          _view.analyticCurve2.linkProperty("FunctionY",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurve2'
          _view.analyticCurve2.linkProperty("Minimum",  function() { return xmin*3; } ); // HtmlView Page linking property 'Minimum' for element 'analyticCurve2'
          _view.analyticCurve2.linkProperty("Maximum",  function() { return xmax*3; } ); // HtmlView Page linking property 'Maximum' for element 'analyticCurve2'
          _view.analyticCurve2.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'analyticCurve2'
          _view.dragme2.linkProperty("Visibility",  function() { return !_isPlaying||!print; } ); // HtmlView Page linking property 'Visibility' for element 'dragme2'
          _view.arrowdragme2.linkProperty("SizeX",  function() { return x[1]- (dragmex + 0.1*scalex); } ); // HtmlView Page linking property 'SizeX' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("X",  function() { return dragmex + 0.1*scalex; } ); // HtmlView Page linking property 'X' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("Y",  function() { return dragmey; }, function(_v) { dragmey = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("Visibility",  function() { return dragemetrue===false; } ); // HtmlView Page linking property 'Visibility' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("SizeY",  function() { return 0-dragmey; } ); // HtmlView Page linking property 'SizeY' for element 'arrowdragme2'
          _view.arrowdragme.linkProperty("SizeX",  function() { return x[0]- (dragmex - 0.1*scalex); } ); // HtmlView Page linking property 'SizeX' for element 'arrowdragme'
          _view.arrowdragme.linkProperty("X",  function() { return dragmex - 0.1*scalex; } ); // HtmlView Page linking property 'X' for element 'arrowdragme'
          _view.arrowdragme.linkProperty("Y",  function() { return dragmey; }, function(_v) { dragmey = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowdragme'
          _view.arrowdragme.linkProperty("Visibility",  function() { return dragemetrue===false; } ); // HtmlView Page linking property 'Visibility' for element 'arrowdragme'
          _view.arrowdragme.linkProperty("SizeY",  function() { return 0-dragmey; } ); // HtmlView Page linking property 'SizeY' for element 'arrowdragme'
          _view.dragme.linkProperty("X",  function() { return dragmex; }, function(_v) { dragmex = _v; } ); // HtmlView Page linking property 'X' for element 'dragme'
          _view.dragme.linkProperty("Y",  function() { return dragmey - 0.2*scaley; } ); // HtmlView Page linking property 'Y' for element 'dragme'
          _view.dragme.linkProperty("Visibility",  function() { return (dragemetrue===false); } ); // HtmlView Page linking property 'Visibility' for element 'dragme'
          _view.r.linkProperty("Visibility",  function() { return print; }, function(_v) { print = _v; } ); // HtmlView Page linking property 'Visibility' for element 'r'
          _view.group.linkProperty("X",  function() { return (x[1]+x[0])/2; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.r2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'r2'
          _view.arrow.linkProperty("SizeX",  function() { return x[1]-x[0]; } ); // HtmlView Page linking property 'SizeX' for element 'arrow'
          _view.arrow.linkProperty("X",  function() { return (x[1]+x[0])/2; } ); // HtmlView Page linking property 'X' for element 'arrow'
          _view.F1.linkProperty("SizeX",  function() { return -(x[0]-x[1])/3; } ); // HtmlView Page linking property 'SizeX' for element 'F1'
          _view.F1.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'F1'
          _view.F12.linkProperty("SizeX",  function() { return -(x[1]-x[0])/3; } ); // HtmlView Page linking property 'SizeX' for element 'F12'
          _view.F12.linkProperty("X",  function() { return x[1]; } ); // HtmlView Page linking property 'X' for element 'F12'
          _view.mrocket.linkProperty("Display",  function() { return !print?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'mrocket'
          _view.comboBox.linkProperty("Options",  function() { return ["M₁=100,M₂=100,r=4.00","M₁=6.0e+24,M₂=100,r=4.00","M₁=6.0e+24,M₂=7.4e+22,r=3.8e+8","M₁=100,M₂=100,r=1.00","M₁=50,M₂=50,r=0.50","M₁=50,M₂=50,r=0.50 version2","M1 =100","M1 =90","M1 =80","M1 =70","M1 =60","M1 =50","M1 =40","M1 =30","M1 =20","M1 =10","M2 =100","M2 =90","M2 =80","M2 =70","M2 =60","M2 =50","M2 =40","M2 =30","M2 =20","M2 =10","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  //var option = _view.comboBox.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
   
  if ( option=="user_defined"){
    
    }
    
  else if(option=="M₁=100,M₂=100,r=4.00") {
    q0 =q[0]= 100;
    q00 =q[1]= 100;
    x[0]=0;
      x[1]=4;
      r[0]=0.5;
    r[1]=0.5;
    xmin = -5;
  xmax = 5;
  ymin = -5;
  ymax = 5;
   dt = 0.001;
  }
    
  else if(option=="M₁=6.0e+24,M₂=100,r=4.00") {
    q0 =q[0]= 6.0e24;
    q00 =q[1]= 100;
    x[0]=0;
      x[1]=4;
      r[0]=0.5;
    r[1]=0.5;
    xmin = -5;
  xmax = 5;
  ymin = -5;
  ymax = 5;
   dt = 0.001;
   
  }
  else if(option=="M₁=100,M₂=100,r=1.00") {
    q0 =q[0]= 100;
      q00 =q[1]= 100;
      x[0]=0;
      x[1]=1.00001;
      r[0]=0.5;
    r[1]=0.5;
    xmin = -5;
  xmax = 5;
  ymin = -5;
  ymax = 5;
   dt = 0.001;
  }
  else if(option=="M₁=50,M₂=50,r=0.50") {
    q0 =q[0]= 50;
      q00 =q[1]= 50;
      x[0]=0;
      x[1]=0.5000001;
      r[0]=0.5;
      r[1]=0;
   dt = 0.001;
  }
  //"M₁=50,M₂=50,r=0.50 version2"
  else if(option=="M₁=50,M₂=50,r=0.50 version2") {
    q0 =q[0]= 50;
      q00 =q[1]= 50;
      x[0]=0;
      x[1]=0.5000001;
    r[0]=0.5;
    r[1]=0.5;
   dt = 0.001;
  }
  else if(option=="M₁=6.0e+24,M₂=7.4e+22,r=3.8e+8") {
  xmin = -0.5e+8;
  xmax = 4.0e+8;
  ymin = -1e+8;
  ymax = 1e+8;
  dragmey =-ymax/2*scaley;
  q0 =q[0]= 6e+24;
      q00 =q[1]= 7.4e+22;
      
      x[0]=0;
      x[1]=3.8e+8;
    r[0]=6.38E6;
     r[1]=3476000;
  dt = 0.01;
   
  }
    else if ( option=="M1 =100"){
    q0 = 100;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =90"){
    q0 = 90;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =80"){
    q0 = 80;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =70"){
    q0 = 70;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =60"){
    q0 = 60;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =50"){
    q0 = 50;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =40"){
    q0 = 40;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =30"){
    q0 = 30;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =20"){
    q0 = 20;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
    else if ( option=="M1 =10"){
    q0 = 10;
    q0true=true;
  q00true=false;
  qLabel=0;
  calcF();
    }
  else if ( option=="M2 =100"){
    q00 = 100;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
    else if ( option=="M2 =90"){
    q00 = 90;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
    else if ( option=="M2 =80"){
    q00 = 80;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
    else if ( option=="M2 =70"){
    q00 = 70;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
  else if ( option=="M2 =60"){
    q00 = 60;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
  else if ( option=="M2 =50"){
    q00 = 50;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
    else if ( option=="M2 =40"){
    q00 = 40;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
    else if ( option=="M2 =30"){
    q00 = 30;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
  else if ( option=="M2 =20"){
    q00 = 20;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
    else if ( option=="M2 =10"){
    q00 = 10;
   q00true=true;
  q0true=false;
  qLabel=1;
  calcF();
    }
    else if ( option=="print"){
    print =true;
    }
  // if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
        // parent.TTS.speak(option, function () {
              // success
         // }, function (reason) {
              // error
         // });
   //   }
   //   else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  //}

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Disabled",  function() { return disabledbutton; }, function(_v) { disabledbutton = _v; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.stepButton2.setAction("OnPress", function(_data,_info) {
  text="stepping";

}); // HtmlView Page setting action 'OnPress' for element 'stepButton2'
          _view.stepButton2.linkProperty("Disabled",  function() { return disabledbutton; }, function(_v) { disabledbutton = _v; } ); // HtmlView Page linking property 'Disabled' for element 'stepButton2'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function gravity01_1_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = gravity01_1_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('7.1_Law_of_gravitation','./gravity01_0.xhtml');

  return _view;
} // end of main function

function gravity01_1_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","99.5vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("XTicks",10) // EJsS HtmlView.HtmlView Page: setting property 'XTicks' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YTicks",1) // EJsS HtmlView.HtmlView Page: setting property 'YTicks' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("TitleX","r") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"massset", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'massset'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'massset'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'massset'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'massset'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"svgradial", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'svgradial'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'svgradial'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'svgradial'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"unicodearrows", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'unicodearrows'
      .setProperty("Text","↔") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'unicodearrows'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"svgradial2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'svgradial2'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'svgradial2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'svgradial2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"unicodearrows2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'unicodearrows2'
      .setProperty("Text","↔") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'unicodearrows2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"false", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'false'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'false'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dragbutton1", _view.false) // EJsS HtmlView.HtmlView Page: declaration of element 'dragbutton1'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dragbutton1'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dragbutton1'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'dragbutton1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dragbutton1'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'dragbutton1'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dragbutton13", _view.false) // EJsS HtmlView.HtmlView Page: declaration of element 'dragbutton13'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dragbutton13'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dragbutton13'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'dragbutton13'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dragbutton13'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'dragbutton13'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"force0", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'force0'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"force0t", _view.force0) // EJsS HtmlView.HtmlView Page: declaration of element 'force0t'
      .setProperty("FillColor","rgba(0,0,64,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'force0t'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'force0t'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'force0t'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"force1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'force1'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"force1t", _view.force1) // EJsS HtmlView.HtmlView Page: declaration of element 'force1t'
      .setProperty("FillColor","rgba(0,0,64,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'force1t'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'force1t'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'force1t'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"mass0", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass0'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"mass0t", _view.mass0) // EJsS HtmlView.HtmlView Page: declaration of element 'mass0t'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mass0t'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mass0t'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mass0t'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"mass1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass1'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"mass1t", _view.mass1) // EJsS HtmlView.HtmlView Page: declaration of element 'mass1t'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mass1t'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mass1t'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mass1t'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"acc0", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'acc0'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"acc0t", _view.acc0) // EJsS HtmlView.HtmlView Page: declaration of element 'acc0t'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'acc0t'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'acc0t'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'acc0t'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"acc1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'acc1'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"acc1t", _view.acc1) // EJsS HtmlView.HtmlView Page: declaration of element 'acc1t'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'acc1t'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'acc1t'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'acc1t'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSet2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSetmass2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSetmass2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSetmass2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSetmass2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textSetmass2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"acceleration2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'acceleration2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'acceleration2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'acceleration2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'acceleration2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'segmentSet'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSet'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'segmentSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"acceleration", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'acceleration'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'acceleration'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'acceleration'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'acceleration'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve2'
      .setProperty("FunctionX","r") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurve2'
      .setProperty("Variable","r") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve2'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurve2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurve2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"dragme2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dragme2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowdragme2", _view.dragme2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowdragme2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowdragme2'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowdragme2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowdragme2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowdragme2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowdragme", _view.dragme2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowdragme'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowdragme'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowdragme'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowdragme'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowdragme'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"dragme", _view.dragme2) // EJsS HtmlView.HtmlView Page: declaration of element 'dragme'
      .setProperty("Text","drag me") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dragme'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragme'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"r", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'r'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.r) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      .setProperty("Y",-0.9) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"r2", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'r2'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'r2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'r2'
      .setProperty("Text","r") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'r2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'r2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.r) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'arrow'
      .setProperty("Y",-1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrow'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"F1", _view.r) // EJsS HtmlView.HtmlView Page: declaration of element 'F1'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'F1'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'F1'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'F1'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'F1'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'F1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"F12", _view.r) // EJsS HtmlView.HtmlView Page: declaration of element 'F12'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'F12'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'F12'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'F12'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'F12'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'F12'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"mrocket", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'mrocket'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'mrocket'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "30px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'mrocket'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select your scenario here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","||") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("Text","|►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Gravitational Force Model (Basic)<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01_1/gravity01/2017-06-20_0858formulasmall.png" />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01_1/gravity01/2017-06-20_0858formulasmall.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01_1/1authorlookangphoto.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01_1/01authorannecox.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01_1/01authorwc_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01_1/01authorPacoEsquembre2011.png" />
 weelookang@gmail.com; Anne Cox; Wolfgang Christian; Francisco Esquembre
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com; Anne Cox; Wolfgang Christian; Francisco Esquembre.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new gravity01_1("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_7gravity/fremont/ejss_src_gravity01_1/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
