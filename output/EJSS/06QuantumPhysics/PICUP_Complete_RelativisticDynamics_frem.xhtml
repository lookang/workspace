<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Relativistic Dynamics in 1D with a constant force</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PICUP_Complete_RelativisticDynamics_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var c; // EjsS Model.Variables.Input.c
  var m; // EjsS Model.Variables.Input.m
  var Efield; // EjsS Model.Variables.Input.Efield
  var dt; // EjsS Model.Variables.Input.dt

  var elaspedtime; // EjsS Model.Variables.Variables.elaspedtime
  var x; // EjsS Model.Variables.Variables.x
  var v; // EjsS Model.Variables.Variables.v
  var t; // EjsS Model.Variables.Variables.t
  var lorentz; // EjsS Model.Variables.Variables.lorentz
  var E; // EjsS Model.Variables.Variables.E
  var a; // EjsS Model.Variables.Variables.a
  var KE_numerical; // EjsS Model.Variables.Variables.KE_numerical
  var KE_analytical; // EjsS Model.Variables.Variables.KE_analytical

  var tArray; // EjsS Model.Variables.Array.tArray
  var xArray; // EjsS Model.Variables.Array.xArray
  var vArray; // EjsS Model.Variables.Array.vArray
  var EArray; // EjsS Model.Variables.Array.EArray
  var lorentzArray; // EjsS Model.Variables.Array.lorentzArray

  var font; // EjsS Model.Variables.Graph and Display.font
  var fontb; // EjsS Model.Variables.Graph and Display.fontb
  var fonta; // EjsS Model.Variables.Graph and Display.fonta
  var Speed; // EjsS Model.Variables.Graph and Display.Speed
  var Position; // EjsS Model.Variables.Graph and Display.Position
  var Energy; // EjsS Model.Variables.Graph and Display.Energy

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      c : c,
      m : m,
      Efield : Efield,
      dt : dt,
      elaspedtime : elaspedtime,
      x : x,
      v : v,
      t : t,
      lorentz : lorentz,
      E : E,
      a : a,
      KE_numerical : KE_numerical,
      KE_analytical : KE_analytical,
      tArray : tArray,
      xArray : xArray,
      vArray : vArray,
      EArray : EArray,
      lorentzArray : lorentzArray,
      font : font,
      fontb : fontb,
      fonta : fonta,
      Speed : Speed,
      Position : Position,
      Energy : Energy
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.Efield != "undefined") Efield = json.Efield;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.elaspedtime != "undefined") elaspedtime = json.elaspedtime;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.lorentz != "undefined") lorentz = json.lorentz;
    if(typeof json.E != "undefined") E = json.E;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.KE_numerical != "undefined") KE_numerical = json.KE_numerical;
    if(typeof json.KE_analytical != "undefined") KE_analytical = json.KE_analytical;
    if(typeof json.tArray != "undefined") tArray = json.tArray;
    if(typeof json.xArray != "undefined") xArray = json.xArray;
    if(typeof json.vArray != "undefined") vArray = json.vArray;
    if(typeof json.EArray != "undefined") EArray = json.EArray;
    if(typeof json.lorentzArray != "undefined") lorentzArray = json.lorentzArray;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.Speed != "undefined") Speed = json.Speed;
    if(typeof json.Position != "undefined") Position = json.Position;
    if(typeof json.Energy != "undefined") Energy = json.Energy;
  };

  _model._inputAndPublicParameters = ["c",  "m",  "Efield",  "dt",  "elaspedtime",  "x",  "v",  "t",  "lorentz",  "E",  "a",  "KE_numerical",  "KE_analytical",  "tArray",  "xArray",  "vArray",  "EArray",  "lorentzArray",  "font",  "fontb",  "fonta",  "Speed",  "Position",  "Energy"]; 

  _model._outputAndPublicParameters = ["c",  "m",  "Efield",  "dt",  "elaspedtime",  "x",  "v",  "t",  "lorentz",  "E",  "a",  "KE_numerical",  "KE_analytical",  "tArray",  "xArray",  "vArray",  "EArray",  "lorentzArray",  "font",  "fontb",  "fonta",  "Speed",  "Position",  "Energy"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Reset Arrays"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["loop"] = true;
    __pagesEnabled["Exercise 7"] = true;
  });

  _model.addToReset(function() {
    c = 2.998e8; // EjsS Model.Variables.Input.c
    m = 0.938e9; // EjsS Model.Variables.Input.m
    Efield = 5e6; // EjsS Model.Variables.Input.Efield
    dt = 1e-8; // EjsS Model.Variables.Input.dt
  });

  _model.addToReset(function() {
    elaspedtime = 0; // EjsS Model.Variables.Variables.elaspedtime
    x = 0; // EjsS Model.Variables.Variables.x
    v = 0; // EjsS Model.Variables.Variables.v
    t = 0; // EjsS Model.Variables.Variables.t
    lorentz = 0; // EjsS Model.Variables.Variables.lorentz
    E = 0; // EjsS Model.Variables.Variables.E
    a = 0; // EjsS Model.Variables.Variables.a
    KE_numerical = 0; // EjsS Model.Variables.Variables.KE_numerical
    KE_analytical = 0; // EjsS Model.Variables.Variables.KE_analytical
  });

  _model.addToReset(function() {
    tArray = 0; // EjsS Model.Variables.Array.tArray
    xArray = 0; // EjsS Model.Variables.Array.xArray
    vArray = 0; // EjsS Model.Variables.Array.vArray
    EArray = 0; // EjsS Model.Variables.Array.EArray
    lorentzArray = 0; // EjsS Model.Variables.Array.lorentzArray
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.Graph and Display.font
    fontb = "normal bold 2vw"; // EjsS Model.Variables.Graph and Display.fontb
    fonta = "normal normal 1vw"; // EjsS Model.Variables.Graph and Display.fonta
    Speed = true; // EjsS Model.Variables.Graph and Display.Speed
    Position = false; // EjsS Model.Variables.Graph and Display.Position
    Energy = false; // EjsS Model.Variables.Graph and Display.Energy
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(1);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.ToggleFullScreen:1
  // does not work for iOS   // > CustomCode.ToggleFullScreen:2
  /*jslint browser:true */  // > CustomCode.ToggleFullScreen:3
  function toggleFullScreen() {  // > CustomCode.ToggleFullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.ToggleFullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.ToggleFullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.ToggleFullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.ToggleFullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.ToggleFullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.ToggleFullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.ToggleFullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.ToggleFullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.ToggleFullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.ToggleFullScreen:14
      }  // > CustomCode.ToggleFullScreen:15
    } else {  // > CustomCode.ToggleFullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.ToggleFullScreen:17
        document.exitFullscreen();  // > CustomCode.ToggleFullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.ToggleFullScreen:19
        document.msExitFullscreen();  // > CustomCode.ToggleFullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.ToggleFullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.ToggleFullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.ToggleFullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.ToggleFullScreen:24
      }  // > CustomCode.ToggleFullScreen:25
    }  // > CustomCode.ToggleFullScreen:26
  }  // > CustomCode.ToggleFullScreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Reset Arrays"]) return;
        //Resets Array  // > Initialization.Reset Arrays:1
        tArray = [];  // > Initialization.Reset Arrays:2
        xArray = [];  // > Initialization.Reset Arrays:3
        vArray = [];  // > Initialization.Reset Arrays:4
        EArray = [];  // > Initialization.Reset Arrays:5
        lorentzArray = [];   // > Initialization.Reset Arrays:6
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    x = 0;     // Position in meters  // > Initialization.Init Page:1
    v = 0;    // Velocity in meters/second  // > Initialization.Init Page:2
    t = 0;    // Time in seconds  // > Initialization.Init Page:3
    lorentz = 1/Math.sqrt(1-(v*v)/(c*c));   // > Initialization.Init Page:4
    E = lorentz * m;  // > Initialization.Init Page:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["loop"]) return;
    var startTime = new Date();//start  // > Initialization.loop:1
    while (t < 1e-5){  // > Initialization.loop:2
        // The dynamics:  // > Initialization.loop:3
        lorentz =1/Math.sqrt(1 - v**2 / c**2);  // > Initialization.loop:4
        a = Efield*c**2/(lorentz**3*m);  // > Initialization.loop:5
        t = t + dt;  // > Initialization.loop:6
        x = x + v*dt;  // > Initialization.loop:7
        v = v + a*dt;  // > Initialization.loop:8
        E = lorentz * m;  // > Initialization.loop:9
        // Append the new values onto arrays  // > Initialization.loop:10
        tArray.push(t);  // > Initialization.loop:11
        xArray.push(x);  // > Initialization.loop:12
        vArray.push(v);  // > Initialization.loop:13
        EArray.push(E);  // > Initialization.loop:14
        lorentzArray.push(lorentz);  // > Initialization.loop:15
        }  // > Initialization.loop:16
      var endTime = new Date();  // > Initialization.loop:17
      var timeDiff = endTime - startTime; //in ms  // > Initialization.loop:18
      // strip the ms  // > Initialization.loop:19
      timeDiff /= 1000;  // > Initialization.loop:20
      // get seconds   // > Initialization.loop:21
      var seconds = timeDiff;  // > Initialization.loop:22
      elaspedtime=seconds;//elapsed time  // > Initialization.loop:23
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Exercise 7"]) return;
    // The following lines are added for Exercise 7  // > Initialization.Exercise 7:1
    KE_numerical = lorentz * m - m;  // > Initialization.Exercise 7:2
    KE_analytical = Efield*x;  // > Initialization.Exercise 7:3
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PICUP_Complete_RelativisticDynamics_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.Speed.linkProperty("Checked",  function() { return Speed; }, function(_v) { Speed = _v; } ); // HtmlView Page linking property 'Checked' for element 'Speed'
          _view.Speed.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'Speed'
          _view.Speed.linkProperty("Disabled",  function() { return !Position&&!Energy; } ); // HtmlView Page linking property 'Disabled' for element 'Speed'
          _view.Position.linkProperty("Checked",  function() { return Position; }, function(_v) { Position = _v; } ); // HtmlView Page linking property 'Checked' for element 'Position'
          _view.Position.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'Position'
          _view.Position.linkProperty("Disabled",  function() { return !Speed&&!Energy; } ); // HtmlView Page linking property 'Disabled' for element 'Position'
          _view.Energy.linkProperty("Checked",  function() { return Energy; }, function(_v) { Energy = _v; } ); // HtmlView Page linking property 'Checked' for element 'Energy'
          _view.Energy.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'Energy'
          _view.Energy.linkProperty("Disabled",  function() { return !Speed&&!Position; } ); // HtmlView Page linking property 'Disabled' for element 'Energy'
          _view.fieldc.linkProperty("Value",  function() { return c; }, function(_v) { c = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldc'
          _view.fieldc.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldc'
          _view.fieldc.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldc'
          _view.fieldm.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldm'
          _view.fieldm.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldm'
          _view.fieldm.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldm'
          _view.fielde.linkProperty("Value",  function() { return Efield; }, function(_v) { Efield = _v; } ); // HtmlView Page linking property 'Value' for element 'fielde'
          _view.fielde.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fielde'
          _view.fielde.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fielde'
          _view.dt.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'dt'
          _view.fielddt.linkProperty("Value",  function() { return dt; }, function(_v) { dt = _v; } ); // HtmlView Page linking property 'Value' for element 'fielddt'
          _view.fielddt.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fielddt'
          _view.fielddt.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fielddt'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.TimeVsSpeed.linkProperty("Width",  function() { return !Speed?"0%":Position&&Energy?"33%":Position||Energy?"50%":"100%"; } ); // HtmlView Page linking property 'Width' for element 'TimeVsSpeed'
          _view.TimeVsSpeed.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'TimeVsSpeed'
          _view.TimeVsSpeed.linkProperty("XTickStep",  function() { return 1e-6; } ); // HtmlView Page linking property 'XTickStep' for element 'TimeVsSpeed'
          _view.TimeVsSpeed.linkProperty("YTickStep",  function() { return 1e8; } ); // HtmlView Page linking property 'YTickStep' for element 'TimeVsSpeed'
          _view.TimeVsSpeed.linkProperty("TLMessage",  function() { return "Numerical KE: "+KE_numerical+"\nAnalytical KE: "+KE_analytical+"\nPercent Difference: "+(100*Math.abs(KE_numerical-KE_analytical)/KE_analytical); } ); // HtmlView Page linking property 'TLMessage' for element 'TimeVsSpeed'
          _view.TimeVsSpeed.linkProperty("BRMessage",  function() { return "Elapsed Time = "+elaspedtime.toFixed(7)+"s"; } ); // HtmlView Page linking property 'BRMessage' for element 'TimeVsSpeed'
          _view.TimeVsSpeed.linkProperty("Display",  function() { return Speed?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'TimeVsSpeed'
          _view.plot2.linkProperty("Maximum",  function() { return tArray.length; } ); // HtmlView Page linking property 'Maximum' for element 'plot2'
          _view.plot2.linkProperty("InputX",  function() { return tArray; }, function(_v) { tArray = _v; } ); // HtmlView Page linking property 'InputX' for element 'plot2'
          _view.plot2.linkProperty("InputY",  function() { return vArray; }, function(_v) { vArray = _v; } ); // HtmlView Page linking property 'InputY' for element 'plot2'
          _view.TimeVsPosition.linkProperty("Width",  function() { return !Position?"0%":Speed&&Energy?"33%":Speed||Energy?"50%":"100%"; } ); // HtmlView Page linking property 'Width' for element 'TimeVsPosition'
          _view.TimeVsPosition.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'TimeVsPosition'
          _view.TimeVsPosition.linkProperty("XTickStep",  function() { return 1e-6; } ); // HtmlView Page linking property 'XTickStep' for element 'TimeVsPosition'
          _view.TimeVsPosition.linkProperty("TLMessage",  function() { return "Numerical KE: "+KE_numerical+"\nAnalytical KE: "+KE_analytical+"\nPercent Difference: "+(100*Math.abs(KE_numerical-KE_analytical)/KE_analytical); } ); // HtmlView Page linking property 'TLMessage' for element 'TimeVsPosition'
          _view.TimeVsPosition.linkProperty("BRMessage",  function() { return "Elapsed Time = "+elaspedtime.toFixed(7)+"s"; } ); // HtmlView Page linking property 'BRMessage' for element 'TimeVsPosition'
          _view.TimeVsPosition.linkProperty("Display",  function() { return Position?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'TimeVsPosition'
          _view.plot.linkProperty("Maximum",  function() { return tArray.length; } ); // HtmlView Page linking property 'Maximum' for element 'plot'
          _view.plot.linkProperty("InputX",  function() { return tArray; }, function(_v) { tArray = _v; } ); // HtmlView Page linking property 'InputX' for element 'plot'
          _view.plot.linkProperty("InputY",  function() { return xArray; }, function(_v) { xArray = _v; } ); // HtmlView Page linking property 'InputY' for element 'plot'
          _view.TimeVsEnergy.linkProperty("Width",  function() { return !Energy?"0%":Speed&&Position?"33%":Speed||Position?"50%":"100%"; } ); // HtmlView Page linking property 'Width' for element 'TimeVsEnergy'
          _view.TimeVsEnergy.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'TimeVsEnergy'
          _view.TimeVsEnergy.linkProperty("XTickStep",  function() { return 1e-6; } ); // HtmlView Page linking property 'XTickStep' for element 'TimeVsEnergy'
          _view.TimeVsEnergy.linkProperty("YTickStep",  function() { return 1e9; } ); // HtmlView Page linking property 'YTickStep' for element 'TimeVsEnergy'
          _view.TimeVsEnergy.linkProperty("TLMessage",  function() { return "Numerical KE: "+KE_numerical+"\nAnalytical KE: "+KE_analytical+"\nPercent Difference: "+(100*Math.abs(KE_numerical-KE_analytical)/KE_analytical); } ); // HtmlView Page linking property 'TLMessage' for element 'TimeVsEnergy'
          _view.TimeVsEnergy.linkProperty("BRMessage",  function() { return "Elapsed Time = "+elaspedtime.toFixed(7)+"s"; } ); // HtmlView Page linking property 'BRMessage' for element 'TimeVsEnergy'
          _view.TimeVsEnergy.linkProperty("Display",  function() { return Energy?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'TimeVsEnergy'
          _view.plot3.linkProperty("Maximum",  function() { return tArray.length; } ); // HtmlView Page linking property 'Maximum' for element 'plot3'
          _view.plot3.linkProperty("InputX",  function() { return tArray; }, function(_v) { tArray = _v; } ); // HtmlView Page linking property 'InputX' for element 'plot3'
          _view.plot3.linkProperty("InputY",  function() { return EArray; }, function(_v) { EArray = _v; } ); // HtmlView Page linking property 'InputY' for element 'plot3'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(1);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PICUP_Complete_RelativisticDynamics_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PICUP_Complete_RelativisticDynamics_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./PICUP_Complete_RelativisticDynamics_frem_Intro_1.html');
  _view._addDescriptionPage('Exercise 1','./PICUP_Complete_RelativisticDynamics_frem_Intro_2.html');
  _view._addDescriptionPage('Exercise 2','./PICUP_Complete_RelativisticDynamics_frem_Intro_3.html');
  _view._addDescriptionPage('Exercise 3','./PICUP_Complete_RelativisticDynamics_frem_Intro_4.html');
  _view._addDescriptionPage('Exercise 4','./PICUP_Complete_RelativisticDynamics_frem_Intro_5.html');
  _view._addDescriptionPage('Exercise 5','./PICUP_Complete_RelativisticDynamics_frem_Intro_6.html');
  _view._addDescriptionPage('Exercise 6','./PICUP_Complete_RelativisticDynamics_frem_Intro_7.html');
  _view._addDescriptionPage('Exercise 7','./PICUP_Complete_RelativisticDynamics_frem_Intro_8.html');
  _view._addDescriptionPage('Exercise 8','./PICUP_Complete_RelativisticDynamics_frem_Intro_9.html');
  _view._addDescriptionPage('Exercise 9','./PICUP_Complete_RelativisticDynamics_frem_Intro_10.html');
  _view._addDescriptionPage('Complete_RelativisticDynamics.py','./PICUP_Complete_RelativisticDynamics_frem_Intro_11.html');

  return _view;
} // end of main function

function PICUP_Complete_RelativisticDynamics_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"Speed", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Speed'
      .setProperty("Background","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Speed'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Speed'
      .setProperty("Text","t vs v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Speed'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"Position", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Position'
      .setProperty("Background","orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Position'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Position'
      .setProperty("Text","t vs x") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Position'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"Energy", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Energy'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Energy'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Energy'
      .setProperty("Text","E vs t") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Energy'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"c", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'c'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'c'
      .setProperty("Tooltip","Speed of light in m/s") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'c'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'c'
      .setProperty("Text","c=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'c'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldc", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldc'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldc'
      .setProperty("Format","0.000e00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldc'
      .setProperty("Tooltip","Speed of light in m/s") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldc'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldc'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"m", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'm'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'm'
      .setProperty("Tooltip","Mass in eV/c^2 ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'm'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'm'
      .setProperty("Text","m=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'm'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldm", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldm'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldm'
      .setProperty("Format","0.000e00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldm'
      .setProperty("Tooltip","Mass in eV/c^2") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldm'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldm'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"efield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'efield'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'efield'
      .setProperty("Tooltip","Electric field in Volts per meter") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'efield'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'efield'
      .setProperty("Text","Efield=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'efield'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fielde", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fielde'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fielde'
      .setProperty("Format","0e0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fielde'
      .setProperty("Tooltip","Electric field in Volts per meter") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fielde'
      .setProperty("Foreground","gray") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fielde'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"dt", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dt'
      .setProperty("Background","Pink") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'dt'
      .setProperty("Tooltip","Time STEP in seconds") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'dt'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'dt'
      .setProperty("Text","dt=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dt'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fielddt", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fielddt'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fielddt'
      .setProperty("Format","0.0e00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fielddt'
      .setProperty("Foreground","pink") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fielddt'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"TimeVsSpeed", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'TimeVsSpeed'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'TimeVsSpeed'
      .setProperty("Gutters",[70,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'TimeVsSpeed'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'TimeVsSpeed'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'TimeVsSpeed'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'TimeVsSpeed'
      .setProperty("MaximumY",3.1e8) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'TimeVsSpeed'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'TimeVsSpeed'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'TimeVsSpeed'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'TimeVsSpeed'
      .setProperty("TitleY","Speed (m/s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'TimeVsSpeed'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'TimeVsSpeed'
      .setProperty("TitleX","Time (sec)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'TimeVsSpeed'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'TimeVsSpeed'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'TimeVsSpeed'
      .setProperty("XScalePrecision",6) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'TimeVsSpeed'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"plot2", _view.TimeVsSpeed) // EJsS HtmlView.HtmlView Page: declaration of element 'plot2'
      .setProperty("LineColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'plot2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'plot2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plot2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"TimeVsPosition", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'TimeVsPosition'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'TimeVsPosition'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'TimeVsPosition'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'TimeVsPosition'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'TimeVsPosition'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'TimeVsPosition'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'TimeVsPosition'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'TimeVsPosition'
      .setProperty("TitleY","Position (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'TimeVsPosition'
      .setProperty("YTickStep",200) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'TimeVsPosition'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'TimeVsPosition'
      .setProperty("TitleX","Time (sec)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'TimeVsPosition'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'TimeVsPosition'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'TimeVsPosition'
      .setProperty("XScalePrecision",6) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'TimeVsPosition'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"plot", _view.TimeVsPosition) // EJsS HtmlView.HtmlView Page: declaration of element 'plot'
      .setProperty("LineColor","orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'plot'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'plot'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plot'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"TimeVsEnergy", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'TimeVsEnergy'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'TimeVsEnergy'
      .setProperty("Gutters",[70,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'TimeVsEnergy'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'TimeVsEnergy'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'TimeVsEnergy'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'TimeVsEnergy'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'TimeVsEnergy'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'TimeVsEnergy'
      .setProperty("TitleY","Energy (eV)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'TimeVsEnergy'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'TimeVsEnergy'
      .setProperty("TitleX","Time (sec)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'TimeVsEnergy'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'TimeVsEnergy'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'TimeVsEnergy'
      .setProperty("XScalePrecision",6) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'TimeVsEnergy'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"plot3", _view.TimeVsEnergy) // EJsS HtmlView.HtmlView Page: declaration of element 'plot3'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'plot3'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'plot3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plot3'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Relativistic Dynamics in 1D with a constant force<br />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics/01authorlookang50x50.png" />
 Fremont Teng; Loo Kang Wee; based on code by Larry Engelhardt
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng; Loo Kang Wee; based on code by Larry Engelhardt.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PICUP_Complete_RelativisticDynamics_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
