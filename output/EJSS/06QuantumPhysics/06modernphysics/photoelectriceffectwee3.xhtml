<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Photoelectric Effect Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function photoelectriceffectwee3(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var range; // EjsS Model.Variables.coordinate.range
  var xmin; // EjsS Model.Variables.coordinate.xmin
  var xmax; // EjsS Model.Variables.coordinate.xmax
  var ymin; // EjsS Model.Variables.coordinate.ymin
  var ymax; // EjsS Model.Variables.coordinate.ymax
  var t; // EjsS Model.Variables.coordinate.t
  var dt; // EjsS Model.Variables.coordinate.dt
  var size; // EjsS Model.Variables.coordinate.size
  var stroke; // EjsS Model.Variables.coordinate.stroke
  var w; // EjsS Model.Variables.coordinate.w
  var w2; // EjsS Model.Variables.coordinate.w2
  var h1; // EjsS Model.Variables.coordinate.h1
  var h2; // EjsS Model.Variables.coordinate.h2
  var h; // EjsS Model.Variables.coordinate.h
  var x1; // EjsS Model.Variables.coordinate.x1
  var xl; // EjsS Model.Variables.coordinate.xl
  var yl; // EjsS Model.Variables.coordinate.yl
  var xlsize; // EjsS Model.Variables.coordinate.xlsize
  var ylsize; // EjsS Model.Variables.coordinate.ylsize
  var x2; // EjsS Model.Variables.coordinate.x2
  var xr; // EjsS Model.Variables.coordinate.xr
  var xrsize; // EjsS Model.Variables.coordinate.xrsize
  var zero; // EjsS Model.Variables.coordinate.zero
  var clr; // EjsS Model.Variables.coordinate.clr
  var y1; // EjsS Model.Variables.coordinate.y1
  var linkmin; // EjsS Model.Variables.coordinate.linkmin
  var pi; // EjsS Model.Variables.coordinate.pi
  var psize; // EjsS Model.Variables.coordinate.psize

  var n; // EjsS Model.Variables.basic.n
  var x; // EjsS Model.Variables.basic.x
  var y; // EjsS Model.Variables.basic.y
  var vx; // EjsS Model.Variables.basic.vx
  var vy; // EjsS Model.Variables.basic.vy
  var textelectrons; // EjsS Model.Variables.basic.textelectrons
  var v; // EjsS Model.Variables.basic.v
  var q; // EjsS Model.Variables.basic.q
  var theta; // EjsS Model.Variables.basic.theta
  var vxscale; // EjsS Model.Variables.basic.vxscale
  var moving; // EjsS Model.Variables.basic.moving
  var showparticlesvisualonoff; // EjsS Model.Variables.basic.showparticlesvisualonoff
  var show; // EjsS Model.Variables.basic.show
  var showe; // EjsS Model.Variables.basic.showe
  var showv; // EjsS Model.Variables.basic.showv
  var Vmax; // EjsS Model.Variables.basic.Vmax
  var work; // EjsS Model.Variables.basic.work
  var emit; // EjsS Model.Variables.basic.emit
  var V; // EjsS Model.Variables.basic.V
  var Vdrag; // EjsS Model.Variables.basic.Vdrag
  var W; // EjsS Model.Variables.basic.W
  var metalstoretext; // EjsS Model.Variables.basic.metalstoretext
  var E; // EjsS Model.Variables.basic.E
  var d; // EjsS Model.Variables.basic.d
  var dx; // EjsS Model.Variables.basic.dx
  var dy; // EjsS Model.Variables.basic.dy
  var ax; // EjsS Model.Variables.basic.ax
  var m; // EjsS Model.Variables.basic.m
  var count; // EjsS Model.Variables.basic.count
  var scale; // EjsS Model.Variables.basic.scale
  var tcount; // EjsS Model.Variables.basic.tcount
  var T; // EjsS Model.Variables.basic.T
  var tmode; // EjsS Model.Variables.basic.tmode
  var Icount; // EjsS Model.Variables.basic.Icount
  var I; // EjsS Model.Variables.basic.I
  var Is; // EjsS Model.Variables.basic.Is
  var record; // EjsS Model.Variables.basic.record
  var Iunit; // EjsS Model.Variables.basic.Iunit
  var Icst; // EjsS Model.Variables.basic.Icst
  var Iscale; // EjsS Model.Variables.basic.Iscale
  var Imax; // EjsS Model.Variables.basic.Imax
  var Icheck; // EjsS Model.Variables.basic.Icheck
  var Imeasurecount; // EjsS Model.Variables.basic.Imeasurecount
  var Ipts; // EjsS Model.Variables.basic.Ipts

  var l_play; // EjsS Model.Variables.language.l_play
  var l_pause; // EjsS Model.Variables.language.l_pause
  var l_reset; // EjsS Model.Variables.language.l_reset
  var l_init; // EjsS Model.Variables.language.l_init
  var label; // EjsS Model.Variables.language.label
  var l_step; // EjsS Model.Variables.language.l_step
  var l_v; // EjsS Model.Variables.language.l_v
  var l_t; // EjsS Model.Variables.language.l_t
  var l_photonenergy; // EjsS Model.Variables.language.l_photonenergy
  var l_intensity; // EjsS Model.Variables.language.l_intensity
  var l_voltage; // EjsS Model.Variables.language.l_voltage
  var l_workfunction; // EjsS Model.Variables.language.l_workfunction
  var l_current; // EjsS Model.Variables.language.l_current
  var l_showv; // EjsS Model.Variables.language.l_showv
  var l_showE; // EjsS Model.Variables.language.l_showE
  var l_auto; // EjsS Model.Variables.language.l_auto
  var l_title; // EjsS Model.Variables.language.l_title
  var l_x; // EjsS Model.Variables.language.l_x
  var l_y; // EjsS Model.Variables.language.l_y
  var l_debug; // EjsS Model.Variables.language.l_debug

  var efield; // EjsS Model.Variables.view.efield
  var sizep; // EjsS Model.Variables.view.sizep
  var xp; // EjsS Model.Variables.view.xp
  var yp; // EjsS Model.Variables.view.yp
  var vp; // EjsS Model.Variables.view.vp
  var pv; // EjsS Model.Variables.view.pv
  var id; // EjsS Model.Variables.view.id
  var dragIW; // EjsS Model.Variables.view.dragIW
  var showb; // EjsS Model.Variables.view.showb
  var control; // EjsS Model.Variables.view.control
  var auto; // EjsS Model.Variables.view.auto
  var dv; // EjsS Model.Variables.view.dv
  var showV; // EjsS Model.Variables.view.showV
  var autocount; // EjsS Model.Variables.view.autocount
  var npfactor; // EjsS Model.Variables.view.npfactor
  var ecount; // EjsS Model.Variables.view.ecount
  var photoncount; // EjsS Model.Variables.view.photoncount
  var lightIntensity; // EjsS Model.Variables.view.lightIntensity
  var showE; // EjsS Model.Variables.view.showE
  var photoncolor; // EjsS Model.Variables.view.photoncolor
  var trans; // EjsS Model.Variables.view.trans
  var mColour; // EjsS Model.Variables.view.mColour

  var scount; // EjsS Model.Variables.saveImage.scount
  var key; // EjsS Model.Variables.saveImage.key

  var text; // EjsS Model.Variables.layout.text
  var textbr; // EjsS Model.Variables.layout.textbr
  var graph; // EjsS Model.Variables.layout.graph
  var world; // EjsS Model.Variables.layout.world
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var Height1; // EjsS Model.Variables.layout.Height1
  var Widthv; // EjsS Model.Variables.layout.Widthv
  var Widtha; // EjsS Model.Variables.layout.Widtha
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var Height2; // EjsS Model.Variables.layout.Height2
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Android; // EjsS Model.Variables.layout.Android

  var nVectors; // EjsS Model.Variables.efield.nVectors
  var nVectorsSq; // EjsS Model.Variables.efield.nVectorsSq
  var vectorIndex; // EjsS Model.Variables.efield.vectorIndex
  var posx; // EjsS Model.Variables.efield.posx
  var posy; // EjsS Model.Variables.efield.posy
  var Fieldx; // EjsS Model.Variables.efield.Fieldx
  var Fieldy; // EjsS Model.Variables.efield.Fieldy
  var Vectorx; // EjsS Model.Variables.efield.Vectorx
  var Vectory; // EjsS Model.Variables.efield.Vectory

  var fontplus; // EjsS Model.Variables.signs.fontplus
  var posxleft; // EjsS Model.Variables.signs.posxleft
  var posyleft; // EjsS Model.Variables.signs.posyleft
  var posxright; // EjsS Model.Variables.signs.posxright
  var posyright; // EjsS Model.Variables.signs.posyright

  var lambda; // EjsS Model.Variables.wavelength.lambda
  var lambdadrag; // EjsS Model.Variables.wavelength.lambdadrag
  var freq; // EjsS Model.Variables.wavelength.freq
  var freqstopping; // EjsS Model.Variables.wavelength.freqstopping
  var showphoton; // EjsS Model.Variables.wavelength.showphoton
  var showlight; // EjsS Model.Variables.wavelength.showlight
  var polPts; // EjsS Model.Variables.wavelength.polPts
  var currenttext; // EjsS Model.Variables.wavelength.currenttext
  var vr; // EjsS Model.Variables.wavelength.vr
  var vg; // EjsS Model.Variables.wavelength.vg
  var vb; // EjsS Model.Variables.wavelength.vb
  var vcolor; // EjsS Model.Variables.wavelength.vcolor
  var vcolor2; // EjsS Model.Variables.wavelength.vcolor2
  var Temperature; // EjsS Model.Variables.wavelength.Temperature
  var temp; // EjsS Model.Variables.wavelength.temp

  var omega; // EjsS Model.Variables.dropdownmneu.omega
  var selected; // EjsS Model.Variables.dropdownmneu.selected
  var selectedI; // EjsS Model.Variables.dropdownmneu.selectedI
  var selected2; // EjsS Model.Variables.dropdownmneu.selected2
  var selected3; // EjsS Model.Variables.dropdownmneu.selected3
  var selectedview; // EjsS Model.Variables.dropdownmneu.selectedview

  var slider; // EjsS Model.Variables.slider.slider
  var wbuttonX; // EjsS Model.Variables.slider.wbuttonX
  var wbutton2X; // EjsS Model.Variables.slider.wbutton2X
  var wbuttonSizeY; // EjsS Model.Variables.slider.wbuttonSizeY
  var wbutton3X; // EjsS Model.Variables.slider.wbutton3X
  var wbuttonSizeX; // EjsS Model.Variables.slider.wbuttonSizeX
  var wbutton2SizeX; // EjsS Model.Variables.slider.wbutton2SizeX
  var wbuttonmax; // EjsS Model.Variables.slider.wbuttonmax
  var wbuttonmin; // EjsS Model.Variables.slider.wbuttonmin
  var ibuttonX; // EjsS Model.Variables.slider.ibuttonX
  var ibutton2X; // EjsS Model.Variables.slider.ibutton2X
  var ibuttonSizeY; // EjsS Model.Variables.slider.ibuttonSizeY
  var ibutton3X; // EjsS Model.Variables.slider.ibutton3X
  var ibuttonSizeX; // EjsS Model.Variables.slider.ibuttonSizeX
  var ibutton2SizeX; // EjsS Model.Variables.slider.ibutton2SizeX
  var ibuttonmax; // EjsS Model.Variables.slider.ibuttonmax
  var ibuttonmin; // EjsS Model.Variables.slider.ibuttonmin
  var mbuttonY; // EjsS Model.Variables.slider.mbuttonY
  var mbutton2Y; // EjsS Model.Variables.slider.mbutton2Y
  var mbuttonSizeY; // EjsS Model.Variables.slider.mbuttonSizeY
  var mbutton3Y; // EjsS Model.Variables.slider.mbutton3Y
  var mbuttonSizeX; // EjsS Model.Variables.slider.mbuttonSizeX
  var mbutton2SizeY; // EjsS Model.Variables.slider.mbutton2SizeY
  var mbuttonmax; // EjsS Model.Variables.slider.mbuttonmax
  var mbuttonmin; // EjsS Model.Variables.slider.mbuttonmin
  var vbuttonX; // EjsS Model.Variables.slider.vbuttonX
  var vbutton2X; // EjsS Model.Variables.slider.vbutton2X
  var vbuttonSizeY; // EjsS Model.Variables.slider.vbuttonSizeY
  var vbutton3X; // EjsS Model.Variables.slider.vbutton3X
  var vbuttonSizeX; // EjsS Model.Variables.slider.vbuttonSizeX
  var vbutton2SizeX; // EjsS Model.Variables.slider.vbutton2SizeX
  var vbuttonmax; // EjsS Model.Variables.slider.vbuttonmax
  var vbuttonmin; // EjsS Model.Variables.slider.vbuttonmin
  var varMY; // EjsS Model.Variables.slider.varMY
  var varMdist; // EjsS Model.Variables.slider.varMdist

  var showw; // EjsS Model.Variables.controlshow.showw
  var showi; // EjsS Model.Variables.controlshow.showi
  var showm; // EjsS Model.Variables.controlshow.showm
  var showl; // EjsS Model.Variables.controlshow.showl
  var showBar; // EjsS Model.Variables.controlshow.showBar
  var showvarm; // EjsS Model.Variables.controlshow.showvarm
  var showvolt; // EjsS Model.Variables.controlshow.showvolt

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      t : t,
      dt : dt,
      size : size,
      stroke : stroke,
      w : w,
      w2 : w2,
      h1 : h1,
      h2 : h2,
      h : h,
      x1 : x1,
      xl : xl,
      yl : yl,
      xlsize : xlsize,
      ylsize : ylsize,
      x2 : x2,
      xr : xr,
      xrsize : xrsize,
      zero : zero,
      clr : clr,
      y1 : y1,
      linkmin : linkmin,
      pi : pi,
      psize : psize,
      n : n,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      textelectrons : textelectrons,
      v : v,
      q : q,
      theta : theta,
      vxscale : vxscale,
      moving : moving,
      showparticlesvisualonoff : showparticlesvisualonoff,
      show : show,
      showe : showe,
      showv : showv,
      Vmax : Vmax,
      work : work,
      emit : emit,
      V : V,
      Vdrag : Vdrag,
      W : W,
      metalstoretext : metalstoretext,
      E : E,
      d : d,
      dx : dx,
      dy : dy,
      ax : ax,
      m : m,
      count : count,
      scale : scale,
      tcount : tcount,
      T : T,
      tmode : tmode,
      Icount : Icount,
      I : I,
      Is : Is,
      record : record,
      Iunit : Iunit,
      Icst : Icst,
      Iscale : Iscale,
      Imax : Imax,
      Icheck : Icheck,
      Imeasurecount : Imeasurecount,
      Ipts : Ipts,
      l_play : l_play,
      l_pause : l_pause,
      l_reset : l_reset,
      l_init : l_init,
      label : label,
      l_step : l_step,
      l_v : l_v,
      l_t : l_t,
      l_photonenergy : l_photonenergy,
      l_intensity : l_intensity,
      l_voltage : l_voltage,
      l_workfunction : l_workfunction,
      l_current : l_current,
      l_showv : l_showv,
      l_showE : l_showE,
      l_auto : l_auto,
      l_title : l_title,
      l_x : l_x,
      l_y : l_y,
      l_debug : l_debug,
      efield : efield,
      sizep : sizep,
      xp : xp,
      yp : yp,
      vp : vp,
      pv : pv,
      id : id,
      dragIW : dragIW,
      showb : showb,
      control : control,
      auto : auto,
      dv : dv,
      showV : showV,
      autocount : autocount,
      npfactor : npfactor,
      ecount : ecount,
      photoncount : photoncount,
      lightIntensity : lightIntensity,
      showE : showE,
      photoncolor : photoncolor,
      trans : trans,
      mColour : mColour,
      scount : scount,
      key : key,
      text : text,
      textbr : textbr,
      graph : graph,
      world : world,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      Height1 : Height1,
      Widthv : Widthv,
      Widtha : Widtha,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      Height2 : Height2,
      disabledworld : disabledworld,
      disabled : disabled,
      isAndroid : isAndroid,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Android : Android,
      nVectors : nVectors,
      nVectorsSq : nVectorsSq,
      vectorIndex : vectorIndex,
      posx : posx,
      posy : posy,
      Fieldx : Fieldx,
      Fieldy : Fieldy,
      Vectorx : Vectorx,
      Vectory : Vectory,
      fontplus : fontplus,
      posxleft : posxleft,
      posyleft : posyleft,
      posxright : posxright,
      posyright : posyright,
      lambda : lambda,
      lambdadrag : lambdadrag,
      freq : freq,
      freqstopping : freqstopping,
      showphoton : showphoton,
      showlight : showlight,
      polPts : polPts,
      currenttext : currenttext,
      vr : vr,
      vg : vg,
      vb : vb,
      vcolor : vcolor,
      vcolor2 : vcolor2,
      Temperature : Temperature,
      temp : temp,
      omega : omega,
      selected : selected,
      selectedI : selectedI,
      selected2 : selected2,
      selected3 : selected3,
      selectedview : selectedview,
      slider : slider,
      wbuttonX : wbuttonX,
      wbutton2X : wbutton2X,
      wbuttonSizeY : wbuttonSizeY,
      wbutton3X : wbutton3X,
      wbuttonSizeX : wbuttonSizeX,
      wbutton2SizeX : wbutton2SizeX,
      wbuttonmax : wbuttonmax,
      wbuttonmin : wbuttonmin,
      ibuttonX : ibuttonX,
      ibutton2X : ibutton2X,
      ibuttonSizeY : ibuttonSizeY,
      ibutton3X : ibutton3X,
      ibuttonSizeX : ibuttonSizeX,
      ibutton2SizeX : ibutton2SizeX,
      ibuttonmax : ibuttonmax,
      ibuttonmin : ibuttonmin,
      mbuttonY : mbuttonY,
      mbutton2Y : mbutton2Y,
      mbuttonSizeY : mbuttonSizeY,
      mbutton3Y : mbutton3Y,
      mbuttonSizeX : mbuttonSizeX,
      mbutton2SizeY : mbutton2SizeY,
      mbuttonmax : mbuttonmax,
      mbuttonmin : mbuttonmin,
      vbuttonX : vbuttonX,
      vbutton2X : vbutton2X,
      vbuttonSizeY : vbuttonSizeY,
      vbutton3X : vbutton3X,
      vbuttonSizeX : vbuttonSizeX,
      vbutton2SizeX : vbutton2SizeX,
      vbuttonmax : vbuttonmax,
      vbuttonmin : vbuttonmin,
      varMY : varMY,
      varMdist : varMdist,
      showw : showw,
      showi : showi,
      showm : showm,
      showl : showl,
      showBar : showBar,
      showvarm : showvarm,
      showvolt : showvolt
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.w2 != "undefined") w2 = json.w2;
    if(typeof json.h1 != "undefined") h1 = json.h1;
    if(typeof json.h2 != "undefined") h2 = json.h2;
    if(typeof json.h != "undefined") h = json.h;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.xl != "undefined") xl = json.xl;
    if(typeof json.yl != "undefined") yl = json.yl;
    if(typeof json.xlsize != "undefined") xlsize = json.xlsize;
    if(typeof json.ylsize != "undefined") ylsize = json.ylsize;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.xr != "undefined") xr = json.xr;
    if(typeof json.xrsize != "undefined") xrsize = json.xrsize;
    if(typeof json.zero != "undefined") zero = json.zero;
    if(typeof json.clr != "undefined") clr = json.clr;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.linkmin != "undefined") linkmin = json.linkmin;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.psize != "undefined") psize = json.psize;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.textelectrons != "undefined") textelectrons = json.textelectrons;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.vxscale != "undefined") vxscale = json.vxscale;
    if(typeof json.moving != "undefined") moving = json.moving;
    if(typeof json.showparticlesvisualonoff != "undefined") showparticlesvisualonoff = json.showparticlesvisualonoff;
    if(typeof json.show != "undefined") show = json.show;
    if(typeof json.showe != "undefined") showe = json.showe;
    if(typeof json.showv != "undefined") showv = json.showv;
    if(typeof json.Vmax != "undefined") Vmax = json.Vmax;
    if(typeof json.work != "undefined") work = json.work;
    if(typeof json.emit != "undefined") emit = json.emit;
    if(typeof json.V != "undefined") V = json.V;
    if(typeof json.Vdrag != "undefined") Vdrag = json.Vdrag;
    if(typeof json.W != "undefined") W = json.W;
    if(typeof json.metalstoretext != "undefined") metalstoretext = json.metalstoretext;
    if(typeof json.E != "undefined") E = json.E;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.dy != "undefined") dy = json.dy;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.count != "undefined") count = json.count;
    if(typeof json.scale != "undefined") scale = json.scale;
    if(typeof json.tcount != "undefined") tcount = json.tcount;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.tmode != "undefined") tmode = json.tmode;
    if(typeof json.Icount != "undefined") Icount = json.Icount;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.Is != "undefined") Is = json.Is;
    if(typeof json.record != "undefined") record = json.record;
    if(typeof json.Iunit != "undefined") Iunit = json.Iunit;
    if(typeof json.Icst != "undefined") Icst = json.Icst;
    if(typeof json.Iscale != "undefined") Iscale = json.Iscale;
    if(typeof json.Imax != "undefined") Imax = json.Imax;
    if(typeof json.Icheck != "undefined") Icheck = json.Icheck;
    if(typeof json.Imeasurecount != "undefined") Imeasurecount = json.Imeasurecount;
    if(typeof json.Ipts != "undefined") Ipts = json.Ipts;
    if(typeof json.l_play != "undefined") l_play = json.l_play;
    if(typeof json.l_pause != "undefined") l_pause = json.l_pause;
    if(typeof json.l_reset != "undefined") l_reset = json.l_reset;
    if(typeof json.l_init != "undefined") l_init = json.l_init;
    if(typeof json.label != "undefined") label = json.label;
    if(typeof json.l_step != "undefined") l_step = json.l_step;
    if(typeof json.l_v != "undefined") l_v = json.l_v;
    if(typeof json.l_t != "undefined") l_t = json.l_t;
    if(typeof json.l_photonenergy != "undefined") l_photonenergy = json.l_photonenergy;
    if(typeof json.l_intensity != "undefined") l_intensity = json.l_intensity;
    if(typeof json.l_voltage != "undefined") l_voltage = json.l_voltage;
    if(typeof json.l_workfunction != "undefined") l_workfunction = json.l_workfunction;
    if(typeof json.l_current != "undefined") l_current = json.l_current;
    if(typeof json.l_showv != "undefined") l_showv = json.l_showv;
    if(typeof json.l_showE != "undefined") l_showE = json.l_showE;
    if(typeof json.l_auto != "undefined") l_auto = json.l_auto;
    if(typeof json.l_title != "undefined") l_title = json.l_title;
    if(typeof json.l_x != "undefined") l_x = json.l_x;
    if(typeof json.l_y != "undefined") l_y = json.l_y;
    if(typeof json.l_debug != "undefined") l_debug = json.l_debug;
    if(typeof json.efield != "undefined") efield = json.efield;
    if(typeof json.sizep != "undefined") sizep = json.sizep;
    if(typeof json.xp != "undefined") xp = json.xp;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.vp != "undefined") vp = json.vp;
    if(typeof json.pv != "undefined") pv = json.pv;
    if(typeof json.id != "undefined") id = json.id;
    if(typeof json.dragIW != "undefined") dragIW = json.dragIW;
    if(typeof json.showb != "undefined") showb = json.showb;
    if(typeof json.control != "undefined") control = json.control;
    if(typeof json.auto != "undefined") auto = json.auto;
    if(typeof json.dv != "undefined") dv = json.dv;
    if(typeof json.showV != "undefined") showV = json.showV;
    if(typeof json.autocount != "undefined") autocount = json.autocount;
    if(typeof json.npfactor != "undefined") npfactor = json.npfactor;
    if(typeof json.ecount != "undefined") ecount = json.ecount;
    if(typeof json.photoncount != "undefined") photoncount = json.photoncount;
    if(typeof json.lightIntensity != "undefined") lightIntensity = json.lightIntensity;
    if(typeof json.showE != "undefined") showE = json.showE;
    if(typeof json.photoncolor != "undefined") photoncolor = json.photoncolor;
    if(typeof json.trans != "undefined") trans = json.trans;
    if(typeof json.mColour != "undefined") mColour = json.mColour;
    if(typeof json.scount != "undefined") scount = json.scount;
    if(typeof json.key != "undefined") key = json.key;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.textbr != "undefined") textbr = json.textbr;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Height1 != "undefined") Height1 = json.Height1;
    if(typeof json.Widthv != "undefined") Widthv = json.Widthv;
    if(typeof json.Widtha != "undefined") Widtha = json.Widtha;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.Height2 != "undefined") Height2 = json.Height2;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.nVectors != "undefined") nVectors = json.nVectors;
    if(typeof json.nVectorsSq != "undefined") nVectorsSq = json.nVectorsSq;
    if(typeof json.vectorIndex != "undefined") vectorIndex = json.vectorIndex;
    if(typeof json.posx != "undefined") posx = json.posx;
    if(typeof json.posy != "undefined") posy = json.posy;
    if(typeof json.Fieldx != "undefined") Fieldx = json.Fieldx;
    if(typeof json.Fieldy != "undefined") Fieldy = json.Fieldy;
    if(typeof json.Vectorx != "undefined") Vectorx = json.Vectorx;
    if(typeof json.Vectory != "undefined") Vectory = json.Vectory;
    if(typeof json.fontplus != "undefined") fontplus = json.fontplus;
    if(typeof json.posxleft != "undefined") posxleft = json.posxleft;
    if(typeof json.posyleft != "undefined") posyleft = json.posyleft;
    if(typeof json.posxright != "undefined") posxright = json.posxright;
    if(typeof json.posyright != "undefined") posyright = json.posyright;
    if(typeof json.lambda != "undefined") lambda = json.lambda;
    if(typeof json.lambdadrag != "undefined") lambdadrag = json.lambdadrag;
    if(typeof json.freq != "undefined") freq = json.freq;
    if(typeof json.freqstopping != "undefined") freqstopping = json.freqstopping;
    if(typeof json.showphoton != "undefined") showphoton = json.showphoton;
    if(typeof json.showlight != "undefined") showlight = json.showlight;
    if(typeof json.polPts != "undefined") polPts = json.polPts;
    if(typeof json.currenttext != "undefined") currenttext = json.currenttext;
    if(typeof json.vr != "undefined") vr = json.vr;
    if(typeof json.vg != "undefined") vg = json.vg;
    if(typeof json.vb != "undefined") vb = json.vb;
    if(typeof json.vcolor != "undefined") vcolor = json.vcolor;
    if(typeof json.vcolor2 != "undefined") vcolor2 = json.vcolor2;
    if(typeof json.Temperature != "undefined") Temperature = json.Temperature;
    if(typeof json.temp != "undefined") temp = json.temp;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.selectedI != "undefined") selectedI = json.selectedI;
    if(typeof json.selected2 != "undefined") selected2 = json.selected2;
    if(typeof json.selected3 != "undefined") selected3 = json.selected3;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.slider != "undefined") slider = json.slider;
    if(typeof json.wbuttonX != "undefined") wbuttonX = json.wbuttonX;
    if(typeof json.wbutton2X != "undefined") wbutton2X = json.wbutton2X;
    if(typeof json.wbuttonSizeY != "undefined") wbuttonSizeY = json.wbuttonSizeY;
    if(typeof json.wbutton3X != "undefined") wbutton3X = json.wbutton3X;
    if(typeof json.wbuttonSizeX != "undefined") wbuttonSizeX = json.wbuttonSizeX;
    if(typeof json.wbutton2SizeX != "undefined") wbutton2SizeX = json.wbutton2SizeX;
    if(typeof json.wbuttonmax != "undefined") wbuttonmax = json.wbuttonmax;
    if(typeof json.wbuttonmin != "undefined") wbuttonmin = json.wbuttonmin;
    if(typeof json.ibuttonX != "undefined") ibuttonX = json.ibuttonX;
    if(typeof json.ibutton2X != "undefined") ibutton2X = json.ibutton2X;
    if(typeof json.ibuttonSizeY != "undefined") ibuttonSizeY = json.ibuttonSizeY;
    if(typeof json.ibutton3X != "undefined") ibutton3X = json.ibutton3X;
    if(typeof json.ibuttonSizeX != "undefined") ibuttonSizeX = json.ibuttonSizeX;
    if(typeof json.ibutton2SizeX != "undefined") ibutton2SizeX = json.ibutton2SizeX;
    if(typeof json.ibuttonmax != "undefined") ibuttonmax = json.ibuttonmax;
    if(typeof json.ibuttonmin != "undefined") ibuttonmin = json.ibuttonmin;
    if(typeof json.mbuttonY != "undefined") mbuttonY = json.mbuttonY;
    if(typeof json.mbutton2Y != "undefined") mbutton2Y = json.mbutton2Y;
    if(typeof json.mbuttonSizeY != "undefined") mbuttonSizeY = json.mbuttonSizeY;
    if(typeof json.mbutton3Y != "undefined") mbutton3Y = json.mbutton3Y;
    if(typeof json.mbuttonSizeX != "undefined") mbuttonSizeX = json.mbuttonSizeX;
    if(typeof json.mbutton2SizeY != "undefined") mbutton2SizeY = json.mbutton2SizeY;
    if(typeof json.mbuttonmax != "undefined") mbuttonmax = json.mbuttonmax;
    if(typeof json.mbuttonmin != "undefined") mbuttonmin = json.mbuttonmin;
    if(typeof json.vbuttonX != "undefined") vbuttonX = json.vbuttonX;
    if(typeof json.vbutton2X != "undefined") vbutton2X = json.vbutton2X;
    if(typeof json.vbuttonSizeY != "undefined") vbuttonSizeY = json.vbuttonSizeY;
    if(typeof json.vbutton3X != "undefined") vbutton3X = json.vbutton3X;
    if(typeof json.vbuttonSizeX != "undefined") vbuttonSizeX = json.vbuttonSizeX;
    if(typeof json.vbutton2SizeX != "undefined") vbutton2SizeX = json.vbutton2SizeX;
    if(typeof json.vbuttonmax != "undefined") vbuttonmax = json.vbuttonmax;
    if(typeof json.vbuttonmin != "undefined") vbuttonmin = json.vbuttonmin;
    if(typeof json.varMY != "undefined") varMY = json.varMY;
    if(typeof json.varMdist != "undefined") varMdist = json.varMdist;
    if(typeof json.showw != "undefined") showw = json.showw;
    if(typeof json.showi != "undefined") showi = json.showi;
    if(typeof json.showm != "undefined") showm = json.showm;
    if(typeof json.showl != "undefined") showl = json.showl;
    if(typeof json.showBar != "undefined") showBar = json.showBar;
    if(typeof json.showvarm != "undefined") showvarm = json.showvarm;
    if(typeof json.showvolt != "undefined") showvolt = json.showvolt;
  };

  _model._inputAndPublicParameters = ["range",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "stroke",  "w",  "w2",  "h1",  "h2",  "h",  "x1",  "xl",  "yl",  "xlsize",  "ylsize",  "x2",  "xr",  "xrsize",  "zero",  "clr",  "y1",  "linkmin",  "pi",  "psize",  "n",  "x",  "y",  "vx",  "vy",  "textelectrons",  "v",  "q",  "theta",  "vxscale",  "moving",  "showparticlesvisualonoff",  "show",  "showe",  "showv",  "Vmax",  "work",  "emit",  "V",  "Vdrag",  "W",  "metalstoretext",  "E",  "d",  "dx",  "dy",  "ax",  "m",  "count",  "scale",  "tcount",  "T",  "tmode",  "Icount",  "I",  "Is",  "record",  "Iunit",  "Icst",  "Iscale",  "Imax",  "Icheck",  "Imeasurecount",  "Ipts",  "l_play",  "l_pause",  "l_reset",  "l_init",  "label",  "l_step",  "l_v",  "l_t",  "l_photonenergy",  "l_intensity",  "l_voltage",  "l_workfunction",  "l_current",  "l_showv",  "l_showE",  "l_auto",  "l_title",  "l_x",  "l_y",  "l_debug",  "efield",  "sizep",  "xp",  "yp",  "vp",  "pv",  "id",  "dragIW",  "showb",  "control",  "auto",  "dv",  "showV",  "autocount",  "npfactor",  "ecount",  "photoncount",  "lightIntensity",  "showE",  "photoncolor",  "trans",  "mColour",  "scount",  "key",  "text",  "textbr",  "graph",  "world",  "Width",  "Height",  "Width1",  "Width2",  "Height1",  "Widthv",  "Widtha",  "xvst",  "vvst",  "avst",  "Height2",  "disabledworld",  "disabled",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "Android",  "nVectors",  "nVectorsSq",  "vectorIndex",  "posx",  "posy",  "Fieldx",  "Fieldy",  "Vectorx",  "Vectory",  "fontplus",  "posxleft",  "posyleft",  "posxright",  "posyright",  "lambda",  "lambdadrag",  "freq",  "freqstopping",  "showphoton",  "showlight",  "polPts",  "currenttext",  "vr",  "vg",  "vb",  "vcolor",  "vcolor2",  "Temperature",  "temp",  "omega",  "selected",  "selectedI",  "selected2",  "selected3",  "selectedview",  "slider",  "wbuttonX",  "wbutton2X",  "wbuttonSizeY",  "wbutton3X",  "wbuttonSizeX",  "wbutton2SizeX",  "wbuttonmax",  "wbuttonmin",  "ibuttonX",  "ibutton2X",  "ibuttonSizeY",  "ibutton3X",  "ibuttonSizeX",  "ibutton2SizeX",  "ibuttonmax",  "ibuttonmin",  "mbuttonY",  "mbutton2Y",  "mbuttonSizeY",  "mbutton3Y",  "mbuttonSizeX",  "mbutton2SizeY",  "mbuttonmax",  "mbuttonmin",  "vbuttonX",  "vbutton2X",  "vbuttonSizeY",  "vbutton3X",  "vbuttonSizeX",  "vbutton2SizeX",  "vbuttonmax",  "vbuttonmin",  "varMY",  "varMdist",  "showw",  "showi",  "showm",  "showl",  "showBar",  "showvarm",  "showvolt"]; 

  _model._outputAndPublicParameters = ["range",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "stroke",  "w",  "w2",  "h1",  "h2",  "h",  "x1",  "xl",  "yl",  "xlsize",  "ylsize",  "x2",  "xr",  "xrsize",  "zero",  "clr",  "y1",  "linkmin",  "pi",  "psize",  "n",  "x",  "y",  "vx",  "vy",  "textelectrons",  "v",  "q",  "theta",  "vxscale",  "moving",  "showparticlesvisualonoff",  "show",  "showe",  "showv",  "Vmax",  "work",  "emit",  "V",  "Vdrag",  "W",  "metalstoretext",  "E",  "d",  "dx",  "dy",  "ax",  "m",  "count",  "scale",  "tcount",  "T",  "tmode",  "Icount",  "I",  "Is",  "record",  "Iunit",  "Icst",  "Iscale",  "Imax",  "Icheck",  "Imeasurecount",  "Ipts",  "l_play",  "l_pause",  "l_reset",  "l_init",  "label",  "l_step",  "l_v",  "l_t",  "l_photonenergy",  "l_intensity",  "l_voltage",  "l_workfunction",  "l_current",  "l_showv",  "l_showE",  "l_auto",  "l_title",  "l_x",  "l_y",  "l_debug",  "efield",  "sizep",  "xp",  "yp",  "vp",  "pv",  "id",  "dragIW",  "showb",  "control",  "auto",  "dv",  "showV",  "autocount",  "npfactor",  "ecount",  "photoncount",  "lightIntensity",  "showE",  "photoncolor",  "trans",  "mColour",  "scount",  "key",  "text",  "textbr",  "graph",  "world",  "Width",  "Height",  "Width1",  "Width2",  "Height1",  "Widthv",  "Widtha",  "xvst",  "vvst",  "avst",  "Height2",  "disabledworld",  "disabled",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "Android",  "nVectors",  "nVectorsSq",  "vectorIndex",  "posx",  "posy",  "Fieldx",  "Fieldy",  "Vectorx",  "Vectory",  "fontplus",  "posxleft",  "posyleft",  "posxright",  "posyright",  "lambda",  "lambdadrag",  "freq",  "freqstopping",  "showphoton",  "showlight",  "polPts",  "currenttext",  "vr",  "vg",  "vb",  "vcolor",  "vcolor2",  "Temperature",  "temp",  "omega",  "selected",  "selectedI",  "selected2",  "selected3",  "selectedview",  "slider",  "wbuttonX",  "wbutton2X",  "wbuttonSizeY",  "wbutton3X",  "wbuttonSizeX",  "wbutton2SizeX",  "wbuttonmax",  "wbuttonmin",  "ibuttonX",  "ibutton2X",  "ibuttonSizeY",  "ibutton3X",  "ibuttonSizeX",  "ibutton2SizeX",  "ibuttonmax",  "ibuttonmin",  "mbuttonY",  "mbutton2Y",  "mbuttonSizeY",  "mbutton3Y",  "mbuttonSizeX",  "mbutton2SizeY",  "mbuttonmax",  "mbuttonmin",  "vbuttonX",  "vbutton2X",  "vbuttonSizeY",  "vbutton3X",  "vbuttonSizeX",  "vbutton2SizeX",  "vbuttonmax",  "vbuttonmin",  "varMY",  "varMdist",  "showw",  "showi",  "showm",  "showl",  "showBar",  "showvarm",  "showvolt"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["initialize"] = true;
    __pagesEnabled["efield"] = true;
    __pagesEnabled["graphaxes"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["svg metal"] = true;
    __pagesEnabled["ode"] = true;
    __pagesEnabled["Error handling code"] = true;
    __pagesEnabled["relation"] = true;
    __pagesEnabled["changeV()"] = true;
    __pagesEnabled["Visibility"] = true;
    __pagesEnabled["world"] = false;
    __pagesEnabled["efield"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["graphs"] = true;
    __pagesEnabled["colorlookang"] = true;
    __pagesEnabled["colorlookang2"] = true;
    __pagesEnabled["FixRel Page 2"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["slider"] = true;
    __pagesEnabled["varM"] = true;
  });

  _model.addToReset(function() {
    range = 200; // EjsS Model.Variables.coordinate.range
    xmin = -range/2; // EjsS Model.Variables.coordinate.xmin
    xmax = range/2; // EjsS Model.Variables.coordinate.xmax
    ymin = -range/2; // EjsS Model.Variables.coordinate.ymin
    ymax = range/2; // EjsS Model.Variables.coordinate.ymax
    t = 0.0; // EjsS Model.Variables.coordinate.t
    dt = 0.05; // EjsS Model.Variables.coordinate.dt
    size = range/40; // EjsS Model.Variables.coordinate.size
    stroke = 2.0; // EjsS Model.Variables.coordinate.stroke
    w = xmax/4; // EjsS Model.Variables.coordinate.w
    w2 = w/4; // EjsS Model.Variables.coordinate.w2
    h1 = w; // EjsS Model.Variables.coordinate.h1
    h2 = w/2; // EjsS Model.Variables.coordinate.h2
    h = ymax; // EjsS Model.Variables.coordinate.h
    x1 = xmin/2; // EjsS Model.Variables.coordinate.x1
    xl = [x1-w2,xmin+w/2,-w/6]; // EjsS Model.Variables.coordinate.xl
    yl = [0,0,ymin+w]; // EjsS Model.Variables.coordinate.yl
    xlsize = [(xmin+w/2)-(x1-w2), 0,(xmin+w/2)-(-w/6)]; // EjsS Model.Variables.coordinate.xlsize
    ylsize = [0,ymin+w,0]; // EjsS Model.Variables.coordinate.ylsize
    x2 = xmax/2; // EjsS Model.Variables.coordinate.x2
    xr = [x2+w2,xmax-w/2,w/6]; // EjsS Model.Variables.coordinate.xr
    xrsize = [(xmax-w/2)-(x2+w2), 0,(xmax-w/2)-(w/6)]; // EjsS Model.Variables.coordinate.xrsize
    zero = 0.0; // EjsS Model.Variables.coordinate.zero
    clr = rgb(255,0,0); // EjsS Model.Variables.coordinate.clr
    y1 = ymin/2; // EjsS Model.Variables.coordinate.y1
    linkmin = 0; // EjsS Model.Variables.coordinate.linkmin
    pi = Math.PI; // EjsS Model.Variables.coordinate.pi
    psize = 5; // EjsS Model.Variables.coordinate.psize
  });

  _model.addToReset(function() {
    n = _isMobile?60:200; // EjsS Model.Variables.basic.n
    x = new Array(n); // EjsS Model.Variables.basic.x
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.x
        x[_i0] = xmax+size;  // EjsS Model.Variables.basic.x
      }
    }());
    y = new Array(n); // EjsS Model.Variables.basic.y
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.y
        y[_i0] = 0.0;  // EjsS Model.Variables.basic.y
      }
    }());
    vx = new Array(n); // EjsS Model.Variables.basic.vx
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.vx
        vx[_i0] = 0;  // EjsS Model.Variables.basic.vx
      }
    }());
    vy = new Array(n); // EjsS Model.Variables.basic.vy
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.vy
        vy[_i0] = 0;  // EjsS Model.Variables.basic.vy
      }
    }());
    textelectrons = new Array(n); // EjsS Model.Variables.basic.textelectrons
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.textelectrons
        textelectrons[_i0] = "";  // EjsS Model.Variables.basic.textelectrons
      }
    }());
    v = new Array(n); // EjsS Model.Variables.basic.v
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.v
        v[_i0] = 0;  // EjsS Model.Variables.basic.v
      }
    }());
    q = 1; // EjsS Model.Variables.basic.q
    theta = new Array(n); // EjsS Model.Variables.basic.theta
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.theta
        theta[_i0] = 0;  // EjsS Model.Variables.basic.theta
      }
    }());
    vxscale = new Array(n); // EjsS Model.Variables.basic.vxscale
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.vxscale
        vxscale[_i0] = 0;  // EjsS Model.Variables.basic.vxscale
      }
    }());
    moving = new Array(n); // EjsS Model.Variables.basic.moving
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.moving
        moving[_i0] = false;  // EjsS Model.Variables.basic.moving
      }
    }());
    showparticlesvisualonoff = true; // EjsS Model.Variables.basic.showparticlesvisualonoff
    show = new Array(n); // EjsS Model.Variables.basic.show
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.show
        show[_i0] = false;  // EjsS Model.Variables.basic.show
      }
    }());
    showe = new Array(n); // EjsS Model.Variables.basic.showe
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.showe
        showe[_i0] = false;  // EjsS Model.Variables.basic.showe
      }
    }());
    showv = new Array(n); // EjsS Model.Variables.basic.showv
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.showv
        showv[_i0] = false;  // EjsS Model.Variables.basic.showv
      }
    }());
    Vmax = 2.5; // EjsS Model.Variables.basic.Vmax
    work = 1.0; // EjsS Model.Variables.basic.work
    emit = false; // EjsS Model.Variables.basic.emit
    V = 0; // EjsS Model.Variables.basic.V
    Vdrag = 0; // EjsS Model.Variables.basic.Vdrag
    E = 2.5; // EjsS Model.Variables.basic.E
    d = xmax; // EjsS Model.Variables.basic.d
    dx = xmax/5; // EjsS Model.Variables.basic.dx
    dy = ymax/5; // EjsS Model.Variables.basic.dy
    ax = new Array(n); // EjsS Model.Variables.basic.ax
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.ax
        ax[_i0] = 0.0;  // EjsS Model.Variables.basic.ax
      }
    }());
    m = 1.e-4; // EjsS Model.Variables.basic.m
    count = 0; // EjsS Model.Variables.basic.count
    scale = 8*Math.sqrt(m); // EjsS Model.Variables.basic.scale
    tcount = 0; // EjsS Model.Variables.basic.tcount
    T = 3; // EjsS Model.Variables.basic.T
    tmode = T*20; // EjsS Model.Variables.basic.tmode
    Icount = 0; // EjsS Model.Variables.basic.Icount
    I = 0.0; // EjsS Model.Variables.basic.I
    Is = 0.0; // EjsS Model.Variables.basic.Is
    record = 0; // EjsS Model.Variables.basic.record
    Iunit = 5; // EjsS Model.Variables.basic.Iunit
    Icst = 20; // EjsS Model.Variables.basic.Icst
    Iscale = 1.0; // EjsS Model.Variables.basic.Iscale
    Imax = 0.0; // EjsS Model.Variables.basic.Imax
    Icheck = 0; // EjsS Model.Variables.basic.Icheck
    Imeasurecount = 0; // EjsS Model.Variables.basic.Imeasurecount
    Ipts = 0; // EjsS Model.Variables.basic.Ipts
  });

  _model.addToReset(function() {
    l_play = "play"; // EjsS Model.Variables.language.l_play
    l_pause = "pause"; // EjsS Model.Variables.language.l_pause
    l_reset = "reset"; // EjsS Model.Variables.language.l_reset
    l_init = "initialize"; // EjsS Model.Variables.language.l_init
    label = "play"; // EjsS Model.Variables.language.label
    l_step = "step"; // EjsS Model.Variables.language.l_step
    l_v = "V=0.0 V"; // EjsS Model.Variables.language.l_v
    l_t = ""; // EjsS Model.Variables.language.l_t
    l_photonenergy = "Photon Energy=0.0 eV"; // EjsS Model.Variables.language.l_photonenergy
    l_intensity = "No of photons per second=0"; // EjsS Model.Variables.language.l_intensity
    l_voltage = "Voltage=0.0 V"; // EjsS Model.Variables.language.l_voltage
    l_workfunction = "Work Function=0.0 eV"; // EjsS Model.Variables.language.l_workfunction
    l_current = "Current=0.0"; // EjsS Model.Variables.language.l_current
    l_showv = "show Velocity"; // EjsS Model.Variables.language.l_showv
    l_showE = "show E Field"; // EjsS Model.Variables.language.l_showE
    l_auto = "automatic"; // EjsS Model.Variables.language.l_auto
    l_title = "I-V curve"; // EjsS Model.Variables.language.l_title
    l_x = "Voltage / V"; // EjsS Model.Variables.language.l_x
    l_y = "Current / nA"; // EjsS Model.Variables.language.l_y
    l_debug = ""; // EjsS Model.Variables.language.l_debug
  });

  _model.addToReset(function() {
    efield = new Array(5); // EjsS Model.Variables.view.efield
    (function () {
      var _i0,_i1,_i2;
      for (_i0=0; _i0<5; _i0+=1) {  // EjsS Model.Variables.view.efield
        efield[_i0] = [];
        for (_i1=0; _i1<5; _i1+=1) {  // EjsS Model.Variables.view.efield
          efield[_i0][_i1] = [];
          for (_i2=0; _i2<5; _i2+=1) {  // EjsS Model.Variables.view.efield
            efield[_i0][_i1][_i2] = 0.0;  // EjsS Model.Variables.view.efield
          }
        }
      }
    }());
    sizep = size; // EjsS Model.Variables.view.sizep
    xp = new Array(n); // EjsS Model.Variables.view.xp
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.view.xp
        xp[_i0] = xmax+sizep/2;  // EjsS Model.Variables.view.xp
      }
    }());
    yp = new Array(n); // EjsS Model.Variables.view.yp
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.view.yp
        yp[_i0] = ymax;  // EjsS Model.Variables.view.yp
      }
    }());
    vp = new Array(n); // EjsS Model.Variables.view.vp
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.view.vp
        vp[_i0] = 0;  // EjsS Model.Variables.view.vp
      }
    }());
    pv = -xmax*4; // EjsS Model.Variables.view.pv
    id = 0; // EjsS Model.Variables.view.id
    dragIW = false; // EjsS Model.Variables.view.dragIW
    showb = true; // EjsS Model.Variables.view.showb
    control = false; // EjsS Model.Variables.view.control
    auto = false; // EjsS Model.Variables.view.auto
    dv = 0.3; // EjsS Model.Variables.view.dv
    showV = false; // EjsS Model.Variables.view.showV
    autocount = 0; // EjsS Model.Variables.view.autocount
    npfactor = pv/xmax/Math.sqrt(2); // EjsS Model.Variables.view.npfactor
    ecount = 0; // EjsS Model.Variables.view.ecount
    lightIntensity = photoncount/12; // EjsS Model.Variables.view.lightIntensity
    showE = false; // EjsS Model.Variables.view.showE
    photoncolor = wavelength2color(1.2422/E); // EjsS Model.Variables.view.photoncolor
    trans = 1.0; // EjsS Model.Variables.view.trans
    mColour = "url(#calcium)"; // EjsS Model.Variables.view.mColour
  });

  _model.addToReset(function() {
    scount = 0; // EjsS Model.Variables.saveImage.scount
    key = 0; // EjsS Model.Variables.saveImage.key
  });

  _model.addToReset(function() {
    text = "change the variables and click play"; // EjsS Model.Variables.layout.text
    textbr = ""; // EjsS Model.Variables.layout.textbr
    graph = true; // EjsS Model.Variables.layout.graph
    world = true; // EjsS Model.Variables.layout.world
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Height1 = "200"; // EjsS Model.Variables.layout.Height1
    xvst = true; // EjsS Model.Variables.layout.xvst
    vvst = false; // EjsS Model.Variables.layout.vvst
    avst = false; // EjsS Model.Variables.layout.avst
    Height2 = "350"; // EjsS Model.Variables.layout.Height2
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
  });

  _model.addToReset(function() {
    nVectors = 9; // EjsS Model.Variables.efield.nVectors
    nVectorsSq = nVectors*nVectors; // EjsS Model.Variables.efield.nVectorsSq
    vectorIndex = 0; // EjsS Model.Variables.efield.vectorIndex
    posx = new Array(nVectorsSq); // EjsS Model.Variables.efield.posx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.efield.posx
        posx[_i0] = 0.0;  // EjsS Model.Variables.efield.posx
      }
    }());
    posy = new Array(nVectorsSq); // EjsS Model.Variables.efield.posy
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.efield.posy
        posy[_i0] = 0.0;  // EjsS Model.Variables.efield.posy
      }
    }());
    Fieldx = new Array(nVectorsSq); // EjsS Model.Variables.efield.Fieldx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.efield.Fieldx
        Fieldx[_i0] = 20;  // EjsS Model.Variables.efield.Fieldx
      }
    }());
    Fieldy = new Array(nVectorsSq); // EjsS Model.Variables.efield.Fieldy
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.efield.Fieldy
        Fieldy[_i0] = 0.0;  // EjsS Model.Variables.efield.Fieldy
      }
    }());
    Vectorx = new Array(nVectorsSq); // EjsS Model.Variables.efield.Vectorx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.efield.Vectorx
        Vectorx[_i0] = 0.0;  // EjsS Model.Variables.efield.Vectorx
      }
    }());
    Vectory = new Array(nVectorsSq); // EjsS Model.Variables.efield.Vectory
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.efield.Vectory
        Vectory[_i0] = 0.0;  // EjsS Model.Variables.efield.Vectory
      }
    }());
  });

  _model.addToReset(function() {
    fontplus = "normal normal 10px "; // EjsS Model.Variables.signs.fontplus
    posxleft = new Array(nVectorsSq); // EjsS Model.Variables.signs.posxleft
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.signs.posxleft
        posxleft[_i0] = 0.0;  // EjsS Model.Variables.signs.posxleft
      }
    }());
    posyleft = new Array(nVectorsSq); // EjsS Model.Variables.signs.posyleft
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.signs.posyleft
        posyleft[_i0] = 0.0;  // EjsS Model.Variables.signs.posyleft
      }
    }());
    posxright = new Array(nVectorsSq); // EjsS Model.Variables.signs.posxright
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.signs.posxright
        posxright[_i0] = 0.0;  // EjsS Model.Variables.signs.posxright
      }
    }());
    posyright = new Array(nVectorsSq); // EjsS Model.Variables.signs.posyright
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.signs.posyright
        posyright[_i0] = 0.0;  // EjsS Model.Variables.signs.posyright
      }
    }());
  });

  _model.addToReset(function() {
    freq = 0; // EjsS Model.Variables.wavelength.freq
    freqstopping = W; // EjsS Model.Variables.wavelength.freqstopping
    showphoton = new Array(n); // EjsS Model.Variables.wavelength.showphoton
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.wavelength.showphoton
        showphoton[_i0] = true;  // EjsS Model.Variables.wavelength.showphoton
      }
    }());
    showlight = false; // EjsS Model.Variables.wavelength.showlight
    polPts = [[xmin/2,-(h+size)/2],[xmin/2,+(h+size)/2],[0,ymax],[0.95*xmax,ymax]]; // EjsS Model.Variables.wavelength.polPts
    currenttext = ""; // EjsS Model.Variables.wavelength.currenttext
    vr = 255; // EjsS Model.Variables.wavelength.vr
    vg = 150; // EjsS Model.Variables.wavelength.vg
    vb = 99; // EjsS Model.Variables.wavelength.vb
    vcolor = ""; // EjsS Model.Variables.wavelength.vcolor
    vcolor2 = ""; // EjsS Model.Variables.wavelength.vcolor2
    Temperature = 4000.0; // EjsS Model.Variables.wavelength.Temperature
    temp = (Temperature-300.0)/(5000.0-300.0); // EjsS Model.Variables.wavelength.temp
  });

  _model.addToReset(function() {
    omega = 0; // EjsS Model.Variables.dropdownmneu.omega
    selected = new Array(1); // EjsS Model.Variables.dropdownmneu.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.dropdownmneu.selected
        selected[_i0] = "Red, λ =700nm";  // EjsS Model.Variables.dropdownmneu.selected
      }
    }());
    selectedI = new Array(1); // EjsS Model.Variables.dropdownmneu.selectedI
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.dropdownmneu.selectedI
        selectedI[_i0] = "Intensity of Light =60%";  // EjsS Model.Variables.dropdownmneu.selectedI
      }
    }());
    selected2 = new Array(1); // EjsS Model.Variables.dropdownmneu.selected2
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.dropdownmneu.selected2
        selected2[_i0] = "Voltage V= 0.0";  // EjsS Model.Variables.dropdownmneu.selected2
      }
    }());
    selected3 = new Array(1); // EjsS Model.Variables.dropdownmneu.selected3
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.dropdownmneu.selected3
        selected3[_i0] = "Work Function Calcium=2.9eV";  // EjsS Model.Variables.dropdownmneu.selected3
      }
    }());
    selectedview = new Array(1); // EjsS Model.Variables.dropdownmneu.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.dropdownmneu.selectedview
        selectedview[_i0] = "photons show";  // EjsS Model.Variables.dropdownmneu.selectedview
      }
    }());
  });

  _model.addToReset(function() {
    slider = 4.1; // EjsS Model.Variables.slider.slider
    wbutton2X = xmin/1.4+ 4*size + 0.5*size; // EjsS Model.Variables.slider.wbutton2X
    wbuttonSizeY = 1.2*size; // EjsS Model.Variables.slider.wbuttonSizeY
    wbutton3X = xmin/1.4 - 4*size - 0.5*size; // EjsS Model.Variables.slider.wbutton3X
    wbuttonSizeX = 0.8*size; // EjsS Model.Variables.slider.wbuttonSizeX
    wbutton2SizeX = .2*size; // EjsS Model.Variables.slider.wbutton2SizeX
    wbuttonmax = xmin/1.4 +4*size; // EjsS Model.Variables.slider.wbuttonmax
    wbuttonmin = xmin/1.4 -4*size; // EjsS Model.Variables.slider.wbuttonmin
    ibutton2X = xmin/1.4 + 4*size + 0.5*size; // EjsS Model.Variables.slider.ibutton2X
    ibuttonSizeY = 1.2*size; // EjsS Model.Variables.slider.ibuttonSizeY
    ibutton3X = xmin/1.4 - 4*size - 0.5*size; // EjsS Model.Variables.slider.ibutton3X
    ibuttonSizeX = 0.8*size; // EjsS Model.Variables.slider.ibuttonSizeX
    ibutton2SizeX = .2*size; // EjsS Model.Variables.slider.ibutton2SizeX
    ibuttonmax = xmin/1.4 +4*size; // EjsS Model.Variables.slider.ibuttonmax
    ibuttonmin = xmin/1.4 -4*size; // EjsS Model.Variables.slider.ibuttonmin
    mbuttonY = ymax/3.5-size; // EjsS Model.Variables.slider.mbuttonY
    mbutton2Y = ymax/3.5-4*size-0.7*size; // EjsS Model.Variables.slider.mbutton2Y
    mbuttonSizeY = 1.2*size; // EjsS Model.Variables.slider.mbuttonSizeY
    mbutton3Y = ymax/3.5+4*size+0.7*size; // EjsS Model.Variables.slider.mbutton3Y
    mbuttonSizeX = 0.8*size; // EjsS Model.Variables.slider.mbuttonSizeX
    mbutton2SizeY = .2*size; // EjsS Model.Variables.slider.mbutton2SizeY
    mbuttonmax = ymax/3.5+4*size; // EjsS Model.Variables.slider.mbuttonmax
    mbuttonmin = ymax/3.5-4*size; // EjsS Model.Variables.slider.mbuttonmin
    vbuttonX = xmin/3; // EjsS Model.Variables.slider.vbuttonX
    vbutton2X = xmin/3+ 4*size + 0.5*size; // EjsS Model.Variables.slider.vbutton2X
    vbuttonSizeY = 1.2*size; // EjsS Model.Variables.slider.vbuttonSizeY
    vbutton3X = xmin/3 - 4*size - 0.5*size; // EjsS Model.Variables.slider.vbutton3X
    vbuttonSizeX = 0.8*size; // EjsS Model.Variables.slider.vbuttonSizeX
    vbutton2SizeX = .2*size; // EjsS Model.Variables.slider.vbutton2SizeX
    vbuttonmax = xmin/3 +4*size; // EjsS Model.Variables.slider.vbuttonmax
    vbuttonmin = xmin/3 -4*size; // EjsS Model.Variables.slider.vbuttonmin
    varMY = -(h+size)/2 +size*3; // EjsS Model.Variables.slider.varMY
  });

  _model.addToReset(function() {
    showw = true; // EjsS Model.Variables.controlshow.showw
    showi = true; // EjsS Model.Variables.controlshow.showi
    showm = true; // EjsS Model.Variables.controlshow.showm
    showl = false; // EjsS Model.Variables.controlshow.showl
    showBar = true; // EjsS Model.Variables.controlshow.showBar
    showvarm = true; // EjsS Model.Variables.controlshow.showvarm
    showvolt = true; // EjsS Model.Variables.controlshow.showvolt
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(5);
  });

  /** http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c  // > CustomCode.setColor:1
   * Converts an HSV color value to RGB. Conversion formula  // > CustomCode.setColor:2
   * adapted from http://en.wikipedia.org/wiki/HSV_color_space.  // > CustomCode.setColor:3
   * Assumes h, s, and v are contained in the set [0, 1] and  // > CustomCode.setColor:4
   * returns r, g, and b in the set [0, 255].  // > CustomCode.setColor:5
   *  // > CustomCode.setColor:6
   * @param   Number  h       The hue  // > CustomCode.setColor:7
   * @param   Number  s       The saturation  // > CustomCode.setColor:8
   * @param   Number  v       The value  // > CustomCode.setColor:9
   * @return  Array           The RGB representation  // > CustomCode.setColor:10
   */  // > CustomCode.setColor:11
  function hsvToRgb(h, s, v)  // > CustomCode.setColor:12
  {  // > CustomCode.setColor:13
      var r, g, b;  // > CustomCode.setColor:14
      var i = Math.floor(h * 6);  // > CustomCode.setColor:15
      var f = h * 6 - i;  // > CustomCode.setColor:16
      var p = v * (1 - s);  // > CustomCode.setColor:17
      var q = v * (1 - f * s);  // > CustomCode.setColor:18
      var t = v * (1 - (1 - f) * s);  // > CustomCode.setColor:19
      switch(i % 6)  // > CustomCode.setColor:20
      {  // > CustomCode.setColor:21
          case 0: r = v, g = t, b = p; break;  // > CustomCode.setColor:22
          case 1: r = q, g = v, b = p; break;  // > CustomCode.setColor:23
          case 2: r = p, g = v, b = t; break;  // > CustomCode.setColor:24
          case 3: r = p, g = q, b = v; break;  // > CustomCode.setColor:25
          case 4: r = t, g = p, b = v; break;  // > CustomCode.setColor:26
          case 5: r = v, g = p, b = q; break;  // > CustomCode.setColor:27
      }  // > CustomCode.setColor:28
      //rgb function in javascript only take integer  // > CustomCode.setColor:29
      return [Math.round(r) * 255, Math.round(g) * 255, Math.round(b) * 255];  // > CustomCode.setColor:30
  }  // > CustomCode.setColor:31
  function rgb(r, g, b, a)  // > CustomCode.setColor:32
  {  // > CustomCode.setColor:33
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";  // > CustomCode.setColor:34
  }  // > CustomCode.setColor:35
  function setColor()  // > CustomCode.setColor:36
  {  // > CustomCode.setColor:37
    var r = (autocount %2) * 240;  // > CustomCode.setColor:38
    var g = (autocount/2 %2) * 240;  // > CustomCode.setColor:39
    var b = (autocount/4 %2) * 240;  // > CustomCode.setColor:40
  //  var a = 160/255;  // > CustomCode.setColor:41
     var a = 90/255;  // > CustomCode.setColor:42
     return rgb(r,g,b,a);  // > CustomCode.setColor:43
  }  // > CustomCode.setColor:44
  function wavelength2color(wavelength)  // > CustomCode.setColor:45
  {  // > CustomCode.setColor:46
      var h = (-2.5 * wavelength) + 1.875;  // > CustomCode.setColor:47
      var s = 1;  // > CustomCode.setColor:48
      if (wavelength >= 0.75) // red   // > CustomCode.setColor:49
      // if (wavelength >= 0.75) // red   // > CustomCode.setColor:50
      {  // > CustomCode.setColor:51
        //    h = 0.75;  // > CustomCode.setColor:52
       // s = wavelength/0.35;   // > CustomCode.setColor:53
        return rgb(255, 255, 255, 0);  // > CustomCode.setColor:54
      }  // > CustomCode.setColor:55
      if (wavelength <= 0.35)  // > CustomCode.setColor:56
      {  // > CustomCode.setColor:57
       // h = 0.75;  // > CustomCode.setColor:58
       // s = wavelength/0.35;   // > CustomCode.setColor:59
       return rgb(255, 255, 255, 0);  // > CustomCode.setColor:60
      }  // > CustomCode.setColor:61
        // > CustomCode.setColor:62
      var c = [0,0,0];  // > CustomCode.setColor:63
      c = hsvToRgb(h,s,1.0);  // > CustomCode.setColor:64
     // return rgb(c[0], c[1], c[2], 1);  // > CustomCode.setColor:65
      return rgb(c[0], c[1], c[2], 90/255);  // > CustomCode.setColor:66
    // return rgb(c[0], c[1], c[2],photoncount/100);  // > CustomCode.setColor:67
  }  // > CustomCode.setColor:68

  function playpause() // decommission by lookang  // > CustomCode.playpause:1
  {  // > CustomCode.playpause:2
    if (label === l_play)  // > CustomCode.playpause:3
    {  // > CustomCode.playpause:4
      label = l_pause;  // > CustomCode.playpause:5
      _play();  // > CustomCode.playpause:6
      autocount++;  // > CustomCode.playpause:7
        // > CustomCode.playpause:8
      if (dragIW)  // > CustomCode.playpause:9
      {  // > CustomCode.playpause:10
        Ipts = 0;  // > CustomCode.playpause:11
        control = dragIW = false;  // > CustomCode.playpause:12
        t = 0.0;  // > CustomCode.playpause:13
        if (auto)  // > CustomCode.playpause:14
        {  // > CustomCode.playpause:15
          V = W-E;   // > CustomCode.playpause:16
          changeV();  // > CustomCode.playpause:17
        }  // > CustomCode.playpause:18
      }  // > CustomCode.playpause:19
      clr = setColor();  // > CustomCode.playpause:20
    }   // > CustomCode.playpause:21
    else  // > CustomCode.playpause:22
    {  // > CustomCode.playpause:23
      label = l_play;  // > CustomCode.playpause:24
      _pause();  // > CustomCode.playpause:25
      record = 0;  // > CustomCode.playpause:26
      I = 0;  // > CustomCode.playpause:27
    }  // > CustomCode.playpause:28
  }  // > CustomCode.playpause:29

  var delta = 0.5;//// decommission by lookang  // > CustomCode.dValue:1
  function dValue(v)   // > CustomCode.dValue:2
  {  // > CustomCode.dValue:3
    delta = v<0 ? -0.5 : 0.5;  // > CustomCode.dValue:4
    return ((v*10.0+delta)/10.0)+"";  // > CustomCode.dValue:5
  }  // > CustomCode.dValue:6

  function changeV()  // > CustomCode.changeV:1
  {  // > CustomCode.changeV:2
    if (V >= 0.05)  // > CustomCode.changeV:3
    {  // > CustomCode.changeV:4
      h1 = w/2;  // > CustomCode.changeV:5
      h2 = w;  // > CustomCode.changeV:6
    }  // > CustomCode.changeV:7
    else   // > CustomCode.changeV:8
    {  // > CustomCode.changeV:9
      h1 = w;  // > CustomCode.changeV:10
      h2 = w/2;  // > CustomCode.changeV:11
    }  // > CustomCode.changeV:12
      // > CustomCode.changeV:13
    l_v="V="+dValue(Math.abs(V))+" V"; // decommission by lookang  // > CustomCode.changeV:14
      // > CustomCode.changeV:15
    if (Math.abs(V) >= 0.05)  // > CustomCode.changeV:16
    {  // > CustomCode.changeV:17
      showb = true;  // > CustomCode.changeV:18
    }    // > CustomCode.changeV:19
    else  // > CustomCode.changeV:20
    {  // > CustomCode.changeV:21
      showb = false;  // > CustomCode.changeV:22
    }    // > CustomCode.changeV:23
     // > CustomCode.changeV:24
   // ax = V/(m*(x2-x1));  // > CustomCode.changeV:25
  // newtons 1 law  // > CustomCode.changeV:26
   for (var i=0; i<n; i++)  // > CustomCode.changeV:27
    {   // > CustomCode.changeV:28
    if ((y[i]>-h/2)&&(y[i]<h/2)){ // inisde plates  // > CustomCode.changeV:29
    ax[i] = q*V/(x2-x1)/m;  // > CustomCode.changeV:30
    }  // > CustomCode.changeV:31
      else {  // > CustomCode.changeV:32
      ax[i] =0;   // > CustomCode.changeV:33
        }  // > CustomCode.changeV:34
  }  // > CustomCode.changeV:35
    for (var i=0; i<5; i++)  // > CustomCode.changeV:36
    {  // > CustomCode.changeV:37
      for(var j=0; j<5; j++)  // > CustomCode.changeV:38
      {  // > CustomCode.changeV:39
        efield[i][j][2] = -V/Vmax*dx;  // > CustomCode.changeV:40
        efield[i][j][4] = V;  // > CustomCode.changeV:41
      }  // > CustomCode.changeV:42
    }  // > CustomCode.changeV:43
    if (Imeasurecount > 0)  // > CustomCode.changeV:44
    {  // > CustomCode.changeV:45
      Ipts++;  // > CustomCode.changeV:46
      Imeasurecount = 0;  // > CustomCode.changeV:47
    }  // > CustomCode.changeV:48
  }  // > CustomCode.changeV:49

  function changeI()   // > CustomCode.changeI:1
  {  // > CustomCode.changeI:2
    if (lightIntensity*Icst > Imax)  // > CustomCode.changeI:3
    {  // > CustomCode.changeI:4
    //  Imax = lightIntensity*Icst;  // > CustomCode.changeI:5
      Imax = lightIntensity*Icst;  // > CustomCode.changeI:6
    }    // > CustomCode.changeI:7
   // n = photoncount/4; // bug found by thomas  // > CustomCode.changeI:8
    Iscale = lightIntensity/Iunit;  // > CustomCode.changeI:9
    dragIW = true;  // > CustomCode.changeI:10
  }  // > CustomCode.changeI:11

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.checkAndroid:1
  function checkAndroid () {  // > CustomCode.checkAndroid:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.checkAndroid:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.checkAndroid:4
  }  // > CustomCode.checkAndroid:5

  function changeOrientation() {  // > CustomCode.changeOrientation:1
  // check platform for Apps  // > CustomCode.changeOrientation:2
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:3
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:4
  // check platform for web browsers  // > CustomCode.changeOrientation:5
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:6
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:7
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:8
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:9
  switch (window.orientation) {  // > CustomCode.changeOrientation:10
              case 0:  // > CustomCode.changeOrientation:11
              case 180:  // > CustomCode.changeOrientation:12
                     this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:13
                    // > CustomCode.changeOrientation:14
                    if (iOSapp&&iPad){   // > CustomCode.changeOrientation:15
                return window.screen.height*0.9;      // > CustomCode.changeOrientation:16
                 }  // > CustomCode.changeOrientation:17
              else if (iOSapp&&iPhone){   // > CustomCode.changeOrientation:18
                return window.screen.height*0.8;      // > CustomCode.changeOrientation:19
                 }  // > CustomCode.changeOrientation:20
                        // > CustomCode.changeOrientation:21
                 else{  // > CustomCode.changeOrientation:22
                  return window.innerHeight;  // > CustomCode.changeOrientation:23
                   }  // > CustomCode.changeOrientation:24
                  break;  // > CustomCode.changeOrientation:25
              case 90:  // > CustomCode.changeOrientation:26
              case -90:  // > CustomCode.changeOrientation:27
                  this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:28
  if (iOSapp&&iPad){   // > CustomCode.changeOrientation:29
                return window.screen.height*0.9;      // > CustomCode.changeOrientation:30
                 }  // > CustomCode.changeOrientation:31
              else if (iOSapp&&iPhone){   // > CustomCode.changeOrientation:32
                return window.screen.height*0.7;      // > CustomCode.changeOrientation:33
                 }  // > CustomCode.changeOrientation:34
                        // > CustomCode.changeOrientation:35
                 else{  // > CustomCode.changeOrientation:36
                  return window.innerHeight;  // > CustomCode.changeOrientation:37
                   }  // > CustomCode.changeOrientation:38
                  break;  // > CustomCode.changeOrientation:39
                    // > CustomCode.changeOrientation:40
                  break;  // > CustomCode.changeOrientation:41
                // > CustomCode.changeOrientation:42
                // > CustomCode.changeOrientation:43
              default:  // > CustomCode.changeOrientation:44
                  this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:45
           //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:46
         return window.innerHeight;  // > CustomCode.changeOrientation:47
         }  // > CustomCode.changeOrientation:48
      }  // > CustomCode.changeOrientation:49

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    //  // > Initialization.undefined:1
    if (wbuttonX == undefined)  // > Initialization.undefined:2
    {  // > Initialization.undefined:3
      wbuttonX = xmin/1.4 - 150*40/650;  // > Initialization.undefined:4
      }  // > Initialization.undefined:5
    if (ibuttonX == undefined)  // > Initialization.undefined:6
    { ibuttonX = xmin/1.4 + 20/100*40;  // > Initialization.undefined:7
    }  // > Initialization.undefined:8
    if (Width1==undefined||Width2==undefined||Widthv==undefined||Widtha==undefined){  // > Initialization.undefined:9
     Width1="100%";   // > Initialization.undefined:10
     Width2="0%";  // > Initialization.undefined:11
     Widthv="0%";   // > Initialization.undefined:12
     Widtha="0%";  // > Initialization.undefined:13
      }  // > Initialization.undefined:14
        // > Initialization.undefined:15
    if (lambda==undefined){  // > Initialization.undefined:16
      lambda=400;  // > Initialization.undefined:17
      lambdadrag=lambda/10;  // > Initialization.undefined:18
      dragIW = true;  // > Initialization.undefined:19
    E = 1240/lambda;  // > Initialization.undefined:20
    photoncolor = wavelength2color(lambda/1000);  // > Initialization.undefined:21
      }  // > Initialization.undefined:22
        // > Initialization.undefined:23
      if (lambda==undefined){  // > Initialization.undefined:24
      lambda=400;  // > Initialization.undefined:25
      dragIW = true;  // > Initialization.undefined:26
    E = 1240/lambda;  // > Initialization.undefined:27
    photoncolor = wavelength2color(lambda/1000);  // > Initialization.undefined:28
      }  // > Initialization.undefined:29
    if (photoncount==undefined){  // > Initialization.undefined:30
      photoncount=70;  // > Initialization.undefined:31
     // _view.comboBox3.setSelectedOptions(["Intensity of Light =70%"]);  // > Initialization.undefined:32
     // _view.comboBox3.setProperty("SelectedOptions")="Intensity of Light =70%";  // > Initialization.undefined:33
      lightIntensity=photoncount/12.0;  // > Initialization.undefined:34
    changeI();  // > Initialization.undefined:35
      }  // > Initialization.undefined:36
        // > Initialization.undefined:37
      if (V==undefined){  // > Initialization.undefined:38
      V=0;  // > Initialization.undefined:39
      changeV();  // > Initialization.undefined:40
      }  // > Initialization.undefined:41
        // > Initialization.undefined:42
      if (W==undefined){  // > Initialization.undefined:43
      W=2.9; //"Calcium Ca"  // > Initialization.undefined:44
    //  _view.comboBox.setSelectedOptions(["Calcium Ca"]);  // > Initialization.undefined:45
      }  // > Initialization.undefined:46
    //  // > Initialization.undefined:47
    if (metalstoretext==undefined){  // > Initialization.undefined:48
      metalstoretext=""; //"Calcium Ca"  // > Initialization.undefined:49
    //  _view.comboBox.setSelectedOptions(["Calcium Ca"]);  // > Initialization.undefined:50
      }  // > Initialization.undefined:51
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["initialize"]) return;
    //showE=true;  // > Initialization.initialize:1
    //showparticlesvisualonoff=true;  // > Initialization.initialize:2
    //_play(); //lookang disable replace by autoplay true  // > Initialization.initialize:3
    //showlight=true;  // > Initialization.initialize:4
    for (var i=0; i<n; i++){  // > Initialization.initialize:5
      //showphoton[i]=false;  // > Initialization.initialize:6
     // show[i]=false;  // > Initialization.initialize:7
      showparticlesvisualonoff=false;  // > Initialization.initialize:8
      showe[i]=false;  // > Initialization.initialize:9
    }  // > Initialization.initialize:10
    showlight=true;  // > Initialization.initialize:11
    showe[i]=false;  // > Initialization.initialize:12
        // > Initialization.initialize:13
    // autocount++;  // > Initialization.initialize:14
    isPaused=false;  // > Initialization.initialize:15
    text="playing";  // > Initialization.initialize:16
    if (dragIW)  // > Initialization.initialize:17
        {  // > Initialization.initialize:18
          Ipts = 0;  // > Initialization.initialize:19
          control = dragIW = false;  // > Initialization.initialize:20
          t = 0.0;  // > Initialization.initialize:21
          if (auto)  // > Initialization.initialize:22
          {  // > Initialization.initialize:23
            V = W-E;   // > Initialization.initialize:24
            changeV();  // > Initialization.initialize:25
          }  // > Initialization.initialize:26
        }  // > Initialization.initialize:27
        clr = setColor();  // > Initialization.initialize:28
    // above is new  // > Initialization.initialize:29
    for (var i=0;i<5;i++)   // > Initialization.initialize:30
    {  // > Initialization.initialize:31
      for (var j=0;j<5;j++)   // > Initialization.initialize:32
      {  // > Initialization.initialize:33
        efield[i][j][0] = xmin/2+(i+0.5)*dx; // decommission by lookang  // > Initialization.initialize:34
        efield[i][j][1] = ymin/2+(j+0.5)*dy;// decommission by lookang  // > Initialization.initialize:35
        efield[i][j][3] = 0;// decommission by lookang  // > Initialization.initialize:36
      }  // > Initialization.initialize:37
    }  // > Initialization.initialize:38
    dy = ymax/n;  // > Initialization.initialize:39
    //n = photoncount/4; // bug found by thomas yeu  // > Initialization.initialize:40
    for (var i=0; i<n; i++)   // > Initialization.initialize:41
    {  // > Initialization.initialize:42
      xp[i] = xmax + sizep/2;  // > Initialization.initialize:43
      //yp[i] = ymax + i*dy + w2;  // > Initialization.initialize:44
      yp[i] = ymax + i*dy*0.8 + w2+size;// added 0.9 to control spread lookang  // > Initialization.initialize:45
     // yp[i] = ymax+size*11 + i*dy/4 + w2/4;  // > Initialization.initialize:46
      vp[i] = 0;  // > Initialization.initialize:47
    }  // > Initialization.initialize:48
    changeV();  // > Initialization.initialize:49
    changeI();  // > Initialization.initialize:50
    tcount = 0;  // > Initialization.initialize:51
    dragIW = false;  // > Initialization.initialize:52
    autocount = 0;  // > Initialization.initialize:53
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["efield"]) return;
    var dx = (xmax-xmin)/((nVectors-1)*2);  // > Initialization.efield:1
    var dy = (ymax-ymin)/((nVectors-1)*2);  // > Initialization.efield:2
    //var dx = (xmax-xmin)/((nVectors-1)*2);  // > Initialization.efield:3
    //var dy = (ymax-ymin)/((nVectors-1)*2);  // > Initialization.efield:4
    for (i = 0; i < nVectors; i++)  // > Initialization.efield:5
    {  // > Initialization.efield:6
      for (j = 0; j < nVectors; j++)  // > Initialization.efield:7
      {  // > Initialization.efield:8
        vectorIndex = i+nVectors*j;  // > Initialization.efield:9
       // > Initialization.efield:10
        posx[vectorIndex]=xmin/2+0.5+(dx)*i;  // > Initialization.efield:11
        posy[vectorIndex]=ymin/2+0.5+(dy)*j;  // > Initialization.efield:12
       // posx[vectorIndex]=Vectorx[vectorIndex];  // > Initialization.efield:13
       // posy[vectorIndex]=Vectory[vectorIndex];  // > Initialization.efield:14
          Vectorx[vectorIndex] = V;  // > Initialization.efield:15
        Vectory[vectorIndex] = 0;  // > Initialization.efield:16
        // + and - signs by  lookang  // > Initialization.efield:17
        posxleft[vectorIndex] = xmin/2-size;  // > Initialization.efield:18
       posyleft[vectorIndex] = ymin/2+size*1.4+(dy)*j;  // > Initialization.efield:19
        posxright[vectorIndex] = xmax/2+size;  // > Initialization.efield:20
       posyright[vectorIndex] = ymin/2+size*1.4+(dy)*j;  // > Initialization.efield:21
          // > Initialization.efield:22
      }  // > Initialization.efield:23
    }  // > Initialization.efield:24
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["graphaxes"]) return;
    _view.IvsV.getAxisX().setPosition([0,0.05]);  // > Initialization.graphaxes:1
    _view.IvsV.getTitleX().setPosition([0.95,0.1]);  // > Initialization.graphaxes:2
    _view.IvsV.getAxisY().setPosition([0.5,0]);  // > Initialization.graphaxes:3
    _view.IvsV.getTitleY().setPosition([0.5,0.85]);  // > Initialization.graphaxes:4
    _view.KEmaxvsf.getAxisX().setPosition([0,0.5]);  // > Initialization.graphaxes:5
    _view.KEmaxvsf.getTitleX().setPosition([0.95,0.5]);  // > Initialization.graphaxes:6
    _view.KEmaxvsf.getAxisY().setPosition([0.045,0]);  // > Initialization.graphaxes:7
    _view.KEmaxvsf.getTitleY().setPosition([0.1,0.85]);  // > Initialization.graphaxes:8
    _view.Ivsintensity.getAxisX().setPosition([0,0.025]);  // > Initialization.graphaxes:9
    _view.Ivsintensity.getTitleX().setPosition([0.95,0.1]);  // > Initialization.graphaxes:10
    _view.Ivsintensity.getAxisY().setPosition([0.045,0]);  // > Initialization.graphaxes:11
    _view.Ivsintensity.getTitleY().setPosition([0.1,0.85]);  // > Initialization.graphaxes:12
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.1" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.1" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    var container = document.createElement('div');  // > Initialization.svg:10
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:11
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:12
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.5" />'+  // > Initialization.svg:13
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.svg:14
      '  </radialGradient>'+  // > Initialization.svg:15
      '</defs></svg>';  // > Initialization.svg:16
    container.innerHTML = svggradient;  // > Initialization.svg:17
    document.body.appendChild(container);  // > Initialization.svg:18
    //"url(#mygrandient1)"  // > Initialization.svg:19
    var container = document.createElement('div');  // > Initialization.svg:20
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:21
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="70%" fx="90%" fy="50%">'+  // > Initialization.svg:22
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:0.2" />'+  // > Initialization.svg:23
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.2" />'+  // > Initialization.svg:24
      '  </radialGradient>'+  // > Initialization.svg:25
      '</defs></svg>';  // > Initialization.svg:26
    container.innerHTML = svggradient;  // > Initialization.svg:27
    document.body.appendChild(container);  // > Initialization.svg:28
    //"url(#mygrandient2)"  // > Initialization.svg:29
    // light green  // > Initialization.svg:30
    var container = document.createElement('div');  // > Initialization.svg:31
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:32
      '  <radialGradient id="mygrandient3" cx="50%" cy="50%" r="90%" fx="90%" fy="10%">'+  // > Initialization.svg:33
      '    <stop offset="0%" style="stop-color:rgb(0,100,255); stop-opacity:0.5" />'+  // > Initialization.svg:34
      '    <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />'+  // > Initialization.svg:35
      '  </radialGradient>'+  // > Initialization.svg:36
      '</defs></svg>';  // > Initialization.svg:37
    container.innerHTML = svggradient;  // > Initialization.svg:38
    document.body.appendChild(container);  // > Initialization.svg:39
    //"url(#mygrandient3)"  // > Initialization.svg:40
    var container = document.createElement('div');  // > Initialization.svg:41
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:42
      '  <radialGradient id="mygrandient4" cx="50%" cy="50%" r="90%" fx="90%" fy="10%">'+  // > Initialization.svg:43
      '    <stop offset="0%" style="stop-color:rgb(50,50,50); stop-opacity:0.05" />'+  // > Initialization.svg:44
      '    <stop offset="100%" style="stop-color:rgb(50,50,50);stop-opacity:0.5" />'+  // > Initialization.svg:45
      '  </radialGradient>'+  // > Initialization.svg:46
      '</defs></svg>';  // > Initialization.svg:47
    container.innerHTML = svggradient;  // > Initialization.svg:48
    document.body.appendChild(container);  // > Initialization.svg:49
    //"url(#mygrandient4)"  // > Initialization.svg:50
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg metal"]) return;
    // GOLD  // > Initialization.svg metal:1
    var container = document.createElement('div');  // > Initialization.svg metal:2
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:3
      '  <radialGradient id="gold" cx="50%" cy="50%" r="90%" fx="90%" fy="10%">'+  // > Initialization.svg metal:4
      '    <stop offset="0%" style="stop-color:rgb(50,50,50); stop-opacity:0.02" />'+  // > Initialization.svg metal:5
      '    <stop offset="100%" style="stop-color:rgb(255,223,40);stop-opacity:0.9" />'+  // > Initialization.svg metal:6
      '  </radialGradient>'+  // > Initialization.svg metal:7
      '</defs></svg>';  // > Initialization.svg metal:8
    container.innerHTML = svggradient;  // > Initialization.svg metal:9
    document.body.appendChild(container);  // > Initialization.svg metal:10
    //"url(#gold)"  // > Initialization.svg metal:11
    //PLATINUM  // > Initialization.svg metal:12
    var container = document.createElement('div');  // > Initialization.svg metal:13
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:14
      '  <radialGradient id="platinum" cx="50%" cy="50%" r="80%" fx="80%" fy="30%">'+  // > Initialization.svg metal:15
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.8" />'+  // > Initialization.svg metal:16
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.svg metal:17
      '  </radialGradient>'+  // > Initialization.svg metal:18
      '</defs></svg>';  // > Initialization.svg metal:19
    container.innerHTML = svggradient;  // > Initialization.svg metal:20
    document.body.appendChild(container);  // > Initialization.svg metal:21
    //"url(#platinum)"  // > Initialization.svg metal:22
    //SILVER  // > Initialization.svg metal:23
    var container = document.createElement('div');  // > Initialization.svg metal:24
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:25
      '  <radialGradient id="silver" cx="50%" cy="50%" r="80%" fx="80%" fy="30%">'+  // > Initialization.svg metal:26
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.1" />'+  // > Initialization.svg metal:27
      '    <stop offset="100%" style="stop-color:rgb(220,220,220);stop-opacity:0.5" />'+  // > Initialization.svg metal:28
      '  </radialGradient>'+  // > Initialization.svg metal:29
      '</defs></svg>';  // > Initialization.svg metal:30
    container.innerHTML = svggradient;  // > Initialization.svg metal:31
    document.body.appendChild(container);  // > Initialization.svg metal:32
    //"url(#silver)"  // > Initialization.svg metal:33
    //Mg  // > Initialization.svg metal:34
    var container = document.createElement('div');  // > Initialization.svg metal:35
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:36
      '  <radialGradient id="magnesium" cx="50%" cy="50%" r="80%" fx="80%" fy="30%">'+  // > Initialization.svg metal:37
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.1" />'+  // > Initialization.svg metal:38
      '    <stop offset="100%" style="stop-color:rgb(240,240,240);stop-opacity:0.8" />'+  // > Initialization.svg metal:39
      '  </radialGradient>'+  // > Initialization.svg metal:40
      '</defs></svg>';  // > Initialization.svg metal:41
    container.innerHTML = svggradient;  // > Initialization.svg metal:42
    document.body.appendChild(container);  // > Initialization.svg metal:43
    //"url(#magnesium)"  // > Initialization.svg metal:44
    //Th  // > Initialization.svg metal:45
    var container = document.createElement('div');  // > Initialization.svg metal:46
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:47
      '  <radialGradient id="thorium" cx="50%" cy="50%" r="80%" fx="80%" fy="30%">'+  // > Initialization.svg metal:48
      '    <stop offset="0%" style="stop-color:rgb(30,30,30); stop-opacity:0.02" />'+  // > Initialization.svg metal:49
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.svg metal:50
      '  </radialGradient>'+  // > Initialization.svg metal:51
      '</defs></svg>';  // > Initialization.svg metal:52
    container.innerHTML = svggradient;  // > Initialization.svg metal:53
    document.body.appendChild(container);  // > Initialization.svg metal:54
    //"url(#thorium)"  // > Initialization.svg metal:55
    //Ca  // > Initialization.svg metal:56
    var container = document.createElement('div');  // > Initialization.svg metal:57
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:58
      '  <radialGradient id="calcium" cx="50%" cy="50%" r="80%" fx="80%" fy="30%">'+  // > Initialization.svg metal:59
      '    <stop offset="0%" style="stop-color:rgb(30,30,30); stop-opacity:0.5" />'+  // > Initialization.svg metal:60
      '    <stop offset="100%" style="stop-color:rgb(200,200,200);stop-opacity:1" />'+  // > Initialization.svg metal:61
      '  </radialGradient>'+  // > Initialization.svg metal:62
      '</defs></svg>';  // > Initialization.svg metal:63
    container.innerHTML = svggradient;  // > Initialization.svg metal:64
    document.body.appendChild(container);  // > Initialization.svg metal:65
    //"url(#calcium)"  // > Initialization.svg metal:66
    //Rb  // > Initialization.svg metal:67
    var container = document.createElement('div');  // > Initialization.svg metal:68
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:69
      '  <radialGradient id="rubidium" cx="50%" cy="50%" r="80%" fx="80%" fy="30%">'+  // > Initialization.svg metal:70
      '    <stop offset="0%" style="stop-color:rgb(50,50,50); stop-opacity:0.5" />'+  // > Initialization.svg metal:71
      '    <stop offset="100%" style="stop-color:rgb(160,160,160);stop-opacity:1" />'+  // > Initialization.svg metal:72
      '  </radialGradient>'+  // > Initialization.svg metal:73
      '</defs></svg>';  // > Initialization.svg metal:74
    container.innerHTML = svggradient;  // > Initialization.svg metal:75
    document.body.appendChild(container);  // > Initialization.svg metal:76
    //"url(#rubidium)"  // > Initialization.svg metal:77
    //Fe  // > Initialization.svg metal:78
    var container = document.createElement('div');  // > Initialization.svg metal:79
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg metal:80
      '  <radialGradient id="iron" cx="50%" cy="50%" r="80%" fx="80%" fy="30%">'+  // > Initialization.svg metal:81
      '    <stop offset="0%" style="stop-color:rgb(50,50,50); stop-opacity:0.8" />'+  // > Initialization.svg metal:82
      '    <stop offset="100%" style="stop-color:rgb(183,65,14);stop-opacity:1" />'+  // > Initialization.svg metal:83
      '  </radialGradient>'+  // > Initialization.svg metal:84
      '</defs></svg>';  // > Initialization.svg metal:85
    container.innerHTML = svggradient;  // > Initialization.svg metal:86
    document.body.appendChild(container);  // > Initialization.svg metal:87
    //"url(#iron)"  // > Initialization.svg metal:88
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["ode"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["relation"]) return;
    //TT added 2 temporary variables to round off the t value to 2 decimal place  // > FixedRelations.relation:1
    //var temp = dValue(t);  // > FixedRelations.relation:2
    //var temp1 = parseFloat(Math.round(temp * 100)/100).toFixed(2);  // > FixedRelations.relation:3
    //l_t = "t=" + dValue(t) + " s"; // decommission by lookang  // > FixedRelations.relation:4
    if (_isPlaying)  // > FixedRelations.relation:5
    {  // > FixedRelations.relation:6
      tcount++;   // > FixedRelations.relation:7
      if (record > 1)  // > FixedRelations.relation:8
      {  // > FixedRelations.relation:9
        if (auto)  // > FixedRelations.relation:10
        {  // > FixedRelations.relation:11
          V += dv;  // > FixedRelations.relation:12
          if(V > Vmax)  // > FixedRelations.relation:13
          {  // > FixedRelations.relation:14
            V -= dv;  // > FixedRelations.relation:15
            playpause(); // decommission by lookang  // > FixedRelations.relation:16
            text = "paused and end data collection";  // > FixedRelations.relation:17
            linkmin = 1;  // > FixedRelations.relation:18
          }  // > FixedRelations.relation:19
          else   // > FixedRelations.relation:20
          {  // > FixedRelations.relation:21
            changeV();  // > FixedRelations.relation:22
            record = 0;  // > FixedRelations.relation:23
          }  // > FixedRelations.relation:24
        }  // > FixedRelations.relation:25
      }  // > FixedRelations.relation:26
        // > FixedRelations.relation:27
      if (tcount > tmode)  // > FixedRelations.relation:28
      { // count it with tmode time interval  // > FixedRelations.relation:29
         tcount = 0;  // > FixedRelations.relation:30
         if (record > 0)  // > FixedRelations.relation:31
         {  // > FixedRelations.relation:32
            Is = Icount*1.0/T*Iscale;  // > FixedRelations.relation:33
            if (auto && record === 1)   // > FixedRelations.relation:34
            {  // > FixedRelations.relation:35
              I = Is;  // > FixedRelations.relation:36
            }  // > FixedRelations.relation:37
            else   // > FixedRelations.relation:38
            {  // > FixedRelations.relation:39
              I = ((record-1)*I+Is)/record;// use average value  // > FixedRelations.relation:40
            }    // > FixedRelations.relation:41
         }  // > FixedRelations.relation:42
         Icount = 0;  // > FixedRelations.relation:43
         record++;  // > FixedRelations.relation:44
         if (record > 1)  // > FixedRelations.relation:45
         {  // > FixedRelations.relation:46
           Imeasurecount = record-1;  // > FixedRelations.relation:47
         }  // > FixedRelations.relation:48
         else   // > FixedRelations.relation:49
         {  // > FixedRelations.relation:50
           Imeasurecount = 0;  // > FixedRelations.relation:51
         }    // > FixedRelations.relation:52
      }  // > FixedRelations.relation:53
      for(var i=0;i<5;i++)  // > FixedRelations.relation:54
      {  // > FixedRelations.relation:55
        //TT added Math.round to get integer values for the index  // > FixedRelations.relation:56
      //  id = Math.round(Math.random()*n);  // > FixedRelations.relation:57
         id = parseInt(Math.random()*n);  // > FixedRelations.relation:58
          // > FixedRelations.relation:59
        if (vp[id] === 0 && !moving[id])  // > FixedRelations.relation:60
        {  // > FixedRelations.relation:61
          if (Math.random()*10 < lightIntensity)  // > FixedRelations.relation:62
          {  // > FixedRelations.relation:63
            show[id] = true;  // > FixedRelations.relation:64
          //showphoton[id]=  show[id] = true;  // > FixedRelations.relation:65
          // showphoton[id]=  show[id] ;  // > FixedRelations.relation:66
          }   // > FixedRelations.relation:67
          vp[id] = pv/10; // reduce /10 to animate velocity photons slower  // > FixedRelations.relation:68
          count++;  // > FixedRelations.relation:69
        }  // > FixedRelations.relation:70
      }  // > FixedRelations.relation:71
        // > FixedRelations.relation:72
      for (var i=0; i<n; i++)  // > FixedRelations.relation:73
      {   // > FixedRelations.relation:74
        if(xp[i] < x1-sizep/2)  // > FixedRelations.relation:75
        {// light hit electrode  // > FixedRelations.relation:76
          xp[i] = xmax + sizep/2;  // > FixedRelations.relation:77
        //  yp[i] = ymax + i*dy + w2;  // > FixedRelations.relation:78
            yp[i] = ymax + i*dy*0.8 + w2+size; // added 0.9 to control spread lookang  // > FixedRelations.relation:79
        //  yp[i] = ymax +size*11+ i*dy/4 + w2/4;  // > FixedRelations.relation:80
          vp[i] = 0;  // > FixedRelations.relation:81
          // added 20% chance of photons will emit electron requested by leongster  // > FixedRelations.relation:82
        //  ecount++;  // > FixedRelations.relation:83
        if (Math.random()<0.2){  // > FixedRelations.relation:84
          ecount++; // add electron count  // > FixedRelations.relation:85
           x[i] = x1;  // > FixedRelations.relation:86
         // y[i] = y1+i*dy/2 + i*dy/4; // added /3 to reduce spreding of plates  // > FixedRelations.relation:87
         //    y[i] = y1 +h/2+  i*dy/4; // added /3 to reduce spreding of plates  // > FixedRelations.relation:88
          y[i] = y1 +  i*dy*0.8+ w2+size; // added 0.9 to control spread lookang  // > FixedRelations.relation:89
          }  // > FixedRelations.relation:90
          else {  // > FixedRelations.relation:91
          ecount=ecount; // do ntg    // > FixedRelations.relation:92
            }  // > FixedRelations.relation:93
            // > FixedRelations.relation:94
           // > FixedRelations.relation:95
     //   if (E > W+0.005)  // > FixedRelations.relation:96
         if ((E > W+0.005))   // > FixedRelations.relation:97
          {  // > FixedRelations.relation:98
           // vx[i] = Math.sqrt(2*(E-W)*Math.random()/m);  // > FixedRelations.relation:99
             v[i] = Math.sqrt(2*(E-W)*Math.random()/m);  // > FixedRelations.relation:100
             theta[i] = (Math.random()*0.8-0.8/2); // use 1.5 instead of pi to limit spread  // > FixedRelations.relation:101
             vx[i]=v[i]*Math.cos(theta[i]);  // > FixedRelations.relation:102
              vy[i]=v[i]*Math.sin(theta[i]);  // > FixedRelations.relation:103
              textelectrons[i] = ""+i;  // > FixedRelations.relation:104
            // add by lookang for vy  // > FixedRelations.relation:105
           // if ( V ===0){  // > FixedRelations.relation:106
              // introduce vy[i]  // > FixedRelations.relation:107
                 // > FixedRelations.relation:108
                // > FixedRelations.relation:109
             // }  // > FixedRelations.relation:110
              // > FixedRelations.relation:111
            //TT to scale the displayed red velocity arrows.   // > FixedRelations.relation:112
            //BUT the arrow doesnt change according to the direction of the electrons.   // > FixedRelations.relation:113
            //NEED to find the variable that store the state of dx[i] (from the Evolution page).  // > FixedRelations.relation:114
            //l_debug = "vx[" + i + "]=" + vx[i];   // > FixedRelations.relation:115
            //vxscale[i] = vx[i]*scale;     // > FixedRelations.relation:116
            //  // > FixedRelations.relation:117
              // > FixedRelations.relation:118
            moving[i] = true;  // > FixedRelations.relation:119
            // add ability to hide electrons completely showlight=true;  // > FixedRelations.relation:120
        if (showlight===true){  // > FixedRelations.relation:121
              showe[i]=true;  // > FixedRelations.relation:122
              }  // > FixedRelations.relation:123
              else{  // > FixedRelations.relation:124
              // > FixedRelations.relation:125
            showe[i] = showphoton[i]=show[i];  // > FixedRelations.relation:126
            showv[i] = show[i] && showV;  // > FixedRelations.relation:127
            }  // > FixedRelations.relation:128
          //   showe[i] = showphoton[i]=show[i];  // > FixedRelations.relation:129
          //  showv[i] = show[i] && showV;  // > FixedRelations.relation:130
              // > FixedRelations.relation:131
              // > FixedRelations.relation:132
        //  showv[i] = showphoton[i] && showV;  // > FixedRelations.relation:133
          }  // > FixedRelations.relation:134
          else  // > FixedRelations.relation:135
          {  // > FixedRelations.relation:136
           showphoton[i]= show[i]=false;  // > FixedRelations.relation:137
          }    // > FixedRelations.relation:138
        }  // > FixedRelations.relation:139
           // > FixedRelations.relation:140
           // > FixedRelations.relation:141
        if (moving[i] === true && (x[i] > x2 || x[i] < x1))  // > FixedRelations.relation:142
        {// reach electrode  // > FixedRelations.relation:143
          if (x[i] > x2)   // > FixedRelations.relation:144
          {  // > FixedRelations.relation:145
            Icount++;// current add 1  // > FixedRelations.relation:146
          }    // > FixedRelations.relation:147
          moving[i]= showphoton[i]= show[i] = showe[i] = showv[i] = false; // hide it  // > FixedRelations.relation:148
           // > FixedRelations.relation:149
          count--; // debug purpose  // > FixedRelations.relation:150
        }  // > FixedRelations.relation:151
      }  // > FixedRelations.relation:152
        // > FixedRelations.relation:153
      control = false;  // > FixedRelations.relation:154
    }  // > FixedRelations.relation:155
    else  // > FixedRelations.relation:156
    {  // > FixedRelations.relation:157
     control = Ipts > 4;  // > FixedRelations.relation:158
    }  // > FixedRelations.relation:159
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["changeV()"]) return;
    changeV();  // > FixedRelations.changeV():1
    //ensures battery appears at correct time  // > FixedRelations.changeV():2
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Visibility"]) return;
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["world"]) return;
    if ((xvst===false)&&(vvst===false)&&(avst===false)){  // > FixedRelations.world:1
    // graph=false;   // > FixedRelations.world:2
     Width1="100%";  // > FixedRelations.world:3
     Width2="0%";  // > FixedRelations.world:4
     Widthv="0%";  // > FixedRelations.world:5
     Widtha="0%";  // > FixedRelations.world:6
      disabledworld=true;  // > FixedRelations.world:7
      }  // > FixedRelations.world:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["efield"]) return;
    for (i = 0; i < nVectors; i++)  // > FixedRelations.efield:1
    {  // > FixedRelations.efield:2
      for (j = 0; j < nVectors; j++)  // > FixedRelations.efield:3
      {  // > FixedRelations.efield:4
        vectorIndex = i+nVectors*j;  // > FixedRelations.efield:5
       // > FixedRelations.efield:6
       // posx[vectorIndex]=xmin/2+0.5+(dx)*i;  // > FixedRelations.efield:7
      //  posy[vectorIndex]=ymin/2+0.5+(dy)*j;  // > FixedRelations.efield:8
       // posx[vectorIndex]=Vectorx[vectorIndex];  // > FixedRelations.efield:9
       // posy[vectorIndex]=Vectory[vectorIndex];  // > FixedRelations.efield:10
          Fieldx[vectorIndex] = -V*5;  // > FixedRelations.efield:11
        Fieldy[vectorIndex] = 0;  // > FixedRelations.efield:12
          // > FixedRelations.efield:13
        // + and - signs by  lookang  // > FixedRelations.efield:14
         // > FixedRelations.efield:15
      }  // > FixedRelations.efield:16
    }  // > FixedRelations.efield:17
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    freq = 3000/lambda;   // > FixedRelations.FixRel Page:1
    E = 1240/lambda;  // > FixedRelations.FixRel Page:2
    freqstopping = W/0.41;  // > FixedRelations.FixRel Page:3
    omega = pi/(E-W+0.5); // for sine fit  // > FixedRelations.FixRel Page:4
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["graphs"]) return;
    //if ((E-W)<=0){  // > FixedRelations.graphs:1
    if (  V<-(E-W)){  // > FixedRelations.graphs:2
     // currenttext ="current="+_view._format(0,"0.00")+ " nA"+" , Current_calculated I=" + _view._format(I,"0.0")+ " nA ";  // > FixedRelations.graphs:3
      currenttext ="current="+_view._format(0,"0.00")+ " nA";  // > FixedRelations.graphs:4
       // > FixedRelations.graphs:5
      }  // > FixedRelations.graphs:6
    else {  // > FixedRelations.graphs:7
    //if ( V<0) {  // > FixedRelations.graphs:8
     if( (V>-(E-W))&&(V<0.6*(E-W))){  // > FixedRelations.graphs:9
    // currenttext = "current="+_view._format(Math.max(photoncount*80/60/(E-W)*V+photoncount*80/60,0),"0.00")+ " nA"+" , Current_calculated I=" + _view._format(I,"0.0")+ " nA ";  // > FixedRelations.graphs:10
    //  currenttext = "current="+_view._format(Math.max(photoncount*80/60/(E-W)*V+photoncount*80/60,0),"0.00")+ " nA";  // > FixedRelations.graphs:11
     currenttext = "current="+_view._format(photoncount*42/60*+1*slider/(E-W)*(V)/Math.sqrt(1+slider/(E-W)*(V)*(slider/(E-W)*(V)))+photoncount*41/60  // > FixedRelations.graphs:12
    ,"0.00")+ " nA";  // > FixedRelations.graphs:13
     }  // > FixedRelations.graphs:14
     // else if (V>=0){  // > FixedRelations.graphs:15
       else if( (V>=0.6*(E-W))&&(E-W)>0){  // > FixedRelations.graphs:16
     //currenttext ="current="+_view._format(80/60*photoncount,"0.00")+ " nA"+" , Current_calculated I=" + _view._format(I,"0.0")+ " nA ";  // > FixedRelations.graphs:17
     //currenttext ="current="+_view._format(80/60*photoncount,"0.00")+ " nA";  // > FixedRelations.graphs:18
     currenttext ="current="+_view._format(80/60*photoncount,"0.00")+ " nA";  // > FixedRelations.graphs:19
       // > FixedRelations.graphs:20
     }  // > FixedRelations.graphs:21
     else if((E-W)<=0)  {  // > FixedRelations.graphs:22
        currenttext ="current="+_view._format(0,"0.00")+ " nA";  // > FixedRelations.graphs:23
       }  // > FixedRelations.graphs:24
       // > FixedRelations.graphs:25
       // > FixedRelations.graphs:26
     }  // > FixedRelations.graphs:27
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["colorlookang"]) return;
    //https://en.wikipedia.org/wiki/Visible_spectrum  // > FixedRelations.colorlookang:1
    //for colour of light (transparency affected by intensity)  // > FixedRelations.colorlookang:2
    trans=photoncount/100  // > FixedRelations.colorlookang:3
    //to make colour transition smooth  // > FixedRelations.colorlookang:4
    varC1 = 127 - (lambda - 380)/70*127;  // > FixedRelations.colorlookang:5
    varC2 = (lambda - 450)/45*255;  // > FixedRelations.colorlookang:6
    varC3 = 255-(lambda - 450)/45*255;  // > FixedRelations.colorlookang:7
    varC4 = (lambda - 495)/75*255;  // > FixedRelations.colorlookang:8
    varC5 = 255 - (lambda-570)/20*127;  // > FixedRelations.colorlookang:9
    varC6 = 127 - (lambda - 590)/30*127;  // > FixedRelations.colorlookang:10
    if (lambda<380) {  // > FixedRelations.colorlookang:11
    vcolor = rgb(255,255,255,0);   // > FixedRelations.colorlookang:12
    }  // > FixedRelations.colorlookang:13
    else if (lambda>=380&&lambda<450) { //violet https://en.wikipedia.org/wiki/Violet_(color)  // > FixedRelations.colorlookang:14
    vcolor = rgb(Math.round(varC1),0,255,trans);  // > FixedRelations.colorlookang:15
    }  // > FixedRelations.colorlookang:16
    else if (lambda>=450&&lambda<495) { //https://en.wikipedia.org/wiki/Blue  // > FixedRelations.colorlookang:17
    vcolor = rgb(0,Math.round(varC2),Math.round(varC3),trans);  // > FixedRelations.colorlookang:18
    }  // > FixedRelations.colorlookang:19
    else if (lambda>=495&&lambda<570) { //https://en.wikipedia.org/wiki/Green  // > FixedRelations.colorlookang:20
    vcolor = rgb(Math.round(varC4),255,0,trans);  // > FixedRelations.colorlookang:21
    }  // > FixedRelations.colorlookang:22
    else if (lambda>=570&&lambda<590) { //https://en.wikipedia.org/wiki/Yellow  // > FixedRelations.colorlookang:23
    vcolor = rgb(255,Math.round(varC5),0,trans);  // > FixedRelations.colorlookang:24
    }  // > FixedRelations.colorlookang:25
    else if (lambda>=590&&lambda<620) { //https://en.wikipedia.org/wiki/Orange_(colour)  // > FixedRelations.colorlookang:26
    vcolor = rgb(255,Math.round(varC6),0,trans);  // > FixedRelations.colorlookang:27
    }  // > FixedRelations.colorlookang:28
    else if (lambda>=620&&lambda<=750) { //https://en.wikipedia.org/wiki/Red  // > FixedRelations.colorlookang:29
    vcolor = rgb(255,0,0,trans);  // > FixedRelations.colorlookang:30
    }  // > FixedRelations.colorlookang:31
    else if (lambda>750) { //https://en.wikipedia.org/wiki/Visible_spectrum  // > FixedRelations.colorlookang:32
    vcolor = rgb(255,255,255,0);  // > FixedRelations.colorlookang:33
    }  // > FixedRelations.colorlookang:34
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["colorlookang2"]) return;
    // for colour of photons   // > FixedRelations.colorlookang2:1
    if (lambda<380) {  // > FixedRelations.colorlookang2:2
    vcolor2 = rgb(255,255,255,0);   // > FixedRelations.colorlookang2:3
    }  // > FixedRelations.colorlookang2:4
    else if (lambda>=380&&lambda<450) {  // > FixedRelations.colorlookang2:5
       //violet https://en.wikipedia.org/wiki/Violet_(color)  // > FixedRelations.colorlookang2:6
         // > FixedRelations.colorlookang2:7
    vcolor2 = rgb(127,0,255,1);  // > FixedRelations.colorlookang2:8
    }  // > FixedRelations.colorlookang2:9
    else if (lambda>=450&&lambda<495) { //https://en.wikipedia.org/wiki/Blue  // > FixedRelations.colorlookang2:10
    vcolor2 = rgb(0,0,255,1);  // > FixedRelations.colorlookang2:11
    }  // > FixedRelations.colorlookang2:12
    else if (lambda>=495&&lambda<570) { //https://en.wikipedia.org/wiki/Green  // > FixedRelations.colorlookang2:13
    vcolor2 = rgb(0,255,0,1);  // > FixedRelations.colorlookang2:14
    }  // > FixedRelations.colorlookang2:15
    else if (lambda>=570&&lambda<590) { //https://en.wikipedia.org/wiki/Yellow  // > FixedRelations.colorlookang2:16
    vcolor2 = rgb(255,255,0,1);  // > FixedRelations.colorlookang2:17
    }  // > FixedRelations.colorlookang2:18
    else if (lambda>=590&&lambda<620) { //https://en.wikipedia.org/wiki/Orange_(colour)  // > FixedRelations.colorlookang2:19
    vcolor2 = rgb(255,127,0,1);  // > FixedRelations.colorlookang2:20
    }  // > FixedRelations.colorlookang2:21
    else if (lambda>=620&&lambda<=750) { //https://en.wikipedia.org/wiki/Red  // > FixedRelations.colorlookang2:22
    vcolor2 = rgb(255,0,0,1);  // > FixedRelations.colorlookang2:23
    }  // > FixedRelations.colorlookang2:24
    else if (lambda>750) { //https://en.wikipedia.org/wiki/Visible_spectrum  // > FixedRelations.colorlookang2:25
    vcolor2 = rgb(255,255,255,0);  // > FixedRelations.colorlookang2:26
    }  // > FixedRelations.colorlookang2:27
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page 2"]) return;
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axes"]) return;
    if (_model.isPlaying()===true) { //NEED this for conflict with initialize page values  // > FixedRelations.axes:1
    _view.IvsV.getAxisX().setAbsoluteY(_view.IvsV.getGrid().getFixedTickY());  // > FixedRelations.axes:2
    _view.IvsV.getAxisY().setAbsoluteX(_view.IvsV.getGrid().getFixedTickX());  // > FixedRelations.axes:3
    }  // > FixedRelations.axes:4
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["slider"]) return;
    // for wavelength button  // > FixedRelations.slider:1
    wbuttondist = wbutton2X-wbuttonX-wbuttonSizeX/2-wbutton2SizeX/2;  // > FixedRelations.slider:2
    if (wbuttonX>=wbuttonmax) wbuttonX=wbuttonmax   // > FixedRelations.slider:3
    if (wbuttonX<=wbuttonmin) wbuttonX=wbuttonmin  // > FixedRelations.slider:4
    if (lambda>=900) lambda = 900  // > FixedRelations.slider:5
    if (lambda<=250) lambda = 250  // > FixedRelations.slider:6
    //for intensity button  // > FixedRelations.slider:7
    ibuttondist = ibutton2X-ibuttonX-ibuttonSizeX/2-ibutton2SizeX/2  // > FixedRelations.slider:8
    if (ibuttonX>=ibuttonmax) ibuttonX=ibuttonmax   // > FixedRelations.slider:9
    if (ibuttonX<=ibuttonmin) ibuttonX=ibuttonmin  // > FixedRelations.slider:10
    if (photoncount>=100) photoncount = 100  // > FixedRelations.slider:11
    if (photoncount<=0) photoncount = 0  // > FixedRelations.slider:12
    // for metal button  // > FixedRelations.slider:13
    if (mbuttonY >= mbuttonmax) mbuttonY = mbuttonmax  // > FixedRelations.slider:14
    if (mbuttonY <= mbuttonmin) mbuttonY = mbuttonmin  // > FixedRelations.slider:15
    mbuttondist = mbuttonY - mbutton2Y - mbuttonSizeY/2 - mbutton2SizeY/2  // > FixedRelations.slider:16
    // for voltage button  // > FixedRelations.slider:17
    vbuttondist = vbutton2X-vbuttonX-vbuttonSizeX/2-vbutton2SizeX/2;  // > FixedRelations.slider:18
    if (vbuttonX>=vbuttonmax) vbuttonX=vbuttonmax   // > FixedRelations.slider:19
    if (vbuttonX<=vbuttonmin) vbuttonX=vbuttonmin  // > FixedRelations.slider:20
    if (V>=2.5) V = 2.5  // > FixedRelations.slider:21
    if (V<=-2.5) V = -2.5  // > FixedRelations.slider:22
    // for varyingMetal  // > FixedRelations.slider:23
    varMdist=varMY-(-(h+size)/2)  // > FixedRelations.slider:24
    if (varMY<=(-(h+size)/2)){  // > FixedRelations.slider:25
      varMY = -(h+size)/2}  // > FixedRelations.slider:26
    if (varMY> (-(h+size)/2 +size*21)){  // > FixedRelations.slider:27
      varMY= (-(h+size)/2 +size*21)}  // > FixedRelations.slider:28
    //restricted movement of button along y axis  // > FixedRelations.slider:29
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["varM"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="ode") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _xLength;
    var _vxLength;
    var _yLength;
    var _vyLength;
    var _xpLength;
    var _ypLength;

    __odeSelf._getOdeVars = function (){ return["x","vx","y","vy","xp","yp","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _xLength = x.length;
      _vxLength = vx.length;
      _yLength = y.length;
      _vyLength = vy.length;
      _xpLength = xp.length;
      _ypLength = yp.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xLength; __j++)
          if (__state[__n++]!=x[__j] || __state[__n++]!=vx[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_yLength; __j++)
          if (__state[__n++]!=y[__j] || __state[__n++]!=vy[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xpLength; __j++)
           if (__state[__n++]!=xp[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_xpLength; __j++) {
          __state[__cIn++] = xp[__j];
        }
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_ypLength; __j++)
           if (__state[__n++]!=yp[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_ypLength; __j++) {
          __state[__cIn++] = yp[__j];
        }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_xLength != x.length) return true;
      if (_vxLength != vx.length) return true;
      if (_yLength != y.length) return true;
      if (_vyLength != vy.length) return true;
      if (_xpLength != xp.length) return true;
      if (_ypLength != yp.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
      var _errorCode = __eventSolver.getErrorCode();
      if (__pagesEnabled["Error handling code"]) {
        { // For any error: 
        }
      }
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_xpLength; __i++) {
          xp[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_ypLength; __i++) {
          yp[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var xp = [];
        for (__i=0;__i<_xpLength; __i++) {
          xp[__i] = _aState[__cOut++];
        }
        var yp = [];
        for (__i=0;__i<_ypLength; __i++) {
          yp[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        // ax = V/(m*(x2-x1));  // > Preliminary code for ODE.ode:1
        // newtons 1 law  // > Preliminary code for ODE.ode:2
         for (var i=0; i<n; i++)  // > Preliminary code for ODE.ode:3
          {   // > Preliminary code for ODE.ode:4
          if ((y[i]>-h/2)&&(y[i]<h/2)){ // inisde plates  // > Preliminary code for ODE.ode:5
          ax[i] = q*V/(x2-x1)/m;  // > Preliminary code for ODE.ode:6
          }  // > Preliminary code for ODE.ode:7
            else {  // > Preliminary code for ODE.ode:8
            ax[i] =0;   // > Preliminary code for ODE.ode:9
              }  // > Preliminary code for ODE.ode:10
        }  // > Preliminary code for ODE.ode:11
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_xLength;i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(vx[i]) ? vx[i][i] : vx[i]; // Rate for ODE: ode:x
          _aRate[__cRate++] = Array.isArray(ax[i]) ? ax[i][i] : ax[i]; // Rate for ODE: ode:vx
        }
        for (i=0;i<_yLength;i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(vy[i]) ? vy[i][i] : vy[i]; // Rate for ODE: ode:y
          _aRate[__cRate++] = Array.isArray(0) ? 0[i] : 0; // Rate for ODE: ode:vy
        }
        for (i=0;i<_xpLength;i++) {
          _aRate[__cRate++] = Array.isArray(vp[i]) ? vp[i][i] : vp[i]; // Rate for ODE: ode:xp
        }
        for (i=0;i<_ypLength;i++) {
          _aRate[__cRate++] = Array.isArray(vp[i]) ? vp[i][i] : vp[i]; // Rate for ODE: ode:yp
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var y = [];
        var vy = [];
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = _aState[__cOut++];
          vy[__i] = _aState[__cOut++];
        }
        var xp = [];
        for (__i=0;__i<_xpLength; __i++) {
          xp[__i] = _aState[__cOut++];
        }
        var yp = [];
        for (__i=0;__i<_ypLength; __i++) {
          yp[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        for (__i=0; __i<_yLength; __i++) { // These two alternate in the state
          y[__i] = __state[__cOut++];
          vy[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_xpLength; __i++) {
          xp[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_ypLength; __i++) {
          yp[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
      for (__j=0; __j<_yLength; __j++) { // These two alternate in the state
         __state[__cIn++] = y[__j];
         __state[__cIn++] = vy[__j];
      }
        for (__j=0;__j<_xpLength; __j++) {
          __state[__cIn++] = xp[__j];
        }
        for (__j=0;__j<_ypLength; __j++) {
          __state[__cIn++] = yp[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(x.length),__beginIndex,x.ength);
  }

  function _historic_vx(__time) {
    var __beginIndex = 0 + x.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(vx.length),__beginIndex,vx.ength);
  }

  function _historic_y(__time) {
    var __beginIndex = 0 + x.length + vx.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(y.length),__beginIndex,y.ength);
  }

  function _historic_vy(__time) {
    var __beginIndex = 0 + x.length + vx.length + y.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(vy.length),__beginIndex,vy.ength);
  }

  function _historic_xp(__time) {
    var __beginIndex = 0 + x.length + vx.length + y.length + vy.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(xp.length),__beginIndex,xp.ength);
  }

  function _historic_yp(__time) {
    var __beginIndex = 0 + x.length + vx.length + y.length + vy.length + xp.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(yp.length),__beginIndex,yp.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new photoelectriceffectwee3_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return changeOrientation() ; }, function(_v) { changeOrientation()  = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.displayPanel.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'displayPanel'
          _view.worldview.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'worldview'
          _view.worldview.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'worldview'
          _view.worldview.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'worldview'
          _view.worldview.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'worldview'
          _view.worldview.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'worldview'
          _view.worldview.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'worldview'
          _view.worldview.linkProperty("Visibility",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Visibility' for element 'worldview'
          _view.worldview.setAction("OnOrientationChange", function(_data,_info) {
  changeOrientation();

}); // HtmlView Page setting action 'OnOrientationChange' for element 'worldview'
          _view.photons.linkProperty("NumberOfElements",  function() { return n*photoncount/100; } ); // HtmlView Page linking property 'NumberOfElements' for element 'photons'
          _view.photons.linkProperty("Radius",  function() { return size/2; } ); // HtmlView Page linking property 'Radius' for element 'photons'
          _view.photons.linkProperty("SizeX",  function() { return sizep*lambda/500; } ); // HtmlView Page linking property 'SizeX' for element 'photons'
          _view.photons.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'photons'
          _view.photons.linkProperty("LineColor",  function() { return vcolor2; }, function(_v) { vcolor2 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'photons'
          _view.photons.linkProperty("Y",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'Y' for element 'photons'
          _view.photons.linkProperty("Visibility",  function() { return show||!showlight; } ); // HtmlView Page linking property 'Visibility' for element 'photons'
          _view.photons.linkProperty("SizeY",  function() { return sizep*lambda/500; } ); // HtmlView Page linking property 'SizeY' for element 'photons'
          _view.lightcover.linkProperty("Points",  function() { return polPts; }, function(_v) { polPts = _v; } ); // HtmlView Page linking property 'Points' for element 'lightcover'
          _view.lightcover.linkProperty("Visibility",  function() { return showlight; }, function(_v) { showlight = _v; } ); // HtmlView Page linking property 'Visibility' for element 'lightcover'
          _view.lightcover2.linkProperty("Points",  function() { return polPts; }, function(_v) { polPts = _v; } ); // HtmlView Page linking property 'Points' for element 'lightcover2'
          _view.lightcover2.linkProperty("Visibility",  function() { return showlight; }, function(_v) { showlight = _v; } ); // HtmlView Page linking property 'Visibility' for element 'lightcover2'
          _view.polygon2.linkProperty("Points",  function() { return polPts; }, function(_v) { polPts = _v; } ); // HtmlView Page linking property 'Points' for element 'polygon2'
          _view.polygon2.linkProperty("FillColor",  function() { return vcolor; }, function(_v) { vcolor = _v; } ); // HtmlView Page linking property 'FillColor' for element 'polygon2'
          _view.polygon2.linkProperty("Visibility",  function() { return showlight; }, function(_v) { showlight = _v; } ); // HtmlView Page linking property 'Visibility' for element 'polygon2'
          _view.polygon.linkProperty("Points",  function() { return polPts; }, function(_v) { polPts = _v; } ); // HtmlView Page linking property 'Points' for element 'polygon'
          _view.polygon.linkProperty("Visibility",  function() { return showlight; }, function(_v) { showlight = _v; } ); // HtmlView Page linking property 'Visibility' for element 'polygon'
          _view.lambda2.linkProperty("Y",  function() { return ymax-size*5; } ); // HtmlView Page linking property 'Y' for element 'lambda2'
          _view.lambda.linkProperty("X",  function() { return lambdadrag; }, function(_v) { lambdadrag = _v; } ); // HtmlView Page linking property 'X' for element 'lambda'
          _view.lambda.linkProperty("Visibility",  function() { return showw&&world; } ); // HtmlView Page linking property 'Visibility' for element 'lambda'
          _view.lambda.setAction("OnDrag", function(_data,_info) {
  lambdadrag= Math.round(lambdadrag);
  lambda =lambdadrag*10;
  _view.wavelength.setSelectedOptions(["select λ"]);
  if (lambdadrag<25) lambdadrag=25;
  if (lambdadrag>90) lambdadrag=90;

}); // HtmlView Page setting action 'OnDrag' for element 'lambda'
          _view.wavelength_txt.linkProperty("X",  function() { return lambdadrag; }, function(_v) { lambdadrag = _v; } ); // HtmlView Page linking property 'X' for element 'wavelength_txt'
          _view.wavelength_txt.linkProperty("Y",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'Y' for element 'wavelength_txt'
          _view.wavelength_txt.linkProperty("Text",  function() { return "λ ="+_view._format(lambda,"0")+"nm"; } ); // HtmlView Page linking property 'Text' for element 'wavelength_txt'
          _view.intensity.linkProperty("X",  function() { return -size; } ); // HtmlView Page linking property 'X' for element 'intensity'
          _view.intensity.linkProperty("Y",  function() { return ymax-size*8; } ); // HtmlView Page linking property 'Y' for element 'intensity'
          _view.i.setAction("OnExit", _play); // HtmlView Page setting action 'OnExit' for element 'i'
          _view.i.setAction("OnRelease", function(_data,_info) {
  lightIntensity=photoncount/12.0;
  changeI();

}); // HtmlView Page setting action 'OnRelease' for element 'i'
          _view.i.linkProperty("X",  function() { return photoncount; }, function(_v) { photoncount = _v; } ); // HtmlView Page linking property 'X' for element 'i'
          _view.i.setAction("OnEnter", _pause); // HtmlView Page setting action 'OnEnter' for element 'i'
          _view.i.linkProperty("Visibility",  function() { return showw&&world; } ); // HtmlView Page linking property 'Visibility' for element 'i'
          _view.i.setAction("OnPress", function(_data,_info) {
  if (photoncount<0) photoncount=0;
  if (photoncount>100) photoncount=100;
  _view.comboBox3.setSelectedOptions(["select intensity"]);

}); // HtmlView Page setting action 'OnPress' for element 'i'
          _view.intensity_txt.linkProperty("X",  function() { return photoncount; }, function(_v) { photoncount = _v; } ); // HtmlView Page linking property 'X' for element 'intensity_txt'
          _view.intensity_txt.linkProperty("Y",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'Y' for element 'intensity_txt'
          _view.intensity_txt.linkProperty("Text",  function() { return "intensity ="+_view._format(photoncount,"0")+"%"; } ); // HtmlView Page linking property 'Text' for element 'intensity_txt'
          _view.wbutton_line.linkProperty("SizeX",  function() { return 9*size; } ); // HtmlView Page linking property 'SizeX' for element 'wbutton_line'
          _view.wbutton_line.linkProperty("X",  function() { return wbutton3X; }, function(_v) { wbutton3X = _v; } ); // HtmlView Page linking property 'X' for element 'wbutton_line'
          _view.wbutton_line.linkProperty("Y",  function() { return ymax - 2*size; } ); // HtmlView Page linking property 'Y' for element 'wbutton_line'
          _view.wbutton_cover.linkProperty("SizeX",  function() { return wbuttonSizeX; }, function(_v) { wbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'wbutton_cover'
          _view.wbutton_cover.linkProperty("X",  function() { return wbuttonX; }, function(_v) { wbuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'wbutton_cover'
          _view.wbutton_cover.linkProperty("Y",  function() { return ymax - 2*size; } ); // HtmlView Page linking property 'Y' for element 'wbutton_cover'
          _view.wbutton_cover.linkProperty("SizeY",  function() { return wbuttonSizeY; }, function(_v) { wbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'wbutton_cover'
          _view.wbutton.linkProperty("SizeX",  function() { return wbuttonSizeX; }, function(_v) { wbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'wbutton'
          _view.wbutton.linkProperty("X",  function() { return wbuttonX; }, function(_v) { wbuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'wbutton'
          _view.wbutton.linkProperty("Y",  function() { return ymax - 2*size; } ); // HtmlView Page linking property 'Y' for element 'wbutton'
          _view.wbutton.linkProperty("SizeY",  function() { return wbuttonSizeY; }, function(_v) { wbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'wbutton'
          _view.wbutton.setAction("OnDrag", function(_data,_info) {
  wbuttondist = wbutton2X-wbuttonX-wbuttonSizeX/2-wbutton2SizeX/2;
  lambda =  - (wbuttondist/40)*650 + 900;

}); // HtmlView Page setting action 'OnDrag' for element 'wbutton'
          _view.wbutton2.linkProperty("SizeX",  function() { return wbutton2SizeX; }, function(_v) { wbutton2SizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'wbutton2'
          _view.wbutton2.linkProperty("X",  function() { return wbutton2X; }, function(_v) { wbutton2X = _v; } ); // HtmlView Page linking property 'X' for element 'wbutton2'
          _view.wbutton2.linkProperty("Y",  function() { return ymax-size*2; } ); // HtmlView Page linking property 'Y' for element 'wbutton2'
          _view.wbutton2.linkProperty("SizeY",  function() { return wbuttonSizeY; }, function(_v) { wbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'wbutton2'
          _view.wbutton3.linkProperty("SizeX",  function() { return wbutton2SizeX; }, function(_v) { wbutton2SizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'wbutton3'
          _view.wbutton3.linkProperty("X",  function() { return wbutton3X; }, function(_v) { wbutton3X = _v; } ); // HtmlView Page linking property 'X' for element 'wbutton3'
          _view.wbutton3.linkProperty("Y",  function() { return ymax-size*2; } ); // HtmlView Page linking property 'Y' for element 'wbutton3'
          _view.wbutton3.linkProperty("SizeY",  function() { return wbuttonSizeY; }, function(_v) { wbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'wbutton3'
          _view.ibutton_line.linkProperty("SizeX",  function() { return 9*size; } ); // HtmlView Page linking property 'SizeX' for element 'ibutton_line'
          _view.ibutton_line.linkProperty("X",  function() { return ibutton3X; }, function(_v) { ibutton3X = _v; } ); // HtmlView Page linking property 'X' for element 'ibutton_line'
          _view.ibutton_line.linkProperty("Y",  function() { return ymax - 5*size; } ); // HtmlView Page linking property 'Y' for element 'ibutton_line'
          _view.ibuttona_cover.linkProperty("SizeX",  function() { return ibuttonSizeX; }, function(_v) { ibuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ibuttona_cover'
          _view.ibuttona_cover.linkProperty("X",  function() { return ibuttonX; }, function(_v) { ibuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'ibuttona_cover'
          _view.ibuttona_cover.linkProperty("Y",  function() { return ymax - 5*size; } ); // HtmlView Page linking property 'Y' for element 'ibuttona_cover'
          _view.ibuttona_cover.linkProperty("SizeY",  function() { return ibuttonSizeY; }, function(_v) { ibuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ibuttona_cover'
          _view.ibutton.linkProperty("SizeX",  function() { return ibuttonSizeX; }, function(_v) { ibuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ibutton'
          _view.ibutton.linkProperty("X",  function() { return ibuttonX; }, function(_v) { ibuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'ibutton'
          _view.ibutton.linkProperty("Y",  function() { return ymax - 5*size; } ); // HtmlView Page linking property 'Y' for element 'ibutton'
          _view.ibutton.linkProperty("SizeY",  function() { return ibuttonSizeY; }, function(_v) { ibuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ibutton'
          _view.ibutton.setAction("OnDrag", function(_data,_info) {
  ibuttondist = ibutton2X-ibuttonX-ibuttonSizeX/2-ibutton2SizeX/2
  photoncount = - (ibuttondist)/40*100 +100
  if (ibuttonX>=ibuttonmax) ibuttonX=ibuttonmax 
  if (ibuttonX<=ibuttonmin) ibuttonX=ibuttonmin
  if (photoncount>=100) photoncount = 100
  if (photoncount<=0) photoncount = 0;

}); // HtmlView Page setting action 'OnDrag' for element 'ibutton'
          _view.ibutton2.linkProperty("SizeX",  function() { return ibutton2SizeX; }, function(_v) { ibutton2SizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ibutton2'
          _view.ibutton2.linkProperty("X",  function() { return ibutton2X; }, function(_v) { ibutton2X = _v; } ); // HtmlView Page linking property 'X' for element 'ibutton2'
          _view.ibutton2.linkProperty("Y",  function() { return ymax-size*5; } ); // HtmlView Page linking property 'Y' for element 'ibutton2'
          _view.ibutton2.linkProperty("SizeY",  function() { return ibuttonSizeY; }, function(_v) { ibuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ibutton2'
          _view.ibutton3.linkProperty("SizeX",  function() { return ibutton2SizeX; }, function(_v) { ibutton2SizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ibutton3'
          _view.ibutton3.linkProperty("X",  function() { return ibutton3X; }, function(_v) { ibutton3X = _v; } ); // HtmlView Page linking property 'X' for element 'ibutton3'
          _view.ibutton3.linkProperty("Y",  function() { return ymax-size*5; } ); // HtmlView Page linking property 'Y' for element 'ibutton3'
          _view.ibutton3.linkProperty("SizeY",  function() { return ibuttonSizeY; }, function(_v) { ibuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ibutton3'
          _view.mbutton_line.linkProperty("X",  function() { return xmin/1.4; } ); // HtmlView Page linking property 'X' for element 'mbutton_line'
          _view.mbutton_line.linkProperty("Y",  function() { return mbuttonmin-mbuttonSizeY/2; } ); // HtmlView Page linking property 'Y' for element 'mbutton_line'
          _view.mbutton_line.linkProperty("SizeY",  function() { return 8*size+mbuttonSizeY; } ); // HtmlView Page linking property 'SizeY' for element 'mbutton_line'
          _view.mbuttoncover.linkProperty("SizeX",  function() { return mbuttonSizeX; }, function(_v) { mbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'mbuttoncover'
          _view.mbuttoncover.linkProperty("X",  function() { return xmin/1.4; } ); // HtmlView Page linking property 'X' for element 'mbuttoncover'
          _view.mbuttoncover.linkProperty("Y",  function() { return mbuttonY; }, function(_v) { mbuttonY = _v; } ); // HtmlView Page linking property 'Y' for element 'mbuttoncover'
          _view.mbuttoncover.linkProperty("SizeY",  function() { return mbuttonSizeY; }, function(_v) { mbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'mbuttoncover'
          _view.mbutton.linkProperty("SizeX",  function() { return mbuttonSizeX; }, function(_v) { mbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'mbutton'
          _view.mbutton.linkProperty("X",  function() { return xmin/1.4; } ); // HtmlView Page linking property 'X' for element 'mbutton'
          _view.mbutton.linkProperty("Y",  function() { return mbuttonY; }, function(_v) { mbuttonY = _v; } ); // HtmlView Page linking property 'Y' for element 'mbutton'
          _view.mbutton.linkProperty("SizeY",  function() { return mbuttonSizeY; }, function(_v) { mbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'mbutton'
          _view.mbutton.setAction("OnDrag", function(_data,_info) {
  mbuttondist = mbuttonY - mbutton2Y - mbuttonSizeY/2 - mbutton2SizeY/2
  //W = mbuttondist/40 * 5.35 + 1;

}); // HtmlView Page setting action 'OnDrag' for element 'mbutton'
          _view.mbutton2.linkProperty("SizeX",  function() { return mbuttonSizeX; }, function(_v) { mbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'mbutton2'
          _view.mbutton2.linkProperty("X",  function() { return xmin/1.4; } ); // HtmlView Page linking property 'X' for element 'mbutton2'
          _view.mbutton2.linkProperty("Y",  function() { return mbutton2Y; }, function(_v) { mbutton2Y = _v; } ); // HtmlView Page linking property 'Y' for element 'mbutton2'
          _view.mbutton2.linkProperty("SizeY",  function() { return mbutton2SizeY; }, function(_v) { mbutton2SizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'mbutton2'
          _view.mbutton3.linkProperty("SizeX",  function() { return mbuttonSizeX; }, function(_v) { mbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'mbutton3'
          _view.mbutton3.linkProperty("X",  function() { return xmin/1.4; } ); // HtmlView Page linking property 'X' for element 'mbutton3'
          _view.mbutton3.linkProperty("Y",  function() { return mbutton3Y; }, function(_v) { mbutton3Y = _v; } ); // HtmlView Page linking property 'Y' for element 'mbutton3'
          _view.mbutton3.linkProperty("SizeY",  function() { return mbutton2SizeY; }, function(_v) { mbutton2SizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'mbutton3'
          _view.workfunction.linkProperty("X",  function() { return xmin/1.2; } ); // HtmlView Page linking property 'X' for element 'workfunction'
          _view.workfunction.linkProperty("Y",  function() { return ymax/3; } ); // HtmlView Page linking property 'Y' for element 'workfunction'
          _view.workfunction3.linkProperty("X",  function() { return xmin/1.2; } ); // HtmlView Page linking property 'X' for element 'workfunction3'
          _view.workfunction3.linkProperty("Y",  function() { return ymax/3.8; } ); // HtmlView Page linking property 'Y' for element 'workfunction3'
          _view.workfunction3.linkProperty("Text",  function() { return "= "+_view._format(W,"0.0")+"eV"; } ); // HtmlView Page linking property 'Text' for element 'workfunction3'
          _view.marker.linkProperty("FillColor",  function() { return photoncolor; }, function(_v) { photoncolor = _v; } ); // HtmlView Page linking property 'FillColor' for element 'marker'
          _view.marker.linkProperty("X",  function() { return xmin/2; } ); // HtmlView Page linking property 'X' for element 'marker'
          _view.marker.linkProperty("Y",  function() { return -(h+size)/2; } ); // HtmlView Page linking property 'Y' for element 'marker'
          _view.eFieldpos.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'eFieldpos'
          _view.eFieldpos.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'eFieldpos'
          _view.eFieldpos.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'eFieldpos'
          _view.Efieldlookang.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Efieldlookang'
          _view.Efieldlookang.linkProperty("SizeX",  function() { return Fieldx; }, function(_v) { Fieldx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Efieldlookang'
          _view.Efieldlookang.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'Efieldlookang'
          _view.Efieldlookang.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'Efieldlookang'
          _view.Efieldlookang.linkProperty("Visibility",  function() { return showE; }, function(_v) { showE = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Efieldlookang'
          _view.Efieldlookang.linkProperty("SizeY",  function() { return Fieldy; }, function(_v) { Fieldy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Efieldlookang'
          _view.LeftBracket__old_.linkProperty("SizeX",  function() { return xlsize; }, function(_v) { xlsize = _v; } ); // HtmlView Page linking property 'SizeX' for element 'LeftBracket__old_'
          _view.LeftBracket__old_.linkProperty("X",  function() { return xl; }, function(_v) { xl = _v; } ); // HtmlView Page linking property 'X' for element 'LeftBracket__old_'
          _view.LeftBracket__old_.linkProperty("Y",  function() { return yl; }, function(_v) { yl = _v; } ); // HtmlView Page linking property 'Y' for element 'LeftBracket__old_'
          _view.LeftBracket__old_.linkProperty("SizeY",  function() { return ylsize; }, function(_v) { ylsize = _v; } ); // HtmlView Page linking property 'SizeY' for element 'LeftBracket__old_'
          _view.leftline3.linkProperty("SizeX",  function() { return -(xmin/2-w2*2-size*1.5)-w/6; } ); // HtmlView Page linking property 'SizeX' for element 'leftline3'
          _view.leftline3.linkProperty("X",  function() { return xmin/2-w2*2-size*1.5; } ); // HtmlView Page linking property 'X' for element 'leftline3'
          _view.leftline3.linkProperty("Y",  function() { return ymin+w; } ); // HtmlView Page linking property 'Y' for element 'leftline3'
          _view.leftline2.linkProperty("X",  function() { return xmin/2-w2*2-size*1.5; } ); // HtmlView Page linking property 'X' for element 'leftline2'
          _view.leftline2.linkProperty("SizeY",  function() { return (ymin+w); } ); // HtmlView Page linking property 'SizeY' for element 'leftline2'
          _view.leftline1.linkProperty("SizeX",  function() { return -size*1.5; } ); // HtmlView Page linking property 'SizeX' for element 'leftline1'
          _view.leftline1.linkProperty("X",  function() { return xmin/2-w2*2; } ); // HtmlView Page linking property 'X' for element 'leftline1'
          _view.dash8.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash8'
          _view.dash8.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash8'
          _view.dash8.linkProperty("Y",  function() { return -(h+size)/2 +size*21; } ); // HtmlView Page linking property 'Y' for element 'dash8'
          _view.dash7.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash7'
          _view.dash7.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash7'
          _view.dash7.linkProperty("Y",  function() { return -(h+size)/2 +size*18; } ); // HtmlView Page linking property 'Y' for element 'dash7'
          _view.dash6.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash6'
          _view.dash6.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash6'
          _view.dash6.linkProperty("Y",  function() { return -(h+size)/2 +size*15; } ); // HtmlView Page linking property 'Y' for element 'dash6'
          _view.dash5.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash5'
          _view.dash5.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash5'
          _view.dash5.linkProperty("Y",  function() { return -(h+size)/2 +size*12; } ); // HtmlView Page linking property 'Y' for element 'dash5'
          _view.dash4.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash4'
          _view.dash4.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash4'
          _view.dash4.linkProperty("Y",  function() { return -(h+size)/2 +size*9; } ); // HtmlView Page linking property 'Y' for element 'dash4'
          _view.dash3.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash3'
          _view.dash3.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash3'
          _view.dash3.linkProperty("Y",  function() { return -(h+size)/2 +size*6; } ); // HtmlView Page linking property 'Y' for element 'dash3'
          _view.dash2.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash2'
          _view.dash2.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash2'
          _view.dash2.linkProperty("Y",  function() { return -(h+size)/2 +size*3; } ); // HtmlView Page linking property 'Y' for element 'dash2'
          _view.dash1.linkProperty("SizeX",  function() { return size/2; } ); // HtmlView Page linking property 'SizeX' for element 'dash1'
          _view.dash1.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'dash1'
          _view.dash1.linkProperty("Y",  function() { return -(h+size)/2; } ); // HtmlView Page linking property 'Y' for element 'dash1'
          _view.longdash.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'longdash'
          _view.longdash.linkProperty("SizeY",  function() { return h+size; } ); // HtmlView Page linking property 'SizeY' for element 'longdash'
          _view.varM2.setAction("OnRelease", function(_data,_info) {
  if (varMdist<=1.5*size){
  varMY = -(h+size)/2;
  }
  if ( (varMdist> 1.5*size) && (varMdist < 4.5*size)) {
    varMY = -(h+size)/2 + 3*size
    }
  if ( (varMdist>= 4.5*size) && (varMdist <= 7.5*size)) {
    varMY = -(h+size)/2 + 6*size
    }
    
  if ( (varMdist> 7.5*size) && (varMdist < 10.5*size)) {
    varMY = -(h+size)/2 + 9*size
    }
  if ( (varMdist>= 10.5*size) && (varMdist <= 13.5*size)) {
    varMY = -(h+size)/2 + 12*size
    }
  if ( (varMdist> 13.5*size) && (varMdist < 16.5*size)) {
    varMY = -(h+size)/2 + 15*size
    }
    
   if ( (varMdist>= 16.5*size) && (varMdist <= 19.5*size)) {
    varMY = -(h+size)/2 + 18*size
    }
  if ( (varMdist> 19.5*size) && (varMdist < 22.5*size)) {
    varMY = -(h+size)/2 + 21*size
    }

}); // HtmlView Page setting action 'OnRelease' for element 'varM2'
          _view.varM2.linkProperty("SizeX",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeX' for element 'varM2'
          _view.varM2.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'varM2'
          _view.varM2.linkProperty("Y",  function() { return varMY; }, function(_v) { varMY = _v; } ); // HtmlView Page linking property 'Y' for element 'varM2'
          _view.varM2.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'varM2'
          _view.varM.setAction("OnRelease", function(_data,_info) {
  if (varMdist<=1.5*size){
    varMY = -(h+size)/2;
    W = 2.3;
    showBar = true;
    mColour = "url(#rubidium)";
  }
  if ( (varMdist> 1.5*size) && (varMdist < 4.5*size)) {
    varMY = -(h+size)/2 + 3*size;
    W = 2.9;
     showBar = true;
    mColour = "url(#calcium)";
    }
  if ( (varMdist>= 4.5*size) && (varMdist <= 7.5*size)) {
    varMY = -(h+size)/2 + 6*size;
    W = 3.4;
    mColour = "url(#thorium)"
    }
    
  if ( (varMdist> 7.5*size) && (varMdist < 10.5*size)) {
    varMY = -(h+size)/2 + 9*size;
    W = 3.7;
    mColour = "url(#magnesium)"
    showBar = true;
    }
  if ( (varMdist>= 10.5*size) && (varMdist <= 13.5*size)) {
    varMY = -(h+size)/2 + 12*size;
    W = 4.3;
    mColour = "url(#silver)";
    showBar = false;
    }
  if ( (varMdist> 13.5*size) && (varMdist < 16.5*size)) {
    varMY = -(h+size)/2 + 15*size;
    W = 4.6;
    mColour = "url(#iron)"
     showBar = true;
    }
    
   if ( (varMdist>= 16.5*size) && (varMdist <= 19.5*size)) {
    varMY = -(h+size)/2 + 18*size;
    W = 5.1; 
    mColour = "url(#gold)";
    showBar = false;
    }
  if  (varMdist> 19.5*size)  {
    varMY = -(h+size)/2 + 21*size;
    W = 6.3;
    mColour = "url(#platinum)"
     showBar = true;
    }

}); // HtmlView Page setting action 'OnRelease' for element 'varM'
          _view.varM.linkProperty("SizeX",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeX' for element 'varM'
          _view.varM.linkProperty("X",  function() { return xmin/2-w2*2-size*3; } ); // HtmlView Page linking property 'X' for element 'varM'
          _view.varM.linkProperty("Y",  function() { return varMY; }, function(_v) { varMY = _v; } ); // HtmlView Page linking property 'Y' for element 'varM'
          _view.varM.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'varM'
          _view.Pt.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Pt'
          _view.Pt.linkProperty("Y",  function() { return -(h+size)/2 + 21*size; } ); // HtmlView Page linking property 'Y' for element 'Pt'
          _view.Au.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Au'
          _view.Au.linkProperty("Y",  function() { return -(h+size)/2 + 18*size; } ); // HtmlView Page linking property 'Y' for element 'Au'
          _view.Fe.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Fe'
          _view.Fe.linkProperty("Y",  function() { return -(h+size)/2 + 15*size; } ); // HtmlView Page linking property 'Y' for element 'Fe'
          _view.Ag.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Ag'
          _view.Ag.linkProperty("Y",  function() { return -(h+size)/2 + 12*size; } ); // HtmlView Page linking property 'Y' for element 'Ag'
          _view.Mg.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Mg'
          _view.Mg.linkProperty("Y",  function() { return -(h+size)/2 + 9*size; } ); // HtmlView Page linking property 'Y' for element 'Mg'
          _view.Th.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Th'
          _view.Th.linkProperty("Y",  function() { return -(h+size)/2 + 6*size; } ); // HtmlView Page linking property 'Y' for element 'Th'
          _view.Ca.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Ca'
          _view.Ca.linkProperty("Y",  function() { return -(h+size)/2+3*size; } ); // HtmlView Page linking property 'Y' for element 'Ca'
          _view.Rb.linkProperty("X",  function() { return xmin/2-w2*2-size*3.5; } ); // HtmlView Page linking property 'X' for element 'Rb'
          _view.Rb.linkProperty("Y",  function() { return -(h+size)/2; } ); // HtmlView Page linking property 'Y' for element 'Rb'
          _view.RightBracket.linkProperty("SizeX",  function() { return xrsize; }, function(_v) { xrsize = _v; } ); // HtmlView Page linking property 'SizeX' for element 'RightBracket'
          _view.RightBracket.linkProperty("X",  function() { return xr; }, function(_v) { xr = _v; } ); // HtmlView Page linking property 'X' for element 'RightBracket'
          _view.RightBracket.linkProperty("Y",  function() { return yl; }, function(_v) { yl = _v; } ); // HtmlView Page linking property 'Y' for element 'RightBracket'
          _view.RightBracket.linkProperty("SizeY",  function() { return ylsize; }, function(_v) { ylsize = _v; } ); // HtmlView Page linking property 'SizeY' for element 'RightBracket'
          _view.LeftGrayBar.linkProperty("SizeX",  function() { return w2*2; } ); // HtmlView Page linking property 'SizeX' for element 'LeftGrayBar'
          _view.LeftGrayBar.linkProperty("X",  function() { return xmin/2; } ); // HtmlView Page linking property 'X' for element 'LeftGrayBar'
          _view.LeftGrayBar.linkProperty("Visibility",  function() { return showBar; }, function(_v) { showBar = _v; } ); // HtmlView Page linking property 'Visibility' for element 'LeftGrayBar'
          _view.LeftGrayBar.linkProperty("SizeY",  function() { return h+size; } ); // HtmlView Page linking property 'SizeY' for element 'LeftGrayBar'
          _view.LeftGrayBar.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'LeftGrayBar'
          _view.LeftGrayBar22.linkProperty("SizeX",  function() { return w2*2; } ); // HtmlView Page linking property 'SizeX' for element 'LeftGrayBar22'
          _view.LeftGrayBar22.linkProperty("X",  function() { return xmin/2; } ); // HtmlView Page linking property 'X' for element 'LeftGrayBar22'
          _view.LeftGrayBar22.linkProperty("SizeY",  function() { return h+size; } ); // HtmlView Page linking property 'SizeY' for element 'LeftGrayBar22'
          _view.LeftGrayBar22.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'LeftGrayBar22'
          _view.Target.linkProperty("FillColor",  function() { return mColour; }, function(_v) { mColour = _v; } ); // HtmlView Page linking property 'FillColor' for element 'Target'
          _view.Target.linkProperty("SizeX",  function() { return w2/2; } ); // HtmlView Page linking property 'SizeX' for element 'Target'
          _view.Target.linkProperty("X",  function() { return xmin/2; } ); // HtmlView Page linking property 'X' for element 'Target'
          _view.Target.linkProperty("SizeY",  function() { return h+size; } ); // HtmlView Page linking property 'SizeY' for element 'Target'
          _view.Target.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'Target'
          _view.Leftsigns23.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Leftsigns23'
          _view.Leftsigns23.linkProperty("X",  function() { return posxleft; }, function(_v) { posxleft = _v; } ); // HtmlView Page linking property 'X' for element 'Leftsigns23'
          _view.Leftsigns23.linkProperty("Y",  function() { return posyleft; }, function(_v) { posyleft = _v; } ); // HtmlView Page linking property 'Y' for element 'Leftsigns23'
          _view.Leftsigns23.linkProperty("Visibility",  function() { return V<0&&V>-1; } ); // HtmlView Page linking property 'Visibility' for element 'Leftsigns23'
          _view.Leftsigns222.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Leftsigns222'
          _view.Leftsigns222.linkProperty("X",  function() { return posxleft; }, function(_v) { posxleft = _v; } ); // HtmlView Page linking property 'X' for element 'Leftsigns222'
          _view.Leftsigns222.linkProperty("Y",  function() { return posyleft; }, function(_v) { posyleft = _v; } ); // HtmlView Page linking property 'Y' for element 'Leftsigns222'
          _view.Leftsigns222.linkProperty("Visibility",  function() { return V>0&&V<1; } ); // HtmlView Page linking property 'Visibility' for element 'Leftsigns222'
          _view.Leftsigns232.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Leftsigns232'
          _view.Leftsigns232.linkProperty("X",  function() { return posxleft; }, function(_v) { posxleft = _v; } ); // HtmlView Page linking property 'X' for element 'Leftsigns232'
          _view.Leftsigns232.linkProperty("Y",  function() { return posyleft; }, function(_v) { posyleft = _v; } ); // HtmlView Page linking property 'Y' for element 'Leftsigns232'
          _view.Leftsigns232.linkProperty("Visibility",  function() { return V<=-1; } ); // HtmlView Page linking property 'Visibility' for element 'Leftsigns232'
          _view.Leftsigns2222.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Leftsigns2222'
          _view.Leftsigns2222.linkProperty("X",  function() { return posxleft; }, function(_v) { posxleft = _v; } ); // HtmlView Page linking property 'X' for element 'Leftsigns2222'
          _view.Leftsigns2222.linkProperty("Y",  function() { return posyleft; }, function(_v) { posyleft = _v; } ); // HtmlView Page linking property 'Y' for element 'Leftsigns2222'
          _view.Leftsigns2222.linkProperty("Visibility",  function() { return V>=1; } ); // HtmlView Page linking property 'Visibility' for element 'Leftsigns2222'
          _view.RightGrayBar2.linkProperty("SizeX",  function() { return w2*2; } ); // HtmlView Page linking property 'SizeX' for element 'RightGrayBar2'
          _view.RightGrayBar2.linkProperty("X",  function() { return xmax/2; } ); // HtmlView Page linking property 'X' for element 'RightGrayBar2'
          _view.RightGrayBar2.linkProperty("SizeY",  function() { return h+size; } ); // HtmlView Page linking property 'SizeY' for element 'RightGrayBar2'
          _view.RightGrayBar2.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'RightGrayBar2'
          _view.RightGrayBar.linkProperty("SizeX",  function() { return w2*2; } ); // HtmlView Page linking property 'SizeX' for element 'RightGrayBar'
          _view.RightGrayBar.linkProperty("X",  function() { return xmax/2; } ); // HtmlView Page linking property 'X' for element 'RightGrayBar'
          _view.RightGrayBar.linkProperty("SizeY",  function() { return h+size; } ); // HtmlView Page linking property 'SizeY' for element 'RightGrayBar'
          _view.RightGrayBar.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'RightGrayBar'
          _view.WorkFunction.linkProperty("X",  function() { return xmin+size; } ); // HtmlView Page linking property 'X' for element 'WorkFunction'
          _view.WorkFunction.linkProperty("Y",  function() { return -(h+size)/2+2*size; } ); // HtmlView Page linking property 'Y' for element 'WorkFunction'
          _view.WorkFunction.linkProperty("Text",  function() { return metalstoretext+"\n Φ = "+_view._format(W,"0.0")+"eV"; } ); // HtmlView Page linking property 'Text' for element 'WorkFunction'
          _view.Rightsigns.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Rightsigns'
          _view.Rightsigns.linkProperty("X",  function() { return posxright; }, function(_v) { posxright = _v; } ); // HtmlView Page linking property 'X' for element 'Rightsigns'
          _view.Rightsigns.linkProperty("Y",  function() { return posyright; }, function(_v) { posyright = _v; } ); // HtmlView Page linking property 'Y' for element 'Rightsigns'
          _view.Rightsigns.linkProperty("Visibility",  function() { return V<0&&V>-1; } ); // HtmlView Page linking property 'Visibility' for element 'Rightsigns'
          _view.Rightsigns2.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Rightsigns2'
          _view.Rightsigns2.linkProperty("X",  function() { return posxright; }, function(_v) { posxright = _v; } ); // HtmlView Page linking property 'X' for element 'Rightsigns2'
          _view.Rightsigns2.linkProperty("Y",  function() { return posyright; }, function(_v) { posyright = _v; } ); // HtmlView Page linking property 'Y' for element 'Rightsigns2'
          _view.Rightsigns2.linkProperty("Visibility",  function() { return V>0&&V<1; } ); // HtmlView Page linking property 'Visibility' for element 'Rightsigns2'
          _view.Rightsigns3.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Rightsigns3'
          _view.Rightsigns3.linkProperty("X",  function() { return posxright; }, function(_v) { posxright = _v; } ); // HtmlView Page linking property 'X' for element 'Rightsigns3'
          _view.Rightsigns3.linkProperty("Y",  function() { return posyright; }, function(_v) { posyright = _v; } ); // HtmlView Page linking property 'Y' for element 'Rightsigns3'
          _view.Rightsigns3.linkProperty("Visibility",  function() { return V<=-1; } ); // HtmlView Page linking property 'Visibility' for element 'Rightsigns3'
          _view.Rightsigns22.linkProperty("NumberOfElements",  function() { return nVectorsSq*0.8; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Rightsigns22'
          _view.Rightsigns22.linkProperty("X",  function() { return posxright; }, function(_v) { posxright = _v; } ); // HtmlView Page linking property 'X' for element 'Rightsigns22'
          _view.Rightsigns22.linkProperty("Y",  function() { return posyright; }, function(_v) { posyright = _v; } ); // HtmlView Page linking property 'Y' for element 'Rightsigns22'
          _view.Rightsigns22.linkProperty("Visibility",  function() { return V>=1; } ); // HtmlView Page linking property 'Visibility' for element 'Rightsigns22'
          _view.ammeter.linkProperty("X",  function() { return xmax-5*size; } ); // HtmlView Page linking property 'X' for element 'ammeter'
          _view.ammeter.linkProperty("Y",  function() { return ymin+w; } ); // HtmlView Page linking property 'Y' for element 'ammeter'
          _view.current2.linkProperty("X",  function() { return xmax-2*size; } ); // HtmlView Page linking property 'X' for element 'current2'
          _view.current2.linkProperty("Y",  function() { return ymin+w+2*size; } ); // HtmlView Page linking property 'Y' for element 'current2'
          _view.current2.linkProperty("Text",  function() { return currenttext; }, function(_v) { currenttext = _v; } ); // HtmlView Page linking property 'Text' for element 'current2'
          _view.A.linkProperty("X",  function() { return xmax-5*size; } ); // HtmlView Page linking property 'X' for element 'A'
          _view.A.linkProperty("Y",  function() { return ymin+w; } ); // HtmlView Page linking property 'Y' for element 'A'
          _view.LeftVertLine.linkProperty("X",  function() { return -w/6; } ); // HtmlView Page linking property 'X' for element 'LeftVertLine'
          _view.LeftVertLine.linkProperty("Y",  function() { return ymin+w-h1/2; } ); // HtmlView Page linking property 'Y' for element 'LeftVertLine'
          _view.LeftVertLine.linkProperty("Visibility",  function() { return showb; }, function(_v) { showb = _v; } ); // HtmlView Page linking property 'Visibility' for element 'LeftVertLine'
          _view.LeftVertLine.linkProperty("SizeY",  function() { return h1; }, function(_v) { h1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'LeftVertLine'
          _view.LeftVertLine.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'LeftVertLine'
          _view.RightVertLine.linkProperty("X",  function() { return w/6; } ); // HtmlView Page linking property 'X' for element 'RightVertLine'
          _view.RightVertLine.linkProperty("Y",  function() { return ymin+w-h2/2; } ); // HtmlView Page linking property 'Y' for element 'RightVertLine'
          _view.RightVertLine.linkProperty("Visibility",  function() { return showb; }, function(_v) { showb = _v; } ); // HtmlView Page linking property 'Visibility' for element 'RightVertLine'
          _view.RightVertLine.linkProperty("SizeY",  function() { return h2; }, function(_v) { h2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'RightVertLine'
          _view.RightVertLine.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'RightVertLine'
          _view.zerovoltageline.linkProperty("SizeX",  function() { return xmin/2; } ); // HtmlView Page linking property 'SizeX' for element 'zerovoltageline'
          _view.zerovoltageline.linkProperty("Y",  function() { return ymin+h1; } ); // HtmlView Page linking property 'Y' for element 'zerovoltageline'
          _view.zerovoltageline.linkProperty("Visibility",  function() { return Math.abs(V)<0.05; } ); // HtmlView Page linking property 'Visibility' for element 'zerovoltageline'
          _view.zerovoltageline.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'zerovoltageline'
          _view.vbutton_line.linkProperty("SizeX",  function() { return 9*size; } ); // HtmlView Page linking property 'SizeX' for element 'vbutton_line'
          _view.vbutton_line.linkProperty("X",  function() { return xmin/3; } ); // HtmlView Page linking property 'X' for element 'vbutton_line'
          _view.vbutton_line.linkProperty("Y",  function() { return ymin + 2*size; } ); // HtmlView Page linking property 'Y' for element 'vbutton_line'
          _view.vbutton_cover.linkProperty("SizeX",  function() { return vbuttonSizeX; }, function(_v) { vbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'vbutton_cover'
          _view.vbutton_cover.linkProperty("X",  function() { return vbuttonX; }, function(_v) { vbuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'vbutton_cover'
          _view.vbutton_cover.linkProperty("Y",  function() { return ymin + 2*size; } ); // HtmlView Page linking property 'Y' for element 'vbutton_cover'
          _view.vbutton_cover.linkProperty("SizeY",  function() { return vbuttonSizeY; }, function(_v) { vbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vbutton_cover'
          _view.vbutton.linkProperty("SizeX",  function() { return vbuttonSizeX; }, function(_v) { vbuttonSizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'vbutton'
          _view.vbutton.linkProperty("X",  function() { return vbuttonX; }, function(_v) { vbuttonX = _v; } ); // HtmlView Page linking property 'X' for element 'vbutton'
          _view.vbutton.linkProperty("Y",  function() { return ymin + 2*size; } ); // HtmlView Page linking property 'Y' for element 'vbutton'
          _view.vbutton.linkProperty("SizeY",  function() { return vbuttonSizeY; }, function(_v) { vbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vbutton'
          _view.vbutton.setAction("OnDrag", function(_data,_info) {
  V =  Math.round((- (vbuttondist/40)*5 +2.5)*10)/10;

}); // HtmlView Page setting action 'OnDrag' for element 'vbutton'
          _view.vbutton2.linkProperty("SizeX",  function() { return vbutton2SizeX; }, function(_v) { vbutton2SizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'vbutton2'
          _view.vbutton2.linkProperty("X",  function() { return vbutton2X; }, function(_v) { vbutton2X = _v; } ); // HtmlView Page linking property 'X' for element 'vbutton2'
          _view.vbutton2.linkProperty("Y",  function() { return ymin + 2*size; } ); // HtmlView Page linking property 'Y' for element 'vbutton2'
          _view.vbutton2.linkProperty("SizeY",  function() { return vbuttonSizeY; }, function(_v) { vbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vbutton2'
          _view.vbutton3.linkProperty("SizeX",  function() { return vbutton2SizeX; }, function(_v) { vbutton2SizeX = _v; } ); // HtmlView Page linking property 'SizeX' for element 'vbutton3'
          _view.vbutton3.linkProperty("X",  function() { return vbutton3X; }, function(_v) { vbutton3X = _v; } ); // HtmlView Page linking property 'X' for element 'vbutton3'
          _view.vbutton3.linkProperty("Y",  function() { return ymin + 2*size; } ); // HtmlView Page linking property 'Y' for element 'vbutton3'
          _view.vbutton3.linkProperty("SizeY",  function() { return vbuttonSizeY; }, function(_v) { vbuttonSizeY = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vbutton3'
          _view.Voltagedrag.linkProperty("X",  function() { return Vdrag; }, function(_v) { Vdrag = _v; } ); // HtmlView Page linking property 'X' for element 'Voltagedrag'
          _view.Voltagedrag.linkProperty("Y",  function() { return ymin+w; } ); // HtmlView Page linking property 'Y' for element 'Voltagedrag'
          _view.Voltagedrag.setAction("OnDrag", function(_data,_info) {
  if (Vdrag>50)Vdrag = 50;
  if (Vdrag<-50)Vdrag = -50;
  V= Vdrag/20;
  V=Math.round(V*10)/10;
  _view.comboBox22.setSelectedOptions(["select V"]);

}); // HtmlView Page setting action 'OnDrag' for element 'Voltagedrag'
          _view.voltage.linkProperty("X",  function() { return Vdrag; }, function(_v) { Vdrag = _v; } ); // HtmlView Page linking property 'X' for element 'voltage'
          _view.voltage.linkProperty("Y",  function() { return ymin+0.9*w-size; } ); // HtmlView Page linking property 'Y' for element 'voltage'
          _view.voltage.linkProperty("Text",  function() { return "voltage ="+_view._format(V,"0.00")+"V"; } ); // HtmlView Page linking property 'Text' for element 'voltage'
          _view.electrons.linkProperty("NumberOfElements",  function() { return n*photoncount/100; } ); // HtmlView Page linking property 'NumberOfElements' for element 'electrons'
          _view.electrons.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'electrons'
          _view.electrons.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'electrons'
          _view.electrons.linkProperty("Visibility",  function() { return showe||showlight; } ); // HtmlView Page linking property 'Visibility' for element 'electrons'
          _view.shape2.linkProperty("SizeX",  function() { return size*7; } ); // HtmlView Page linking property 'SizeX' for element 'shape2'
          _view.shape2.linkProperty("X",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'X' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'Y' for element 'shape2'
          _view.shape2.linkProperty("SizeY",  function() { return size*6; } ); // HtmlView Page linking property 'SizeY' for element 'shape2'
          _view.Photon_Legend_Text.linkProperty("X",  function() { return xmin+size*3; } ); // HtmlView Page linking property 'X' for element 'Photon_Legend_Text'
          _view.Photon_Legend_Text.linkProperty("Y",  function() { return ymax-size*2; } ); // HtmlView Page linking property 'Y' for element 'Photon_Legend_Text'
          _view.Photon_Legend_Icon.linkProperty("Radius",  function() { return size/2; } ); // HtmlView Page linking property 'Radius' for element 'Photon_Legend_Icon'
          _view.Photon_Legend_Icon.linkProperty("SizeX",  function() { return sizep*lambda/500; } ); // HtmlView Page linking property 'SizeX' for element 'Photon_Legend_Icon'
          _view.Photon_Legend_Icon.linkProperty("X",  function() { return xmin+size*0.6; } ); // HtmlView Page linking property 'X' for element 'Photon_Legend_Icon'
          _view.Photon_Legend_Icon.linkProperty("LineColor",  function() { return vcolor; }, function(_v) { vcolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'Photon_Legend_Icon'
          _view.Photon_Legend_Icon.linkProperty("Y",  function() { return ymax-size*2.5; } ); // HtmlView Page linking property 'Y' for element 'Photon_Legend_Icon'
          _view.Photon_Legend_Icon.linkProperty("SizeY",  function() { return sizep*lambda/500; } ); // HtmlView Page linking property 'SizeY' for element 'Photon_Legend_Icon'
          _view.Electron_Legend_Text.linkProperty("X",  function() { return xmin+size*3; } ); // HtmlView Page linking property 'X' for element 'Electron_Legend_Text'
          _view.Electron_Legend_Text.linkProperty("Y",  function() { return ymax-size*4; } ); // HtmlView Page linking property 'Y' for element 'Electron_Legend_Text'
          _view.Electron_Legend_Icon.linkProperty("X",  function() { return xmin+size; } ); // HtmlView Page linking property 'X' for element 'Electron_Legend_Icon'
          _view.Electron_Legend_Icon.linkProperty("Y",  function() { return ymax-size*4; } ); // HtmlView Page linking property 'Y' for element 'Electron_Legend_Icon'
          _view.textSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return textelectrons; }, function(_v) { textelectrons = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.arrowSetV.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSetV'
          _view.arrowSetV.linkProperty("SizeX",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSetV'
          _view.arrowSetV.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSetV'
          _view.arrowSetV.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSetV'
          _view.arrowSetV.linkProperty("Visibility",  function() { return showv; }, function(_v) { showv = _v; } ); // HtmlView Page linking property 'Visibility' for element 'arrowSetV'
          _view.arrowSetV.linkProperty("SizeY",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowSetV'
          _view.IvsV.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'IvsV'
          _view.IvsV.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'IvsV'
          _view.IvsV.linkProperty("MaximumX",  function() { return Vmax; }, function(_v) { Vmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'IvsV'
          _view.IvsV.linkProperty("MinimumX",  function() { return -Vmax; } ); // HtmlView Page linking property 'MinimumX' for element 'IvsV'
          _view.IvsV.linkProperty("MinimumY",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'IvsV'
          _view.IvsV.linkProperty("TitleY",  function() { return l_y; }, function(_v) { l_y = _v; } ); // HtmlView Page linking property 'TitleY' for element 'IvsV'
          _view.IvsV.linkProperty("TitleX",  function() { return l_x; }, function(_v) { l_x = _v; } ); // HtmlView Page linking property 'TitleX' for element 'IvsV'
          _view.IvsV.linkProperty("Visibility",  function() { return xvst; }, function(_v) { xvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'IvsV'
          _view.IvsV.setAction("OnOrientationChange", function(_data,_info) {
  changeOrientation();

}); // HtmlView Page setting action 'OnOrientationChange' for element 'IvsV'
          _view.IvsV.linkProperty("TLMessage",  function() { return currenttext; }, function(_v) { currenttext = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'IvsV'
          _view.trail3.linkProperty("Active",  function() { return record>1; } ); // HtmlView Page linking property 'Active' for element 'trail3'
          _view.trail3.linkProperty("Connected",  function() { return _isPlaying && auto && Ipts>linkmin; } ); // HtmlView Page linking property 'Connected' for element 'trail3'
          _view.trail3.linkProperty("LineColor",  function() { return photoncolor; }, function(_v) { photoncolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail3'
          _view.trail3.linkProperty("InputX",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail3'
          _view.trail3.linkProperty("InputY",  function() { return I; }, function(_v) { I = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail3'
          _view.trail3.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'trail3'
          _view.trace3.linkProperty("MarkSize",  function() { return psize; }, function(_v) { psize = _v; } ); // HtmlView Page linking property 'MarkSize' for element 'trace3'
          _view.trace3.linkProperty("Connected",  function() { return _isPlaying && auto && Ipts>linkmin; } ); // HtmlView Page linking property 'Connected' for element 'trace3'
          _view.trace3.linkProperty("Active",  function() { return record>1; } ); // HtmlView Page linking property 'Active' for element 'trace3'
          _view.trace3.linkProperty("MarkFillColor",  function() { return clr; }, function(_v) { clr = _v; } ); // HtmlView Page linking property 'MarkFillColor' for element 'trace3'
          _view.trace3.linkProperty("LineColor",  function() { return photoncolor; }, function(_v) { photoncolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trace3'
          _view.trace3.linkProperty("MarkLineColor",  function() { return clr; }, function(_v) { clr = _v; } ); // HtmlView Page linking property 'MarkLineColor' for element 'trace3'
          _view.trace3.linkProperty("X",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'X' for element 'trace3'
          _view.trace3.linkProperty("Y",  function() { return I; }, function(_v) { I = _v; } ); // HtmlView Page linking property 'Y' for element 'trace3'
          _view.trace3.linkProperty("InputX",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace3'
          _view.trace3.linkProperty("InputY",  function() { return I; }, function(_v) { I = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace3'
          _view.trace3.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'trace3'
          _view.theoryZERO.linkProperty("Minimum",  function() { return -Vmax; } ); // HtmlView Page linking property 'Minimum' for element 'theoryZERO'
          _view.theoryZERO.linkProperty("Maximum",  function() { return -(E-W); } ); // HtmlView Page linking property 'Maximum' for element 'theoryZERO'
          _view.theoryzero.linkProperty("X",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'X' for element 'theoryzero'
          _view.theoryzero.linkProperty("Visibility",  function() { return V<-(E-W); } ); // HtmlView Page linking property 'Visibility' for element 'theoryzero'
          _view.squareline.linkProperty("FunctionY",  function() { return _view._format(Math.abs(photoncount*80/60/(E-W)),"0.00")+"*V+"+_view._format(photoncount*80/60,"0.00"); } ); // HtmlView Page linking property 'FunctionY' for element 'squareline'
          _view.squareline.linkProperty("Minimum",  function() { return -(E-W); } ); // HtmlView Page linking property 'Minimum' for element 'squareline'
          _view.squarelinedot.linkProperty("X",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'X' for element 'squarelinedot'
          _view.squarelinedot.linkProperty("Y",  function() { return Math.abs(photoncount*80/60/(E-W))*V+photoncount*80/60; } ); // HtmlView Page linking property 'Y' for element 'squarelinedot'
          _view.testcurvefit.linkProperty("FunctionY",  function() { return _view._format(-Math.abs(photoncount*30/60/(E-W)),"0.00")+"*(0.5-V)^2+"+_view._format(photoncount*80/60,"0.00"); } ); // HtmlView Page linking property 'FunctionY' for element 'testcurvefit'
          _view.testcurvefit.linkProperty("Minimum",  function() { return -0.4+lambda/1200; } ); // HtmlView Page linking property 'Minimum' for element 'testcurvefit'
          _view.curve1_sqrt1_x_2.linkProperty("X",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'X' for element 'curve1_sqrt1_x_2'
          _view.curve1_sqrt1_x_2.linkProperty("Y",  function() { return photoncount*42/60*+1*slider/(E-W)*(V)/Math.sqrt(1+slider/(E-W)*(V)*(slider/(E-W)*(V)))+photoncount*41/60; } ); // HtmlView Page linking property 'Y' for element 'curve1_sqrt1_x_2'
          _view.curve1_sqrt1_x_2.linkProperty("Visibility",  function() { return (V>-(E-W))&&(V<0.6*(E-W)); } ); // HtmlView Page linking property 'Visibility' for element 'curve1_sqrt1_x_2'
          _view.curve1_sqrt1_x_222.linkProperty("FunctionY",  function() { return _view._format(photoncount*42/60,"0.00")+"1*"+_view._format(slider/(E-W),"0.00")+"*(V+0.0)/sqrt(1+"+_view._format(slider/(E-W),"0.00")+"*(V+0.0)*"+_view._format(slider/(E-W),"0.00")+"*(V+0.0))+"+_view._format(photoncount*41/60,"0.00"); } ); // HtmlView Page linking property 'FunctionY' for element 'curve1_sqrt1_x_222'
          _view.curve1_sqrt1_x_222.linkProperty("Maximum",  function() { return (E-W)*0.6; } ); // HtmlView Page linking property 'Maximum' for element 'curve1_sqrt1_x_222'
          _view.curve1_sqrt1_x_222.linkProperty("Minimum",  function() { return -(E-W); } ); // HtmlView Page linking property 'Minimum' for element 'curve1_sqrt1_x_222'
          _view.curve1_sqrt1_x_222.linkProperty("Visibility",  function() { return (E-W)>0; } ); // HtmlView Page linking property 'Visibility' for element 'curve1_sqrt1_x_222'
          _view.theoryotovmax.linkProperty("FunctionY",  function() { return _view._format(80/60*photoncount,"0.00"); } ); // HtmlView Page linking property 'FunctionY' for element 'theoryotovmax'
          _view.theoryotovmax.linkProperty("Minimum",  function() { return (E-W)*0.6; } ); // HtmlView Page linking property 'Minimum' for element 'theoryotovmax'
          _view.theoryotovmax.linkProperty("Maximum",  function() { return Vmax; }, function(_v) { Vmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'theoryotovmax'
          _view.theoryotovmax.linkProperty("Visibility",  function() { return (E-W)>0; } ); // HtmlView Page linking property 'Visibility' for element 'theoryotovmax'
          _view.theoryotovmax2.linkProperty("X",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'X' for element 'theoryotovmax2'
          _view.theoryotovmax2.linkProperty("Y",  function() { return 80/60*photoncount; } ); // HtmlView Page linking property 'Y' for element 'theoryotovmax2'
          _view.theoryotovmax2.linkProperty("Visibility",  function() { return (V>=0.6*(E-W))&&(E-W)>0; } ); // HtmlView Page linking property 'Visibility' for element 'theoryotovmax2'
          _view.theoryZEROforhighworkfunction.linkProperty("Minimum",  function() { return -(E-W); } ); // HtmlView Page linking property 'Minimum' for element 'theoryZEROforhighworkfunction'
          _view.theoryZEROforhighworkfunction.linkProperty("Maximum",  function() { return Vmax; }, function(_v) { Vmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'theoryZEROforhighworkfunction'
          _view.theoryZEROforhighworkfunction.linkProperty("Visibility",  function() { return (E-W)<=0; } ); // HtmlView Page linking property 'Visibility' for element 'theoryZEROforhighworkfunction'
          _view.theoryzero4.linkProperty("X",  function() { return V; }, function(_v) { V = _v; } ); // HtmlView Page linking property 'X' for element 'theoryzero4'
          _view.theoryzero4.linkProperty("Visibility",  function() { return (E-W)<=0; } ); // HtmlView Page linking property 'Visibility' for element 'theoryzero4'
          _view.KEmaxvsf.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'KEmaxvsf'
          _view.KEmaxvsf.linkProperty("Width",  function() { return Widthv; }, function(_v) { Widthv = _v; } ); // HtmlView Page linking property 'Width' for element 'KEmaxvsf'
          _view.KEmaxvsf.setAction("OnOrientationChange", function(_data,_info) {
  changeOrientation();

}); // HtmlView Page setting action 'OnOrientationChange' for element 'KEmaxvsf'
          _view.KEmaxvsf.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'KEmaxvsf'
          _view.KEmaxvsf.linkProperty("BRMessage",  function() { return "stopping frequency=" + _view._format(freqstopping,"0.0")+ " x10^14 Hz "; } ); // HtmlView Page linking property 'BRMessage' for element 'KEmaxvsf'
          _view.fstopping.linkProperty("X",  function() { return freqstopping; }, function(_v) { freqstopping = _v; } ); // HtmlView Page linking property 'X' for element 'fstopping'
          _view.theory5.linkProperty("X",  function() { return freq; }, function(_v) { freq = _v; } ); // HtmlView Page linking property 'X' for element 'theory5'
          _view.theory5.linkProperty("Y",  function() { return E-W; } ); // HtmlView Page linking property 'Y' for element 'theory5'
          _view.theory0tostop.linkProperty("FunctionY",  function() { return 0.41+"*freq1-"+_view._format(W,"0.00"); } ); // HtmlView Page linking property 'FunctionY' for element 'theory0tostop'
          _view.theory0tostop.linkProperty("Maximum",  function() { return freqstopping; }, function(_v) { freqstopping = _v; } ); // HtmlView Page linking property 'Maximum' for element 'theory0tostop'
          _view.theorystopto20.linkProperty("FunctionY",  function() { return 0.41+"*freq1-"+_view._format(W,"0.00"); } ); // HtmlView Page linking property 'FunctionY' for element 'theorystopto20'
          _view.theorystopto20.linkProperty("Minimum",  function() { return freqstopping; }, function(_v) { freqstopping = _v; } ); // HtmlView Page linking property 'Minimum' for element 'theorystopto20'
          _view.Ivsintensity.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'Ivsintensity'
          _view.Ivsintensity.linkProperty("Width",  function() { return Widtha; }, function(_v) { Widtha = _v; } ); // HtmlView Page linking property 'Width' for element 'Ivsintensity'
          _view.Ivsintensity.setAction("OnOrientationChange", function(_data,_info) {
  changeOrientation();

}); // HtmlView Page setting action 'OnOrientationChange' for element 'Ivsintensity'
          _view.Ivsintensity.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Ivsintensity'
          _view.theory23.linkProperty("FunctionY",  function() { return "max(min("+_view._format(V/(E-W)+1,"0.00")+",1),0)"+"*i"; } ); // HtmlView Page linking property 'FunctionY' for element 'theory23'
          _view.theory23.linkProperty("Visibility",  function() { return (E-W>=0); } ); // HtmlView Page linking property 'Visibility' for element 'theory23'
          _view.theory54.linkProperty("X",  function() { return photoncount; }, function(_v) { photoncount = _v; } ); // HtmlView Page linking property 'X' for element 'theory54'
          _view.theory54.linkProperty("Y",  function() { return Math.max(Math.min(_view._format(V/(E-W)+1,"0.00"),1),0)*photoncount; } ); // HtmlView Page linking property 'Y' for element 'theory54'
          _view.theory54.linkProperty("Visibility",  function() { return (E-W>=0); } ); // HtmlView Page linking property 'Visibility' for element 'theory54'
          _view.theoryzero3.linkProperty("Visibility",  function() { return (E-W<0); } ); // HtmlView Page linking property 'Visibility' for element 'theoryzero3'
          _view.theoryzero2.linkProperty("X",  function() { return photoncount; }, function(_v) { photoncount = _v; } ); // HtmlView Page linking property 'X' for element 'theoryzero2'
          _view.theoryzero2.linkProperty("Visibility",  function() { return (E-W<0); } ); // HtmlView Page linking property 'Visibility' for element 'theoryzero2'
          _view._isMobile.linkProperty("CSS",  function() { return {   "position" : "absolute",   "top" : "10px",   "margin-left":"0px",    "left":"10px", }; } ); // HtmlView Page linking property 'CSS' for element '_isMobile'
          _view.Modules.linkProperty("Options",  function() { return ["Default","Module 1","Module 2","Module 3", "Module 4"]; } ); // HtmlView Page linking property 'Options' for element 'Modules'
          _view.Modules.setAction("OnChange", function(_data,_info) {
  //var option = _view.Modules.getProperty("SelectedOptions");
  var opts = _view.Modules.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="Default"){
    showvarm = true; // slider for variable metal unused
    showm = false; //metals buttons unused
    showw=true; //workfunction
    showi=true; //intensity
    showvolt=true; //voltage
    }
    
  else if ( option=="Module 1"){
    
  //wavelength = 675nm
  lambda=675
  wbuttonX = xmin/3 +6.15
  //work function = 2ev
  W=2
  mbuttonY=ymax/3.5 - 4*size +7.48
  //button visibility
  showvarm= false;
  showm=false;
  showw=false;
  showi=true;
  showvolt = false;
    }
    
    else if ( option=="Module 2"){
  //wavelength = 675nm
  lambda=675;
  wbuttonX = xmin/3 +6.15;
  //work function = 2eV
  W=2;
  mbuttonY=ymax/3.5 - 4*size +7.48;
  //intensity = 40%
  photoncount = - 24/40*100 +100;
  //button visibility
  showvarm= false;
  showm=false;
  showw=true;
  showi=false;
  showvolt=false;
    }
    
    else if ( option=="Module 3"){
      
  //wavelength = 300nm
  lambda=300;
  wbuttonX= xmin/3 -4*size+3.1;
  //intensity = 40%
  photoncount = - 24/40*100 +100;
  //button visibility
  showvarm= true;
  showm=false;
  showw=false;
  showi=false;
  showvolt=false;
    }
    
      else if ( option=="Module 4"){
      
  //wavelength = 675nm
  lambda=500;
  wbuttonX = wbuttonmin+300/650*40
  //intensity = 40%
  photoncount = - 24/40*100 +100;
  //work function = 2eV
  W=2;
  mbuttonY=ymax/3.5 - 4*size +7.48;
  //button visibility
  showvarm= false;
  showm=false;
  showw=false;
  showi=false;
  showvolt=true;
    }

}); // HtmlView Page setting action 'OnChange' for element 'Modules'
          _view.worldgraph.linkProperty("Options",  function() { return ["light show","photons show","world and I vs V","world","I vs V","world and V vs f","V vs f","world Ivsintensity","I vs intensity"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  var opts = _view.worldgraph.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["light show","photons show","world and I vs V","world","I vs V","world and V vs f","V vs f","world&Ivsintensity","I vs intensity"]
  if (option=="photons show"){
    showl=true;}
    else {showl=false;}
  //alert(option);
  //"both I vs V and world","world","I vs V graph only"
  if ( option=="world"){
    world=true;
    xvst=false;
    vvst=false;
    avst=false;
  Width1 = "100%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "0%";
    }
    else if ( option=="I vs V"){
    world=false;
    xvst=true;
    vvst=false;
    avst=false;
  Width1 = "0%";
  Width2 = "100%";
  Widthv = "0%";
  Widtha = "0%";
    }
   
  else if ( option=="world and I vs V"){
  world=true;
  xvst=true;
    vvst=false;
    avst=false;
  Width1 = "50%";
  Width2 = "50%";
  Widthv = "0%";
  Widtha = "0%";
  }
   else if ( option=="V vs f"){
    world=false;
   xvst=false;
    vvst=true;
    avst=false;
  Width1 = "0%";
  Width2 = "0%";
  Widthv = "100%";
  Widtha = "0%";
    }
   
  else if ( option=="world and V vs f"){
  world=true;
  xvst=false;
    vvst=true;
    avst=false;
  Width1 = "50%";
  Width2 = "0%";
  Widthv = "50%";
  Widtha = "0%";
  }
   else if ( option=="I vs intensity"){
    world=false;
    xvst=false;
    vvst=false;
    avst=true;
  Width1 = "0%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "100%";
    }
   
  else if ( option=="world Ivsintensity"){
  world=true;
  xvst=false;
    vvst=false;
    avst=true;
  Width1 = "50%";
  Width2 = "0%";
  Widthv = "0%";
  Widtha = "50%";
  }
  else if ( option=="velocity of electrons show"){
  showV=true;
  for(var i=0; i<n; i++)
  {
   showv[i] = showe[i] && showV;
  }
  }
  else if ( option=="velocity of electrons off"){
  showV=false;
  for(var i=0; i<n; i++)
  {
   showv[i] = showe[i] && showV;
  }
  }
  else if ( option=="Electric Field show"){
  showE=true;
  }
  else if ( option=="Electric Field off"){
  showE=false;
  }
  else if ( option=="photons show"){
  for (var i=0; i<n; i++){
    showparticlesvisualonoff=false;
    //showphoton[i]=true;
   // alert("showing particles-photons are emitted from a light source");
  }
  showlight=false;
    }
    
    else if ( option=="light show"){
      showlight=false;
     
  for (var i=0; i<n; i++){
    //showphoton[i]=false;
   // show[i]=false;
    showparticlesvisualonoff=false;
    showe[i]=false;
  }
  showlight=true;
  //alert("showing light wave are emitted from a light source");
  showe[i]=false;
    }

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  isPaused=true;
  record = 0;
      I = 0;
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  // autocount++;
  isPaused=false;
  text="playing";
  if (dragIW)
      {
        Ipts = 0;
        control = dragIW = false;
        t = 0.0;
        if (auto)
        {
          V = W-E; 
          changeV();
        }
      }
      clr = setColor();

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.FullScreen2Button2.setAction("OffClick", function(_data,_info) {
  _pause();
  toggleFullScreen();

}); // HtmlView Page setting action 'OffClick' for element 'FullScreen2Button2'
          _view.FullScreen2Button2.linkProperty("Visibility",  function() { return (!parent.cordova&&!iOS); } ); // HtmlView Page linking property 'Visibility' for element 'FullScreen2Button2'
          _view.FullScreen2Button2.linkProperty("Disabled",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Disabled' for element 'FullScreen2Button2'
          _view.FullScreen2Button2.setAction("OnClick", function(_data,_info) {
  _pause();
  toggleFullScreen();

}); // HtmlView Page setting action 'OnClick' for element 'FullScreen2Button2'
          _view.workfunction2.linkProperty("Visibility",  function() { return showvarm&&world; } ); // HtmlView Page linking property 'Visibility' for element 'workfunction2'
          _view.comboBox.linkProperty("Options",  function() { return ["change metal","Platinum Pt","Gold Au","Iron Fe","Silver Ag","Magnesium Mg","Thorium Th","Calcium Ca","Rubidium Rb"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:"";    // selected option 
  //var option = _view.comboBox.getProperty("SelectedOptions");  // array of options
  //["Platinum Pt","Gold Au","Iron Fe","Silver Ag","Magnesium Mg","Thorium Th","Calcium Ca","Rubidium Rb"]
  if (option=="Platinum Pt"){
      W = 6.3;
    mColour = "url(#platinum)";
    }
    else if (option=="Gold Au"){
   W = 5.1; 
  mColour = "url(#gold)";
   }
  else if (option=="Iron Fe"){
   W = 4.6;
    mColour = "url(#iron)"
   }
   else if (option=="Silver Ag"){
   W = 4.3;
    mColour = "url(#silver)";
   }
   else if (option=="Magnesium Mg"){
    W = 3.7;
    mColour = "url(#magnesium)"
   }
   else if (option=="Thorium Th"){
  W = 3.4;
    mColour = "url(#thorium)"
   }
   else if (option=="Calcium Ca"){
   W = 2.9;
    
    mColour = "url(#calcium)";
   }
   else if (option=="Rubidium Rb"){
    W = 2.3;
    mColour = "url(#rubidium)";
   }
   metalstoretext = option;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox22.linkProperty("Options",  function() { return ["select V","Voltage V= -2.5","Voltage V= -2.0","Voltage V= -1.5","Voltage V= -1.0","Voltage V= -0.5","Voltage V= 0.0","Voltage V= 0.5","Voltage V= 1.0","Voltage V= 1.5","Voltage V= 2.0","Voltage V= 2.5"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox22'
          _view.comboBox22.setAction("OnChange", function(_data,_info) {
  var option = _view.comboBox22.getProperty("SelectedOptions");
  //alert(option);
  //["Voltage V= -2.5","Voltage V= -2.0","Voltage V= -1.5","Voltage V= -1.0","Voltage V= -0.5","Voltage V= 0.0","Voltage V= 0.5","Voltage V= 1.0","Voltage V= 1.5","Voltage V= 2.0","Voltage V= 2.5" ]
  if ( selected[0]==="user_defined"){
    
    }
  else if ( option=="Voltage V= -2.5"){
  V=-2.5;
  changeV();
    }
    else if ( option=="Voltage V= -2.0"){
  V=-2.0;
  changeV();
    }
   else if ( option=="Voltage V= -1.5"){
  V=-1.5;
  changeV();
    }
    else if ( option=="Voltage V= -1.0"){
  V=-1.0;
  changeV();
    }
    else if ( option=="Voltage V= -0.5"){
  V=-0.5;
  changeV();
    }
    else if ( option=="Voltage V= 0.0"){
  V=0;
  changeV();
    }
    else if ( option=="Voltage V= 2.5"){
  V=2.5;
  changeV();
    }
    else if ( option=="Voltage V= 2.0"){
  V=2.0;
  changeV();
    }
   else if ( option=="Voltage V= 1.5"){
  V=1.5;
  changeV();
    }
    else if ( option=="Voltage V= 1.0"){
  V=1.0;
  changeV();
    }
    else if ( option=="Voltage V= 0.5"){
  V=0.5;
  changeV();
    }
   Vdrag=V*20; //sync menu and silder
    _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox22'
          _view.intensity2.linkProperty("CSS",  function() { return {   "position" : "absolute",   "top" : "10px",    "margin-right":"0px",    "right":"0px", }; } ); // HtmlView Page linking property 'CSS' for element 'intensity2'
          _view.intensity2.linkProperty("Visibility",  function() { return showw&&world; } ); // HtmlView Page linking property 'Visibility' for element 'intensity2'
          _view.wavelength.linkProperty("Options",  function() { return ["select λ","UV-C, λ =250nm","UV-B, λ =300nm","UV-A, λ =350nm","Violet, λ =400nm","Blue, λ =480nm","Green, λ =530nm","Yellow, λ =580nm","Orange, λ =600nm","Red, λ =700nm","IR, λ =800nm","IR, λ =850nm","IR, λ =900nm" ]; } ); // HtmlView Page linking property 'Options' for element 'wavelength'
          _view.wavelength.setAction("OnChange", function(_data,_info) {
  var option = _view.wavelength.getProperty("SelectedOptions");
  //alert(option);
  if ( option=="user_defined"){
    
    }
    //"UV, λ =300nm","Violet, λ =400nm","Blue, λ =480nm","Green, λ =530nm","Yellow, λ =580nm","Orange, λ =600nm","Red, λ =700nm","IR, λ =800nm"
    else if ( option=="UV-C, λ =250nm"){
    lambda=250;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="UV-B, λ =300nm"){
    lambda=300;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="UV-A, λ =350nm"){
    lambda=350;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="Violet, λ =400nm"){
    lambda=400;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
     else if ( option=="Blue, λ =480nm"){
    lambda=480;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="Green, λ =530nm"){
    lambda=530;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="Yellow, λ =580nm"){
    lambda=580;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="Orange, λ =600nm"){
    lambda=600;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="Red, λ =700nm"){
    lambda=700;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
   
   else if ( option=="IR, λ =800nm"){
    lambda=800;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="IR, λ =850nm"){
    lambda=850;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if ( option=="IR, λ =900nm"){
    lambda=900;
    dragIW = true;
  E = 1240/lambda;
  photoncolor = wavelength2color(lambda/1000);
    }
    else if (option=="Intensity of Light =100%"){
      photoncount=100;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =90%"){
      photoncount=90;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =80%"){
      photoncount=80;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =70%"){
      photoncount=70;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =60%"){
      photoncount=60;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =50%"){
      photoncount=50;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =40%"){
      photoncount=40;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =30%"){
      photoncount=30;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =20%"){
      photoncount=20;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =10%"){
      photoncount=10;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =0%"){
      photoncount=0;
      lightIntensity=photoncount/12.0;
  changeI();
      }
   lambdadrag= lambda/10;  //sync menu and drag
    
    
    _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'wavelength'
          _view.comboBox3.linkProperty("Options",  function() { return ["select Intensity","Intensity of Light =0%","Intensity of Light =10%","Intensity of Light =20%","Intensity of Light =30%","Intensity of Light =40%","Intensity of Light =50%","Intensity of Light =60%","Intensity of Light =70%","Intensity of Light =80%","Intensity of Light =90%","Intensity of Light =100%" ]; } ); // HtmlView Page linking property 'Options' for element 'comboBox3'
          _view.comboBox3.setAction("OnChange", function(_data,_info) {
  var option = _view.comboBox3.getProperty("SelectedOptions");
  //alert(option);
  if ( option=="user_defined"){
    
    }
   
    else if ( option=="Intensity of Light =100%"){
      photoncount=100;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =90%"){
      photoncount=90;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =80%"){
      photoncount=80;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =70%"){
      photoncount=70;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =60%"){
      photoncount=60;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =50%"){
      photoncount=50;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =40%"){
      photoncount=40;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =30%"){
      photoncount=30;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =20%"){
      photoncount=20;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =10%"){
      photoncount=10;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      else if ( option=="Intensity of Light =0%"){
      photoncount=0;
      lightIntensity=photoncount/12.0;
  changeI();
      }
      
    
    
    _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox3'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(5);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function photoelectriceffectwee3_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = photoelectriceffectwee3_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('About','./photoelectriceffectwee3_Intro_1.html');

  return _view;
} // end of main function

function photoelectriceffectwee3_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displayPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'displayPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'displayPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'displayPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"worldview", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'worldview'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'worldview'
      .setProperty("Background","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'worldview'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'worldview'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'worldview'
      .setProperty("Title","world") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'worldview'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'worldview'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'worldview'
      .setProperty("TitleY","world") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'worldview'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'worldview'
      .setProperty("TitleX","world") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'worldview'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'worldview'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'worldview'
      ;

    _view._addElement(EJSS_DRAWING2D.springSet,"photons", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'photons'
      .setProperty("PointsPerLoop",20) // EJsS HtmlView.HtmlView Page: setting property 'PointsPerLoop' for element 'photons'
      .setProperty("Loops",3) // EJsS HtmlView.HtmlView Page: setting property 'Loops' for element 'photons'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'photons'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"lightcover", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'lightcover'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'lightcover'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'lightcover'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"lightcover2", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'lightcover2'
      .setProperty("FillColor","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'lightcover2'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'lightcover2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon2", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon2'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'polygon2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'polygon'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"lambda2", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'lambda2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"lambda", _view.lambda2) // EJsS HtmlView.HtmlView Page: declaration of element 'lambda'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'lambda'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'lambda'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'lambda'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'lambda'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'lambda'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'lambda'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'lambda'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"wavelength_txt", _view.lambda2) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelength_txt'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'wavelength_txt'
      .setProperty("Font","normal normal 17px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'wavelength_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"intensity", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'intensity'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"i", _view.intensity) // EJsS HtmlView.HtmlView Page: declaration of element 'i'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'i'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'i'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'i'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'i'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'i'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'i'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'i'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"intensity_txt", _view.intensity) // EJsS HtmlView.HtmlView Page: declaration of element 'intensity_txt'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'intensity_txt'
      .setProperty("Font","normal normal 17px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'intensity_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"lambdabutton_grp", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'lambdabutton_grp'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'lambdabutton_grp'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"wbutton_line", _view.lambdabutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'wbutton_line'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"wbutton_cover", _view.lambdabutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'wbutton_cover'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'wbutton_cover'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'wbutton_cover'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'wbutton_cover'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"wbutton", _view.lambdabutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'wbutton'
      .setProperty("FillColor","url(#mygrandient4)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'wbutton'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'wbutton'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'wbutton'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"wbutton2", _view.lambdabutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'wbutton2'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'wbutton2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'wbutton2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"wbutton3", _view.lambdabutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'wbutton3'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'wbutton3'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'wbutton3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ibutton_grp", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'ibutton_grp'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'ibutton_grp'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"ibutton_line", _view.ibutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'ibutton_line'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ibuttona_cover", _view.ibutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'ibuttona_cover'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ibuttona_cover'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ibuttona_cover'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'ibuttona_cover'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ibutton", _view.ibutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'ibutton'
      .setProperty("FillColor","url(#mygrandient4)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ibutton'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ibutton'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'ibutton'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ibutton2", _view.ibutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'ibutton2'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ibutton2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ibutton2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ibutton3", _view.ibutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'ibutton3'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ibutton3'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ibutton3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"workfunctionbutton_grp", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'workfunctionbutton_grp'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'workfunctionbutton_grp'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"mbutton_line", _view.workfunctionbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'mbutton_line'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mbuttoncover", _view.workfunctionbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'mbuttoncover'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mbuttoncover'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mbuttoncover'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mbuttoncover'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mbutton", _view.workfunctionbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'mbutton'
      .setProperty("FillColor","url(#mygrandient4)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mbutton'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mbutton'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mbutton'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mbutton2", _view.workfunctionbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'mbutton2'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mbutton2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mbutton2'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'mbutton2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mbutton3", _view.workfunctionbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'mbutton3'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mbutton3'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mbutton3'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'mbutton3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"workfunction", _view.workfunctionbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'workfunction'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'workfunction'
      .setProperty("Text","work function") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'workfunction'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"workfunction3", _view.workfunctionbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'workfunction3'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'workfunction3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"marker", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'marker'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'marker'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'marker'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'marker'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'marker'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'marker'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"eFieldpos", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'eFieldpos'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'eFieldpos'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'eFieldpos'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'eFieldpos'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'eFieldpos'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'eFieldpos'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'eFieldpos'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"Efieldlookang", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'Efieldlookang'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Efieldlookang'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Efieldlookang'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"LeftBracket__old_", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'LeftBracket__old_'
      .setProperty("NumberOfElements",3) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'LeftBracket__old_'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'LeftBracket__old_'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'LeftBracket__old_'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'LeftBracket__old_'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Left_Bracket", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'Left_Bracket'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Left_Bracket'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"leftline3", _view.Left_Bracket) // EJsS HtmlView.HtmlView Page: declaration of element 'leftline3'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'leftline3'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'leftline3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'leftline3'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'leftline3'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"leftline2", _view.Left_Bracket) // EJsS HtmlView.HtmlView Page: declaration of element 'leftline2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'leftline2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'leftline2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'leftline2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"leftline1", _view.Left_Bracket) // EJsS HtmlView.HtmlView Page: declaration of element 'leftline1'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'leftline1'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'leftline1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'leftline1'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'leftline1'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"varMetal", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'varMetal'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'varMetal'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"dashes", _view.varMetal) // EJsS HtmlView.HtmlView Page: declaration of element 'dashes'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash8", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash8'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash8'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash8'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash7", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash7'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash7'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash7'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash6", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash6'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash6'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash6'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash5", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash5'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash5'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash5'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash4", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash4'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash4'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash4'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash3", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash3'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash3'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash3'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash2", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash2'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash2'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"dash1", _view.dashes) // EJsS HtmlView.HtmlView Page: declaration of element 'dash1'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dash1'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dash1'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"longdash", _view.varMetal) // EJsS HtmlView.HtmlView Page: declaration of element 'longdash'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'longdash'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'longdash'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'longdash'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"varM2", _view.varMetal) // EJsS HtmlView.HtmlView Page: declaration of element 'varM2'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'varM2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'varM2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'varM2'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'varM2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"varM", _view.varMetal) // EJsS HtmlView.HtmlView Page: declaration of element 'varM'
      .setProperty("FillColor","url(#mygrandient4)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'varM'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'varM'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'varM'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'varM'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"metalnames", _view.varMetal) // EJsS HtmlView.HtmlView Page: declaration of element 'metalnames'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Pt", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Pt'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Pt'
      .setProperty("Text","Pt") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Pt'
      .setProperty("Font","normal normal 20px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Pt'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Au", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Au'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Au'
      .setProperty("Text","Au") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Au'
      .setProperty("Font","normal normal 20px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Au'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Fe", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Fe'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Fe'
      .setProperty("Text","Fe") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Fe'
      .setProperty("Font","normal normal 23px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Fe'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Ag", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Ag'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Ag'
      .setProperty("Text","Ag") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Ag'
      .setProperty("Font","normal normal 23px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Ag'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Mg", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Mg'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Mg'
      .setProperty("Text","Mg") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Mg'
      .setProperty("Font","normal normal 23px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Mg'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Th", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Th'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Th'
      .setProperty("Text","Th") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Th'
      .setProperty("Font","normal normal 23px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Th'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Ca", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Ca'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Ca'
      .setProperty("Text","Ca") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Ca'
      .setProperty("Font","normal normal 23px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Ca'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Rb", _view.metalnames) // EJsS HtmlView.HtmlView Page: declaration of element 'Rb'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Rb'
      .setProperty("Text","Rb") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Rb'
      .setProperty("Font","normal normal 23px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Rb'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"RightBracket", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'RightBracket'
      .setProperty("NumberOfElements",3) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'RightBracket'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'RightBracket'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'RightBracket'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'RightBracket'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"LeftGrayBar", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'LeftGrayBar'
      .setProperty("FillColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'LeftGrayBar'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'LeftGrayBar'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'LeftGrayBar'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'LeftGrayBar'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"LeftGrayBar22", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'LeftGrayBar22'
      .setProperty("FillColor","url(#mygrandient1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'LeftGrayBar22'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'LeftGrayBar22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'LeftGrayBar22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'LeftGrayBar22'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'LeftGrayBar22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Target", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'Target'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Target'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Target'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Target'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Target'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"signs2", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'signs2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Leftsigns23", _view.signs2) // EJsS HtmlView.HtmlView Page: declaration of element 'Leftsigns23'
      .setProperty("Text","+") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Leftsigns23'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Leftsigns222", _view.signs2) // EJsS HtmlView.HtmlView Page: declaration of element 'Leftsigns222'
      .setProperty("Text","-") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Leftsigns222'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Leftsigns232", _view.signs2) // EJsS HtmlView.HtmlView Page: declaration of element 'Leftsigns232'
      .setProperty("Text","+") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Leftsigns232'
      .setProperty("Font","normal normal 30px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Leftsigns232'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Leftsigns2222", _view.signs2) // EJsS HtmlView.HtmlView Page: declaration of element 'Leftsigns2222'
      .setProperty("Text","-") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Leftsigns2222'
      .setProperty("Font","normal normal 30px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Leftsigns2222'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"RightGrayBar2", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'RightGrayBar2'
      .setProperty("FillColor","lightGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'RightGrayBar2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'RightGrayBar2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'RightGrayBar2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'RightGrayBar2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"RightGrayBar", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'RightGrayBar'
      .setProperty("FillColor","url(#mygrandient1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'RightGrayBar'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'RightGrayBar'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'RightGrayBar'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'RightGrayBar'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"WorkFunction", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'WorkFunction'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'WorkFunction'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"signs", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'signs'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Rightsigns", _view.signs) // EJsS HtmlView.HtmlView Page: declaration of element 'Rightsigns'
      .setProperty("Text","-") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Rightsigns'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Rightsigns2", _view.signs) // EJsS HtmlView.HtmlView Page: declaration of element 'Rightsigns2'
      .setProperty("Text","+") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Rightsigns2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Rightsigns3", _view.signs) // EJsS HtmlView.HtmlView Page: declaration of element 'Rightsigns3'
      .setProperty("Text","-") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Rightsigns3'
      .setProperty("Font","normal normal 30px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Rightsigns3'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"Rightsigns22", _view.signs) // EJsS HtmlView.HtmlView Page: declaration of element 'Rightsigns22'
      .setProperty("Text","+") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Rightsigns22'
      .setProperty("Font","normal normal 30px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Rightsigns22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ammeter2", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'ammeter2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"ammeter", _view.ammeter2) // EJsS HtmlView.HtmlView Page: declaration of element 'ammeter'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ammeter'
      .setProperty("SizeX",40) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'ammeter'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'ammeter'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ammeter'
      .setProperty("SizeY",40) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'ammeter'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'ammeter'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'ammeter'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"current2", _view.ammeter2) // EJsS HtmlView.HtmlView Page: declaration of element 'current2'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'current2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"A", _view.ammeter2) // EJsS HtmlView.HtmlView Page: declaration of element 'A'
      .setProperty("Text","A") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'A'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"battery", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'battery'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"LeftVertLine", _view.battery) // EJsS HtmlView.HtmlView Page: declaration of element 'LeftVertLine'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'LeftVertLine'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'LeftVertLine'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"RightVertLine", _view.battery) // EJsS HtmlView.HtmlView Page: declaration of element 'RightVertLine'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'RightVertLine'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'RightVertLine'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"zerovoltageline", _view.battery) // EJsS HtmlView.HtmlView Page: declaration of element 'zerovoltageline'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'zerovoltageline'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'zerovoltageline'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'zerovoltageline'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'zerovoltageline'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"vbutton_grp", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'vbutton_grp'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'vbutton_grp'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"vbutton_line", _view.vbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'vbutton_line'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'vbutton_line'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'vbutton_line'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"vbutton_cover", _view.vbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'vbutton_cover'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vbutton_cover'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'vbutton_cover'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'vbutton_cover'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"vbutton", _view.vbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'vbutton'
      .setProperty("FillColor","url(#mygrandient4)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vbutton'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'vbutton'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'vbutton'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"vbutton2", _view.vbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'vbutton2'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vbutton2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'vbutton2'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'vbutton2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"vbutton3", _view.vbutton_grp) // EJsS HtmlView.HtmlView Page: declaration of element 'vbutton3'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vbutton3'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'vbutton3'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'vbutton3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Voltagedrag", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'Voltagedrag'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Voltagedrag'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Voltagedrag'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Voltagedrag'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Voltagedrag'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'Voltagedrag'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Voltagedrag'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"voltage", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'voltage'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'voltage'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"electrons", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'electrons'
      .setProperty("FillColor","url(#mygrandient3)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'electrons'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'electrons'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'electrons'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'electrons'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"legend2", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'legend2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'legend2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.legend2) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("RelativePosition","NORTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape2'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'shape2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Photon_Legend_Text", _view.legend2) // EJsS HtmlView.HtmlView Page: declaration of element 'Photon_Legend_Text'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Photon_Legend_Text'
      .setProperty("Text","Photon") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Photon_Legend_Text'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Photon_Legend_Text'
      ;

    _view._addElement(EJSS_DRAWING2D.springSet,"Photon_Legend_Icon", _view.legend2) // EJsS HtmlView.HtmlView Page: declaration of element 'Photon_Legend_Icon'
      .setProperty("NumberOfElements",1) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'Photon_Legend_Icon'
      .setProperty("PointsPerLoop",8) // EJsS HtmlView.HtmlView Page: setting property 'PointsPerLoop' for element 'Photon_Legend_Icon'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Photon_Legend_Icon'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Photon_Legend_Icon'
      .setProperty("Loops",3) // EJsS HtmlView.HtmlView Page: setting property 'Loops' for element 'Photon_Legend_Icon'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Electron_Legend_Text", _view.legend2) // EJsS HtmlView.HtmlView Page: declaration of element 'Electron_Legend_Text'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Electron_Legend_Text'
      .setProperty("Text","Electron") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Electron_Legend_Text'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Electron_Legend_Text'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"Electron_Legend_Icon", _view.legend2) // EJsS HtmlView.HtmlView Page: declaration of element 'Electron_Legend_Icon'
      .setProperty("FillColor","url(#mygrandient3)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Electron_Legend_Icon'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Electron_Legend_Icon'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Electron_Legend_Icon'
      .setProperty("SizeY",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Electron_Legend_Icon'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Electron_Legend_Icon'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSetV", _view.worldview) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSetV'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSetV'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSetV'
      .setProperty("MarkEndColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'MarkEndColor' for element 'arrowSetV'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrowSetV'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"IvsV", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'IvsV'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'IvsV'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'IvsV'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'IvsV'
      .setProperty("Title","IvsV") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'IvsV'
      .setProperty("MaximumY",140) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'IvsV'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'IvsV'
      .setProperty("TRMessage","I-V graph") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'IvsV'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'IvsV'
      .setProperty("XTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'IvsV'
      .setProperty("YTickStep",20) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'IvsV'
      .setProperty("MarginX",5) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'IvsV'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'IvsV'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'IvsV'
      .setProperty("XScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'IvsV'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"current", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'current'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'current'
      .setProperty("RelativePosition","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'current'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'current'
      .setProperty("Y",140) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'current'
      .setProperty("Text","current") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'current'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'current'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'current'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail3", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'trail3'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail3'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace3", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'trace3'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'trace3'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'trace3'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'trace3'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace3'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axis2", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'axis2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axis2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axis2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axis2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axis2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axis2'
      .setProperty("SizeY",140) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axis2'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axis2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axis2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axis", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'axis'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axis'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axis'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axis'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axis'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axis'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axis'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axis'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axis'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"theoryZERO", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryZERO'
      .setProperty("FunctionY","0") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'theoryZERO'
      .setProperty("FunctionX","V") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'theoryZERO'
      .setProperty("Variable","V") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'theoryZERO'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryZERO'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theoryZERO'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"theoryzero", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryzero'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theoryzero'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theoryzero'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theoryzero'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryzero'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'theoryzero'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theoryzero'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theoryzero'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"squareline", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'squareline'
      .setProperty("FunctionX","V") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'squareline'
      .setProperty("Maximum",-0.) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'squareline'
      .setProperty("Variable","V") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'squareline'
      .setProperty("LineColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'squareline'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'squareline'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'squareline'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"squarelinedot", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'squarelinedot'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'squarelinedot'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'squarelinedot'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'squarelinedot'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'squarelinedot'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'squarelinedot'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'squarelinedot'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'squarelinedot'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"testcurvefit", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'testcurvefit'
      .setProperty("FunctionX","V") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'testcurvefit'
      .setProperty("Maximum",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'testcurvefit'
      .setProperty("Variable","V") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'testcurvefit'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'testcurvefit'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'testcurvefit'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'testcurvefit'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"curve1_sqrt1_x_2", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'curve1_sqrt1_x_2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'curve1_sqrt1_x_2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'curve1_sqrt1_x_2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'curve1_sqrt1_x_2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'curve1_sqrt1_x_2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'curve1_sqrt1_x_2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'curve1_sqrt1_x_2'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"curve1_sqrt1_x_222", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'curve1_sqrt1_x_222'
      .setProperty("FunctionX","V") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'curve1_sqrt1_x_222'
      .setProperty("Variable","V") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'curve1_sqrt1_x_222'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'curve1_sqrt1_x_222'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'curve1_sqrt1_x_222'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"theoryotovmax", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryotovmax'
      .setProperty("FunctionX","V") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'theoryotovmax'
      .setProperty("Variable","V") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'theoryotovmax'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryotovmax'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theoryotovmax'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"theoryotovmax2", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryotovmax2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theoryotovmax2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theoryotovmax2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theoryotovmax2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryotovmax2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theoryotovmax2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theoryotovmax2'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"theoryZEROforhighworkfunction", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryZEROforhighworkfunction'
      .setProperty("FunctionY","0") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'theoryZEROforhighworkfunction'
      .setProperty("FunctionX","V") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'theoryZEROforhighworkfunction'
      .setProperty("Variable","V") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'theoryZEROforhighworkfunction'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryZEROforhighworkfunction'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theoryZEROforhighworkfunction'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"theoryzero4", _view.IvsV) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryzero4'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theoryzero4'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theoryzero4'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theoryzero4'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryzero4'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'theoryzero4'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theoryzero4'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theoryzero4'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"KEmaxvsf", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'KEmaxvsf'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'KEmaxvsf'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'KEmaxvsf'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'KEmaxvsf'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'KEmaxvsf'
      .setProperty("TRMessage","V-f graph") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'KEmaxvsf'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'KEmaxvsf'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'KEmaxvsf'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'KEmaxvsf'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'KEmaxvsf'
      .setProperty("Title","KEmaxvsf") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'KEmaxvsf'
      .setProperty("MaximumY",7) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'KEmaxvsf'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'KEmaxvsf'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'KEmaxvsf'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'KEmaxvsf'
      .setProperty("MinimumY",-7) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'KEmaxvsf'
      .setProperty("TitleY","V") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'KEmaxvsf'
      .setProperty("TitleX","f / 10^14 Hz") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'KEmaxvsf'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'KEmaxvsf'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'KEmaxvsf'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'KEmaxvsf'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'KEmaxvsf'
      .setProperty("XScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'KEmaxvsf'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axis22", _view.KEmaxvsf) // EJsS HtmlView.HtmlView Page: declaration of element 'axis22'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axis22'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axis22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axis22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axis22'
      .setProperty("Y",-7) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axis22'
      .setProperty("SizeY",14) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axis22'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axis22'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axis22'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axis3", _view.KEmaxvsf) // EJsS HtmlView.HtmlView Page: declaration of element 'axis3'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axis3'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axis3'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axis3'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axis3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axis3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axis3'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axis3'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axis3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"fstopping", _view.KEmaxvsf) // EJsS HtmlView.HtmlView Page: declaration of element 'fstopping'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'fstopping'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'fstopping'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'fstopping'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'fstopping'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'fstopping'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'fstopping'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'fstopping'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"theory5", _view.KEmaxvsf) // EJsS HtmlView.HtmlView Page: declaration of element 'theory5'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory5'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory5'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory5'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory5'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory5'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory5'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"theory0tostop", _view.KEmaxvsf) // EJsS HtmlView.HtmlView Page: declaration of element 'theory0tostop'
      .setProperty("FunctionX","freq1") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'theory0tostop'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'theory0tostop'
      .setProperty("Variable","freq1") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'theory0tostop'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory0tostop'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'theory0tostop'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theory0tostop'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"theorystopto20", _view.KEmaxvsf) // EJsS HtmlView.HtmlView Page: declaration of element 'theorystopto20'
      .setProperty("FunctionX","freq1") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'theorystopto20'
      .setProperty("Maximum",20) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'theorystopto20'
      .setProperty("Variable","freq1") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'theorystopto20'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theorystopto20'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theorystopto20'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"Ivsintensity", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Ivsintensity'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'Ivsintensity'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'Ivsintensity'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'Ivsintensity'
      .setProperty("YStep",10) // EJsS HtmlView.HtmlView Page: setting property 'YStep' for element 'Ivsintensity'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'Ivsintensity'
      .setProperty("TRMessage","I-intensity graph") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'Ivsintensity'
      .setProperty("XTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'Ivsintensity'
      .setProperty("YTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'Ivsintensity'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'Ivsintensity'
      .setProperty("Title","Ivsintensity") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'Ivsintensity'
      .setProperty("MaximumY",100) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'Ivsintensity'
      .setProperty("MaximumX",100) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'Ivsintensity'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'Ivsintensity'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'Ivsintensity'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'Ivsintensity'
      .setProperty("AxisYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'Ivsintensity'
      .setProperty("TitleY","current") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'Ivsintensity'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'Ivsintensity'
      .setProperty("TitleX","Intensity / %") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'Ivsintensity'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'Ivsintensity'
      .setProperty("MarginX",5) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'Ivsintensity'
      .setProperty("MarginY",5) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'Ivsintensity'
      .setProperty("XStep",10) // EJsS HtmlView.HtmlView Page: setting property 'XStep' for element 'Ivsintensity'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'Ivsintensity'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axis222", _view.Ivsintensity) // EJsS HtmlView.HtmlView Page: declaration of element 'axis222'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axis222'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axis222'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axis222'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axis222'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axis222'
      .setProperty("SizeY",200) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axis222'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axis222'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axis222'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axis32", _view.Ivsintensity) // EJsS HtmlView.HtmlView Page: declaration of element 'axis32'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axis32'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axis32'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axis32'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axis32'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axis32'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axis32'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axis32'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axis32'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"theory23", _view.Ivsintensity) // EJsS HtmlView.HtmlView Page: declaration of element 'theory23'
      .setProperty("FunctionX","i") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'theory23'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'theory23'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'theory23'
      .setProperty("Variable","i") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'theory23'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory23'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theory23'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"theory54", _view.Ivsintensity) // EJsS HtmlView.HtmlView Page: declaration of element 'theory54'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory54'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory54'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory54'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory54'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory54'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory54'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"theoryzero3", _view.Ivsintensity) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryzero3'
      .setProperty("FunctionY","0") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'theoryzero3'
      .setProperty("FunctionX","i") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'theoryzero3'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'theoryzero3'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'theoryzero3'
      .setProperty("Variable","i") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'theoryzero3'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryzero3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theoryzero3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"theoryzero2", _view.Ivsintensity) // EJsS HtmlView.HtmlView Page: declaration of element 'theoryzero2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theoryzero2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theoryzero2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theoryzero2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theoryzero2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'theoryzero2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theoryzero2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theoryzero2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"_isMobile", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element '_isMobile'
      .setProperty("Width","40%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element '_isMobile'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"Modules", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'Modules'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton2'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'resetButton2'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"FullScreen2Button2", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'FullScreen2Button2'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'FullScreen2Button2'
      .setProperty("Tooltip","Fullscreen ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'FullScreen2Button2'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/window.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'FullScreen2Button2'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/close.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'FullScreen2Button2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"workfunction2", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'workfunction2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.workfunction2) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"voltage2", _view._isMobile) // EJsS HtmlView.HtmlView Page: declaration of element 'voltage2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox22", _view.voltage2) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox22'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'comboBox22'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"intensity2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'intensity2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"wavelength", _view.intensity2) // EJsS HtmlView.HtmlView Page: declaration of element 'wavelength'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wavelength'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'wavelength'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox3", _view.intensity2) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox3'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'comboBox3'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox3'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Photoelectric Effect Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics/06modernphysics/photoelectric/Screen Shot 2017-04-12 at 2.30.06 PM.png" />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics/06modernphysics/photoelectric/Screen Shot 2017-04-20 at 4.46.53 PM.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics/06modernphysics/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics/06modernphysics/01authorlookang50x50.png" />
 Fu-Kwun Hwang; lookang; tina
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fu-Kwun Hwang; lookang; tina.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new photoelectriceffectwee3("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics/06modernphysics/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
