<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Greatest common divisor (gcd) of two integers</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function GreaterCommonDivisor(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var questionanswer; // EjsS Model.Variables.Var Table.questionanswer
  var questionmorelessnumber; // EjsS Model.Variables.Var Table.questionmorelessnumber
  var questionthannumber; // EjsS Model.Variables.Var Table.questionthannumber
  var moreless; // EjsS Model.Variables.Var Table.moreless
  var textquestion; // EjsS Model.Variables.Var Table.textquestion
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var counter; // EjsS Model.Variables.Var Table.counter
  var elementinteracted; // EjsS Model.Variables.Var Table.elementinteracted

  var Androidapp; // EjsS Model.Variables.layout.Androidapp
  var iOSapp; // EjsS Model.Variables.layout.iOSapp
  var iOS; // EjsS Model.Variables.layout.iOS
  var Android; // EjsS Model.Variables.layout.Android
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var m; // EjsS Model.Variables.simplespring.m
  var k; // EjsS Model.Variables.simplespring.k
  var l; // EjsS Model.Variables.simplespring.l
  var n; // EjsS Model.Variables.simplespring.n
  var x; // EjsS Model.Variables.simplespring.x
  var xs; // EjsS Model.Variables.simplespring.xs
  var y; // EjsS Model.Variables.simplespring.y
  var vx; // EjsS Model.Variables.simplespring.vx
  var vxs; // EjsS Model.Variables.simplespring.vxs
  var vxstored; // EjsS Model.Variables.simplespring.vxstored
  var t; // EjsS Model.Variables.simplespring.t
  var tcst; // EjsS Model.Variables.simplespring.tcst
  var X; // EjsS Model.Variables.simplespring.X
  var T; // EjsS Model.Variables.simplespring.T
  var dt; // EjsS Model.Variables.simplespring.dt
  var w; // EjsS Model.Variables.simplespring.w
  var nt; // EjsS Model.Variables.simplespring.nt
  var counterA; // EjsS Model.Variables.simplespring.counterA
  var counterB; // EjsS Model.Variables.simplespring.counterB
  var pointB; // EjsS Model.Variables.simplespring.pointB
  var arraypointB; // EjsS Model.Variables.simplespring.arraypointB
  var tpointB; // EjsS Model.Variables.simplespring.tpointB
  var tarraypointB; // EjsS Model.Variables.simplespring.tarraypointB
  var pointA; // EjsS Model.Variables.simplespring.pointA
  var tpointA; // EjsS Model.Variables.simplespring.tpointA
  var arraypointA; // EjsS Model.Variables.simplespring.arraypointA
  var tarraypointA; // EjsS Model.Variables.simplespring.tarraypointA
  var textA; // EjsS Model.Variables.simplespring.textA
  var textB; // EjsS Model.Variables.simplespring.textB

  var xline; // EjsS Model.Variables.line.xline
  var yline; // EjsS Model.Variables.line.yline
  var xmirror; // EjsS Model.Variables.line.xmirror
  var ymirror; // EjsS Model.Variables.line.ymirror
  var theta; // EjsS Model.Variables.line.theta
  var xdrag; // EjsS Model.Variables.line.xdrag
  var ydrag; // EjsS Model.Variables.line.ydrag
  var xdragmirror; // EjsS Model.Variables.line.xdragmirror
  var ydragmirror; // EjsS Model.Variables.line.ydragmirror

  var a; // EjsS Model.Variables.transformation.a
  var b; // EjsS Model.Variables.transformation.b
  var c; // EjsS Model.Variables.transformation.c
  var d; // EjsS Model.Variables.transformation.d
  var e; // EjsS Model.Variables.transformation.e
  var f; // EjsS Model.Variables.transformation.f

  var selectedmodel; // EjsS Model.Variables.functionY.selectedmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var xmodel; // EjsS Model.Variables.functionY.xmodel
  var showmodel; // EjsS Model.Variables.functionY.showmodel
  var font; // EjsS Model.Variables.functionY.font

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      questionanswer : questionanswer,
      questionmorelessnumber : questionmorelessnumber,
      questionthannumber : questionthannumber,
      moreless : moreless,
      textquestion : textquestion,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      counter : counter,
      elementinteracted : elementinteracted,
      Androidapp : Androidapp,
      iOSapp : iOSapp,
      iOS : iOS,
      Android : Android,
      iPad : iPad,
      iPhone : iPhone,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      m : m,
      k : k,
      l : l,
      n : n,
      x : x,
      xs : xs,
      y : y,
      vx : vx,
      vxs : vxs,
      vxstored : vxstored,
      t : t,
      tcst : tcst,
      X : X,
      T : T,
      dt : dt,
      w : w,
      nt : nt,
      counterA : counterA,
      counterB : counterB,
      pointB : pointB,
      arraypointB : arraypointB,
      tpointB : tpointB,
      tarraypointB : tarraypointB,
      pointA : pointA,
      tpointA : tpointA,
      arraypointA : arraypointA,
      tarraypointA : tarraypointA,
      textA : textA,
      textB : textB,
      xline : xline,
      yline : yline,
      xmirror : xmirror,
      ymirror : ymirror,
      theta : theta,
      xdrag : xdrag,
      ydrag : ydrag,
      xdragmirror : xdragmirror,
      ydragmirror : ydragmirror,
      a : a,
      b : b,
      c : c,
      d : d,
      e : e,
      f : f,
      selectedmodel : selectedmodel,
      functionY : functionY,
      xmodel : xmodel,
      showmodel : showmodel,
      font : font
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.questionanswer != "undefined") questionanswer = json.questionanswer;
    if(typeof json.questionmorelessnumber != "undefined") questionmorelessnumber = json.questionmorelessnumber;
    if(typeof json.questionthannumber != "undefined") questionthannumber = json.questionthannumber;
    if(typeof json.moreless != "undefined") moreless = json.moreless;
    if(typeof json.textquestion != "undefined") textquestion = json.textquestion;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.Androidapp != "undefined") Androidapp = json.Androidapp;
    if(typeof json.iOSapp != "undefined") iOSapp = json.iOSapp;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vxs != "undefined") vxs = json.vxs;
    if(typeof json.vxstored != "undefined") vxstored = json.vxstored;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.tcst != "undefined") tcst = json.tcst;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.nt != "undefined") nt = json.nt;
    if(typeof json.counterA != "undefined") counterA = json.counterA;
    if(typeof json.counterB != "undefined") counterB = json.counterB;
    if(typeof json.pointB != "undefined") pointB = json.pointB;
    if(typeof json.arraypointB != "undefined") arraypointB = json.arraypointB;
    if(typeof json.tpointB != "undefined") tpointB = json.tpointB;
    if(typeof json.tarraypointB != "undefined") tarraypointB = json.tarraypointB;
    if(typeof json.pointA != "undefined") pointA = json.pointA;
    if(typeof json.tpointA != "undefined") tpointA = json.tpointA;
    if(typeof json.arraypointA != "undefined") arraypointA = json.arraypointA;
    if(typeof json.tarraypointA != "undefined") tarraypointA = json.tarraypointA;
    if(typeof json.textA != "undefined") textA = json.textA;
    if(typeof json.textB != "undefined") textB = json.textB;
    if(typeof json.xline != "undefined") xline = json.xline;
    if(typeof json.yline != "undefined") yline = json.yline;
    if(typeof json.xmirror != "undefined") xmirror = json.xmirror;
    if(typeof json.ymirror != "undefined") ymirror = json.ymirror;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.xdrag != "undefined") xdrag = json.xdrag;
    if(typeof json.ydrag != "undefined") ydrag = json.ydrag;
    if(typeof json.xdragmirror != "undefined") xdragmirror = json.xdragmirror;
    if(typeof json.ydragmirror != "undefined") ydragmirror = json.ydragmirror;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.e != "undefined") e = json.e;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.font != "undefined") font = json.font;
  };

  _model._inputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "questionanswer",  "questionmorelessnumber",  "questionthannumber",  "moreless",  "textquestion",  "pi",  "y1",  "ysize",  "counter",  "elementinteracted",  "Androidapp",  "iOSapp",  "iOS",  "Android",  "iPad",  "iPhone",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "m",  "k",  "l",  "n",  "x",  "xs",  "y",  "vx",  "vxs",  "vxstored",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "nt",  "counterA",  "counterB",  "pointB",  "arraypointB",  "tpointB",  "tarraypointB",  "pointA",  "tpointA",  "arraypointA",  "tarraypointA",  "textA",  "textB",  "xline",  "yline",  "xmirror",  "ymirror",  "theta",  "xdrag",  "ydrag",  "xdragmirror",  "ydragmirror",  "a",  "b",  "c",  "d",  "e",  "f",  "selectedmodel",  "functionY",  "xmodel",  "showmodel",  "font"]; 

  _model._outputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "questionanswer",  "questionmorelessnumber",  "questionthannumber",  "moreless",  "textquestion",  "pi",  "y1",  "ysize",  "counter",  "elementinteracted",  "Androidapp",  "iOSapp",  "iOS",  "Android",  "iPad",  "iPhone",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "m",  "k",  "l",  "n",  "x",  "xs",  "y",  "vx",  "vxs",  "vxstored",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "nt",  "counterA",  "counterB",  "pointB",  "arraypointB",  "tpointB",  "tarraypointB",  "pointA",  "tpointA",  "arraypointA",  "tarraypointA",  "textA",  "textB",  "xline",  "yline",  "xmirror",  "ymirror",  "theta",  "xdrag",  "ydrag",  "xdragmirror",  "ydragmirror",  "a",  "b",  "c",  "d",  "e",  "f",  "selectedmodel",  "functionY",  "xmodel",  "showmodel",  "font"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["userPlay"] = true;
  });

  _model.addToReset(function() {
    xmin = 0; // EjsS Model.Variables.Var Table.xmin
    xmax = 40; // EjsS Model.Variables.Var Table.xmax
    ymin = -2; // EjsS Model.Variables.Var Table.ymin
    ymax = 2; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "select dropdown menu and click play"; // EjsS Model.Variables.Var Table.text
    questionanswer = 21; // EjsS Model.Variables.Var Table.questionanswer
    questionmorelessnumber = 4; // EjsS Model.Variables.Var Table.questionmorelessnumber
    questionthannumber = 17; // EjsS Model.Variables.Var Table.questionthannumber
    moreless = ""; // EjsS Model.Variables.Var Table.moreless
    textquestion = "_______ more than 17 is 21"; // EjsS Model.Variables.Var Table.textquestion
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    counter = 0; // EjsS Model.Variables.Var Table.counter
    elementinteracted = -1; // EjsS Model.Variables.Var Table.elementinteracted
  });

  _model.addToReset(function() {
    Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android"); // EjsS Model.Variables.layout.Androidapp
    iOSapp = (typeof parent.device != 'undefined' && parent.device.platform == "iOS"); // EjsS Model.Variables.layout.iOSapp
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    m = 1; // EjsS Model.Variables.simplespring.m
    k = 1; // EjsS Model.Variables.simplespring.k
    l = 0; // EjsS Model.Variables.simplespring.l
    n = 100; // EjsS Model.Variables.simplespring.n
    x = 0; // EjsS Model.Variables.simplespring.x
    xs = new Array(n); // EjsS Model.Variables.simplespring.xs
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.xs
        xs[_i0] = x[0];  // EjsS Model.Variables.simplespring.xs
      }
    }());
    y = 0; // EjsS Model.Variables.simplespring.y
    vx = 0; // EjsS Model.Variables.simplespring.vx
    vxs = vx; // EjsS Model.Variables.simplespring.vxs
    vxstored = 0; // EjsS Model.Variables.simplespring.vxstored
    t = 0; // EjsS Model.Variables.simplespring.t
    X = x-l; // EjsS Model.Variables.simplespring.X
    T = 2*pi*Math.sqrt(m/k); // EjsS Model.Variables.simplespring.T
    dt = T/100; // EjsS Model.Variables.simplespring.dt
    w = 2*pi/T; // EjsS Model.Variables.simplespring.w
    nt = 10; // EjsS Model.Variables.simplespring.nt
    counterA = 0; // EjsS Model.Variables.simplespring.counterA
    counterB = 1; // EjsS Model.Variables.simplespring.counterB
    pointB = 0; // EjsS Model.Variables.simplespring.pointB
    arraypointB = new Array(nt); // EjsS Model.Variables.simplespring.arraypointB
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.arraypointB
        arraypointB[_i0] = 0;  // EjsS Model.Variables.simplespring.arraypointB
      }
    }());
    tpointB = 0; // EjsS Model.Variables.simplespring.tpointB
    tarraypointB = new Array(nt); // EjsS Model.Variables.simplespring.tarraypointB
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.tarraypointB
        tarraypointB[_i0] = 0;  // EjsS Model.Variables.simplespring.tarraypointB
      }
    }());
    pointA = 0; // EjsS Model.Variables.simplespring.pointA
    tpointA = 0; // EjsS Model.Variables.simplespring.tpointA
    arraypointA = new Array(nt); // EjsS Model.Variables.simplespring.arraypointA
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.arraypointA
        arraypointA[_i0] = 0;  // EjsS Model.Variables.simplespring.arraypointA
      }
    }());
    tarraypointA = new Array(nt); // EjsS Model.Variables.simplespring.tarraypointA
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.tarraypointA
        tarraypointA[_i0] = 0;  // EjsS Model.Variables.simplespring.tarraypointA
      }
    }());
    textA = new Array(nt); // EjsS Model.Variables.simplespring.textA
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.textA
        textA[_i0] = "";  // EjsS Model.Variables.simplespring.textA
      }
    }());
    textB = new Array(nt); // EjsS Model.Variables.simplespring.textB
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.textB
        textB[_i0] = "";  // EjsS Model.Variables.simplespring.textB
      }
    }());
  });

  _model.addToReset(function() {
    xline = 0; // EjsS Model.Variables.line.xline
    yline = 0; // EjsS Model.Variables.line.yline
    xmirror = new Array(n); // EjsS Model.Variables.line.xmirror
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.line.xmirror
        xmirror[_i0] = -x;  // EjsS Model.Variables.line.xmirror
      }
    }());
    ymirror = new Array(n); // EjsS Model.Variables.line.ymirror
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.line.ymirror
        ymirror[_i0] = -y;  // EjsS Model.Variables.line.ymirror
      }
    }());
    theta = 0; // EjsS Model.Variables.line.theta
    xdrag = 1; // EjsS Model.Variables.line.xdrag
    ydrag = 0; // EjsS Model.Variables.line.ydrag
    xdragmirror = 1; // EjsS Model.Variables.line.xdragmirror
    ydragmirror = 0; // EjsS Model.Variables.line.ydragmirror
  });

  _model.addToReset(function() {
    a = 1; // EjsS Model.Variables.transformation.a
    b = 1; // EjsS Model.Variables.transformation.b
    c = 1; // EjsS Model.Variables.transformation.c
    d = 1; // EjsS Model.Variables.transformation.d
    e = 0; // EjsS Model.Variables.transformation.e
    f = 0; // EjsS Model.Variables.transformation.f
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.functionY.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.functionY.selectedmodel
        selectedmodel[_i0] = "2*sin(t)";  // EjsS Model.Variables.functionY.selectedmodel
      }
    }());
    functionY = selectedmodel+""; // EjsS Model.Variables.functionY.functionY
    showmodel = false; // EjsS Model.Variables.functionY.showmodel
    font = "normal normal 2vw "; // EjsS Model.Variables.functionY.font
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function gcd_two_numbers(x, y) { //using 34,8 as example  // > CustomCode.gcd:1
    if ((typeof x !== 'number') || (typeof y !== 'number'))   // > CustomCode.gcd:2
      return false;  // > CustomCode.gcd:3
    x = Math.abs(x);  // > CustomCode.gcd:4
    y = Math.abs(y);  // > CustomCode.gcd:5
    while(y>0) {   // > CustomCode.gcd:6
      var t = y;       //dummy t variable  // > CustomCode.gcd:7
    //  alert("1t="+t); // first round t=8        second iteration t=2         bug repeat third t=8   bug fourth t=2  // > CustomCode.gcd:8
      y = x % y;      // 34%8 assign y =2                    y= 8%2 = 0          y =2           y =0  // > CustomCode.gcd:9
    //  alert("2y="+y); //first round=2  // > CustomCode.gcd:10
      x = t;           // assign t back to x                 x=2                 x=8             x= 2   // > CustomCode.gcd:11
     // alert("3x="+x);    // x =8  // > CustomCode.gcd:12
    }  // > CustomCode.gcd:13
    return x;  // > CustomCode.gcd:14
  //console.log(gcd_two_numbers(x, y));  // > CustomCode.gcd:15
  }  // > CustomCode.gcd:16

  _model.addToInitialization(function() {
    if (!__pagesEnabled["userPlay"]) return;
    var userPlay =   // > Initialization.userPlay:1
    "x=34;  \n"+  // > Initialization.userPlay:2
    "y=4;  \n"+  // > Initialization.userPlay:3
    "function gcd_two_numbers(x, y) { //using 34,8 as example  \n"+  // > Initialization.userPlay:4
    "  if ((typeof x !== 'number') || (typeof y !== 'number'))  \n"+  // > Initialization.userPlay:5
    "    return false;  \n"+  // > Initialization.userPlay:6
    "  x = Math.abs(x);  \n"+  // > Initialization.userPlay:7
    "  y = Math.abs(y);  \n"+  // > Initialization.userPlay:8
    "  while(y>0) {   \n"+  // > Initialization.userPlay:9
    "    var t = y;       //dummy t variable  \n"+  // > Initialization.userPlay:10
    "    y = x % y;      // 34%8 assign y =2                    y= 8%2 = 0          y =2           y =0  \n"+  // > Initialization.userPlay:11
    "    x = t;           // assign t back to x                 x=2                 x=8             x= 2  \n"+  // > Initialization.userPlay:12
    "  }  \n"+  // > Initialization.userPlay:13
    " return x;  \n"+  // > Initialization.userPlay:14
    " } \n"  // > Initialization.userPlay:15
       // > Initialization.userPlay:16
    _view.autoplayTextAreaMgeneral.setValue(userPlay); // put  // > Initialization.userPlay:17
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new GreaterCommonDivisor_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.controlPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'controlPanel'
          _view.field2.linkProperty("Value",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'Value' for element 'field2'
          _view.field2.setAction("OnChange", function(_data,_info) {
  gcd_two_numbers(x, y);

}); // HtmlView Page setting action 'OnChange' for element 'field2'
          _view.field.linkProperty("Value",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Value' for element 'field'
          _view.field.setAction("OnChange", function(_data,_info) {
  gcd_two_numbers(x, y);

}); // HtmlView Page setting action 'OnChange' for element 'field'
          _view.field3.linkProperty("Value",  function() { return gcd_two_numbers(x, y); } ); // HtmlView Page linking property 'Value' for element 'field3'
          _view.field3.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'field3'
          _view.autoplayTextAreaMgeneral.setAction("OnChange", function(_data,_info) {
  var userPlay = _view.autoplayTextAreaMgeneral.getValue();
   try {
   eval(userPlay);
   //xgeneral=numeric.dot(matrix_invert(Mgeneral),bgeneral);
  gcd_two_numbers(x, y);
  }
  catch(error) {
    _tools.showOkCancelDialog("you can define your own variables. There should be an output for the solution I, or that could be some error in code, try again!");
    }

}); // HtmlView Page setting action 'OnChange' for element 'autoplayTextAreaMgeneral'
          _view.autoplayTextAreaMgeneral.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'autoplayTextAreaMgeneral'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function GreaterCommonDivisor_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = GreaterCommonDivisor_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function GreaterCommonDivisor_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"control", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'control'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'control'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
      .setProperty("Text","x=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'field2'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field2'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label2'
      .setProperty("Text","y=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'field'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label22", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label22'
      .setProperty("Text","gcd(x,y)=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label22'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field3", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'field3'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field3'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field3'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'field3'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.textArea,"autoplayTextAreaMgeneral", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'autoplayTextAreaMgeneral'
      .setProperty("Height","80vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'autoplayTextAreaMgeneral'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'autoplayTextAreaMgeneral'
      .setProperty("ChangeColorOnEdit",true) // EJsS HtmlView.HtmlView Page: setting property 'ChangeColorOnEdit' for element 'autoplayTextAreaMgeneral'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'autoplayTextAreaMgeneral'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Greatest common divisor (gcd) of two integers<br />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01authorPacoEsquembre2011.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01authorFelix_J_Garcia_Clemente.png" />
 weelookang@gmail.com; Francisco Esquembre; Felix J. Garcia Clemente
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com; Francisco Esquembre; Felix J. Garcia Clemente.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new GreaterCommonDivisor("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
