<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Vector Addition A + B = C Model</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function horizontalverticalsum(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var size; // EjsS Model.Variables.Var Table.size
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var pi; // EjsS Model.Variables.Var Table.pi
  var A2; // EjsS Model.Variables.Var Table.A2
  var sign; // EjsS Model.Variables.Var Table.sign
  var text; // EjsS Model.Variables.Var Table.text
  var Axmove; // EjsS Model.Variables.Var Table.Axmove
  var Aymove; // EjsS Model.Variables.Var Table.Aymove
  var end; // EjsS Model.Variables.Var Table.end
  var showParallelogram; // EjsS Model.Variables.Var Table.showParallelogram
  var selected; // EjsS Model.Variables.Var Table.selected

  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Android; // EjsS Model.Variables.layout.Android
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var A; // EjsS Model.Variables.vector.A
  var B; // EjsS Model.Variables.vector.B
  var C; // EjsS Model.Variables.vector.C
  var Ax; // EjsS Model.Variables.vector.Ax
  var Bx; // EjsS Model.Variables.vector.Bx
  var Ay; // EjsS Model.Variables.vector.Ay
  var By; // EjsS Model.Variables.vector.By
  var Axtext; // EjsS Model.Variables.vector.Axtext
  var Aytext; // EjsS Model.Variables.vector.Aytext
  var Bxtext; // EjsS Model.Variables.vector.Bxtext
  var Bytext; // EjsS Model.Variables.vector.Bytext
  var Bxo; // EjsS Model.Variables.vector.Bxo
  var Byo; // EjsS Model.Variables.vector.Byo
  var Cx; // EjsS Model.Variables.vector.Cx
  var Cy; // EjsS Model.Variables.vector.Cy
  var Cxtext; // EjsS Model.Variables.vector.Cxtext
  var Cytext; // EjsS Model.Variables.vector.Cytext
  var cta; // EjsS Model.Variables.vector.cta
  var ctadegree; // EjsS Model.Variables.vector.ctadegree
  var ctaB; // EjsS Model.Variables.vector.ctaB
  var ctaC; // EjsS Model.Variables.vector.ctaC
  var ctaBdegree; // EjsS Model.Variables.vector.ctaBdegree
  var ctaCdegree; // EjsS Model.Variables.vector.ctaCdegree
  var showComponentsAx; // EjsS Model.Variables.vector.showComponentsAx
  var showComponentsAy; // EjsS Model.Variables.vector.showComponentsAy
  var showComponentsBx; // EjsS Model.Variables.vector.showComponentsBx
  var showComponentsBy; // EjsS Model.Variables.vector.showComponentsBy
  var showComponentsx; // EjsS Model.Variables.vector.showComponentsx
  var showComponentsy; // EjsS Model.Variables.vector.showComponentsy

  var dcangle; // EjsS Model.Variables.anglepolygon.dcangle
  var nangle; // EjsS Model.Variables.anglepolygon.nangle
  var px; // EjsS Model.Variables.anglepolygon.px
  var py; // EjsS Model.Variables.anglepolygon.py
  var c; // EjsS Model.Variables.anglepolygon.c
  var counter; // EjsS Model.Variables.anglepolygon.counter
  var polPts; // EjsS Model.Variables.anglepolygon.polPts

  var dcangle2; // EjsS Model.Variables.anglepolygon 2.dcangle2
  var nangle2; // EjsS Model.Variables.anglepolygon 2.nangle2
  var px2; // EjsS Model.Variables.anglepolygon 2.px2
  var py2; // EjsS Model.Variables.anglepolygon 2.py2
  var c2; // EjsS Model.Variables.anglepolygon 2.c2
  var counter2; // EjsS Model.Variables.anglepolygon 2.counter2
  var polPts2; // EjsS Model.Variables.anglepolygon 2.polPts2

  var angle; // EjsS Model.Variables.sincos.angle
  var angledeg; // EjsS Model.Variables.sincos.angledeg

  var Axdotted; // EjsS Model.Variables.animate.Axdotted
  var Aydotted; // EjsS Model.Variables.animate.Aydotted
  var dtdotted; // EjsS Model.Variables.animate.dtdotted
  var Bxdotted; // EjsS Model.Variables.animate.Bxdotted
  var Bydotted; // EjsS Model.Variables.animate.Bydotted

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];
  var _ODEi_evolution2;
  var userEvents2=[];

  _model.getOdes = function() { return [_ODEi_evolution1,_ODEi_evolution2]; };

  _model.removeEvents = function(){
    userEvents1=[];
    userEvents2=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      size : size,
      t : t,
      dt : dt,
      sizex : sizex,
      sizey : sizey,
      pi : pi,
      A2 : A2,
      sign : sign,
      text : text,
      Axmove : Axmove,
      Aymove : Aymove,
      end : end,
      showParallelogram : showParallelogram,
      selected : selected,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Android : Android,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      A : A,
      B : B,
      C : C,
      Ax : Ax,
      Bx : Bx,
      Ay : Ay,
      By : By,
      Axtext : Axtext,
      Aytext : Aytext,
      Bxtext : Bxtext,
      Bytext : Bytext,
      Bxo : Bxo,
      Byo : Byo,
      Cx : Cx,
      Cy : Cy,
      Cxtext : Cxtext,
      Cytext : Cytext,
      cta : cta,
      ctadegree : ctadegree,
      ctaB : ctaB,
      ctaC : ctaC,
      ctaBdegree : ctaBdegree,
      ctaCdegree : ctaCdegree,
      showComponentsAx : showComponentsAx,
      showComponentsAy : showComponentsAy,
      showComponentsBx : showComponentsBx,
      showComponentsBy : showComponentsBy,
      showComponentsx : showComponentsx,
      showComponentsy : showComponentsy,
      dcangle : dcangle,
      nangle : nangle,
      px : px,
      py : py,
      c : c,
      counter : counter,
      polPts : polPts,
      dcangle2 : dcangle2,
      nangle2 : nangle2,
      px2 : px2,
      py2 : py2,
      c2 : c2,
      counter2 : counter2,
      polPts2 : polPts2,
      angle : angle,
      angledeg : angledeg,
      Axdotted : Axdotted,
      Aydotted : Aydotted,
      dtdotted : dtdotted,
      Bxdotted : Bxdotted,
      Bydotted : Bydotted
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.A2 != "undefined") A2 = json.A2;
    if(typeof json.sign != "undefined") sign = json.sign;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.Axmove != "undefined") Axmove = json.Axmove;
    if(typeof json.Aymove != "undefined") Aymove = json.Aymove;
    if(typeof json.end != "undefined") end = json.end;
    if(typeof json.showParallelogram != "undefined") showParallelogram = json.showParallelogram;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.B != "undefined") B = json.B;
    if(typeof json.C != "undefined") C = json.C;
    if(typeof json.Ax != "undefined") Ax = json.Ax;
    if(typeof json.Bx != "undefined") Bx = json.Bx;
    if(typeof json.Ay != "undefined") Ay = json.Ay;
    if(typeof json.By != "undefined") By = json.By;
    if(typeof json.Axtext != "undefined") Axtext = json.Axtext;
    if(typeof json.Aytext != "undefined") Aytext = json.Aytext;
    if(typeof json.Bxtext != "undefined") Bxtext = json.Bxtext;
    if(typeof json.Bytext != "undefined") Bytext = json.Bytext;
    if(typeof json.Bxo != "undefined") Bxo = json.Bxo;
    if(typeof json.Byo != "undefined") Byo = json.Byo;
    if(typeof json.Cx != "undefined") Cx = json.Cx;
    if(typeof json.Cy != "undefined") Cy = json.Cy;
    if(typeof json.Cxtext != "undefined") Cxtext = json.Cxtext;
    if(typeof json.Cytext != "undefined") Cytext = json.Cytext;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.ctadegree != "undefined") ctadegree = json.ctadegree;
    if(typeof json.ctaB != "undefined") ctaB = json.ctaB;
    if(typeof json.ctaC != "undefined") ctaC = json.ctaC;
    if(typeof json.ctaBdegree != "undefined") ctaBdegree = json.ctaBdegree;
    if(typeof json.ctaCdegree != "undefined") ctaCdegree = json.ctaCdegree;
    if(typeof json.showComponentsAx != "undefined") showComponentsAx = json.showComponentsAx;
    if(typeof json.showComponentsAy != "undefined") showComponentsAy = json.showComponentsAy;
    if(typeof json.showComponentsBx != "undefined") showComponentsBx = json.showComponentsBx;
    if(typeof json.showComponentsBy != "undefined") showComponentsBy = json.showComponentsBy;
    if(typeof json.showComponentsx != "undefined") showComponentsx = json.showComponentsx;
    if(typeof json.showComponentsy != "undefined") showComponentsy = json.showComponentsy;
    if(typeof json.dcangle != "undefined") dcangle = json.dcangle;
    if(typeof json.nangle != "undefined") nangle = json.nangle;
    if(typeof json.px != "undefined") px = json.px;
    if(typeof json.py != "undefined") py = json.py;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.polPts != "undefined") polPts = json.polPts;
    if(typeof json.dcangle2 != "undefined") dcangle2 = json.dcangle2;
    if(typeof json.nangle2 != "undefined") nangle2 = json.nangle2;
    if(typeof json.px2 != "undefined") px2 = json.px2;
    if(typeof json.py2 != "undefined") py2 = json.py2;
    if(typeof json.c2 != "undefined") c2 = json.c2;
    if(typeof json.counter2 != "undefined") counter2 = json.counter2;
    if(typeof json.polPts2 != "undefined") polPts2 = json.polPts2;
    if(typeof json.angle != "undefined") angle = json.angle;
    if(typeof json.angledeg != "undefined") angledeg = json.angledeg;
    if(typeof json.Axdotted != "undefined") Axdotted = json.Axdotted;
    if(typeof json.Aydotted != "undefined") Aydotted = json.Aydotted;
    if(typeof json.dtdotted != "undefined") dtdotted = json.dtdotted;
    if(typeof json.Bxdotted != "undefined") Bxdotted = json.Bxdotted;
    if(typeof json.Bydotted != "undefined") Bydotted = json.Bydotted;
  };

  _model._inputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "pi",  "A2",  "sign",  "text",  "Axmove",  "Aymove",  "end",  "showParallelogram",  "selected",  "iOS",  "iPad",  "iPhone",  "Android",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "A",  "B",  "C",  "Ax",  "Bx",  "Ay",  "By",  "Axtext",  "Aytext",  "Bxtext",  "Bytext",  "Bxo",  "Byo",  "Cx",  "Cy",  "Cxtext",  "Cytext",  "cta",  "ctadegree",  "ctaB",  "ctaC",  "ctaBdegree",  "ctaCdegree",  "showComponentsAx",  "showComponentsAy",  "showComponentsBx",  "showComponentsBy",  "showComponentsx",  "showComponentsy",  "dcangle",  "nangle",  "px",  "py",  "c",  "counter",  "polPts",  "dcangle2",  "nangle2",  "px2",  "py2",  "c2",  "counter2",  "polPts2",  "angle",  "angledeg",  "Axdotted",  "Aydotted",  "dtdotted",  "Bxdotted",  "Bydotted"]; 

  _model._outputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "pi",  "A2",  "sign",  "text",  "Axmove",  "Aymove",  "end",  "showParallelogram",  "selected",  "iOS",  "iPad",  "iPhone",  "Android",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "A",  "B",  "C",  "Ax",  "Bx",  "Ay",  "By",  "Axtext",  "Aytext",  "Bxtext",  "Bytext",  "Bxo",  "Byo",  "Cx",  "Cy",  "Cxtext",  "Cytext",  "cta",  "ctadegree",  "ctaB",  "ctaC",  "ctaBdegree",  "ctaCdegree",  "showComponentsAx",  "showComponentsAy",  "showComponentsBx",  "showComponentsBy",  "showComponentsx",  "showComponentsy",  "dcangle",  "nangle",  "px",  "py",  "c",  "counter",  "polPts",  "dcangle2",  "nangle2",  "px2",  "py2",  "c2",  "counter2",  "polPts2",  "angle",  "angledeg",  "Axdotted",  "Aydotted",  "dtdotted",  "Bxdotted",  "Bydotted"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["svgradial"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["Event 2"] = true;
    __pagesEnabled["animate"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["angle"] = true;
    __pagesEnabled["angle 2"] = true;
    __pagesEnabled["axaymove"] = false;
  });

  _model.addToReset(function() {
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -5; // EjsS Model.Variables.Var Table.ymin
    ymax = 5; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    size = rangex/20; // EjsS Model.Variables.Var Table.size
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    sizex = rangex/10; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/10; // EjsS Model.Variables.Var Table.sizey
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    A2 = Math.max(rangex,rangey); // EjsS Model.Variables.Var Table.A2
    sign = 1; // EjsS Model.Variables.Var Table.sign
    text = "drag/move the grey dot or \nselect/change Ax, Ay, Bx, By "; // EjsS Model.Variables.Var Table.text
    Axmove = 1; // EjsS Model.Variables.Var Table.Axmove
    Aymove = 1; // EjsS Model.Variables.Var Table.Aymove
    end = false; // EjsS Model.Variables.Var Table.end
    showParallelogram = false; // EjsS Model.Variables.Var Table.showParallelogram
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "Tip-to-tail";  // EjsS Model.Variables.Var Table.selected
      }
    }());
  });

  _model.addToReset(function() {
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    A = 5; // EjsS Model.Variables.vector.A
    B = 5; // EjsS Model.Variables.vector.B
    C = 5; // EjsS Model.Variables.vector.C
    Ax = Math.round((Math.random()-0.5)*2*A); // EjsS Model.Variables.vector.Ax
    Bx = Math.round((Math.random()-0.5)*2*B); // EjsS Model.Variables.vector.Bx
    Ay = Math.round((Math.random()-0.5)*2*A); // EjsS Model.Variables.vector.Ay
    By = Math.round((Math.random()-0.5)*2*B); // EjsS Model.Variables.vector.By
    Axtext = Ax/2; // EjsS Model.Variables.vector.Axtext
    Aytext = Ay/2; // EjsS Model.Variables.vector.Aytext
    Bxtext = Bx/2; // EjsS Model.Variables.vector.Bxtext
    Bytext = By/2; // EjsS Model.Variables.vector.Bytext
    Bxo = 0; // EjsS Model.Variables.vector.Bxo
    Byo = 0; // EjsS Model.Variables.vector.Byo
    Cx = Ax+Bx; // EjsS Model.Variables.vector.Cx
    Cy = Ay+By; // EjsS Model.Variables.vector.Cy
    Cxtext = Cx/2; // EjsS Model.Variables.vector.Cxtext
    Cytext = Cy/2; // EjsS Model.Variables.vector.Cytext
    cta = 0; // EjsS Model.Variables.vector.cta
    ctadegree = 0; // EjsS Model.Variables.vector.ctadegree
    ctaB = 0; // EjsS Model.Variables.vector.ctaB
    ctaC = 0; // EjsS Model.Variables.vector.ctaC
    ctaBdegree = 0; // EjsS Model.Variables.vector.ctaBdegree
    ctaCdegree = 0; // EjsS Model.Variables.vector.ctaCdegree
    showComponentsAx = false; // EjsS Model.Variables.vector.showComponentsAx
    showComponentsAy = false; // EjsS Model.Variables.vector.showComponentsAy
    showComponentsBx = false; // EjsS Model.Variables.vector.showComponentsBx
    showComponentsBy = false; // EjsS Model.Variables.vector.showComponentsBy
    showComponentsx = false; // EjsS Model.Variables.vector.showComponentsx
    showComponentsy = false; // EjsS Model.Variables.vector.showComponentsy
  });

  _model.addToReset(function() {
    nangle = 19; // EjsS Model.Variables.anglepolygon.nangle
    px = new Array(nangle); // EjsS Model.Variables.anglepolygon.px
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.anglepolygon.px
        px[_i0] = 0;  // EjsS Model.Variables.anglepolygon.px
      }
    }());
    py = new Array(nangle); // EjsS Model.Variables.anglepolygon.py
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.anglepolygon.py
        py[_i0] = 0;  // EjsS Model.Variables.anglepolygon.py
      }
    }());
    c = 0; // EjsS Model.Variables.anglepolygon.c
    polPts = new Array(nangle); // EjsS Model.Variables.anglepolygon.polPts
  });

  _model.addToReset(function() {
    nangle2 = 19; // EjsS Model.Variables.anglepolygon 2.nangle2
    px2 = new Array(nangle); // EjsS Model.Variables.anglepolygon 2.px2
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.anglepolygon 2.px2
        px2[_i0] = 0;  // EjsS Model.Variables.anglepolygon 2.px2
      }
    }());
    py2 = new Array(nangle); // EjsS Model.Variables.anglepolygon 2.py2
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.anglepolygon 2.py2
        py2[_i0] = 0;  // EjsS Model.Variables.anglepolygon 2.py2
      }
    }());
    c2 = 0; // EjsS Model.Variables.anglepolygon 2.c2
    counter2 = 0; // EjsS Model.Variables.anglepolygon 2.counter2
    polPts2 = new Array(nangle); // EjsS Model.Variables.anglepolygon 2.polPts2
  });

  _model.addToReset(function() {
    angle = 0; // EjsS Model.Variables.sincos.angle
    angledeg = 0; // EjsS Model.Variables.sincos.angledeg
  });

  _model.addToReset(function() {
    Axdotted = 0; // EjsS Model.Variables.animate.Axdotted
    Aydotted = 0; // EjsS Model.Variables.animate.Aydotted
    dtdotted = 0.05; // EjsS Model.Variables.animate.dtdotted
    Bxdotted = 0; // EjsS Model.Variables.animate.Bxdotted
    Bydotted = 0; // EjsS Model.Variables.animate.Bydotted
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
    _ODEi_evolution2 = _ODE_evolution2();
    _privateOdesList.push(_ODEi_evolution2);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function changeOrientation() {  // > CustomCode.ChangeOrientation:1
          switch (window.orientation) {  // > CustomCode.ChangeOrientation:2
              case 0:  // > CustomCode.ChangeOrientation:3
                  this.screenOrientation = 'portrait';  // > CustomCode.ChangeOrientation:4
                  if (iPad){  // > CustomCode.ChangeOrientation:5
                  return Math.max(window.screen.width,window.screen.height)*0.8;  // > CustomCode.ChangeOrientation:6
                  }  // > CustomCode.ChangeOrientation:7
                  else if (iPhone){  // > CustomCode.ChangeOrientation:8
                  return Math.max(window.screen.width,window.screen.height)*0.7;  // > CustomCode.ChangeOrientation:9
                  }  // > CustomCode.ChangeOrientation:10
                  else if (Android&&parent.cordova){  // > CustomCode.ChangeOrientation:11
                    return Math.max(window.innerWidth,window.innerHeight)*0.8;  // > CustomCode.ChangeOrientation:12
                    }  // > CustomCode.ChangeOrientation:13
                  else {  // > CustomCode.ChangeOrientation:14
                    return Math.max(window.innerWidth,window.innerHeight)*0.85;  // > CustomCode.ChangeOrientation:15
                    }  // > CustomCode.ChangeOrientation:16
                  break;  // > CustomCode.ChangeOrientation:17
              case 90:  // > CustomCode.ChangeOrientation:18
                  this.screenOrientation = 'landscape';  // > CustomCode.ChangeOrientation:19
                  if (iPad){  // > CustomCode.ChangeOrientation:20
                    return Math.min(window.screen.width,window.screen.height)*0.8;  // > CustomCode.ChangeOrientation:21
                  }  // > CustomCode.ChangeOrientation:22
                  else if (iPhone){  // > CustomCode.ChangeOrientation:23
                    return Math.min(window.screen.width,window.screen.height)*0.7;  // > CustomCode.ChangeOrientation:24
                    }  // > CustomCode.ChangeOrientation:25
                  else if (Android&&parent.cordova){  // > CustomCode.ChangeOrientation:26
                    return Math.min(window.innerWidth,window.innerHeight)*0.8;  // > CustomCode.ChangeOrientation:27
                    }  // > CustomCode.ChangeOrientation:28
                    else {  // > CustomCode.ChangeOrientation:29
                    return Math.min(window.innerWidth,window.innerHeight)*0.85;  // > CustomCode.ChangeOrientation:30
                    }  // > CustomCode.ChangeOrientation:31
                    // > CustomCode.ChangeOrientation:32
                  break;  // > CustomCode.ChangeOrientation:33
              case 180:  // > CustomCode.ChangeOrientation:34
                  this.screenOrientation = 'portrait';  // > CustomCode.ChangeOrientation:35
                  if (iPad){  // > CustomCode.ChangeOrientation:36
                    return Math.max(window.screen.width,window.screen.height)*0.8;  // > CustomCode.ChangeOrientation:37
                 }  // > CustomCode.ChangeOrientation:38
                 else if (iPhone){  // > CustomCode.ChangeOrientation:39
                   return Math.max(window.screen.width,window.screen.height)*0.7;  // > CustomCode.ChangeOrientation:40
                   }  // > CustomCode.ChangeOrientation:41
                   else if (Android&&parent.cordova){  // > CustomCode.ChangeOrientation:42
                     return Math.max(window.innerWidth,window.innerHeight)*0.8;  // > CustomCode.ChangeOrientation:43
                     }  // > CustomCode.ChangeOrientation:44
                 else{  // > CustomCode.ChangeOrientation:45
                   return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.ChangeOrientation:46
                   }  // > CustomCode.ChangeOrientation:47
                 break;  // > CustomCode.ChangeOrientation:48
              case -90:  // > CustomCode.ChangeOrientation:49
                  this.screenOrientation = 'landscape';  // > CustomCode.ChangeOrientation:50
                  if (iPad){  // > CustomCode.ChangeOrientation:51
                    return Math.min(window.screen.width,window.screen.height)*0.8;  // > CustomCode.ChangeOrientation:52
                  }  // > CustomCode.ChangeOrientation:53
                  else if (iPhone){  // > CustomCode.ChangeOrientation:54
                    return Math.min(window.screen.width,window.screen.height)*0.7;  // > CustomCode.ChangeOrientation:55
                    }  // > CustomCode.ChangeOrientation:56
                    else if (Android&&parent.cordova){  // > CustomCode.ChangeOrientation:57
                          return Math.min(window.innerWidth,window.innerHeight)*0.8;  // > CustomCode.ChangeOrientation:58
                      }  // > CustomCode.ChangeOrientation:59
                  else {  // > CustomCode.ChangeOrientation:60
                    return Math.min(window.innerWidth,window.innerHeight)*0.85;  // > CustomCode.ChangeOrientation:61
                    }  // > CustomCode.ChangeOrientation:62
                  break;  // > CustomCode.ChangeOrientation:63
              default:  // > CustomCode.ChangeOrientation:64
                  this.screenOrientation = 'unknown';  // > CustomCode.ChangeOrientation:65
           //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.ChangeOrientation:66
         return window.innerHeight*0.85;  // > CustomCode.ChangeOrientation:67
         }  // > CustomCode.ChangeOrientation:68
      }  // > CustomCode.ChangeOrientation:69

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    if ( selected[0]==="Parallelogram"){  // > Initialization.Init Page:1
      showParallelogram=true;  // > Initialization.Init Page:2
      dt=0;  // > Initialization.Init Page:3
      dtdotted=0.05;  // > Initialization.Init Page:4
      }  // > Initialization.Init Page:5
      if ( selected[0]==="Parallelogram A=5,∠=40°,B=3,∠=-20°"){  // > Initialization.Init Page:6
      showParallelogram=true;  // > Initialization.Init Page:7
      dt=0;  // > Initialization.Init Page:8
      dtdotted=0.05;  // > Initialization.Init Page:9
    A = 5;  // > Initialization.Init Page:10
    B = 3;  // > Initialization.Init Page:11
    cta = 40/180*pi;  // > Initialization.Init Page:12
    ctaB = -10/180*pi;  // > Initialization.Init Page:13
    Ax= A*Math.cos(cta);  // > Initialization.Init Page:14
    Bx= B*Math.cos(ctaB);  // > Initialization.Init Page:15
    Ay= A*Math.sin(cta);  // > Initialization.Init Page:16
    By= B*Math.sin(ctaB);	  // > Initialization.Init Page:17
    Cx= Ax+Bx;  // > Initialization.Init Page:18
    Cy= Ay+By;  // > Initialization.Init Page:19
    Axtext =  Ax/2;  // > Initialization.Init Page:20
    Aytext =  Ay/2;  // > Initialization.Init Page:21
    Bxtext =  Bx/2;  // > Initialization.Init Page:22
    Bytext =  By/2;  // > Initialization.Init Page:23
    Cxtext =  Cx/2;  // > Initialization.Init Page:24
    Cytext =  Cy/2;  // > Initialization.Init Page:25
      }  // > Initialization.Init Page:26
    else if ( selected[0]==="Tip-to-tail"){  // > Initialization.Init Page:27
      showParallelogram=false;  // > Initialization.Init Page:28
        dt=0.05;  // > Initialization.Init Page:29
      dtdotted=0;  // > Initialization.Init Page:30
    //x1 = -x1part;  // > Initialization.Init Page:31
    //x2= 0;  // > Initialization.Init Page:32
      }  // > Initialization.Init Page:33
      if ( selected[0]==="Tip-to-tail A=5,∠=40°,B=3,∠=-20°"){  // > Initialization.Init Page:34
    showParallelogram=false;  // > Initialization.Init Page:35
        dt=0.05;  // > Initialization.Init Page:36
      dtdotted=0;  // > Initialization.Init Page:37
    A = 5;  // > Initialization.Init Page:38
    B = 3;  // > Initialization.Init Page:39
    cta = 40/180*pi;  // > Initialization.Init Page:40
    ctaB = -10/180*pi;  // > Initialization.Init Page:41
    Ax= A*Math.cos(cta);  // > Initialization.Init Page:42
    Bx= B*Math.cos(ctaB);  // > Initialization.Init Page:43
    Ay= A*Math.sin(cta);  // > Initialization.Init Page:44
    By= B*Math.sin(ctaB);	  // > Initialization.Init Page:45
    Cx= Ax+Bx;  // > Initialization.Init Page:46
    Cy= Ay+By;  // > Initialization.Init Page:47
    Axtext =  Ax/2;  // > Initialization.Init Page:48
    Aytext =  Ay/2;  // > Initialization.Init Page:49
    Bxtext =  Bx/2;  // > Initialization.Init Page:50
    Bytext =  By/2;  // > Initialization.Init Page:51
    Cxtext =  Cx/2;  // > Initialization.Init Page:52
    Cytext =  Cy/2;  // > Initialization.Init Page:53
      }  // > Initialization.Init Page:54
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svgradial"]) return;
    var container = document.createElement('div');  // > Initialization.svgradial:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svgradial:3
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:1" />'+  // > Initialization.svgradial:4
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.5" />'+  // > Initialization.svgradial:5
      '  </radialGradient>'+  // > Initialization.svgradial:6
      '</defs></svg>';  // > Initialization.svgradial:7
    container.innerHTML = svggradient;  // > Initialization.svgradial:8
    document.body.appendChild(container);  // > Initialization.svgradial:9
    var container = document.createElement('div');  // > Initialization.svgradial:10
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:11
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svgradial:12
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.5" />'+  // > Initialization.svgradial:13
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.svgradial:14
      '  </radialGradient>'+  // > Initialization.svgradial:15
      '</defs></svg>';  // > Initialization.svgradial:16
    container.innerHTML = svggradient;  // > Initialization.svgradial:17
    document.body.appendChild(container);  // > Initialization.svgradial:18
    //"url(#mygrandient1)"  // > Initialization.svgradial:19
    var container = document.createElement('div');  // > Initialization.svgradial:20
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:21
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="70%" fx="90%" fy="50%">'+  // > Initialization.svgradial:22
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:0.5" />'+  // > Initialization.svgradial:23
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.5" />'+  // > Initialization.svgradial:24
      '  </radialGradient>'+  // > Initialization.svgradial:25
      '</defs></svg>';  // > Initialization.svgradial:26
    container.innerHTML = svggradient;  // > Initialization.svgradial:27
    document.body.appendChild(container);  // > Initialization.svgradial:28
    //"url(#mygrandient2)"  // > Initialization.svgradial:29
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    _view.plottingPanel.getTitleY().setPosition([0.5,0.9]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["animate"]) return;
    _ODEi_evolution2.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    A = Math.sqrt(Ax*Ax+Ay*Ay);  // > FixedRelations.FixRel Page:1
    B = Math.sqrt(Bx*Bx+By*By);  // > FixedRelations.FixRel Page:2
    Cx= Ax+Bx;  // > FixedRelations.FixRel Page:3
    Cy= Ay+By;  // > FixedRelations.FixRel Page:4
    C = Math.sqrt(Cx*Cx+Cy*Cy);  // > FixedRelations.FixRel Page:5
    cta =(Math.atan2(Ay,Ax));  // > FixedRelations.FixRel Page:6
    ctaB =(Math.atan2(By,Bx));  // > FixedRelations.FixRel Page:7
    ctaC =(Math.atan2(Cy,Cx));  // > FixedRelations.FixRel Page:8
    ctadegree = cta*180/pi;  // > FixedRelations.FixRel Page:9
    ctaBdegree = ctaB*180/pi;  // > FixedRelations.FixRel Page:10
    ctaCdegree = ctaC*180/pi;  // > FixedRelations.FixRel Page:11
    //ctadegree =cta*180/Math.PI;  // > FixedRelations.FixRel Page:12
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["angle"]) return;
    px[0]=0; // for drawing angle polygon  // > FixedRelations.angle:1
    py[0]=0; //  // > FixedRelations.angle:2
    // if statement to draw polygon angle  // > FixedRelations.angle:3
    for( counter=1;counter<nangle;counter++){  // > FixedRelations.angle:4
    //  c=Math.atan2(y,x)-(i-1)*dcangle;  // modify to work drawing from black line  // > FixedRelations.angle:5
    //  c=(Math.atan2(y,x))-(i-1)*dcangle;  // > FixedRelations.angle:6
    //if (sign===1){  // > FixedRelations.angle:7
      dcangle = (cta)/(nangle-2);  // > FixedRelations.angle:8
      c = (cta)-(counter-1)*dcangle;  // > FixedRelations.angle:9
      px[counter]=0+Math.min(A,A2)/2*Math.cos(cta-c); // complementary  // > FixedRelations.angle:10
    py[counter]=0+Math.min(A,A2)/2*Math.sin(cta-c); //  // > FixedRelations.angle:11
      // c = (cta2-cta)-(counter-1)*dcangle;  // > FixedRelations.angle:12
     //  px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta-c+pi/2); //  // > FixedRelations.angle:13
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta-c+pi/2); //  // > FixedRelations.angle:14
    // px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta2+c+pi/2); // complementary  // > FixedRelations.angle:15
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta2+c+pi/2); //  // > FixedRelations.angle:16
    }  // > FixedRelations.angle:17
    // polPts = [[0,0],[x,y],px[],py[]],[x2,y2]];  // > FixedRelations.angle:18
    polPts = [[px[0],py[0]],[px[1],py[1]],[px[2],py[2]],[px[3],py[3]],[px[4],py[4]],[px[5],py[5]],[px[6],py[6]],[px[7],py[7]],[px[8],py[8]],[px[9],py[9]],[px[10],py[10]],[px[11],py[11]],[px[12],py[12]],[px[13],py[13]],[px[14],py[14]],[px[15],py[15]],[px[16],py[16]],[px[17],py[17]],[px[18],py[18]],[px[19],py[19]]];  // > FixedRelations.angle:19
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["angle 2"]) return;
    px2[0]=0; // for drawing angle polygon  // > FixedRelations.angle 2:1
    py2[0]=0; //  // > FixedRelations.angle 2:2
    // if statement to draw polygon angle  // > FixedRelations.angle 2:3
    for(  counter2=1;counter2<nangle2;counter2++){  // > FixedRelations.angle 2:4
    //  c=Math.atan2(y,x)-(i-1)*dcangle;  // modify to work drawing from black line  // > FixedRelations.angle 2:5
    //  c=(Math.atan2(y,x))-(i-1)*dcangle;  // > FixedRelations.angle 2:6
    //if (sign===1){  // > FixedRelations.angle 2:7
      dcangle2 = (ctaB)/(nangle2-2);  // > FixedRelations.angle 2:8
      c2 = (ctaB)-(counter2-1)*dcangle2;  // > FixedRelations.angle 2:9
      px2[counter2]=0+1*Math.cos(ctaB-c2); // complementary  // > FixedRelations.angle 2:10
    py2[counter2]=0+1*Math.sin(ctaB-c2); //  // > FixedRelations.angle 2:11
      // c = (cta2-cta)-(counter-1)*dcangle;  // > FixedRelations.angle 2:12
     //  px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta-c+pi/2); //  // > FixedRelations.angle 2:13
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta-c+pi/2); //  // > FixedRelations.angle 2:14
    // px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta2+c+pi/2); // complementary  // > FixedRelations.angle 2:15
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta2+c+pi/2); //  // > FixedRelations.angle 2:16
    }  // > FixedRelations.angle 2:17
    // polPts = [[0,0],[x,y],px[],py[]],[x2,y2]];  // > FixedRelations.angle 2:18
    polPts2 = [[px2[0],py2[0]],[px2[1],py2[1]],[px2[2],py2[2]],[px2[3],py2[3]],[px2[4],py2[4]],[px2[5],py2[5]],[px2[6],py2[6]],[px2[7],py2[7]],[px2[8],py2[8]],[px2[9],py2[9]],[px2[10],py2[10]],[px2[11],py2[11]],[px2[12],py2[12]],[px2[13],py2[13]],[px2[14],py2[14]],[px2[15],py2[15]],[px2[16],py2[16]],[px2[17],py2[17]],[px2[18],py2[18]],[px2[19],py2[19]]];  // > FixedRelations.angle 2:19
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axaymove"]) return;
    if ( Ax>=xmax) {  // > FixedRelations.axaymove:1
      Axmove = -1;  // > FixedRelations.axaymove:2
      }  // > FixedRelations.axaymove:3
      if ( Ax<=xmin) {  // > FixedRelations.axaymove:4
      Axmove = 1;  // > FixedRelations.axaymove:5
      }  // > FixedRelations.axaymove:6
        // > FixedRelations.axaymove:7
      if ( Ay>=ymax) {  // > FixedRelations.axaymove:8
      Aymove = -1;  // > FixedRelations.axaymove:9
      }  // > FixedRelations.axaymove:10
      if ( Ay<=ymin) {  // > FixedRelations.axaymove:11
      Aymove = 1;  // > FixedRelations.axaymove:12
      }  // > FixedRelations.axaymove:13
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    if (_odeName=="animate") return _ODEi_evolution2;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["Bxo","Byo","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Event 2"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=Bxo) __mustReinitialize = true;
        __state[__cIn++] = Bxo;
        if (__state[__cIn]!=Byo) __mustReinitialize = true;
        __state[__cIn++] = Byo;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        Bxo = __state[__cOut++];
        Byo = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var Bxo = _aState[__cOut++];
        var Byo = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = Ax-0; // Rate for ODE: Evol Page:Bxo
        _aRate[__cRate++] = Ay-0; // Rate for ODE: Evol Page:Byo
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var Bxo = _aState[__cOut++];
        var Byo = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        Bxo = __state[__cOut++];
        Byo = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = Bxo;
        __state[__cIn++] = Byo;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var Bxo = _aState[__cOut++];
        var Byo = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Bxo-Ax;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        Bxo = __state[__cOut++];
        Byo = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = Bxo;
        __state[__cIn++] = Byo;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        text="reset to get a new problem!";  // > Event action for page Evol Page:2
        end=true;  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var Bxo = _aState[__cOut++];
        var Byo = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Byo - Ay;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        Bxo = __state[__cOut++];
        Byo = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = Bxo;
        __state[__cIn++] = Byo;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        text="reset to get a new problem!";  // > Event action for page Evol Page:2
        end=true;  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_Bxo(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_Byo(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _ODE_evolution2() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var _ODE_evolution2_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["Axdotted","Aydotted","Bxdotted","Bydotted","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dtdotted);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution2_Event1());
      for(k in userEvents2){__eventSolver.addEvent(userEvents2[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=Axdotted) __mustReinitialize = true;
        __state[__cIn++] = Axdotted;
        if (__state[__cIn]!=Aydotted) __mustReinitialize = true;
        __state[__cIn++] = Aydotted;
        if (__state[__cIn]!=Bxdotted) __mustReinitialize = true;
        __state[__cIn++] = Bxdotted;
        if (__state[__cIn]!=Bydotted) __mustReinitialize = true;
        __state[__cIn++] = Bydotted;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dtdotted===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dtdotted);
      __eventSolver.setInternalStepSize(dtdotted);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        Axdotted = __state[__cOut++];
        Aydotted = __state[__cOut++];
        Bxdotted = __state[__cOut++];
        Bydotted = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var Axdotted = _aState[__cOut++];
        var Aydotted = _aState[__cOut++];
        var Bxdotted = _aState[__cOut++];
        var Bydotted = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = Ax; // Rate for ODE: animate:Axdotted
        _aRate[__cRate++] = Ay; // Rate for ODE: animate:Aydotted
        _aRate[__cRate++] = Bx; // Rate for ODE: animate:Bxdotted
        _aRate[__cRate++] = By; // Rate for ODE: animate:Bydotted
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var Axdotted = _aState[__cOut++];
        var Aydotted = _aState[__cOut++];
        var Bxdotted = _aState[__cOut++];
        var Bydotted = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        Axdotted = __state[__cOut++];
        Aydotted = __state[__cOut++];
        Bxdotted = __state[__cOut++];
        Bydotted = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = Axdotted;
        __state[__cIn++] = Aydotted;
        __state[__cIn++] = Bxdotted;
        __state[__cIn++] = Bydotted;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents2.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution2_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var Axdotted = _aState[__cOut++];
        var Aydotted = _aState[__cOut++];
        var Bxdotted = _aState[__cOut++];
        var Bydotted = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Bxdotted - Bx;  // > Event zero-condition for page animate:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        Axdotted = __state[__cOut++];
        Aydotted = __state[__cOut++];
        Bxdotted = __state[__cOut++];
        Bydotted = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = Axdotted;
        __state[__cIn++] = Aydotted;
        __state[__cIn++] = Bxdotted;
        __state[__cIn++] = Bydotted;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page animate:1
        end=true; // force cannot play again  // > Event action for page animate:2
        text="reset to get a new problem!";  // > Event action for page animate:3
        //dt=0.05;  // > Event action for page animate:4
        //dtdotted = 0;  // > Event action for page animate:5
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_Axdotted(__time) {
    var __index = 0;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_Aydotted(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_Bxdotted(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_Bydotted(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new horizontalverticalsum_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.comboBox.linkProperty("Options",  function() { return ["Parallelogram","Tip-to-tail","Parallelogram A=5,∠=40°,B=3,∠=-20°","Tip-to-tail A=5,∠=40°,B=3,∠=-20°","ideas by Joseph Chua" ]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //Random
  //if ( option=="Random"){
  //  _reset();
    
  //  }
   if ( option=="Parallelogram"){
    showParallelogram=true;
    dt=0;
    dtdotted=0.05;
    }
    if ( option=="Parallelogram A=5,∠=40°,B=3,∠=-20°"){
    showParallelogram=true;
    dt=0;
    dtdotted=0.05;
  A = 5;
  B = 3;
  cta = 40/180*pi;
  ctaB = -10/180*pi;
  Ax= A*Math.cos(cta);
  Bx= B*Math.cos(ctaB);
  Ay= A*Math.sin(cta);
  By= B*Math.sin(ctaB);	
  Cx= Ax+Bx;
  Cy= Ay+By;
  Axtext =  Ax/2;
  Aytext =  Ay/2;
  Bxtext =  Bx/2;
  Bytext =  By/2;
  Cxtext =  Cx/2;
  Cytext =  Cy/2;
    }
  else if ( option=="Tip-to-tail"){
    showParallelogram=false;
      dt=0.05;
    dtdotted=0;
  //x1 = -x1part;
  //x2= 0;
    }
    if ( option=="Tip-to-tail A=5,∠=40°,B=3,∠=-20°"){
  showParallelogram=false;
      dt=0.05;
    dtdotted=0;
  A = 5;
  B = 3;
  cta = 40/180*pi;
  ctaB = -10/180*pi;
  Ax= A*Math.cos(cta);
  Bx= B*Math.cos(ctaB);
  Ay= A*Math.sin(cta);
  By= B*Math.sin(ctaB);	
  Cx= Ax+Bx;
  Cy= Ay+By;
  Axtext =  Ax/2;
  Aytext =  Ay/2;
  Bxtext =  Bx/2;
  Bytext =  By/2;
  Cxtext =  Cx/2;
  Cytext =  Cy/2;
    }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Disabled",  function() { return end===true; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.stepButton2.linkProperty("Disabled",  function() { return end===true; } ); // HtmlView Page linking property 'Disabled' for element 'stepButton2'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.resetButton22.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton22'
          _view.FullScreen2Button2.setAction("OffClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OffClick' for element 'FullScreen2Button2'
          _view.FullScreen2Button2.linkProperty("Visibility",  function() { return (!parent.cordova&&!iOS); } ); // HtmlView Page linking property 'Visibility' for element 'FullScreen2Button2'
          _view.FullScreen2Button2.linkProperty("Disabled",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Disabled' for element 'FullScreen2Button2'
          _view.FullScreen2Button2.setAction("OnClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnClick' for element 'FullScreen2Button2'
          _view.plottingPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return " Cx = "+_view._format(Cx,"0.00")+",  Cy = "+_view._format(Cy,"0.00")+", ∠C ="+_view._format(ctaCdegree,"0.0")+ "° "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.axis.linkProperty("Transformation",  function() { return angle; }, function(_v) { angle = _v; } ); // HtmlView Page linking property 'Transformation' for element 'axis'
          _view.angkeA32.linkProperty("PointsY",  function() { return [0,0, Math.sin(cta/16),Math.sin(cta/8), Math.sin(cta*3/16),Math.sin(cta/4), Math.sin(cta*5/16),Math.sin(cta*3/8), Math.sin(cta*7/16),Math.sin(cta/2), Math.sin(cta*9/16),Math.sin(cta*5/8), Math.sin(cta*11/16),Math.sin(cta*3/4), Math.sin(cta*13/16),Math.sin(cta*7/8), Math.sin(cta*15/16),Math.sin(cta)]; } ); // HtmlView Page linking property 'PointsY' for element 'angkeA32'
          _view.angkeA32.linkProperty("PointsX",  function() { return [0,1, Math.cos(cta/16),Math.cos(cta/8), Math.cos(cta*3/16),Math.cos(cta/4), Math.cos(cta*5/16),Math.cos(cta*3/8), Math.cos(cta*7/16),Math.cos(cta/2), Math.cos(cta*9/16),Math.cos(cta*5/8), Math.cos(cta*11/16),Math.cos(cta*3/4), Math.cos(cta*13/16),Math.cos(cta*7/8), Math.cos(cta*15/16),Math.cos(cta)]; } ); // HtmlView Page linking property 'PointsX' for element 'angkeA32'
          _view.group.linkProperty("X",  function() { return Math.cos(cta/2); } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return Math.sin(cta/2); } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.angle3.linkProperty("Text",  function() { return "∠A ="+_view._format(ctadegree,"0.0")+ "° "; } ); // HtmlView Page linking property 'Text' for element 'angle3'
          _view.Bangle2.linkProperty("X",  function() { return Bxo; }, function(_v) { Bxo = _v; } ); // HtmlView Page linking property 'X' for element 'Bangle2'
          _view.Bangle2.linkProperty("Y",  function() { return Byo; }, function(_v) { Byo = _v; } ); // HtmlView Page linking property 'Y' for element 'Bangle2'
          _view.angkeA22.linkProperty("PointsY",  function() { return [0,0, Math.sin(ctaB/16),Math.sin(ctaB/8), Math.sin(ctaB*3/16),Math.sin(ctaB/4), Math.sin(ctaB*5/16),Math.sin(ctaB*3/8), Math.sin(ctaB*7/16),Math.sin(ctaB/2), Math.sin(ctaB*9/16),Math.sin(ctaB*5/8), Math.sin(ctaB*11/16),Math.sin(ctaB*3/4), Math.sin(ctaB*13/16),Math.sin(ctaB*7/8), Math.sin(ctaB*15/16),Math.sin(ctaB)]; } ); // HtmlView Page linking property 'PointsY' for element 'angkeA22'
          _view.angkeA22.linkProperty("PointsX",  function() { return [0,1, Math.cos(ctaB/16),Math.cos(ctaB/8), Math.cos(ctaB*3/16),Math.cos(ctaB/4), Math.cos(ctaB*5/16),Math.cos(ctaB*3/8), Math.cos(ctaB*7/16),Math.cos(ctaB/2), Math.cos(ctaB*9/16),Math.cos(ctaB*5/8), Math.cos(ctaB*11/16),Math.cos(ctaB*3/4), Math.cos(ctaB*13/16),Math.cos(ctaB*7/8), Math.cos(ctaB*15/16),Math.cos(ctaB)]; } ); // HtmlView Page linking property 'PointsX' for element 'angkeA22'
          _view.group2.linkProperty("X",  function() { return Math.cos(ctaB/2); } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.group2.linkProperty("Y",  function() { return Math.sin(ctaB/2); } ); // HtmlView Page linking property 'Y' for element 'group2'
          _view.angle22.linkProperty("Text",  function() { return "∠B ="+_view._format(ctaBdegree,"0.0")+ "° "; } ); // HtmlView Page linking property 'Text' for element 'angle22'
          _view.C_2.linkProperty("SizeX",  function() { return Cx*0.55; } ); // HtmlView Page linking property 'SizeX' for element 'C_2'
          _view.C_2.linkProperty("Visibility",  function() { return _isPaused&&t>0||(showParallelogram===true&&end===true); } ); // HtmlView Page linking property 'Visibility' for element 'C_2'
          _view.C_2.linkProperty("SizeY",  function() { return Cy*0.55; } ); // HtmlView Page linking property 'SizeY' for element 'C_2'
          _view.C_.linkProperty("SizeX",  function() { return Cx; }, function(_v) { Cx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'C_'
          _view.C_.linkProperty("Visibility",  function() { return _isPaused&&t>0||(showParallelogram===true&&end===true); } ); // HtmlView Page linking property 'Visibility' for element 'C_'
          _view.C_.linkProperty("SizeY",  function() { return Cy; }, function(_v) { Cy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'C_'
          _view.text.linkProperty("X",  function() { return Cxtext; }, function(_v) { Cxtext = _v; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return Cytext; }, function(_v) { Cytext = _v; } ); // HtmlView Page linking property 'Y' for element 'text'
          _view.text.linkProperty("Text",  function() { return "C = "+_view._format(C,"0.0"); } ); // HtmlView Page linking property 'Text' for element 'text'
          _view.text.linkProperty("Visibility",  function() { return _isPaused&&t>0||(showParallelogram===true&&end===true); } ); // HtmlView Page linking property 'Visibility' for element 'text'
          _view.Bgroup.linkProperty("X",  function() { return Bxo; }, function(_v) { Bxo = _v; } ); // HtmlView Page linking property 'X' for element 'Bgroup'
          _view.Bgroup.linkProperty("Y",  function() { return Byo; }, function(_v) { Byo = _v; } ); // HtmlView Page linking property 'Y' for element 'Bgroup'
          _view.B.setAction("OnDrag", function(_data,_info) {
  Bxtext=Bx/2;
  Bytext=By/2;
  Cxtext=Cx/2;
  Cytext=Cy/2;

}); // HtmlView Page setting action 'OnDrag' for element 'B'
          _view.B.linkProperty("SizeX",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'B'
          _view.B.linkProperty("SizeY",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'SizeY' for element 'B'
          _view.Bdot2.setAction("OnRelease", function(_data,_info) {
  showComponentsBx=false;
  showComponentsBy=false;

}); // HtmlView Page setting action 'OnRelease' for element 'Bdot2'
          _view.Bdot2.linkProperty("X",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'X' for element 'Bdot2'
          _view.Bdot2.setAction("OnEnter", function(_data,_info) {
  showComponentsBx=true;
  showComponentsBy=true;

}); // HtmlView Page setting action 'OnEnter' for element 'Bdot2'
          _view.Bdot2.linkProperty("Y",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'Y' for element 'Bdot2'
          _view.Bdot2.setAction("OnDrag", function(_data,_info) {
  Bx = Math.round(Bx);
  By = Math.round(By);
  Bxtext=Bx/2;
  Bytext=By/2;
  Cxtext=Cx/2;
  Cytext=Cy/2;

}); // HtmlView Page setting action 'OnDrag' for element 'Bdot2'
          _view.text2.linkProperty("X",  function() { return Bxtext; }, function(_v) { Bxtext = _v; } ); // HtmlView Page linking property 'X' for element 'text2'
          _view.text2.linkProperty("Y",  function() { return Bytext; }, function(_v) { Bytext = _v; } ); // HtmlView Page linking property 'Y' for element 'text2'
          _view.text2.linkProperty("Text",  function() { return "B = "+_view._format(B,"0.0"); } ); // HtmlView Page linking property 'Text' for element 'text2'
          _view.A4.setAction("OnDrag", function(_data,_info) {
  if (end===true){
   Bxo = Ax;
   Byo = Ay;
   }
  Axtext=Ax/2;
  Aytext=Ay/2;
  Cxtext=Cx/2;
  Cytext=Cy/2;

}); // HtmlView Page setting action 'OnDrag' for element 'A4'
          _view.A4.linkProperty("SizeX",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'SizeX' for element 'A4'
          _view.A4.linkProperty("SizeY",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'SizeY' for element 'A4'
          _view.Adot.setAction("OnRelease", function(_data,_info) {
  showComponentsAx=false;
  showComponentsAy=false;

}); // HtmlView Page setting action 'OnRelease' for element 'Adot'
          _view.Adot.linkProperty("X",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'X' for element 'Adot'
          _view.Adot.setAction("OnEnter", function(_data,_info) {
  showComponentsAx=true;
  showComponentsAy=true;

}); // HtmlView Page setting action 'OnEnter' for element 'Adot'
          _view.Adot.linkProperty("Y",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'Y' for element 'Adot'
          _view.Adot.setAction("OnDrag", function(_data,_info) {
  if (end===true){
   Bxo = Ax;
   Byo = Ay;
   }
   Ax = Math.round(Ax);
  Ay = Math.round(Ay);
  Axtext=Ax/2;
  Aytext=Ay/2;
  Cxtext=Cx/2;
  Cytext=Cy/2;

}); // HtmlView Page setting action 'OnDrag' for element 'Adot'
          _view.text22.linkProperty("X",  function() { return Axtext; }, function(_v) { Axtext = _v; } ); // HtmlView Page linking property 'X' for element 'text22'
          _view.text22.linkProperty("Y",  function() { return Aytext; }, function(_v) { Aytext = _v; } ); // HtmlView Page linking property 'Y' for element 'text22'
          _view.text22.linkProperty("Text",  function() { return "A = "+_view._format(A,"0.0"); } ); // HtmlView Page linking property 'Text' for element 'text22'
          _view.yAxisUp.setAction("OnRelease", function(_data,_info) {
  showComponentsy=false;

}); // HtmlView Page setting action 'OnRelease' for element 'yAxisUp'
          _view.yAxisUp.setAction("OnEnter", function(_data,_info) {
  showComponentsy=true;

}); // HtmlView Page setting action 'OnEnter' for element 'yAxisUp'
          _view.yAxisUp.linkProperty("SizeY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'SizeY' for element 'yAxisUp'
          _view.yaxisdown2.linkProperty("SizeY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'SizeY' for element 'yaxisdown2'
          _view.xAxisRight.setAction("OnRelease", function(_data,_info) {
  showComponentsx=false;

}); // HtmlView Page setting action 'OnRelease' for element 'xAxisRight'
          _view.xAxisRight.linkProperty("SizeX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'SizeX' for element 'xAxisRight'
          _view.xAxisRight.setAction("OnEnter", function(_data,_info) {
  showComponentsx=true;

}); // HtmlView Page setting action 'OnEnter' for element 'xAxisRight'
          _view.dotxaxis.linkProperty("X",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'X' for element 'dotxaxis'
          _view.xaxisdown.linkProperty("SizeX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'SizeX' for element 'xaxisdown'
          _view.Bxcomponent2.linkProperty("SizeX",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Bxcomponent2'
          _view.Bxcomponent2.linkProperty("X",  function() { return Bxo; }, function(_v) { Bxo = _v; } ); // HtmlView Page linking property 'X' for element 'Bxcomponent2'
          _view.Bxcomponent2.linkProperty("Visibility",  function() { return showComponentsx||showComponentsBx; } ); // HtmlView Page linking property 'Visibility' for element 'Bxcomponent2'
          _view.Axcomponent.linkProperty("SizeX",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Axcomponent'
          _view.Axcomponent.linkProperty("Visibility",  function() { return showComponentsx||showComponentsAx; } ); // HtmlView Page linking property 'Visibility' for element 'Axcomponent'
          _view.Bxdottedline2.linkProperty("X",  function() { return Bxo; }, function(_v) { Bxo = _v; } ); // HtmlView Page linking property 'X' for element 'Bxdottedline2'
          _view.Bxdottedline2.linkProperty("SizeY",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Bxdottedline2'
          _view.Axdottedline.linkProperty("X",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'X' for element 'Axdottedline'
          _view.Axdottedline.linkProperty("SizeY",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Axdottedline'
          _view.Bycomponent2.linkProperty("Y",  function() { return Byo; }, function(_v) { Byo = _v; } ); // HtmlView Page linking property 'Y' for element 'Bycomponent2'
          _view.Bycomponent2.linkProperty("Visibility",  function() { return showComponentsy||showComponentsBy; } ); // HtmlView Page linking property 'Visibility' for element 'Bycomponent2'
          _view.Bycomponent2.linkProperty("SizeY",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Bycomponent2'
          _view.Aycomponent.linkProperty("Visibility",  function() { return showComponentsy||showComponentsAy; } ); // HtmlView Page linking property 'Visibility' for element 'Aycomponent'
          _view.Aycomponent.linkProperty("SizeY",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'SizeY' for element 'Aycomponent'
          _view.Bydottedline22.linkProperty("SizeX",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Bydottedline22'
          _view.Bydottedline22.linkProperty("X",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'X' for element 'Bydottedline22'
          _view.Aydottedline2.linkProperty("SizeX",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Aydottedline2'
          _view.Aydottedline2.linkProperty("Y",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'Y' for element 'Aydottedline2'
          _view.dotted.linkProperty("SizeX",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'dotted'
          _view.dotted.linkProperty("X",  function() { return Axdotted; }, function(_v) { Axdotted = _v; } ); // HtmlView Page linking property 'X' for element 'dotted'
          _view.dotted.linkProperty("Y",  function() { return Aydotted; }, function(_v) { Aydotted = _v; } ); // HtmlView Page linking property 'Y' for element 'dotted'
          _view.dotted.linkProperty("Visibility",  function() { return showParallelogram; }, function(_v) { showParallelogram = _v; } ); // HtmlView Page linking property 'Visibility' for element 'dotted'
          _view.dotted.linkProperty("SizeY",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'SizeY' for element 'dotted'
          _view.dotted2.linkProperty("SizeX",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'SizeX' for element 'dotted2'
          _view.dotted2.linkProperty("X",  function() { return Bxdotted; }, function(_v) { Bxdotted = _v; } ); // HtmlView Page linking property 'X' for element 'dotted2'
          _view.dotted2.linkProperty("Y",  function() { return Bydotted; }, function(_v) { Bydotted = _v; } ); // HtmlView Page linking property 'Y' for element 'dotted2'
          _view.dotted2.linkProperty("Visibility",  function() { return showParallelogram; }, function(_v) { showParallelogram = _v; } ); // HtmlView Page linking property 'Visibility' for element 'dotted2'
          _view.dotted2.linkProperty("SizeY",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'SizeY' for element 'dotted2'
          _view.isMoblise.linkProperty("Visibility",  function() { return !_isMobile; } ); // HtmlView Page linking property 'Visibility' for element 'isMoblise'
          _view.xSlider.linkProperty("Maximum",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'xSlider'
          _view.xSlider.linkProperty("Minimum",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'xSlider'
          _view.xSlider.linkProperty("Value",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'Value' for element 'xSlider'
          _view.xSlider.setAction("OnChange", function(_data,_info) {
  if(t>0){
    Bxo = Ax;
    }

}); // HtmlView Page setting action 'OnChange' for element 'xSlider'
          _view.xField.linkProperty("Value",  function() { return Ax; }, function(_v) { Ax = _v; } ); // HtmlView Page linking property 'Value' for element 'xField'
          _view.xField.setAction("OnChange", function(_data,_info) {
  if(t>0){
    Bxo = Ax;
    }

}); // HtmlView Page setting action 'OnChange' for element 'xField'
          _view.ySlider.linkProperty("Maximum",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'ySlider'
          _view.ySlider.linkProperty("Minimum",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'ySlider'
          _view.ySlider.linkProperty("Value",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'Value' for element 'ySlider'
          _view.ySlider.setAction("OnChange", function(_data,_info) {
  if(t>0){
    Byo = Ay;
    }

}); // HtmlView Page setting action 'OnChange' for element 'ySlider'
          _view.yField.linkProperty("Value",  function() { return Ay; }, function(_v) { Ay = _v; } ); // HtmlView Page linking property 'Value' for element 'yField'
          _view.yField.setAction("OnChange", function(_data,_info) {
  if(t>0){
    Byo = Ay;
    }

}); // HtmlView Page setting action 'OnChange' for element 'yField'
          _view.Bx2.linkProperty("Maximum",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'Bx2'
          _view.Bx2.linkProperty("Minimum",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'Bx2'
          _view.Bx2.linkProperty("Value",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'Value' for element 'Bx2'
          _view.Bx3.linkProperty("Value",  function() { return Bx; }, function(_v) { Bx = _v; } ); // HtmlView Page linking property 'Value' for element 'Bx3'
          _view.By2.linkProperty("Maximum",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'By2'
          _view.By2.linkProperty("Minimum",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'By2'
          _view.By2.linkProperty("Value",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'Value' for element 'By2'
          _view.By3.linkProperty("Value",  function() { return By; }, function(_v) { By = _v; } ); // HtmlView Page linking property 'Value' for element 'By3'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function horizontalverticalsum_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = horizontalverticalsum_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('About','./horizontalverticalsum_Intro_1.html');

  return _view;
} // end of main function

function horizontalverticalsum_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"inputPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'inputPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.inputPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.inputPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause to see the animation") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton2'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.inputPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","finer control ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton22", _view.inputPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton22'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton22'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"FullScreen2Button2", _view.inputPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'FullScreen2Button2'
      .setProperty("Tooltip","Fullscreen ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'FullScreen2Button2'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/window.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'FullScreen2Button2'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/close.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'FullScreen2Button2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("AxisXShow",true) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      .setProperty("Background","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","Vector Addition A + B = C Model") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("GridYShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("AxisYShow",true) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"axis", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'axis'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"angkeA32", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'angkeA32'
      .setProperty("FillColor","rgba(200,100,100,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'angkeA32'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'angkeA32'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'angkeA32'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'angkeA32'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"angle3", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'angle3'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'angle3'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'angle3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Bangle2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Bangle2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"angkeA22", _view.Bangle2) // EJsS HtmlView.HtmlView Page: declaration of element 'angkeA22'
      .setProperty("FillColor","rgba(100,100,200,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'angkeA22'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'angkeA22'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'angkeA22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'angkeA22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.Bangle2) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"angle22", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'angle22'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'angle22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'angle22'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"C_2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'C_2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'C_2'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'C_2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'C_2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'C_2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'C_2'
      .setProperty("MarkStart","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'C_2'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'C_2'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'C_2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'C_2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"C_", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'C_'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'C_'
      .setProperty("MarkMiddle","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkMiddle' for element 'C_'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'C_'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'C_'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'C_'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'C_'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'C_'
      .setProperty("MarkStart","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'C_'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'C_'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'C_'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'text'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'text'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'text'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Bgroup", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Bgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"B", _view.Bgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'B'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'B'
      .setProperty("MarkMiddle","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkMiddle' for element 'B'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'B'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'B'
      .setProperty("EnabledSize","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'B'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'B'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'B'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'B'
      .setProperty("MarkStart","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'B'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'B'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'B'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Bdot2", _view.Bgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'Bdot2'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Bdot2'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Bdot2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Bdot2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Bdot2'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Bdot2'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Bdot2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Bdot2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text2", _view.Bgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'text2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'text2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'text2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Agroup", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Agroup'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"A4", _view.Agroup) // EJsS HtmlView.HtmlView Page: declaration of element 'A4'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'A4'
      .setProperty("MarkMiddle","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkMiddle' for element 'A4'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'A4'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'A4'
      .setProperty("EnabledSize","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'A4'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'A4'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'A4'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'A4'
      .setProperty("MarkStart","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'A4'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'A4'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'A4'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Adot", _view.Agroup) // EJsS HtmlView.HtmlView Page: declaration of element 'Adot'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Adot'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Adot'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Adot'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Adot'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Adot'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Adot'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Adot'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text22", _view.Agroup) // EJsS HtmlView.HtmlView Page: declaration of element 'text22'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'text22'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'text22'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'text22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text22'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"yAxisUp", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'yAxisUp'
      .setProperty("MarkEnd","POINTED") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'yAxisUp'
      .setProperty("SizeX",0.0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yAxisUp'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'yAxisUp'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yAxisUp'
      .setProperty("X",0.0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yAxisUp'
      .setProperty("Y",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'yAxisUp'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yAxisUp'
      .setProperty("EnabledPosition","ENABLED_FIXED") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'yAxisUp'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"yaxisdown2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'yaxisdown2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yaxisdown2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yaxisdown2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yaxisdown2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'yaxisdown2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yaxisdown2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"xAxisRight", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'xAxisRight'
      .setProperty("MarkEnd","POINTED") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'xAxisRight'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'xAxisRight'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xAxisRight'
      .setProperty("X",0.0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'xAxisRight'
      .setProperty("Y",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xAxisRight'
      .setProperty("SizeY",0.0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xAxisRight'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xAxisRight'
      .setProperty("EnabledPosition","ENABLED_FIXED") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'xAxisRight'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dotxaxis", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'dotxaxis'
      .setProperty("FillColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dotxaxis'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'dotxaxis'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dotxaxis'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'dotxaxis'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'dotxaxis'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'dotxaxis'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'dotxaxis'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dotxaxis'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"xaxisdown", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'xaxisdown'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xaxisdown'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'xaxisdown'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xaxisdown'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xaxisdown'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xaxisdown'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Bxcomponent2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Bxcomponent2'
      .setProperty("MarkEnd","CURVE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'Bxcomponent2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Bxcomponent2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Bxcomponent2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Bxcomponent2'
      .setProperty("SizeY",0.0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Bxcomponent2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Bxcomponent2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Axcomponent", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Axcomponent'
      .setProperty("MarkEnd","CURVE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'Axcomponent'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Axcomponent'
      .setProperty("X",0.0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Axcomponent'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Axcomponent'
      .setProperty("Y",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Axcomponent'
      .setProperty("SizeY",0.0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Axcomponent'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Axcomponent'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"Bxdottedline2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Bxdottedline2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Bxdottedline2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Bxdottedline2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Bxdottedline2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Bxdottedline2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Bxdottedline2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Bxdottedline2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"Axdottedline", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Axdottedline'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Axdottedline'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Axdottedline'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Axdottedline'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Axdottedline'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Axdottedline'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Axdottedline'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Bycomponent2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Bycomponent2'
      .setProperty("MarkEnd","CURVE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'Bycomponent2'
      .setProperty("SizeX",0.0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Bycomponent2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Bycomponent2'
      .setProperty("X",0.0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Bycomponent2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Bycomponent2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Bycomponent2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Aycomponent", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Aycomponent'
      .setProperty("MarkEnd","CURVE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'Aycomponent'
      .setProperty("SizeX",0.0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Aycomponent'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Aycomponent'
      .setProperty("X",0.0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Aycomponent'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Aycomponent'
      .setProperty("Y",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Aycomponent'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Aycomponent'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"Bydottedline22", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Bydottedline22'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Bydottedline22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Bydottedline22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Bydottedline22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Bydottedline22'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Bydottedline22'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Bydottedline22'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"Aydottedline2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'Aydottedline2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'Aydottedline2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Aydottedline2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Aydottedline2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Aydottedline2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Aydottedline2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Aydottedline2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"dotted", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'dotted'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'dotted'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dotted'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'dotted'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dotted'
      .setProperty("MarkStart","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'dotted'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dotted'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dotted'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"dotted2", _view.axis) // EJsS HtmlView.HtmlView Page: declaration of element 'dotted2'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'dotted2'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dotted2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'dotted2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dotted2'
      .setProperty("MarkStart","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'dotted2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'dotted2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'dotted2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"isMoblise", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'isMoblise'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"xLabel", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'xLabel'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'xLabel'
      .setProperty("Tooltip","Ax = Acos(theta)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'xLabel'
      .setProperty("Text","Ax:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'xLabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"xSlider", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'xSlider'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'xSlider'
      .setProperty("Tooltip","horizontal direction component") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'xSlider'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'xSlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"xField", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'xField'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'xField'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'xField'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'xField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"yLabel2", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'yLabel2'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'yLabel2'
      .setProperty("Tooltip","Ax = Asin(theta)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'yLabel2'
      .setProperty("Text","Ay:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'yLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"ySlider", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'ySlider'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'ySlider'
      .setProperty("Tooltip","vertical direction component") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'ySlider'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'ySlider'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'ySlider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"yField", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'yField'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'yField'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'yField'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'yField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Bx", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'Bx'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Bx'
      .setProperty("Tooltip","B x component") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Bx'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Bx'
      .setProperty("Text","Bx:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Bx'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"Bx2", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'Bx2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Bx2'
      .setProperty("Tooltip","resultant vector") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Bx2'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'Bx2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Bx3", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'Bx3'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Bx3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Bx3'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'Bx3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"By", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'By'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'By'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'By'
      .setProperty("Text","By:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'By'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"By2", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'By2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'By2'
      .setProperty("Tooltip","vertical direction component") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'By2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'By2'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'By2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"By3", _view.isMoblise) // EJsS HtmlView.HtmlView Page: declaration of element 'By3'
      .setProperty("Width",50) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'By3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'By3'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'By3'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Vector Addition A + B = C Model<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01_measurement/ejss_src_horizontalverticalsum2/horizontalverticalsum/Screen Shot 2017-03-17 at 4.48.43 PM.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01_measurement/ejss_src_horizontalverticalsum2/01authorlookang50x50.png" />
 weelookang@gmail.com
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, CC-BY.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new horizontalverticalsum("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01_measurement/ejss_src_horizontalverticalsum2/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
