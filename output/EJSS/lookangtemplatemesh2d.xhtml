<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function lookangtemplatemesh2d(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var size; // EjsS Model.Variables.Var Table.size
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var text; // EjsS Model.Variables.Var Table.text

  var x; // EjsS Model.Variables.variables.x
  var y; // EjsS Model.Variables.variables.y
  var vx; // EjsS Model.Variables.variables.vx
  var vy; // EjsS Model.Variables.variables.vy
  var ax; // EjsS Model.Variables.variables.ax
  var ay; // EjsS Model.Variables.variables.ay

  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var KEvstime; // EjsS Model.Variables.layout.KEvstime
  var world; // EjsS Model.Variables.layout.world

  var selectedmodel; // EjsS Model.Variables.functionY.selectedmodel
  var xmodel; // EjsS Model.Variables.functionY.xmodel
  var showmodel; // EjsS Model.Variables.functionY.showmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var solutionY; // EjsS Model.Variables.functionY.solutionY

  var rMin; // EjsS Model.Variables.mesh2d.rMin
  var rMax; // EjsS Model.Variables.mesh2d.rMax
  var nR; // EjsS Model.Variables.mesh2d.nR
  var nTheta; // EjsS Model.Variables.mesh2d.nTheta
  var minTheta; // EjsS Model.Variables.mesh2d.minTheta
  var maxTheta; // EjsS Model.Variables.mesh2d.maxTheta
  var points; // EjsS Model.Variables.mesh2d.points
  var field; // EjsS Model.Variables.mesh2d.field
  var cells; // EjsS Model.Variables.mesh2d.cells
  var fieldFunction; // EjsS Model.Variables.mesh2d.fieldFunction
  var boundary; // EjsS Model.Variables.mesh2d.boundary
  var boundaryColors; // EjsS Model.Variables.mesh2d.boundaryColors
  var boundaryLabels; // EjsS Model.Variables.mesh2d.boundaryLabels

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      size : size,
      t : t,
      dt : dt,
      sizex : sizex,
      sizey : sizey,
      text : text,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      ax : ax,
      ay : ay,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      disabledworld : disabledworld,
      disabled : disabled,
      KEvstime : KEvstime,
      world : world,
      selectedmodel : selectedmodel,
      xmodel : xmodel,
      showmodel : showmodel,
      functionY : functionY,
      solutionY : solutionY,
      rMin : rMin,
      rMax : rMax,
      nR : nR,
      nTheta : nTheta,
      minTheta : minTheta,
      maxTheta : maxTheta,
      points : points,
      field : field,
      cells : cells,
      fieldFunction : fieldFunction,
      boundary : boundary,
      boundaryColors : boundaryColors,
      boundaryLabels : boundaryLabels
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.ay != "undefined") ay = json.ay;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.KEvstime != "undefined") KEvstime = json.KEvstime;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.solutionY != "undefined") solutionY = json.solutionY;
    if(typeof json.rMin != "undefined") rMin = json.rMin;
    if(typeof json.rMax != "undefined") rMax = json.rMax;
    if(typeof json.nR != "undefined") nR = json.nR;
    if(typeof json.nTheta != "undefined") nTheta = json.nTheta;
    if(typeof json.minTheta != "undefined") minTheta = json.minTheta;
    if(typeof json.maxTheta != "undefined") maxTheta = json.maxTheta;
    if(typeof json.points != "undefined") points = json.points;
    if(typeof json.field != "undefined") field = json.field;
    if(typeof json.cells != "undefined") cells = json.cells;
    if(typeof json.fieldFunction != "undefined") fieldFunction = json.fieldFunction;
    if(typeof json.boundary != "undefined") boundary = json.boundary;
    if(typeof json.boundaryColors != "undefined") boundaryColors = json.boundaryColors;
    if(typeof json.boundaryLabels != "undefined") boundaryLabels = json.boundaryLabels;
  };

  _model._inputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "text",  "x",  "y",  "vx",  "vy",  "ax",  "ay",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "KEvstime",  "world",  "selectedmodel",  "xmodel",  "showmodel",  "functionY",  "solutionY",  "rMin",  "rMax",  "nR",  "nTheta",  "minTheta",  "maxTheta",  "points",  "field",  "cells",  "fieldFunction",  "boundary",  "boundaryColors",  "boundaryLabels"]; 

  _model._outputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "size",  "t",  "dt",  "sizex",  "sizey",  "text",  "x",  "y",  "vx",  "vy",  "ax",  "ay",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "KEvstime",  "world",  "selectedmodel",  "xmodel",  "showmodel",  "functionY",  "solutionY",  "rMin",  "rMax",  "nR",  "nTheta",  "minTheta",  "maxTheta",  "points",  "field",  "cells",  "fieldFunction",  "boundary",  "boundaryColors",  "boundaryLabels"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page 2"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["field"] = true;
  });

  _model.addToReset(function() {
    xmin = -2*Math.PI; // EjsS Model.Variables.Var Table.xmin
    xmax = 2*Math.PI; // EjsS Model.Variables.Var Table.xmax
    ymin = -2*Math.PI; // EjsS Model.Variables.Var Table.ymin
    ymax = 2*Math.PI; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    size = rangex/20; // EjsS Model.Variables.Var Table.size
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    sizex = rangex/10; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/10; // EjsS Model.Variables.Var Table.sizey
    text = "vary the sliders and Click Play"; // EjsS Model.Variables.Var Table.text
  });

  _model.addToReset(function() {
    x = 0; // EjsS Model.Variables.variables.x
    y = 0; // EjsS Model.Variables.variables.y
    vx = 0; // EjsS Model.Variables.variables.vx
    vy = 0; // EjsS Model.Variables.variables.vy
    ax = 0; // EjsS Model.Variables.variables.ax
    ay = 0; // EjsS Model.Variables.variables.ay
  });

  _model.addToReset(function() {
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "50%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    vvst = true; // EjsS Model.Variables.layout.vvst
    KEvstime = true; // EjsS Model.Variables.layout.KEvstime
    world = true; // EjsS Model.Variables.layout.world
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.functionY.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.functionY.selectedmodel
        selectedmodel[_i0] = "2*sin(x+t)";  // EjsS Model.Variables.functionY.selectedmodel
      }
    }());
    xmodel = 0; // EjsS Model.Variables.functionY.xmodel
    showmodel = true; // EjsS Model.Variables.functionY.showmodel
    functionY = ""+selectedmodel; // EjsS Model.Variables.functionY.functionY
  });

  _model.addToReset(function() {
    rMin = -6; // EjsS Model.Variables.mesh2d.rMin
    rMax = 6; // EjsS Model.Variables.mesh2d.rMax
    nR = 50; // EjsS Model.Variables.mesh2d.nR
    nTheta = 50; // EjsS Model.Variables.mesh2d.nTheta
    minTheta = -6; // EjsS Model.Variables.mesh2d.minTheta
    maxTheta = 6; // EjsS Model.Variables.mesh2d.maxTheta
    points = new Array(nR*nTheta); // EjsS Model.Variables.mesh2d.points
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nR*nTheta; _i0+=1) {  // EjsS Model.Variables.mesh2d.points
        points[_i0] = [];
        for (_i1=0; _i1<3; _i1+=1) {  // EjsS Model.Variables.mesh2d.points
          points[_i0][_i1] = 0;  // EjsS Model.Variables.mesh2d.points
        }
      }
    }());
    field = new Array(nR*nTheta); // EjsS Model.Variables.mesh2d.field
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nR*nTheta; _i0+=1) {  // EjsS Model.Variables.mesh2d.field
        field[_i0] = [];
        for (_i1=0; _i1<1; _i1+=1) {  // EjsS Model.Variables.mesh2d.field
          field[_i0][_i1] = 0;  // EjsS Model.Variables.mesh2d.field
        }
      }
    }());
    cells = new Array((nR-1)*(nTheta-1)); // EjsS Model.Variables.mesh2d.cells
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<(nR-1)*(nTheta-1); _i0+=1) {  // EjsS Model.Variables.mesh2d.cells
        cells[_i0] = [];
        for (_i1=0; _i1<4; _i1+=1) {  // EjsS Model.Variables.mesh2d.cells
          cells[_i0][_i1] = 0;  // EjsS Model.Variables.mesh2d.cells
        }
      }
    }());
    fieldFunction = "x*x + y*y"; // EjsS Model.Variables.mesh2d.fieldFunction
    boundary = new Array(2); // EjsS Model.Variables.mesh2d.boundary
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.mesh2d.boundary
        boundary[_i0] = [];
        for (_i1=0; _i1<nTheta; _i1+=1) {  // EjsS Model.Variables.mesh2d.boundary
          boundary[_i0][_i1] = 0;  // EjsS Model.Variables.mesh2d.boundary
        }
      }
    }());
    boundaryColors = new Array("BLUE","RED"); // EjsS Model.Variables.mesh2d.boundaryColors
    boundaryLabels = new Array(0,1); // EjsS Model.Variables.mesh2d.boundaryLabels
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function computePoints() { // Compute points  // > CustomCode.computePoints:1
    // Check arrays in case nR or nTheta changed  // > CustomCode.computePoints:2
    var nPoints = nR*nTheta;  // > CustomCode.computePoints:3
    if (points.length!=nPoints) {  // > CustomCode.computePoints:4
      points = [];  // > CustomCode.computePoints:5
      for (var k=0; k<nPoints; k++) points[k] = [];  // > CustomCode.computePoints:6
    }  // > CustomCode.computePoints:7
    var dR = (rMax-rMin)/(nR-1);  // > CustomCode.computePoints:8
    var dTheta = (maxTheta-minTheta)/(nTheta-1);  // > CustomCode.computePoints:9
    for (var i=0, point=0; i<nR; i++) {  // > CustomCode.computePoints:10
      var r = rMin + i*dR;  // > CustomCode.computePoints:11
      for (var j=0; j<nTheta; j++, point++) {  // > CustomCode.computePoints:12
        var theta = minTheta + j*dTheta;  // > CustomCode.computePoints:13
        var pX = x + r; // treat r as x direction  // > CustomCode.computePoints:14
        var pY = y + theta; // treat theta as y direction  // > CustomCode.computePoints:15
   //       var pX = x + r*Math.cos(theta);  // > CustomCode.computePoints:16
   //     var pY = y + r*Math.sin(theta);  // > CustomCode.computePoints:17
        points[point][0] = pX;  // > CustomCode.computePoints:18
        points[point][1] = pY;  // > CustomCode.computePoints:19
      //  points[point][2] = -pY*pY;  // > CustomCode.computePoints:20
      }  // > CustomCode.computePoints:21
    }  // > CustomCode.computePoints:22
  }  // > CustomCode.computePoints:23

  function buildGeometry () {  // > CustomCode.Lib Page:1
     var nCells = (nR-1)*(nTheta-1);  // > CustomCode.Lib Page:2
     if (nCells!=cells.length) {  // > CustomCode.Lib Page:3
       cells = new Array(nCells);  // > CustomCode.Lib Page:4
       for (var k=0; k<nCells; k++) cells[k] = [];  // > CustomCode.Lib Page:5
     }  // > CustomCode.Lib Page:6
    // Compute cells  // > CustomCode.Lib Page:7
    for (var i=1, cell=0; i<nR; i++) {  // > CustomCode.Lib Page:8
      for (var j=1; j<nTheta; j++, cell++) {  // > CustomCode.Lib Page:9
        var thisTile = cells[cell];  // > CustomCode.Lib Page:10
        var corner = i*nTheta + j;  // > CustomCode.Lib Page:11
        thisTile[0] = corner-nTheta-1;  // > CustomCode.Lib Page:12
        thisTile[1] = corner-nTheta;  // > CustomCode.Lib Page:13
        thisTile[2] = corner;  // > CustomCode.Lib Page:14
        thisTile[3] = corner-1;  // > CustomCode.Lib Page:15
      }  // > CustomCode.Lib Page:16
    }  // > CustomCode.Lib Page:17
  }  // > CustomCode.Lib Page:18
  function buildBoundary () {  // > CustomCode.Lib Page:19
     if (nTheta!=boundary[0].length) {  // > CustomCode.Lib Page:20
       boundary = new Array(2);  // > CustomCode.Lib Page:21
       boundary[0] = [];  // > CustomCode.Lib Page:22
       boundary[1] = [];  // > CustomCode.Lib Page:23
     }  // > CustomCode.Lib Page:24
    // Compute boundary  // > CustomCode.Lib Page:25
    var innerBoundary = boundary[0];  // > CustomCode.Lib Page:26
    var outerBoundary = boundary[1];  // > CustomCode.Lib Page:27
    var firstIndex = (nR-1)*nTheta;  // > CustomCode.Lib Page:28
    for (var j=0; j<nTheta; j++) {  // > CustomCode.Lib Page:29
      innerBoundary[j] = nTheta-1-j;  // > CustomCode.Lib Page:30
      outerBoundary[j] = firstIndex + j;  // > CustomCode.Lib Page:31
    }  // > CustomCode.Lib Page:32
  }  // > CustomCode.Lib Page:33

  function computeFieldAtMesh() { // Compute field  // > CustomCode.computeFieldAtMesh:1
    // Check arrays in case nR or nTheta changed  // > CustomCode.computeFieldAtMesh:2
    var nCells = cells.length;  // > CustomCode.computeFieldAtMesh:3
    if (field.length!=nCells) {  // > CustomCode.computeFieldAtMesh:4
      field = [];  // > CustomCode.computeFieldAtMesh:5
      for (var k=0; k<nCells; k++) field[k] = [[]];  // > CustomCode.computeFieldAtMesh:6
    }  // > CustomCode.computeFieldAtMesh:7
    for (var cell=0; cell<nCells; cell++) {  // > CustomCode.computeFieldAtMesh:8
      var thisTile = cells[cell];  // > CustomCode.computeFieldAtMesh:9
      var nPoints = thisTile.length;  // > CustomCode.computeFieldAtMesh:10
      for (var i=0; i<nPoints; i++) {  // > CustomCode.computeFieldAtMesh:11
        var point = points[thisTile[i]];  // > CustomCode.computeFieldAtMesh:12
      //  field[cell][i][0] = _view.functionField.evaluate({x:point[0],y:point[1]});  // > CustomCode.computeFieldAtMesh:13
         field[cell][i][0] = _view.fField.evaluate({x:point[0],y:point[1],t : t});  // > CustomCode.computeFieldAtMesh:14
      }  // > CustomCode.computeFieldAtMesh:15
    }  // > CustomCode.computeFieldAtMesh:16
  }  // > CustomCode.computeFieldAtMesh:17
  function computeField() { // Compute field  // > CustomCode.computeFieldAtMesh:18
    // Check arrays in case nR or nTheta changed  // > CustomCode.computeFieldAtMesh:19
    var nPoints = points.length;  // > CustomCode.computeFieldAtMesh:20
    if (field.length!=nPoints) {  // > CustomCode.computeFieldAtMesh:21
      field = [];  // > CustomCode.computeFieldAtMesh:22
      for (var k=0; k<nPoints; k++) field[k] = [];  // > CustomCode.computeFieldAtMesh:23
    }  // > CustomCode.computeFieldAtMesh:24
    for (var i=0; i<nPoints; i++) {  // > CustomCode.computeFieldAtMesh:25
      var point = points[i];  // > CustomCode.computeFieldAtMesh:26
    //  field[i][0] = _view.functionField.evaluate({x:point[0],y:point[1]});  // > CustomCode.computeFieldAtMesh:27
        field[i][0] = _view.fField.evaluate({x:point[0],y:point[1],t : t});  // > CustomCode.computeFieldAtMesh:28
        }  // > CustomCode.computeFieldAtMesh:29
  }  // > CustomCode.computeFieldAtMesh:30

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page 2"]) return;
    //_view.functionField.setValue(fieldFunction);  // > Initialization.Init Page 2:1
    _view.fField.setValue(functionY);  // > Initialization.Init Page 2:2
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    buildGeometry();  // > Initialization.Init Page:1
    buildBoundary();  // > Initialization.Init Page:2
    computePoints();  // > Initialization.Init Page:3
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    xmodel=_view.fField.evaluate({ t : t, x : xmodel });   // > FixedRelations.FixRel Page:1
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["field"]) return;
    computeField();  // > FixedRelations.field:1
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["x","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=x) __mustReinitialize = true;
        __state[__cIn++] = x;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vx; // Rate for ODE: Evol Page:x
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new lookangtemplatemesh2d_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return "t = = "+_view._format(t,"0.00") + " s "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.mesh2D.linkProperty("Points",  function() { return points; }, function(_v) { points = _v; } ); // HtmlView Page linking property 'Points' for element 'mesh2D'
          _view.mesh2D.linkProperty("FieldAtPoints",  function() { return field; }, function(_v) { field = _v; } ); // HtmlView Page linking property 'FieldAtPoints' for element 'mesh2D'
          _view.mesh2D.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'mesh2D'
          _view.mesh2D.linkProperty("Cells",  function() { return cells; }, function(_v) { cells = _v; } ); // HtmlView Page linking property 'Cells' for element 'mesh2D'
          _view.model2.linkProperty("X",  function() { return xmodel; }, function(_v) { xmodel = _v; } ); // HtmlView Page linking property 'X' for element 'model2'
          _view.model2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'model2'
          _view.model2.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model2'
          _view.model2.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model2'
          _view.shape.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.plottingPanel2.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MaximumY",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MinimumY",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("Visibility",  function() { return KEvstime===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("BRMessage",  function() { return "t = = "+_view._format(t,"0.00") + " s "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel2'
          _view.analyticCurve.linkProperty("FunctionY",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurve'
          _view.analyticCurve.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'analyticCurve'
          _view.world.linkProperty("Checked",  function() { return world; }, function(_v) { world = _v; } ); // HtmlView Page linking property 'Checked' for element 'world'
          _view.world.setAction("OnCheckOff", function(_data,_info) {
  world = false;
  Width1 = "0%";
  Width2 = "100%";
  disabled=true;

}); // HtmlView Page setting action 'OnCheckOff' for element 'world'
          _view.world.linkProperty("Disabled",  function() { return disabledworld; }, function(_v) { disabledworld = _v; } ); // HtmlView Page linking property 'Disabled' for element 'world'
          _view.world.setAction("OnCheckOn", function(_data,_info) {
  world = true;
  Width1 = "50%";
  Width2 = "50%";
  disabled=false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'world'
          _view.ke.linkProperty("Checked",  function() { return KEvstime; }, function(_v) { KEvstime = _v; } ); // HtmlView Page linking property 'Checked' for element 'ke'
          _view.ke.setAction("OnCheckOff", function(_data,_info) {
  KEvstime =false;
    Width1 = "100%";
     Width2= "0%";

}); // HtmlView Page setting action 'OnCheckOff' for element 'ke'
          _view.ke.setAction("OnCheckOn", function(_data,_info) {
  KEvstime =true;
  Width1 = "50%";
  Width2= "50%";

}); // HtmlView Page setting action 'OnCheckOn' for element 'ke'
          _view.model32.setAction("OnCheckOff", function(_data,_info) {
  showmodel=false;

}); // HtmlView Page setting action 'OnCheckOff' for element 'model32'
          _view.model32.linkProperty("Checked",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Checked' for element 'model32'
          _view.model32.setAction("OnCheckOn", function(_data,_info) {
  showmodel=true;

}); // HtmlView Page setting action 'OnCheckOn' for element 'model32'
          _view.models.linkProperty("Options",  function() { return ["2*sin(x+t)","0","-2*cos(x+t)","x","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models'
          _view.models.setAction("OnChange", function(_data,_info) {
  functionY=selectedmodel+"";
  if (selectedmodel[0]==="show me"){
  //functionY= "-"+_view._format(w,"0.00")+"^2*x";  
    }
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'models'
          _view.models.linkProperty("SelectedOptions",  function() { return selectedmodel; }, function(_v) { selectedmodel = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'models'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fField'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function lookangtemplatemesh2d_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = lookangtemplatemesh2d_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function lookangtemplatemesh2d_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("CSS",{ "display" : "inline-block" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("TRMessage","World View of the Model") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("TitleY","y") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","x") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.mesh,"mesh2D", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mesh2D'
      .setProperty("DataType","MESH_2D") // EJsS HtmlView.HtmlView Page: setting property 'DataType' for element 'mesh2D'
      .setProperty("BoundaryWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'BoundaryWidth' for element 'mesh2D'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'model2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model2'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model2'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'model2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("CSS",{ "display" : "inline-block" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'plottingPanel2'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel2'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel2'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel2'
      .setProperty("TitleY","x") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel2'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("TitleX","t") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurve'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'analyticCurve'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'analyticCurve'
      .setProperty("NumPoints",100) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'analyticCurve'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurve'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurve'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"mrocket", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'mrocket'
      .setProperty("Html","<a href=\"http://dl.dropboxusercontent.com/u/44365627/lookangEJSworkspace/export/ejss_model_SHM16/SHM16_Simulation.xhtml\"         target=\"_blank\">FullScreen</a>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'mrocket'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"world", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'world'
      .setProperty("Background","Orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'world'
      .setProperty("Tooltip","acceleration vs displacement") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'world'
      .setProperty("Text","world") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'world'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"ke", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'ke'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'ke'
      .setProperty("Tooltip","kinetic energy") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'ke'
      .setProperty("Text","graph vs t") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ke'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"model3", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'model3'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model3'
      .setProperty("Tooltip","key in expression like  2*sin(1*t) or 2*sin(1*t)*exp(-0.1/2*t)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model3'
      .setProperty("Text","your model, X =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'model3'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"model32", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'model32'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model32'
      .setProperty("Tooltip","show model") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model32'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'models'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","30vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","green function") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton2'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.mrocket) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/Momentum1D/lookangphoto.jpg" />
 weelookang@gmail.com
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new lookangtemplatemesh2d("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
