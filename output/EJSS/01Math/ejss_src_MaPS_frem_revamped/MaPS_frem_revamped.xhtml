<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Bar Model Method in Primary Math</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function MaPS_frem_revamped(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var font; // EjsS Model.Variables.Main Variables.font
  var fontb; // EjsS Model.Variables.Main Variables.fontb

  var choice; // EjsS Model.Variables.Choices.choice
  var den; // EjsS Model.Variables.Choices.den
  var num; // EjsS Model.Variables.Choices.num
  var divid; // EjsS Model.Variables.Choices.divid
  var d; // EjsS Model.Variables.Choices.d
  var rA; // EjsS Model.Variables.Choices.rA
  var rB; // EjsS Model.Variables.Choices.rB
  var percent; // EjsS Model.Variables.Choices.percent

  var SelectOptions; // EjsS Model.Variables.lookang.SelectOptions
  var Foregroundcolor; // EjsS Model.Variables.lookang.Foregroundcolor

  var sizetext; // EjsS Model.Variables.Frem.sizetext
  var textposx; // EjsS Model.Variables.Frem.textposx
  var textposy; // EjsS Model.Variables.Frem.textposy
  var textid; // EjsS Model.Variables.Frem.textid
  var textvisib; // EjsS Model.Variables.Frem.textvisib
  var textname; // EjsS Model.Variables.Frem.textname
  var textfont; // EjsS Model.Variables.Frem.textfont
  var sizearrow; // EjsS Model.Variables.Frem.sizearrow
  var arrowposx; // EjsS Model.Variables.Frem.arrowposx
  var arrowposy; // EjsS Model.Variables.Frem.arrowposy
  var arrowcolor; // EjsS Model.Variables.Frem.arrowcolor
  var arrowsizex; // EjsS Model.Variables.Frem.arrowsizex
  var arrowsizey; // EjsS Model.Variables.Frem.arrowsizey
  var arrowid; // EjsS Model.Variables.Frem.arrowid
  var arrowvisib; // EjsS Model.Variables.Frem.arrowvisib

  var sizebox; // EjsS Model.Variables.Frem 2.sizebox
  var boxposx; // EjsS Model.Variables.Frem 2.boxposx
  var boxposy; // EjsS Model.Variables.Frem 2.boxposy
  var boxid; // EjsS Model.Variables.Frem 2.boxid
  var boxvisib; // EjsS Model.Variables.Frem 2.boxvisib
  var boxsizex; // EjsS Model.Variables.Frem 2.boxsizex
  var boxcolor; // EjsS Model.Variables.Frem 2.boxcolor
  var circleposx; // EjsS Model.Variables.Frem 2.circleposx
  var circleposy; // EjsS Model.Variables.Frem 2.circleposy
  var circlecolor; // EjsS Model.Variables.Frem 2.circlecolor
  var idselect; // EjsS Model.Variables.Frem 2.idselect
  var counterboxy; // EjsS Model.Variables.Frem 2.counterboxy
  var counterarrowy; // EjsS Model.Variables.Frem 2.counterarrowy

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      font : font,
      fontb : fontb,
      choice : choice,
      den : den,
      num : num,
      divid : divid,
      d : d,
      rA : rA,
      rB : rB,
      percent : percent,
      SelectOptions : SelectOptions,
      Foregroundcolor : Foregroundcolor,
      sizetext : sizetext,
      textposx : textposx,
      textposy : textposy,
      textid : textid,
      textvisib : textvisib,
      textname : textname,
      textfont : textfont,
      sizearrow : sizearrow,
      arrowposx : arrowposx,
      arrowposy : arrowposy,
      arrowcolor : arrowcolor,
      arrowsizex : arrowsizex,
      arrowsizey : arrowsizey,
      arrowid : arrowid,
      arrowvisib : arrowvisib,
      sizebox : sizebox,
      boxposx : boxposx,
      boxposy : boxposy,
      boxid : boxid,
      boxvisib : boxvisib,
      boxsizex : boxsizex,
      boxcolor : boxcolor,
      circleposx : circleposx,
      circleposy : circleposy,
      circlecolor : circlecolor,
      idselect : idselect,
      counterboxy : counterboxy,
      counterarrowy : counterarrowy
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.choice != "undefined") choice = json.choice;
    if(typeof json.den != "undefined") den = json.den;
    if(typeof json.num != "undefined") num = json.num;
    if(typeof json.divid != "undefined") divid = json.divid;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.rA != "undefined") rA = json.rA;
    if(typeof json.rB != "undefined") rB = json.rB;
    if(typeof json.percent != "undefined") percent = json.percent;
    if(typeof json.SelectOptions != "undefined") SelectOptions = json.SelectOptions;
    if(typeof json.Foregroundcolor != "undefined") Foregroundcolor = json.Foregroundcolor;
    if(typeof json.sizetext != "undefined") sizetext = json.sizetext;
    if(typeof json.textposx != "undefined") textposx = json.textposx;
    if(typeof json.textposy != "undefined") textposy = json.textposy;
    if(typeof json.textid != "undefined") textid = json.textid;
    if(typeof json.textvisib != "undefined") textvisib = json.textvisib;
    if(typeof json.textname != "undefined") textname = json.textname;
    if(typeof json.textfont != "undefined") textfont = json.textfont;
    if(typeof json.sizearrow != "undefined") sizearrow = json.sizearrow;
    if(typeof json.arrowposx != "undefined") arrowposx = json.arrowposx;
    if(typeof json.arrowposy != "undefined") arrowposy = json.arrowposy;
    if(typeof json.arrowcolor != "undefined") arrowcolor = json.arrowcolor;
    if(typeof json.arrowsizex != "undefined") arrowsizex = json.arrowsizex;
    if(typeof json.arrowsizey != "undefined") arrowsizey = json.arrowsizey;
    if(typeof json.arrowid != "undefined") arrowid = json.arrowid;
    if(typeof json.arrowvisib != "undefined") arrowvisib = json.arrowvisib;
    if(typeof json.sizebox != "undefined") sizebox = json.sizebox;
    if(typeof json.boxposx != "undefined") boxposx = json.boxposx;
    if(typeof json.boxposy != "undefined") boxposy = json.boxposy;
    if(typeof json.boxid != "undefined") boxid = json.boxid;
    if(typeof json.boxvisib != "undefined") boxvisib = json.boxvisib;
    if(typeof json.boxsizex != "undefined") boxsizex = json.boxsizex;
    if(typeof json.boxcolor != "undefined") boxcolor = json.boxcolor;
    if(typeof json.circleposx != "undefined") circleposx = json.circleposx;
    if(typeof json.circleposy != "undefined") circleposy = json.circleposy;
    if(typeof json.circlecolor != "undefined") circlecolor = json.circlecolor;
    if(typeof json.idselect != "undefined") idselect = json.idselect;
    if(typeof json.counterboxy != "undefined") counterboxy = json.counterboxy;
    if(typeof json.counterarrowy != "undefined") counterarrowy = json.counterarrowy;
  };

  _model._inputAndPublicParameters = ["font",  "fontb",  "choice",  "den",  "num",  "divid",  "d",  "rA",  "rB",  "percent",  "SelectOptions",  "Foregroundcolor",  "sizetext",  "textposx",  "textposy",  "textid",  "textvisib",  "textname",  "textfont",  "sizearrow",  "arrowposx",  "arrowposy",  "arrowcolor",  "arrowsizex",  "arrowsizey",  "arrowid",  "arrowvisib",  "sizebox",  "boxposx",  "boxposy",  "boxid",  "boxvisib",  "boxsizex",  "boxcolor",  "circleposx",  "circleposy",  "circlecolor",  "idselect",  "counterboxy",  "counterarrowy"]; 

  _model._outputAndPublicParameters = ["font",  "fontb",  "choice",  "den",  "num",  "divid",  "d",  "rA",  "rB",  "percent",  "SelectOptions",  "Foregroundcolor",  "sizetext",  "textposx",  "textposy",  "textid",  "textvisib",  "textname",  "textfont",  "sizearrow",  "arrowposx",  "arrowposy",  "arrowcolor",  "arrowsizex",  "arrowsizey",  "arrowid",  "arrowvisib",  "sizebox",  "boxposx",  "boxposy",  "boxid",  "boxvisib",  "boxsizex",  "boxcolor",  "circleposx",  "circleposy",  "circlecolor",  "idselect",  "counterboxy",  "counterarrowy"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Initialization"] = true;
    __pagesEnabled["Demo"] = true;
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.Main Variables.font
    fontb = "normal normal 5vw"; // EjsS Model.Variables.Main Variables.fontb
  });

  _model.addToReset(function() {
    choice = 1; // EjsS Model.Variables.Choices.choice
    den = 2; // EjsS Model.Variables.Choices.den
    num = 1; // EjsS Model.Variables.Choices.num
    divid = 2; // EjsS Model.Variables.Choices.divid
    d = 1; // EjsS Model.Variables.Choices.d
    rA = 1; // EjsS Model.Variables.Choices.rA
    rB = 2; // EjsS Model.Variables.Choices.rB
    percent = 130; // EjsS Model.Variables.Choices.percent
  });

  _model.addToReset(function() {
    SelectOptions = "Red"; // EjsS Model.Variables.lookang.SelectOptions
    Foregroundcolor = "Black"; // EjsS Model.Variables.lookang.Foregroundcolor
  });

  _model.addToReset(function() {
    sizetext = 0; // EjsS Model.Variables.Frem.sizetext
    textposx = 0; // EjsS Model.Variables.Frem.textposx
    textposy = 0; // EjsS Model.Variables.Frem.textposy
    textid = 0; // EjsS Model.Variables.Frem.textid
    textvisib = true; // EjsS Model.Variables.Frem.textvisib
    textname = ""; // EjsS Model.Variables.Frem.textname
    textfont = ""; // EjsS Model.Variables.Frem.textfont
    sizearrow = 0; // EjsS Model.Variables.Frem.sizearrow
    arrowposx = 0; // EjsS Model.Variables.Frem.arrowposx
    arrowposy = -1; // EjsS Model.Variables.Frem.arrowposy
    arrowcolor = ""; // EjsS Model.Variables.Frem.arrowcolor
    arrowsizex = 2; // EjsS Model.Variables.Frem.arrowsizex
    arrowsizey = 0; // EjsS Model.Variables.Frem.arrowsizey
    arrowid = 0; // EjsS Model.Variables.Frem.arrowid
    arrowvisib = true; // EjsS Model.Variables.Frem.arrowvisib
  });

  _model.addToReset(function() {
    sizebox = 0; // EjsS Model.Variables.Frem 2.sizebox
    boxposx = 0; // EjsS Model.Variables.Frem 2.boxposx
    boxposy = 0; // EjsS Model.Variables.Frem 2.boxposy
    boxid = 0; // EjsS Model.Variables.Frem 2.boxid
    boxvisib = true; // EjsS Model.Variables.Frem 2.boxvisib
    boxsizex = 0; // EjsS Model.Variables.Frem 2.boxsizex
    boxcolor = ""; // EjsS Model.Variables.Frem 2.boxcolor
    circleposx = 0; // EjsS Model.Variables.Frem 2.circleposx
    circleposy = 0; // EjsS Model.Variables.Frem 2.circleposy
    circlecolor = ""; // EjsS Model.Variables.Frem 2.circlecolor
    idselect = 0; // EjsS Model.Variables.Frem 2.idselect
    counterboxy = 0; // EjsS Model.Variables.Frem 2.counterboxy
    counterarrowy = -3; // EjsS Model.Variables.Frem 2.counterarrowy
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.Full Screen:1
  // does not work for iOS   // > CustomCode.Full Screen:2
  /*jslint browser:true */  // > CustomCode.Full Screen:3
  function toggleFullScreen() {  // > CustomCode.Full Screen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.Full Screen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.Full Screen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.Full Screen:7
        document.documentElement.requestFullscreen();  // > CustomCode.Full Screen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.Full Screen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.Full Screen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.Full Screen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.Full Screen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.Full Screen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.Full Screen:14
      }  // > CustomCode.Full Screen:15
    } else {  // > CustomCode.Full Screen:16
      if (document.exitFullscreen) {  // > CustomCode.Full Screen:17
        document.exitFullscreen();  // > CustomCode.Full Screen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.Full Screen:19
        document.msExitFullscreen();  // > CustomCode.Full Screen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.Full Screen:21
        document.mozCancelFullScreen();  // > CustomCode.Full Screen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.Full Screen:23
        document.webkitExitFullscreen();  // > CustomCode.Full Screen:24
      }  // > CustomCode.Full Screen:25
    }  // > CustomCode.Full Screen:26
  }  // > CustomCode.Full Screen:27

  //align everything to the left.  // > CustomCode.Align Left:1
  function align_Left () {  // > CustomCode.Align Left:2
    for (var i = 0;i<sizetext;i++)  // > CustomCode.Align Left:3
  {textposx[i] =0;  // > CustomCode.Align Left:4
    }  // > CustomCode.Align Left:5
  for (var i = 0;i<sizearrow;i++)  // > CustomCode.Align Left:6
  {arrowposx[i] =0;  // > CustomCode.Align Left:7
    }  // > CustomCode.Align Left:8
  for (var i = 0;i<sizebox;i++)  // > CustomCode.Align Left:9
  {  // > CustomCode.Align Left:10
  boxposx[i]=0;  // > CustomCode.Align Left:11
  circleposx[boxid]=boxposx[boxid]+boxsizex[boxid];  // > CustomCode.Align Left:12
  }  // > CustomCode.Align Left:13
  }  // > CustomCode.Align Left:14

  //spawns an arrow  // > CustomCode.Arrow Spawn:1
  function arrow_Spawn (a,b,c,color) {  // > CustomCode.Arrow Spawn:2
    sizearrow+=1;  // > CustomCode.Arrow Spawn:3
  arrowposx.push(a);  // > CustomCode.Arrow Spawn:4
  arrowposy.push(b);  // > CustomCode.Arrow Spawn:5
  arrowvisib.push(true);  // > CustomCode.Arrow Spawn:6
  arrowsizex.push(a+c);  // > CustomCode.Arrow Spawn:7
  arrowsizey.push(0);  // > CustomCode.Arrow Spawn:8
  arrowcolor.push(color);  // > CustomCode.Arrow Spawn:9
  }  // > CustomCode.Arrow Spawn:10

  //spawns a text  // > CustomCode.Text Spawn:1
  function text_Spawn (a,b,value,fonttype) {  // > CustomCode.Text Spawn:2
    sizetext+=1;  // > CustomCode.Text Spawn:3
  textposx.push(a);  // > CustomCode.Text Spawn:4
  textposy.push(b);  // > CustomCode.Text Spawn:5
  textvisib.push(true);  // > CustomCode.Text Spawn:6
  textname.push(value);  // > CustomCode.Text Spawn:7
  textfont.push(fonttype);  // > CustomCode.Text Spawn:8
  }  // > CustomCode.Text Spawn:9

  //spawns a text  // > CustomCode.Box Spawn:1
  function box_Spawn (a,b,c,color) {  // > CustomCode.Box Spawn:2
    sizebox+=1;  // > CustomCode.Box Spawn:3
  boxposx.push(a);  // > CustomCode.Box Spawn:4
  boxposy.push(b);  // > CustomCode.Box Spawn:5
  boxvisib.push(true);  // > CustomCode.Box Spawn:6
  boxsizex.push(c);  // > CustomCode.Box Spawn:7
  boxcolor.push(color);  // > CustomCode.Box Spawn:8
  circleposx.push(a+c);  // > CustomCode.Box Spawn:9
  circleposy.push(b-0.5);  // > CustomCode.Box Spawn:10
  circlecolor.push("rgba(192,192,192,0.5)");  // > CustomCode.Box Spawn:11
  }  // > CustomCode.Box Spawn:12

  //Fractions  // > CustomCode.Fractions:1
  function fractions () {  // > CustomCode.Fractions:2
    boxvisib[boxid]=true;  // > CustomCode.Fractions:3
    var posx = boxposx[boxid];  // > CustomCode.Fractions:4
    var posy = boxposy[boxid]-1.5; //displace lower by 1.5  // > CustomCode.Fractions:5
    text_Spawn (posx,posy,num+"/"+den,font);  // > CustomCode.Fractions:6
    var sizex = boxsizex[boxid]*num/den;  // > CustomCode.Fractions:7
    for (var i = 0;i<num;i++){  // > CustomCode.Fractions:8
    var colors = "blue";  // > CustomCode.Fractions:9
    box_Spawn(posx,posy,sizex,colors);  // > CustomCode.Fractions:10
    posx = posx+sizex; //increment by sizex next box fraction  // > CustomCode.Fractions:11
    }  // > CustomCode.Fractions:12
    for (var i = num;i<den;i++){  // > CustomCode.Fractions:13
    var colors = "white";  // > CustomCode.Fractions:14
    box_Spawn(posx,posy,sizex,colors);  // > CustomCode.Fractions:15
    posx = posx+sizex;  // > CustomCode.Fractions:16
    }  // > CustomCode.Fractions:17
  }  // > CustomCode.Fractions:18

  //Divide  // > CustomCode.Divide:1
  function divide (a) {  // > CustomCode.Divide:2
    boxvisib[boxid]=true;  // > CustomCode.Divide:3
    var posx = boxposx[boxid];  // > CustomCode.Divide:4
    var posy = boxposy[boxid]-1.5;  // > CustomCode.Divide:5
    var colorchoice = ["Red","Green","Blue","Yellow","Cyan","Magenta","White","Orange"];  // > CustomCode.Divide:6
     // > CustomCode.Divide:7
      // > CustomCode.Divide:8
    if (a=="Equal"){  // > CustomCode.Divide:9
    var sizex = boxsizex[boxid]/divid;  // > CustomCode.Divide:10
    var colors = boxcolor[boxid];  // > CustomCode.Divide:11
    }  // > CustomCode.Divide:12
    else{  // > CustomCode.Divide:13
        var osize = boxsizex[boxid];   // > CustomCode.Divide:14
    }  // > CustomCode.Divide:15
      // > CustomCode.Divide:16
    for (var i = 0;i<divid;i++){  // > CustomCode.Divide:17
    if (a=="Unequal"){  // > CustomCode.Divide:18
    var sizex = boxsizex[boxid]/divid;  // > CustomCode.Divide:19
    var index = Math.floor(Math.random() * colorchoice.length);  // > CustomCode.Divide:20
    var colors = colorchoice[index];  // > CustomCode.Divide:21
    colorchoice = ["Red","Green","Blue","Yellow","Cyan","Magenta","White","Orange"];  // > CustomCode.Divide:22
    var index = colorchoice.indexOf(colors);  // > CustomCode.Divide:23
    if (index > -1) {  // > CustomCode.Divide:24
      colorchoice.splice(index, 1);  // > CustomCode.Divide:25
        }  // > CustomCode.Divide:26
     if (i<divid-1){  // > CustomCode.Divide:27
     var sizex =osize*Math.random();  // > CustomCode.Divide:28
        if (sizex>osize*2/3){sizex = osize*2/3;}  // > CustomCode.Divide:29
        if (sizex<osize/3){sizex = osize/3;}  // > CustomCode.Divide:30
            }  // > CustomCode.Divide:31
    else{var sizex = osize;}  // > CustomCode.Divide:32
    }  // > CustomCode.Divide:33
    box_Spawn(posx,posy,sizex,colors);  // > CustomCode.Divide:34
    posx += sizex;  // > CustomCode.Divide:35
    osize-=sizex;  // > CustomCode.Divide:36
    }  // > CustomCode.Divide:37
  }  // > CustomCode.Divide:38

  //Ratio  // > CustomCode.Ratio:1
  function ratio () {  // > CustomCode.Ratio:2
    boxvisib[idselect[1]]=true;  // > CustomCode.Ratio:3
    boxvisib[idselect[0]]=true;  // > CustomCode.Ratio:4
    //Sets the position of both boxes  // > CustomCode.Ratio:5
    boxposx[idselect[0]] = boxposx[idselect[1]];  // > CustomCode.Ratio:6
    boxposy[idselect[0]] = boxposy[idselect[1]]-1.5;  // > CustomCode.Ratio:7
    circleposy[idselect[0]] = circleposy[idselect[1]]-1.5;  // > CustomCode.Ratio:8
    boxsizex[idselect[0]] = boxsizex[idselect[1]]*rB/rA;  // > CustomCode.Ratio:9
    circleposx[idselect[0]] = boxposx[idselect[0]]+boxsizex[idselect[0]];  // > CustomCode.Ratio:10
      // > CustomCode.Ratio:11
    text_Spawn(boxposx[idselect[1]],boxposy[idselect[1]],rA,font);  // > CustomCode.Ratio:12
    text_Spawn(boxposx[idselect[0]],boxposy[idselect[0]],rB,font);  // > CustomCode.Ratio:13
      // > CustomCode.Ratio:14
  }  // > CustomCode.Ratio:15

  //Percent  // > CustomCode.Percentage:1
  function percentage () {  // > CustomCode.Percentage:2
    boxvisib[idselect[1]]=true;  // > CustomCode.Percentage:3
    boxvisib[idselect[0]]=true;  // > CustomCode.Percentage:4
    //Sets the position of both boxes  // > CustomCode.Percentage:5
    boxposx[idselect[0]] = boxposx[idselect[1]];  // > CustomCode.Percentage:6
    boxposy[idselect[0]] = boxposy[idselect[1]]-1.5;  // > CustomCode.Percentage:7
    circleposy[idselect[0]] = circleposy[idselect[1]]-1.5;  // > CustomCode.Percentage:8
    boxsizex[idselect[0]] = boxsizex[idselect[1]]*percent/100;  // > CustomCode.Percentage:9
    circleposx[idselect[0]] = boxposx[idselect[0]]+boxsizex[idselect[0]];  // > CustomCode.Percentage:10
      // > CustomCode.Percentage:11
    text_Spawn(boxposx[idselect[1]],boxposy[idselect[1]],"100%",font);  // > CustomCode.Percentage:12
    text_Spawn(boxposx[idselect[0]],boxposy[idselect[0]],percent+"%",font);  // > CustomCode.Percentage:13
      // > CustomCode.Percentage:14
  }  // > CustomCode.Percentage:15

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Initialization"]) return;
    //Initialize all the arrays  // > Initialization.Initialization:1
    //Text Arrays  // > Initialization.Initialization:2
    textposx = [];textposy = [];textvisib = [];textname = [];textfont = [];  // > Initialization.Initialization:3
    //Arrow Arrays  // > Initialization.Initialization:4
    arrowposx = [];arrowposy = [];arrowvisib = [];arrowsizex = [];  // > Initialization.Initialization:5
    arrowsizey = [];  // > Initialization.Initialization:6
    arrowcolor = []; //added by lookang to initialize  // > Initialization.Initialization:7
    //Box Arrays  // > Initialization.Initialization:8
    boxposx = [];boxposy = [];boxvisib = [];boxsizex = [];  // > Initialization.Initialization:9
    circleposx = [];circleposy = [];boxcolor = [];circlecolor = [];  // > Initialization.Initialization:10
    //ID Array  // > Initialization.Initialization:11
    idselect = [];  // > Initialization.Initialization:12
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Demo"]) return;
    box_Spawn(0,0,3,"Blue");  // > Initialization.Demo:1
    text_Spawn(0,0,"}",fontb);  // > Initialization.Demo:2
    arrow_Spawn();  // > Initialization.Demo:3
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new MaPS_frem_revamped_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.boxSpawn.setAction("OnClick", function(_data,_info) {
  counterboxy=counterboxy+2;
  //counterboxy=0;
  //box_Spawn(0,0,3,"Blue");
  box_Spawn(0,counterboxy,3,"Blue"); // make new box move up a bit for ease of seeing addition;

}); // HtmlView Page setting action 'OnClick' for element 'boxSpawn'
          _view.CurlyBrackets.setAction("OnClick", function(_data,_info) {
  text_Spawn(0,0,"}",fontb);

}); // HtmlView Page setting action 'OnClick' for element 'CurlyBrackets'
          _view.textField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textField'
          _view.TextSpawn.setAction("OnClick", function(_data,_info) {
  text_Spawn(0,0,_view.textField.getProperty("Value"),font);

}); // HtmlView Page setting action 'OnClick' for element 'TextSpawn'
          _view.ArrowSpawn.setAction("OnClick", function(_data,_info) {
  counterarrowy=counterarrowy+2;
  arrow_Spawn(0,counterarrowy,3,"Black");

}); // HtmlView Page setting action 'OnClick' for element 'ArrowSpawn'
          _view.Align_Left.setAction("OnClick", function(_data,_info) {
  /*
  //Works only if there are boxes
  if(sizes.length>0)
  {
    //Sets property 'X' of all the boxes
    for (var i = 0; i<sizes.length;i++)
    {eval("_view.group"+i).setProperty("X",0);}
  }
  */
  align_Left();

}); // HtmlView Page setting action 'OnClick' for element 'Align_Left'
          _view.ColorBox.linkProperty("Options",  function() { return ["Red","Green","Blue","Yellow","Cyan","Magenta","White","Orange"]; } ); // HtmlView Page linking property 'Options' for element 'ColorBox'
          _view.ColorBox.linkProperty("Background",  function() { return ""+SelectOptions; } ); // HtmlView Page linking property 'Background' for element 'ColorBox'
          _view.ColorBox.linkProperty("Foreground",  function() { return Foregroundcolor; }, function(_v) { Foregroundcolor = _v; } ); // HtmlView Page linking property 'Foreground' for element 'ColorBox'
          _view.ColorBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.ColorBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Red","Green","Blue","Yellow","Cyan","Magenta","White","Orange"]
  boxcolor[boxid]=option;
  //Sets the selected ID c rectangle's color to Yellow
  if (  option=="Yellow"){
   
   Foregroundcolor="Black";
   }
   
  else if (  option=="Magenta"){
    Foregroundcolor="Black";
    } 
   
  //Sets the selected ID c rectangle's color to White
  else if (  option=="White"){
    Foregroundcolor="Black";
    }
  //Sets the selected ID c rectangle's color to Red
  else if (  option=="Red"){
     Foregroundcolor="Black";
     }
  //Sets the selected ID c rectangle's color to Orange
  else if (  option=="Orange"){
     Foregroundcolor="Black";
     }
  //Sets the selected ID c rectangle's color to Cyan
  else if (  option=="Cyan"){
     Foregroundcolor="Black";
     }
  //Sets the selected ID c rectangle's color to Blue
  else if (  option=="Blue"){
     Foregroundcolor="White";
     }
  //Sets the selected ID c rectangle's color to Green
  else if (  option=="Green"){
     Foregroundcolor="White";
     }

}); // HtmlView Page setting action 'OnChange' for element 'ColorBox'
          _view.ColorBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'ColorBox'
          _view.ColorBox.linkProperty("SelectedOptions",  function() { return SelectOptions; }, function(_v) { SelectOptions = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'ColorBox'
          _view.ColorBox.linkProperty("Display",  function() { return sizebox>0?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'ColorBox'
          _view.executionPanel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel2'
          _view.executionPanel2.linkProperty("Display",  function() { return sizebox>0?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'executionPanel2'
          _view.choiceBox.linkProperty("Options",  function() { return ["Fractions","Divider","Ratio","Percentage"]; } ); // HtmlView Page linking property 'Options' for element 'choiceBox'
          _view.choiceBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.choiceBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Fractions","Divider","Ratio","Percentage"]
  //Selects the mode of the operation.
  if (  option=="Fractions"){choice = 1;}
  else if (  option=="Divider"){choice = 2;}
  //Ratio and Percentage will display their stuff only if there are two or more boxes in the panel
  else if (  option=="Ratio"){choice = 3;}
  else if (  option=="Percentage"){choice = 4;}

}); // HtmlView Page setting action 'OnChange' for element 'choiceBox'
          _view.choiceBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'choiceBox'
          _view.choiceBox.linkProperty("Display",  function() { return sizebox>0?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'choiceBox'
          _view.Numerator.linkProperty("Value",  function() { return num; }, function(_v) { num = _v; } ); // HtmlView Page linking property 'Value' for element 'Numerator'
          _view.Numerator.setAction("OnChange", function(_data,_info) {
  //Numerator must be a whole number and is bigger than zero.
  num = Math.round(num);
  if (num<1){num=1;}
  //Denominator must be bigger or equal to the numerator
  if (den<num){den=num;}

}); // HtmlView Page setting action 'OnChange' for element 'Numerator'
          _view.Numerator.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Numerator'
          _view.Numerator.linkProperty("Display",  function() { return (choice==1&&sizebox>0)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Numerator'
          _view.dividor.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'dividor'
          _view.dividor.linkProperty("Display",  function() { return (choice==1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'dividor'
          _view.Denominator.linkProperty("Value",  function() { return den; }, function(_v) { den = _v; } ); // HtmlView Page linking property 'Value' for element 'Denominator'
          _view.Denominator.setAction("OnChange", function(_data,_info) {
  //Den must be a whole number and bigger or equal to the numerator
  den = Math.round(den);
  if (den<num){den=num;}

}); // HtmlView Page setting action 'OnChange' for element 'Denominator'
          _view.Denominator.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Denominator'
          _view.Denominator.linkProperty("Display",  function() { return choice==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Denominator'
          _view.Fractions.setAction("OnClick", fractions); // HtmlView Page setting action 'OnClick' for element 'Fractions'
          _view.Fractions.linkProperty("Display",  function() { return choice==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Fractions'
          _view.DividerField.linkProperty("Value",  function() { return divid; }, function(_v) { divid = _v; } ); // HtmlView Page linking property 'Value' for element 'DividerField'
          _view.DividerField.setAction("OnChange", function(_data,_info) {
  //The divider must be a whole number and be bigger than 1
  divid = Math.round(divid);
  if (divid<2){divid=2;}

}); // HtmlView Page setting action 'OnChange' for element 'DividerField'
          _view.DividerField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'DividerField'
          _view.DividerField.linkProperty("Display",  function() { return (choice==2)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'DividerField'
          _view.DividerEqually.setAction("OnClick", function(_data,_info) {
  divide("Equal");

}); // HtmlView Page setting action 'OnClick' for element 'DividerEqually'
          _view.DividerEqually.linkProperty("Display",  function() { return choice==2?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'DividerEqually'
          _view.DividerUnequally.setAction("OnClick", function(_data,_info) {
  divide("Unequal");

}); // HtmlView Page setting action 'OnClick' for element 'DividerUnequally'
          _view.DividerUnequally.linkProperty("Display",  function() { return (choice==2)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'DividerUnequally'
          _view.RatioA.linkProperty("Value",  function() { return rA; }, function(_v) { rA = _v; } ); // HtmlView Page linking property 'Value' for element 'RatioA'
          _view.RatioA.setAction("OnChange", function(_data,_info) {
  //Must be a whole number and bigger than 0
  rA = Math.round(rA);
  if (rA<1){rA=1;}

}); // HtmlView Page setting action 'OnChange' for element 'RatioA'
          _view.RatioA.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'RatioA'
          _view.RatioA.linkProperty("Display",  function() { return (choice==3&&idselect.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioA'
          _view.RatioSign.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'RatioSign'
          _view.RatioSign.linkProperty("Display",  function() { return (choice==3&&idselect.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioSign'
          _view.RatioB.linkProperty("Value",  function() { return rB; }, function(_v) { rB = _v; } ); // HtmlView Page linking property 'Value' for element 'RatioB'
          _view.RatioB.setAction("OnChange", function(_data,_info) {
  //The secondary number must be a whole number and bigger than zero.
  rB = Math.round(rB);
  if (rB<1){rB=1;}

}); // HtmlView Page setting action 'OnChange' for element 'RatioB'
          _view.RatioB.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'RatioB'
          _view.RatioB.linkProperty("Display",  function() { return (choice==3&&idselect.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioB'
          _view.RatioButton.setAction("OnClick", function(_data,_info) {
  if (idselect.length==2){
    ratio();
  }
  else{_tools.showOkDialog("Select two elements!");}

}); // HtmlView Page setting action 'OnClick' for element 'RatioButton'
          _view.RatioButton.linkProperty("Display",  function() { return (choice==3&&idselect.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioButton'
          _view.Percentage.linkProperty("Value",  function() { return percent; }, function(_v) { percent = _v; } ); // HtmlView Page linking property 'Value' for element 'Percentage'
          _view.Percentage.setAction("OnChange", function(_data,_info) {
  //The number must be bigger or equal to one.
  if (percent<1){percent=1;}

}); // HtmlView Page setting action 'OnChange' for element 'Percentage'
          _view.Percentage.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Percentage'
          _view.Percentage.linkProperty("Display",  function() { return (choice==4&&idselect.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Percentage'
          _view.Percentsign.linkProperty("Display",  function() { return (choice==4&&idselect.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Percentsign'
          _view.PercentageButton.setAction("OnClick", function(_data,_info) {
  percentage();

}); // HtmlView Page setting action 'OnClick' for element 'PercentageButton'
          _view.PercentageButton.linkProperty("Display",  function() { return (choice==4&&idselect.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'PercentageButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return "SelectOptions="+SelectOptions; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "ID Selected = "+idselect; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDrag", function(_data,_info) {
  // _view.shapecircle0.setAction("OnDrag", function(_data,_info) {
    //XDrag = Math.round(XDrag);
   // XDrag = Math.round(_info.point[0]);
    //YDrag = Math.round(YDrag);
   // YDrag = Math.round(_info.point[1]);
  //}; // HtmlView Page setting action 'OnDrag' for element 'shape';

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BLMessage",  function() { return "counterarrowy="+counterarrowy+"\narrowvisib="+arrowvisib+"\nboxid="+boxid; } ); // HtmlView Page linking property 'BLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return "counterboxy="+counterboxy; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.arrowSet.linkProperty("NumberOfElements",  function() { return sizearrow; }, function(_v) { sizearrow = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet'
          _view.arrowSet.setAction("OnDoubleClick", function(_data,_info) {
  arrowvisib[arrowid] = false;

}); // HtmlView Page setting action 'OnDoubleClick' for element 'arrowSet'
          _view.arrowSet.linkProperty("ElementInteracted",  function() { return arrowid; }, function(_v) { arrowid = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeX",  function() { return arrowsizex; }, function(_v) { arrowsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSet'
          _view.arrowSet.linkProperty("X",  function() { return arrowposx; }, function(_v) { arrowposx = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet'
          _view.arrowSet.linkProperty("LineColor",  function() { return arrowcolor; }, function(_v) { arrowcolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'arrowSet'
          _view.arrowSet.linkProperty("Y",  function() { return arrowposy; }, function(_v) { arrowposy = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet'
          _view.arrowSet.linkProperty("Visibility",  function() { return arrowvisib; }, function(_v) { arrowvisib = _v; } ); // HtmlView Page linking property 'Visibility' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeY",  function() { return arrowsizey; }, function(_v) { arrowsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowSet'
          _view.textSet.linkProperty("NumberOfElements",  function() { return sizetext; }, function(_v) { sizetext = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return textposx; }, function(_v) { textposx = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return textposy; }, function(_v) { textposy = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return textname; }, function(_v) { textname = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.textSet.linkProperty("Visibility",  function() { return textvisib; }, function(_v) { textvisib = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textSet'
          _view.textSet.setAction("OnDoubleClick", function(_data,_info) {
  textvisib[textid] = false;

}); // HtmlView Page setting action 'OnDoubleClick' for element 'textSet'
          _view.textSet.linkProperty("Font",  function() { return textfont; }, function(_v) { textfont = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet'
          _view.textSet.linkProperty("ElementInteracted",  function() { return textid; }, function(_v) { textid = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'textSet'
          _view.boxSet.linkProperty("NumberOfElements",  function() { return sizebox; }, function(_v) { sizebox = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'boxSet'
          _view.boxSet.linkProperty("FillColor",  function() { return boxcolor; }, function(_v) { boxcolor = _v; } ); // HtmlView Page linking property 'FillColor' for element 'boxSet'
          _view.boxSet.setAction("OnDoubleClick", function(_data,_info) {
  boxvisib[boxid] = false;

}); // HtmlView Page setting action 'OnDoubleClick' for element 'boxSet'
          _view.boxSet.setAction("OnDrag", function(_data,_info) {
  circleposx[boxid]=boxposx[boxid]+boxsizex[boxid];
  circleposy[boxid]=boxposy[boxid]-0.5;

}); // HtmlView Page setting action 'OnDrag' for element 'boxSet'
          _view.boxSet.linkProperty("ElementInteracted",  function() { return boxid; }, function(_v) { boxid = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'boxSet'
          _view.boxSet.linkProperty("SizeX",  function() { return boxsizex; }, function(_v) { boxsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'boxSet'
          _view.boxSet.linkProperty("X",  function() { return boxposx; }, function(_v) { boxposx = _v; } ); // HtmlView Page linking property 'X' for element 'boxSet'
          _view.boxSet.linkProperty("Y",  function() { return boxposy; }, function(_v) { boxposy = _v; } ); // HtmlView Page linking property 'Y' for element 'boxSet'
          _view.boxSet.linkProperty("Visibility",  function() { return boxvisib; }, function(_v) { boxvisib = _v; } ); // HtmlView Page linking property 'Visibility' for element 'boxSet'
          _view.boxSet.setAction("OnPress", function(_data,_info) {
  var checking = idselect.includes(boxid); 
  if (!checking){
  if (idselect.length>1){
    circlecolor[idselect[0]]="rgba(192,192,192,0.5)";
    circlecolor[idselect[1]]="rgba(0,255,0,0.5)";
    idselect.splice(0,1);
    }
  idselect.push(boxid);
  circlecolor[boxid] = "rgba(255,255,0,0.5)";
  }

}); // HtmlView Page setting action 'OnPress' for element 'boxSet'
          _view.circleSet.linkProperty("NumberOfElements",  function() { return sizebox; }, function(_v) { sizebox = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'circleSet'
          _view.circleSet.linkProperty("FillColor",  function() { return circlecolor; }, function(_v) { circlecolor = _v; } ); // HtmlView Page linking property 'FillColor' for element 'circleSet'
          _view.circleSet.setAction("OnDrag", function(_data,_info) {
  boxsizex[boxid]=circleposx[boxid]-boxposx[boxid];
  arrowsizex[boxid+1]=circleposx[boxid]-arrowposx[boxid+1];

}); // HtmlView Page setting action 'OnDrag' for element 'circleSet'
          _view.circleSet.linkProperty("ElementInteracted",  function() { return boxid; }, function(_v) { boxid = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'circleSet'
          _view.circleSet.linkProperty("X",  function() { return circleposx; }, function(_v) { circleposx = _v; } ); // HtmlView Page linking property 'X' for element 'circleSet'
          _view.circleSet.linkProperty("Y",  function() { return circleposy; }, function(_v) { circleposy = _v; } ); // HtmlView Page linking property 'Y' for element 'circleSet'
          _view.circleSet.linkProperty("Visibility",  function() { return boxvisib; }, function(_v) { boxvisib = _v; } ); // HtmlView Page linking property 'Visibility' for element 'circleSet'
          _view.circleSet.setAction("OnPress", function(_data,_info) {
  var checking = idselect.includes(boxid); 
  if (!checking){
  if (idselect.length>1){
    circlecolor[idselect[0]]="rgba(192,192,192,0.5)";
    circlecolor[idselect[1]]="rgba(0,255,0,0.5)";
    idselect.splice(0,1);
    }
  idselect.push(boxid);
  circlecolor[boxid] = "rgba(255,255,0,0.5)";
  }

}); // HtmlView Page setting action 'OnPress' for element 'circleSet'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function MaPS_frem_revamped_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = MaPS_frem_revamped_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./MaPS_frem_revamped_Intro_1.html');

  return _view;
} // end of main function

function MaPS_frem_revamped_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.button,"boxSpawn", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'boxSpawn'
      .setProperty("Text","⮅ Bar") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'boxSpawn'
      ;

    _view._addElement(EJSS_INTERFACE.button,"CurlyBrackets", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'CurlyBrackets'
      .setProperty("Tooltip","Creates a Curly Brackets") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'CurlyBrackets'
      .setProperty("Text","}") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'CurlyBrackets'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"textField", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textField'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'textField'
      .setProperty("Tooltip","Write anything here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'textField'
      .setProperty("Value","Text") // EJsS HtmlView.HtmlView Page: setting property 'Value' for element 'textField'
      ;

    _view._addElement(EJSS_INTERFACE.button,"TextSpawn", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'TextSpawn'
      .setProperty("Tooltip","Creates the text from the field") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'TextSpawn'
      .setProperty("Text","🔤") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'TextSpawn'
      ;

    _view._addElement(EJSS_INTERFACE.button,"ArrowSpawn", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ArrowSpawn'
      .setProperty("Tooltip","Creates a draggable and resizeable arrow") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'ArrowSpawn'
      .setProperty("Text","↔") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ArrowSpawn'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Align_Left", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Align_Left'
      .setProperty("Tooltip","Align everything to the left.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Align_Left'
      .setProperty("Text","⇶") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Align_Left'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"ColorBox", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ColorBox'
      .setProperty("Tooltip","Changes color of the selected element") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'ColorBox'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'executionPanel2'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"choiceBox", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'choiceBox'
      .setProperty("Tooltip","Selects the mode. Note that Ratio and Percentage only shows once there are two or more boxes.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'choiceBox'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Numerator", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Numerator'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Numerator'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Numerator'
      .setProperty("Tooltip","Input Numerator here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Numerator'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Numerator'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"dividor", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'dividor'
      .setProperty("Background","orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'dividor'
      .setProperty("Tooltip","/") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'dividor'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'dividor'
      .setProperty("Text","/") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dividor'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Denominator", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Denominator'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Denominator'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Denominator'
      .setProperty("Tooltip","Input Denominator Here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Denominator'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Denominator'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Fractions", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Fractions'
      .setProperty("Tooltip","Generates the box's fractions") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Fractions'
      .setProperty("Text","Fractions") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Fractions'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"DividerField", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'DividerField'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'DividerField'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'DividerField'
      .setProperty("Tooltip","Select how many parts you want to divide by") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'DividerField'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'DividerField'
      ;

    _view._addElement(EJSS_INTERFACE.button,"DividerEqually", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'DividerEqually'
      .setProperty("Tooltip","Divides the box equally") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'DividerEqually'
      .setProperty("Text","Divide Equally") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'DividerEqually'
      ;

    _view._addElement(EJSS_INTERFACE.button,"DividerUnequally", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'DividerUnequally'
      .setProperty("Tooltip","Divides the Box unequally") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'DividerUnequally'
      .setProperty("Text","Unequally") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'DividerUnequally'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"RatioA", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioA'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'RatioA'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'RatioA'
      .setProperty("Tooltip","Input the front ratio here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioA'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'RatioA'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"RatioSign", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioSign'
      .setProperty("Background","orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'RatioSign'
      .setProperty("Tooltip",":") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioSign'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'RatioSign'
      .setProperty("Text",":") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'RatioSign'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"RatioB", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioB'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'RatioB'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'RatioB'
      .setProperty("Tooltip","Input the back ratio here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioB'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'RatioB'
      ;

    _view._addElement(EJSS_INTERFACE.button,"RatioButton", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioButton'
      .setProperty("Tooltip","Set's the ratio of the two selected box.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioButton'
      .setProperty("Text","Ratio") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'RatioButton'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Percentage", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Percentage'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Percentage'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Percentage'
      .setProperty("Tooltip","Sets the percentage of the second box") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Percentage'
      .setProperty("Foreground","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Percentage'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Percentsign", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Percentsign'
      .setProperty("Background","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Percentsign'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Percentsign'
      .setProperty("Text","%") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Percentsign'
      ;

    _view._addElement(EJSS_INTERFACE.button,"PercentageButton", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'PercentageButton'
      .setProperty("Tooltip","Changes the second box size as a percentage of the first.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'PercentageButton'
      .setProperty("Text","Percentage") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'PercentageButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Resets the Simulation") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","85vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Tooltip","rgba(0,100,255,0.3)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet'
      .setProperty("EnabledSize","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'arrowSet'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'arrowSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrowSet'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"boxSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'boxSet'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'boxSet'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'boxSet'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'boxSet'
      .setProperty("EnabledSize","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'boxSet'
      .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'boxSet'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'boxSet'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'boxSet'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'boxSet'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"circleSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'circleSet'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'circleSet'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'circleSet'
      .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'circleSet'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'circleSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'circleSet'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'circleSet'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'circleSet'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Bar Model Method in Primary Math<br />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/ejss_src_MaPS_frem_revamped/01authorlookang50x50.png" />
 Fremont Teng; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng; Loo Kang Wee.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new MaPS_frem_revamped("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/ejss_src_MaPS_frem_revamped/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
