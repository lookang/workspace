<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Integral: algorithms of numerical approximation</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function e_Integral_approximations(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var n; // EjsS Model.Variables.Var Table.n
  var x; // EjsS Model.Variables.Var Table.x
  var y; // EjsS Model.Variables.Var Table.y
  var x1; // EjsS Model.Variables.Var Table.x1
  var y1; // EjsS Model.Variables.Var Table.y1
  var x2; // EjsS Model.Variables.Var Table.x2
  var y2; // EjsS Model.Variables.Var Table.y2
  var x3; // EjsS Model.Variables.Var Table.x3
  var y3; // EjsS Model.Variables.Var Table.y3
  var delta; // EjsS Model.Variables.Var Table.delta
  var I; // EjsS Model.Variables.Var Table.I
  var Summe; // EjsS Model.Variables.Var Table.Summe
  var formal; // EjsS Model.Variables.Var Table.formal
  var a; // EjsS Model.Variables.Var Table.a
  var b; // EjsS Model.Variables.Var Table.b
  var c; // EjsS Model.Variables.Var Table.c
  var yp; // EjsS Model.Variables.Var Table.yp
  var ylinear; // EjsS Model.Variables.Var Table.ylinear
  var yconst; // EjsS Model.Variables.Var Table.yconst
  var abs1; // EjsS Model.Variables.Var Table.abs1

  var font; // EjsS Model.Variables.varfrem.font
  var fontb; // EjsS Model.Variables.varfrem.fontb
  var fonta; // EjsS Model.Variables.varfrem.fonta

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      n : n,
      x : x,
      y : y,
      x1 : x1,
      y1 : y1,
      x2 : x2,
      y2 : y2,
      x3 : x3,
      y3 : y3,
      delta : delta,
      I : I,
      Summe : Summe,
      formal : formal,
      a : a,
      b : b,
      c : c,
      yp : yp,
      ylinear : ylinear,
      yconst : yconst,
      abs1 : abs1,
      font : font,
      fontb : fontb,
      fonta : fonta
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      n : n,
      x : x,
      y : y,
      x1 : x1,
      y1 : y1,
      x2 : x2,
      y2 : y2,
      x3 : x3,
      y3 : y3,
      delta : delta,
      I : I,
      Summe : Summe,
      formal : formal,
      a : a,
      b : b,
      c : c,
      yp : yp,
      ylinear : ylinear,
      yconst : yconst,
      abs1 : abs1,
      font : font,
      fontb : fontb,
      fonta : fonta
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.x3 != "undefined") x3 = json.x3;
    if(typeof json.y3 != "undefined") y3 = json.y3;
    if(typeof json.delta != "undefined") delta = json.delta;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.Summe != "undefined") Summe = json.Summe;
    if(typeof json.formal != "undefined") formal = json.formal;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.ylinear != "undefined") ylinear = json.ylinear;
    if(typeof json.yconst != "undefined") yconst = json.yconst;
    if(typeof json.abs1 != "undefined") abs1 = json.abs1;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.x3 != "undefined") x3 = json.x3;
    if(typeof json.y3 != "undefined") y3 = json.y3;
    if(typeof json.delta != "undefined") delta = json.delta;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.Summe != "undefined") Summe = json.Summe;
    if(typeof json.formal != "undefined") formal = json.formal;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.ylinear != "undefined") ylinear = json.ylinear;
    if(typeof json.yconst != "undefined") yconst = json.yconst;
    if(typeof json.abs1 != "undefined") abs1 = json.abs1;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["axes"] = true;
  });

  _model.addToReset(function() {
    n = 0; // EjsS Model.Variables.Var Table.n
    x = 0; // EjsS Model.Variables.Var Table.x
    y = 0; // EjsS Model.Variables.Var Table.y
    x1 = 0.0; // EjsS Model.Variables.Var Table.x1
    y1 = 0; // EjsS Model.Variables.Var Table.y1
    x2 = 0; // EjsS Model.Variables.Var Table.x2
    y2 = 0.0; // EjsS Model.Variables.Var Table.y2
    x3 = 4; // EjsS Model.Variables.Var Table.x3
    y3 = 0; // EjsS Model.Variables.Var Table.y3
    delta = 1.3; // EjsS Model.Variables.Var Table.delta
    I = 0; // EjsS Model.Variables.Var Table.I
    Summe = 0; // EjsS Model.Variables.Var Table.Summe
    formal = 0; // EjsS Model.Variables.Var Table.formal
    a = 0; // EjsS Model.Variables.Var Table.a
    b = 0; // EjsS Model.Variables.Var Table.b
    c = 0; // EjsS Model.Variables.Var Table.c
    yp = 0; // EjsS Model.Variables.Var Table.yp
    ylinear = 0; // EjsS Model.Variables.Var Table.ylinear
    yconst = 0; // EjsS Model.Variables.Var Table.yconst
    abs1 = 0; // EjsS Model.Variables.Var Table.abs1
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.varfrem.font
    fontb = "normal bold 2vw"; // EjsS Model.Variables.varfrem.fontb
    fonta = "normal normal 1vw"; // EjsS Model.Variables.varfrem.fonta
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    x2=x1+delta;  // > Initialization.Init Page:1
    x3=x2+delta;  // > Initialization.Init Page:2
    y1=Math.sin(x1);  // > Initialization.Init Page:3
    y2=Math.sin(x2);  // > Initialization.Init Page:4
    y3=Math.sin(x3);  // > Initialization.Init Page:5
    a=((y2-y1)/(x2-x1)-(y3-y2)/(x3-x2))/(x1-x3);  // > Initialization.Init Page:6
    b=(y2-y1)/(x2-x1)-a*(x1+x2);  // > Initialization.Init Page:7
    c=y3-b*x3-a*x3*x3;  // > Initialization.Init Page:8
    yp=2*delta*(y1+4*y2+y3)/6;  // > Initialization.Init Page:9
    ylinear=delta*((y1+y2)/2+(y2+y3)/2);  // > Initialization.Init Page:10
    yconst=delta*(y1+y2);  // > Initialization.Init Page:11
    abs1=y2-y1;  // > Initialization.Init Page:12
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.constant.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.constant.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.constant.getAxisY().setPosition([0.125,0]);  // > Initialization.axes:3
    _view.constant.getTitleY().setPosition([0.130,0.85]);  // > Initialization.axes:4
    _view.linear.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:5
    _view.linear.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:6
    _view.linear.getAxisY().setPosition([0.125,0]);  // > Initialization.axes:7
    _view.linear.getTitleY().setPosition([0.130,0.85]);  // > Initialization.axes:8
    _view.quadrat.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:9
    _view.quadrat.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:10
    _view.quadrat.getAxisY().setPosition([0.125,0]);  // > Initialization.axes:11
    _view.quadrat.getTitleY().setPosition([0.130,0.85]);  // > Initialization.axes:12
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new e_Integral_approximations_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.panel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'panel2'
          _view.slider.linkProperty("Value",  function() { return delta; }, function(_v) { delta = _v; } ); // HtmlView Page linking property 'Value' for element 'slider'
          _view.slider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'slider'
          _view.x1slider.linkProperty("Value",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'Value' for element 'x1slider'
          _view.x1slider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'x1slider'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.constant.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'constant'
          _view.constant.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'constant'
          _view.constant.linkProperty("XTickStep",  function() { return Math.PI; } ); // HtmlView Page linking property 'XTickStep' for element 'constant'
          _view.constant.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'constant'
          _view.constant.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'constant'
          _view.constant.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'constant'
          _view.constant.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'constant'
          _view.analytic_integral3.linkProperty("FunctionY",  function() { return "-cos(x)+cos("+x1+")"; } ); // HtmlView Page linking property 'FunctionY' for element 'analytic_integral3'
          _view.begin3.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'begin3'
          _view.end3.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'end3'
          _view.interval3.linkProperty("SizeX",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'interval3'
          _view.interval3.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'interval3'
          _view.y13.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'y13'
          _view.y13.linkProperty("SizeY",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y13'
          _view.y23.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'y23'
          _view.y23.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y23'
          _view.y33.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'y33'
          _view.y33.linkProperty("SizeY",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y33'
          _view.rectarea.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'rectarea'
          _view.rectarea.linkProperty("Y",  function() { return yconst; }, function(_v) { yconst = _v; } ); // HtmlView Page linking property 'Y' for element 'rectarea'
          _view.y111.linkProperty("SizeX",  function() { return delta; }, function(_v) { delta = _v; } ); // HtmlView Page linking property 'SizeX' for element 'y111'
          _view.y111.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'y111'
          _view.y111.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'y111'
          _view.y222.linkProperty("SizeX",  function() { return delta; }, function(_v) { delta = _v; } ); // HtmlView Page linking property 'SizeX' for element 'y222'
          _view.y222.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'y222'
          _view.y222.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'y222'
          _view.finis1.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'finis1'
          _view.finis1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'finis1'
          _view.finis1.linkProperty("SizeY",  function() { return y2-y1; } ); // HtmlView Page linking property 'SizeY' for element 'finis1'
          _view.finis2.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'finis2'
          _view.finis2.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'finis2'
          _view.linear.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'linear'
          _view.linear.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'linear'
          _view.linear.linkProperty("XTickStep",  function() { return Math.PI; } ); // HtmlView Page linking property 'XTickStep' for element 'linear'
          _view.linear.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'linear'
          _view.linear.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'linear'
          _view.linear.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'linear'
          _view.linear.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'linear'
          _view.begin2.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'begin2'
          _view.begin2.setAction("OnDrag", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnDrag' for element 'begin2'
          _view.end2.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'end2'
          _view.end2.setAction("OnDrag", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnDrag' for element 'end2'
          _view.analyticintegral2.linkProperty("FunctionY",  function() { return "-cos(x)+cos("+x1+")"; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticintegral2'
          _view.interval2.linkProperty("SizeX",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'interval2'
          _view.interval2.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'interval2'
          _view.y12.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'y12'
          _view.y12.linkProperty("SizeY",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y12'
          _view.y22.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'y22'
          _view.y22.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y22'
          _view.y32.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'y32'
          _view.y32.linkProperty("SizeY",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y32'
          _view.trapezarea.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'trapezarea'
          _view.trapezarea.linkProperty("Y",  function() { return ylinear; }, function(_v) { ylinear = _v; } ); // HtmlView Page linking property 'Y' for element 'trapezarea'
          _view.y1y2.linkProperty("SizeX",  function() { return x2-x1; } ); // HtmlView Page linking property 'SizeX' for element 'y1y2'
          _view.y1y2.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'y1y2'
          _view.y1y2.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'y1y2'
          _view.y1y2.linkProperty("SizeY",  function() { return y2-y1; } ); // HtmlView Page linking property 'SizeY' for element 'y1y2'
          _view.y2y3.linkProperty("SizeX",  function() { return x3-x2; } ); // HtmlView Page linking property 'SizeX' for element 'y2y3'
          _view.y2y3.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'y2y3'
          _view.y2y3.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'y2y3'
          _view.y2y3.linkProperty("SizeY",  function() { return y3-y2; } ); // HtmlView Page linking property 'SizeY' for element 'y2y3'
          _view.quadrat.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'quadrat'
          _view.quadrat.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'quadrat'
          _view.quadrat.linkProperty("XTickStep",  function() { return Math.PI; } ); // HtmlView Page linking property 'XTickStep' for element 'quadrat'
          _view.quadrat.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'quadrat'
          _view.quadrat.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'quadrat'
          _view.quadrat.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'quadrat'
          _view.quadrat.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'quadrat'
          _view.begin.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'begin'
          _view.end.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'end'
          _view.analyticintegral.linkProperty("FunctionY",  function() { return "-cos(x)+cos("+x1+")"; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticintegral'
          _view.intervall.linkProperty("SizeX",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'intervall'
          _view.intervall.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'intervall'
          _view.y1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'y1'
          _view.y1.linkProperty("SizeY",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y1'
          _view.y2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'y2'
          _view.y2.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y2'
          _view.y3.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'y3'
          _view.y3.linkProperty("SizeY",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'y3'
          _view.parabola.linkProperty("FunctionY",  function() { return a+"*x*x+"+b+"*x+"+c; } ); // HtmlView Page linking property 'FunctionY' for element 'parabola'
          _view.parabola.linkProperty("Minimum",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'Minimum' for element 'parabola'
          _view.parabola.linkProperty("Maximum",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'Maximum' for element 'parabola'
          _view.parabelarea.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'parabelarea'
          _view.parabelarea.linkProperty("Y",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'Y' for element 'parabelarea'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function e_Integral_approximations_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = e_Integral_approximations_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./e_Integral_approximations_Intro_1.html');
  _view._addDescriptionPage('Experiments','./e_Integral_approximations_Intro_2.html');

  return _view;
} // end of main function

function e_Integral_approximations_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"delta", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'delta'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'delta'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'delta'
      .setProperty("Text","delta = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'delta'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider'
      .setProperty("Maximum",3) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'slider'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'slider'
      .setProperty("Step",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"x1", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'x1'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'x1'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'x1'
      .setProperty("Text","x₁ = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'x1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"x1slider", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'x1slider'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'x1slider'
      .setProperty("Maximum",6.28) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'x1slider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'x1slider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'x1slider'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'x1slider'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'x1slider'
      .setProperty("Step",0.01) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'x1slider'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"constant", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'constant'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'constant'
      .setProperty("Width","33%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'constant'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'constant'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'constant'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'constant'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'constant'
      .setProperty("TRMessage","Rectangle") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'constant'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'constant'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'constant'
      .setProperty("Title","Rectangle") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'constant'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'constant'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'constant'
      .setProperty("MaximumY",2.1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'constant'
      .setProperty("MaximumX",7) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'constant'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'constant'
      .setProperty("MinimumX",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'constant'
      .setProperty("MinimumY",-2.1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'constant'
      .setProperty("TitleY","y") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'constant'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'constant'
      .setProperty("TitleX","x") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'constant'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'constant'
      .setProperty("XScalePrecision",3) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'constant'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"function3", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'function3'
      .setProperty("FunctionY","sin(x)") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'function3'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'function3'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'function3'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'function3'
      .setProperty("Maximum",6.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'function3'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'function3'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'function3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'function3'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"nulline", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'nulline'
      .setProperty("FunctionY","0") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'nulline'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'nulline'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'nulline'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'nulline'
      .setProperty("Maximum",6.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'nulline'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'nulline'
      .setProperty("LineColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'nulline'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'nulline'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'nulline'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analytic_integral3", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'analytic_integral3'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analytic_integral3'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'analytic_integral3'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analytic_integral3'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analytic_integral3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analytic_integral3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"begin3", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'begin3'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'begin3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'begin3'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'begin3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"end3", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'end3'
      .setProperty("FillColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'end3'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'end3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'end3'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'end3'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"interval3", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'interval3'
      .setProperty("LineColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'interval3'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'interval3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'interval3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'interval3'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'interval3'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y13", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'y13'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y13'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y13'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y13'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y13'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y23", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'y23'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y23'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y23'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y23'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y23'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y33", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'y33'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y33'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y33'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y33'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y33'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectarea", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'rectarea'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectarea'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rectarea'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectarea'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rectarea'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"y111", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'y111'
      .setProperty("LineColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'y111'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'y111'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y111'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"y222", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'y222'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'y222'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'y222'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y222'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"finis1", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'finis1'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'finis1'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'finis1'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'finis1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'finis1'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"finis2", _view.constant) // EJsS HtmlView.HtmlView Page: declaration of element 'finis2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'finis2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'finis2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'finis2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'finis2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'finis2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"linear", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'linear'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'linear'
      .setProperty("Width","33%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'linear'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'linear'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'linear'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'linear'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'linear'
      .setProperty("TRMessage","Trapezoid") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'linear'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'linear'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'linear'
      .setProperty("Title","Trapezoid") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'linear'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'linear'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'linear'
      .setProperty("MaximumY",2.1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'linear'
      .setProperty("MaximumX",7) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'linear'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'linear'
      .setProperty("MinimumX",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'linear'
      .setProperty("MinimumY",-2.1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'linear'
      .setProperty("TitleY","y") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'linear'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'linear'
      .setProperty("TitleX","x") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'linear'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'linear'
      .setProperty("XScalePrecision",3) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'linear'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"Function2", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'Function2'
      .setProperty("FunctionY","sin(x)") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'Function2'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'Function2'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'Function2'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'Function2'
      .setProperty("Maximum",6.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'Function2'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'Function2'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Function2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Function2'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"nullline", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'nullline'
      .setProperty("FunctionY","0") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'nullline'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'nullline'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'nullline'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'nullline'
      .setProperty("Maximum",6.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'nullline'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'nullline'
      .setProperty("LineColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'nullline'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'nullline'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"begin2", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'begin2'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'begin2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'begin2'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'begin2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"end2", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'end2'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'end2'
      .setProperty("LineColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'end2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'end2'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'end2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'end2'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticintegral2", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticintegral2'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticintegral2'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'analyticintegral2'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticintegral2'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticintegral2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticintegral2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"interval2", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'interval2'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'interval2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'interval2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'interval2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'interval2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y12", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'y12'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y12'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y12'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y12'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y12'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y22", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'y22'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y22'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y22'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y32", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'y32'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y32'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y32'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y32'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y32'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trapezarea", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'trapezarea'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trapezarea'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trapezarea'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trapezarea'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trapezarea'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y1y2", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'y1y2'
      .setProperty("LineColor","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'y1y2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y1y2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y2y3", _view.linear) // EJsS HtmlView.HtmlView Page: declaration of element 'y2y3'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'y2y3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y2y3'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"quadrat", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'quadrat'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'quadrat'
      .setProperty("Width","33%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'quadrat'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'quadrat'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'quadrat'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'quadrat'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'quadrat'
      .setProperty("TRMessage","Parabola") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'quadrat'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'quadrat'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'quadrat'
      .setProperty("Title","Parabola") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'quadrat'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'quadrat'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'quadrat'
      .setProperty("MaximumY",2.1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'quadrat'
      .setProperty("MaximumX",7) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'quadrat'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'quadrat'
      .setProperty("MinimumX",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'quadrat'
      .setProperty("MinimumY",-2.1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'quadrat'
      .setProperty("TitleY","y") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'quadrat'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'quadrat'
      .setProperty("TitleX","x") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'quadrat'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'quadrat'
      .setProperty("XScalePrecision",3) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'quadrat'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"Function", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'Function'
      .setProperty("FunctionY","sin(x)") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'Function'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'Function'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'Function'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'Function'
      .setProperty("Maximum",6.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'Function'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'Function'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Function'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Function'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"nullline2", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'nullline2'
      .setProperty("FunctionY","0") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'nullline2'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'nullline2'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'nullline2'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'nullline2'
      .setProperty("Maximum",6.5) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'nullline2'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'nullline2'
      .setProperty("LineColor","MAGENTA") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'nullline2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'nullline2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"begin", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'begin'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'begin'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'begin'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'begin'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"end", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'end'
      .setProperty("FillColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'end'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'end'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'end'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'end'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticintegral", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticintegral'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticintegral'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'analyticintegral'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticintegral'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticintegral'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticintegral'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"intervall", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'intervall'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'intervall'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'intervall'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'intervall'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'intervall'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y1", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'y1'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y1'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y1'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y2", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'y2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"y3", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'y3'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y3'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'y3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'y3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'y3'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"parabola", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'parabola'
      .setProperty("FunctionX","x") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'parabola'
      .setProperty("NumPoints",50) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'parabola'
      .setProperty("Variable","x") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'parabola'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'parabola'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'parabola'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"parabelarea", _view.quadrat) // EJsS HtmlView.HtmlView Page: declaration of element 'parabelarea'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'parabelarea'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'parabelarea'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'parabelarea'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'parabelarea'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"html", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'html'
      .setProperty("Html","<h1>Integral: algorithms of numerical approximation </h1> As an example for numerical integration we choose the sine function y = sin x ;  its graph is shown in blue. The definite integral is to be calculated between an initial abscissa x1 and an end abscissa x2. <br/> The analytic solution of the indefinite integral (antiderivative) is <br/> y = ∫ sinxdx  = -cos x +C  <br/> Its graph is shown in red, with C as the initial value at the initial abscissa.<br/> The analytic definite integral is -(cos x2-cosx1). It corresponds to a point on the analytic curve at the end abscissa x2.<br/> In the approximate numerical calculation the interval x2 - x1 is divided into n sub intervals of width delta. For clear demonstration of the principle n = 2 is chosen. Arrows show the value of the function in the three points of the double interval 2 delta.<br/> Three numerical algorithms are visualized in three windows. They differ in how the approximative value of the function is defined between consecutive points in the sub interval delta.<br/> 1.)  Rectangle approximation: y is taken as constant within the interval. The contribution of one interval is delta * y1.<br/> 2.) Trapezoid approximation:  y is taken as the mean value within the interval. Its contribution is delta*(y1+y2)/2.<br/> 3.) Parabola approximation:  the function in two consecutive intervals is approximated by a second order parabola through both end points and the middle point of the double interval (a parabola needs three points to be uniquely defined). The contribution of the double integral, derived as a surprisingly simple formula, is  2*delta*1/6(y1+4y2+y3).<br/> In principle one can increase the precision of the parabola algorithm still further by using higher order parabolas, with correspondingly more sub intervals of the definition range. As the second order is already very good, higher order approximations have no great practical importance. (For fun and exercise derive the formula for a third order parabola!)<br/> The simulation calculates the sum of two approximating intervals of width delta using the three algorithms. Their respective values are represented by the green points.<br/> A first slider defines the interval delta, a second one the initial abscissa x1, reset defines delta = 1 and x1 = 0.5.<br/>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'html'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Integral: algorithms of numerical approximation<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/Calculus/e_Integral_approximations/Screen Shot 2018-05-07 at 2.13.18 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/Calculus/01authorlookang50x50.png" />
 Dieter Roess - WEH-Foundation; Fremont Teng; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Dieter Roess - WEH-Foundation; Fremont Teng; Loo Kang Wee. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new e_Integral_approximations("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/Calculus/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
