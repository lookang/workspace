<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Gaussian Distribution Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function gaussian(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var range; // EjsS Model.Variables.coordinate.range
  var xmin; // EjsS Model.Variables.coordinate.xmin
  var xmax; // EjsS Model.Variables.coordinate.xmax
  var ymin; // EjsS Model.Variables.coordinate.ymin
  var ymax; // EjsS Model.Variables.coordinate.ymax
  var t; // EjsS Model.Variables.coordinate.t
  var dt; // EjsS Model.Variables.coordinate.dt
  var size; // EjsS Model.Variables.coordinate.size
  var label; // EjsS Model.Variables.coordinate.label
  var w; // EjsS Model.Variables.coordinate.w
  var hundred; // EjsS Model.Variables.coordinate.hundred
  var v; // EjsS Model.Variables.coordinate.v
  var sigma2; // EjsS Model.Variables.coordinate.sigma2

  var l_play; // EjsS Model.Variables.language.l_play
  var l_pause; // EjsS Model.Variables.language.l_pause
  var l_reset; // EjsS Model.Variables.language.l_reset
  var l_init; // EjsS Model.Variables.language.l_init
  var l_hundred; // EjsS Model.Variables.language.l_hundred
  var l_title; // EjsS Model.Variables.language.l_title
  var l_msg; // EjsS Model.Variables.language.l_msg

  var n; // EjsS Model.Variables.basic.n
  var n2; // EjsS Model.Variables.basic.n2
  var n1; // EjsS Model.Variables.basic.n1
  var n21; // EjsS Model.Variables.basic.n21
  var x; // EjsS Model.Variables.basic.x
  var y; // EjsS Model.Variables.basic.y
  var count; // EjsS Model.Variables.basic.count
  var xp; // EjsS Model.Variables.basic.xp
  var yp; // EjsS Model.Variables.basic.yp
  var txt; // EjsS Model.Variables.basic.txt
  var color; // EjsS Model.Variables.basic.color
  var blue; // EjsS Model.Variables.basic.blue
  var red; // EjsS Model.Variables.basic.red
  var black; // EjsS Model.Variables.basic.black
  var clr; // EjsS Model.Variables.basic.clr
  var cmax; // EjsS Model.Variables.basic.cmax
  var total; // EjsS Model.Variables.basic.total
  var testcount; // EjsS Model.Variables.basic.testcount
  var title; // EjsS Model.Variables.basic.title
  var cst; // EjsS Model.Variables.basic.cst

  var font; // EjsS Model.Variables.varfrem.font
  var fontb; // EjsS Model.Variables.varfrem.fontb
  var fonta; // EjsS Model.Variables.varfrem.fonta
  var text; // EjsS Model.Variables.varfrem.text

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      t : t,
      dt : dt,
      size : size,
      label : label,
      w : w,
      hundred : hundred,
      v : v,
      sigma2 : sigma2,
      l_play : l_play,
      l_pause : l_pause,
      l_reset : l_reset,
      l_init : l_init,
      l_hundred : l_hundred,
      l_title : l_title,
      l_msg : l_msg,
      n : n,
      n2 : n2,
      n1 : n1,
      n21 : n21,
      x : x,
      y : y,
      count : count,
      xp : xp,
      yp : yp,
      txt : txt,
      color : color,
      blue : blue,
      red : red,
      black : black,
      clr : clr,
      cmax : cmax,
      total : total,
      testcount : testcount,
      title : title,
      cst : cst,
      font : font,
      fontb : fontb,
      fonta : fonta,
      text : text
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.label != "undefined") label = json.label;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.hundred != "undefined") hundred = json.hundred;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.sigma2 != "undefined") sigma2 = json.sigma2;
    if(typeof json.l_play != "undefined") l_play = json.l_play;
    if(typeof json.l_pause != "undefined") l_pause = json.l_pause;
    if(typeof json.l_reset != "undefined") l_reset = json.l_reset;
    if(typeof json.l_init != "undefined") l_init = json.l_init;
    if(typeof json.l_hundred != "undefined") l_hundred = json.l_hundred;
    if(typeof json.l_title != "undefined") l_title = json.l_title;
    if(typeof json.l_msg != "undefined") l_msg = json.l_msg;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.n2 != "undefined") n2 = json.n2;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.n21 != "undefined") n21 = json.n21;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.count != "undefined") count = json.count;
    if(typeof json.xp != "undefined") xp = json.xp;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.txt != "undefined") txt = json.txt;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.black != "undefined") black = json.black;
    if(typeof json.clr != "undefined") clr = json.clr;
    if(typeof json.cmax != "undefined") cmax = json.cmax;
    if(typeof json.total != "undefined") total = json.total;
    if(typeof json.testcount != "undefined") testcount = json.testcount;
    if(typeof json.title != "undefined") title = json.title;
    if(typeof json.cst != "undefined") cst = json.cst;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.text != "undefined") text = json.text;
  };

  _model._inputAndPublicParameters = ["range",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "label",  "w",  "hundred",  "v",  "sigma2",  "l_play",  "l_pause",  "l_reset",  "l_init",  "l_hundred",  "l_title",  "l_msg",  "n",  "n2",  "n1",  "n21",  "x",  "y",  "count",  "xp",  "yp",  "txt",  "color",  "blue",  "red",  "black",  "clr",  "cmax",  "total",  "testcount",  "title",  "cst",  "font",  "fontb",  "fonta",  "text"]; 

  _model._outputAndPublicParameters = ["range",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "label",  "w",  "hundred",  "v",  "sigma2",  "l_play",  "l_pause",  "l_reset",  "l_init",  "l_hundred",  "l_title",  "l_msg",  "n",  "n2",  "n1",  "n21",  "x",  "y",  "count",  "xp",  "yp",  "txt",  "color",  "blue",  "red",  "black",  "clr",  "cmax",  "total",  "testcount",  "title",  "cst",  "font",  "fontb",  "fonta",  "text"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    range = 200; // EjsS Model.Variables.coordinate.range
    xmin = -range/2; // EjsS Model.Variables.coordinate.xmin
    xmax = range/2; // EjsS Model.Variables.coordinate.xmax
    ymin = -range/2; // EjsS Model.Variables.coordinate.ymin
    ymax = range/2; // EjsS Model.Variables.coordinate.ymax
    t = 0.0; // EjsS Model.Variables.coordinate.t
    dt = 0.05; // EjsS Model.Variables.coordinate.dt
    size = range/40; // EjsS Model.Variables.coordinate.size
    label = "play"; // EjsS Model.Variables.coordinate.label
    w = 1; // EjsS Model.Variables.coordinate.w
    hundred = true; // EjsS Model.Variables.coordinate.hundred
    v = 5.0; // EjsS Model.Variables.coordinate.v
    sigma2 = 0.0; // EjsS Model.Variables.coordinate.sigma2
  });

  _model.addToReset(function() {
    l_play = "play"; // EjsS Model.Variables.language.l_play
    l_pause = "pause"; // EjsS Model.Variables.language.l_pause
    l_reset = "reset"; // EjsS Model.Variables.language.l_reset
    l_init = "initialize"; // EjsS Model.Variables.language.l_init
    l_hundred = "single"; // EjsS Model.Variables.language.l_hundred
    l_title = "test run # = "; // EjsS Model.Variables.language.l_title
    l_msg = "red dots # = "; // EjsS Model.Variables.language.l_msg
  });

  _model.addToReset(function() {
    n = 100; // EjsS Model.Variables.basic.n
    n2 = 10; // EjsS Model.Variables.basic.n2
    n1 = n2; // EjsS Model.Variables.basic.n1
    n21 = n2-1; // EjsS Model.Variables.basic.n21
    x = new Array(n); // EjsS Model.Variables.basic.x
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.x
        x[_i0] = 0;  // EjsS Model.Variables.basic.x
      }
    }());
    y = new Array(n); // EjsS Model.Variables.basic.y
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.y
        y[_i0] = 0;  // EjsS Model.Variables.basic.y
      }
    }());
    count = new Array(n+1); // EjsS Model.Variables.basic.count
    (function () {
      var _i0;
      for (_i0=0; _i0<n+1; _i0+=1) {  // EjsS Model.Variables.basic.count
        count[_i0] = 0;  // EjsS Model.Variables.basic.count
      }
    }());
    xp = new Array(n+1); // EjsS Model.Variables.basic.xp
    (function () {
      var _i0;
      for (_i0=0; _i0<n+1; _i0+=1) {  // EjsS Model.Variables.basic.xp
        xp[_i0] = 0;  // EjsS Model.Variables.basic.xp
      }
    }());
    yp = new Array(n2); // EjsS Model.Variables.basic.yp
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.basic.yp
        yp[_i0] = 0.0;  // EjsS Model.Variables.basic.yp
      }
    }());
    txt = new Array(n2); // EjsS Model.Variables.basic.txt
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.basic.txt
        txt[_i0] = "";  // EjsS Model.Variables.basic.txt
      }
    }());
    color = new Array(n); // EjsS Model.Variables.basic.color
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.color
        color[_i0] = 0;  // EjsS Model.Variables.basic.color
      }
    }());
    cmax = 0.0; // EjsS Model.Variables.basic.cmax
    total = ""; // EjsS Model.Variables.basic.total
    testcount = 0; // EjsS Model.Variables.basic.testcount
    title = ""; // EjsS Model.Variables.basic.title
    cst = 0.0; // EjsS Model.Variables.basic.cst
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.varfrem.font
    fontb = "normal bold 2vw"; // EjsS Model.Variables.varfrem.fontb
    fonta = "normal normal 1vw"; // EjsS Model.Variables.varfrem.fonta
    text = new Array(n); // EjsS Model.Variables.varfrem.text
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.varfrem.text
        text[_i0] = "";  // EjsS Model.Variables.varfrem.text
      }
    }());
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(100);
    _model.setStepsPerDisplay(1);
  });

  var cnt=0,cnt2=0;  // > CustomCode.newrun:1
  function newrun () {  // > CustomCode.newrun:2
   testcount++;  // > CustomCode.newrun:3
   cnt2=0;  // > CustomCode.newrun:4
   for(var i=0;i<n;i++){  // > CustomCode.newrun:5
     if(i%n1==0)cnt=0;  // > CustomCode.newrun:6
     if(Math.random()>0.5){  // > CustomCode.newrun:7
      color[i]=red;  // > CustomCode.newrun:8
     // color[i]=blue;  // > CustomCode.newrun:9
      cnt++;  // > CustomCode.newrun:10
      cnt2++;  // > CustomCode.newrun:11
     }else color[i]=blue;  // > CustomCode.newrun:12
     if(i%n1==(n1-1)){  // > CustomCode.newrun:13
       if(!hundred)count[cnt]+=1; //this is making count 10 or 100 in x  // > CustomCode.newrun:14
         // > CustomCode.newrun:15
       txt[Math.floor(i/n1)]="="+cnt;  // > CustomCode.newrun:16
      //  txt[i]=""+cnt; // for showing sub total down to up rows  // > CustomCode.newrun:17
     }  // > CustomCode.newrun:18
   }  // > CustomCode.newrun:19
   cmax=0;  // > CustomCode.newrun:20
   for(var i=0;i<n2+1;i++){  // > CustomCode.newrun:21
    if(count[i]>cmax)cmax=count[i];  // > CustomCode.newrun:22
   }  // > CustomCode.newrun:23
   if(hundred)count[cnt2]+=1;  // > CustomCode.newrun:24
   cmax=cmax+2;  // > CustomCode.newrun:25
   total=l_msg+cnt2;  // > CustomCode.newrun:26
   title=l_title+testcount;  // > CustomCode.newrun:27
  }  // > CustomCode.newrun:28

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    var j;  // > Initialization.Init Page:1
    testcount=0;  // > Initialization.Init Page:2
    //var d=range/(n1+1);  // > Initialization.Init Page:3
    var d=range/(n1);  // > Initialization.Init Page:4
    if(hundred){  // > Initialization.Init Page:5
      n2=n; // n2 range of histogram plot  // > Initialization.Init Page:6
      n21=n2-1;  // > Initialization.Init Page:7
    }else{  // > Initialization.Init Page:8
      n2=10; // for single  // > Initialization.Init Page:9
      n21=n2-1;  // > Initialization.Init Page:10
    }  // > Initialization.Init Page:11
    for(var i=0;i<n+1;i++){  // > Initialization.Init Page:12
     xp[i]=i;  // > Initialization.Init Page:13
     count[i]=0;  // > Initialization.Init Page:14
    }  // > Initialization.Init Page:15
    for(var i=0;i<n1;i++) yp[i]=ymin+(i+1)*d;  // > Initialization.Init Page:16
    cst=1./Math.sqrt(2*Math.PI);  // > Initialization.Init Page:17
    for(var i=0;i<n;i++){  // > Initialization.Init Page:18
       j=i%n1;  // > Initialization.Init Page:19
       x[i]=xmin+d*(j+1); // lay the circles on plottingPanel  // > Initialization.Init Page:20
     //  y[i]=ymin+(i/n1+1)*d;  // > Initialization.Init Page:21
        y[i]=ymin+Math.floor((i/n1)+1)*d; // lay the circles on plottingPanel  // > Initialization.Init Page:22
        text[i]=""+i; //to show numbers for debugging  // > Initialization.Init Page:23
    }  // > Initialization.Init Page:24
    red="red";  // > Initialization.Init Page:25
    blue="blue";  // > Initialization.Init Page:26
    black="black";  // > Initialization.Init Page:27
    if(hundred){  // > Initialization.Init Page:28
     v=50.;  // > Initialization.Init Page:29
     //clr=blue;  // > Initialization.Init Page:30
     clr=red;  // > Initialization.Init Page:31
     sigma2=n;  // > Initialization.Init Page:32
    }else{  // > Initialization.Init Page:33
      v=5;  // > Initialization.Init Page:34
      clr=black;  // > Initialization.Init Page:35
     cst=cst*Math.sqrt(1000);  // > Initialization.Init Page:36
     sigma2=10;  // > Initialization.Init Page:37
    }  // > Initialization.Init Page:38
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(0.05);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (0.05===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(0.05);
      __eventSolver.setInternalStepSize(0.05);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        newrun();  // > Preliminary code for ODE.Evol Page:1
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new gaussian_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.hundred.linkProperty("Checked",  function() { return hundred; }, function(_v) { hundred = _v; } ); // HtmlView Page linking property 'Checked' for element 'hundred'
          _view.hundred.setAction("OnCheckOff", function(_data,_info) {
  l_hundred="hundred";

}); // HtmlView Page setting action 'OnCheckOff' for element 'hundred'
          _view.hundred.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'hundred'
          _view.hundred.linkProperty("Text",  function() { return l_hundred; }, function(_v) { l_hundred = _v; } ); // HtmlView Page linking property 'Text' for element 'hundred'
          _view.hundred.setAction("OnCheckOn", function(_data,_info) {
  l_hundred="single toss";

}); // HtmlView Page setting action 'OnCheckOn' for element 'hundred'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.stepButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.DrawingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'DrawingPanel'
          _view.DrawingPanel.linkProperty("TRMessage",  function() { return total; }, function(_v) { total = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'DrawingPanel'
          _view.shapeSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSet'
          _view.shapeSet.linkProperty("FillColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'FillColor' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeX",  function() { return range/(n1); } ); // HtmlView Page linking property 'SizeX' for element 'shapeSet'
          _view.shapeSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSet'
          _view.shapeSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeY",  function() { return range/(n1); } ); // HtmlView Page linking property 'SizeY' for element 'shapeSet'
          _view.textSetnumer1to100.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSetnumer1to100'
          _view.textSetnumer1to100.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSetnumer1to100'
          _view.textSetnumer1to100.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'textSetnumer1to100'
          _view.textSetnumer1to100.linkProperty("Text",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'Text' for element 'textSetnumer1to100'
          _view.textSetsubtotal.linkProperty("NumberOfElements",  function() { return n1; }, function(_v) { n1 = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSetsubtotal'
          _view.textSetsubtotal.linkProperty("Y",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'Y' for element 'textSetsubtotal'
          _view.textSetsubtotal.linkProperty("Text",  function() { return txt; }, function(_v) { txt = _v; } ); // HtmlView Page linking property 'Text' for element 'textSetsubtotal'
          _view.textSetsubtotal.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textSetsubtotal'
          _view.plottingPanel2.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'plottingPanel2'
          _view.plottingPanel2.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("TRMessage",  function() { return title; }, function(_v) { title = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("XTickStep",  function() { return hundred?10:1; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("YTickStep",  function() { return _view.plottingPanel2.getRealWorldYMax()<100?10:_view.plottingPanel2.getRealWorldYMax()<1000?100:_view.plottingPanel2.getRealWorldYMax()<10000?1000:10000; } ); // HtmlView Page linking property 'YTickStep' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MaximumY",  function() { return cmax; }, function(_v) { cmax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MaximumX",  function() { return n2; }, function(_v) { n2 = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'plottingPanel2'
          _view.shapeSet2.linkProperty("NumberOfElements",  function() { return n2; }, function(_v) { n2 = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSet2'
          _view.shapeSet2.linkProperty("FillColor",  function() { return clr; }, function(_v) { clr = _v; } ); // HtmlView Page linking property 'FillColor' for element 'shapeSet2'
          _view.shapeSet2.linkProperty("SizeX",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'SizeX' for element 'shapeSet2'
          _view.shapeSet2.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSet2'
          _view.shapeSet2.linkProperty("LineColor",  function() { return clr; }, function(_v) { clr = _v; } ); // HtmlView Page linking property 'LineColor' for element 'shapeSet2'
          _view.shapeSet2.linkProperty("SizeY",  function() { return count; }, function(_v) { count = _v; } ); // HtmlView Page linking property 'SizeY' for element 'shapeSet2'
          _view.analyticCurve.linkProperty("FunctionY",  function() { return 2*testcount*cst/Math.sqrt(n)+"*exp(-2*(u-"+v+")*(u-"+v+")/"+sigma2+")"; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurve'
          _view.analyticCurve.linkProperty("Maximum",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'Maximum' for element 'analyticCurve'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(100);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function gaussian_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = gaussian_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./gaussian_Intro_1.html');

  return _view;
} // end of main function

function gaussian_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"hundred", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hundred'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'hundred'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'hundred'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Text","❚▶") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"DrawingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'DrawingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'DrawingPanel'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'DrawingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'DrawingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'DrawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'DrawingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'DrawingPanel'
      .setProperty("MaximumY",110) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'DrawingPanel'
      .setProperty("MaximumX",130) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'DrawingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'DrawingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'DrawingPanel'
      .setProperty("MinimumX",-90) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'DrawingPanel'
      .setProperty("MinimumY",-90) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'DrawingPanel'
      .setProperty("XTickStep",20) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'DrawingPanel'
      .setProperty("YTickStep",20) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'DrawingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'DrawingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'DrawingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'DrawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet", _view.DrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSet'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSet'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSetnumer1to100", _view.DrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSetnumer1to100'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textSetnumer1to100'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSetsubtotal", _view.DrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSetsubtotal'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSetsubtotal'
      .setProperty("X",120) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textSetsubtotal'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel2'
      .setProperty("Width","50%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel2'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel2'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel2'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel2'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel2'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel2'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel2'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel2'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel2'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel2'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSet2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shapeSet2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSet2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shapeSet2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shapeSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve'
      .setProperty("FunctionX","u") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurve'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'analyticCurve'
      .setProperty("Variable","u") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurve'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurve'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Gaussian Distribution Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/gaussian/Screen Shot 2018-04-16 at 10.00.07 AM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/01authorlookang50x50.png" />
 Fu-Kwun Hwang; Fremont Teng; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fu-Kwun Hwang; Fremont Teng; Loo Kang Wee.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new gaussian("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
