<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Function plotter z = f ( x , y ) 3D Waves</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function e_Waves_3Dwee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var x; // EjsS Model.Variables.Basic.x
  var y; // EjsS Model.Variables.Basic.y
  var t; // EjsS Model.Variables.Basic.t
  var a; // EjsS Model.Variables.Basic.a
  var b; // EjsS Model.Variables.Basic.b
  var c; // EjsS Model.Variables.Basic.c
  var p; // EjsS Model.Variables.Basic.p
  var max; // EjsS Model.Variables.Basic.max
  var xy; // EjsS Model.Variables.Basic.xy

  var work; // EjsS Model.Variables.Functions.work
  var fTyp; // EjsS Model.Variables.Functions.fTyp
  var fTypold; // EjsS Model.Variables.Functions.fTypold
  var fTypolddisplay; // EjsS Model.Variables.Functions.fTypolddisplay
  var fTypshow; // EjsS Model.Variables.Functions.fTypshow
  var functions; // EjsS Model.Variables.Functions.functions
  var description; // EjsS Model.Variables.Functions.description
  var functionList; // EjsS Model.Variables.Functions.functionList
  var descriptionList; // EjsS Model.Variables.Functions.descriptionList

  var xylevel; // EjsS Model.Variables.variableWC.xylevel
  var pointNum; // EjsS Model.Variables.variableWC.pointNum

  var font; // EjsS Model.Variables.font.font

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      x : x,
      y : y,
      t : t,
      a : a,
      b : b,
      c : c,
      p : p,
      max : max,
      xy : xy,
      work : work,
      fTyp : fTyp,
      fTypold : fTypold,
      fTypolddisplay : fTypolddisplay,
      fTypshow : fTypshow,
      functions : functions,
      description : description,
      functionList : functionList,
      descriptionList : descriptionList,
      xylevel : xylevel,
      pointNum : pointNum,
      font : font
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      x : x,
      y : y,
      t : t,
      a : a,
      b : b,
      c : c,
      p : p,
      max : max,
      xy : xy,
      work : work,
      fTyp : fTyp,
      fTypold : fTypold,
      fTypolddisplay : fTypolddisplay,
      fTypshow : fTypshow,
      functions : functions,
      description : description,
      functionList : functionList,
      descriptionList : descriptionList,
      xylevel : xylevel,
      pointNum : pointNum,
      font : font
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.p != "undefined") p = json.p;
    if(typeof json.max != "undefined") max = json.max;
    if(typeof json.xy != "undefined") xy = json.xy;
    if(typeof json.work != "undefined") work = json.work;
    if(typeof json.fTyp != "undefined") fTyp = json.fTyp;
    if(typeof json.fTypold != "undefined") fTypold = json.fTypold;
    if(typeof json.fTypolddisplay != "undefined") fTypolddisplay = json.fTypolddisplay;
    if(typeof json.fTypshow != "undefined") fTypshow = json.fTypshow;
    if(typeof json.functions != "undefined") functions = json.functions;
    if(typeof json.description != "undefined") description = json.description;
    if(typeof json.functionList != "undefined") functionList = json.functionList;
    if(typeof json.descriptionList != "undefined") descriptionList = json.descriptionList;
    if(typeof json.xylevel != "undefined") xylevel = json.xylevel;
    if(typeof json.pointNum != "undefined") pointNum = json.pointNum;
    if(typeof json.font != "undefined") font = json.font;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.p != "undefined") p = json.p;
    if(typeof json.max != "undefined") max = json.max;
    if(typeof json.xy != "undefined") xy = json.xy;
    if(typeof json.work != "undefined") work = json.work;
    if(typeof json.fTyp != "undefined") fTyp = json.fTyp;
    if(typeof json.fTypold != "undefined") fTypold = json.fTypold;
    if(typeof json.fTypolddisplay != "undefined") fTypolddisplay = json.fTypolddisplay;
    if(typeof json.fTypshow != "undefined") fTypshow = json.fTypshow;
    if(typeof json.functions != "undefined") functions = json.functions;
    if(typeof json.description != "undefined") description = json.description;
    if(typeof json.functionList != "undefined") functionList = json.functionList;
    if(typeof json.descriptionList != "undefined") descriptionList = json.descriptionList;
    if(typeof json.xylevel != "undefined") xylevel = json.xylevel;
    if(typeof json.pointNum != "undefined") pointNum = json.pointNum;
    if(typeof json.font != "undefined") font = json.font;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Initialize"] = true;
    __pagesEnabled["fTypold"] = true;
    __pagesEnabled["Running Time"] = true;
    __pagesEnabled["functionSelect"] = true;
  });

  _model.addToReset(function() {
    t = 0.00; // EjsS Model.Variables.Basic.t
    a = 0.18113; // EjsS Model.Variables.Basic.a
    b = 5.595553507161852; // EjsS Model.Variables.Basic.b
    c = 5.311050876452761; // EjsS Model.Variables.Basic.c
    p = 1.0; // EjsS Model.Variables.Basic.p
  });

  _model.addToReset(function() {
    work = true; // EjsS Model.Variables.Functions.work
    fTyp = a.toFixed(3)+"*sin("+b.toFixed(3)+"*x-"+t.toFixed(3)+")"; // EjsS Model.Variables.Functions.fTyp
    fTypold = "a*sin(b*x-t)"; // EjsS Model.Variables.Functions.fTypold
    fTypolddisplay = "0"; // EjsS Model.Variables.Functions.fTypolddisplay
    functions = ""; // EjsS Model.Variables.Functions.functions
  });

  _model.addToReset(function() {
    xylevel = true; // EjsS Model.Variables.variableWC.xylevel
    pointNum = (_isMobile==true)? 20:80; // EjsS Model.Variables.variableWC.pointNum
  });

  _model.addToReset(function() {
    font = "normal normal 1.5vw"; // EjsS Model.Variables.font.font
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function Listen() {  // > CustomCode.MakeList:1
     // > CustomCode.MakeList:2
    // List of formulas  // > CustomCode.MakeList:3
    //functionList = new java.util.ArrayList();  // > CustomCode.MakeList:4
    var functionList = [];  // > CustomCode.MakeList:5
    //Liste of function type  // > CustomCode.MakeList:6
    //descriptionList = new java.util.ArrayList();  // > CustomCode.MakeList:7
    var descriptionList = [];  // > CustomCode.MakeList:8
     // > CustomCode.MakeList:9
          /*  // > CustomCode.MakeList:10
  	functionList.add("a*sin(b*x-t)");  // > CustomCode.MakeList:11
  	descriptionList.add("Plane wave x");  // > CustomCode.MakeList:12
      // > CustomCode.MakeList:13
  	functionList.add("a*sin(b*y-t)");  // > CustomCode.MakeList:14
  	descriptionList.add("Plane wave y");  // > CustomCode.MakeList:15
          functionList.add("0.3*sin(6*pi*a*(b*x+c*y)/sqrt(b*b+c*c)-t)");  // > CustomCode.MakeList:16
  	descriptionList.add("Plane wave direction adjustable");  // > CustomCode.MakeList:17
   	functionList.add("a*(sin(b*y-t)+sin(b*y-t))");  // > CustomCode.MakeList:18
   	descriptionList.add("Interference concurrent  f1");  // > CustomCode.MakeList:19
          functionList.add("a*(cos(b*y-t)+cos(-b*y-t))");  // > CustomCode.MakeList:20
  	descriptionList.add("Interference countercurrent  f1");  // > CustomCode.MakeList:21
   	functionList.add("a*(sin(b*y-t)+sin(c*y-t))");  // > CustomCode.MakeList:22
  	descriptionList.add("Interference concurrent  f1 + f2");  // > CustomCode.MakeList:23
  	functionList.add("a*(sin(b*y-t)+sin(-c*y-t))");  // > CustomCode.MakeList:24
  	descriptionList.add("Interference countercurrent  f1 + f2");  // > CustomCode.MakeList:25
  	functionList.add("a*(sin(b*x-t)+sin(c*y-t))");  // > CustomCode.MakeList:26
  	descriptionList.add("Interference perpendicular  f1 + f2");  // > CustomCode.MakeList:27
  	functionList.add("a*(sin(b*(y-(c-pi)*x)-t)+sin(b*(y+(c-pi)*x)-t))");  // > CustomCode.MakeList:28
  	descriptionList.add("Interference  angle < 90 adjustable (c)");  // > CustomCode.MakeList:29
  	functionList.add("a*(sin(b*(y-(c-pi)*x)-t)+sin(b*(-y+(c-pi)*x)-t))");  // > CustomCode.MakeList:30
  	descriptionList.add("Interference angle > 90 adjustable (c)");  // > CustomCode.MakeList:31
  	functionList.add("a*sin(b*(x*x+y*y)-t)");  // > CustomCode.MakeList:32
  	descriptionList.add("Radial wave outward");  // > CustomCode.MakeList:33
  	functionList.add("a*sin(b*(x*x+y*y)+t)");  // > CustomCode.MakeList:34
  	descriptionList.add("radial wave inward");  // > CustomCode.MakeList:35
  	  // > CustomCode.MakeList:36
          functionList.add("a*(sin(b*(x^2+y^2)-t)+sin(b*(x^2+y^2)+t))");  // > CustomCode.MakeList:37
  	descriptionList.add("Standing radial wave");  // > CustomCode.MakeList:38
  	  // > CustomCode.MakeList:39
          functionList.add("0.4*a*sin(b*(x^2+y^2)-t)/sqrt(0.1+x^2+y^2)");  // > CustomCode.MakeList:40
  	descriptionList.add("Surface wave outward");  // > CustomCode.MakeList:41
            // > CustomCode.MakeList:42
          functionList.add("0.2*a*sin(b*(x^2+y^2)-t)/(0.1+x^2+y^2)");  // > CustomCode.MakeList:43
  	descriptionList.add("Spatial wave outward");  // > CustomCode.MakeList:44
  	*/  // > CustomCode.MakeList:45
  	  // > CustomCode.MakeList:46
  	functionList.push("a*sin(b*x-t)");  // > CustomCode.MakeList:47
  	descriptionList.push("Plane wave x");  // > CustomCode.MakeList:48
      // > CustomCode.MakeList:49
  	functionList.push("a*sin(b*y-t)");  // > CustomCode.MakeList:50
  	descriptionList.push("Plane wave y");  // > CustomCode.MakeList:51
          functionList.push("0.3*sin(6*pi*a*(b*x+c*y)/sqrt(b*b+c*c)-t)");  // > CustomCode.MakeList:52
  	descriptionList.push("Plane wave direction adjustable");  // > CustomCode.MakeList:53
   	functionList.push("a*(sin(b*y-t)+sin(b*y-t))");  // > CustomCode.MakeList:54
   	descriptionList.push("Interference concurrent f1");  // > CustomCode.MakeList:55
          functionList.push("a*(cos(b*y-t)+cos(-b*y-t))");  // > CustomCode.MakeList:56
  	descriptionList.push("Interference countercurrent f1");  // > CustomCode.MakeList:57
   	functionList.push("a*(sin(b*y-t)+sin(c*y-t))");  // > CustomCode.MakeList:58
  	descriptionList.push("Interference concurrent f1 + f2");  // > CustomCode.MakeList:59
  	functionList.push("a*(sin(b*y-t)+sin(-c*y-t))");  // > CustomCode.MakeList:60
  	descriptionList.push("Interference countercurrent f1 + f2");  // > CustomCode.MakeList:61
  	functionList.push("a*(sin(b*x-t)+sin(c*y-t))");  // > CustomCode.MakeList:62
  	descriptionList.push("Interference perpendicular f1 + f2");  // > CustomCode.MakeList:63
  	functionList.push("a*(sin(b*(y-(c-pi)*x)-t)+sin(b*(y+(c-pi)*x)-t))");  // > CustomCode.MakeList:64
  	descriptionList.push("Interference  angle < 90 adjustable (c)");  // > CustomCode.MakeList:65
  	functionList.push("a*(sin(b*(y-(c-pi)*x)-t)+sin(b*(-y+(c-pi)*x)-t))");  // > CustomCode.MakeList:66
  	descriptionList.push("Interference angle > 90 adjustable (c)");  // > CustomCode.MakeList:67
  	functionList.push("a*sin(b*(x*x+y*y)-t)");  // > CustomCode.MakeList:68
  	descriptionList.push("Radial wave outward");  // > CustomCode.MakeList:69
  	functionList.push("a*sin(b*(x*x+y*y)+t)");  // > CustomCode.MakeList:70
  	descriptionList.push("radial wave inward");  // > CustomCode.MakeList:71
  	  // > CustomCode.MakeList:72
          functionList.push("a*(sin(b*(x^2+y^2)-t)+sin(b*(x^2+y^2)+t))");  // > CustomCode.MakeList:73
  	descriptionList.push("Standing radial wave");  // > CustomCode.MakeList:74
  	  // > CustomCode.MakeList:75
          functionList.push("0.4*a*sin(b*(x^2+y^2)-t)/sqrt(0.1+x^2+y^2)");  // > CustomCode.MakeList:76
  	descriptionList.push("Surface wave outward");  // > CustomCode.MakeList:77
            // > CustomCode.MakeList:78
          functionList.push("0.2*a*sin(b*(x^2+y^2)-t)/(0.1+x^2+y^2)");  // > CustomCode.MakeList:79
  	descriptionList.push("Spatial wave outward");  // > CustomCode.MakeList:80
  }  // > CustomCode.MakeList:81

  function functionSelect () {  // > CustomCode.functionSelect:1
    var opts = _view.functionList.getProperty("SelectedOptions");  // array of options  // > CustomCode.functionSelect:2
      var option = (opts.length > 0)? opts[0]:""; // selected option   // > CustomCode.functionSelect:3
      // > CustomCode.functionSelect:4
    if (option=="Plane wave x") { //work  // > CustomCode.functionSelect:5
      fTyp = a.toFixed(3)+"*sin("+b.toFixed(3)+"*x-"+t.toFixed(3)+")";  // > CustomCode.functionSelect:6
  fTypold = "a*sin(b*x-t)";  // > CustomCode.functionSelect:7
  work=true; // run all the clever replace code  // > CustomCode.functionSelect:8
    } else if (option=="Plane wave y") { //work  // > CustomCode.functionSelect:9
      fTyp = a.toFixed(3)+"*sin("+b.toFixed(3)+"*y-"+t.toFixed(3)+")";  // > CustomCode.functionSelect:10
  fTypold = "a*sin(b*y-t)";  // > CustomCode.functionSelect:11
  work=true;  // > CustomCode.functionSelect:12
    } else if (option=="Plane wave direction adjustable") { //special  // > CustomCode.functionSelect:13
      fTyp = "0.3*sin(6*pi*"+a.toFixed(3)+"*("+b.toFixed(3)+"*x+"+c.toFixed(3)+"*y)/sqrt("+b*b.toFixed(3)+"+"+c*c.toFixed(3)+")-"+t.toFixed(3)+")";  // > CustomCode.functionSelect:14
  fTypold = "0.3*sin(6*pi*a*(b*x+c*y)/sqrt(b*b+c*c)-t)";  // > CustomCode.functionSelect:15
  work=false; // run the hard code fTyp  // > CustomCode.functionSelect:16
    } else if (option=="Interference concurrent f1") {  // > CustomCode.functionSelect:17
      fTyp = a.toFixed(3)+"*(sin("+b.toFixed(3)+"*y-"+t.toFixed(3)+")+sin("+b.toFixed(3)+"*y-"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:18
  fTypold ="a*(sin(b*y-t)+sin(b*y-t))";  // > CustomCode.functionSelect:19
  work=true;  // > CustomCode.functionSelect:20
    } else if (option=="Interference countercurrent f1") {  // > CustomCode.functionSelect:21
      fTyp = a.toFixed(3)+"*(cos("+b.toFixed(3)+"*y-"+t.toFixed(3)+")+cos(-"+b.toFixed(3)+"*y-"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:22
  fTypold ="a*(cos(b*y-t)+cos(-b*y-t))";  // > CustomCode.functionSelect:23
  work=true;  // > CustomCode.functionSelect:24
    } else if (option=="Interference concurrent f1 + f2") {  // > CustomCode.functionSelect:25
      fTyp = a.toFixed(3)+"*(sin("+b.toFixed(3)+"*y-"+t.toFixed(3)+")+sin("+c.toFixed(3)+"*y-"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:26
  fTypold ="a*(sin(b*y-t)+sin(c*y-t))";  // > CustomCode.functionSelect:27
  work=true;  // > CustomCode.functionSelect:28
    } else if (option=="Interference countercurrent f1 + f2") {  // > CustomCode.functionSelect:29
      fTyp = a.toFixed(3)+"*(sin("+b.toFixed(3)+"*y-"+t.toFixed(3)+")+sin(-"+c.toFixed(3)+"*y-"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:30
  fTypold ="a*(sin(b*y-t)+sin(-c*y-t))";  // > CustomCode.functionSelect:31
  work=true;  // > CustomCode.functionSelect:32
    } else if (option=="Interference perpendicular f1 + f2") {  // > CustomCode.functionSelect:33
      fTyp = a.toFixed(3)+"*(sin("+b.toFixed(3)+"*x-"+t.toFixed(3)+")+sin("+c.toFixed(3)+"*y-"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:34
  fTypold ="a*(sin(b*x-t)+sin(c*y-t))";  // > CustomCode.functionSelect:35
  work=true;  // > CustomCode.functionSelect:36
  fTypshow=true; //sliders show  // > CustomCode.functionSelect:37
    } else if (option=="Interference angle &lt; 90 adjustable (c)") {  // > CustomCode.functionSelect:38
      fTyp = a.toFixed(3)+"*(sin("+b.toFixed(3)+"*(y-("+c.toFixed(3)+"-pi)*x)-"+t.toFixed(3)+")+sin("+b.toFixed(3)+"*(y+("+c.toFixed(3)+"-pi)*x)-"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:39
  fTypold ="a*(sin(b*(y-(c-pi)*x)-t)+sin(b*(y+(c-pi)*x)-t))";  // > CustomCode.functionSelect:40
  work=false;  // > CustomCode.functionSelect:41
  fTypshow=true; //sliders show  // > CustomCode.functionSelect:42
  //alert();  // > CustomCode.functionSelect:43
    } else if (option=="Interference angle &gt; 90 adjustable (c)") {  // > CustomCode.functionSelect:44
      fTyp = a.toFixed(3)+"*(sin("+b.toFixed(3)+"*(y-("+c.toFixed(3)+"-pi)*x)-"+t.toFixed(3)+")+sin("+b.toFixed(3)+"*(-y+("+c.toFixed(3)+"-pi)*x)-"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:45
  fTypold ="a*(sin(b*(y-(c-pi)*x)-t)+sin(b*(-y+(c-pi)*x)-t))";  // > CustomCode.functionSelect:46
  work=false;  // > CustomCode.functionSelect:47
    } else if (option=="Radial wave outward") {  // > CustomCode.functionSelect:48
      fTyp = a.toFixed(3)+"*sin("+b.toFixed(3)+"*(x*x+y*y)-"+t.toFixed(3)+")";  // > CustomCode.functionSelect:49
  fTypold ="a*sin(b*(x*x+y*y)-t)";  // > CustomCode.functionSelect:50
  work=false;  // > CustomCode.functionSelect:51
    } else if (option=="Radial wave inward") {  // > CustomCode.functionSelect:52
      fTyp = a.toFixed(3)+"*sin("+b.toFixed(3)+"*(x*x+y*y)+"+t.toFixed(3)+")";  // > CustomCode.functionSelect:53
  fTypold ="a*sin(b*(x*x+y*y)+t)";  // > CustomCode.functionSelect:54
  work=false;  // > CustomCode.functionSelect:55
    } else if (option=="Standing radial wave") {  // > CustomCode.functionSelect:56
      fTyp = a.toFixed(3)+"*(sin("+b.toFixed(3)+"*(x^2+y^2)-"+t.toFixed(3)+")+sin("+b.toFixed(3)+"*(x^2+y^2)+"+t.toFixed(3)+"))";  // > CustomCode.functionSelect:57
  fTypold ="a*(sin(b*(x^2+y^2)-t)+sin(b*(x^2+y^2)+t))";  // > CustomCode.functionSelect:58
  work=false;  // > CustomCode.functionSelect:59
    } else if (option=="Surface wave outward") {  // > CustomCode.functionSelect:60
      fTyp = "0.4*"+a.toFixed(3)+"*sin("+b.toFixed(3)+"*(x^2+y^2)-"+t.toFixed(3)+")/sqrt(0.1+x^2+y^2)";  // > CustomCode.functionSelect:61
  fTypold ="0.4*a*sin(b*(x^2+y^2)-t)/sqrt(0.1+x^2+y^2)";  // > CustomCode.functionSelect:62
  work=false;  // > CustomCode.functionSelect:63
    } else if (option=="Spatial wave outward"){  // > CustomCode.functionSelect:64
      fTyp = "0.2*"+a.toFixed(3)+"*sin("+b.toFixed(3)+"*(x^2+y^2)-"+t.toFixed(3)+")/(0.1+x^2+y^2)";  // > CustomCode.functionSelect:65
  fTypold ="0.2*a*sin(b*(x^2+y^2)-t)/(0.1+x^2+y^2)";  // > CustomCode.functionSelect:66
  work=true;  // > CustomCode.functionSelect:67
    }  // > CustomCode.functionSelect:68
    else if (option=="user defined"){  // > CustomCode.functionSelect:69
      fTypshow=true;    // > CustomCode.functionSelect:70
      work=true;  // > CustomCode.functionSelect:71
      //fTyp = fTyp;  // > CustomCode.functionSelect:72
  //fTyp = fTyp.replace("t",_view._format(t,"0.00"));  // > CustomCode.functionSelect:73
    }  // > CustomCode.functionSelect:74
    //  // > CustomCode.functionSelect:75
    else if (option=="show plane"){  // > CustomCode.functionSelect:76
      xylevel = true;   // > CustomCode.functionSelect:77
    }  // > CustomCode.functionSelect:78
    else if (option=="hide plane"){  // > CustomCode.functionSelect:79
      xylevel = false;   // > CustomCode.functionSelect:80
      }  // > CustomCode.functionSelect:81
  //["Plane Wave x", "Plane Wave y", "Plane Wave Direction Adjustable", "Interference Concurrent f1 + f2", "Interference Countercurrent f1 + f2", "Interference Perpendicular f1 + f2", "Interference Angle &lt; 90 Adjustable (c)", "Interference Angle &gt; 90 Adjustable (c)", "Radial Wave Outward", "Radial Wave Inward", "Standing Radial Wave", "Surface Wave Outward", "Spatial Wave Outward", "Plane in Space", "Rotational Paraboloid", "General Paraboloid", "Parabolic Saddle", "Sphere", "Rotational Ellipsoid", "General Ellipsoid", "Rotational Hyperboloid", "General Hyperboloid", "Elliptic-hyperbolic Saddle", "Hyperbolic Saddle"]  // > CustomCode.functionSelect:82
  //combining with function_3D  // > CustomCode.functionSelect:83
    else if (option=="Plane in Space") {  // > CustomCode.functionSelect:84
    //  fTyp = "cos("+t+")*(("+b+"*x)+("+a+"*y))-"+c;  // > CustomCode.functionSelect:85
       fTyp = "sin("+t+")*(("+b.toFixed(3)+"*x)+("+a.toFixed(3)+"*y))-"+c.toFixed(3);  // > CustomCode.functionSelect:86
   //   fTypDisp = "cos(t)*(b*x+a*y)-c";  // > CustomCode.functionSelect:87
     fTypold = "sin(t)*(b*x+a*y)-c"; //will not work because of cos has c  // > CustomCode.functionSelect:88
    }  // > CustomCode.functionSelect:89
      // > CustomCode.functionSelect:90
    else if (option=="Rotational Paraboloid") {  // > CustomCode.functionSelect:91
      //fTyp = a+"*cos("+t+")*(x*x+y*y)-"+c;  // > CustomCode.functionSelect:92
      //fTypDisp = "a*cos(t)*(x^2+y^2)-c";  // > CustomCode.functionSelect:93
      fTyp = a.toFixed(3)+"*sin("+t+")*(x*x+y*y)-"+c.toFixed(3);  // > CustomCode.functionSelect:94
      fTypold = "a*sin(t)*(x^2+y^2)-c";  // > CustomCode.functionSelect:95
        // > CustomCode.functionSelect:96
    }  // > CustomCode.functionSelect:97
      // > CustomCode.functionSelect:98
    else if (option=="General Paraboloid") {  // > CustomCode.functionSelect:99
    //  fTyp = "cos("+t+")*(("+b+"*x)*("+b+"*x)+("+a+"*y)*("+a+"*y))-"+c;  // > CustomCode.functionSelect:100
    //  fTypDisp = "cos(t)*((b*x)^2+(a*y)^2)-c";  // > CustomCode.functionSelect:101
       fTyp = "sin("+t+")*(("+b.toFixed(3)+"*x)*("+b+"*x)+("+a.toFixed(3)+"*y)*("+a.toFixed(3)+"*y))-"+c.toFixed(3);  // > CustomCode.functionSelect:102
      fTypold = "sin(t)*((b*x)^2+(a*y)^2)-c";  // > CustomCode.functionSelect:103
        // > CustomCode.functionSelect:104
    } else if (option=="Parabolic Saddle") {  // > CustomCode.functionSelect:105
    //  fTyp = "cos("+t+")*(("+b+"*x)*("+b+"*x)-("+a+"*y)*("+a+"*y))-"+c;  // > CustomCode.functionSelect:106
    //  fTypDisp = "cos(t)*((b*x)^2-(a*y)^2)-c";  // > CustomCode.functionSelect:107
        fTyp = "sin("+t+")*(("+b.toFixed(3)+"*x)*("+b.toFixed(3)+"*x)-("+a.toFixed(3)+"*y)*("+a.toFixed(3)+"*y))-"+c.toFixed(3);  // > CustomCode.functionSelect:108
      fTypold = "sin(t)*((b*x)^2-(a*y)^2)-c";  // > CustomCode.functionSelect:109
        // > CustomCode.functionSelect:110
    } else if (option=="Sphere") {  // > CustomCode.functionSelect:111
    //  fTyp = "4*("+a*a+"*abs(cos("+t+"))-0.04*x*x-0.04*y*y)^0.5";  // > CustomCode.functionSelect:112
    //  fTypDisp = "4*sqrt((a^2)*abs(cos(t))-0.04*(x^2)-0.04*(y^2))";  // > CustomCode.functionSelect:113
     // fTyp = "4*("+a.toFixed(3)*a.toFixed(3)+"*abs(sin("+t+"))-0.04*x*x-0.04*y*y)^0.5"; //abs will not work  // > CustomCode.functionSelect:114
     // fTypold = "4*sqrt((a^2)*abs(sin(t))-0.04*(x^2)-0.04*(y^2))";  // > CustomCode.functionSelect:115
        fTyp = "4*("+a.toFixed(3)*a.toFixed(3)+"*(sin("+t+"))-0.04*x*x-0.04*y*y)^0.5"; //abs will not work  // > CustomCode.functionSelect:116
      fTypold = "4*((a^2)*(sin(t))-0.04*(x^2)-0.04*(y^2))^0.5";  // > CustomCode.functionSelect:117
      // > CustomCode.functionSelect:118
    } else if (option=="Rotational Ellipsoid") {  // > CustomCode.functionSelect:119
    //  fTyp = "("+c*c+"-(("+c+"/"+a+")*x*cos("+t+"))*(("+c+"/"+a+")*x*cos("+t+"))-(("+c+"/"+a+")*y*cos("+t+"))*(("+c+"/"+a+")*y*cos("+t+")))^0.5";  // > CustomCode.functionSelect:120
     // fTypDisp = "sqrt((c^2)-((c/a)*x*cos(t))^2 - ((c/a)*y*cos(t))^2)";  // > CustomCode.functionSelect:121
    //  fTyp = "pow("+c.toFixed(3)*c.toFixed(3)+"-(("+c.toFixed(3)+"/"+a.toFixed(3)+")*x*sin("+t+"))*(("+c.toFixed(3)+"/"+a.toFixed(3)+")*x*sin("+t+"))-(("+c.toFixed(3)+"/"+a.toFixed(3)+")*y*sin("+t+"))*(("+c.toFixed(3)+"/"+a.toFixed(3)+")*y*sin("+t+")),0.5)";  // > CustomCode.functionSelect:122
     fTyp = "pow(("+c.toFixed(3)*c.toFixed(3)+"-(("+c.toFixed(3)+"/"+a.toFixed(3)+")*x*sin("+t+"))*(("+c.toFixed(3)+"/"+a.toFixed(3)+")*x*sin("+t+"))-(("+c.toFixed(3)+"/"+a.toFixed(3)+")*y*sin("+t+"))*(("+c.toFixed(3)+"/"+a.toFixed(3)+")*y*sin("+t+"))),0.5)";  // > CustomCode.functionSelect:123
   fTypold = "pow(((c^2)-((c/a)*x*sin(t))^2 - ((c/a)*y*sin(t))^2),0.5)"; // only need this to work  // > CustomCode.functionSelect:124
     // > CustomCode.functionSelect:125
     // > CustomCode.functionSelect:126
   } else if (option=="General Ellipsoid") {  // > CustomCode.functionSelect:127
     fTyp = "pow(("+c*c+"-(("+c+"/"+a+")*x)*(("+c+"/"+a+")*x)-(("+c+"/"+b+")*y*cos("+t+"))*(("+c+"/"+b+")*y*cos("+t+"))),0.5)";  // > CustomCode.functionSelect:128
     // fTypDisp = "sqrt((c^2)-((c/a)*x)^2 - ((c/b)*y*cos(t))^2)";  // > CustomCode.functionSelect:129
     // fTyp = "("+c*c+"-(("+c+"/"+a+")*x)*(("+c+"/"+a+")*x)-(("+c+"/"+b+")*y*cos("+t+"))*(("+c+"/"+b+")*y*cos("+t+")))^0.5";  // > CustomCode.functionSelect:130
      fTypold = "pow((c^2)-((c/a)*x)^2 - ((c/b)*y*sin(t)),0.5)";  // > CustomCode.functionSelect:131
        // > CustomCode.functionSelect:132
    } else if (option=="Rotational Hyperboloid") {  // > CustomCode.functionSelect:133
     // fTyp = "(("+a+"*cos("+t+")*cos("+t+")+x*x+y*y)^0.5)-"+c;  // > CustomCode.functionSelect:134
     // fTypDisp = "sqrt(a*(cos(t))^2+x^2+y^2)-c";  // > CustomCode.functionSelect:135
      fTyp = "pow(("+a+"*sin("+t+")*sin("+t+")+x*x+y*y),0.5)-"+c;  // > CustomCode.functionSelect:136
      fTypold = "pow((a*(sin(t))^2+x^2+y^2),0.5)-c";  // > CustomCode.functionSelect:137
        // > CustomCode.functionSelect:138
    } else if (option=="General Hyperboloid") {  // > CustomCode.functionSelect:139
     // fTyp = "(("+a*a+"+"+b+"*x*x+"+c+"*y*y)^0.5)-"+p;  // > CustomCode.functionSelect:140
     // fTypDisp = "sqrt((a^2)+b*(x^2)+c*(y^2))-p";  // > CustomCode.functionSelect:141
       fTyp = "pow(("+a*a+"+"+b+"*x*x+"+c+"*y*y),0.5)";  // > CustomCode.functionSelect:142
      fTypold = "pow((a^2)+b*(x^2)+c*(y^2),0.5)";  // > CustomCode.functionSelect:143
        // > CustomCode.functionSelect:144
    } else if (option=="Elliptic-hyperbolic Saddle") {  // > CustomCode.functionSelect:145
     // fTyp = "("+a*a+"-cos("+t+")*("+b+"*x*x-"+c+"*y*y))^0.5";  // > CustomCode.functionSelect:146
     // fTypDisp = "sqrt((a^2)-cos(t)*(b*(x^2)-c*(y^2))";  // > CustomCode.functionSelect:147
       fTyp = "pow("+a*a+"-sin("+t+")*("+b+"*x*x-"+c+"*y*y)),0.5)";  // > CustomCode.functionSelect:148
      fTypold = "pow((a^2)-sin(t)*(b*(x^2)-c*(y^2)),0.5)";  // > CustomCode.functionSelect:149
        // > CustomCode.functionSelect:150
    } else if (option=="Hyperbolic Saddle") {  // > CustomCode.functionSelect:151
     // fTyp = "cos("+t+")*x*y";  // > CustomCode.functionSelect:152
    //  fTypDisp = "cos(t)*x*y";  // > CustomCode.functionSelect:153
        fTyp = "sin("+t+")*x*y";  // > CustomCode.functionSelect:154
      fTypold = "sin(t)*x*y";  // > CustomCode.functionSelect:155
        // > CustomCode.functionSelect:156
    }  // > CustomCode.functionSelect:157
      // > CustomCode.functionSelect:158
    else {  // > CustomCode.functionSelect:159
      //do nothing to fTyp  // > CustomCode.functionSelect:160
      option = ""; // so that fTyp can be edited lookang  // > CustomCode.functionSelect:161
      }  // > CustomCode.functionSelect:162
       // > CustomCode.functionSelect:163
     //another if statement to check what to use  // > CustomCode.functionSelect:164
     if (work==true){  // > CustomCode.functionSelect:165
       // change to fTypold to readable form  // > CustomCode.functionSelect:166
    fTypolddisplay = fTypold;  // > CustomCode.functionSelect:167
  fTypolddisplay = fTypolddisplay.replace("a",_view._format(a,"0.00")); //must be same name to replace  // > CustomCode.functionSelect:168
  fTypolddisplay = fTypolddisplay.replace("b",_view._format(b,"0.00"));  // > CustomCode.functionSelect:169
  fTypolddisplay = fTypolddisplay.replace("c",_view._format(c,"0.00"));  // > CustomCode.functionSelect:170
       }  // > CustomCode.functionSelect:171
       else if (work==false){  // > CustomCode.functionSelect:172
     fTypolddisplay = fTyp; // pass hard coded that was working    // > CustomCode.functionSelect:173
     }  // > CustomCode.functionSelect:174
      // > CustomCode.functionSelect:175
      // > CustomCode.functionSelect:176
  }  // > CustomCode.functionSelect:177

  function paramReset () {  // > CustomCode.Reset:1
    //a=0.3;  // > CustomCode.Reset:2
    b=Math.PI;  // > CustomCode.Reset:3
    c=Math.PI;  // > CustomCode.Reset:4
    p=1.0;  // > CustomCode.Reset:5
    t=0.0;  // > CustomCode.Reset:6
  }  // > CustomCode.Reset:7

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Initialize"]) return;
    a=0.3;  // > Initialization.Initialize:1
    b=Math.PI;  // > Initialization.Initialize:2
    c=Math.PI;  // > Initialization.Initialize:3
    max=1;  // > Initialization.Initialize:4
    Listen();  // > Initialization.Initialize:5
    //initFunctions();  // > Initialization.Initialize:6
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["fTypold"]) return;
     //fTypolddisplay = fTypold;  // > Initialization.fTypold:1
     //fTypolddisplay = fTypold.replace("a",_view._format(a,"0.00"));  // > Initialization.fTypold:2
    //fTypolddisplay = fTypold.replace("b",_view._format(b,"0.00"));  // > Initialization.fTypold:3
    //fTypolddisplay = fTypold.replace("c",_view._format(c,"0.00"));  // > Initialization.fTypold:4
    //fTypolddisplay = fTypold.replace("t",_view._format(t,"0.00"));  // > Initialization.fTypold:5
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Running Time"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["functionSelect"]) return;
      // change to fTypold to readable form  // > FixedRelations.functionSelect:1
      if (work==true){  // > FixedRelations.functionSelect:2
      fTypolddisplay = fTypold;  // > FixedRelations.functionSelect:3
    fTypolddisplay = fTypolddisplay.replace(/a/g,_view._format(a,"0.00")); //must be same name to replace  // > FixedRelations.functionSelect:4
    fTypolddisplay = fTypolddisplay.replace(/b/g,_view._format(b,"0.00")); // need /g in case a is used more than once  // > FixedRelations.functionSelect:5
    fTypolddisplay = fTypolddisplay.replace(/c/g,_view._format(c,"0.00"));  // > FixedRelations.functionSelect:6
    //fTypolddisplay = fTypolddisplay.replace("c",_view._format(c,"0.00"));  // > FixedRelations.functionSelect:7
    // to solve sqrt and t where sqrt is replace and become sqr  // > FixedRelations.functionSelect:8
    //var substring = "sqrt";  // > FixedRelations.functionSelect:9
    //if (fTypolddisplay.includes("sqrt");  // > FixedRelations.functionSelect:10
    fTypolddisplay = fTypolddisplay.replace(/t/g,_view._format(t,"0.00")); //http://codersblock.com/blog/javascript-string-replace-magic/  // > FixedRelations.functionSelect:11
    //fTypolddisplay = fTypolddisplay.replace("sqr","sqrt"));  // > FixedRelations.functionSelect:12
    }  // > FixedRelations.functionSelect:13
    else if (work==false){  // > FixedRelations.functionSelect:14
      functionSelect(); // to let old code run  // > FixedRelations.functionSelect:15
    //fTypolddisplay = fTyp;  // > FixedRelations.functionSelect:16
     }  // > FixedRelations.functionSelect:17
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Running Time") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(p*0.1);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (p*0.1===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(p*0.1);
      __eventSolver.setInternalStepSize(p*0.1);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "Simulation Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new e_Waves_3Dwee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.functionList.linkProperty("Options",  function() { return ["","show plane","hide plane","user defined","Plane wave x","Plane wave y","Plane wave direction adjustable","Interference concurrent f1 + f2","Interference countercurrent f1 + f2","Interference perpendicular f1 + f2","Interference angle &lt; 90 adjustable (c)","Interference angle &gt; 90 adjustable (c)","Radial wave outward","Radial wave inward","Standing radial wave","Surface wave outward","Spatial wave outward","","Plane in Space","Rotational Paraboloid","General Paraboloid", "Parabolic Saddle", "Sphere", "Rotational Ellipsoid", "General Ellipsoid", "Rotational Hyperboloid", "General Hyperboloid", "Elliptic-hyperbolic Saddle", "Hyperbolic Saddle"]; } ); // Simulation Page linking property 'Options' for element 'functionList'
          _view.functionList.setAction("OnChange", function(_data,_info) {
  var opts = _view.functionList.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  functionSelect();

}); // Simulation Page setting action 'OnChange' for element 'functionList'
          _view.functionList.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'functionList'
          _view.playPause.setAction("OffClick", _pause); // Simulation Page setting action 'OffClick' for element 'playPause'
          _view.playPause.linkProperty("State",  function() { return _isPaused; } ); // Simulation Page linking property 'State' for element 'playPause'
          _view.playPause.setAction("OnClick", _play); // Simulation Page setting action 'OnClick' for element 'playPause'
          _view.playPause.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'playPause'
          _view.resetButton.setAction("OnClick", _reset); // Simulation Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'resetButton'
          _view.timeLabel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'timeLabel'
          _view.time.linkProperty("Value",  function() { return t; }, function(_v) { t = _v; } ); // Simulation Page linking property 'Value' for element 'time'
          _view.time.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'time'
          _view.xyLevel.setAction("OnCheckOff", function(_data,_info) {
  xylevel = false;

}); // Simulation Page setting action 'OnCheckOff' for element 'xyLevel'
          _view.xyLevel.setAction("OnCheckOn", function(_data,_info) {
  xylevel = true;

}); // Simulation Page setting action 'OnCheckOn' for element 'xyLevel'
          _view.xyLevel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'xyLevel'
          _view.formula.linkProperty("Display",  function() { return fTypshow?"inline-block":"none"; } ); // Simulation Page linking property 'Display' for element 'formula'
          _view.selection.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'selection'
          _view.functionBox.linkProperty("Value",  function() { return fTypold; }, function(_v) { fTypold = _v; } ); // Simulation Page linking property 'Value' for element 'functionBox'
          _view.functionBox.linkProperty("Editable",  function() { return work; }, function(_v) { work = _v; } ); // Simulation Page linking property 'Editable' for element 'functionBox'
          _view.functionBox.setAction("OnChange", function(_data,_info) {
  //functionSelect();
  //_view._update();

}); // Simulation Page setting action 'OnChange' for element 'functionBox'
          _view.sliderContainer.linkProperty("Display",  function() { return fTypshow?"inline-block":"none"; } ); // Simulation Page linking property 'Display' for element 'sliderContainer'
          _view.labelA.linkProperty("Text",  function() { return "a = "+a.toFixed(3); } ); // Simulation Page linking property 'Text' for element 'labelA'
          _view.labelA.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'labelA'
          _view.sliderA.linkProperty("Value",  function() { return a; }, function(_v) { a = _v; } ); // Simulation Page linking property 'Value' for element 'sliderA'
          _view.sliderA.setAction("OnChange", function(_data,_info) {
  functionSelect();
  _view._update();

}); // Simulation Page setting action 'OnChange' for element 'sliderA'
          _view.labelB.linkProperty("Text",  function() { return "b = "+b.toFixed(3); } ); // Simulation Page linking property 'Text' for element 'labelB'
          _view.labelB.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'labelB'
          _view.sliderB.linkProperty("Maximum",  function() { return 6*Math.PI; } ); // Simulation Page linking property 'Maximum' for element 'sliderB'
          _view.sliderB.linkProperty("Value",  function() { return b; }, function(_v) { b = _v; } ); // Simulation Page linking property 'Value' for element 'sliderB'
          _view.sliderB.setAction("OnChange", function(_data,_info) {
  functionSelect();
  _view._update();

}); // Simulation Page setting action 'OnChange' for element 'sliderB'
          _view.labelC.linkProperty("Text",  function() { return "c = "+c.toFixed(3); } ); // Simulation Page linking property 'Text' for element 'labelC'
          _view.labelC.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'labelC'
          _view.sliderC2.linkProperty("Maximum",  function() { return 6*Math.PI; } ); // Simulation Page linking property 'Maximum' for element 'sliderC2'
          _view.sliderC2.linkProperty("Value",  function() { return c; }, function(_v) { c = _v; } ); // Simulation Page linking property 'Value' for element 'sliderC2'
          _view.sliderC2.setAction("OnChange", function(_data,_info) {
  functionSelect();
  _view._update();

}); // Simulation Page setting action 'OnChange' for element 'sliderC2'
          _view.labelP.linkProperty("Text",  function() { return "p = "+p.toFixed(3); } ); // Simulation Page linking property 'Text' for element 'labelP'
          _view.labelP.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation Page linking property 'Font' for element 'labelP'
          _view.sliderP.linkProperty("Value",  function() { return p; }, function(_v) { p = _v; } ); // Simulation Page linking property 'Value' for element 'sliderP'
          _view.sliderP.setAction("OnChange", function(_data,_info) {
  functionSelect();
  _view._update();

}); // Simulation Page setting action 'OnChange' for element 'sliderP'
          _view.xyLevel2.linkProperty("Visibility",  function() { return xylevel; }, function(_v) { xylevel = _v; } ); // Simulation Page linking property 'Visibility' for element 'xyLevel2'
          _view.spaceArea2.linkProperty("FunctionZ",  function() { return fTypolddisplay; }, function(_v) { fTypolddisplay = _v; } ); // Simulation Page linking property 'FunctionZ' for element 'spaceArea2'
          _view.spaceArea2.linkProperty("NumPoints2",  function() { return pointNum; }, function(_v) { pointNum = _v; } ); // Simulation Page linking property 'NumPoints2' for element 'spaceArea2'
          _view.spaceArea2.linkProperty("NumPoints1",  function() { return pointNum; }, function(_v) { pointNum = _v; } ); // Simulation Page linking property 'NumPoints1' for element 'spaceArea2'
          _view.spaceArea.linkProperty("FunctionZ",  function() { return fTyp; }, function(_v) { fTyp = _v; } ); // Simulation Page linking property 'FunctionZ' for element 'spaceArea'
          _view.spaceArea.linkProperty("NumPoints2",  function() { return pointNum; }, function(_v) { pointNum = _v; } ); // Simulation Page linking property 'NumPoints2' for element 'spaceArea'
          _view.spaceArea.linkProperty("NumPoints1",  function() { return pointNum; }, function(_v) { pointNum = _v; } ); // Simulation Page linking property 'NumPoints1' for element 'spaceArea'
          _view.textField3.linkProperty("Value",  function() { return fTypolddisplay; }, function(_v) { fTypolddisplay = _v; } ); // Simulation Page linking property 'Value' for element 'textField3'
          _view.textField.linkProperty("Value",  function() { return fTypold; }, function(_v) { fTypold = _v; } ); // Simulation Page linking property 'Value' for element 'textField'
          _view.textField2.linkProperty("Value",  function() { return fTyp; }, function(_v) { fTyp = _v; } ); // Simulation Page linking property 'Value' for element 'textField2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function e_Waves_3Dwee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = e_Waves_3Dwee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Description','./e_Waves_3Dwee_Intro_1.html');
  _view._addDescriptionPage('Visualization','./e_Waves_3Dwee_Intro_2.html');
  _view._addDescriptionPage('Functions','./e_Waves_3Dwee_Intro_3.html');
  _view._addDescriptionPage('Experiments','./e_Waves_3Dwee_Intro_4.html');
  _view._addDescriptionPage('Authors','./e_Waves_3Dwee_Intro_5.html');

  return _view;
} // end of main function

function e_Waves_3Dwee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"panelButtons", _view._topFrame) // EJsS HtmlView.Simulation Page: declaration of element 'panelButtons'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"functionList", _view.panelButtons) // EJsS HtmlView.Simulation Page: declaration of element 'functionList'
      .setProperty("Background","white") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'functionList'
      .setProperty("Foreground","black") // EJsS HtmlView.Simulation Page: setting property 'Foreground' for element 'functionList'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPause", _view.panelButtons) // EJsS HtmlView.Simulation Page: declaration of element 'playPause'
      .setProperty("TextOn","▶") // EJsS HtmlView.Simulation Page: setting property 'TextOn' for element 'playPause'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.Simulation Page: setting property 'TextOff' for element 'playPause'
      .setProperty("Tooltip","Play/Pause the simulation") // EJsS HtmlView.Simulation Page: setting property 'Tooltip' for element 'playPause'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.panelButtons) // EJsS HtmlView.Simulation Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset the simulation") // EJsS HtmlView.Simulation Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.Simulation Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"timeLabel", _view.panelButtons) // EJsS HtmlView.Simulation Page: declaration of element 'timeLabel'
      .setProperty("Text","t = ") // EJsS HtmlView.Simulation Page: setting property 'Text' for element 'timeLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"time", _view.panelButtons) // EJsS HtmlView.Simulation Page: declaration of element 'time'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'time'
      .setProperty("Format","t = 0.00") // EJsS HtmlView.Simulation Page: setting property 'Format' for element 'time'
      .setProperty("Editable",false) // EJsS HtmlView.Simulation Page: setting property 'Editable' for element 'time'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"xyLevel", _view.panelButtons) // EJsS HtmlView.Simulation Page: declaration of element 'xyLevel'
      .setProperty("Checked",true) // EJsS HtmlView.Simulation Page: setting property 'Checked' for element 'xyLevel'
      .setProperty("Text","Show xy plane") // EJsS HtmlView.Simulation Page: setting property 'Text' for element 'xyLevel'
      .setProperty("Display","none") // EJsS HtmlView.Simulation Page: setting property 'Display' for element 'xyLevel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"inputPanel", _view._topFrame) // EJsS HtmlView.Simulation Page: declaration of element 'inputPanel'
      .setProperty("Foreground","Cyan") // EJsS HtmlView.Simulation Page: setting property 'Foreground' for element 'inputPanel'
      .setProperty("Visibility",true) // EJsS HtmlView.Simulation Page: setting property 'Visibility' for element 'inputPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.Simulation Page: setting property 'Display' for element 'inputPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"formula", _view.inputPanel) // EJsS HtmlView.Simulation Page: declaration of element 'formula'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"selection", _view.formula) // EJsS HtmlView.Simulation Page: declaration of element 'selection'
      .setProperty("Background","white") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'selection'
      .setProperty("TextAlign","center") // EJsS HtmlView.Simulation Page: setting property 'TextAlign' for element 'selection'
      .setProperty("Foreground","black") // EJsS HtmlView.Simulation Page: setting property 'Foreground' for element 'selection'
      .setProperty("Text","f(x,y) = ") // EJsS HtmlView.Simulation Page: setting property 'Text' for element 'selection'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"functionBox", _view.formula) // EJsS HtmlView.Simulation Page: declaration of element 'functionBox'
      .setProperty("Width","40vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'functionBox'
      .setProperty("Foreground","Black") // EJsS HtmlView.Simulation Page: setting property 'Foreground' for element 'functionBox'
      .setProperty("Font","normal normal 1.5vw") // EJsS HtmlView.Simulation Page: setting property 'Font' for element 'functionBox'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"sliderContainer", _view.inputPanel) // EJsS HtmlView.Simulation Page: declaration of element 'sliderContainer'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelA", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'labelA'
      .setProperty("Display","inline-block") // EJsS HtmlView.Simulation Page: setting property 'Display' for element 'labelA'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderA", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'sliderA'
      .setProperty("Width","15vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'sliderA'
      .setProperty("Minimum",0) // EJsS HtmlView.Simulation Page: setting property 'Minimum' for element 'sliderA'
      .setProperty("Maximum",1.0) // EJsS HtmlView.Simulation Page: setting property 'Maximum' for element 'sliderA'
      .setProperty("ShowText",false) // EJsS HtmlView.Simulation Page: setting property 'ShowText' for element 'sliderA'
      .setProperty("Format","a = 0.00") // EJsS HtmlView.Simulation Page: setting property 'Format' for element 'sliderA'
      .setProperty("Background","rgba(128,0,64,1)") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'sliderA'
      .setProperty("Tooltip","Adjust amplitude a") // EJsS HtmlView.Simulation Page: setting property 'Tooltip' for element 'sliderA'
      .setProperty("Foreground","black") // EJsS HtmlView.Simulation Page: setting property 'Foreground' for element 'sliderA'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelB", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'labelB'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderB", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'sliderB'
      .setProperty("Width","15vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'sliderB'
      .setProperty("Minimum",0) // EJsS HtmlView.Simulation Page: setting property 'Minimum' for element 'sliderB'
      .setProperty("ShowText",false) // EJsS HtmlView.Simulation Page: setting property 'ShowText' for element 'sliderB'
      .setProperty("Format","b = 0.00") // EJsS HtmlView.Simulation Page: setting property 'Format' for element 'sliderB'
      .setProperty("Background","rgba(64,64,192,1)") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'sliderB'
      .setProperty("Tooltip","Adjust frequency b") // EJsS HtmlView.Simulation Page: setting property 'Tooltip' for element 'sliderB'
      .setProperty("Foreground","black") // EJsS HtmlView.Simulation Page: setting property 'Foreground' for element 'sliderB'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelC", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'labelC'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderC2", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'sliderC2'
      .setProperty("Width","15vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'sliderC2'
      .setProperty("Minimum",0) // EJsS HtmlView.Simulation Page: setting property 'Minimum' for element 'sliderC2'
      .setProperty("ShowText",false) // EJsS HtmlView.Simulation Page: setting property 'ShowText' for element 'sliderC2'
      .setProperty("Format","c = 0.00") // EJsS HtmlView.Simulation Page: setting property 'Format' for element 'sliderC2'
      .setProperty("Background","rgba(192,64,0,1)") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'sliderC2'
      .setProperty("Tooltip","Adjust direction c") // EJsS HtmlView.Simulation Page: setting property 'Tooltip' for element 'sliderC2'
      .setProperty("Foreground","black") // EJsS HtmlView.Simulation Page: setting property 'Foreground' for element 'sliderC2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelP", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'labelP'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderP", _view.sliderContainer) // EJsS HtmlView.Simulation Page: declaration of element 'sliderP'
      .setProperty("Width","15vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'sliderP'
      .setProperty("Minimum",0.0) // EJsS HtmlView.Simulation Page: setting property 'Minimum' for element 'sliderP'
      .setProperty("Maximum",5.0) // EJsS HtmlView.Simulation Page: setting property 'Maximum' for element 'sliderP'
      .setProperty("ShowText",false) // EJsS HtmlView.Simulation Page: setting property 'ShowText' for element 'sliderP'
      .setProperty("Format","speed p = 0.0") // EJsS HtmlView.Simulation Page: setting property 'Format' for element 'sliderP'
      .setProperty("Background","rgba(0,128,0,1)") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'sliderP'
      .setProperty("Tooltip","Adjust speed p") // EJsS HtmlView.Simulation Page: setting property 'Tooltip' for element 'sliderP'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"display", _view._topFrame) // EJsS HtmlView.Simulation Page: declaration of element 'display'
      ;

    _view._addElement(EJSS_DRAWING3D.drawingPanel,"drawingPanel3D", _view.display) // EJsS HtmlView.Simulation Page: declaration of element 'drawingPanel3D'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.Simulation Page: setting property 'Height' for element 'drawingPanel3D'
      .setProperty("Width","100%") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'drawingPanel3D'
      .setProperty("CameraAltitude",0.8479455095388401) // EJsS HtmlView.Simulation Page: setting property 'CameraAltitude' for element 'drawingPanel3D'
      .setProperty("Enabled",true) // EJsS HtmlView.Simulation Page: setting property 'Enabled' for element 'drawingPanel3D'
      .setProperty("CameraFocusZ",-0.0999999999999999) // EJsS HtmlView.Simulation Page: setting property 'CameraFocusZ' for element 'drawingPanel3D'
      .setProperty("MaximumZ",1) // EJsS HtmlView.Simulation Page: setting property 'MaximumZ' for element 'drawingPanel3D'
      .setProperty("CameraFocusY",0.04000000000000012) // EJsS HtmlView.Simulation Page: setting property 'CameraFocusY' for element 'drawingPanel3D'
      .setProperty("MaximumY",1) // EJsS HtmlView.Simulation Page: setting property 'MaximumY' for element 'drawingPanel3D'
      .setProperty("CameraFocusX",0.0) // EJsS HtmlView.Simulation Page: setting property 'CameraFocusX' for element 'drawingPanel3D'
      .setProperty("MaximumX",1) // EJsS HtmlView.Simulation Page: setting property 'MaximumX' for element 'drawingPanel3D'
      .setProperty("MinimumX",-1) // EJsS HtmlView.Simulation Page: setting property 'MinimumX' for element 'drawingPanel3D'
      .setProperty("MinimumY",-1) // EJsS HtmlView.Simulation Page: setting property 'MinimumY' for element 'drawingPanel3D'
      .setProperty("MinimumZ",-1) // EJsS HtmlView.Simulation Page: setting property 'MinimumZ' for element 'drawingPanel3D'
      .setProperty("CameraAzimuth",-0.014107330177807334) // EJsS HtmlView.Simulation Page: setting property 'CameraAzimuth' for element 'drawingPanel3D'
      .setProperty("DecorationType","NONE") // EJsS HtmlView.Simulation Page: setting property 'DecorationType' for element 'drawingPanel3D'
      ;

    _view._addElement(EJSS_DRAWING3D.sphereSet,"particle3D", _view.drawingPanel3D) // EJsS HtmlView.Simulation Page: declaration of element 'particle3D'
      .setProperty("Radius",0.08) // EJsS HtmlView.Simulation Page: setting property 'Radius' for element 'particle3D'
      .setProperty("X",-1) // EJsS HtmlView.Simulation Page: setting property 'X' for element 'particle3D'
      .setProperty("LineColor","black") // EJsS HtmlView.Simulation Page: setting property 'LineColor' for element 'particle3D'
      .setProperty("Y",-1) // EJsS HtmlView.Simulation Page: setting property 'Y' for element 'particle3D'
      .setProperty("Z",1) // EJsS HtmlView.Simulation Page: setting property 'Z' for element 'particle3D'
      .setProperty("Visibility",false) // EJsS HtmlView.Simulation Page: setting property 'Visibility' for element 'particle3D'
      .setProperty("DrawLines",true) // EJsS HtmlView.Simulation Page: setting property 'DrawLines' for element 'particle3D'
      .setProperty("DrawFill",false) // EJsS HtmlView.Simulation Page: setting property 'DrawFill' for element 'particle3D'
      ;

    _view._addElement(EJSS_DRAWING3D.sphereSet,"particle3D2", _view.drawingPanel3D) // EJsS HtmlView.Simulation Page: declaration of element 'particle3D2'
      .setProperty("Radius",0.08) // EJsS HtmlView.Simulation Page: setting property 'Radius' for element 'particle3D2'
      .setProperty("X",-1) // EJsS HtmlView.Simulation Page: setting property 'X' for element 'particle3D2'
      .setProperty("LineColor","green") // EJsS HtmlView.Simulation Page: setting property 'LineColor' for element 'particle3D2'
      .setProperty("Y",-1) // EJsS HtmlView.Simulation Page: setting property 'Y' for element 'particle3D2'
      .setProperty("Z",-1) // EJsS HtmlView.Simulation Page: setting property 'Z' for element 'particle3D2'
      .setProperty("Visibility",false) // EJsS HtmlView.Simulation Page: setting property 'Visibility' for element 'particle3D2'
      .setProperty("DrawLines",true) // EJsS HtmlView.Simulation Page: setting property 'DrawLines' for element 'particle3D2'
      .setProperty("DrawFill",false) // EJsS HtmlView.Simulation Page: setting property 'DrawFill' for element 'particle3D2'
      ;

    _view._addElement(EJSS_DRAWING3D.analyticSurface,"xyLevel2", _view.drawingPanel3D) // EJsS HtmlView.Simulation Page: declaration of element 'xyLevel2'
      .setProperty("DrawFill",false) // EJsS HtmlView.Simulation Page: setting property 'DrawFill' for element 'xyLevel2'
      .setProperty("FunctionY","y") // EJsS HtmlView.Simulation Page: setting property 'FunctionY' for element 'xyLevel2'
      .setProperty("Variable2","y") // EJsS HtmlView.Simulation Page: setting property 'Variable2' for element 'xyLevel2'
      .setProperty("FunctionX","x") // EJsS HtmlView.Simulation Page: setting property 'FunctionX' for element 'xyLevel2'
      .setProperty("Variable1","x") // EJsS HtmlView.Simulation Page: setting property 'Variable1' for element 'xyLevel2'
      .setProperty("FunctionZ","0") // EJsS HtmlView.Simulation Page: setting property 'FunctionZ' for element 'xyLevel2'
      .setProperty("NumPoints2",5) // EJsS HtmlView.Simulation Page: setting property 'NumPoints2' for element 'xyLevel2'
      .setProperty("NumPoints1",5) // EJsS HtmlView.Simulation Page: setting property 'NumPoints1' for element 'xyLevel2'
      .setProperty("MaxValue2",3) // EJsS HtmlView.Simulation Page: setting property 'MaxValue2' for element 'xyLevel2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.Simulation Page: setting property 'LineColor' for element 'xyLevel2'
      .setProperty("MaxValue1",3) // EJsS HtmlView.Simulation Page: setting property 'MaxValue1' for element 'xyLevel2'
      .setProperty("MinValue1",-3) // EJsS HtmlView.Simulation Page: setting property 'MinValue1' for element 'xyLevel2'
      .setProperty("MinValue2",-3) // EJsS HtmlView.Simulation Page: setting property 'MinValue2' for element 'xyLevel2'
      .setProperty("DrawLines",true) // EJsS HtmlView.Simulation Page: setting property 'DrawLines' for element 'xyLevel2'
      ;

    _view._addElement(EJSS_DRAWING3D.analyticSurface,"spaceArea2", _view.drawingPanel3D) // EJsS HtmlView.Simulation Page: declaration of element 'spaceArea2'
      .setProperty("FillColor","Gray") // EJsS HtmlView.Simulation Page: setting property 'FillColor' for element 'spaceArea2'
      .setProperty("DrawFill",true) // EJsS HtmlView.Simulation Page: setting property 'DrawFill' for element 'spaceArea2'
      .setProperty("FunctionY","y") // EJsS HtmlView.Simulation Page: setting property 'FunctionY' for element 'spaceArea2'
      .setProperty("Variable2","y") // EJsS HtmlView.Simulation Page: setting property 'Variable2' for element 'spaceArea2'
      .setProperty("FunctionX","x") // EJsS HtmlView.Simulation Page: setting property 'FunctionX' for element 'spaceArea2'
      .setProperty("Variable1","x") // EJsS HtmlView.Simulation Page: setting property 'Variable1' for element 'spaceArea2'
      .setProperty("MaxValue2",3) // EJsS HtmlView.Simulation Page: setting property 'MaxValue2' for element 'spaceArea2'
      .setProperty("LineColor","Green") // EJsS HtmlView.Simulation Page: setting property 'LineColor' for element 'spaceArea2'
      .setProperty("MaxValue1",3) // EJsS HtmlView.Simulation Page: setting property 'MaxValue1' for element 'spaceArea2'
      .setProperty("MinValue1",-3) // EJsS HtmlView.Simulation Page: setting property 'MinValue1' for element 'spaceArea2'
      .setProperty("MinValue2",-3) // EJsS HtmlView.Simulation Page: setting property 'MinValue2' for element 'spaceArea2'
      .setProperty("DrawLines",true) // EJsS HtmlView.Simulation Page: setting property 'DrawLines' for element 'spaceArea2'
      ;

    _view._addElement(EJSS_DRAWING3D.analyticSurface,"spaceArea", _view.drawingPanel3D) // EJsS HtmlView.Simulation Page: declaration of element 'spaceArea'
      .setProperty("FillColor","Gray") // EJsS HtmlView.Simulation Page: setting property 'FillColor' for element 'spaceArea'
      .setProperty("DrawFill",true) // EJsS HtmlView.Simulation Page: setting property 'DrawFill' for element 'spaceArea'
      .setProperty("FunctionY","y") // EJsS HtmlView.Simulation Page: setting property 'FunctionY' for element 'spaceArea'
      .setProperty("Variable2","y") // EJsS HtmlView.Simulation Page: setting property 'Variable2' for element 'spaceArea'
      .setProperty("FunctionX","x") // EJsS HtmlView.Simulation Page: setting property 'FunctionX' for element 'spaceArea'
      .setProperty("Variable1","x") // EJsS HtmlView.Simulation Page: setting property 'Variable1' for element 'spaceArea'
      .setProperty("MaxValue2",3) // EJsS HtmlView.Simulation Page: setting property 'MaxValue2' for element 'spaceArea'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.Simulation Page: setting property 'LineColor' for element 'spaceArea'
      .setProperty("MaxValue1",3) // EJsS HtmlView.Simulation Page: setting property 'MaxValue1' for element 'spaceArea'
      .setProperty("MinValue1",-3) // EJsS HtmlView.Simulation Page: setting property 'MinValue1' for element 'spaceArea'
      .setProperty("Z",1) // EJsS HtmlView.Simulation Page: setting property 'Z' for element 'spaceArea'
      .setProperty("Visibility",false) // EJsS HtmlView.Simulation Page: setting property 'Visibility' for element 'spaceArea'
      .setProperty("MinValue2",-3) // EJsS HtmlView.Simulation Page: setting property 'MinValue2' for element 'spaceArea'
      .setProperty("DrawLines",true) // EJsS HtmlView.Simulation Page: setting property 'DrawLines' for element 'spaceArea'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"debug", _view._topFrame) // EJsS HtmlView.Simulation Page: declaration of element 'debug'
      .setProperty("Display","none") // EJsS HtmlView.Simulation Page: setting property 'Display' for element 'debug'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.debug) // EJsS HtmlView.Simulation Page: declaration of element 'label'
      .setProperty("Text","display") // EJsS HtmlView.Simulation Page: setting property 'Text' for element 'label'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"textField3", _view.debug) // EJsS HtmlView.Simulation Page: declaration of element 'textField3'
      .setProperty("Width","50vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'textField3'
      .setProperty("Background","Green") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'textField3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label2", _view.debug) // EJsS HtmlView.Simulation Page: declaration of element 'label2'
      .setProperty("Text","fTypold") // EJsS HtmlView.Simulation Page: setting property 'Text' for element 'label2'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"textField", _view.debug) // EJsS HtmlView.Simulation Page: declaration of element 'textField'
      .setProperty("Width","50vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'textField'
      .setProperty("Background","Green") // EJsS HtmlView.Simulation Page: setting property 'Background' for element 'textField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label3", _view.debug) // EJsS HtmlView.Simulation Page: declaration of element 'label3'
      .setProperty("Text","fTyp") // EJsS HtmlView.Simulation Page: setting property 'Text' for element 'label3'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"textField2", _view.debug) // EJsS HtmlView.Simulation Page: declaration of element 'textField2'
      .setProperty("Width","50vw") // EJsS HtmlView.Simulation Page: setting property 'Width' for element 'textField2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Function plotter z = f ( x , y ) 3D Waves<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/Plotter_f(x,y)/Waves3D/Waves3DWCthumb.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/Plotter_f(x,y)/01authorlookang50x50.png" />
 Dieter Roess - WEH- Foundation; Tan Wei Chiong; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Dieter Roess - WEH- Foundation; Tan Wei Chiong; Loo Kang Wee. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new e_Waves_3Dwee("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/Plotter_f(x,y)/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
