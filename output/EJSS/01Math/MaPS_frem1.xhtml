<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function MaPS_frem1(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var a; // EjsS Model.Variables.Main Variables.a
  var b; // EjsS Model.Variables.Main Variables.b
  var cooX; // EjsS Model.Variables.Main Variables.cooX
  var cooY; // EjsS Model.Variables.Main Variables.cooY
  var sizes; // EjsS Model.Variables.Main Variables.sizes
  var text; // EjsS Model.Variables.Main Variables.text
  var font; // EjsS Model.Variables.Main Variables.font
  var fontb; // EjsS Model.Variables.Main Variables.fontb
  var c; // EjsS Model.Variables.Main Variables.c

  var choice; // EjsS Model.Variables.Choices.choice
  var den; // EjsS Model.Variables.Choices.den
  var num; // EjsS Model.Variables.Choices.num
  var divid; // EjsS Model.Variables.Choices.divid
  var d; // EjsS Model.Variables.Choices.d
  var rA; // EjsS Model.Variables.Choices.rA
  var rB; // EjsS Model.Variables.Choices.rB
  var percent; // EjsS Model.Variables.Choices.percent

  var debugx; // EjsS Model.Variables.lookang.debugx
  var dragX0; // EjsS Model.Variables.lookang.dragX0
  var dragX1; // EjsS Model.Variables.lookang.dragX1
  var dragX2; // EjsS Model.Variables.lookang.dragX2
  var dragX3; // EjsS Model.Variables.lookang.dragX3

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      a : a,
      b : b,
      cooX : cooX,
      cooY : cooY,
      sizes : sizes,
      text : text,
      font : font,
      fontb : fontb,
      c : c,
      choice : choice,
      den : den,
      num : num,
      divid : divid,
      d : d,
      rA : rA,
      rB : rB,
      percent : percent,
      debugx : debugx,
      dragX0 : dragX0,
      dragX1 : dragX1,
      dragX2 : dragX2,
      dragX3 : dragX3
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.cooX != "undefined") cooX = json.cooX;
    if(typeof json.cooY != "undefined") cooY = json.cooY;
    if(typeof json.sizes != "undefined") sizes = json.sizes;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.choice != "undefined") choice = json.choice;
    if(typeof json.den != "undefined") den = json.den;
    if(typeof json.num != "undefined") num = json.num;
    if(typeof json.divid != "undefined") divid = json.divid;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.rA != "undefined") rA = json.rA;
    if(typeof json.rB != "undefined") rB = json.rB;
    if(typeof json.percent != "undefined") percent = json.percent;
    if(typeof json.debugx != "undefined") debugx = json.debugx;
    if(typeof json.dragX0 != "undefined") dragX0 = json.dragX0;
    if(typeof json.dragX1 != "undefined") dragX1 = json.dragX1;
    if(typeof json.dragX2 != "undefined") dragX2 = json.dragX2;
    if(typeof json.dragX3 != "undefined") dragX3 = json.dragX3;
  };

  _model._inputAndPublicParameters = ["a",  "b",  "cooX",  "cooY",  "sizes",  "text",  "font",  "fontb",  "c",  "choice",  "den",  "num",  "divid",  "d",  "rA",  "rB",  "percent",  "debugx",  "dragX0",  "dragX1",  "dragX2",  "dragX3"]; 

  _model._outputAndPublicParameters = ["a",  "b",  "cooX",  "cooY",  "sizes",  "text",  "font",  "fontb",  "c",  "choice",  "den",  "num",  "divid",  "d",  "rA",  "rB",  "percent",  "debugx",  "dragX0",  "dragX1",  "dragX2",  "dragX3"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Debugging"] = true;
  });

  _model.addToReset(function() {
    a = 0; // EjsS Model.Variables.Main Variables.a
    b = 3; // EjsS Model.Variables.Main Variables.b
    cooX = 0; // EjsS Model.Variables.Main Variables.cooX
    cooY = 0; // EjsS Model.Variables.Main Variables.cooY
    sizes = 0; // EjsS Model.Variables.Main Variables.sizes
    text = ""; // EjsS Model.Variables.Main Variables.text
    font = "normal normal 2vw"; // EjsS Model.Variables.Main Variables.font
    fontb = "normal normal 5vw"; // EjsS Model.Variables.Main Variables.fontb
    c = 0; // EjsS Model.Variables.Main Variables.c
  });

  _model.addToReset(function() {
    choice = 1; // EjsS Model.Variables.Choices.choice
    den = 2; // EjsS Model.Variables.Choices.den
    num = 1; // EjsS Model.Variables.Choices.num
    divid = 2; // EjsS Model.Variables.Choices.divid
    d = 1; // EjsS Model.Variables.Choices.d
    rA = 1; // EjsS Model.Variables.Choices.rA
    rB = 2; // EjsS Model.Variables.Choices.rB
    percent = 130; // EjsS Model.Variables.Choices.percent
  });

  _model.addToReset(function() {
    debugx = 2; // EjsS Model.Variables.lookang.debugx
    dragX0 = 2; // EjsS Model.Variables.lookang.dragX0
    dragX1 = 2; // EjsS Model.Variables.lookang.dragX1
    dragX2 = 2; // EjsS Model.Variables.lookang.dragX2
    dragX3 = 2; // EjsS Model.Variables.lookang.dragX3
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.Full Screen:1
  // does not work for iOS   // > CustomCode.Full Screen:2
  /*jslint browser:true */  // > CustomCode.Full Screen:3
  function toggleFullScreen() {  // > CustomCode.Full Screen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.Full Screen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.Full Screen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.Full Screen:7
        document.documentElement.requestFullscreen();  // > CustomCode.Full Screen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.Full Screen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.Full Screen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.Full Screen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.Full Screen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.Full Screen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.Full Screen:14
      }  // > CustomCode.Full Screen:15
    } else {  // > CustomCode.Full Screen:16
      if (document.exitFullscreen) {  // > CustomCode.Full Screen:17
        document.exitFullscreen();  // > CustomCode.Full Screen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.Full Screen:19
        document.msExitFullscreen();  // > CustomCode.Full Screen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.Full Screen:21
        document.mozCancelFullScreen();  // > CustomCode.Full Screen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.Full Screen:23
        document.webkitExitFullscreen();  // > CustomCode.Full Screen:24
      }  // > CustomCode.Full Screen:25
    }  // > CustomCode.Full Screen:26
  }  // > CustomCode.Full Screen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //Resets the Array  // > Initialization.Init Page:1
    //cooX = [];//Array of all the X values of the rectangles  // > Initialization.Init Page:2
    //cooY = [];//Array of all the Y values of the rectangles  // > Initialization.Init Page:3
    //sizes = [];//Array of all the sizes values of the rectangles  // > Initialization.Init Page:4
    cooX = [0];//Array of all the X values of the rectangles init to zero lookang  // > Initialization.Init Page:5
    cooY = [1,2,3,4,5];//Array of all the Y values of the rectangles init to equal spaces asuming 5 is maximum number of blocks lookang  // > Initialization.Init Page:6
    sizes = [0];//Array of all the sizes values of the rectangles init to zero lookang  // > Initialization.Init Page:7
    /*  // > Initialization.Init Page:8
    The above arrays are only used for debugging/checking  // > Initialization.Init Page:9
    the initial state of the rectangles  // > Initialization.Init Page:10
    */  // > Initialization.Init Page:11
    debugx=[2];  // > Initialization.Init Page:12
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Debugging"]) return;
    /*  // > FixedRelations.Debugging:1
    For debugging purposes.  // > FixedRelations.Debugging:2
    if (sizes.length>0){_view._collectData();  // > FixedRelations.Debugging:3
    text = eval("_view.shape"+c).getProperty("SizeX");  // > FixedRelations.Debugging:4
    }  // > FixedRelations.Debugging:5
    */  // > FixedRelations.Debugging:6
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new MaPS_frem1_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel2'
          _view.Create_Rectangle.setAction("OnClick", function(_data,_info) {
  //Random creates a position for the Box
  //var posX = Math.random()*5+2.5; var posY = Math.random()*5+2.5;
  // always creates a position for box x =0 //lookang
  var posX = 0; 
  var posY = 0+a; // increment up by a
  //Storing the size and position of the box for checking purposes
  cooX.push(posX);cooY.push(posY);sizes.push(2);
  //Adding a Group Element into Plotting Panel with ID a
      _view._addElement(EJSS_DRAWING2D.group,"group"+a, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("X",cooX[a]) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",cooY[a]) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
       // .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element // this is expanding the size X, not neccesary lookang
        ;
  //Adding a Rectangle Element into the Above Group with ID a
  _view._addElement(EJSS_DRAWING2D.shape,"shape"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element
       // .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("FillColor",0+a) // EJsS HtmlView.HtmlView Page: setting property to always change by a RED,GREEN,BLUE,YELLOW etc
       // .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
      //  .setProperty("X",0) // lookang added for putting complete code for control
      //  .setProperty("Y",a) // lookang
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        .setProperty("Sensitivity",0) //lookang make the whole object rectangle hot to drag
        ;
  //circle
  //Adding the Element of the draggable circle for the rectangle with ID a
  _view._addElement(EJSS_DRAWING2D.shape,"shapecircle"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("Sensitivity",0) //lookang
        .setProperty("ResizesGroup",true)// EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element
        .setProperty("EnabledPosition","ENABLED_X") //lookang
      //  .setProperty("EnabledSize","ENABLED_X")// EJsS HtmlView.HtmlView Page: setting property 'ENABLED_X' for element
        .setProperty("FillColor","rgba(0,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 
     //   .setProperty("SizeX",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
         .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("PixelSize",true) //lookang since true, need to resize to 20,20 pixels
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
     //   .setProperty("X",1-0.125) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("X",2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
     //   .setProperty("SizeY",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
      //  .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
         .setProperty("RelativePosition","CENTER") // lookang CENTER better for circle
        ;
        
  //Updates the ID of the rectangle
  a+=1;

}); // HtmlView Page setting action 'OnClick' for element 'Create_Rectangle'
          _view.ColorBox.linkProperty("Options",  function() { return ["Yellow","White","Red","Orange","Green","Cyan","Blue"]; } ); // HtmlView Page linking property 'Options' for element 'ColorBox'
          _view.ColorBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.ColorBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Yellow","White","Red","Orange","Green","Cyan","Blue"]
  //If sizes is ==1, ID selected =0
  if (sizes.length<2){ c = 0;}
  //Sets the selected ID c rectangle's color to Yellow
  if (  option=="Yellow"){
  eval("_view.shape"+c).setProperty("FillColor","Yellow");
    }
  //Sets the selected ID c rectangle's color to White
  else if (  option=="White"){
  eval("_view.shape"+c).setProperty("FillColor","White");
    }
  //Sets the selected ID c rectangle's color to Red
  else if (  option=="Red"){
  eval("_view.shape"+c).setProperty("FillColor","Red");
    }
  //Sets the selected ID c rectangle's color to Orange
  else if (  option=="Orange"){
  eval("_view.shape"+c).setProperty("FillColor","Orange");
    }
  //Sets the selected ID c rectangle's color to Cyan
  else if (  option=="Cyan"){
  eval("_view.shape"+c).setProperty("FillColor","Cyan");
    }
  //Sets the selected ID c rectangle's color to Blue
  else if (  option=="Blue"){
  eval("_view.shape"+c).setProperty("FillColor","Blue");
    }
  //Sets the selected ID c rectangle's color to Green
  else if (  option=="Green"){
  eval("_view.shape"+c).setProperty("FillColor","Green");
    }

}); // HtmlView Page setting action 'OnChange' for element 'ColorBox'
          _view.ColorBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'ColorBox'
          _view.ColorBox.linkProperty("Display",  function() { return sizes.length>0?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'ColorBox'
          _view.IDSelected.linkProperty("Display",  function() { return sizes.length>1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'IDSelected'
          _view.slider.linkProperty("Maximum",  function() { return sizes.length-1; } ); // HtmlView Page linking property 'Maximum' for element 'slider'
          _view.slider.linkProperty("Value",  function() { return c; }, function(_v) { c = _v; } ); // HtmlView Page linking property 'Value' for element 'slider'
          _view.slider.setAction("OnChange", function(_data,_info) {
  //c must be a whole number
  c= Math.round(c);
  //The first index cannot be equal to the second index
  if (c==sizes.length-1&&d==c){d=c-1;}
  else if (d==c){d=c+1;}

}); // HtmlView Page setting action 'OnChange' for element 'slider'
          _view.slider.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'slider'
          _view.slider.linkProperty("Display",  function() { return sizes.length>1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'slider'
          _view.Hide.setAction("OnClick", function(_data,_info) {
  //if there's only one box, set c = 0
  if (sizes.length<2){ c = 0;}
  //Toggle Visibility of the selected Box
    var check = eval("_view.group"+c).getProperty("Visibility");
    if (check){eval("_view.group"+c).setProperty("Visibility",false);
    }
    else{eval("_view.group"+c).setProperty("Visibility",true);
    }

}); // HtmlView Page setting action 'OnClick' for element 'Hide'
          _view.Hide.linkProperty("Display",  function() { return sizes.length>0?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Hide'
          _view.choiceBox.linkProperty("Options",  function() { return ["Fractions","Divider","Ratio","Percentage"]; } ); // HtmlView Page linking property 'Options' for element 'choiceBox'
          _view.choiceBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.choiceBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Fractions","Divider","Ratio","Percentage"]
  //Selects the mode of the operation.
  if (  option=="Fractions"){choice = 1;}
  else if (  option=="Divider"){choice = 2;}
  //Ratio and Percentage will display their stuff only if there are two or more boxes in the panel
  else if (  option=="Ratio"){choice = 3;}
  else if (  option=="Percentage"){choice = 4;}

}); // HtmlView Page setting action 'OnChange' for element 'choiceBox'
          _view.choiceBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'choiceBox'
          _view.choiceBox.linkProperty("Display",  function() { return sizes.length>0?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'choiceBox'
          _view.Numerator.linkProperty("Value",  function() { return num; }, function(_v) { num = _v; } ); // HtmlView Page linking property 'Value' for element 'Numerator'
          _view.Numerator.setAction("OnChange", function(_data,_info) {
  //Numerator must be a whole number and is bigger than zero.
  num = Math.round(num);
  if (num<1){num=1;}
  //Denominator must be bigger or equal to the numerator
  if (den<num){den=num;}

}); // HtmlView Page setting action 'OnChange' for element 'Numerator'
          _view.Numerator.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Numerator'
          _view.Numerator.linkProperty("Display",  function() { return (choice==1&&sizes.length>0)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Numerator'
          _view.dividor.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'dividor'
          _view.dividor.linkProperty("Display",  function() { return (choice==1&&sizes.length>0)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'dividor'
          _view.Denominator.linkProperty("Value",  function() { return den; }, function(_v) { den = _v; } ); // HtmlView Page linking property 'Value' for element 'Denominator'
          _view.Denominator.setAction("OnChange", function(_data,_info) {
  //Den must be a whole number and bigger or equal to the numerator
  den = Math.round(den);
  if (den<num){den=num;}

}); // HtmlView Page setting action 'OnChange' for element 'Denominator'
          _view.Denominator.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Denominator'
          _view.Denominator.linkProperty("Display",  function() { return (choice==1&&sizes.length>0)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Denominator'
          _view.Fractions.setAction("OnClick", function(_data,_info) {
  //Gets position and size of the selected group
  var oposX = eval("_view.group"+c).getProperty("X");
  var oposY = eval("_view.group"+c).getProperty("Y");
  var osize = eval("_view.group"+c).getProperty("SizeX");
  //Sets the new position of the fractions
  var posX = oposX;
  var posY = oposY-1.5;
  var size2 = osize/den;
  //Create Text Group on the left of the fractions
   _view._addElement(EJSS_DRAWING2D.text,"misc"+b, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
        .setProperty("X",posX) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'text2'
        .setProperty("Y",posY) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'text2'
        .setProperty("Text",num+"/"+den) // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text2'
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text2'
        .setProperty("Font",font)// EJsS HtmlView.HtmlView Page: setting property 'Font' for element
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'dummyshape'
        ;
  //Update the index of the Misc elements
  b+=1;
  //Randomise Color 1
  var arr = ["Yellow","White","Red","Orange","Green","Cyan","Blue"];
    var index = Math.floor(Math.random()*arr.length);
    var color1 = arr[index];
    arr.splice(index, 1);
  //Randomise Color 2
    var index = Math.floor(Math.random()*arr.length);
    var color2 = arr[index];
    
  //Loop based on the denominator
  for (var i = 0;i<den;i++){
  //Check if it's within numerator range to segregate the colors
    if (i>num-1){randcolor=color1;}
    else{randcolor=color2;}
  //Adds the initial position and size of the new rectangle to the array
    cooX.push(posX);
    cooY.push(posY);
    sizes.push(size2);
  //Add the Group Element of index a to the Plotting Panel
    _view._addElement(EJSS_DRAWING2D.group,"group"+a, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("X",cooX[a]) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",cooY[a]) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("SizeX",size2)// EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        ;
  //Add the Box of index a to the Group
  _view._addElement(EJSS_DRAWING2D.shape,"shape"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element
        .setProperty("FillColor",randcolor) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
  //Adds the minicircle of index A to the group (For resizing purposes)
  _view._addElement(EJSS_DRAWING2D.shape,"shapecircle"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("ResizesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element
        .setProperty("EnabledSize","ENABLED_X")// EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element
        .setProperty("FillColor","rgba(0,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("X",1-0.125) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
    //Updates the loop with the next position to spawn the next Box
    posX +=size2;
    //Updates the index of the Box elements
        a+=1;
    }
  //Hides the visibility of the perc text if any
  try{
  eval("_view.perctext"+c).setProperty("Visibility",false);
  }
  catch(err){}

}); // HtmlView Page setting action 'OnClick' for element 'Fractions'
          _view.Fractions.linkProperty("Display",  function() { return (choice==1&&sizes.length>0)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Fractions'
          _view.DividerField.linkProperty("Value",  function() { return divid; }, function(_v) { divid = _v; } ); // HtmlView Page linking property 'Value' for element 'DividerField'
          _view.DividerField.setAction("OnChange", function(_data,_info) {
  //The divider must be a whole number and be bigger than 1
  divid = Math.round(divid);
  if (divid<2){divid=2;}

}); // HtmlView Page setting action 'OnChange' for element 'DividerField'
          _view.DividerField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'DividerField'
          _view.DividerField.linkProperty("Display",  function() { return (choice==2&&sizes.length>0)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'DividerField'
          _view.DividerEqually.setAction("OnClick", function(_data,_info) {
  //Gets the value of c from  the slider
  c = _view.slider.getProperty("Value");
  //Gets the position and size of the selected box
  var oposX = eval("_view.group"+c).getProperty("X");
  var oposY = eval("_view.group"+c).getProperty("Y");
  var osize = eval("_view.group"+c).getProperty("SizeX");
  //Sets the new size of the box
  var size2 = osize/divid;
  eval("_view.group"+c).setProperty("SizeX",osize/divid);
  //Sets the position of the new box
  var posX = oposX+size2;
  var posY = oposY;
  //Sets the color of the box
    var randcolor = eval("_view.shape"+c).getProperty("FillColor");
  //Loop for the remaining boxes
  for (var i = 1;i<divid;i++){
    //Stores the initial position and sizes of the boxes
    cooX.push(posX);cooY.push(posY);sizes.push(size2);
    //Adds the group of index a to the plotting panel
    _view._addElement(EJSS_DRAWING2D.group,"group"+a, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("X",cooX[a]) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",cooY[a]) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("SizeX",size2)
        ;
    //Adds the box of index a to the group
  _view._addElement(EJSS_DRAWING2D.shape,"shape"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element
        .setProperty("FillColor",randcolor) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
  //Adds the resizable circle of index a to the group
  _view._addElement(EJSS_DRAWING2D.shape,"shapecircle"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("ResizesGroup",true)// EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element
        .setProperty("EnabledSize","ENABLED_X")// EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element
        .setProperty("FillColor","rgba(0,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("X",1-0.125) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
        
        //Updates the position of the next box
        posX +=size2;
        //Updates the index of the next box
        a+=1;
    }
    
  //Hides the visibility of the perc text if any
  try{
  eval("_view.perctext"+c).setProperty("Visibility",false);
  }
  catch(err){}

}); // HtmlView Page setting action 'OnClick' for element 'DividerEqually'
          _view.DividerEqually.linkProperty("Display",  function() { return (sizes.length>0&&choice==2)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'DividerEqually'
          _view.DividerUnequally.setAction("OnClick", function(_data,_info) {
  //Gets the value of first index
  c = _view.slider.getProperty("Value");
  //Gets the position and size of the group of index c
  var oposX = eval("_view.group"+c).getProperty("X");
  var oposY = eval("_view.group"+c).getProperty("Y");
  var osize = eval("_view.group"+c).getProperty("SizeX");
  //Sets the new size of the selected box
  var size2 =osize*Math.random();
    if (size2>osize*2/3){size2 = osize*2/3;}
    if (size2<osize/3){size2 = osize/3;}
    eval("_view.group"+c).setProperty("SizeX",size2);
    
  //Sets the position and size of the next box
  var posX = oposX+size2;var posY = oposY;osize-=size2;
  //Loop for the remaining boxes
  for (var i = 1;i<divid;i++){
    //Sets random color
      var arr = ["Yellow","White","Red","Orange","Green","Cyan","Blue"];
    var index = Math.floor(Math.random()*arr.length);
    var randcolor = arr[index];
    //If it's not the last box
    if (i<divid-1){
      //Randomise the new size
    var size2 =osize*Math.random();
    if (size2>osize*2/3){size2 = osize*2/3;}
    if (size2<osize/3){size2 = osize/3;}
    }
    //If it's the last box
    else{var size2 = osize;}
    
    //Stores the initial position and size of the box into the array
    cooX.push(posX);cooY.push(posY);sizes.push(size2);
    
    //Add the group of index a to the Plotting Panel
    _view._addElement(EJSS_DRAWING2D.group,"group"+a, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("X",cooX[a]) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",cooY[a]) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("SizeX",size2)// EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        ;
        
    //Adds the box of index a to the group    
  _view._addElement(EJSS_DRAWING2D.shape,"shape"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element
        .setProperty("FillColor",randcolor) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
  //Adds the resizeable circle of index a to the group
  _view._addElement(EJSS_DRAWING2D.shape,"shapecircle"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("ResizesGroup",true)// EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element
        .setProperty("EnabledSize","ENABLED_X")// EJsS HtmlView.HtmlView Page: setting property 'ENABLED_X' for element
        .setProperty("FillColor","rgba(0,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("X",1-0.125) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
        //Updates the position for the next box
        posX +=size2;
        //Updates the index for the next box
        a+=1;
        //Reduces the size of the pool
        osize-=size2;
    }
  //Hides the visibility of the perc text if any
  try{
  eval("_view.perctext"+c).setProperty("Visibility",false);
  }
  catch(err){}

}); // HtmlView Page setting action 'OnClick' for element 'DividerUnequally'
          _view.DividerUnequally.linkProperty("Display",  function() { return (choice==2&&sizes.length>0)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'DividerUnequally'
          _view.IDSelected2.linkProperty("Display",  function() { return (choice>2&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'IDSelected2'
          _view.sliderid.linkProperty("Maximum",  function() { return sizes.length-1; } ); // HtmlView Page linking property 'Maximum' for element 'sliderid'
          _view.sliderid.linkProperty("Value",  function() { return d; }, function(_v) { d = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderid'
          _view.sliderid.setAction("OnChange", function(_data,_info) {
  //d(Second ID) must be a whole number
  d= Math.round(d);
  //If d==c, change d.
  if (c==sizes.length-1&&d==c){d=c-1;}
  else if (d==c){d=c+1;}

}); // HtmlView Page setting action 'OnChange' for element 'sliderid'
          _view.sliderid.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'sliderid'
          _view.sliderid.linkProperty("Display",  function() { return (choice>2&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'sliderid'
          _view.RatioA.linkProperty("Value",  function() { return rA; }, function(_v) { rA = _v; } ); // HtmlView Page linking property 'Value' for element 'RatioA'
          _view.RatioA.setAction("OnChange", function(_data,_info) {
  //Must be a whole number and bigger than 0
  rA = Math.round(rA);
  if (rA<1){rA=1;}

}); // HtmlView Page setting action 'OnChange' for element 'RatioA'
          _view.RatioA.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'RatioA'
          _view.RatioA.linkProperty("Display",  function() { return (choice==3&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioA'
          _view.RatioSign.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'RatioSign'
          _view.RatioSign.linkProperty("Display",  function() { return (choice==3&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioSign'
          _view.RatioB.linkProperty("Value",  function() { return rB; }, function(_v) { rB = _v; } ); // HtmlView Page linking property 'Value' for element 'RatioB'
          _view.RatioB.setAction("OnChange", function(_data,_info) {
  //The secondary number must be a whole number and bigger than zero.
  rB = Math.round(rB);
  if (rB<1){rB=1;}

}); // HtmlView Page setting action 'OnChange' for element 'RatioB'
          _view.RatioB.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'RatioB'
          _view.RatioB.linkProperty("Display",  function() { return (choice==3&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioB'
          _view.RatioButton.setAction("OnClick", function(_data,_info) {
  //Gets the position and size of the first box selected
  var oposX = eval("_view.group"+c).getProperty("X");
  var oposY = eval("_view.group"+c).getProperty("Y");
  var osize = eval("_view.group"+c).getProperty("SizeX");
  //Sets the positon and size of the second box
  var posX = oposX;var posY = oposY-1.5;var size = osize/rA*rB;
  eval("_view.group"+d).setProperty("SizeX",size)
  eval("_view.group"+d).setProperty("Y",posY)
  eval("_view.group"+d).setProperty("X",posX)
  //Create the text for the first box
   _view._addElement(EJSS_DRAWING2D.text,"misc"+b, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
        .setProperty("X",oposX) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'text2'
        .setProperty("Y",oposY) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'text2'
        .setProperty("Text",rA) // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text2'
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text2'
        .setProperty("Font",font)// EJsS HtmlView.HtmlView Page: setting property 'Font' for element
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'dummyshape'
        ;
  //Updates the text index
  b+=1;
  //Create the text for the second box
   _view._addElement(EJSS_DRAWING2D.text,"misc"+b, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
        .setProperty("X",posX) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'text2'
        .setProperty("Y",posY) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'text2'
        .setProperty("Text",rB) // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text2'
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text2'
        .setProperty("Font",font)// EJsS HtmlView.HtmlView Page: setting property 'Font' for element
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'dummyshape'
        ;
  //Updates the text index
  b+=1;
  //Set the new sizes for both boxes
  var size2 = osize/rA;var size3 = size/rB
  eval("_view.group"+c).setProperty("SizeX",size2)
  eval("_view.group"+d).setProperty("SizeX",size3)
  //Sets the color for the first box
    var arr = ["Yellow","White","Red","Orange","Green","Cyan","Blue"];
    var index = Math.floor(Math.random()*arr.length);
    var randcolor = arr[index];
    eval("_view.shape"+c).setProperty("FillColor",randcolor)
  //Sets positions of the next looped boxes
  oposX+=size2;
  posX+=size3;
  //Loop for the top box
  for (var i = 1;i<rA;i++){
     //Stores the initial positions and size of the box into the array
    cooX.push(oposX);cooY.push(oposY);sizes.push(size2);
  //Adds group of index a to the Plotting Panel
  _view._addElement(EJSS_DRAWING2D.group,"group"+a, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("X",cooX[a]) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",cooY[a]) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("SizeX",size2)// EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        ;
  //Adds shape of index a into the group
  _view._addElement(EJSS_DRAWING2D.shape,"shape"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 
        .setProperty("FillColor",randcolor) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
        
  //Adds the resizeable circle of index a into the group
  _view._addElement(EJSS_DRAWING2D.shape,"shapecircle"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("ResizesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element
        .setProperty("EnabledSize","ENABLED_X")// EJsS HtmlView.HtmlView Page: setting property 'ENABLED_X' for element
        .setProperty("FillColor","rgba(0,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("X",1-0.125) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
        //Updates the position for the next box
        oposX +=size2;
        //Updates the index for the next box
        a+=1;
    }
    
    //Randomise the color for the second box
    arr.splice(index, 1)
    var index = Math.floor(Math.random()*arr.length);
    var randcolor = arr[index];
    eval("_view.shape"+d).setProperty("FillColor",randcolor)
    
    //Loop for the bottom boxes
  for (var i = 1;i<rB;i++){
    //Stores the initial position and sizes of the box
    cooX.push(posX);cooY.push(posY);sizes.push(size3);
    //Adds the group of index a into the plotting panel
    _view._addElement(EJSS_DRAWING2D.group,"group"+a, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 
        .setProperty("X",cooX[a]) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",cooY[a]) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("SizeX",size3)// EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        ;
     //Adds the box of index a into the group
  _view._addElement(EJSS_DRAWING2D.shape,"shape"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element
        .setProperty("FillColor",randcolor) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
  //Adds the resizeable circle of index a into the group
  _view._addElement(EJSS_DRAWING2D.shape,"shapecircle"+a, eval("_view.group"+a)) // EJsS HtmlView.HtmlView Page: declaration of element 
        .setProperty("ResizesGroup",true)// EJsS HtmlView.HtmlView Page: setting property 'ResizesGroup' for element
        .setProperty("EnabledSize","ENABLED_X")// EJsS HtmlView.HtmlView Page: setting property 'ENABLED_X' for element
        .setProperty("FillColor","rgba(0,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element
        .setProperty("SizeX",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("X",1-0.125) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("SizeY",0.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element
        ;
        //Updates the position of the next box
        posX +=size3;
        //Updates the index of the next box
        a+=1;
    }
    
  //Hides the visibility of the perc text if any
  try{
  eval("_view.perctext"+c).setProperty("Visibility",false);
  }
  catch(err){}
  try{
  eval("_view.perctext"+d).setProperty("Visibility",false);
  }
  catch(err){}

}); // HtmlView Page setting action 'OnClick' for element 'RatioButton'
          _view.RatioButton.linkProperty("Display",  function() { return (choice==3&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'RatioButton'
          _view.Percentage.linkProperty("Value",  function() { return percent; }, function(_v) { percent = _v; } ); // HtmlView Page linking property 'Value' for element 'Percentage'
          _view.Percentage.setAction("OnChange", function(_data,_info) {
  //The number must be bigger or equal to one.
  if (percent<1){percent=1;}

}); // HtmlView Page setting action 'OnChange' for element 'Percentage'
          _view.Percentage.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Percentage'
          _view.Percentage.linkProperty("Display",  function() { return (choice==4&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Percentage'
          _view.Percentsign.linkProperty("Display",  function() { return (choice==4&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Percentsign'
          _view.PercentageButton.setAction("OnClick", function(_data,_info) {
  //Gets the position and Size of the first box
  var oposX = eval("_view.group"+c).getProperty("X");
  var oposY = eval("_view.group"+c).getProperty("Y");
  var osize = eval("_view.group"+c).getProperty("SizeX");
  //Sets the new position and size of the second box
  var posX = oposX;
  var posY = oposY-1.5;
  var size = osize*percent/100;
  eval("_view.group"+d).setProperty("SizeX",size)
  eval("_view.group"+d).setProperty("Y",posY)
  eval("_view.group"+d).setProperty("X",posX)
  //Sets the texts on the left of the first box
   _view._addElement(EJSS_DRAWING2D.text,"perctext"+c, eval("_view.group"+c)) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
        .setProperty("Text","100%") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text2'
  //      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text2'
        .setProperty("Font",font)
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'dummyshape'
        ;
  //Sets the text of the second box on it's left
   _view._addElement(EJSS_DRAWING2D.text,"perctext"+d, eval("_view.group"+d)) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
        .setProperty("Text",percent+"%") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text2'
  //      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text2'
        .setProperty("Font",font)
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'dummyshape'
        ;

}); // HtmlView Page setting action 'OnClick' for element 'PercentageButton'
          _view.PercentageButton.linkProperty("Display",  function() { return (choice==4&&sizes.length>1)?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'PercentageButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.CurlyBrackets.setAction("OnClick", function(_data,_info) {
  //Sets the random position of the {
  var posX = Math.random()*9; var posY = Math.random()*9;
  //Creates {
  _view._addElement(EJSS_DRAWING2D.text,"misc"+b, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("X",posX) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 
        .setProperty("Y",posY) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Font",fontb) // EJsS HtmlView.HtmlView Page: setting property 'Font' for element
        .setProperty("Text","}") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        ;
  //Updates the index of misc stuff
  b+=1;

}); // HtmlView Page setting action 'OnClick' for element 'CurlyBrackets'
          _view.textField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textField'
          _view.TextSpawn.setAction("OnClick", function(_data,_info) {
  //Randomise the position of the text
  var posX = Math.random()*9; var posY = Math.random()*9;
  //Generates the text
  _view._addElement(EJSS_DRAWING2D.text,"misc"+b, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("X",posX) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",posY) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("Text",_view.textField.getProperty("Value")) // EJsS HtmlView.HtmlView Page: setting property 'Text' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("Font",font)// EJsS HtmlView.HtmlView Page: setting property 'Font' for element
        ;
  //Update the index of the misc
  b+=1;

}); // HtmlView Page setting action 'OnClick' for element 'TextSpawn'
          _view.Align_Left.setAction("OnClick", function(_data,_info) {
  //Works only if there are boxes
  if(sizes.length>0)
  {
    //Sets property 'X' of all the boxes
    for (var i = 0; i<sizes.length;i++)
    {eval("_view.group"+i).setProperty("X",0);}
  }

}); // HtmlView Page setting action 'OnClick' for element 'Align_Left'
          _view.ArrowSpawn.setAction("OnClick", function(_data,_info) {
  //Generates an arrow
      _view._addElement(EJSS_DRAWING2D.arrow,"misc"+b, _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element
        .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element
        .setProperty("EnabledSize","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element
        .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element
        .setProperty("X",5+Math.random()*2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element
        .setProperty("Y",5+Math.random()*2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element
        .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element
        .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element
        .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element
        .setProperty("Visibility",true)// EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element
        .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element
        ;
  //Updates index of misc
  b+=1;

}); // HtmlView Page setting action 'OnClick' for element 'ArrowSpawn'
          _view.ClearMisc.setAction("OnClick", function(_data,_info) {
  //Hides the visibility of the perc text if any
  for (var i =0;i<sizes.length;i++){
    try{
    eval("_view.perctext"+i).setProperty("Visibility",false);
    }
  catch(err){}
  }
  //Hides the visibility of all the misc stuff
  for (var i=0;i<b+1;i++)
    {
    try{
    eval("_view.misc"+i).setProperty("Visibility",false);
    }
    catch(err){}
    }

}); // HtmlView Page setting action 'OnClick' for element 'ClearMisc'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return "cooX[0]="+cooX[0]+"\ncooY[0]="+cooY[0]; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "a="+a; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.shape0.linkProperty("SizeX",  function() { return dragX0; }, function(_v) { dragX0 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'shape0'
          _view.shape0.linkProperty("LineColor",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'LineColor' for element 'shape0'
          _view.shapecircle0.linkProperty("X",  function() { return dragX0; }, function(_v) { dragX0 = _v; } ); // HtmlView Page linking property 'X' for element 'shapecircle0'
          _view.shape1.linkProperty("SizeX",  function() { return dragX1; }, function(_v) { dragX1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'shape1'
          _view.shape1.linkProperty("LineColor",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'LineColor' for element 'shape1'
          _view.shapecircle1.linkProperty("X",  function() { return dragX1; }, function(_v) { dragX1 = _v; } ); // HtmlView Page linking property 'X' for element 'shapecircle1'
          _view.shape2.linkProperty("SizeX",  function() { return dragX2; }, function(_v) { dragX2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'shape2'
          _view.shape2.linkProperty("LineColor",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'LineColor' for element 'shape2'
          _view.shapecircle2.linkProperty("X",  function() { return dragX2; }, function(_v) { dragX2 = _v; } ); // HtmlView Page linking property 'X' for element 'shapecircle2'
          _view.shape.linkProperty("SizeX",  function() { return debugx; }, function(_v) { debugx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'shape'
          _view.shape.linkProperty("LineColor",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'LineColor' for element 'shape'
          _view.shape222.linkProperty("X",  function() { return debugx; }, function(_v) { debugx = _v; } ); // HtmlView Page linking property 'X' for element 'shape222'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function MaPS_frem1_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = MaPS_frem1_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./MaPS_frem1_Intro_1.html');

  return _view;
} // end of main function

function MaPS_frem1_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel2", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'executionPanel2'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel2'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Create_Rectangle", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Create_Rectangle'
      .setProperty("Tooltip","Creates a Box with a unique ID") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Create_Rectangle'
      .setProperty("Text","Box Spawn") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Create_Rectangle'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"ColorBox", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'ColorBox'
      .setProperty("Tooltip","Changes color of the selected element") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'ColorBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"IDSelected", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'IDSelected'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'IDSelected'
      .setProperty("Tooltip","The First Index Selected") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'IDSelected'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'IDSelected'
      .setProperty("Text","ID:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'IDSelected'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slider'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'slider'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider'
      .setProperty("Tooltip","First Index of the rectangles") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'slider'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'slider'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Hide", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Hide'
      .setProperty("Tooltip","Toggle Visibility of the first selected box") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Hide'
      .setProperty("Text","Hide?") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Hide'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"choiceBox", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'choiceBox'
      .setProperty("Tooltip","Selects the mode. Note that Ratio and Percentage only shows once there are two or more boxes.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'choiceBox'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Numerator", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Numerator'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Numerator'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Numerator'
      .setProperty("Tooltip","Input Numerator here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Numerator'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Numerator'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"dividor", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'dividor'
      .setProperty("Background","orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'dividor'
      .setProperty("Tooltip","/") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'dividor'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'dividor'
      .setProperty("Text","/") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dividor'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Denominator", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Denominator'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Denominator'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Denominator'
      .setProperty("Tooltip","Input Denominator Here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Denominator'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Denominator'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Fractions", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Fractions'
      .setProperty("Tooltip","Generates the box's fractions") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Fractions'
      .setProperty("Text","Fractions") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Fractions'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"DividerField", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'DividerField'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'DividerField'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'DividerField'
      .setProperty("Tooltip","Select how many parts you want to divide by") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'DividerField'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'DividerField'
      ;

    _view._addElement(EJSS_INTERFACE.button,"DividerEqually", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'DividerEqually'
      .setProperty("Tooltip","Divides the box equally") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'DividerEqually'
      .setProperty("Text","Divide Equally") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'DividerEqually'
      ;

    _view._addElement(EJSS_INTERFACE.button,"DividerUnequally", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'DividerUnequally'
      .setProperty("Tooltip","Divides the Box unequally") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'DividerUnequally'
      .setProperty("Text","Unequally") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'DividerUnequally'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"IDSelected2", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'IDSelected2'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'IDSelected2'
      .setProperty("Tooltip","Displays the 2nd ID of the boxes") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'IDSelected2'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'IDSelected2'
      .setProperty("Text","ID:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'IDSelected2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderid", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderid'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'sliderid'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderid'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderid'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'sliderid'
      .setProperty("Tooltip","Toggle the index of the second box. Only works if there are three or more objects") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'sliderid'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'sliderid'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'sliderid'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"RatioA", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioA'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'RatioA'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'RatioA'
      .setProperty("Tooltip","Input the front ratio here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioA'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'RatioA'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"RatioSign", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioSign'
      .setProperty("Background","orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'RatioSign'
      .setProperty("Tooltip",":") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioSign'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'RatioSign'
      .setProperty("Text",":") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'RatioSign'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"RatioB", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioB'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'RatioB'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'RatioB'
      .setProperty("Tooltip","Input the back ratio here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioB'
      .setProperty("Foreground","orange") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'RatioB'
      ;

    _view._addElement(EJSS_INTERFACE.button,"RatioButton", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'RatioButton'
      .setProperty("Tooltip","Set's the ratio of the two selected box.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'RatioButton'
      .setProperty("Text","Ratio") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'RatioButton'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Percentage", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Percentage'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Percentage'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Percentage'
      .setProperty("Tooltip","Sets the percentage of the second box") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Percentage'
      .setProperty("Foreground","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Percentage'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Percentsign", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'Percentsign'
      .setProperty("Background","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Percentsign'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Percentsign'
      .setProperty("Text","%") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Percentsign'
      ;

    _view._addElement(EJSS_INTERFACE.button,"PercentageButton", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'PercentageButton'
      .setProperty("Tooltip","Changes the second box size as a percentage of the first.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'PercentageButton'
      .setProperty("Text","Percentage") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'PercentageButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Resets the Simulation") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.button,"CurlyBrackets", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'CurlyBrackets'
      .setProperty("Tooltip","Creates a Curly Brackets") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'CurlyBrackets'
      .setProperty("Text","}") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'CurlyBrackets'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"textField", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textField'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'textField'
      .setProperty("Tooltip","Write anything here") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'textField'
      .setProperty("Value","Text") // EJsS HtmlView.HtmlView Page: setting property 'Value' for element 'textField'
      ;

    _view._addElement(EJSS_INTERFACE.button,"TextSpawn", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'TextSpawn'
      .setProperty("Tooltip","Creates the text from the field") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'TextSpawn'
      .setProperty("Text","Text Spawn") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'TextSpawn'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Align_Left", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Align_Left'
      .setProperty("Tooltip","Align everything to the left.") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Align_Left'
      .setProperty("Text","Align Left") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Align_Left'
      ;

    _view._addElement(EJSS_INTERFACE.button,"ArrowSpawn", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ArrowSpawn'
      .setProperty("Tooltip","Creates a draggable and resizeable arrow") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'ArrowSpawn'
      .setProperty("Text","Arrow Spawn") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ArrowSpawn'
      ;

    _view._addElement(EJSS_INTERFACE.button,"ClearMisc", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ClearMisc'
      .setProperty("Text","Clear Misc") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ClearMisc'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","80vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group0", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group0'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'group0'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group0'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape0", _view.group0) // EJsS HtmlView.HtmlView Page: declaration of element 'shape0'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape0'
      .setProperty("FillColor",0) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape0'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape0'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape0'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape0'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape0'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape0'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape0'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape0'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapecircle0", _view.group0) // EJsS HtmlView.HtmlView Page: declaration of element 'shapecircle0'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shapecircle0'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapecircle0'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapecircle0'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shapecircle0'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapecircle0'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapecircle0'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shapecircle0'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapecircle0'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapecircle0'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shapecircle0'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group1'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'group1'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group1'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape1", _view.group1) // EJsS HtmlView.HtmlView Page: declaration of element 'shape1'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape1'
      .setProperty("FillColor",1) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape1'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape1'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape1'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape1'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape1'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape1'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape1'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape1'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapecircle1", _view.group1) // EJsS HtmlView.HtmlView Page: declaration of element 'shapecircle1'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shapecircle1'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapecircle1'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapecircle1'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shapecircle1'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapecircle1'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapecircle1'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shapecircle1'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapecircle1'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapecircle1'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shapecircle1'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'group2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape2'
      .setProperty("FillColor",2) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape2'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapecircle2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'shapecircle2'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shapecircle2'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapecircle2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapecircle2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shapecircle2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapecircle2'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapecircle2'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shapecircle2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapecircle2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapecircle2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shapecircle2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"grouptesting", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'grouptesting'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'grouptesting'
      .setProperty("Y",-4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'grouptesting'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'grouptesting'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.grouptesting) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape222", _view.grouptesting) // EJsS HtmlView.HtmlView Page: declaration of element 'shape222'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape222'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape222'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape222'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape222'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape222'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape222'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape222'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape222'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape222'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Fremont Teng
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new MaPS_frem1("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
