<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Symmetry of Shape</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function symmetryshape(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var font; // EjsS Model.Variables.Var Table.font
  var cta; // EjsS Model.Variables.Var Table.cta
  var theta; // EjsS Model.Variables.Var Table.theta
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var a; // EjsS Model.Variables.Var Table.a
  var achange; // EjsS Model.Variables.Var Table.achange
  var achanges; // EjsS Model.Variables.Var Table.achanges
  var b; // EjsS Model.Variables.Var Table.b
  var bchange; // EjsS Model.Variables.Var Table.bchange
  var bchanges; // EjsS Model.Variables.Var Table.bchanges
  var c; // EjsS Model.Variables.Var Table.c
  var cchange; // EjsS Model.Variables.Var Table.cchange
  var cchanges; // EjsS Model.Variables.Var Table.cchanges
  var d; // EjsS Model.Variables.Var Table.d
  var dchange; // EjsS Model.Variables.Var Table.dchange
  var dchanges; // EjsS Model.Variables.Var Table.dchanges
  var e; // EjsS Model.Variables.Var Table.e
  var f; // EjsS Model.Variables.Var Table.f
  var letter; // EjsS Model.Variables.Var Table.letter
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var ty; // EjsS Model.Variables.Var Table.ty
  var dty; // EjsS Model.Variables.Var Table.dty
  var n; // EjsS Model.Variables.Var Table.n
  var t2; // EjsS Model.Variables.Var Table.t2
  var dt2; // EjsS Model.Variables.Var Table.dt2
  var t3; // EjsS Model.Variables.Var Table.t3
  var dt3; // EjsS Model.Variables.Var Table.dt3
  var letterxy; // EjsS Model.Variables.Var Table.letterxy
  var letterxystay; // EjsS Model.Variables.Var Table.letterxystay
  var letterxyfold; // EjsS Model.Variables.Var Table.letterxyfold
  var letterxystaytop; // EjsS Model.Variables.Var Table.letterxystaytop
  var letterxyfoldbot; // EjsS Model.Variables.Var Table.letterxyfoldbot
  var showfoldlr; // EjsS Model.Variables.Var Table.showfoldlr
  var showfoldbt; // EjsS Model.Variables.Var Table.showfoldbt
  var showfoldlrs; // EjsS Model.Variables.Var Table.showfoldlrs
  var showfoldbts; // EjsS Model.Variables.Var Table.showfoldbts
  var showlrbt; // EjsS Model.Variables.Var Table.showlrbt
  var showbt; // EjsS Model.Variables.Var Table.showbt
  var showlrs; // EjsS Model.Variables.Var Table.showlrs
  var showbts; // EjsS Model.Variables.Var Table.showbts
  var statetopbot; // EjsS Model.Variables.Var Table.statetopbot

  var shapetype; // EjsS Model.Variables.rectangle.shapetype
  var ctasquare; // EjsS Model.Variables.rectangle.ctasquare
  var square45show; // EjsS Model.Variables.rectangle.square45show
  var showrectanglelr; // EjsS Model.Variables.rectangle.showrectanglelr
  var color0; // EjsS Model.Variables.rectangle.color0
  var color1; // EjsS Model.Variables.rectangle.color1
  var clr; // EjsS Model.Variables.rectangle.clr
  var colorline; // EjsS Model.Variables.rectangle.colorline
  var colorline2; // EjsS Model.Variables.rectangle.colorline2
  var colorline3; // EjsS Model.Variables.rectangle.colorline3
  var colorline4; // EjsS Model.Variables.rectangle.colorline4
  var colorline5; // EjsS Model.Variables.rectangle.colorline5
  var colorline6; // EjsS Model.Variables.rectangle.colorline6
  var colorline7; // EjsS Model.Variables.rectangle.colorline7
  var colorline8; // EjsS Model.Variables.rectangle.colorline8
  var colorline9; // EjsS Model.Variables.rectangle.colorline9
  var colorline10; // EjsS Model.Variables.rectangle.colorline10

  var parts; // EjsS Model.Variables.circle.parts
  var circlex; // EjsS Model.Variables.circle.circlex
  var circley; // EjsS Model.Variables.circle.circley
  var pacmancirclex; // EjsS Model.Variables.circle.pacmancirclex
  var pacmancircley; // EjsS Model.Variables.circle.pacmancircley
  var pacmancirclexsymmetry; // EjsS Model.Variables.circle.pacmancirclexsymmetry
  var pacmancircleysymmetry; // EjsS Model.Variables.circle.pacmancircleysymmetry
  var pointcirclex; // EjsS Model.Variables.circle.pointcirclex
  var pointcircley; // EjsS Model.Variables.circle.pointcircley
  var symmetrylinen; // EjsS Model.Variables.circle.symmetrylinen
  var thetasymmetrylinen; // EjsS Model.Variables.circle.thetasymmetrylinen
  var counter; // EjsS Model.Variables.circle.counter
  var object; // EjsS Model.Variables.circle.object
  var ovalsizex; // EjsS Model.Variables.circle.ovalsizex
  var ovalsizey; // EjsS Model.Variables.circle.ovalsizey
  var showmainline; // EjsS Model.Variables.circle.showmainline
  var xdrag; // EjsS Model.Variables.circle.xdrag
  var ydrag; // EjsS Model.Variables.circle.ydrag
  var showovallr; // EjsS Model.Variables.circle.showovallr

  var ctatriangle; // EjsS Model.Variables.triangle.ctatriangle
  var triangle60show; // EjsS Model.Variables.triangle.triangle60show

  var ctapentagon; // EjsS Model.Variables.pentagon.ctapentagon
  var pentagon60show; // EjsS Model.Variables.pentagon.pentagon60show
  var thetarotate72; // EjsS Model.Variables.pentagon.thetarotate72

  var showarrowlr; // EjsS Model.Variables.arrows.showarrowlr
  var showarrowbt; // EjsS Model.Variables.arrows.showarrowbt

  var help; // EjsS Model.Variables.mirror.help
  var symmetrylinev; // EjsS Model.Variables.mirror.symmetrylinev
  var symmetrylineh; // EjsS Model.Variables.mirror.symmetrylineh
  var mirrorx; // EjsS Model.Variables.mirror.mirrorx
  var mirrory; // EjsS Model.Variables.mirror.mirrory
  var mirrorsizex; // EjsS Model.Variables.mirror.mirrorsizex
  var mirrorsizey; // EjsS Model.Variables.mirror.mirrorsizey
  var elementinteractedmirror; // EjsS Model.Variables.mirror.elementinteractedmirror
  var xtext; // EjsS Model.Variables.mirror.xtext
  var ytext; // EjsS Model.Variables.mirror.ytext
  var textshow; // EjsS Model.Variables.mirror.textshow
  var xtextmirror; // EjsS Model.Variables.mirror.xtextmirror
  var ytextmirror; // EjsS Model.Variables.mirror.ytextmirror
  var scalextext; // EjsS Model.Variables.mirror.scalextext
  var scaleytext; // EjsS Model.Variables.mirror.scaleytext
  var scalextextv; // EjsS Model.Variables.mirror.scalextextv
  var scaleytextv; // EjsS Model.Variables.mirror.scaleytextv
  var movex; // EjsS Model.Variables.mirror.movex
  var movey; // EjsS Model.Variables.mirror.movey
  var movevx; // EjsS Model.Variables.mirror.movevx
  var movevy; // EjsS Model.Variables.mirror.movevy
  var fontsize; // EjsS Model.Variables.mirror.fontsize

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var a2; // EjsS Model.Variables.SECONDFOLD.a2
  var achange2; // EjsS Model.Variables.SECONDFOLD.achange2
  var b2; // EjsS Model.Variables.SECONDFOLD.b2
  var bchange2; // EjsS Model.Variables.SECONDFOLD.bchange2
  var c2; // EjsS Model.Variables.SECONDFOLD.c2
  var cchange2; // EjsS Model.Variables.SECONDFOLD.cchange2
  var d2; // EjsS Model.Variables.SECONDFOLD.d2
  var dchange2; // EjsS Model.Variables.SECONDFOLD.dchange2
  var e2; // EjsS Model.Variables.SECONDFOLD.e2
  var f2; // EjsS Model.Variables.SECONDFOLD.f2
  var t22; // EjsS Model.Variables.SECONDFOLD.t22
  var dt22; // EjsS Model.Variables.SECONDFOLD.dt22

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      font : font,
      cta : cta,
      theta : theta,
      xmin : xmin,
      a : a,
      achange : achange,
      achanges : achanges,
      b : b,
      bchange : bchange,
      bchanges : bchanges,
      c : c,
      cchange : cchange,
      cchanges : cchanges,
      d : d,
      dchange : dchange,
      dchanges : dchanges,
      e : e,
      f : f,
      letter : letter,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      t : t,
      dt : dt,
      ty : ty,
      dty : dty,
      n : n,
      t2 : t2,
      dt2 : dt2,
      t3 : t3,
      dt3 : dt3,
      letterxy : letterxy,
      letterxystay : letterxystay,
      letterxyfold : letterxyfold,
      letterxystaytop : letterxystaytop,
      letterxyfoldbot : letterxyfoldbot,
      showfoldlr : showfoldlr,
      showfoldbt : showfoldbt,
      showfoldlrs : showfoldlrs,
      showfoldbts : showfoldbts,
      showlrbt : showlrbt,
      showbt : showbt,
      showlrs : showlrs,
      showbts : showbts,
      statetopbot : statetopbot,
      shapetype : shapetype,
      ctasquare : ctasquare,
      square45show : square45show,
      showrectanglelr : showrectanglelr,
      color0 : color0,
      color1 : color1,
      clr : clr,
      colorline : colorline,
      colorline2 : colorline2,
      colorline3 : colorline3,
      colorline4 : colorline4,
      colorline5 : colorline5,
      colorline6 : colorline6,
      colorline7 : colorline7,
      colorline8 : colorline8,
      colorline9 : colorline9,
      colorline10 : colorline10,
      parts : parts,
      circlex : circlex,
      circley : circley,
      pacmancirclex : pacmancirclex,
      pacmancircley : pacmancircley,
      pacmancirclexsymmetry : pacmancirclexsymmetry,
      pacmancircleysymmetry : pacmancircleysymmetry,
      pointcirclex : pointcirclex,
      pointcircley : pointcircley,
      symmetrylinen : symmetrylinen,
      thetasymmetrylinen : thetasymmetrylinen,
      counter : counter,
      object : object,
      ovalsizex : ovalsizex,
      ovalsizey : ovalsizey,
      showmainline : showmainline,
      xdrag : xdrag,
      ydrag : ydrag,
      showovallr : showovallr,
      ctatriangle : ctatriangle,
      triangle60show : triangle60show,
      ctapentagon : ctapentagon,
      pentagon60show : pentagon60show,
      thetarotate72 : thetarotate72,
      showarrowlr : showarrowlr,
      showarrowbt : showarrowbt,
      help : help,
      symmetrylinev : symmetrylinev,
      symmetrylineh : symmetrylineh,
      mirrorx : mirrorx,
      mirrory : mirrory,
      mirrorsizex : mirrorsizex,
      mirrorsizey : mirrorsizey,
      elementinteractedmirror : elementinteractedmirror,
      xtext : xtext,
      ytext : ytext,
      textshow : textshow,
      xtextmirror : xtextmirror,
      ytextmirror : ytextmirror,
      scalextext : scalextext,
      scaleytext : scaleytext,
      scalextextv : scalextextv,
      scaleytextv : scaleytextv,
      movex : movex,
      movey : movey,
      movevx : movevx,
      movevy : movevy,
      fontsize : fontsize,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      a2 : a2,
      achange2 : achange2,
      b2 : b2,
      bchange2 : bchange2,
      c2 : c2,
      cchange2 : cchange2,
      d2 : d2,
      dchange2 : dchange2,
      e2 : e2,
      f2 : f2,
      t22 : t22,
      dt22 : dt22
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.achange != "undefined") achange = json.achange;
    if(typeof json.achanges != "undefined") achanges = json.achanges;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.bchange != "undefined") bchange = json.bchange;
    if(typeof json.bchanges != "undefined") bchanges = json.bchanges;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.cchange != "undefined") cchange = json.cchange;
    if(typeof json.cchanges != "undefined") cchanges = json.cchanges;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.dchange != "undefined") dchange = json.dchange;
    if(typeof json.dchanges != "undefined") dchanges = json.dchanges;
    if(typeof json.e != "undefined") e = json.e;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.letter != "undefined") letter = json.letter;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.ty != "undefined") ty = json.ty;
    if(typeof json.dty != "undefined") dty = json.dty;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.t2 != "undefined") t2 = json.t2;
    if(typeof json.dt2 != "undefined") dt2 = json.dt2;
    if(typeof json.t3 != "undefined") t3 = json.t3;
    if(typeof json.dt3 != "undefined") dt3 = json.dt3;
    if(typeof json.letterxy != "undefined") letterxy = json.letterxy;
    if(typeof json.letterxystay != "undefined") letterxystay = json.letterxystay;
    if(typeof json.letterxyfold != "undefined") letterxyfold = json.letterxyfold;
    if(typeof json.letterxystaytop != "undefined") letterxystaytop = json.letterxystaytop;
    if(typeof json.letterxyfoldbot != "undefined") letterxyfoldbot = json.letterxyfoldbot;
    if(typeof json.showfoldlr != "undefined") showfoldlr = json.showfoldlr;
    if(typeof json.showfoldbt != "undefined") showfoldbt = json.showfoldbt;
    if(typeof json.showfoldlrs != "undefined") showfoldlrs = json.showfoldlrs;
    if(typeof json.showfoldbts != "undefined") showfoldbts = json.showfoldbts;
    if(typeof json.showlrbt != "undefined") showlrbt = json.showlrbt;
    if(typeof json.showbt != "undefined") showbt = json.showbt;
    if(typeof json.showlrs != "undefined") showlrs = json.showlrs;
    if(typeof json.showbts != "undefined") showbts = json.showbts;
    if(typeof json.statetopbot != "undefined") statetopbot = json.statetopbot;
    if(typeof json.shapetype != "undefined") shapetype = json.shapetype;
    if(typeof json.ctasquare != "undefined") ctasquare = json.ctasquare;
    if(typeof json.square45show != "undefined") square45show = json.square45show;
    if(typeof json.showrectanglelr != "undefined") showrectanglelr = json.showrectanglelr;
    if(typeof json.color0 != "undefined") color0 = json.color0;
    if(typeof json.color1 != "undefined") color1 = json.color1;
    if(typeof json.clr != "undefined") clr = json.clr;
    if(typeof json.colorline != "undefined") colorline = json.colorline;
    if(typeof json.colorline2 != "undefined") colorline2 = json.colorline2;
    if(typeof json.colorline3 != "undefined") colorline3 = json.colorline3;
    if(typeof json.colorline4 != "undefined") colorline4 = json.colorline4;
    if(typeof json.colorline5 != "undefined") colorline5 = json.colorline5;
    if(typeof json.colorline6 != "undefined") colorline6 = json.colorline6;
    if(typeof json.colorline7 != "undefined") colorline7 = json.colorline7;
    if(typeof json.colorline8 != "undefined") colorline8 = json.colorline8;
    if(typeof json.colorline9 != "undefined") colorline9 = json.colorline9;
    if(typeof json.colorline10 != "undefined") colorline10 = json.colorline10;
    if(typeof json.parts != "undefined") parts = json.parts;
    if(typeof json.circlex != "undefined") circlex = json.circlex;
    if(typeof json.circley != "undefined") circley = json.circley;
    if(typeof json.pacmancirclex != "undefined") pacmancirclex = json.pacmancirclex;
    if(typeof json.pacmancircley != "undefined") pacmancircley = json.pacmancircley;
    if(typeof json.pacmancirclexsymmetry != "undefined") pacmancirclexsymmetry = json.pacmancirclexsymmetry;
    if(typeof json.pacmancircleysymmetry != "undefined") pacmancircleysymmetry = json.pacmancircleysymmetry;
    if(typeof json.pointcirclex != "undefined") pointcirclex = json.pointcirclex;
    if(typeof json.pointcircley != "undefined") pointcircley = json.pointcircley;
    if(typeof json.symmetrylinen != "undefined") symmetrylinen = json.symmetrylinen;
    if(typeof json.thetasymmetrylinen != "undefined") thetasymmetrylinen = json.thetasymmetrylinen;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.object != "undefined") object = json.object;
    if(typeof json.ovalsizex != "undefined") ovalsizex = json.ovalsizex;
    if(typeof json.ovalsizey != "undefined") ovalsizey = json.ovalsizey;
    if(typeof json.showmainline != "undefined") showmainline = json.showmainline;
    if(typeof json.xdrag != "undefined") xdrag = json.xdrag;
    if(typeof json.ydrag != "undefined") ydrag = json.ydrag;
    if(typeof json.showovallr != "undefined") showovallr = json.showovallr;
    if(typeof json.ctatriangle != "undefined") ctatriangle = json.ctatriangle;
    if(typeof json.triangle60show != "undefined") triangle60show = json.triangle60show;
    if(typeof json.ctapentagon != "undefined") ctapentagon = json.ctapentagon;
    if(typeof json.pentagon60show != "undefined") pentagon60show = json.pentagon60show;
    if(typeof json.thetarotate72 != "undefined") thetarotate72 = json.thetarotate72;
    if(typeof json.showarrowlr != "undefined") showarrowlr = json.showarrowlr;
    if(typeof json.showarrowbt != "undefined") showarrowbt = json.showarrowbt;
    if(typeof json.help != "undefined") help = json.help;
    if(typeof json.symmetrylinev != "undefined") symmetrylinev = json.symmetrylinev;
    if(typeof json.symmetrylineh != "undefined") symmetrylineh = json.symmetrylineh;
    if(typeof json.mirrorx != "undefined") mirrorx = json.mirrorx;
    if(typeof json.mirrory != "undefined") mirrory = json.mirrory;
    if(typeof json.mirrorsizex != "undefined") mirrorsizex = json.mirrorsizex;
    if(typeof json.mirrorsizey != "undefined") mirrorsizey = json.mirrorsizey;
    if(typeof json.elementinteractedmirror != "undefined") elementinteractedmirror = json.elementinteractedmirror;
    if(typeof json.xtext != "undefined") xtext = json.xtext;
    if(typeof json.ytext != "undefined") ytext = json.ytext;
    if(typeof json.textshow != "undefined") textshow = json.textshow;
    if(typeof json.xtextmirror != "undefined") xtextmirror = json.xtextmirror;
    if(typeof json.ytextmirror != "undefined") ytextmirror = json.ytextmirror;
    if(typeof json.scalextext != "undefined") scalextext = json.scalextext;
    if(typeof json.scaleytext != "undefined") scaleytext = json.scaleytext;
    if(typeof json.scalextextv != "undefined") scalextextv = json.scalextextv;
    if(typeof json.scaleytextv != "undefined") scaleytextv = json.scaleytextv;
    if(typeof json.movex != "undefined") movex = json.movex;
    if(typeof json.movey != "undefined") movey = json.movey;
    if(typeof json.movevx != "undefined") movevx = json.movevx;
    if(typeof json.movevy != "undefined") movevy = json.movevy;
    if(typeof json.fontsize != "undefined") fontsize = json.fontsize;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.a2 != "undefined") a2 = json.a2;
    if(typeof json.achange2 != "undefined") achange2 = json.achange2;
    if(typeof json.b2 != "undefined") b2 = json.b2;
    if(typeof json.bchange2 != "undefined") bchange2 = json.bchange2;
    if(typeof json.c2 != "undefined") c2 = json.c2;
    if(typeof json.cchange2 != "undefined") cchange2 = json.cchange2;
    if(typeof json.d2 != "undefined") d2 = json.d2;
    if(typeof json.dchange2 != "undefined") dchange2 = json.dchange2;
    if(typeof json.e2 != "undefined") e2 = json.e2;
    if(typeof json.f2 != "undefined") f2 = json.f2;
    if(typeof json.t22 != "undefined") t22 = json.t22;
    if(typeof json.dt22 != "undefined") dt22 = json.dt22;
  };

  _model._inputAndPublicParameters = ["font",  "cta",  "theta",  "xmin",  "a",  "achange",  "achanges",  "b",  "bchange",  "bchanges",  "c",  "cchange",  "cchanges",  "d",  "dchange",  "dchanges",  "e",  "f",  "letter",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "t",  "dt",  "ty",  "dty",  "n",  "t2",  "dt2",  "t3",  "dt3",  "letterxy",  "letterxystay",  "letterxyfold",  "letterxystaytop",  "letterxyfoldbot",  "showfoldlr",  "showfoldbt",  "showfoldlrs",  "showfoldbts",  "showlrbt",  "showbt",  "showlrs",  "showbts",  "statetopbot",  "shapetype",  "ctasquare",  "square45show",  "showrectanglelr",  "color0",  "color1",  "clr",  "colorline",  "colorline2",  "colorline3",  "colorline4",  "colorline5",  "colorline6",  "colorline7",  "colorline8",  "colorline9",  "colorline10",  "parts",  "circlex",  "circley",  "pacmancirclex",  "pacmancircley",  "pacmancirclexsymmetry",  "pacmancircleysymmetry",  "pointcirclex",  "pointcircley",  "symmetrylinen",  "thetasymmetrylinen",  "counter",  "object",  "ovalsizex",  "ovalsizey",  "showmainline",  "xdrag",  "ydrag",  "showovallr",  "ctatriangle",  "triangle60show",  "ctapentagon",  "pentagon60show",  "thetarotate72",  "showarrowlr",  "showarrowbt",  "help",  "symmetrylinev",  "symmetrylineh",  "mirrorx",  "mirrory",  "mirrorsizex",  "mirrorsizey",  "elementinteractedmirror",  "xtext",  "ytext",  "textshow",  "xtextmirror",  "ytextmirror",  "scalextext",  "scaleytext",  "scalextextv",  "scaleytextv",  "movex",  "movey",  "movevx",  "movevy",  "fontsize",  "isAndroid",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "a2",  "achange2",  "b2",  "bchange2",  "c2",  "cchange2",  "d2",  "dchange2",  "e2",  "f2",  "t22",  "dt22"]; 

  _model._outputAndPublicParameters = ["font",  "cta",  "theta",  "xmin",  "a",  "achange",  "achanges",  "b",  "bchange",  "bchanges",  "c",  "cchange",  "cchanges",  "d",  "dchange",  "dchanges",  "e",  "f",  "letter",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "t",  "dt",  "ty",  "dty",  "n",  "t2",  "dt2",  "t3",  "dt3",  "letterxy",  "letterxystay",  "letterxyfold",  "letterxystaytop",  "letterxyfoldbot",  "showfoldlr",  "showfoldbt",  "showfoldlrs",  "showfoldbts",  "showlrbt",  "showbt",  "showlrs",  "showbts",  "statetopbot",  "shapetype",  "ctasquare",  "square45show",  "showrectanglelr",  "color0",  "color1",  "clr",  "colorline",  "colorline2",  "colorline3",  "colorline4",  "colorline5",  "colorline6",  "colorline7",  "colorline8",  "colorline9",  "colorline10",  "parts",  "circlex",  "circley",  "pacmancirclex",  "pacmancircley",  "pacmancirclexsymmetry",  "pacmancircleysymmetry",  "pointcirclex",  "pointcircley",  "symmetrylinen",  "thetasymmetrylinen",  "counter",  "object",  "ovalsizex",  "ovalsizey",  "showmainline",  "xdrag",  "ydrag",  "showovallr",  "ctatriangle",  "triangle60show",  "ctapentagon",  "pentagon60show",  "thetarotate72",  "showarrowlr",  "showarrowbt",  "help",  "symmetrylinev",  "symmetrylineh",  "mirrorx",  "mirrory",  "mirrorsizex",  "mirrorsizey",  "elementinteractedmirror",  "xtext",  "ytext",  "textshow",  "xtextmirror",  "ytextmirror",  "scalextext",  "scaleytext",  "scalextextv",  "scaleytextv",  "movex",  "movey",  "movevx",  "movevy",  "fontsize",  "isAndroid",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "a2",  "achange2",  "b2",  "bchange2",  "c2",  "cchange2",  "d2",  "dchange2",  "e2",  "f2",  "t22",  "dt22"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["circle"] = true;
    __pagesEnabled["foldtotheleft"] = true;
    __pagesEnabled["reachRIGHT"] = true;
    __pagesEnabled["reachbottom"] = true;
    __pagesEnabled["reachmidLR"] = true;
    __pagesEnabled["reachmidBT"] = true;
    __pagesEnabled["reachbackLEFT"] = true;
    __pagesEnabled["reachtopbackagain"] = true;
  });

  _model.addToReset(function() {
    font = "normal normal 2vw "; // EjsS Model.Variables.Var Table.font
    cta = Math.PI; // EjsS Model.Variables.Var Table.cta
    theta = 0; // EjsS Model.Variables.Var Table.theta
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    a = 1; // EjsS Model.Variables.Var Table.a
    achange = 0; // EjsS Model.Variables.Var Table.achange
    achanges = 0; // EjsS Model.Variables.Var Table.achanges
    b = 0; // EjsS Model.Variables.Var Table.b
    bchange = 0; // EjsS Model.Variables.Var Table.bchange
    bchanges = 0; // EjsS Model.Variables.Var Table.bchanges
    c = 0; // EjsS Model.Variables.Var Table.c
    cchange = -0.25; // EjsS Model.Variables.Var Table.cchange
    cchanges = -0.25; // EjsS Model.Variables.Var Table.cchanges
    d = 1; // EjsS Model.Variables.Var Table.d
    dchange = -0.5; // EjsS Model.Variables.Var Table.dchange
    dchanges = -0.5; // EjsS Model.Variables.Var Table.dchanges
    e = 0; // EjsS Model.Variables.Var Table.e
    f = 0; // EjsS Model.Variables.Var Table.f
    letter = "A"; // EjsS Model.Variables.Var Table.letter
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -0.5; // EjsS Model.Variables.Var Table.ymin
    ymax = 0.5; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "click on the red dots \nto animate symmetry folding \nalong that line"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.1; // EjsS Model.Variables.Var Table.dt
    ty = 0; // EjsS Model.Variables.Var Table.ty
    dty = 0.05; // EjsS Model.Variables.Var Table.dty
    n = 20; // EjsS Model.Variables.Var Table.n
    t2 = 0; // EjsS Model.Variables.Var Table.t2
    dt2 = 0.05; // EjsS Model.Variables.Var Table.dt2
    t3 = 0; // EjsS Model.Variables.Var Table.t3
    dt3 = 0.05; // EjsS Model.Variables.Var Table.dt3
    letterxy = [[-3,-3],[-0.5,3],[0.5,3],[3,-3],[2,-3],[1,-1],[-1,-1],[-2,-3],[-3,-3],[-0.7,0,0],[0.7,0],[0,2],[-0.7,0],[-3,-3,0]];; // EjsS Model.Variables.Var Table.letterxy
    letterxystay = [[-3,-3],[-0.5,3],[0,3],[0,2],[-0.7,0],[0,0],[0,-1],[-1,-1],[-2,-3],[-3,-3]]; // EjsS Model.Variables.Var Table.letterxystay
    letterxyfold = [[0,3],[0.5,3],[3,-3],[2,-3],[1,-1],[0,-1],[0,0],[0.7,0],[0,2],[0,3]];; // EjsS Model.Variables.Var Table.letterxyfold
    letterxystaytop = [[-3,-3],[-3,3],[0,3],[0,2],[-2,2],[-2,0],[0,0],[0,-1],[-2,-1],[-2,-3],[-3,-3]]; // EjsS Model.Variables.Var Table.letterxystaytop
    letterxyfoldbot = [[0,3],[3,3],[3,-3],[2,-3],[2,-1],[0,-1],[0,0],[2,0],[2,2],[0,2],[0,3]]; // EjsS Model.Variables.Var Table.letterxyfoldbot
    showfoldlr = true; // EjsS Model.Variables.Var Table.showfoldlr
    showfoldbt = false; // EjsS Model.Variables.Var Table.showfoldbt
    showfoldlrs = true; // EjsS Model.Variables.Var Table.showfoldlrs
    showfoldbts = false; // EjsS Model.Variables.Var Table.showfoldbts
    showlrbt = true; // EjsS Model.Variables.Var Table.showlrbt
    showbt = false; // EjsS Model.Variables.Var Table.showbt
    showlrs = true; // EjsS Model.Variables.Var Table.showlrs
    showbts = false; // EjsS Model.Variables.Var Table.showbts
  });

  _model.addToReset(function() {
    shapetype = "RECTANGLE"; // EjsS Model.Variables.rectangle.shapetype
    ctasquare = pi/4; // EjsS Model.Variables.rectangle.ctasquare
    square45show = false; // EjsS Model.Variables.rectangle.square45show
    showrectanglelr = false; // EjsS Model.Variables.rectangle.showrectanglelr
    color0 = "rgba(0,0,0,1.0)"; // EjsS Model.Variables.rectangle.color0
    color1 = "rgba(128,128,128,1.0)"; // EjsS Model.Variables.rectangle.color1
    clr = 1; // EjsS Model.Variables.rectangle.clr
    colorline = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline
    colorline2 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline2
    colorline3 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline3
    colorline4 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline4
    colorline5 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline5
    colorline6 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline6
    colorline7 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline7
    colorline8 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline8
    colorline9 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline9
    colorline10 = "rgba(192,192,192,1.0)"; // EjsS Model.Variables.rectangle.colorline10
  });

  _model.addToReset(function() {
    parts = 32; // EjsS Model.Variables.circle.parts
    circlex = new Array(parts); // EjsS Model.Variables.circle.circlex
    (function () {
      var _i0;
      for (_i0=0; _i0<parts; _i0+=1) {  // EjsS Model.Variables.circle.circlex
        circlex[_i0] = 0;  // EjsS Model.Variables.circle.circlex
      }
    }());
    circley = new Array(parts); // EjsS Model.Variables.circle.circley
    (function () {
      var _i0;
      for (_i0=0; _i0<parts; _i0+=1) {  // EjsS Model.Variables.circle.circley
        circley[_i0] = 0;  // EjsS Model.Variables.circle.circley
      }
    }());
    pacmancirclex = new Array(parts+1); // EjsS Model.Variables.circle.pacmancirclex
    (function () {
      var _i0;
      for (_i0=0; _i0<parts+1; _i0+=1) {  // EjsS Model.Variables.circle.pacmancirclex
        pacmancirclex[_i0] = 0;  // EjsS Model.Variables.circle.pacmancirclex
      }
    }());
    pacmancircley = new Array(parts+1); // EjsS Model.Variables.circle.pacmancircley
    (function () {
      var _i0;
      for (_i0=0; _i0<parts+1; _i0+=1) {  // EjsS Model.Variables.circle.pacmancircley
        pacmancircley[_i0] = 0;  // EjsS Model.Variables.circle.pacmancircley
      }
    }());
    pacmancirclexsymmetry = new Array(parts+1); // EjsS Model.Variables.circle.pacmancirclexsymmetry
    (function () {
      var _i0;
      for (_i0=0; _i0<parts+1; _i0+=1) {  // EjsS Model.Variables.circle.pacmancirclexsymmetry
        pacmancirclexsymmetry[_i0] = 0;  // EjsS Model.Variables.circle.pacmancirclexsymmetry
      }
    }());
    pacmancircleysymmetry = new Array(parts+1); // EjsS Model.Variables.circle.pacmancircleysymmetry
    (function () {
      var _i0;
      for (_i0=0; _i0<parts+1; _i0+=1) {  // EjsS Model.Variables.circle.pacmancircleysymmetry
        pacmancircleysymmetry[_i0] = 0;  // EjsS Model.Variables.circle.pacmancircleysymmetry
      }
    }());
    symmetrylinen = 360; // EjsS Model.Variables.circle.symmetrylinen
    thetasymmetrylinen = new Array(symmetrylinen); // EjsS Model.Variables.circle.thetasymmetrylinen
    (function () {
      var _i0;
      for (_i0=0; _i0<symmetrylinen; _i0+=1) {  // EjsS Model.Variables.circle.thetasymmetrylinen
        thetasymmetrylinen[_i0] = 0;  // EjsS Model.Variables.circle.thetasymmetrylinen
      }
    }());
    counter = 0; // EjsS Model.Variables.circle.counter
    object = 0; // EjsS Model.Variables.circle.object
    ovalsizex = 4; // EjsS Model.Variables.circle.ovalsizex
    ovalsizey = 2; // EjsS Model.Variables.circle.ovalsizey
    showmainline = true; // EjsS Model.Variables.circle.showmainline
    xdrag = 5; // EjsS Model.Variables.circle.xdrag
    ydrag = 0; // EjsS Model.Variables.circle.ydrag
    showovallr = true; // EjsS Model.Variables.circle.showovallr
  });

  _model.addToReset(function() {
    ctatriangle = 0; // EjsS Model.Variables.triangle.ctatriangle
    triangle60show = false; // EjsS Model.Variables.triangle.triangle60show
  });

  _model.addToReset(function() {
    ctapentagon = 0; // EjsS Model.Variables.pentagon.ctapentagon
    thetarotate72 = 0; // EjsS Model.Variables.pentagon.thetarotate72
  });

  _model.addToReset(function() {
    showarrowlr = true; // EjsS Model.Variables.arrows.showarrowlr
  });

  _model.addToReset(function() {
    help = "This shape has many lines of symmetry"; // EjsS Model.Variables.mirror.help
    symmetrylinev = false; // EjsS Model.Variables.mirror.symmetrylinev
    symmetrylineh = false; // EjsS Model.Variables.mirror.symmetrylineh
    mirrorx = 0; // EjsS Model.Variables.mirror.mirrorx
    mirrory = 0; // EjsS Model.Variables.mirror.mirrory
    mirrorsizex = 0; // EjsS Model.Variables.mirror.mirrorsizex
    mirrorsizey = 10; // EjsS Model.Variables.mirror.mirrorsizey
    elementinteractedmirror = 0; // EjsS Model.Variables.mirror.elementinteractedmirror
    xtext = 0; // EjsS Model.Variables.mirror.xtext
    ytext = 0; // EjsS Model.Variables.mirror.ytext
    textshow = true; // EjsS Model.Variables.mirror.textshow
    xtextmirror = 0; // EjsS Model.Variables.mirror.xtextmirror
    ytextmirror = 0; // EjsS Model.Variables.mirror.ytextmirror
    scalextext = 1; // EjsS Model.Variables.mirror.scalextext
    scaleytext = 1; // EjsS Model.Variables.mirror.scaleytext
    scalextextv = -1; // EjsS Model.Variables.mirror.scalextextv
    scaleytextv = -1; // EjsS Model.Variables.mirror.scaleytextv
    movex = 0; // EjsS Model.Variables.mirror.movex
    movey = 0; // EjsS Model.Variables.mirror.movey
    movevx = 0; // EjsS Model.Variables.mirror.movevx
    movevy = -1; // EjsS Model.Variables.mirror.movevy
    fontsize = "66.5vmin"; // EjsS Model.Variables.mirror.fontsize
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    a2 = 1; // EjsS Model.Variables.SECONDFOLD.a2
    achange2 = -0.5; // EjsS Model.Variables.SECONDFOLD.achange2
    b2 = 0; // EjsS Model.Variables.SECONDFOLD.b2
    bchange2 = 0.5; // EjsS Model.Variables.SECONDFOLD.bchange2
    c2 = 0; // EjsS Model.Variables.SECONDFOLD.c2
    cchange2 = -0.25; // EjsS Model.Variables.SECONDFOLD.cchange2
    d2 = 1; // EjsS Model.Variables.SECONDFOLD.d2
    dchange2 = -0.5; // EjsS Model.Variables.SECONDFOLD.dchange2
    e2 = 0; // EjsS Model.Variables.SECONDFOLD.e2
    f2 = 0; // EjsS Model.Variables.SECONDFOLD.f2
    t22 = 0; // EjsS Model.Variables.SECONDFOLD.t22
    dt22 = 0.05; // EjsS Model.Variables.SECONDFOLD.dt22
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["circle"]) return;
    //_reset();  // > Initialization.circle:1
    //[0,1, Math.cos(cta/16),Math.cos(cta/8), Math.cos(cta*3/16),Math.cos(cta/4), Math.cos(cta*5/16),Math.cos(cta*3/8), Math.cos(cta*7/16),Math.cos(cta/2), Math.cos(cta*9/16),Math.cos(cta*5/8), Math.cos(cta*11/16),Math.cos(cta*3/4), Math.cos(cta*13/16),Math.cos(cta*7/8), Math.cos(cta*15/16),Math.cos(cta)]  // > Initialization.circle:2
    //[0,0, Math.sin(cta/16),Math.sin(cta/8), Math.sin(cta*3/16),Math.sin(cta/4), Math.sin(cta*5/16),Math.sin(cta*3/8), Math.sin(cta*7/16),Math.sin(cta/2), Math.sin(cta*9/16),Math.sin(cta*5/8), Math.sin(cta*11/16),Math.sin(cta*3/4), Math.sin(cta*13/16),Math.sin(cta*7/8), Math.sin(cta*15/16),Math.sin(cta)]  // > Initialization.circle:3
    //var parts=32;  // > Initialization.circle:4
    //var dcircle =cta/parts;  // > Initialization.circle:5
    for (var i=0; i<=parts /* Iterations */ ; i++) {  // > Initialization.circle:6
    circlex[i] = Math.cos(i*cta/parts);  // > Initialization.circle:7
    circley[i] = Math.sin(i*cta/parts);  // > Initialization.circle:8
    pacmancirclex[i] = Math.cos(i*cta/parts*5/6);  // > Initialization.circle:9
    pacmancircley[i] = Math.sin(i*cta/parts*5/6);  // > Initialization.circle:10
    pacmancirclexsymmetry[i] = Math.cos(-i*cta/parts*5/6);  // > Initialization.circle:11
    pacmancircleysymmetry[i] = Math.sin(-i*cta/parts*5/6);  // > Initialization.circle:12
    }  // > Initialization.circle:13
    pacmancirclex[parts+1] = -0.5;  // > Initialization.circle:14
    pacmancircley[parts+1] = 0;  // > Initialization.circle:15
    pacmancirclexsymmetry[parts+1] = -0.5;  // > Initialization.circle:16
    pacmancircleysymmetry[parts+1] = 0;  // > Initialization.circle:17
    //pointcirclex = [circlex[0],circlex[1],circlex[2],circlex[3]];  // > Initialization.circle:18
    //pointcircley = [circley[0],circley[1],circley[2],circley[3]];  // > Initialization.circle:19
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["foldtotheleft"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="foldtotheleft") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var _ODE_evolution1_Event5;
    var _ODE_evolution1_Event6;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["a","b","c","d","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["reachRIGHT"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["reachbottom"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["reachmidLR"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["reachmidBT"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      if (__pagesEnabled["reachbackLEFT"]) __eventSolver.addEvent(_ODE_evolution1_Event5());
      if (__pagesEnabled["reachtopbackagain"]) __eventSolver.addEvent(_ODE_evolution1_Event6());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=a) __mustReinitialize = true;
        __state[__cIn++] = a;
        if (__state[__cIn]!=b) __mustReinitialize = true;
        __state[__cIn++] = b;
        if (__state[__cIn]!=c) __mustReinitialize = true;
        __state[__cIn++] = c;
        if (__state[__cIn]!=d) __mustReinitialize = true;
        __state[__cIn++] = d;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = achange; // Rate for ODE: foldtotheleft:a
        _aRate[__cRate++] = bchange; // Rate for ODE: foldtotheleft:b
        _aRate[__cRate++] = cchange; // Rate for ODE: foldtotheleft:c
        _aRate[__cRate++] = dchange; // Rate for ODE: foldtotheleft:d
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = a;
        __state[__cIn++] = b;
        __state[__cIn++] = c;
        __state[__cIn++] = d;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
        return a-(-1); // do something when reach the other side  // > Event zero-condition for page foldtotheleft:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = a;
        __state[__cIn++] = b;
        __state[__cIn++] = c;
        __state[__cIn++] = d;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        bchange=-0.25; // to set to same perpesctive fake direction of rotation  // > Event action for page foldtotheleft:1
        achange=-achange;  // > Event action for page foldtotheleft:2
        //alert(achange);  // > Event action for page foldtotheleft:3
        achanges = achange;// store data  // > Event action for page foldtotheleft:4
        bchanges=bchange; // store data  // > Event action for page foldtotheleft:5
        _pause();  // > Event action for page foldtotheleft:6
        text="paused";  // > Event action for page foldtotheleft:7
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
        return d-(-1); // do something when reach the other side  // > Event zero-condition for page foldtotheleft:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = a;
        __state[__cIn++] = b;
        __state[__cIn++] = c;
        __state[__cIn++] = d;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        cchange=-0.25; // to set to same perpesctive fake direction of rotation  // > Event action for page foldtotheleft:1
        //alert(cchange);  // > Event action for page foldtotheleft:2
        dchange=-dchange;  // > Event action for page foldtotheleft:3
        cchanges = cchange;  // > Event action for page foldtotheleft:4
        dchanges=dchange; // store data  // > Event action for page foldtotheleft:5
        _pause();  // > Event action for page foldtotheleft:6
        text="paused";  // > Event action for page foldtotheleft:7
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
        return a-0;  // > Event zero-condition for page foldtotheleft:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = a;
        __state[__cIn++] = b;
        __state[__cIn++] = c;
        __state[__cIn++] = d;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        bchange=-bchange;  // > Event action for page foldtotheleft:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
        return d-0;  // > Event zero-condition for page foldtotheleft:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = a;
        __state[__cIn++] = b;
        __state[__cIn++] = c;
        __state[__cIn++] = d;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        cchange=-cchange;  // > Event action for page foldtotheleft:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
        return a-(1); // do something when reach the other side  // > Event zero-condition for page foldtotheleft:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = a;
        __state[__cIn++] = b;
        __state[__cIn++] = c;
        __state[__cIn++] = d;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        achange=-achange;  // > Event action for page foldtotheleft:1
        //alert(achange);  // > Event action for page foldtotheleft:2
        achanges = achange;  // > Event action for page foldtotheleft:3
        bchanges=bchange; // store data  // > Event action for page foldtotheleft:4
        _pause();  // > Event action for page foldtotheleft:5
        text="paused";  // > Event action for page foldtotheleft:6
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event6 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var a = _aState[__cOut++];
        var b = _aState[__cOut++];
        var c = _aState[__cOut++];
        var d = _aState[__cOut++];
        var t = _aState[__cOut++];
        return d-(1); // do something when reach the other side  // > Event zero-condition for page foldtotheleft:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        a = __state[__cOut++];
        b = __state[__cOut++];
        c = __state[__cOut++];
        d = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = a;
        __state[__cIn++] = b;
        __state[__cIn++] = c;
        __state[__cIn++] = d;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        cchange=-0.25;  // > Event action for page foldtotheleft:1
        dchange=-dchange;  // > Event action for page foldtotheleft:2
        cchanges = cchange;  // > Event action for page foldtotheleft:3
        dchanges=dchange; // store data  // > Event action for page foldtotheleft:4
        _pause();  // > Event action for page foldtotheleft:5
        text="paused";  // > Event action for page foldtotheleft:6
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_a(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_b(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_c(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_d(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new symmetryshape_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.vectorcompo.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'vectorcompo'
          _view.comboBox.linkProperty("Options",  function() { return ["circle","oval","pentagon","square","rectangle","trapezium","triangle","arrows","heart","flask","spade","lady bug","butterfly","pacman shape"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
  var option = (opts.length > 0)? opts[0]:""; // selected option 
  letter = option;
  if (option=="circle"){
  showmainline=true;
  object=0;
   symmetrylinev=false; // turn off
  help = "This shape has many lines of symmetry";
    }
    else if (option=="oval"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=true;
  object=1;
  symmetrylinev=true; //extra one line
  help = "This shape has 2 lines of symmetry";
    }
    else if (option=="rectangle"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=true;
  shapetype="RECTANGLE";
  object=2;
  ovalsizex= 6; //set size here
  ovalsizey= 2;
  symmetrylinev=true; //extra one line
  help = "This shape has 2 lines of symmetry";
    }
    //not used now
    else if (option=="rectangle2"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=true;
  shapetype="RECTANGLE";
  object=3;
  //ovalsizex= 4; //set size here
  //ovalsizey= 3;
  symmetrylinev=true; //extra one line
  help = "This shape has 2 lines of symmetry";
    }
     else if (option=="rectangle3"){ //does not work
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=true;
  shapetype="ROUND_RECTANGLE";
  object=5;
  ovalsizex= 6; //set size here
  ovalsizey= 2;
  symmetrylinev=true; //extra one line
  help = "This shape has 2 lines of symmetry";
    }
     else if (option=="square"){ //does not work
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=true;
  //shapetype="ROUND_RECTANGLE";
  object=9;
  //object=91; //rotate by 45 n 135
  //ovalsizex= 6; //set size here
  //ovalsizey= 3;
  symmetrylinev=true; //extra one line
  help = "This shape has 4 lines of symmetry";
    }
     else if (option=="trapezium"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=true;
  object=4;
  symmetrylinev=false; //extra one line
  help = "This shape has 1 line of symmetry";
    }
     else if (option=="arrows"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=true;
  object=5;
  symmetrylinev=true; //extra one line
  help = "This shape has 2 lines of symmetry";
    }
     else if (option=="heart"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=false; // set to unvisible as heart only has vertical symmetry
  object=6;
  symmetrylinev=true; //extra one line
  help = "This shape has 1 line of symmetry";
    }
    else if (option=="flask"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=false; // set to unvisible as heart only has vertical symmetry
  object=7;
  symmetrylinev=true; //extra one line
  help = "This shape has 1 line of symmetry";
    }
     else if (option=="spade"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=false; // set to unvisible as heart only has vertical symmetry
  object=8;
  symmetrylinev=true; //extra one line
  help = "This shape has 1 line of symmetry";
    }
   
  else if (option=="triangle"){
  showmainline=true;
  object=10;
   symmetrylinev=false; // turn off
  help = "This shape has 3 lines of symmetry";
    }
    else if (option=="pentagon"){
  showmainline=true;
  object=11;
   symmetrylinev=false; // turn off
  help = "This shape has 5 lines of symmetry";
    }
    else if (option=="lady bug"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=false; // set to unvisible as heart only has vertical symmetry
  object=12;
  symmetrylinev=true; //extra one line
  help = "This shape has 1 line of symmetry";
    }
     else if (option=="butterfly"){
   //thetasymmetrylinen[1] = pi/2; //just move 1
  showmainline=false; // set to unvisible as heart only has vertical symmetry
  object=13;
  symmetrylinev=true; //extra one line
  help = "This shape has 1 line of symmetry";
    }
    if (option=="pacman shape"){
  showmainline=true;
  object=14;
   symmetrylinev=false; // turn off
  help = "This shape has 1 line of symmetry";
    }
  //_reset(); // reset selection of object;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.playPauseButtontopbottom.setAction("OffClick", function(_data,_info) {
  _play();
  text="folding";
  thetasymmetrylinen[counter]=theta;
  counter=counter+1;

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButtontopbottom'
          _view.playPauseButtontopbottom.linkProperty("State",  function() { return statetopbot; }, function(_v) { statetopbot = _v; } ); // HtmlView Page linking property 'State' for element 'playPauseButtontopbottom'
          _view.playPauseButtontopbottom.linkProperty("Disabled",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButtontopbottom'
          _view.playPauseButtontopbottom.setAction("OnClick", function(_data,_info) {
  _play();
  text="folding";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButtontopbottom'
          _view.playPauseButtontopbottom.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButtontopbottom'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.slider.linkProperty("Minimum",  function() { return -pi*2; } ); // HtmlView Page linking property 'Minimum' for element 'slider'
          _view.slider.linkProperty("Maximum",  function() { return pi*2; } ); // HtmlView Page linking property 'Maximum' for element 'slider'
          _view.slider.linkProperty("Value",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Value' for element 'slider'
          _view.field.linkProperty("Value",  function() { return color1; }, function(_v) { color1 = _v; } ); // HtmlView Page linking property 'Value' for element 'field'
          _view.field.setAction("OnChange", function(_data,_info) {
  color1=rgba(255,128,128,1);

}); // HtmlView Page setting action 'OnChange' for element 'field'
          _view.slider23.linkProperty("Value",  function() { return a; }, function(_v) { a = _v; } ); // HtmlView Page linking property 'Value' for element 'slider23'
          _view.slider2.linkProperty("Value",  function() { return b; }, function(_v) { b = _v; } ); // HtmlView Page linking property 'Value' for element 'slider2'
          _view.slider22.linkProperty("Value",  function() { return c; }, function(_v) { c = _v; } ); // HtmlView Page linking property 'Value' for element 'slider22'
          _view.slider222.linkProperty("Value",  function() { return d; }, function(_v) { d = _v; } ); // HtmlView Page linking property 'Value' for element 'slider222'
          _view.slider223.linkProperty("Value",  function() { return e; }, function(_v) { e = _v; } ); // HtmlView Page linking property 'Value' for element 'slider223'
          _view.slider224.linkProperty("Value",  function() { return f; }, function(_v) { f = _v; } ); // HtmlView Page linking property 'Value' for element 'slider224'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  //toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return help; }, function(_v) { help = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.symmetrylinearray.linkProperty("NumberOfElements",  function() { return symmetrylinen; }, function(_v) { symmetrylinen = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'symmetrylinearray'
          _view.symmetrylinearray.linkProperty("Transformation",  function() { return thetasymmetrylinen; }, function(_v) { thetasymmetrylinen = _v; } ); // HtmlView Page linking property 'Transformation' for element 'symmetrylinearray'
          _view.symmetrylinearray.linkProperty("Visibility",  function() { return showmainline&&object==0; } ); // HtmlView Page linking property 'Visibility' for element 'symmetrylinearray'
          _view.hitzone.linkProperty("X",  function() { return 4*Math.cos(theta+pi); } ); // HtmlView Page linking property 'X' for element 'hitzone'
          _view.hitzone.setAction("OnEnter", function(_data,_info) {
  text="Click me to fold along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone'
          _view.hitzone.linkProperty("Y",  function() { return 4*Math.sin(theta+pi); } ); // HtmlView Page linking property 'Y' for element 'hitzone'
          _view.hitzone.setAction("OnPress", function(_data,_info) {
  if (object==0){
  thetasymmetrylinen[counter]=theta;
  counter=counter+1;
  }
  else if (object==1){
  //horizon 
  showovallr=false;
    }
  else if (object==2){
   // theta =0.0000001; // set back to zero orientation
   // ovalsizex=6; // set size back to original
   // ovalsizey=2;
   showrectanglelr=false;
    }
    else if (object==3&&theta==pi/2){ // tall rectangle
    theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=2;
    }
    else if (object==9&&theta==pi/2){ // square
    theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=3;
   square45show=false;
   }
   else if (object==5&&d>0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==5&&d<-0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
  else if (object==10){
    ctatriangle=0.0001;
    }
    else if (object==11){
    ctapentagon=0.0001;
    }
  _play();
  text="folding";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone'
          _view.handontheleftofcircle.linkProperty("X",  function() { return 4*Math.cos(theta+pi); } ); // HtmlView Page linking property 'X' for element 'handontheleftofcircle'
          _view.handontheleftofcircle.setAction("OnEnter", function(_data,_info) {
  text="Click me to fold along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'handontheleftofcircle'
          _view.handontheleftofcircle.linkProperty("Y",  function() { return 4*Math.sin(theta+pi); } ); // HtmlView Page linking property 'Y' for element 'handontheleftofcircle'
          _view.handontheleftofcircle.setAction("OnPress", function(_data,_info) {
  if (object==0){
  thetasymmetrylinen[counter]=theta;
  counter=counter+1;
  }
  else if (object==1){
  //horizon 
  showovallr=false;
    }
   
  //else if (object==2&&theta==pi/2){
    else if (object==2){
   // theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=2;
   showrectanglelr=false;
    }
    else if (object==3&&theta==pi/2){ // tall rectangle
   // theta =0.0000001; // set back to zero orientation
   // ovalsizex=6; // set size back to original
   // ovalsizey=2;
    }
   else if (object==9&&d>0.99){ // tall rectangle
  square45show=false;
  showrectanglelr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==9&&d<-0.99){ // tall rectangle
  square45show=false;
  showrectanglelr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
   else if (object==5&&d>0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==5&&d<-0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
  else if (object==10){
    ctatriangle=0.0001;
    }
    else if (object==11){
    ctapentagon=0.0001;
    }
  _play();
  text="folding";
  colorline="rgba(0,0,0,1.0)";

}); // HtmlView Page setting action 'OnPress' for element 'handontheleftofcircle'
          _view.handontheleftofcircle.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'handontheleftofcircle'
          _view.symmetryforallcasesincircle2.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryforallcasesincircle2'
          _view.symmetryforallcasesincircle2.linkProperty("LineColor",  function() { return colorline; }, function(_v) { colorline = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryforallcasesincircle2'
          _view.symmetryforallcasesincircle2.linkProperty("Visibility",  function() { return showmainline; }, function(_v) { showmainline = _v; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryforallcasesincircle2'
          _view.symmetryforallcasesincircle2.setAction("OnPress", function(_data,_info) {
  //duplicate feature of hand to line
  if (object==0){
  thetasymmetrylinen[counter]=theta;
  counter=counter+1;
  }
  else if (object==1){
  //horizon 
  showovallr=false;
    }
   
  //else if (object==2&&theta==pi/2){
    else if (object==2){
   // theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=2;
   showrectanglelr=false;
    }
    else if (object==3&&theta==pi/2){ // tall rectangle
   // theta =0.0000001; // set back to zero orientation
   // ovalsizex=6; // set size back to original
   // ovalsizey=2;
    }
   else if (object==9&&d>0.99){ // tall rectangle
  square45show=false;
  showrectanglelr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==9&&d<-0.99){ // tall rectangle
  square45show=false;
  showrectanglelr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
   else if (object==5&&d>0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==5&&d<-0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
  else if (object==10){
    ctatriangle=0.0001;
    }
    else if (object==11){
    ctapentagon=0.0001;
    }
  _play();
  text="folding";
  colorline="rgba(0,0,0,1.0)";

}); // HtmlView Page setting action 'OnPress' for element 'symmetryforallcasesincircle2'
          _view.help.linkProperty("Text",  function() { return help; }, function(_v) { help = _v; } ); // HtmlView Page linking property 'Text' for element 'help'
          _view.help.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'help'
          _view.circle.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'circle'
          _view.circle.linkProperty("Visibility",  function() { return object==0; } ); // HtmlView Page linking property 'Visibility' for element 'circle'
          _view.letterxystayFOLDTOTHERIGHT.linkProperty("PointsY",  function() { return circley; }, function(_v) { circley = _v; } ); // HtmlView Page linking property 'PointsY' for element 'letterxystayFOLDTOTHERIGHT'
          _view.letterxystayFOLDTOTHERIGHT.linkProperty("PointsX",  function() { return circlex; }, function(_v) { circlex = _v; } ); // HtmlView Page linking property 'PointsX' for element 'letterxystayFOLDTOTHERIGHT'
          _view.letterxystayFOLDTOTHERIGHT.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'letterxystayFOLDTOTHERIGHT'
          _view.letterxystayFOLDTOTHERIGHT.setAction("OnEnter", function(_data,_info) {
  text="Circle";

}); // HtmlView Page setting action 'OnEnter' for element 'letterxystayFOLDTOTHERIGHT'
          _view.group2.linkProperty("Transformation",  function() { return pi; }, function(_v) { pi = _v; } ); // HtmlView Page linking property 'Transformation' for element 'group2'
          _view.letterxystayFOLDTOTHERIGHT2.linkProperty("PointsY",  function() { return circley; }, function(_v) { circley = _v; } ); // HtmlView Page linking property 'PointsY' for element 'letterxystayFOLDTOTHERIGHT2'
          _view.letterxystayFOLDTOTHERIGHT2.linkProperty("PointsX",  function() { return circlex; }, function(_v) { circlex = _v; } ); // HtmlView Page linking property 'PointsX' for element 'letterxystayFOLDTOTHERIGHT2'
          _view.letterxystayFOLDTOTHERIGHT2.setAction("OnEnter", function(_data,_info) {
  text="Circle";

}); // HtmlView Page setting action 'OnEnter' for element 'letterxystayFOLDTOTHERIGHT2'
          _view.hitzone222MAGENTA.linkProperty("FillColor",  function() { return colorline; }, function(_v) { colorline = _v; } ); // HtmlView Page linking property 'FillColor' for element 'hitzone222MAGENTA'
          _view.hitzone222MAGENTA.linkProperty("X",  function() { return 4*Math.cos(theta+3*pi/2); } ); // HtmlView Page linking property 'X' for element 'hitzone222MAGENTA'
          _view.hitzone222MAGENTA.setAction("OnEnter", function(_data,_info) {
  text="Click me to fold along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone222MAGENTA'
          _view.hitzone222MAGENTA.linkProperty("Y",  function() { return 4*Math.sin(theta+3*pi/2); } ); // HtmlView Page linking property 'Y' for element 'hitzone222MAGENTA'
          _view.hitzone222MAGENTA.linkProperty("Visibility",  function() { return symmetrylinev; }, function(_v) { symmetrylinev = _v; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone222MAGENTA'
          _view.hitzone222MAGENTA.setAction("OnPress", function(_data,_info) {
  //thetasymmetrylinen[counter]=theta;
  //counter=counter+1;
  //set shape to oval x=4 y=2
   if (object==1){ //oval
  //horizon 
  showovallr=true;
    }
    else if (object==2&&a>0.99){ //rectnangle and first time
    showrectanglelr=true;// show LR symmetry
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==2&&a<-0.99){ //rectangle and first time
    showrectanglelr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    //else if (object==2&&Math.abs(theta)<0.01){ //rectangle
  // theta=pi/2; 
   // ovalsizex=4; //flip size to sync shape
  //ovalsizey=3;
  //}
  else if (object==3&&Math.abs(theta)<0.01){ //rectangle
   theta=pi/2; 
    ovalsizex=6; //flip size to sync shape
  ovalsizey=2;
  }
    else if (object==9&&a>0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==9&&a<-0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    else if (object==5&&a>0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==5&&a<-0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
     else if ((object==6||object==7||object==8||object==12||object==13)&&a>0.99){ //arrow and first time
  // showarrowlr=true; // show LR symmetry
  //object 6 =heart
  //object 7 = flask
  //object 8 = spade
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if ((object==6||object==7||object==8||object==12||object==13)&&a<-0.99){ //arrow and first time
   //showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  _play();
  text="folding";
  colorline2="rgba(0,0,0,1.0)";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone222MAGENTA'
          _view.text3.linkProperty("Rotate",  function() { return 3*pi/2; } ); // HtmlView Page linking property 'Rotate' for element 'text3'
          _view.text3.linkProperty("X",  function() { return 4*Math.cos(theta+3*pi/2); } ); // HtmlView Page linking property 'X' for element 'text3'
          _view.text3.setAction("OnEnter", function(_data,_info) {
  text="Click me to fold along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'text3'
          _view.text3.linkProperty("Y",  function() { return 4*Math.sin(theta+3*pi/2); } ); // HtmlView Page linking property 'Y' for element 'text3'
          _view.text3.linkProperty("Visibility",  function() { return symmetrylinev; }, function(_v) { symmetrylinev = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text3'
          _view.text3.setAction("OnPress", function(_data,_info) {
  //thetasymmetrylinen[counter]=theta;
  //counter=counter+1;
  //set shape to oval x=4 y=2
   if (object==1){ //oval
  //horizon 
  showovallr=true;
    }
    else if (object==2&&a>0.99){ //rectnangle and first time
    showrectanglelr=true;// show LR symmetry
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==2&&a<-0.99){ //rectangle and first time
    showrectanglelr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    //else if (object==2&&Math.abs(theta)<0.01){ //rectangle
  // theta=pi/2; 
   // ovalsizex=4; //flip size to sync shape
  //ovalsizey=3;
  //}
  else if (object==3&&Math.abs(theta)<0.01){ //rectangle
   theta=pi/2; 
    ovalsizex=6; //flip size to sync shape
  ovalsizey=2;
  }
    else if (object==9&&a>0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==9&&a<-0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    else if (object==5&&a>0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==5&&a<-0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
     else if ((object==6||object==7||object==8||object==12||object==13)&&a>0.99){ //arrow and first time
  // showarrowlr=true; // show LR symmetry
  //object 6 =heart
  //object 7 = flask
  //object 8 = spade
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if ((object==6||object==7||object==8||object==12||object==13)&&a<-0.99){ //arrow and first time
   //showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  _play();
  text="folding";
  colorline2="rgba(0,0,0,1.0)";

}); // HtmlView Page setting action 'OnPress' for element 'text3'
          _view.text3.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'text3'
          _view.hitzone22.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'hitzone22'
          _view.hitzone22.linkProperty("X",  function() { return 4*Math.cos(theta+pi/2); } ); // HtmlView Page linking property 'X' for element 'hitzone22'
          _view.hitzone22.setAction("OnEnter", function(_data,_info) {
  text="Click me to fold along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone22'
          _view.hitzone22.linkProperty("Y",  function() { return 4*Math.sin(theta+pi/2); } ); // HtmlView Page linking property 'Y' for element 'hitzone22'
          _view.hitzone22.linkProperty("Visibility",  function() { return symmetrylinev; }, function(_v) { symmetrylinev = _v; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone22'
          _view.hitzone22.setAction("OnPress", function(_data,_info) {
  //thetasymmetrylinen[counter]=theta;
  //counter=counter+1;
  //set shape to oval x=4 y=2
   if (object==1){ //oval
  //horizon 
  showovallr=true;
    }
    else if (object==2&&a>0.99){ //rectnangle and first time
    showrectanglelr=true;// show LR symmetry
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==2&&a<-0.99){ //rectangle and first time
    showrectanglelr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    //else if (object==2&&Math.abs(theta)<0.01){ //rectangle
  // theta=pi/2; 
   // ovalsizex=4; //flip size to sync shape
  //ovalsizey=3;
  //}
  else if (object==3&&Math.abs(theta)<0.01){ //rectangle
   theta=pi/2; 
    ovalsizex=6; //flip size to sync shape
  ovalsizey=2;
  }
    else if (object==9&&a>0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==9&&a<-0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    else if (object==5&&a>0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==5&&a<-0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
     else if ((object==6||object==7||object==8||object==12||object==13)&&a>0.99){ //arrow and first time
  // showarrowlr=true; // show LR symmetry
  //object 6 =heart
  //object 7 = flask
  //object 8 = spade
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if ((object==6||object==7||object==8||object==12||object==13)&&a<-0.99){ //arrow and first time
   //showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  _play();
  text="folding";
  colorline2="rgba(0,0,0,1.0)";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone22'
          _view.text32.linkProperty("Rotate",  function() { return pi/2; } ); // HtmlView Page linking property 'Rotate' for element 'text32'
          _view.text32.linkProperty("X",  function() { return 4*Math.cos(theta+pi/2); } ); // HtmlView Page linking property 'X' for element 'text32'
          _view.text32.setAction("OnEnter", function(_data,_info) {
  text="Click me to fold along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'text32'
          _view.text32.linkProperty("Y",  function() { return 4*Math.sin(theta+pi/2); } ); // HtmlView Page linking property 'Y' for element 'text32'
          _view.text32.linkProperty("Visibility",  function() { return symmetrylinev; }, function(_v) { symmetrylinev = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text32'
          _view.text32.setAction("OnPress", function(_data,_info) {
  //thetasymmetrylinen[counter]=theta;
  //counter=counter+1;
  //set shape to oval x=4 y=2
   if (object==1){ //oval
  //horizon 
  showovallr=true;
    }
    else if (object==2&&a>0.99){ //rectnangle and first time
    showrectanglelr=true;// show LR symmetry
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==2&&a<-0.99){ //rectangle and first time
    showrectanglelr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  ovalsizex = 3; //set size to sync
  ovalsizey = 4;
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    //else if (object==2&&Math.abs(theta)<0.01){ //rectangle
  // theta=pi/2; 
   // ovalsizex=4; //flip size to sync shape
  //ovalsizey=3;
  //}
  else if (object==3&&Math.abs(theta)<0.01){ //rectangle
   theta=pi/2; 
    ovalsizex=6; //flip size to sync shape
  ovalsizey=2;
  }
    else if (object==9&&a>0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==9&&a<-0.99){ //arrow and first time
  square45show=false; // show LR symmetry
  showrectanglelr=true;
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
    else if (object==5&&a>0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if (object==5&&a<-0.99){ //arrow and first time
   showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
     else if ((object==6||object==7||object==8||object==12||object==13)&&a>0.99){ //arrow and first time
  // showarrowlr=true; // show LR symmetry
  //object 6 =heart
  //object 7 = flask
  //object 8 = spade
  achange=-0.5;
  bchange=-0.25; //set a n b
  //achange = bchanges;
  //bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  else if ((object==6||object==7||object==8||object==12||object==13)&&a<-0.99){ //arrow and first time
   //showarrowlr=true; // show LR symmetry
   //alert(a);
  //achange=-0.5;
  //bchange=-0.25; //set a n b
  achange = achanges;
  bchange=bchanges; // store back data
  cchanges =cchange; // store data
  dchanges =dchange;
  cchange=0; //freeze c
  dchange=0; // freeze d
  }
  _play();
  text="folding";
  colorline2="rgba(0,0,0,1.0)";

}); // HtmlView Page setting action 'OnPress' for element 'text32'
          _view.text32.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'text32'
          _view.symmetryv.linkProperty("Transformation",  function() { return theta+pi/2; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryv'
          _view.symmetryv.linkProperty("LineColor",  function() { return colorline2; }, function(_v) { colorline2 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryv'
          _view.symmetryv.linkProperty("Visibility",  function() { return symmetrylinev; }, function(_v) { symmetrylinev = _v; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryv'
          _view.oval.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'oval'
          _view.oval.linkProperty("Visibility",  function() { return object==1; } ); // HtmlView Page linking property 'Visibility' for element 'oval'
          _view.ovaltoppiece2.linkProperty("PointsY",  function() { return circley; }, function(_v) { circley = _v; } ); // HtmlView Page linking property 'PointsY' for element 'ovaltoppiece2'
          _view.ovaltoppiece2.linkProperty("PointsX",  function() { return circlex; }, function(_v) { circlex = _v; } ); // HtmlView Page linking property 'PointsX' for element 'ovaltoppiece2'
          _view.ovaltoppiece2.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'ovaltoppiece2'
          _view.ovaltoppiece2.linkProperty("SizeX",  function() { return ovalsizex; }, function(_v) { ovalsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ovaltoppiece2'
          _view.ovaltoppiece2.linkProperty("Visibility",  function() { return !showovallr; } ); // HtmlView Page linking property 'Visibility' for element 'ovaltoppiece2'
          _view.ovaltoppiece2.linkProperty("SizeY",  function() { return ovalsizey; }, function(_v) { ovalsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ovaltoppiece2'
          _view.rotate_90.linkProperty("Transformation",  function() { return pi/2; } ); // HtmlView Page linking property 'Transformation' for element 'rotate_90'
          _view.rotate_90.linkProperty("Visibility",  function() { return showovallr; }, function(_v) { showovallr = _v; } ); // HtmlView Page linking property 'Visibility' for element 'rotate_90'
          _view.ovalleftpiece.linkProperty("PointsY",  function() { return circley; }, function(_v) { circley = _v; } ); // HtmlView Page linking property 'PointsY' for element 'ovalleftpiece'
          _view.ovalleftpiece.linkProperty("PointsX",  function() { return circlex; }, function(_v) { circlex = _v; } ); // HtmlView Page linking property 'PointsX' for element 'ovalleftpiece'
          _view.ovalleftpiece.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'ovalleftpiece'
          _view.ovalleftpiece.linkProperty("SizeX",  function() { return ovalsizey; }, function(_v) { ovalsizey = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ovalleftpiece'
          _view.ovalleftpiece.linkProperty("SizeY",  function() { return ovalsizex; }, function(_v) { ovalsizex = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ovalleftpiece'
          _view.rotate180another.linkProperty("Transformation",  function() { return pi; }, function(_v) { pi = _v; } ); // HtmlView Page linking property 'Transformation' for element 'rotate180another'
          _view.ovalrightpiece2.linkProperty("PointsY",  function() { return circley; }, function(_v) { circley = _v; } ); // HtmlView Page linking property 'PointsY' for element 'ovalrightpiece2'
          _view.ovalrightpiece2.linkProperty("PointsX",  function() { return circlex; }, function(_v) { circlex = _v; } ); // HtmlView Page linking property 'PointsX' for element 'ovalrightpiece2'
          _view.ovalrightpiece2.linkProperty("SizeX",  function() { return ovalsizey; }, function(_v) { ovalsizey = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ovalrightpiece2'
          _view.ovalrightpiece2.linkProperty("SizeY",  function() { return ovalsizex; }, function(_v) { ovalsizex = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ovalrightpiece2'
          _view.group22.linkProperty("Transformation",  function() { return pi; }, function(_v) { pi = _v; } ); // HtmlView Page linking property 'Transformation' for element 'group22'
          _view.group22.linkProperty("Visibility",  function() { return !showovallr; } ); // HtmlView Page linking property 'Visibility' for element 'group22'
          _view.ovalbottompiece.linkProperty("PointsY",  function() { return circley; }, function(_v) { circley = _v; } ); // HtmlView Page linking property 'PointsY' for element 'ovalbottompiece'
          _view.ovalbottompiece.linkProperty("PointsX",  function() { return circlex; }, function(_v) { circlex = _v; } ); // HtmlView Page linking property 'PointsX' for element 'ovalbottompiece'
          _view.ovalbottompiece.linkProperty("SizeX",  function() { return ovalsizex; }, function(_v) { ovalsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'ovalbottompiece'
          _view.ovalbottompiece.linkProperty("SizeY",  function() { return ovalsizey; }, function(_v) { ovalsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'ovalbottompiece'
          _view.rectangle.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'rectangle'
          _view.rectangle.linkProperty("Visibility",  function() { return object==2||object==3; } ); // HtmlView Page linking property 'Visibility' for element 'rectangle'
          _view.rectangle23.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'rectangle23'
          _view.rectangle23.linkProperty("SizeX",  function() { return ovalsizex; }, function(_v) { ovalsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'rectangle23'
          _view.rectangle23.linkProperty("Visibility",  function() { return !showrectanglelr; } ); // HtmlView Page linking property 'Visibility' for element 'rectangle23'
          _view.rectangle23.linkProperty("SizeY",  function() { return ovalsizey; }, function(_v) { ovalsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'rectangle23'
          _view.rectangleleftpiece2.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'rectangleleftpiece2'
          _view.rectangleleftpiece2.linkProperty("SizeX",  function() { return ovalsizex; }, function(_v) { ovalsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'rectangleleftpiece2'
          _view.rectangleleftpiece2.linkProperty("Visibility",  function() { return showrectanglelr; }, function(_v) { showrectanglelr = _v; } ); // HtmlView Page linking property 'Visibility' for element 'rectangleleftpiece2'
          _view.rectangleleftpiece2.linkProperty("SizeY",  function() { return ovalsizey; }, function(_v) { ovalsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'rectangleleftpiece2'
          _view.rectanglerightpiece.linkProperty("Visibility",  function() { return showrectanglelr; }, function(_v) { showrectanglelr = _v; } ); // HtmlView Page linking property 'Visibility' for element 'rectanglerightpiece'
          _view.group222.linkProperty("Transformation",  function() { return pi; }, function(_v) { pi = _v; } ); // HtmlView Page linking property 'Transformation' for element 'group222'
          _view.rectangle22.linkProperty("SizeX",  function() { return ovalsizex; }, function(_v) { ovalsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'rectangle22'
          _view.rectangle22.linkProperty("Visibility",  function() { return !showrectanglelr; } ); // HtmlView Page linking property 'Visibility' for element 'rectangle22'
          _view.rectangle22.linkProperty("SizeY",  function() { return ovalsizey; }, function(_v) { ovalsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'rectangle22'
          _view.square.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'square'
          _view.square.linkProperty("Visibility",  function() { return (object==9&&!square45show); } ); // HtmlView Page linking property 'Visibility' for element 'square'
          _view.rectangle232.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'rectangle232'
          _view.rectangle232.linkProperty("Visibility",  function() { return !showrectanglelr; } ); // HtmlView Page linking property 'Visibility' for element 'rectangle232'
          _view.rectangleleftpiece22.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'rectangleleftpiece22'
          _view.rectangleleftpiece22.linkProperty("Visibility",  function() { return showrectanglelr; }, function(_v) { showrectanglelr = _v; } ); // HtmlView Page linking property 'Visibility' for element 'rectangleleftpiece22'
          _view.rectanglerightpiece2.linkProperty("Visibility",  function() { return showrectanglelr; }, function(_v) { showrectanglelr = _v; } ); // HtmlView Page linking property 'Visibility' for element 'rectanglerightpiece2'
          _view.group2223.linkProperty("Transformation",  function() { return pi; }, function(_v) { pi = _v; } ); // HtmlView Page linking property 'Transformation' for element 'group2223'
          _view.rectangle222.linkProperty("Visibility",  function() { return !showrectanglelr; } ); // HtmlView Page linking property 'Visibility' for element 'rectangle222'
          _view.square45n135.linkProperty("Transformation",  function() { return ctasquare; }, function(_v) { ctasquare = _v; } ); // HtmlView Page linking property 'Transformation' for element 'square45n135'
          _view.square45n135.linkProperty("Visibility",  function() { return square45show&&object==9; } ); // HtmlView Page linking property 'Visibility' for element 'square45n135'
          _view.polygon3.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'polygon3'
          _view.polygon3.linkProperty("Points",  function() { return [[-3,0],[0,-3],[3,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon3'
          _view.polygon32.linkProperty("Points",  function() { return [[-3,0],[0,3],[3,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon32'
          _view.symmetryforsquare135.linkProperty("Transformation",  function() { return 3*pi/4+theta; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryforsquare135'
          _view.symmetryforsquare135.linkProperty("LineColor",  function() { return colorline4; }, function(_v) { colorline4 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryforsquare135'
          _view.symmetryforsquare135.linkProperty("Visibility",  function() { return object==9; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryforsquare135'
          _view.symmetryforsquare45.linkProperty("Transformation",  function() { return pi/4+theta; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryforsquare45'
          _view.symmetryforsquare45.linkProperty("LineColor",  function() { return colorline3; }, function(_v) { colorline3 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryforsquare45'
          _view.symmetryforsquare45.linkProperty("Visibility",  function() { return object==9; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryforsquare45'
          _view.hitzone2GREEN135.linkProperty("X",  function() { return 4*Math.cos(theta+7*pi/4); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN135'
          _view.hitzone2GREEN135.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN135'
          _view.hitzone2GREEN135.linkProperty("Y",  function() { return 4*Math.sin(theta+7*pi/4); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN135'
          _view.hitzone2GREEN135.linkProperty("Visibility",  function() { return showmainline&&object==9; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN135'
          _view.hitzone2GREEN135.setAction("OnPress", function(_data,_info) {
  square45show=true;
  ctasquare=3*pi/4;
  _play();
  text="folding";
  colorline4="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN135'
          _view.hitzone2GREEN45.linkProperty("X",  function() { return 4*Math.cos(theta+5*pi/4); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN45'
          _view.hitzone2GREEN45.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN45'
          _view.hitzone2GREEN45.linkProperty("Y",  function() { return 4*Math.sin(theta+5*pi/4); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN45'
          _view.hitzone2GREEN45.linkProperty("Visibility",  function() { return showmainline&&object==9; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN45'
          _view.hitzone2GREEN45.setAction("OnPress", function(_data,_info) {
  ctasquare=pi/4;
  square45show=true;
  _play();
  text="folding";
  colorline3="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN45'
          _view.trapezium.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'trapezium'
          _view.trapezium.linkProperty("Visibility",  function() { return object==4; } ); // HtmlView Page linking property 'Visibility' for element 'trapezium'
          _view.polygon.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'polygon'
          _view.polygon.linkProperty("Points",  function() { return [[-3,0],[-3,1],[3,3],[3,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon'
          _view.group2222.linkProperty("Transformation",  function() { return pi; }, function(_v) { pi = _v; } ); // HtmlView Page linking property 'Transformation' for element 'group2222'
          _view.polygon2.linkProperty("Points",  function() { return [[-3,0],[-3,3],[3,1],[3,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon2'
          _view.arrowpairsusingdifferenttechnique.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrowpairsusingdifferenttechnique'
          _view.arrowpairsusingdifferenttechnique.linkProperty("Visibility",  function() { return object==5; } ); // HtmlView Page linking property 'Visibility' for element 'arrowpairsusingdifferenttechnique'
          _view.arrowpointup.linkProperty("Points",  function() { return [[-1,0],[-1,1],[-2,1],[0,3],[2,1],[1,1],[1,0]]; } ); // HtmlView Page linking property 'Points' for element 'arrowpointup'
          _view.arrowpointup.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'arrowpointup'
          _view.arrowpointup.linkProperty("Visibility",  function() { return !showarrowlr; } ); // HtmlView Page linking property 'Visibility' for element 'arrowpointup'
          _view.arrowrightsidestillpointup2.linkProperty("Points",  function() { return [[0,-3],[2,-1],[1,-1],[1,1],[2,1],[0,3]]; } ); // HtmlView Page linking property 'Points' for element 'arrowrightsidestillpointup2'
          _view.arrowrightsidestillpointup2.linkProperty("Visibility",  function() { return showarrowlr; }, function(_v) { showarrowlr = _v; } ); // HtmlView Page linking property 'Visibility' for element 'arrowrightsidestillpointup2'
          _view.arrowleftsidestillpointup.linkProperty("Points",  function() { return [[0,-3],[-2,-1],[-1,-1],[-1,1],[-2,1],[0,3]]; } ); // HtmlView Page linking property 'Points' for element 'arrowleftsidestillpointup'
          _view.arrowleftsidestillpointup.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'arrowleftsidestillpointup'
          _view.arrowleftsidestillpointup.linkProperty("Visibility",  function() { return showarrowlr; }, function(_v) { showarrowlr = _v; } ); // HtmlView Page linking property 'Visibility' for element 'arrowleftsidestillpointup'
          _view.group22222.linkProperty("Transformation",  function() { return pi; }, function(_v) { pi = _v; } ); // HtmlView Page linking property 'Transformation' for element 'group22222'
          _view.arrowpointdown.linkProperty("Points",  function() { return [[-1,0],[-1,1],[-2,1],[0,3],[2,1],[1,1],[1,0]]; } ); // HtmlView Page linking property 'Points' for element 'arrowpointdown'
          _view.arrowpointdown.linkProperty("Visibility",  function() { return !showarrowlr; } ); // HtmlView Page linking property 'Visibility' for element 'arrowpointdown'
          _view.analyticCurve.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'analyticCurve'
          _view.heart.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'heart'
          _view.heart.linkProperty("Visibility",  function() { return object==6; } ); // HtmlView Page linking property 'Visibility' for element 'heart'
          _view.left2.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'left2'
          _view.flask.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'flask'
          _view.flask.linkProperty("Visibility",  function() { return object==7; } ); // HtmlView Page linking property 'Visibility' for element 'flask'
          _view.left22.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'left22'
          _view.spade.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'spade'
          _view.spade.linkProperty("Visibility",  function() { return object==8; } ); // HtmlView Page linking property 'Visibility' for element 'spade'
          _view.left222.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'left222'
          _view.triangle.linkProperty("Transformation",  function() { return theta+ctatriangle; } ); // HtmlView Page linking property 'Transformation' for element 'triangle'
          _view.triangle.linkProperty("Visibility",  function() { return object==10; } ); // HtmlView Page linking property 'Visibility' for element 'triangle'
          _view.polygon4.linkProperty("Points",  function() { return [[3*Math.sin(pi/3),3],[3*Math.sin(pi/3),0],[-3*Math.sin(pi/3),0],[3*Math.sin(pi/3),3,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon4'
          _view.polygon4.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'polygon4'
          _view.polygon42.linkProperty("Points",  function() { return [[3*Math.sin(pi/3),-3],[3*Math.sin(pi/3),0],[-3*Math.sin(pi/3),0],[3*Math.sin(pi/3),-3,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon42'
          _view.symmetryfortriangle1202.linkProperty("Transformation",  function() { return 2*pi/3+theta; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryfortriangle1202'
          _view.symmetryfortriangle1202.linkProperty("LineColor",  function() { return colorline5; }, function(_v) { colorline5 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryfortriangle1202'
          _view.symmetryfortriangle1202.linkProperty("Visibility",  function() { return object==10; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryfortriangle1202'
          _view.symmetryfortriangle240.linkProperty("Transformation",  function() { return 4*pi/3+theta; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryfortriangle240'
          _view.symmetryfortriangle240.linkProperty("LineColor",  function() { return colorline6; }, function(_v) { colorline6 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryfortriangle240'
          _view.symmetryfortriangle240.linkProperty("Visibility",  function() { return object==10; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryfortriangle240'
          _view.hitzone2GREEN1202.linkProperty("X",  function() { return 3*Math.cos(2*pi/3+theta); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN1202'
          _view.hitzone2GREEN1202.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN1202'
          _view.hitzone2GREEN1202.linkProperty("Y",  function() { return 3*Math.sin(2*pi/3+theta); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN1202'
          _view.hitzone2GREEN1202.linkProperty("Visibility",  function() { return object==10; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN1202'
          _view.hitzone2GREEN1202.setAction("OnPress", function(_data,_info) {
  ctatriangle=2*pi/3;
  //triangle60show=true;
  _play();
  text="folding";
  colorline5="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN1202'
          _view.hitzone2GREEN240.linkProperty("X",  function() { return 3*Math.cos(4*pi/3+theta); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN240'
          _view.hitzone2GREEN240.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN240'
          _view.hitzone2GREEN240.linkProperty("Y",  function() { return 3*Math.sin(4*pi/3+theta); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN240'
          _view.hitzone2GREEN240.linkProperty("Visibility",  function() { return object==10; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN240'
          _view.hitzone2GREEN240.setAction("OnPress", function(_data,_info) {
  ctatriangle=4*pi/3;
  //triangle60show=true;
  _play();
  text="folding";
  colorline6="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN240'
          _view.polygon5.linkProperty("Transformation",  function() { return ctapentagon; }, function(_v) { ctapentagon = _v; } ); // HtmlView Page linking property 'Transformation' for element 'polygon5'
          _view.polygon5.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'polygon5'
          _view.theta.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'theta'
          _view.trickrotate72.linkProperty("Transformation",  function() { return thetarotate72; }, function(_v) { thetarotate72 = _v; } ); // HtmlView Page linking property 'Transformation' for element 'trickrotate72'
          _view.polygon43.linkProperty("Points",  function() { return [[2.255,0],[2.246,1.63],[-0.863,2.635],[-2.783,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon43'
          _view.polygon43.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'polygon43'
          _view.polygon422.linkProperty("Points",  function() { return [[2.255,0],[2.246,-1.63],[-0.863,-2.635],[-2.783,0]]; } ); // HtmlView Page linking property 'Points' for element 'polygon422'
          _view.hitzone2GREEN72.linkProperty("X",  function() { return 3*Math.cos(2*pi/5+theta); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN72'
          _view.hitzone2GREEN72.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN72'
          _view.hitzone2GREEN72.linkProperty("Y",  function() { return 3*Math.sin(2*pi/5+theta); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN72'
          _view.hitzone2GREEN72.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN72'
          _view.hitzone2GREEN72.setAction("OnPress", function(_data,_info) {
  ctapentagon=2*pi/5;
  //triangle60show=true;
  _play();
  text="folding";
  colorline7="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN72'
          _view.hitzone2GREEN144.linkProperty("X",  function() { return 3*Math.cos(4*pi/5+theta); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN144'
          _view.hitzone2GREEN144.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN144'
          _view.hitzone2GREEN144.linkProperty("Y",  function() { return 3*Math.sin(4*pi/5+theta); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN144'
          _view.hitzone2GREEN144.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN144'
          _view.hitzone2GREEN144.setAction("OnPress", function(_data,_info) {
  ctapentagon=4*pi/5;
  //triangle60show=true;
  _play();
  text="folding";
  colorline8="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN144'
          _view.hitzone2GREEN216.linkProperty("X",  function() { return 3*Math.cos(6*pi/5+theta); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN216'
          _view.hitzone2GREEN216.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN216'
          _view.hitzone2GREEN216.linkProperty("Y",  function() { return 3*Math.sin(6*pi/5+theta); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN216'
          _view.hitzone2GREEN216.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN216'
          _view.hitzone2GREEN216.setAction("OnPress", function(_data,_info) {
  ctapentagon=6*pi/5;
  //triangle60show=true;
  _play();
  text="folding";
  colorline9="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN216'
          _view.hitzone2GREEN288.linkProperty("X",  function() { return 3*Math.cos(8*pi/5+theta); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN288'
          _view.hitzone2GREEN288.setAction("OnEnter", function(_data,_info) {
  text="Click me to play along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN288'
          _view.hitzone2GREEN288.linkProperty("Y",  function() { return 3*Math.sin(8*pi/5+theta); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN288'
          _view.hitzone2GREEN288.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN288'
          _view.hitzone2GREEN288.setAction("OnPress", function(_data,_info) {
  ctapentagon=8*pi/5;
  //triangle60show=true;
  _play();
  text="folding";
  colorline10="Black";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN288'
          _view.polygontheta.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'polygontheta'
          _view.symmetryforpentagon72.linkProperty("Transformation",  function() { return 2*pi/5; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryforpentagon72'
          _view.symmetryforpentagon72.linkProperty("LineColor",  function() { return colorline7; }, function(_v) { colorline7 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryforpentagon72'
          _view.symmetryforpentagon72.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryforpentagon72'
          _view.symmetryforpentagon1442.linkProperty("Transformation",  function() { return 4*pi/5; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryforpentagon1442'
          _view.symmetryforpentagon1442.linkProperty("LineColor",  function() { return colorline8; }, function(_v) { colorline8 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryforpentagon1442'
          _view.symmetryforpentagon1442.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryforpentagon1442'
          _view.symmetryforpentagon2162.linkProperty("Transformation",  function() { return 6*pi/5; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryforpentagon2162'
          _view.symmetryforpentagon2162.linkProperty("LineColor",  function() { return colorline9; }, function(_v) { colorline9 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryforpentagon2162'
          _view.symmetryforpentagon2162.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryforpentagon2162'
          _view.symmetryforpentagon288.linkProperty("Transformation",  function() { return 8*pi/5; } ); // HtmlView Page linking property 'Transformation' for element 'symmetryforpentagon288'
          _view.symmetryforpentagon288.linkProperty("LineColor",  function() { return colorline10; }, function(_v) { colorline10 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'symmetryforpentagon288'
          _view.symmetryforpentagon288.linkProperty("Visibility",  function() { return object==11; } ); // HtmlView Page linking property 'Visibility' for element 'symmetryforpentagon288'
          _view.ladybug.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'ladybug'
          _view.ladybug.linkProperty("Visibility",  function() { return object==12; } ); // HtmlView Page linking property 'Visibility' for element 'ladybug'
          _view.image.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'image'
          _view.butterfly.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'butterfly'
          _view.butterfly.linkProperty("Visibility",  function() { return object==13; } ); // HtmlView Page linking property 'Visibility' for element 'butterfly'
          _view.image3.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'image3'
          _view.pacmanshape.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'pacmanshape'
          _view.pacmanshape.linkProperty("Visibility",  function() { return object==14; } ); // HtmlView Page linking property 'Visibility' for element 'pacmanshape'
          _view.letterxystayFOLDTOTHERIGHT3.linkProperty("PointsY",  function() { return pacmancircley; }, function(_v) { pacmancircley = _v; } ); // HtmlView Page linking property 'PointsY' for element 'letterxystayFOLDTOTHERIGHT3'
          _view.letterxystayFOLDTOTHERIGHT3.linkProperty("PointsX",  function() { return pacmancirclex; }, function(_v) { pacmancirclex = _v; } ); // HtmlView Page linking property 'PointsX' for element 'letterxystayFOLDTOTHERIGHT3'
          _view.letterxystayFOLDTOTHERIGHT3.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'letterxystayFOLDTOTHERIGHT3'
          _view.letterxystayFOLDTOTHERIGHT3.setAction("OnEnter", function(_data,_info) {
  text="PacMan Shape";

}); // HtmlView Page setting action 'OnEnter' for element 'letterxystayFOLDTOTHERIGHT3'
          _view.letterxystayFOLDTOTHERIGHT22.linkProperty("PointsY",  function() { return pacmancircleysymmetry; }, function(_v) { pacmancircleysymmetry = _v; } ); // HtmlView Page linking property 'PointsY' for element 'letterxystayFOLDTOTHERIGHT22'
          _view.letterxystayFOLDTOTHERIGHT22.linkProperty("PointsX",  function() { return pacmancirclexsymmetry; }, function(_v) { pacmancirclexsymmetry = _v; } ); // HtmlView Page linking property 'PointsX' for element 'letterxystayFOLDTOTHERIGHT22'
          _view.letterxystayFOLDTOTHERIGHT22.setAction("OnEnter", function(_data,_info) {
  text="PacMan Shape";

}); // HtmlView Page setting action 'OnEnter' for element 'letterxystayFOLDTOTHERIGHT22'
          _view.handontherightofthecircle.linkProperty("Rotate",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Rotate' for element 'handontherightofthecircle'
          _view.handontherightofthecircle.linkProperty("X",  function() { return 3.5*Math.cos(theta); } ); // HtmlView Page linking property 'X' for element 'handontherightofthecircle'
          _view.handontherightofthecircle.linkProperty("Y",  function() { return 3.5*Math.sin(theta); } ); // HtmlView Page linking property 'Y' for element 'handontherightofthecircle'
          _view.handontherightofthecircle.linkProperty("Visibility",  function() { return showmainline; }, function(_v) { showmainline = _v; } ); // HtmlView Page linking property 'Visibility' for element 'handontherightofthecircle'
          _view.handontherightofthecircle.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'handontherightofthecircle'
          _view.hitzone2GREEN.linkProperty("X",  function() { return 4*Math.cos(theta); } ); // HtmlView Page linking property 'X' for element 'hitzone2GREEN'
          _view.hitzone2GREEN.setAction("OnEnter", function(_data,_info) {
  text="Click me to fold along the symmetry line";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2GREEN'
          _view.hitzone2GREEN.linkProperty("Y",  function() { return 4*Math.sin(theta); } ); // HtmlView Page linking property 'Y' for element 'hitzone2GREEN'
          _view.hitzone2GREEN.linkProperty("Visibility",  function() { return showmainline; }, function(_v) { showmainline = _v; } ); // HtmlView Page linking property 'Visibility' for element 'hitzone2GREEN'
          _view.hitzone2GREEN.setAction("OnPress", function(_data,_info) {
  if (object==0){
  thetasymmetrylinen[counter]=theta;
  counter=counter+1;
  }
  else if (object==1){
  //horizon 
  showovallr=false;
    }
   
  //else if (object==2&&theta==pi/2){
    else if (object==2){
   // theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=2;
   showrectanglelr=false;
    }
    else if (object==3&&theta==pi/2){ // tall rectangle
   // theta =0.0000001; // set back to zero orientation
   // ovalsizex=6; // set size back to original
   // ovalsizey=2;
    }
   else if (object==9&&d>0.99){ // tall rectangle
  square45show=false;
  showrectanglelr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==9&&d<-0.99){ // tall rectangle
  square45show=false;
  showrectanglelr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
   else if (object==5&&d>0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==5&&d<-0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
  else if (object==10){
    ctatriangle=0.0001;
    }
    else if (object==11){
    ctapentagon=0.0001;
    }
  _play();
  text="folding";
  colorline="rgba(0,0,0,1.0)";

}); // HtmlView Page setting action 'OnPress' for element 'hitzone2GREEN'
          _view.hitzone2DRAG.setAction("OnDoubleClick", function(_data,_info) {
  if (object==0){
  thetasymmetrylinen[counter]=theta;
  counter=counter+1;
  }
  else if (object==1){
    
  if (theta==pi/2){
    theta =0.0000001; // set back to zero orientation
    ovalsizex=4;
    ovalsizey=2;
    _update();//force redrawn
   }
    }
  else if (object==2&&theta==pi/2){
    theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=2;
    }
    else if (object==3&&theta==pi/2){ // tall rectangle
    theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=2;
    }
    else if (object==9&&theta==pi/2){ // square
    theta =0.0000001; // set back to zero orientation
    ovalsizex=6; // set size back to original
    ovalsizey=3;
   square45show=false;
   }
   else if (object==5&&d>0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=-0.25; //skew manually set easily instead of restore
  dchange=-0.5; // set d
  }
  else if (object==5&&d<-0.99){ // tall rectangle
   showarrowlr=false;
   achange=0;
  bchange=0; //set a n b
  cchange=cchanges; //store back data
  dchange=dchanges; // freeze d
  }
  else if (object==10){
    ctatriangle=0.0001;
    }
    else if (object==11){
    ctapentagon=0.0001;
    }
  _play();
  text="folding";

}); // HtmlView Page setting action 'OnDoubleClick' for element 'hitzone2DRAG'
          _view.hitzone2DRAG.setAction("OnDrag", function(_data,_info) {
  theta=Math.atan2(ydrag,xdrag); //1st n 2nd Quandrant
  if (ydrag<=0&&xdrag<5){ //solve for 3rd n 4th Quandrant
   theta=Math.atan2(ydrag,xdrag)+2*pi; 
    }
  xdrag=Math.cos(theta)*5; //constrainted
  ydrag=Math.sin(theta)*5;

}); // HtmlView Page setting action 'OnDrag' for element 'hitzone2DRAG'
          _view.hitzone2DRAG.linkProperty("X",  function() { return xdrag; }, function(_v) { xdrag = _v; } ); // HtmlView Page linking property 'X' for element 'hitzone2DRAG'
          _view.hitzone2DRAG.setAction("OnEnter", function(_data,_info) {
  text="Drag me to rotate the view, \ndouble-click to play/pause";

}); // HtmlView Page setting action 'OnEnter' for element 'hitzone2DRAG'
          _view.hitzone2DRAG.linkProperty("Y",  function() { return ydrag; }, function(_v) { ydrag = _v; } ); // HtmlView Page linking property 'Y' for element 'hitzone2DRAG'
          _view.roatateunicode.linkProperty("Rotate",  function() { return pi+theta; } ); // HtmlView Page linking property 'Rotate' for element 'roatateunicode'
          _view.roatateunicode.linkProperty("X",  function() { return xdrag; }, function(_v) { xdrag = _v; } ); // HtmlView Page linking property 'X' for element 'roatateunicode'
          _view.roatateunicode.linkProperty("Y",  function() { return ydrag+0.25; } ); // HtmlView Page linking property 'Y' for element 'roatateunicode'
          _view.roatateunicode.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'roatateunicode'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function symmetryshape_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = symmetryshape_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function symmetryshape_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"question", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'question'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'question'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.question) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vectorcompo", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vectorcompo'
      .setProperty("Text","Explore the Symmetric Shape!") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vectorcompo'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Background","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'comboBox'
      .setProperty("Tooltip","select user_defined rays to show") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButtontopbottom", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButtontopbottom'
      .setProperty("TextOn","||") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButtontopbottom'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'playPauseButtontopbottom'
      .setProperty("Tooltip","Fold up/Unfold down") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButtontopbottom'
      .setProperty("TextOff","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButtontopbottom'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'playPauseButtontopbottom'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'field'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider23", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider23'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider23'
      .setProperty("Maximum",1) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider23'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider2'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider2'
      .setProperty("Maximum",1) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider22", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider22'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider22'
      .setProperty("Maximum",1) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider22'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider222", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider222'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider222'
      .setProperty("Maximum",1) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider222'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider223", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider223'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider223'
      .setProperty("Maximum",1) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider223'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'slider223'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider224", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider224'
      .setProperty("Minimum",-1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider224'
      .setProperty("Maximum",1) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider224'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'slider224'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("EnabledZooming",false) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("YScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-5) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"original", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'original'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"symmetrylinearray", _view.original) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetrylinearray'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetrylinearray'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetrylinearray'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetrylinearray'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'symmetrylinearray'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetrylinearray'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetrylinearray'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetrylinearray'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetrylinearray'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'hitzone'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"handontheleftofcircle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'handontheleftofcircle'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'handontheleftofcircle'
      .setProperty("Text","👏") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'handontheleftofcircle'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'handontheleftofcircle'
      .setProperty("ScaleX",-1) // EJsS HtmlView.HtmlView Page: setting property 'ScaleX' for element 'handontheleftofcircle'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryforallcasesincircle2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryforallcasesincircle2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryforallcasesincircle2'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryforallcasesincircle2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryforallcasesincircle2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryforallcasesincircle2'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryforallcasesincircle2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryforallcasesincircle2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryforallcasesincircle2'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryforallcasesincircle2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryforallcasesincircle2'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryforallcasesincircle2'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryforallcasesincircle2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"help", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'help'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'help'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'help'
      .setProperty("Y",-3.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'help'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'help'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"circle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'circle'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"letterxystayFOLDTOTHERIGHT", _view.circle) // EJsS HtmlView.HtmlView Page: declaration of element 'letterxystayFOLDTOTHERIGHT'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'letterxystayFOLDTOTHERIGHT'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'letterxystayFOLDTOTHERIGHT'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'letterxystayFOLDTOTHERIGHT'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'letterxystayFOLDTOTHERIGHT'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.circle) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"letterxystayFOLDTOTHERIGHT2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'letterxystayFOLDTOTHERIGHT2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'letterxystayFOLDTOTHERIGHT2'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'letterxystayFOLDTOTHERIGHT2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'letterxystayFOLDTOTHERIGHT2'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'letterxystayFOLDTOTHERIGHT2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone222MAGENTA", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone222MAGENTA'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone222MAGENTA'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone222MAGENTA'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone222MAGENTA'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone222MAGENTA'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone222MAGENTA'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone222MAGENTA'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text3'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'text3'
      .setProperty("Text","👏🏾") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone22", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone22'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone22'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone22'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone22'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone22'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone22'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text32", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text32'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'text32'
      .setProperty("Text","👏🏾") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text32'
      .setProperty("ScaleX",-1) // EJsS HtmlView.HtmlView Page: setting property 'ScaleX' for element 'text32'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryv", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryv'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryv'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryv'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryv'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryv'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryv'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryv'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryv'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryv'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryv'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryv'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryv'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"oval", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'oval'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"ovaltoppiece2", _view.oval) // EJsS HtmlView.HtmlView Page: declaration of element 'ovaltoppiece2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ovaltoppiece2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ovaltoppiece2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"rotate_90", _view.oval) // EJsS HtmlView.HtmlView Page: declaration of element 'rotate_90'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"ovalleftpiece", _view.rotate_90) // EJsS HtmlView.HtmlView Page: declaration of element 'ovalleftpiece'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ovalleftpiece'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ovalleftpiece'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"rotate180another", _view.rotate_90) // EJsS HtmlView.HtmlView Page: declaration of element 'rotate180another'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"ovalrightpiece2", _view.rotate180another) // EJsS HtmlView.HtmlView Page: declaration of element 'ovalrightpiece2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ovalrightpiece2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ovalrightpiece2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group22", _view.oval) // EJsS HtmlView.HtmlView Page: declaration of element 'group22'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"ovalbottompiece", _view.group22) // EJsS HtmlView.HtmlView Page: declaration of element 'ovalbottompiece'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'ovalbottompiece'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'ovalbottompiece'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"rectangle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rectangle'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectangle23", _view.rectangle) // EJsS HtmlView.HtmlView Page: declaration of element 'rectangle23'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectangle23'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectangle23'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectangle23'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectangle23'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectangleleftpiece2", _view.rectangle) // EJsS HtmlView.HtmlView Page: declaration of element 'rectangleleftpiece2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectangleleftpiece2'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectangleleftpiece2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectangleleftpiece2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectangleleftpiece2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectanglerightpiece", _view.rectangle) // EJsS HtmlView.HtmlView Page: declaration of element 'rectanglerightpiece'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectanglerightpiece'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rectanglerightpiece'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectanglerightpiece'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectanglerightpiece'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectanglerightpiece'
      .setProperty("SizeY",4) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rectanglerightpiece'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group222", _view.rectangle) // EJsS HtmlView.HtmlView Page: declaration of element 'group222'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectangle22", _view.group222) // EJsS HtmlView.HtmlView Page: declaration of element 'rectangle22'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectangle22'
      .setProperty("CornerRadius",1) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'rectangle22'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectangle22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectangle22'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectangle22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"square", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'square'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectangle232", _view.square) // EJsS HtmlView.HtmlView Page: declaration of element 'rectangle232'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectangle232'
      .setProperty("SizeX",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rectangle232'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectangle232'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectangle232'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectangle232'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rectangle232'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectangleleftpiece22", _view.square) // EJsS HtmlView.HtmlView Page: declaration of element 'rectangleleftpiece22'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectangleleftpiece22'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rectangleleftpiece22'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectangleleftpiece22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectangleleftpiece22'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectangleleftpiece22'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rectangleleftpiece22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectanglerightpiece2", _view.square) // EJsS HtmlView.HtmlView Page: declaration of element 'rectanglerightpiece2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectanglerightpiece2'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rectanglerightpiece2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectanglerightpiece2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectanglerightpiece2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectanglerightpiece2'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rectanglerightpiece2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2223", _view.square) // EJsS HtmlView.HtmlView Page: declaration of element 'group2223'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"rectangle222", _view.group2223) // EJsS HtmlView.HtmlView Page: declaration of element 'rectangle222'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'rectangle222'
      .setProperty("CornerRadius",1) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'rectangle222'
      .setProperty("SizeX",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rectangle222'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rectangle222'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'rectangle222'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'rectangle222'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rectangle222'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"square45n135", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'square45n135'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon3", _view.square45n135) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon3'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon3'
      .setProperty("SizeX",1.414) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'polygon3'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon3'
      .setProperty("SizeY",1.414) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'polygon3'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'polygon3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group22223", _view.square45n135) // EJsS HtmlView.HtmlView Page: declaration of element 'group22223'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon32", _view.group22223) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon32'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon32'
      .setProperty("SizeX",1.414) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'polygon32'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon32'
      .setProperty("SizeY",1.414) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'polygon32'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'polygon32'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryforsquare135", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryforsquare135'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryforsquare135'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryforsquare135'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryforsquare135'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryforsquare135'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryforsquare135'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryforsquare135'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryforsquare135'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryforsquare135'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryforsquare135'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryforsquare135'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryforsquare135'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryforsquare45", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryforsquare45'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryforsquare45'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryforsquare45'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryforsquare45'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryforsquare45'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryforsquare45'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryforsquare45'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryforsquare45'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryforsquare45'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryforsquare45'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryforsquare45'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryforsquare45'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN135", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN135'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN135'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN135'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN135'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN135'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN135'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN135'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN135'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN135'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN45", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN45'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN45'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN45'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN45'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN45'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN45'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN45'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN45'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN45'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"trapezium", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trapezium'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon", _view.trapezium) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2222", _view.trapezium) // EJsS HtmlView.HtmlView Page: declaration of element 'group2222'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon2", _view.group2222) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"arrowpairsusingdifferenttechnique", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowpairsusingdifferenttechnique'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"arrowpointup", _view.arrowpairsusingdifferenttechnique) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowpointup'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowpointup'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowpointup'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"arrowrightsidestillpointup2", _view.arrowpairsusingdifferenttechnique) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowrightsidestillpointup2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowrightsidestillpointup2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowrightsidestillpointup2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"arrowleftsidestillpointup", _view.arrowpairsusingdifferenttechnique) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowleftsidestillpointup'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowleftsidestillpointup'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowleftsidestillpointup'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group22222", _view.arrowpairsusingdifferenttechnique) // EJsS HtmlView.HtmlView Page: declaration of element 'group22222'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"arrowpointdown", _view.group22222) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowpointdown'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowpointdown'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowpointdown'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve'
      .setProperty("FunctionY","13*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)") // EJsS HtmlView.HtmlView Page: setting property 'FunctionY' for element 'analyticCurve'
      .setProperty("FunctionX","16*sin(t)") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurve'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'analyticCurve'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'analyticCurve'
      .setProperty("SizeY",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'analyticCurve'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"heart", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'heart'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"left", _view.heart) // EJsS HtmlView.HtmlView Page: declaration of element 'left'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'left'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'left'
      .setProperty("ImageUrl","./symmetryshape/leftheart.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'left'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'left'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'left'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"right", _view.heart) // EJsS HtmlView.HtmlView Page: declaration of element 'right'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'right'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'right'
      .setProperty("ImageUrl","./symmetryshape/rghtheart.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'right'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'right'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'right'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"left2", _view.heart) // EJsS HtmlView.HtmlView Page: declaration of element 'left2'
      .setProperty("PointsY",[-2.770,-2.568,-2.391,-2.037,-1.784,-1.493,-1.189,-0.898,-0.506,-0.253,-1.265E-2,0.354,0.696,1.075,1.417,1.771,2.087,2.340,2.492,2.606,2.682,2.732,2.720,2.618,2.416,2.163,1.885]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'left2'
      .setProperty("PointsX",[0,-0.190,-0.430,-0.797,-1.075,-1.404,-1.733,-2.100,-2.454,-2.644,-2.783,-2.935,-3.011,-3.036,-3.023,-2.922,-2.745,-2.530,-2.340,-2.112,-1.822,-1.556,-1.176,-0.810,-0.455,-0.240,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'left2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'left2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'left2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"right2", _view.heart) // EJsS HtmlView.HtmlView Page: declaration of element 'right2'
      .setProperty("PointsY",[-2.770,-2.568,-2.391,-2.037,-1.784,-1.493,-1.189,-0.898,-0.506,-0.253,-1.265E-2,0.354,0.696,1.075,1.417,1.771,2.087,2.340,2.492,2.606,2.682,2.732,2.720,2.618,2.416,2.163,1.885]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'right2'
      .setProperty("PointsX",[0,0.190,0.430,0.797,1.075,1.404,1.733,2.100,2.454,2.644,2.783,2.935,3.011,3.036,3.023,2.922,2.745,2.530,2.340,2.112,1.822,1.556,1.176,0.810,0.455,0.240,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'right2'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'right2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'right2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"flask", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'flask'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"left22", _view.flask) // EJsS HtmlView.HtmlView Page: declaration of element 'left22'
      .setProperty("PointsY",[-10.43,-10.43,-10.19,-9.967,-9.722,-9.255,-8.855,-8.521,-8.076,-7.720,-7.208,-6.786,-6.341,-6.052,-5.762,-5.473,-5.206,-4.939,-4.605,-4.294,-3.938,-3.582,-0.200,-0.178,-2.225E-2,-2.225E-2]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'left22'
      .setProperty("PointsX",[0,-1.624,-1.958,-2.180,-2.425,-2.625,-2.759,-2.826,-2.848,-2.892,-2.848,-2.692,-2.514,-2.358,-2.158,-1.913,-1.735,-1.580,-1.313,-1.179,-1.023,-0.957,-0.957,-1.135,-1.135,0.000]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'left22'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'left22'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'left22'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'left22'
      .setProperty("SizeY",0.7) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'left22'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"right3", _view.flask) // EJsS HtmlView.HtmlView Page: declaration of element 'right3'
      .setProperty("PointsY",[-10.43,-10.43,-10.19,-9.967,-9.722,-9.255,-8.855,-8.521,-8.076,-7.720,-7.208,-6.786,-6.341,-6.052,-5.762,-5.473,-5.206,-4.939,-4.605,-4.294,-3.938,-3.582,-0.200,-0.178,-2.225E-2,-2.225E-2]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'right3'
      .setProperty("PointsX",[0, 1.624, 1.958, 2.180, 2.425, 2.625, 2.759, 2.826, 2.848, 2.892, 2.848, 2.692, 2.514, 2.358, 2.158, 1.913, 1.735, 1.580, 1.313, 1.179, 1.023, 0.957, 0.957, 1.135, 1.135,0.000]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'right3'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'right3'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'right3'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'right3'
      .setProperty("SizeY",0.7) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'right3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"spade", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'spade'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"left222", _view.spade) // EJsS HtmlView.HtmlView Page: declaration of element 'left222'
      .setProperty("PointsY",[-2.473 ,-2.445 ,-1.300 ,-1.286 ,-1.173 ,-0.975 ,-0.735 ,-0.509 ,-0.240 ,1.413E-2 ,0.325 ,0.622 ,0.848 ,1.173 ,4.126]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'left222'
      .setProperty("PointsX",[-0 ,-1.724 ,-0.579 ,-1.639 ,-2.049 ,-2.402 ,-2.614 ,-2.770 ,-2.897 ,-2.939 ,-2.897 ,-2.812 ,-2.699 ,-2.473 ,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'left222'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'left222'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'left222'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'left222'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"right4", _view.spade) // EJsS HtmlView.HtmlView Page: declaration of element 'right4'
      .setProperty("PointsY",[-2.473 ,-2.445 ,-1.300 ,-1.286 ,-1.173 ,-0.975 ,-0.735 ,-0.509 ,-0.240 ,1.413E-2 ,0.325 ,0.622 ,0.848 ,1.173 ,4.126]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'right4'
      .setProperty("PointsX",[ 0 , 1.724 , 0.579 , 1.639 , 2.049 , 2.402 , 2.614 , 2.770 , 2.897 , 2.939 , 2.897 , 2.812 , 2.699 , 2.473 ,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'right4'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'right4'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'right4'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'right4'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"triangle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'triangle'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon4", _view.triangle) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon4'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon4'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon4'
      .setProperty("X",-0.87) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'polygon4'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon42", _view.triangle) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon42'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon42'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon42'
      .setProperty("X",-0.87) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'polygon42'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryfortriangle1202", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryfortriangle1202'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryfortriangle1202'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryfortriangle1202'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryfortriangle1202'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryfortriangle1202'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryfortriangle1202'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryfortriangle1202'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryfortriangle1202'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryfortriangle1202'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryfortriangle1202'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryfortriangle1202'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryfortriangle1202'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryfortriangle240", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryfortriangle240'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryfortriangle240'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryfortriangle240'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryfortriangle240'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryfortriangle240'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryfortriangle240'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryfortriangle240'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryfortriangle240'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryfortriangle240'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryfortriangle240'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryfortriangle240'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryfortriangle240'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN1202", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN1202'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN1202'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN1202'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN1202'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN1202'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN1202'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN1202'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN1202'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN1202'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN240", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN240'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN240'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN240'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN240'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN240'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN240'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN240'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN240'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN240'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"polygon5", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon5'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"theta", _view.polygon5) // EJsS HtmlView.HtmlView Page: declaration of element 'theta'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"trickrotate72", _view.theta) // EJsS HtmlView.HtmlView Page: declaration of element 'trickrotate72'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon43", _view.trickrotate72) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon43'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon43'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon43'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon422", _view.trickrotate72) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon422'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon422'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polygon422'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN72", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN72'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN72'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN72'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN72'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN72'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN72'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN72'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN72'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN72'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN144", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN144'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN144'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN144'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN144'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN144'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN144'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN144'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN144'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN144'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN216", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN216'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN216'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN216'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN216'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN216'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN216'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN216'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN216'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN216'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN288", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN288'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN288'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN288'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN288'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN288'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN288'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN288'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN288'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN288'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"polygontheta", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'polygontheta'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryforpentagon72", _view.polygontheta) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryforpentagon72'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryforpentagon72'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryforpentagon72'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryforpentagon72'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryforpentagon72'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryforpentagon72'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryforpentagon72'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryforpentagon72'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryforpentagon72'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryforpentagon72'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryforpentagon72'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryforpentagon72'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryforpentagon1442", _view.polygontheta) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryforpentagon1442'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryforpentagon1442'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryforpentagon1442'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryforpentagon1442'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryforpentagon1442'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryforpentagon1442'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryforpentagon1442'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryforpentagon1442'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryforpentagon1442'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryforpentagon1442'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryforpentagon1442'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryforpentagon1442'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryforpentagon2162", _view.polygontheta) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryforpentagon2162'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryforpentagon2162'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryforpentagon2162'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryforpentagon2162'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryforpentagon2162'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryforpentagon2162'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryforpentagon2162'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryforpentagon2162'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryforpentagon2162'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryforpentagon2162'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryforpentagon2162'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryforpentagon2162'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetryforpentagon288", _view.polygontheta) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetryforpentagon288'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'symmetryforpentagon288'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetryforpentagon288'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetryforpentagon288'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetryforpentagon288'
      .setProperty("InteractionPosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'symmetryforpentagon288'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'symmetryforpentagon288'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'symmetryforpentagon288'
      .setProperty("MarkStart","INVTRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetryforpentagon288'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetryforpentagon288'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetryforpentagon288'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetryforpentagon288'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ladybug", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ladybug'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image2", _view.ladybug) // EJsS HtmlView.HtmlView Page: declaration of element 'image2'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'image2'
      .setProperty("ImageUrl","./symmetryshape/rightladtbug.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image2'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.ladybug) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'image'
      .setProperty("ImageUrl","./symmetryshape/leftladybug.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"butterfly", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'butterfly'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image22", _view.butterfly) // EJsS HtmlView.HtmlView Page: declaration of element 'image22'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image22'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'image22'
      .setProperty("ImageUrl","./symmetryshape/butterflyright.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image22'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image22'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image3", _view.butterfly) // EJsS HtmlView.HtmlView Page: declaration of element 'image3'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image3'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'image3'
      .setProperty("ImageUrl","./symmetryshape/butterflyleft.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image3'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"pacmanshape", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'pacmanshape'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"letterxystayFOLDTOTHERIGHT3", _view.pacmanshape) // EJsS HtmlView.HtmlView Page: declaration of element 'letterxystayFOLDTOTHERIGHT3'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'letterxystayFOLDTOTHERIGHT3'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'letterxystayFOLDTOTHERIGHT3'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'letterxystayFOLDTOTHERIGHT3'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'letterxystayFOLDTOTHERIGHT3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group23", _view.pacmanshape) // EJsS HtmlView.HtmlView Page: declaration of element 'group23'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"letterxystayFOLDTOTHERIGHT22", _view.group23) // EJsS HtmlView.HtmlView Page: declaration of element 'letterxystayFOLDTOTHERIGHT22'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'letterxystayFOLDTOTHERIGHT22'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'letterxystayFOLDTOTHERIGHT22'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'letterxystayFOLDTOTHERIGHT22'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'letterxystayFOLDTOTHERIGHT22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"handontherightofthecircle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'handontherightofthecircle'
      .setProperty("Text","👏") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'handontherightofthecircle'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2GREEN", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2GREEN'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2GREEN'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2GREEN'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2GREEN'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2GREEN'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2GREEN'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2GREEN'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2GREEN'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2GREEN'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hitzone2DRAG", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitzone2DRAG'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hitzone2DRAG'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'hitzone2DRAG'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hitzone2DRAG'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hitzone2DRAG'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hitzone2DRAG'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hitzone2DRAG'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hitzone2DRAG'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hitzone2DRAG'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hitzone2DRAG'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"roatateunicode", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'roatateunicode'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'roatateunicode'
      .setProperty("Text","↺") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'roatateunicode'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Symmetry of Shape<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/ejss_src_symmetryshape/symmetryshape/Screen Shot 2017-11-02 at 11.12.42 AM.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/ejss_src_symmetryshape/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/ejss_src_symmetryshape/01authorPacoEsquembre2011.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/ejss_src_symmetryshape/01authorFelix_J_Garcia_Clemente.png" />
 weelookang@gmail.com; Francisco Esquembre; Felix J. Garcia Clemente
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, CC-BY-SA-NC.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new symmetryshape("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/ejss_src_symmetryshape/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
