<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Numbers 1 to 100</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function number1to100(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var selected1; // EjsS Model.Variables.Var Table.selected1
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var hint; // EjsS Model.Variables.Var Table.hint
  var count; // EjsS Model.Variables.Var Table.count

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var iOS; // EjsS Model.Variables.layout.iOS
  var Android; // EjsS Model.Variables.layout.Android
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var k; // EjsS Model.Variables.numbers.k
  var i; // EjsS Model.Variables.numbers.i
  var i2; // EjsS Model.Variables.numbers.i2
  var j; // EjsS Model.Variables.numbers.j
  var vectorIndex; // EjsS Model.Variables.numbers.vectorIndex
  var n; // EjsS Model.Variables.numbers.n
  var nMax; // EjsS Model.Variables.numbers.nMax
  var nVectors; // EjsS Model.Variables.numbers.nVectors
  var nVectorsMax; // EjsS Model.Variables.numbers.nVectorsMax
  var nVectorsSq; // EjsS Model.Variables.numbers.nVectorsSq
  var textpos; // EjsS Model.Variables.numbers.textpos
  var colorVectors; // EjsS Model.Variables.numbers.colorVectors
  var x; // EjsS Model.Variables.numbers.x
  var y; // EjsS Model.Variables.numbers.y
  var posx; // EjsS Model.Variables.numbers.posx
  var posy; // EjsS Model.Variables.numbers.posy
  var factorresults; // EjsS Model.Variables.numbers.factorresults
  var factorresultsMax; // EjsS Model.Variables.numbers.factorresultsMax

  var colororiginal; // EjsS Model.Variables.colors.colororiginal
  var colorodd; // EjsS Model.Variables.colors.colorodd
  var coloreven; // EjsS Model.Variables.colors.coloreven
  var colormultiples; // EjsS Model.Variables.colors.colormultiples
  var colorfactors; // EjsS Model.Variables.colors.colorfactors
  var colorhint; // EjsS Model.Variables.colors.colorhint
  var numbercolor; // EjsS Model.Variables.colors.numbercolor
  var numbercolorblack; // EjsS Model.Variables.colors.numbercolorblack
  var colordull; // EjsS Model.Variables.colors.colordull

  var elementinteracted; // EjsS Model.Variables.game.elementinteracted
  var score; // EjsS Model.Variables.game.score
  var feedbacktext; // EjsS Model.Variables.game.feedbacktext
  var left; // EjsS Model.Variables.game.left
  var oddnumbersleft; // EjsS Model.Variables.game.oddnumbersleft
  var evennumbersleft; // EjsS Model.Variables.game.evennumbersleft
  var multiplenumbersleft; // EjsS Model.Variables.game.multiplenumbersleft
  var multiplenumbersleftonscreen; // EjsS Model.Variables.game.multiplenumbersleftonscreen
  var multiplenumbersleftonscreen2; // EjsS Model.Variables.game.multiplenumbersleftonscreen2
  var factorresultsleftonscreen; // EjsS Model.Variables.game.factorresultsleftonscreen
  var alertcount; // EjsS Model.Variables.game.alertcount
  var oddtextpos; // EjsS Model.Variables.game.oddtextpos
  var eventextpos; // EjsS Model.Variables.game.eventextpos
  var multipletextpos; // EjsS Model.Variables.game.multipletextpos
  var multipletextpos2; // EjsS Model.Variables.game.multipletextpos2
  var factortextpos; // EjsS Model.Variables.game.factortextpos

  var resultofstringvalue; // EjsS Model.Variables.clevercodelookang.resultofstringvalue
  var resultofstringvalue2; // EjsS Model.Variables.clevercodelookang.resultofstringvalue2
  var resultofstringvalue3; // EjsS Model.Variables.clevercodelookang.resultofstringvalue3
  var resultofstringvaluegame; // EjsS Model.Variables.clevercodelookang.resultofstringvaluegame
  var resultofstringvaluegame2; // EjsS Model.Variables.clevercodelookang.resultofstringvaluegame2
  var resultofstringvaluegame3; // EjsS Model.Variables.clevercodelookang.resultofstringvaluegame3
  var test; // EjsS Model.Variables.clevercodelookang.test
  var practiceshow; // EjsS Model.Variables.clevercodelookang.practiceshow

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      selected1 : selected1,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      t : t,
      dt : dt,
      hint : hint,
      count : count,
      isAndroid : isAndroid,
      iOS : iOS,
      Android : Android,
      iPad : iPad,
      iPhone : iPhone,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      k : k,
      i : i,
      i2 : i2,
      j : j,
      vectorIndex : vectorIndex,
      n : n,
      nMax : nMax,
      nVectors : nVectors,
      nVectorsMax : nVectorsMax,
      nVectorsSq : nVectorsSq,
      textpos : textpos,
      colorVectors : colorVectors,
      x : x,
      y : y,
      posx : posx,
      posy : posy,
      factorresults : factorresults,
      factorresultsMax : factorresultsMax,
      colororiginal : colororiginal,
      colorodd : colorodd,
      coloreven : coloreven,
      colormultiples : colormultiples,
      colorfactors : colorfactors,
      colorhint : colorhint,
      numbercolor : numbercolor,
      numbercolorblack : numbercolorblack,
      colordull : colordull,
      elementinteracted : elementinteracted,
      score : score,
      feedbacktext : feedbacktext,
      left : left,
      oddnumbersleft : oddnumbersleft,
      evennumbersleft : evennumbersleft,
      multiplenumbersleft : multiplenumbersleft,
      multiplenumbersleftonscreen : multiplenumbersleftonscreen,
      multiplenumbersleftonscreen2 : multiplenumbersleftonscreen2,
      factorresultsleftonscreen : factorresultsleftonscreen,
      alertcount : alertcount,
      oddtextpos : oddtextpos,
      eventextpos : eventextpos,
      multipletextpos : multipletextpos,
      multipletextpos2 : multipletextpos2,
      factortextpos : factortextpos,
      resultofstringvalue : resultofstringvalue,
      resultofstringvalue2 : resultofstringvalue2,
      resultofstringvalue3 : resultofstringvalue3,
      resultofstringvaluegame : resultofstringvaluegame,
      resultofstringvaluegame2 : resultofstringvaluegame2,
      resultofstringvaluegame3 : resultofstringvaluegame3,
      test : test,
      practiceshow : practiceshow
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.selected1 != "undefined") selected1 = json.selected1;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.hint != "undefined") hint = json.hint;
    if(typeof json.count != "undefined") count = json.count;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.i2 != "undefined") i2 = json.i2;
    if(typeof json.j != "undefined") j = json.j;
    if(typeof json.vectorIndex != "undefined") vectorIndex = json.vectorIndex;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.nMax != "undefined") nMax = json.nMax;
    if(typeof json.nVectors != "undefined") nVectors = json.nVectors;
    if(typeof json.nVectorsMax != "undefined") nVectorsMax = json.nVectorsMax;
    if(typeof json.nVectorsSq != "undefined") nVectorsSq = json.nVectorsSq;
    if(typeof json.textpos != "undefined") textpos = json.textpos;
    if(typeof json.colorVectors != "undefined") colorVectors = json.colorVectors;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.posx != "undefined") posx = json.posx;
    if(typeof json.posy != "undefined") posy = json.posy;
    if(typeof json.factorresults != "undefined") factorresults = json.factorresults;
    if(typeof json.factorresultsMax != "undefined") factorresultsMax = json.factorresultsMax;
    if(typeof json.colororiginal != "undefined") colororiginal = json.colororiginal;
    if(typeof json.colorodd != "undefined") colorodd = json.colorodd;
    if(typeof json.coloreven != "undefined") coloreven = json.coloreven;
    if(typeof json.colormultiples != "undefined") colormultiples = json.colormultiples;
    if(typeof json.colorfactors != "undefined") colorfactors = json.colorfactors;
    if(typeof json.colorhint != "undefined") colorhint = json.colorhint;
    if(typeof json.numbercolor != "undefined") numbercolor = json.numbercolor;
    if(typeof json.numbercolorblack != "undefined") numbercolorblack = json.numbercolorblack;
    if(typeof json.colordull != "undefined") colordull = json.colordull;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.feedbacktext != "undefined") feedbacktext = json.feedbacktext;
    if(typeof json.left != "undefined") left = json.left;
    if(typeof json.oddnumbersleft != "undefined") oddnumbersleft = json.oddnumbersleft;
    if(typeof json.evennumbersleft != "undefined") evennumbersleft = json.evennumbersleft;
    if(typeof json.multiplenumbersleft != "undefined") multiplenumbersleft = json.multiplenumbersleft;
    if(typeof json.multiplenumbersleftonscreen != "undefined") multiplenumbersleftonscreen = json.multiplenumbersleftonscreen;
    if(typeof json.multiplenumbersleftonscreen2 != "undefined") multiplenumbersleftonscreen2 = json.multiplenumbersleftonscreen2;
    if(typeof json.factorresultsleftonscreen != "undefined") factorresultsleftonscreen = json.factorresultsleftonscreen;
    if(typeof json.alertcount != "undefined") alertcount = json.alertcount;
    if(typeof json.oddtextpos != "undefined") oddtextpos = json.oddtextpos;
    if(typeof json.eventextpos != "undefined") eventextpos = json.eventextpos;
    if(typeof json.multipletextpos != "undefined") multipletextpos = json.multipletextpos;
    if(typeof json.multipletextpos2 != "undefined") multipletextpos2 = json.multipletextpos2;
    if(typeof json.factortextpos != "undefined") factortextpos = json.factortextpos;
    if(typeof json.resultofstringvalue != "undefined") resultofstringvalue = json.resultofstringvalue;
    if(typeof json.resultofstringvalue2 != "undefined") resultofstringvalue2 = json.resultofstringvalue2;
    if(typeof json.resultofstringvalue3 != "undefined") resultofstringvalue3 = json.resultofstringvalue3;
    if(typeof json.resultofstringvaluegame != "undefined") resultofstringvaluegame = json.resultofstringvaluegame;
    if(typeof json.resultofstringvaluegame2 != "undefined") resultofstringvaluegame2 = json.resultofstringvaluegame2;
    if(typeof json.resultofstringvaluegame3 != "undefined") resultofstringvaluegame3 = json.resultofstringvaluegame3;
    if(typeof json.test != "undefined") test = json.test;
    if(typeof json.practiceshow != "undefined") practiceshow = json.practiceshow;
  };

  _model._inputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "selected1",  "text",  "pi",  "y1",  "ysize",  "t",  "dt",  "hint",  "count",  "isAndroid",  "iOS",  "Android",  "iPad",  "iPhone",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "k",  "i",  "i2",  "j",  "vectorIndex",  "n",  "nMax",  "nVectors",  "nVectorsMax",  "nVectorsSq",  "textpos",  "colorVectors",  "x",  "y",  "posx",  "posy",  "factorresults",  "factorresultsMax",  "colororiginal",  "colorodd",  "coloreven",  "colormultiples",  "colorfactors",  "colorhint",  "numbercolor",  "numbercolorblack",  "colordull",  "elementinteracted",  "score",  "feedbacktext",  "left",  "oddnumbersleft",  "evennumbersleft",  "multiplenumbersleft",  "multiplenumbersleftonscreen",  "multiplenumbersleftonscreen2",  "factorresultsleftonscreen",  "alertcount",  "oddtextpos",  "eventextpos",  "multipletextpos",  "multipletextpos2",  "factortextpos",  "resultofstringvalue",  "resultofstringvalue2",  "resultofstringvalue3",  "resultofstringvaluegame",  "resultofstringvaluegame2",  "resultofstringvaluegame3",  "test",  "practiceshow"]; 

  _model._outputAndPublicParameters = ["xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "selected1",  "text",  "pi",  "y1",  "ysize",  "t",  "dt",  "hint",  "count",  "isAndroid",  "iOS",  "Android",  "iPad",  "iPhone",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "k",  "i",  "i2",  "j",  "vectorIndex",  "n",  "nMax",  "nVectors",  "nVectorsMax",  "nVectorsSq",  "textpos",  "colorVectors",  "x",  "y",  "posx",  "posy",  "factorresults",  "factorresultsMax",  "colororiginal",  "colorodd",  "coloreven",  "colormultiples",  "colorfactors",  "colorhint",  "numbercolor",  "numbercolorblack",  "colordull",  "elementinteracted",  "score",  "feedbacktext",  "left",  "oddnumbersleft",  "evennumbersleft",  "multiplenumbersleft",  "multiplenumbersleftonscreen",  "multiplenumbersleftonscreen2",  "factorresultsleftonscreen",  "alertcount",  "oddtextpos",  "eventextpos",  "multipletextpos",  "multipletextpos2",  "factortextpos",  "resultofstringvalue",  "resultofstringvalue2",  "resultofstringvalue3",  "resultofstringvaluegame",  "resultofstringvaluegame2",  "resultofstringvaluegame3",  "test",  "practiceshow"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["odd"] = true;
    __pagesEnabled["even 2"] = true;
    __pagesEnabled["mergemutliples"] = true;
    __pagesEnabled["factors working"] = true;
    __pagesEnabled["TRMessgae"] = true;
  });

  _model.addToReset(function() {
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -5; // EjsS Model.Variables.Var Table.ymin
    ymax = 5; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    selected1 = new Array(1); // EjsS Model.Variables.Var Table.selected1
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected1
        selected1[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected1
      }
    }());
    text = "select teach/practice mode"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    hint = ""; // EjsS Model.Variables.Var Table.hint
    count = 0; // EjsS Model.Variables.Var Table.count
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    k = 9; // EjsS Model.Variables.numbers.k
    i = 0; // EjsS Model.Variables.numbers.i
    i2 = 11; // EjsS Model.Variables.numbers.i2
    j = 0; // EjsS Model.Variables.numbers.j
    vectorIndex = 0; // EjsS Model.Variables.numbers.vectorIndex
    n = 1; // EjsS Model.Variables.numbers.n
    nMax = 5; // EjsS Model.Variables.numbers.nMax
    nVectors = 10; // EjsS Model.Variables.numbers.nVectors
    nVectorsMax = 10; // EjsS Model.Variables.numbers.nVectorsMax
    nVectorsSq = nVectors*nVectors+1; // EjsS Model.Variables.numbers.nVectorsSq
    textpos = new Array(nVectorsSq); // EjsS Model.Variables.numbers.textpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numbers.textpos
        textpos[_i0] = "0";  // EjsS Model.Variables.numbers.textpos
      }
    }());
    colorVectors = new Array(nVectorsSq); // EjsS Model.Variables.numbers.colorVectors
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numbers.colorVectors
        colorVectors[_i0] = "rgba(255,200,0,1)";  // EjsS Model.Variables.numbers.colorVectors
      }
    }());
    x = new Array(nMax); // EjsS Model.Variables.numbers.x
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.numbers.x
        x[_i0] = 0;  // EjsS Model.Variables.numbers.x
      }
    }());
    y = new Array(nMax); // EjsS Model.Variables.numbers.y
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.numbers.y
        y[_i0] = 0;  // EjsS Model.Variables.numbers.y
      }
    }());
    posx = new Array(nVectorsSq); // EjsS Model.Variables.numbers.posx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numbers.posx
        posx[_i0] = 0.0;  // EjsS Model.Variables.numbers.posx
      }
    }());
    posy = new Array(nVectorsSq); // EjsS Model.Variables.numbers.posy
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numbers.posy
        posy[_i0] = 0.0;  // EjsS Model.Variables.numbers.posy
      }
    }());
    factorresults = new Array(20); // EjsS Model.Variables.numbers.factorresults
    (function () {
      var _i0;
      for (_i0=0; _i0<20; _i0+=1) {  // EjsS Model.Variables.numbers.factorresults
        factorresults[_i0] = 0;  // EjsS Model.Variables.numbers.factorresults
      }
    }());
    factorresultsMax = 10; // EjsS Model.Variables.numbers.factorresultsMax
  });

  _model.addToReset(function() {
    colororiginal = colorVectors[0]; // EjsS Model.Variables.colors.colororiginal
    colorodd = "rgba(255,0,0,1.0)"; // EjsS Model.Variables.colors.colorodd
    coloreven = "rgba(0,255,0,1.0)"; // EjsS Model.Variables.colors.coloreven
    colormultiples = "rgba(0,255,255,1.0)"; // EjsS Model.Variables.colors.colormultiples
    colorfactors = 0; // EjsS Model.Variables.colors.colorfactors
    colorhint = "rgba(255,255,0,1.0)"; // EjsS Model.Variables.colors.colorhint
    numbercolor = new Array(nVectorsSq); // EjsS Model.Variables.colors.numbercolor
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.colors.numbercolor
        numbercolor[_i0] = "rgba(0,0,0,1.0)";  // EjsS Model.Variables.colors.numbercolor
      }
    }());
    numbercolorblack = "rgba(0,0,0,1.0)"; // EjsS Model.Variables.colors.numbercolorblack
    colordull = "rgba(192,192,192,0.5)"; // EjsS Model.Variables.colors.colordull
  });

  _model.addToReset(function() {
    elementinteracted = 0; // EjsS Model.Variables.game.elementinteracted
    score = 0; // EjsS Model.Variables.game.score
    feedbacktext = ""; // EjsS Model.Variables.game.feedbacktext
    left = 50; // EjsS Model.Variables.game.left
    oddnumbersleft = 50; // EjsS Model.Variables.game.oddnumbersleft
    evennumbersleft = 50; // EjsS Model.Variables.game.evennumbersleft
    multiplenumbersleft = 100; // EjsS Model.Variables.game.multiplenumbersleft
    multiplenumbersleftonscreen = 100; // EjsS Model.Variables.game.multiplenumbersleftonscreen
    multiplenumbersleftonscreen2 = 100; // EjsS Model.Variables.game.multiplenumbersleftonscreen2
    factorresultsleftonscreen = 100; // EjsS Model.Variables.game.factorresultsleftonscreen
    alertcount = 1; // EjsS Model.Variables.game.alertcount
    oddtextpos = new Array(nVectorsSq); // EjsS Model.Variables.game.oddtextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.game.oddtextpos
        oddtextpos[_i0] = "0";  // EjsS Model.Variables.game.oddtextpos
      }
    }());
    eventextpos = new Array(nVectorsSq); // EjsS Model.Variables.game.eventextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.game.eventextpos
        eventextpos[_i0] = "0";  // EjsS Model.Variables.game.eventextpos
      }
    }());
    multipletextpos = new Array(nVectorsSq); // EjsS Model.Variables.game.multipletextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.game.multipletextpos
        multipletextpos[_i0] = "0";  // EjsS Model.Variables.game.multipletextpos
      }
    }());
    multipletextpos2 = new Array(nVectorsSq); // EjsS Model.Variables.game.multipletextpos2
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.game.multipletextpos2
        multipletextpos2[_i0] = "0";  // EjsS Model.Variables.game.multipletextpos2
      }
    }());
    factortextpos = new Array(nVectorsSq); // EjsS Model.Variables.game.factortextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.game.factortextpos
        factortextpos[_i0] = "0";  // EjsS Model.Variables.game.factortextpos
      }
    }());
  });

  _model.addToReset(function() {
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  function OnOrientationChange() {  // > CustomCode.OnOrientationChange:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.OnOrientationChange:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.OnOrientationChange:3
  //else  // > CustomCode.OnOrientationChange:4
  //  _view.mytext.setText("nada:");  // > CustomCode.OnOrientationChange:5
  // check platform for Apps  // > CustomCode.OnOrientationChange:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.OnOrientationChange:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.OnOrientationChange:8
  // check platform for web browsers  // > CustomCode.OnOrientationChange:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.OnOrientationChange:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.OnOrientationChange:14
  switch (window.orientation) {  // > CustomCode.OnOrientationChange:15
    case 0:  // > CustomCode.OnOrientationChange:16
    case 180:  // > CustomCode.OnOrientationChange:17
      this.screenOrientation = 'portrait';  // > CustomCode.OnOrientationChange:18
    //  if (iOSapp){ // does not seems to work  // > CustomCode.OnOrientationChange:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.OnOrientationChange:20
     //   return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.OnOrientationChange:21
        // return window.screen.height;  // > CustomCode.OnOrientationChange:22
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:23
        // return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:24
     // }  // > CustomCode.OnOrientationChange:25
        // > CustomCode.OnOrientationChange:26
     // else {  // > CustomCode.OnOrientationChange:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:28
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:29
     // }  // > CustomCode.OnOrientationChange:30
      break;  // > CustomCode.OnOrientationChange:31
    case 90:  // > CustomCode.OnOrientationChange:32
    case -90:  // > CustomCode.OnOrientationChange:33
      this.screenOrientation = 'landscape';  // > CustomCode.OnOrientationChange:34
     // if (iOSapp){ // App  // > CustomCode.OnOrientationChange:35
     //   return window.screen.width*0.7;    // > CustomCode.OnOrientationChange:36
        // return window.screen.height;  // > CustomCode.OnOrientationChange:37
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:38
        //  return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:39
     // }  // > CustomCode.OnOrientationChange:40
        // > CustomCode.OnOrientationChange:41
    //  else { // browser Android and PC  // > CustomCode.OnOrientationChange:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:43
        // alert("browser Android and PC");  // > CustomCode.OnOrientationChange:44
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:45
    //  }  // > CustomCode.OnOrientationChange:46
      break;  // > CustomCode.OnOrientationChange:47
    default:  // > CustomCode.OnOrientationChange:48
      this.screenOrientation = 'unknown';  // > CustomCode.OnOrientationChange:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.OnOrientationChange:50
      return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:51
  }  // > CustomCode.OnOrientationChange:52
  }  // > CustomCode.OnOrientationChange:53

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function factor(n) {  // > CustomCode.factor:1
   if (isNaN(n) || !isFinite(n) || n%1!=0 || n==0) return ''+n;  // > CustomCode.factor:2
   if (n<0) return '-'+factor(-n);  // > CustomCode.factor:3
   var minFactor = leastFactor(n);  // > CustomCode.factor:4
   if (n==minFactor) return ''+n;  // > CustomCode.factor:5
   return minFactor+'*'+factor(n/minFactor);  // > CustomCode.factor:6
  }  // > CustomCode.factor:7
  // find the least factor in n by trial division  // > CustomCode.factor:8
  function leastFactor(n) {  // > CustomCode.factor:9
   if (isNaN(n) || !isFinite(n)) return NaN;    // > CustomCode.factor:10
   if (n==0) return 0;    // > CustomCode.factor:11
   if (n%1 || n*n<2) return 1;  // > CustomCode.factor:12
   if (n%2==0) return 2;    // > CustomCode.factor:13
   if (n%3==0) return 3;    // > CustomCode.factor:14
   if (n%5==0) return 5;    // > CustomCode.factor:15
   var m = Math.sqrt(n);  // > CustomCode.factor:16
   for (var i=7;i<=m;i+=30) {  // > CustomCode.factor:17
    if (n%i==0)      return i;  // > CustomCode.factor:18
    if (n%(i+4)==0)  return i+4;  // > CustomCode.factor:19
    if (n%(i+6)==0)  return i+6;  // > CustomCode.factor:20
    if (n%(i+10)==0) return i+10;  // > CustomCode.factor:21
    if (n%(i+12)==0) return i+12;  // > CustomCode.factor:22
    if (n%(i+16)==0) return i+16;  // > CustomCode.factor:23
    if (n%(i+22)==0) return i+22;  // > CustomCode.factor:24
    if (n%(i+24)==0) return i+24;  // > CustomCode.factor:25
   }  // > CustomCode.factor:26
   return n;  // > CustomCode.factor:27
  }  // > CustomCode.factor:28

  function getFactors(integer){  // > CustomCode.getFactors:1
    var factors = [];  // > CustomCode.getFactors:2
    quotient = 0;  // > CustomCode.getFactors:3
    for(var i = 1; i <= integer; i++){  // > CustomCode.getFactors:4
      quotient = integer/i;  // > CustomCode.getFactors:5
      if(quotient === Math.floor(quotient)){  // > CustomCode.getFactors:6
        factors.push(i);   // > CustomCode.getFactors:7
      }  // > CustomCode.getFactors:8
    }  // > CustomCode.getFactors:9
    return factors;  // > CustomCode.getFactors:10
  }  // > CustomCode.getFactors:11

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.9 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  // check platform for Apps  // > CustomCode.changeOrientation:4
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:5
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:6
     // > CustomCode.changeOrientation:7
  // check platform for web browsers  // > CustomCode.changeOrientation:8
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:9
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:12
     // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
  switch (window.orientation) {  // > CustomCode.changeOrientation:15
    case 0:  // > CustomCode.changeOrientation:16
    case 180:  // > CustomCode.changeOrientation:17
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:18
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:20
        return window.screen.height*0.85;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:21
        // return window.screen.height;  // > CustomCode.changeOrientation:22
        //  return window.innerHeight;  // > CustomCode.changeOrientation:23
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:24
      }  // > CustomCode.changeOrientation:25
        // > CustomCode.changeOrientation:26
      else {  // > CustomCode.changeOrientation:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*k;  // > CustomCode.changeOrientation:29
      }  // > CustomCode.changeOrientation:30
      break;  // > CustomCode.changeOrientation:31
    case 90:  // > CustomCode.changeOrientation:32
    case -90:  // > CustomCode.changeOrientation:33
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:34
     // > CustomCode.changeOrientation:35
      if (iOSapp){ // App  // > CustomCode.changeOrientation:36
        return window.screen.width*0.75;    // > CustomCode.changeOrientation:37
        // return window.screen.height;  // > CustomCode.changeOrientation:38
        //  return window.innerHeight;  // > CustomCode.changeOrientation:39
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:40
      }  // > CustomCode.changeOrientation:41
        // > CustomCode.changeOrientation:42
      else { // browser Android and PC  // > CustomCode.changeOrientation:43
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:44
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:45
        return window.innerHeight*k;  // > CustomCode.changeOrientation:46
      }  // > CustomCode.changeOrientation:47
      break;  // > CustomCode.changeOrientation:48
    default:  // > CustomCode.changeOrientation:49
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:50
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:51
      return window.innerHeight*k;  // > CustomCode.changeOrientation:52
  }  // > CustomCode.changeOrientation:53
     // > CustomCode.changeOrientation:54
  }  // > CustomCode.changeOrientation:55
     // > CustomCode.changeOrientation:56

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    var dx = (xmax-xmin)/(nVectors);  // > Initialization.Init Page:1
    var dy = (ymax-ymin)/(nVectors);  // > Initialization.Init Page:2
    //draw outside unused arrays lookang  // > Initialization.Init Page:3
    for (var i = 1; i < nVectorsMax+1; i++)  // > Initialization.Init Page:4
    {  // > Initialization.Init Page:5
      for (var j = 0; j < nVectorsMax+1; j++)  // > Initialization.Init Page:6
      {  // > Initialization.Init Page:7
       vectorIndex = i+nVectors*j;  // > Initialization.Init Page:8
       textpos[vectorIndex] = ""+vectorIndex;  // > Initialization.Init Page:9
        oddtextpos[vectorIndex] = ""+vectorIndex; // for odd game  // > Initialization.Init Page:10
        eventextpos[vectorIndex] = ""+vectorIndex; // for even game  // > Initialization.Init Page:11
        multipletextpos[vectorIndex] = ""+vectorIndex; // for mulitple game  // > Initialization.Init Page:12
        multipletextpos2[vectorIndex] = ""+vectorIndex; // for mulitples 2 game to generate unique answers key  // > Initialization.Init Page:13
        factortextpos[vectorIndex] = ""+vectorIndex; // for factor game to generate unique answers key  // > Initialization.Init Page:14
       posx[vectorIndex]=xmin+i*dx;  // > Initialization.Init Page:15
        posy[vectorIndex]=ymax-j*dy; //put far away  // > Initialization.Init Page:16
             // > Initialization.Init Page:17
      }  // > Initialization.Init Page:18
    }  // > Initialization.Init Page:19
    posx[0]= xmin-dx; // put outside screen  // > Initialization.Init Page:20
    posy[0]= ymin-dy;  // > Initialization.Init Page:21
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (practiceshow==undefined){  // > Initialization.undefined:1
      practiceshow=false;  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="50%" fy="50%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:0.3" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.3" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient)"  // > Initialization.svg:10
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["odd"]) return;
    if (_view.game.getProperty("SelectedOptions")== "select odd numbers") {  // > FixedRelations.odd:1
     //numbersleft = 50;  // > FixedRelations.odd:2
        // > FixedRelations.odd:3
      if ((elementinteracted%2)===1.0&&elementinteracted>0&&oddtextpos[elementinteracted]>0&&oddnumbersleft>0){ //indeed odd  // > FixedRelations.odd:4
          // > FixedRelations.odd:5
        //textpos[elementinteracted]=0;  // > FixedRelations.odd:6
       oddtextpos[elementinteracted] = 0; // 0 for selected before  // > FixedRelations.odd:7
        oddnumbersleft = oddnumbersleft-1;  // > FixedRelations.odd:8
        left = oddnumbersleft; // make visible on TRCorner  // > FixedRelations.odd:9
        if (oddnumbersleft===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.odd:10
        hint="game over! you have found all odd numbers from 1 to 100, \nclick reset and try another option";  // > FixedRelations.odd:11
         // > FixedRelations.odd:12
        score =score+1;  // > FixedRelations.odd:13
        alertcount=0;  // > FixedRelations.odd:14
         //alert (hint);  // > FixedRelations.odd:15
    EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.odd:16
         // > FixedRelations.odd:17
            }  // > FixedRelations.odd:18
            else {  // > FixedRelations.odd:19
        score =score+1;  // > FixedRelations.odd:20
          feedbacktext = "well done!";  // > FixedRelations.odd:21
          _view.audio.play();  // > FixedRelations.odd:22
          hint = "correct! when "+elementinteracted+" is divided by 2, the remainder is 1";  // > FixedRelations.odd:23
          }  // > FixedRelations.odd:24
        }  // > FixedRelations.odd:25
        else if (oddtextpos[elementinteracted]==0){   // > FixedRelations.odd:26
        feedbacktext = "selected before, again other numbers!";  // > FixedRelations.odd:27
        }  // > FixedRelations.odd:28
        else if (elementinteracted>0){ //wrong  // > FixedRelations.odd:29
          score=score;  // > FixedRelations.odd:30
      //    feedbacktext = "incorrect, divided by 2, the remainder is NOT 1" ;  // > FixedRelations.odd:31
        feedbacktext = "try again";  // > FixedRelations.odd:32
        //  hint = "incorrect, divided by 2, the remainder is NOT 1" ;  // > FixedRelations.odd:33
          hint = "incorrect, when "+elementinteracted+" is divided by 2, the remainder is NOT 1";  // > FixedRelations.odd:34
         // alert(hint);  // > FixedRelations.odd:35
          colorVectors[elementinteracted] = "rgba(255,0,0,0.5)";  // > FixedRelations.odd:36
    //alert("incorrect, when "+elementinteracted+" is divided by 2, the remainder is NOT 1 \n Click 'OK' button on this pop-up alert to continue");  // > FixedRelations.odd:37
     //count=count+1;  // > FixedRelations.odd:38
    // alert(count);  // > FixedRelations.odd:39
    // return;  // > FixedRelations.odd:40
          }  // > FixedRelations.odd:41
           // > FixedRelations.odd:42
            // > FixedRelations.odd:43
        }  // > FixedRelations.odd:44
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["even 2"]) return;
      else if (_view.game.getProperty("SelectedOptions")== "select even numbers") {  // > FixedRelations.even 2:1
       // > FixedRelations.even 2:2
     //numbersleft = 50  // > FixedRelations.even 2:3
     if ((elementinteracted%2)===0&&elementinteracted>0&&eventextpos[elementinteracted]>0&&evennumbersleft>0){  // > FixedRelations.even 2:4
        eventextpos[elementinteracted] = 0; // 0 for selected before  // > FixedRelations.even 2:5
        evennumbersleft = evennumbersleft-1;  // > FixedRelations.even 2:6
        left = evennumbersleft; // make visible on TRCorner  // > FixedRelations.even 2:7
         // > FixedRelations.even 2:8
       if (evennumbersleft===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.even 2:9
        hint="game over! you have found all even numbers from 1 to 100, \nclick reset and try another option";  // > FixedRelations.even 2:10
         // > FixedRelations.even 2:11
        score =score+1;  // > FixedRelations.even 2:12
        alertcount=0;  // > FixedRelations.even 2:13
     //    alert (hint);  // > FixedRelations.even 2:14
         EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.even 2:15
            }  // > FixedRelations.even 2:16
         // > FixedRelations.even 2:17
       else {  // > FixedRelations.even 2:18
       score =score+1;  // > FixedRelations.even 2:19
          feedbacktext = "well done!";  // > FixedRelations.even 2:20
          _view.audio.play();  // > FixedRelations.even 2:21
          hint = "correct! when "+elementinteracted+" is divided by 2, the remainder is 0";  // > FixedRelations.even 2:22
        }  // > FixedRelations.even 2:23
          // > FixedRelations.even 2:24
        }  // > FixedRelations.even 2:25
        else if (eventextpos[elementinteracted]==0){   // > FixedRelations.even 2:26
        feedbacktext = "selected before, again other numbers!";  // > FixedRelations.even 2:27
        }  // > FixedRelations.even 2:28
       else if (elementinteracted>0){  // > FixedRelations.even 2:29
          score=score;  // > FixedRelations.even 2:30
        //  feedbacktext = "incorrect, divided by 2, the remainder is NOT 0" ;  // > FixedRelations.even 2:31
        feedbacktext = "try again";  // > FixedRelations.even 2:32
         // hint = "incorrect, divided by 2, the remainder is NOT 0" ;  // > FixedRelations.even 2:33
         hint = "incorrect, when "+elementinteracted+" is divided by 2, the remainder is NOT 0";  // > FixedRelations.even 2:34
         colorVectors[elementinteracted] = "rgba(255,0,0,0.4)";  // > FixedRelations.even 2:35
    //   alert("incorrect, when "+elementinteracted+" is divided by 2, the remainder is NOT 0 \n Click 'OK' button on this pop-up alert to continue");  // > FixedRelations.even 2:36
     // return;   // > FixedRelations.even 2:37
       }  // > FixedRelations.even 2:38
        }  // > FixedRelations.even 2:39
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["mergemutliples"]) return;
     //mulitples of single digit  // > FixedRelations.mergemutliples:1
      else if (_view.game.getProperty("SelectedOptions")== "select multiples of "+resultofstringvaluegame2) { //1  // > FixedRelations.mergemutliples:2
      //compute numbers of such multiples  // > FixedRelations.mergemutliples:3
       // > FixedRelations.mergemutliples:4
     //2  // > FixedRelations.mergemutliples:5
      if (((elementinteracted%resultofstringvaluegame2)==0)&&(elementinteracted>0)&&(multipletextpos2[elementinteracted]>0)&&(multiplenumbersleftonscreen2>0)){  // > FixedRelations.mergemutliples:6
    // rough solution first  // > FixedRelations.mergemutliples:7
       multipletextpos2[elementinteracted] = 0; // 0 for selected before  // > FixedRelations.mergemutliples:8
        multiplenumbersleftonscreen2 = multiplenumbersleftonscreen2-1; //reduce left by 1  // > FixedRelations.mergemutliples:9
      //  alert(multiplenumbersleftonscreen);  // > FixedRelations.mergemutliples:10
        left = multiplenumbersleftonscreen; // make visible on TRCorner  // > FixedRelations.mergemutliples:11
     //3  // > FixedRelations.mergemutliples:12
      if (multiplenumbersleftonscreen2===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.mergemutliples:13
        hint="game over! you have found all multiples numbers on screen, \nclick reset and try another option";  // > FixedRelations.mergemutliples:14
        // > FixedRelations.mergemutliples:15
        score =score+1;  // > FixedRelations.mergemutliples:16
        alertcount=0;  // > FixedRelations.mergemutliples:17
            //  alert (hint);  // > FixedRelations.mergemutliples:18
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.mergemutliples:19
              }  // > FixedRelations.mergemutliples:20
      else {  // > FixedRelations.mergemutliples:21
       score =score+1;  // > FixedRelations.mergemutliples:22
          feedbacktext = "well done!";  // > FixedRelations.mergemutliples:23
          _view.audio.play();  // > FixedRelations.mergemutliples:24
         hint = "correct! when "+elementinteracted+" is divided by "+resultofstringvaluegame2+", the remainder is 0" ;  // > FixedRelations.mergemutliples:25
        }  // > FixedRelations.mergemutliples:26
      //score =score+1;  // > FixedRelations.mergemutliples:27
       //   feedbacktext = "well done!";  // > FixedRelations.mergemutliples:28
       //   hint = "correct! when "+elementinteracted+" is divided by "+resultofstringvaluegame+", the remainder is 0" ;  // > FixedRelations.mergemutliples:29
        }  // > FixedRelations.mergemutliples:30
        //2  // > FixedRelations.mergemutliples:31
        else if (multipletextpos2[elementinteracted]==0){   // > FixedRelations.mergemutliples:32
        feedbacktext = "selected before, again other numbers!";  // > FixedRelations.mergemutliples:33
        }  // > FixedRelations.mergemutliples:34
        //2  // > FixedRelations.mergemutliples:35
       else if (elementinteracted>0){  // > FixedRelations.mergemutliples:36
          score=score;  // > FixedRelations.mergemutliples:37
          feedbacktext = "try again";  // > FixedRelations.mergemutliples:38
        //  feedbacktext = "incorrect, divided by "+resultofstringvaluegame+", the remainder is NOT 0" ;  // > FixedRelations.mergemutliples:39
          hint = "incorrect, when "+elementinteracted+" is divided by "+resultofstringvaluegame2+", the remainder is NOT 0" ;  // > FixedRelations.mergemutliples:40
          colorVectors[elementinteracted] = "rgba(255,0,0,0.3)";  // > FixedRelations.mergemutliples:41
       // alert("incorrect, when "+elementinteracted+" is divided by "+resultofstringvaluegame+", the remainder is NOT 0 \n Click 'OK' button on this pop-up alert to continue");  // > FixedRelations.mergemutliples:42
      //return;   // > FixedRelations.mergemutliples:43
        }  // > FixedRelations.mergemutliples:44
        }//1  // > FixedRelations.mergemutliples:45
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["factors working"]) return;
     //factors clever code 1  // > FixedRelations.factors working:1
      else if (_view.game.getProperty("SelectedOptions")== "select factors of "+resultofstringvaluegame3) {  // > FixedRelations.factors working:2
            // > FixedRelations.factors working:3
            // > FixedRelations.factors working:4
    //2  // > FixedRelations.factors working:5
    // for (var k = 0; k < factorresults.length; k++) { //loop  // > FixedRelations.factors working:6
          if(factorresults[0]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:7
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:8
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:9
        // > FixedRelations.factors working:10
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:11
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:12
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:13
         // > FixedRelations.factors working:14
    //3  // > FixedRelations.factors working:15
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:16
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:17
    score =score+1;  // > FixedRelations.factors working:18
        alertcount=0;  // > FixedRelations.factors working:19
             // alert (hint);  // > FixedRelations.factors working:20
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:21
              }  // > FixedRelations.factors working:22
              else {  // > FixedRelations.factors working:23
                score =score+1;  // > FixedRelations.factors working:24
                feedbacktext = "well done!";  // > FixedRelations.factors working:25
          _view.audio.play();  // > FixedRelations.factors working:26
         hint = "correct! " ;  // > FixedRelations.factors working:27
                }  // > FixedRelations.factors working:28
         }   // > FixedRelations.factors working:29
         //2  // > FixedRelations.factors working:30
         //next k=1 start  // > FixedRelations.factors working:31
        else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:32
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:33
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:34
         // > FixedRelations.factors working:35
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:36
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:37
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:38
         // > FixedRelations.factors working:39
    //3  // > FixedRelations.factors working:40
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:41
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:42
    score =score+1;  // > FixedRelations.factors working:43
        alertcount=0;  // > FixedRelations.factors working:44
             // alert (hint);  // > FixedRelations.factors working:45
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:46
              }  // > FixedRelations.factors working:47
              else {  // > FixedRelations.factors working:48
                score =score+1;  // > FixedRelations.factors working:49
                feedbacktext = "well done!";  // > FixedRelations.factors working:50
          _view.audio.play();  // > FixedRelations.factors working:51
         hint = "correct! " ;  // > FixedRelations.factors working:52
                }  // > FixedRelations.factors working:53
         } //next k=1 end  // > FixedRelations.factors working:54
         //next k=2 start  // > FixedRelations.factors working:55
        else if(factorresults[2]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:56
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:57
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:58
         // > FixedRelations.factors working:59
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:60
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:61
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:62
         // > FixedRelations.factors working:63
    //3  // > FixedRelations.factors working:64
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:65
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:66
    score =score+1;  // > FixedRelations.factors working:67
        alertcount=0;  // > FixedRelations.factors working:68
            //  alert (hint);  // > FixedRelations.factors working:69
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:70
              }  // > FixedRelations.factors working:71
              else {  // > FixedRelations.factors working:72
                score =score+1;  // > FixedRelations.factors working:73
                feedbacktext = "well done!";  // > FixedRelations.factors working:74
          _view.audio.play();  // > FixedRelations.factors working:75
         hint = "correct! " ;  // > FixedRelations.factors working:76
                }  // > FixedRelations.factors working:77
         } //next k=2 end  // > FixedRelations.factors working:78
         //next k=3 start  // > FixedRelations.factors working:79
        else if(factorresults[3]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:80
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:81
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:82
         // > FixedRelations.factors working:83
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:84
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:85
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:86
         // > FixedRelations.factors working:87
    //3  // > FixedRelations.factors working:88
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:89
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:90
    score =score+1;  // > FixedRelations.factors working:91
        alertcount=0;  // > FixedRelations.factors working:92
             // alert (hint);  // > FixedRelations.factors working:93
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:94
              }  // > FixedRelations.factors working:95
              else {  // > FixedRelations.factors working:96
                score =score+1;  // > FixedRelations.factors working:97
                feedbacktext = "well done!";  // > FixedRelations.factors working:98
          _view.audio.play();  // > FixedRelations.factors working:99
         hint = "correct! " ;  // > FixedRelations.factors working:100
                }  // > FixedRelations.factors working:101
         } //next k=3 end  // > FixedRelations.factors working:102
           // > FixedRelations.factors working:103
            // > FixedRelations.factors working:104
           else if (factortextpos[elementinteracted]==0){   // > FixedRelations.factors working:105
        feedbacktext = "selected before, again other numbers!";  // > FixedRelations.factors working:106
        }  // > FixedRelations.factors working:107
         //next k=4 start  // > FixedRelations.factors working:108
        else if(factorresults[4]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:109
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:110
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:111
         // > FixedRelations.factors working:112
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:113
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:114
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:115
         // > FixedRelations.factors working:116
    //3  // > FixedRelations.factors working:117
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:118
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:119
    score =score+1;  // > FixedRelations.factors working:120
        alertcount=0;  // > FixedRelations.factors working:121
              //alert (hint);  // > FixedRelations.factors working:122
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:123
              }  // > FixedRelations.factors working:124
              else {  // > FixedRelations.factors working:125
                score =score+1;  // > FixedRelations.factors working:126
                feedbacktext = "well done!";  // > FixedRelations.factors working:127
          _view.audio.play();  // > FixedRelations.factors working:128
         hint = "correct! " ;  // > FixedRelations.factors working:129
                }  // > FixedRelations.factors working:130
         } //next k=4 end  // > FixedRelations.factors working:131
          //next k=5 start  // > FixedRelations.factors working:132
        else if(factorresults[5]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:133
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:134
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:135
         // > FixedRelations.factors working:136
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:137
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:138
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:139
         // > FixedRelations.factors working:140
    //3  // > FixedRelations.factors working:141
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:142
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:143
    score =score+1;  // > FixedRelations.factors working:144
        alertcount=0;  // > FixedRelations.factors working:145
            //  alert (hint);  // > FixedRelations.factors working:146
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:147
              }  // > FixedRelations.factors working:148
              else {  // > FixedRelations.factors working:149
                score =score+1;  // > FixedRelations.factors working:150
                feedbacktext = "well done!";  // > FixedRelations.factors working:151
          _view.audio.play();  // > FixedRelations.factors working:152
         hint = "correct! " ;  // > FixedRelations.factors working:153
                }  // > FixedRelations.factors working:154
         } //next k=5 end  // > FixedRelations.factors working:155
          //next k=6 start  // > FixedRelations.factors working:156
        else if(factorresults[6]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:157
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:158
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:159
         // > FixedRelations.factors working:160
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:161
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:162
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:163
         // > FixedRelations.factors working:164
    //3  // > FixedRelations.factors working:165
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:166
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:167
    score =score+1;  // > FixedRelations.factors working:168
        alertcount=0;  // > FixedRelations.factors working:169
             // alert (hint);  // > FixedRelations.factors working:170
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:171
              }  // > FixedRelations.factors working:172
              else {  // > FixedRelations.factors working:173
                score =score+1;  // > FixedRelations.factors working:174
                feedbacktext = "well done!";  // > FixedRelations.factors working:175
          _view.audio.play();  // > FixedRelations.factors working:176
         hint = "correct! " ;  // > FixedRelations.factors working:177
                }  // > FixedRelations.factors working:178
         } //next k=6 end  // > FixedRelations.factors working:179
          //next k=7 start  // > FixedRelations.factors working:180
        else if(factorresults[7]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:181
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:182
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:183
         // > FixedRelations.factors working:184
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:185
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:186
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:187
         // > FixedRelations.factors working:188
    //3  // > FixedRelations.factors working:189
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:190
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:191
    score =score+1;  // > FixedRelations.factors working:192
        alertcount=0;  // > FixedRelations.factors working:193
              //alert (hint);  // > FixedRelations.factors working:194
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:195
              }  // > FixedRelations.factors working:196
              else {  // > FixedRelations.factors working:197
                score =score+1;  // > FixedRelations.factors working:198
                feedbacktext = "well done!";  // > FixedRelations.factors working:199
          _view.audio.play();  // > FixedRelations.factors working:200
         hint = "correct! " ;  // > FixedRelations.factors working:201
                }  // > FixedRelations.factors working:202
         } //next k=7 end  // > FixedRelations.factors working:203
          //next k=8 start  // > FixedRelations.factors working:204
        else if(factorresults[8]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:205
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:206
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:207
         // > FixedRelations.factors working:208
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:209
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:210
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:211
         // > FixedRelations.factors working:212
    //3  // > FixedRelations.factors working:213
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:214
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:215
    score =score+1;  // > FixedRelations.factors working:216
        alertcount=0;  // > FixedRelations.factors working:217
             // alert (hint);  // > FixedRelations.factors working:218
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:219
              }  // > FixedRelations.factors working:220
              else {  // > FixedRelations.factors working:221
                score =score+1;  // > FixedRelations.factors working:222
                feedbacktext = "well done!";  // > FixedRelations.factors working:223
          _view.audio.play();  // > FixedRelations.factors working:224
         hint = "correct! " ;  // > FixedRelations.factors working:225
                }  // > FixedRelations.factors working:226
         } //next k=8 end  // > FixedRelations.factors working:227
          //next k=9 start  // > FixedRelations.factors working:228
        else if(factorresults[9]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:229
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:230
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:231
         // > FixedRelations.factors working:232
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:233
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:234
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:235
         // > FixedRelations.factors working:236
    //3  // > FixedRelations.factors working:237
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:238
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:239
    score =score+1;  // > FixedRelations.factors working:240
        alertcount=0;  // > FixedRelations.factors working:241
             // alert (hint);  // > FixedRelations.factors working:242
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:243
              }  // > FixedRelations.factors working:244
              else {  // > FixedRelations.factors working:245
                score =score+1;  // > FixedRelations.factors working:246
                feedbacktext = "well done!";  // > FixedRelations.factors working:247
          _view.audio.play();  // > FixedRelations.factors working:248
         hint = "correct! " ;  // > FixedRelations.factors working:249
                }  // > FixedRelations.factors working:250
         } //next k=9 end  // > FixedRelations.factors working:251
          //next k=10 start  // > FixedRelations.factors working:252
        else if(factorresults[10]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:253
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:254
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:255
         // > FixedRelations.factors working:256
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:257
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:258
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:259
         // > FixedRelations.factors working:260
    //3  // > FixedRelations.factors working:261
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:262
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:263
    score =score+1;  // > FixedRelations.factors working:264
        alertcount=0;  // > FixedRelations.factors working:265
           //   alert (hint);  // > FixedRelations.factors working:266
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:267
              }  // > FixedRelations.factors working:268
              else {  // > FixedRelations.factors working:269
                score =score+1;  // > FixedRelations.factors working:270
                feedbacktext = "well done!";  // > FixedRelations.factors working:271
          _view.audio.play();  // > FixedRelations.factors working:272
         hint = "correct! " ;  // > FixedRelations.factors working:273
                }  // > FixedRelations.factors working:274
         } //next k=10 end  // > FixedRelations.factors working:275
         //next k=11 start  // > FixedRelations.factors working:276
        else if(factorresults[11]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:277
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:278
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:279
         // > FixedRelations.factors working:280
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:281
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:282
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:283
         // > FixedRelations.factors working:284
    //3  // > FixedRelations.factors working:285
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:286
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:287
    score =score+1;  // > FixedRelations.factors working:288
        alertcount=0;  // > FixedRelations.factors working:289
             // alert (hint);  // > FixedRelations.factors working:290
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:291
              }  // > FixedRelations.factors working:292
              else {  // > FixedRelations.factors working:293
                score =score+1;  // > FixedRelations.factors working:294
                feedbacktext = "well done!";  // > FixedRelations.factors working:295
          _view.audio.play();  // > FixedRelations.factors working:296
         hint = "correct! " ;  // > FixedRelations.factors working:297
                }  // > FixedRelations.factors working:298
         } //next k=11 end  // > FixedRelations.factors working:299
         //next k=12 start  // > FixedRelations.factors working:300
        else if(factorresults[12]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:301
    factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:302
        left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:303
         // > FixedRelations.factors working:304
     //  else if(factorresults[1]==elementinteracted&&(elementinteracted>0)&&(factortextpos[elementinteracted]>0)&&(factorresultsleftonscreen>0)){ // assume only 10 such answers correct  // > FixedRelations.factors working:305
    //factorresultsleftonscreen = factorresultsleftonscreen-1; //reduce left by 1  // > FixedRelations.factors working:306
     //   left = factorresultsleftonscreen; // make visible on TRCorner  // > FixedRelations.factors working:307
         // > FixedRelations.factors working:308
    //3  // > FixedRelations.factors working:309
    if (factorresultsleftonscreen===0&&alertcount>0){ //game completed immedaite feedback  // > FixedRelations.factors working:310
    hint="game over! you have found all factors numbers on screen, \nclick reset and try another option";  // > FixedRelations.factors working:311
    score =score+1;  // > FixedRelations.factors working:312
        alertcount=0;  // > FixedRelations.factors working:313
            //  alert (hint);  // > FixedRelations.factors working:314
              EJSS_INTERFACE.BoxPanel.showOkDialog(hint);  // > FixedRelations.factors working:315
              }  // > FixedRelations.factors working:316
              else {  // > FixedRelations.factors working:317
                score =score+1;  // > FixedRelations.factors working:318
                feedbacktext = "well done!";  // > FixedRelations.factors working:319
          _view.audio.play();  // > FixedRelations.factors working:320
         hint = "correct! " ;  // > FixedRelations.factors working:321
                }  // > FixedRelations.factors working:322
         } //next k=12 end  // > FixedRelations.factors working:323
           // > FixedRelations.factors working:324
           // > FixedRelations.factors working:325
          // > FixedRelations.factors working:326
         //     else if(factorresults[0]!=elementinteracted&&elementinteracted>0) {  // > FixedRelations.factors working:327
           //assume no more than 12 answers for factors  // > FixedRelations.factors working:328
        else if((factorresults[0]!=elementinteracted||factorresults[1]!=elementinteracted||factorresults[2]!=elementinteracted||factorresults[3]!=elementinteracted||factorresults[4]!=elementinteracted||factorresults[5]!=elementinteracted||factorresults[6]!=elementinteracted||factorresults[7]!=elementinteracted||factorresults[8]!=elementinteracted||factorresults[9]!=elementinteracted||factorresults[10]!=elementinteracted||factorresults[11]!=elementinteracted||factorresults[12]!=elementinteracted)&&elementinteracted>0) {  // > FixedRelations.factors working:329
          score=score;  // > FixedRelations.factors working:330
    //feedbacktext = "incorrect, the factors of "+resultofstringvaluegame3+"are "+factorresults+"" ;  // > FixedRelations.factors working:331
    feedbacktext = "try again";  // > FixedRelations.factors working:332
    hint = " the factors of "+resultofstringvaluegame3+" are "+factorresults+"" ;  // > FixedRelations.factors working:333
    colorVectors[elementinteracted] = "rgba(255,0,0,0.1)";  // > FixedRelations.factors working:334
    //alert("incorrect, the factors of "+resultofstringvaluegame3+" are "+factorresults+" \n Click 'OK' button on this pop-up alert to continue");  // > FixedRelations.factors working:335
    //  return;   // > FixedRelations.factors working:336
                 }  // > FixedRelations.factors working:337
                                         // } //loop   // > FixedRelations.factors working:338
                                           // > FixedRelations.factors working:339
                                           // > FixedRelations.factors working:340
                                                          } //1  // > FixedRelations.factors working:341
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["TRMessgae"]) return;
    if (practiceshow==false) {  // > FixedRelations.TRMessgae:1
      TRMessage = "";  // > FixedRelations.TRMessgae:2
      }  // > FixedRelations.TRMessgae:3
      else if (practiceshow==true){  // > FixedRelations.TRMessgae:4
    if (_view.game.getProperty("SelectedOptions")== "select odd numbers"){  // > FixedRelations.TRMessgae:5
    TRMessage = "left="+oddnumbersleft.toFixed(0)+"\nscore = "+score.toFixed(0);  // > FixedRelations.TRMessgae:6
    }  // > FixedRelations.TRMessgae:7
    else if (_view.game.getProperty("SelectedOptions")== "select even numbers"){  // > FixedRelations.TRMessgae:8
    TRMessage = "left="+evennumbersleft.toFixed(0)+"\nscore = "+score.toFixed(0);  // > FixedRelations.TRMessgae:9
    }  // > FixedRelations.TRMessgae:10
    //else if (_view.game.getProperty("SelectedOptions")== "select multiples of "+resultofstringvaluegame){  // > FixedRelations.TRMessgae:11
    //TRMessage = "left="+multiplenumbersleftonscreen.toFixed(0)+"\nscore = "+score.toFixed(0);  // > FixedRelations.TRMessgae:12
    //alert(TRMessage);  // > FixedRelations.TRMessgae:13
    //}  // > FixedRelations.TRMessgae:14
    else if (_view.game.getProperty("SelectedOptions")== "select multiples of "+resultofstringvaluegame2){  // > FixedRelations.TRMessgae:15
    TRMessage = "left="+multiplenumbersleftonscreen2.toFixed(0)+"\nscore = "+score.toFixed(0);  // > FixedRelations.TRMessgae:16
    //(_view.game.getProperty("SelectedOptions")== "select multiples of "+resultofstringvaluegame2)  // > FixedRelations.TRMessgae:17
    }  // > FixedRelations.TRMessgae:18
    else if (_view.game.getProperty("SelectedOptions")== "select factors of "+resultofstringvaluegame3){  // > FixedRelations.TRMessgae:19
    //TRMessage = "left="+factorresultsleftonscreen.length+"\nscore = "+score.toFixed(0);  // > FixedRelations.TRMessgae:20
    TRMessage = "left="+factorresultsleftonscreen+"\nscore = "+score.toFixed(0);  // > FixedRelations.TRMessgae:21
    //(_view.game.getProperty("SelectedOptions")== "select multiples of "+resultofstringvaluegame2)  // > FixedRelations.TRMessgae:22
    }  // > FixedRelations.TRMessgae:23
    }  // > FixedRelations.TRMessgae:24
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new number1to100_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.practice2.setAction("OffClick", function(_data,_info) {
  practiceshow=false;
  text = "teaching  mode, select option";

}); // HtmlView Page setting action 'OffClick' for element 'practice2'
          _view.practice2.setAction("OnClick", function(_data,_info) {
  practiceshow=true;
  text = "practice  mode, select the option";
  for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
     colorVectors[vectorIndex] = colororiginal;
     numbercolor[vectorIndex]= numbercolorblack;
     }}

}); // HtmlView Page setting action 'OnClick' for element 'practice2'
          _view.comboBox.linkProperty("Width",  function() { return practiceshow?0:""; } ); // HtmlView Page linking property 'Width' for element 'comboBox'
          _view.comboBox.linkProperty("Options",  function() { return ["numbers 1 to 100 in orange","","Primary 2","Odd numbers in red","Even numbers in green","","Primary 4","Multiples of 1 in teal","Multiples of 2 in teal","Multiples of 3 in teal","Multiples of 4 in teal","Multiples of 5 in teal","Multiples of 6 in teal","Multiples of 7 in teal","Multiples of 8 in teal","Multiples of 9 in teal","","Primary 5","Multiples of 10 in teal","Multiples of 11 in teal","Multiples of 12 in teal","Multiples of 13 in teal","Multiples of 14 in teal","Multiples of 15 in teal","Multiples of 16 in teal","Multiples of 17 in teal","Multiples of 18 in teal","Multiples of 19 in teal","Multiples of 20 in teal","Factors of 20","Factors of 21","Factors of 22","Factors of 23","Factors of 24","Factors of 25","Factors of 26","Factors of 27","Factors of 28","Factors of 29","Factors of 30","Factors of 31","Factors of 32","Factors of 33","Factors of 34","Factors of 35","Factors of 36","Factors of 37","Factors of 38","Factors of 39","Factors of 40","Factors of 41","Factors of 42","Factors of 43","Factors of 44","Factors of 45","Factors of 46","Factors of 47","Factors of 48","Factors of 49","Factors of 50","Factors of 51","Factors of 52","Factors of 53","Factors of 54","Factors of 55","Factors of 56","Factors of 57","Factors of 58","Factors of 59","Factors of 60","Factors of 61","Factors of 62","Factors of 63","Factors of 64","Factors of 65","Factors of 66","Factors of 67","Factors of 68","Factors of 69","Factors of 70","Factors of 71","Factors of 72","Factors of 73","Factors of 74","Factors of 75","Factors of 76","Factors of 77","Factors of 78","Factors of 79","Factors of 80","Factors of 81","Factors of 82","Factors of 83","Factors of 84","Factors of 85","Factors of 86","Factors of 87","Factors of 88","Factors of 89","Factors of 90","Factors of 91","Factors of 92","Factors of 93","Factors of 94","Factors of 95","Factors of 96","Factors of 97","Factors of 98","Factors of 99","Factors of 100","","practice?"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  resultofstringvalue = selected[0].substring(13,14); //checking mutliples single digit
  resultofstringvalue2 = selected[0].substring(13,15); // double digits
  resultofstringvalue3 = selected[0].substring(11,13); // double digits factors
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if (option== "numbers 1 to 100 in orange") {
  hint = "numbers 1 to 100 are \nin original orange color";
     colorhint = colororiginal;
  for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
     colorVectors[vectorIndex] = colororiginal;
     numbercolor[vectorIndex]= numbercolorblack;
     }}
  } 
  //["user_defined","Odd numbers","Even numbers","Multiples of 1","Multiples of 20","Factors of 20","Factors of 100"]
  else if (option== "Odd numbers in red") {
   for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
     hint = "When an ODD number is divided by 2, \nthe remainder is 1";
     colorhint = colorodd;
     if (vectorIndex%2===1){ 
     colorVectors[vectorIndex] = colorodd;//red
     numbercolor[vectorIndex]= numbercolorblack;
     
                            }
    else {
    colorVectors[vectorIndex] = colororiginal;
    numbercolor[vectorIndex]= colordull;
         }
    }
  }
  //alert("When an ODD number is divided by 2, the remainder is 1 \n Click 'OK' button on this pop-up alert to continue");
  EJSS_INTERFACE.BoxPanel.showOkDialog("When an ODD number is divided by 2, the remainder is 1");
     
     //  return;
  }
   else if (option== "Even numbers in green") {
   for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
      hint = "When an EVEN number is divided by 2, \nthe remainder is 0";
     colorhint = coloreven;
     if (vectorIndex%2===0){
     colorVectors[vectorIndex] = coloreven;//green
     numbercolor[vectorIndex]= numbercolorblack;
                            }
    else {
    colorVectors[vectorIndex] = colororiginal;
    numbercolor[vectorIndex]= colordull; //number dull down
         }
    }
  }
  //alert("When an EVEN number is divided by 2, the remainder is 0 \n Click 'OK' button on this pop-up alert to continue");
  EJSS_INTERFACE.BoxPanel.showOkDialog("When an EVEN number is divided by 2, the remainder is 0 \n Click 'OK' button on this pop-up alert to continue");
     
     //  return;
  }
  // multiples clever codes for single digit
    else if (option== "Multiples of "+resultofstringvalue+" in teal") {
   
  for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
  //hint = "when a multiple of "+resultofstringvalue+" is divided by "+resultofstringvalue+", \nthere is no remainder";
   hint = "To get multiples of "+resultofstringvalue+", skip count "+resultofstringvalue+".";
   
   colorhint = colormultiples;
  var remainder = vectorIndex % resultofstringvalue;
  if (remainder == 0){
  //x is a multiple of y
  colorVectors[vectorIndex] = colormultiples;//teal
  numbercolor[vectorIndex]= numbercolorblack;
  } else {
  //x is not a multiple of y
  colorVectors[vectorIndex] = colororiginal;
  numbercolor[vectorIndex]= colordull;
  }
  }}
  //extra code to control height to show only 12 answers/multiples
  if (resultofstringvalue==1){
    ymin = 3;
    }
    if (resultofstringvalue==2){
    ymin = 2;
    }
  if (resultofstringvalue==3){
    ymin = 1;
    }
    if (resultofstringvalue==4){
    ymin = 0;
    }
    if (resultofstringvalue==5){
    ymin = -1;
    }
    if (resultofstringvalue==6){
    ymin = -3;
    }
    if (resultofstringvalue==7){
    ymin = -4;
    }
  //alert("when a multiple of "+resultofstringvalue+" is divided by "+resultofstringvalue+", there is no remainder \n Click 'OK' button on this pop-up alert to continue");
  //alert("Multiples of "+resultofstringvalue+" can be divided exactly by "+resultofstringvalue+" \n Click 'OK' button on this pop-up alert to continue");
  EJSS_INTERFACE.BoxPanel.showOkDialog("Multiples of "+resultofstringvalue+" can be divided exactly by "+resultofstringvalue+" \n Click 'OK' button on this pop-up alert to continue");
     
  // return;
  }
  // multiples clever codes for double digit
    else if (option== "Multiples of "+resultofstringvalue2+" in teal") {
   
  for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
  //hint = "when a multiple of "+resultofstringvalue2+" is divided by "+resultofstringvalue2+", \nthere is no remainder";
  hint = "To get multiples of "+resultofstringvalue2+", skip count "+resultofstringvalue2+".";
  colorhint = colormultiples;
  var remainder = vectorIndex % resultofstringvalue2;
  if (remainder == 0){
  //x is a multiple of y
  colorVectors[vectorIndex] = colormultiples;//teal
  numbercolor[vectorIndex]= numbercolorblack;
  } else {
  //x is not a multiple of y
  colorVectors[vectorIndex] = colororiginal;
  numbercolor[vectorIndex]= colordull;
  }
  }}
  //alert("when a multiple of "+resultofstringvalue2+" is divided by "+resultofstringvalue2+", there is no remainder \n Click 'OK' button on this pop-up alert to continue");
  //alert("Multiples of "+resultofstringvalue2+" can be divided exactly by "+resultofstringvalue2+" \n Click 'OK' button on this pop-up alert to continue");
  EJSS_INTERFACE.BoxPanel.showOkDialog("Multiples of "+resultofstringvalue2+" can be divided exactly by "+resultofstringvalue2+" \n Click 'OK' button on this pop-up alert to continue");
     
  // return;
  }
  //factors celever codes double digits
  else if (option== "Factors of "+resultofstringvalue3) {
    for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
     hint = "when a number "+resultofstringvalue3+" is divided by a factor, \nthere is no remainder";
     colorhint = colorfactors;
     colorVectors[vectorIndex] = colororiginal;//set all to original
     numbercolor[vectorIndex]= colordull; //grey out numbers
  factorresults = getFactors(resultofstringvalue3);
  //assuming no more than 14 numbers manual code in
  //colorVectors[factorresults[0]] = colorfactors;//red
  //colorVectors[factorresults[factorresults.length-1]] = colorfactors;//red
  //colorVectors[factorresults[1]] = colorfactors+1;//red
  //colorVectors[factorresults[factorresults.length-2]] = colorfactors+1;//red
  //colorVectors[factorresults[2]] = colorfactors+2;//red
  //colorVectors[factorresults[factorresults.length-3]] = colorfactors+2;//red
  for (var k = 0; k < factorresults.length/2; k++){
  colorVectors[factorresults[k]] = k+colorfactors;
  colorVectors[factorresults[factorresults.length-k-1]] = k+colorfactors;
  }
  for (var k = 0; k < factorresults.length; k++){
   // colorVectors[factorresults[k]] = colorfactors;//pink
   
    numbercolor[factorresults[k]]= numbercolorblack; //black numbers
    }
  /*
  for (var k = 0; k < factorresults.length; k++){
    colorVectors[factorresults[k]] = colorfactors;//pink
   
    numbercolor[factorresults[k]]= numbercolorblack; //black numbers
    }
    */
    
  }}
  //alert("when a number "+resultofstringvalue3+" is divided by a factor, there is no remainder \n Click 'OK' button on this pop-up alert to continue");
  EJSS_INTERFACE.BoxPanel.showOkDialog("when a number "+resultofstringvalue3+" is divided by a factor, there is no remainder \n Click 'OK' button on this pop-up alert to continue");
  //  return;
  //extra code to control height to show only factors
  if (resultofstringvalue3==20){
    ymin = 3;
    }
   else  if (resultofstringvalue3>=21&&resultofstringvalue3<=30){
    ymin = 2;
    }
  else   if (resultofstringvalue3>=31&&resultofstringvalue3<=40){
    ymin = 1;
    }
   else  if (resultofstringvalue3>=41&&resultofstringvalue3<=50){
    ymin = 0;
    }
   else  if (resultofstringvalue3>=51&&resultofstringvalue3<=60){
    ymin = -1;
    }
   else  if (resultofstringvalue3>=61&&resultofstringvalue3<=70){
    ymin = -2;
    }
   else  if (resultofstringvalue3>=71&&resultofstringvalue3<=80){
    ymin = -3;
    }
   else  if (resultofstringvalue3>=81&&resultofstringvalue3<=90){
    ymin = -4;
    }
    else {
    ymin = -5;
    }
  }
  //factors three digits 100
  else if (option== "Factors of 100") {
    for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
     hint = "when a number 100 is divided by a factor, \nthere is no remainder";
     colorhint = colorfactors;
     colorVectors[vectorIndex] = colororiginal;//set all to original
     numbercolor[vectorIndex]= colordull; //grey out numbers
  factorresults = getFactors(100);
  for (var k = 0; k < factorresults.length/2; k++){
  colorVectors[factorresults[k]] = k+colorfactors;
  colorVectors[factorresults[factorresults.length-k-1]] = k+colorfactors;
  }
  for (var k = 0; k < factorresults.length; k++){
   // colorVectors[factorresults[k]] = colorfactors;//pink
   
    numbercolor[factorresults[k]]= numbercolorblack; //black numbers
    }
  /*
  for (var k = 0; k < factorresults.length; k++){
    colorVectors[factorresults[k]] = colorfactors;//pink
    numbercolor[factorresults[k]]= numbercolorblack; //back to black
    }
    */
    ymin = -5;
  }}
  //alert("when a number 100 is divided by a factor, there is no remainder \n Click 'OK' button on this pop-up alert to continue");
  EJSS_INTERFACE.BoxPanel.showOkDialog("when a number 100 is divided by a factor, there is no remainder \n Click 'OK' button on this pop-up alert to continue");
  // return;
  }
  else if (option== "practice?"){
    practiceshow=true;
  text = "practice  mode, select the option";
  for (var i = 1; i < nVectorsMax+1; i++)
   {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
     colorVectors[vectorIndex] = colororiginal;
     numbercolor[vectorIndex]= numbercolorblack;
     }}
    }
   if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Visibility",  function() { return !practiceshow; } ); // HtmlView Page linking property 'Visibility' for element 'comboBox'
          _view.comboBox.linkProperty("SelectedOptions",  function() { return selected; }, function(_v) { selected = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'comboBox'
          _view.game.linkProperty("Width",  function() { return practiceshow?"":0; } ); // HtmlView Page linking property 'Width' for element 'game'
          _view.game.linkProperty("Options",  function() { return ["Primary 2","select odd numbers","select even numbers","","Primary 4","select multiples of 3","select multiples of 4","select multiples of 5","select multiples of 6","select multiples of 7","select multiples of 8","select multiples of 9","","Primary 5","select multiples of 10","select multiples of 11","select multiples of 12","select multiples of 13","select multiples of 14","select multiples of 15","select multiples of 16","select multiples of 17","select multiples of 18","select multiples of 19","select multiples of 20","select factors of 20","select factors of 21","select factors of 22","select factors of 23","select factors of 24","select factors of 25","select factors of 26","select factors of 27","select factors of 28","select factors of 29","select factors of 30","select factors of 31","select factors of 32","select factors of 33","select factors of 34","select factors of 35","select factors of 36","select factors of 37","select factors of 38","select factors of 39","select factors of 40","select factors of 41","select factors of 42","select factors of 43","select factors of 44","select factors of 45","select factors of 46","select factors of 47","select factors of 48","select factors of 49","select factors of 50","select factors of 51","select factors of 52","select factors of 53","select factors of 54","select factors of 55","select factors of 56","select factors of 57","select factors of 58","select factors of 59","select factors of 60","select factors of 61","select factors of 62","select factors of 63","select factors of 64","select factors of 65","select factors of 66","select factors of 67","select factors of 68","select factors of 69","select factors of 70","select factors of 71","select factors of 72","select factors of 73","select factors of 74","select factors of 75","select factors of 76","select factors of 77","select factors of 78","select factors of 79","select factors of 80","select factors of 81","select factors of 82","select factors of 83","select factors of 84","select factors of 85","select factors of 86","select factors of 87","select factors of 88","select factors of 89","select factors of 90","select factors of 91","select factors of 92","select factors of 93","select factors of 94","select factors of 95","select factors of 96","select factors of 97","select factors of 99","select factors of 99","select factors of 100"]; } ); // HtmlView Page linking property 'Options' for element 'game'
          _view.game.setAction("OnChange", function(_data,_info) {
  var opts = _view.game.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  resultofstringvaluegame = selected1[0].substring(20,21); //checking mutliples single digit
  //alert(resultofstringvaluegame);
  resultofstringvaluegame2 = selected1[0].substring(20,22); // double digits
  //resultofstringvaluegame3 = selected1[0].substring(18,20); // double digits factors
  resultofstringvaluegame3 = selected1[0].substring(18,21); // single ,double and triple digits factors
   if (option== "select multiples of "+resultofstringvaluegame2) {
   // initialise values for multiple single digit
  // alert(option);
   multiplenumbersleft = Math.floor(100/resultofstringvaluegame2);
  //  multiplenumbersleftonscreen = Math.floor(40/resultofstringvaluegame); 
  //extra code to control height to show only 12 answers/multiples
  if (resultofstringvaluegame2==1){ //30
    ymin = 3;
     multiplenumbersleftonscreen2 = Math.floor(30/resultofstringvaluegame2); 
    }
   else if (resultofstringvaluegame2==2){
    ymin = 2;
     multiplenumbersleftonscreen2 = Math.floor(40/resultofstringvaluegame2); 
    }
  else if (resultofstringvaluegame2==3){ //multiples of 3
    ymin = 1;
     multiplenumbersleftonscreen2 = Math.floor(40/resultofstringvaluegame2); 
    }
  else  if (resultofstringvaluegame2==4){
    ymin = 0;
     multiplenumbersleftonscreen2 = Math.floor(50/resultofstringvaluegame2); 
     }
    else if (resultofstringvaluegame2==5){
    ymin = -1;
  //  alert("ymin="+ymin);
     multiplenumbersleftonscreen2 = Math.floor(60/resultofstringvaluegame2); 
    }
   else if (resultofstringvaluegame2==6){
    ymin = -3;
     multiplenumbersleftonscreen2 = Math.floor(80/resultofstringvaluegame2); 
    }
   else if (resultofstringvaluegame2==7){ //100
    ymin = -4;
     multiplenumbersleftonscreen2 = Math.floor(90/resultofstringvaluegame2); 
    }
    else{
      multiplenumbersleftonscreen2 = Math.floor(100/resultofstringvaluegame2); 
      }
  }
  //outside loop
  else if (option== "select multiples of "+resultofstringvaluegame2) {
    multiplenumbersleftonscreen2 = Math.floor(100/resultofstringvaluegame2); 
    }
  else if (option== "select factors of "+resultofstringvaluegame3) {
  //factorresultsleftonscreen = getFactors(resultofstringvaluegame3);
  factorresults = getFactors(resultofstringvaluegame3); 
  factorresultsleftonscreen= factorresults.length;
  //extra code to control height to show only factors
  if (resultofstringvaluegame3==20){
    ymin = 3;
    }
   else  if (resultofstringvaluegame3>=21&&resultofstringvaluegame3<=30){
    ymin = 2;
    }
  else   if (resultofstringvaluegame3>=31&&resultofstringvaluegame3<=40){
    ymin = 1;
    }
   else  if (resultofstringvaluegame3>=41&&resultofstringvaluegame3<=50){
    ymin = 0;
    }
   else  if (resultofstringvaluegame3>=51&&resultofstringvaluegame3<=60){
    ymin = -1;
    }
   else  if (resultofstringvaluegame3>=61&&resultofstringvaluegame3<=70){
    ymin = -2;
    }
   else  if (resultofstringvaluegame3>=71&&resultofstringvaluegame3<=80){
    ymin = -3;
    }
   else  if (resultofstringvaluegame3>=81&&resultofstringvaluegame3<=90){
    ymin = -4;
    }
    else {
    ymin = -5;
    }
  }
  if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'game'
          _view.game.linkProperty("Visibility",  function() { return practiceshow; }, function(_v) { practiceshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'game'
          _view.game.linkProperty("SelectedOptions",  function() { return selected1; }, function(_v) { selected1 = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'game'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax+0.5+1; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax+0.5; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return TRMessage; }, function(_v) { TRMessage = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin+0.5; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin+0.5; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.fieldpoint2.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("FillColor",  function() { return colorVectors; }, function(_v) { colorVectors = _v; } ); // HtmlView Page linking property 'FillColor' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'fieldpoint2'
          _view.fieldpoint2.setAction("OnPress", function(_data,_info) {
  colorVectors[elementinteracted] = "rgba(100,100,255,0.5)";

}); // HtmlView Page setting action 'OnPress' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'fieldpoint2'
          _view.fieldpoint3.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'fieldpoint3'
          _view.fieldpoint3.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'fieldpoint3'
          _view.fieldpoint3.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'fieldpoint3'
          _view.forgame.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'forgame'
          _view.forgame.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'forgame'
          _view.forgame.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'forgame'
          _view.forgame.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'forgame'
          _view.forgame.linkProperty("Visibility",  function() { return practiceshow; }, function(_v) { practiceshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'forgame'
          _view.forgame.setAction("OnPress", function(_data,_info) {
  colorVectors[elementinteracted] = "rgba(100,100,255,0.5)";
  //elementinteracted=0; //set back to zero;

}); // HtmlView Page setting action 'OnPress' for element 'forgame'
          _view.textSet.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("FillColor",  function() { return numbercolor; }, function(_v) { numbercolor = _v; } ); // HtmlView Page linking property 'FillColor' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return textpos; }, function(_v) { textpos = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.group.linkProperty("Y",  function() { return ymax+0.9; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.hint.linkProperty("FillColor",  function() { return colorhint; }, function(_v) { colorhint = _v; } ); // HtmlView Page linking property 'FillColor' for element 'hint'
          _view.hint.setAction("OnEnter", function(_data,_info) {
  if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(hint, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(hint);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnEnter' for element 'hint'
          _view.hint.linkProperty("Text",  function() { return hint; }, function(_v) { hint = _v; } ); // HtmlView Page linking property 'Text' for element 'hint'
          _view.correct.linkProperty("SizeX",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'correct'
          _view.correct.linkProperty("X",  function() { return posx[elementinteracted]; } ); // HtmlView Page linking property 'X' for element 'correct'
          _view.correct.linkProperty("Y",  function() { return posy[elementinteracted]-0.4; } ); // HtmlView Page linking property 'Y' for element 'correct'
          _view.correct.linkProperty("Visibility",  function() { return feedbacktext=== "well done!"; } ); // HtmlView Page linking property 'Visibility' for element 'correct'
          _view.correct.linkProperty("SizeY",  function() { return sizey*0.8; } ); // HtmlView Page linking property 'SizeY' for element 'correct'
          _view.feedbacktext.linkProperty("X",  function() { return posx[elementinteracted]; } ); // HtmlView Page linking property 'X' for element 'feedbacktext'
          _view.feedbacktext.linkProperty("Y",  function() { return posy[elementinteracted]-0.4; } ); // HtmlView Page linking property 'Y' for element 'feedbacktext'
          _view.feedbacktext.linkProperty("Text",  function() { return feedbacktext; }, function(_v) { feedbacktext = _v; } ); // HtmlView Page linking property 'Text' for element 'feedbacktext'
          _view.slider.linkProperty("Value",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Value' for element 'slider'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function number1to100_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = number1to100_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function number1to100_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"practice2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'practice2'
      .setProperty("TextOn","📖") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'practice2'
      .setProperty("Tooltip","practice or teach mode") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'practice2'
      .setProperty("TextOff","🎮") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'practice2'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'practice2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"game", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'game'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'game'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'game'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","85vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("Background","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"fieldpoint2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldpoint2'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'fieldpoint2'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'fieldpoint2'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'fieldpoint2'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'fieldpoint2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'fieldpoint2'
      .setProperty("EnabledPosition","ENABLED_FIXED") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'fieldpoint2'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"fieldpoint3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldpoint3'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'fieldpoint3'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'fieldpoint3'
      .setProperty("SizeX",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'fieldpoint3'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'fieldpoint3'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'fieldpoint3'
      .setProperty("SizeY",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'fieldpoint3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'fieldpoint3'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"forgame", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'forgame'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'forgame'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'forgame'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'forgame'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'forgame'
      .setProperty("SizeX",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'forgame'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'forgame'
      .setProperty("SizeY",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'forgame'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'forgame'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'forgame'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet'
      .setProperty("LineColor","rgba(1,2,3,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'textSet'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"hint", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'hint'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hint'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'hint'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'hint'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'hint'
      .setProperty("Font","normal normal 20px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'hint'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hint'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"correct", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'correct'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'correct'
      .setProperty("ImageUrl","./numbers1to100/giphy.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'correct'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'correct'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"feedbacktext", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'feedbacktext'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'feedbacktext'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'feedbacktext'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"more", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'more'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider", _view.more) // EJsS HtmlView.HtmlView Page: declaration of element 'slider'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'slider'
      .setProperty("Minimum",-5) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider'
      .setProperty("Maximum",4) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'slider'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"audio", _view.more) // EJsS HtmlView.HtmlView Page: declaration of element 'audio'
      .setProperty("AudioUrl","./numbers1to100/Ding Sound Effect.m4a") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'audio'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Numbers 1 to 100<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_number1to100/numbers1to100/Screen Shot 2017-01-19 at 3.23.03 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_number1to100/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_number1to100/01authorPacoEsquembre2011.png" />
 weelookang@gmail.com; Francisco Esquembre
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com; Francisco Esquembre.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new number1to100("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_number1to100/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
