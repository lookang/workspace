<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Reading Scale Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_SHMmassscale/massscale/hammer-time.min.js"></script>

<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function SHMmassscale(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var inputdropmenu; // EjsS Model.Variables.Var Table.inputdropmenu
  var font; // EjsS Model.Variables.Var Table.font
  var gramshow; // EjsS Model.Variables.Var Table.gramshow
  var factor; // EjsS Model.Variables.Var Table.factor
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var elementinteracted; // EjsS Model.Variables.Var Table.elementinteracted
  var selected; // EjsS Model.Variables.Var Table.selected
  var decimal; // EjsS Model.Variables.Var Table.decimal
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var g; // EjsS Model.Variables.Var Table.g
  var vvst; // EjsS Model.Variables.Var Table.vvst
  var avst; // EjsS Model.Variables.Var Table.avst

  var m; // EjsS Model.Variables.simplespring.m
  var scaletype; // EjsS Model.Variables.simplespring.scaletype
  var massscale; // EjsS Model.Variables.simplespring.massscale
  var massscaleo; // EjsS Model.Variables.simplespring.massscaleo
  var k; // EjsS Model.Variables.simplespring.k
  var l; // EjsS Model.Variables.simplespring.l
  var x; // EjsS Model.Variables.simplespring.x
  var xo; // EjsS Model.Variables.simplespring.xo
  var y; // EjsS Model.Variables.simplespring.y
  var yo; // EjsS Model.Variables.simplespring.yo
  var ye; // EjsS Model.Variables.simplespring.ye
  var vx; // EjsS Model.Variables.simplespring.vx
  var vy; // EjsS Model.Variables.simplespring.vy
  var v; // EjsS Model.Variables.simplespring.v
  var t; // EjsS Model.Variables.simplespring.t
  var tcst; // EjsS Model.Variables.simplespring.tcst
  var X; // EjsS Model.Variables.simplespring.X
  var T; // EjsS Model.Variables.simplespring.T
  var dt; // EjsS Model.Variables.simplespring.dt
  var w; // EjsS Model.Variables.simplespring.w
  var a; // EjsS Model.Variables.simplespring.a
  var f; // EjsS Model.Variables.simplespring.f

  var theta; // EjsS Model.Variables.pendulum.theta
  var thetas; // EjsS Model.Variables.pendulum.thetas
  var thetadegrees; // EjsS Model.Variables.pendulum.thetadegrees
  var thetao; // EjsS Model.Variables.pendulum.thetao
  var thetaodegrees; // EjsS Model.Variables.pendulum.thetaodegrees
  var omega; // EjsS Model.Variables.pendulum.omega
  var omegas; // EjsS Model.Variables.pendulum.omegas
  var omegao; // EjsS Model.Variables.pendulum.omegao
  var alpha; // EjsS Model.Variables.pendulum.alpha
  var alphas; // EjsS Model.Variables.pendulum.alphas
  var L; // EjsS Model.Variables.pendulum.L
  var xs; // EjsS Model.Variables.pendulum.xs
  var ys; // EjsS Model.Variables.pendulum.ys
  var vxs; // EjsS Model.Variables.pendulum.vxs
  var vys; // EjsS Model.Variables.pendulum.vys
  var answershow; // EjsS Model.Variables.pendulum.answershow

  var b; // EjsS Model.Variables.advancedspring.b
  var amplitude; // EjsS Model.Variables.advancedspring.amplitude
  var frequency; // EjsS Model.Variables.advancedspring.frequency
  var potentialEnergy; // EjsS Model.Variables.advancedspring.potentialEnergy
  var kineticEnergy; // EjsS Model.Variables.advancedspring.kineticEnergy
  var totalEnergy; // EjsS Model.Variables.advancedspring.totalEnergy
  var afrequency; // EjsS Model.Variables.advancedspring.afrequency
  var Hertz; // EjsS Model.Variables.advancedspring.Hertz

  var n1; // EjsS Model.Variables.peroid.n1
  var nc; // EjsS Model.Variables.peroid.nc
  var numberofswing; // EjsS Model.Variables.peroid.numberofswing
  var omegastored; // EjsS Model.Variables.peroid.omegastored
  var T1; // EjsS Model.Variables.peroid.T1
  var ts; // EjsS Model.Variables.peroid.ts

  var showAnswerFlag; // EjsS Model.Variables.check.showAnswerFlag
  var K1fcorrect; // EjsS Model.Variables.check.K1fcorrect
  var l_enterK1f; // EjsS Model.Variables.check.l_enterK1f
  var K1fcorrectbackground; // EjsS Model.Variables.check.K1fcorrectbackground
  var enterK1f; // EjsS Model.Variables.check.enterK1f
  var l_answer; // EjsS Model.Variables.check.l_answer

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Android; // EjsS Model.Variables.layout.Android
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Width; // EjsS Model.Variables.layout.Width
  var selectedview; // EjsS Model.Variables.layout.selectedview
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var maxy; // EjsS Model.Variables.draw.maxy
  var n; // EjsS Model.Variables.draw.n
  var n2; // EjsS Model.Variables.draw.n2
  var c; // EjsS Model.Variables.draw.c
  var cs; // EjsS Model.Variables.draw.cs
  var xline; // EjsS Model.Variables.draw.xline
  var yline; // EjsS Model.Variables.draw.yline
  var msg; // EjsS Model.Variables.draw.msg
  var Rs; // EjsS Model.Variables.draw.Rs
  var dxs; // EjsS Model.Variables.draw.dxs
  var ds; // EjsS Model.Variables.draw.ds
  var xline2; // EjsS Model.Variables.draw.xline2
  var yline2; // EjsS Model.Variables.draw.yline2
  var dys; // EjsS Model.Variables.draw.dys
  var D; // EjsS Model.Variables.draw.D
  var D2; // EjsS Model.Variables.draw.D2
  var red; // EjsS Model.Variables.draw.red
  var green; // EjsS Model.Variables.draw.green
  var blue; // EjsS Model.Variables.draw.blue
  var color; // EjsS Model.Variables.draw.color
  var stroke; // EjsS Model.Variables.draw.stroke

  var xdrag; // EjsS Model.Variables.dragable.xdrag
  var ydrag; // EjsS Model.Variables.dragable.ydrag
  var thetadrag; // EjsS Model.Variables.dragable.thetadrag
  var xdragtop; // EjsS Model.Variables.dragable.xdragtop
  var ydragtop; // EjsS Model.Variables.dragable.ydragtop
  var thetadragtop; // EjsS Model.Variables.dragable.thetadragtop
  var xodragtop; // EjsS Model.Variables.dragable.xodragtop
  var yodragtop; // EjsS Model.Variables.dragable.yodragtop
  var thetaodragtop; // EjsS Model.Variables.dragable.thetaodragtop

  var counter; // EjsS Model.Variables.functionY.counter
  var selectedmodel; // EjsS Model.Variables.functionY.selectedmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var functionY2; // EjsS Model.Variables.functionY.functionY2
  var xmodel; // EjsS Model.Variables.functionY.xmodel
  var showmodel; // EjsS Model.Variables.functionY.showmodel

  var appleshow; // EjsS Model.Variables.object.appleshow
  var pineappleshow; // EjsS Model.Variables.object.pineappleshow
  var coinshow; // EjsS Model.Variables.object.coinshow

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      inputdropmenu : inputdropmenu,
      font : font,
      gramshow : gramshow,
      factor : factor,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      elementinteracted : elementinteracted,
      selected : selected,
      decimal : decimal,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      g : g,
      vvst : vvst,
      avst : avst,
      m : m,
      scaletype : scaletype,
      massscale : massscale,
      massscaleo : massscaleo,
      k : k,
      l : l,
      x : x,
      xo : xo,
      y : y,
      yo : yo,
      ye : ye,
      vx : vx,
      vy : vy,
      v : v,
      t : t,
      tcst : tcst,
      X : X,
      T : T,
      dt : dt,
      w : w,
      a : a,
      f : f,
      theta : theta,
      thetas : thetas,
      thetadegrees : thetadegrees,
      thetao : thetao,
      thetaodegrees : thetaodegrees,
      omega : omega,
      omegas : omegas,
      omegao : omegao,
      alpha : alpha,
      alphas : alphas,
      L : L,
      xs : xs,
      ys : ys,
      vxs : vxs,
      vys : vys,
      answershow : answershow,
      b : b,
      amplitude : amplitude,
      frequency : frequency,
      potentialEnergy : potentialEnergy,
      kineticEnergy : kineticEnergy,
      totalEnergy : totalEnergy,
      afrequency : afrequency,
      Hertz : Hertz,
      n1 : n1,
      nc : nc,
      numberofswing : numberofswing,
      omegastored : omegastored,
      T1 : T1,
      ts : ts,
      showAnswerFlag : showAnswerFlag,
      K1fcorrect : K1fcorrect,
      l_enterK1f : l_enterK1f,
      K1fcorrectbackground : K1fcorrectbackground,
      enterK1f : enterK1f,
      l_answer : l_answer,
      isAndroid : isAndroid,
      Android : Android,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Width : Width,
      selectedview : selectedview,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      disabledworld : disabledworld,
      disabled : disabled,
      maxy : maxy,
      n : n,
      n2 : n2,
      c : c,
      cs : cs,
      xline : xline,
      yline : yline,
      msg : msg,
      Rs : Rs,
      dxs : dxs,
      ds : ds,
      xline2 : xline2,
      yline2 : yline2,
      dys : dys,
      D : D,
      D2 : D2,
      red : red,
      green : green,
      blue : blue,
      color : color,
      stroke : stroke,
      xdrag : xdrag,
      ydrag : ydrag,
      thetadrag : thetadrag,
      xdragtop : xdragtop,
      ydragtop : ydragtop,
      thetadragtop : thetadragtop,
      xodragtop : xodragtop,
      yodragtop : yodragtop,
      thetaodragtop : thetaodragtop,
      counter : counter,
      selectedmodel : selectedmodel,
      functionY : functionY,
      functionY2 : functionY2,
      xmodel : xmodel,
      showmodel : showmodel,
      appleshow : appleshow,
      pineappleshow : pineappleshow,
      coinshow : coinshow
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.inputdropmenu != "undefined") inputdropmenu = json.inputdropmenu;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.gramshow != "undefined") gramshow = json.gramshow;
    if(typeof json.factor != "undefined") factor = json.factor;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.decimal != "undefined") decimal = json.decimal;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.scaletype != "undefined") scaletype = json.scaletype;
    if(typeof json.massscale != "undefined") massscale = json.massscale;
    if(typeof json.massscaleo != "undefined") massscaleo = json.massscaleo;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xo != "undefined") xo = json.xo;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.yo != "undefined") yo = json.yo;
    if(typeof json.ye != "undefined") ye = json.ye;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.tcst != "undefined") tcst = json.tcst;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.thetas != "undefined") thetas = json.thetas;
    if(typeof json.thetadegrees != "undefined") thetadegrees = json.thetadegrees;
    if(typeof json.thetao != "undefined") thetao = json.thetao;
    if(typeof json.thetaodegrees != "undefined") thetaodegrees = json.thetaodegrees;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.omegas != "undefined") omegas = json.omegas;
    if(typeof json.omegao != "undefined") omegao = json.omegao;
    if(typeof json.alpha != "undefined") alpha = json.alpha;
    if(typeof json.alphas != "undefined") alphas = json.alphas;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.vxs != "undefined") vxs = json.vxs;
    if(typeof json.vys != "undefined") vys = json.vys;
    if(typeof json.answershow != "undefined") answershow = json.answershow;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.amplitude != "undefined") amplitude = json.amplitude;
    if(typeof json.frequency != "undefined") frequency = json.frequency;
    if(typeof json.potentialEnergy != "undefined") potentialEnergy = json.potentialEnergy;
    if(typeof json.kineticEnergy != "undefined") kineticEnergy = json.kineticEnergy;
    if(typeof json.totalEnergy != "undefined") totalEnergy = json.totalEnergy;
    if(typeof json.afrequency != "undefined") afrequency = json.afrequency;
    if(typeof json.Hertz != "undefined") Hertz = json.Hertz;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.nc != "undefined") nc = json.nc;
    if(typeof json.numberofswing != "undefined") numberofswing = json.numberofswing;
    if(typeof json.omegastored != "undefined") omegastored = json.omegastored;
    if(typeof json.T1 != "undefined") T1 = json.T1;
    if(typeof json.ts != "undefined") ts = json.ts;
    if(typeof json.showAnswerFlag != "undefined") showAnswerFlag = json.showAnswerFlag;
    if(typeof json.K1fcorrect != "undefined") K1fcorrect = json.K1fcorrect;
    if(typeof json.l_enterK1f != "undefined") l_enterK1f = json.l_enterK1f;
    if(typeof json.K1fcorrectbackground != "undefined") K1fcorrectbackground = json.K1fcorrectbackground;
    if(typeof json.enterK1f != "undefined") enterK1f = json.enterK1f;
    if(typeof json.l_answer != "undefined") l_answer = json.l_answer;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.maxy != "undefined") maxy = json.maxy;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.n2 != "undefined") n2 = json.n2;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.cs != "undefined") cs = json.cs;
    if(typeof json.xline != "undefined") xline = json.xline;
    if(typeof json.yline != "undefined") yline = json.yline;
    if(typeof json.msg != "undefined") msg = json.msg;
    if(typeof json.Rs != "undefined") Rs = json.Rs;
    if(typeof json.dxs != "undefined") dxs = json.dxs;
    if(typeof json.ds != "undefined") ds = json.ds;
    if(typeof json.xline2 != "undefined") xline2 = json.xline2;
    if(typeof json.yline2 != "undefined") yline2 = json.yline2;
    if(typeof json.dys != "undefined") dys = json.dys;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.D2 != "undefined") D2 = json.D2;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.xdrag != "undefined") xdrag = json.xdrag;
    if(typeof json.ydrag != "undefined") ydrag = json.ydrag;
    if(typeof json.thetadrag != "undefined") thetadrag = json.thetadrag;
    if(typeof json.xdragtop != "undefined") xdragtop = json.xdragtop;
    if(typeof json.ydragtop != "undefined") ydragtop = json.ydragtop;
    if(typeof json.thetadragtop != "undefined") thetadragtop = json.thetadragtop;
    if(typeof json.xodragtop != "undefined") xodragtop = json.xodragtop;
    if(typeof json.yodragtop != "undefined") yodragtop = json.yodragtop;
    if(typeof json.thetaodragtop != "undefined") thetaodragtop = json.thetaodragtop;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.functionY2 != "undefined") functionY2 = json.functionY2;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.appleshow != "undefined") appleshow = json.appleshow;
    if(typeof json.pineappleshow != "undefined") pineappleshow = json.pineappleshow;
    if(typeof json.coinshow != "undefined") coinshow = json.coinshow;
  };

  _model._inputAndPublicParameters = ["inputdropmenu",  "font",  "gramshow",  "factor",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "elementinteracted",  "selected",  "decimal",  "text",  "pi",  "y1",  "ysize",  "g",  "vvst",  "avst",  "m",  "scaletype",  "massscale",  "massscaleo",  "k",  "l",  "x",  "xo",  "y",  "yo",  "ye",  "vx",  "vy",  "v",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "theta",  "thetas",  "thetadegrees",  "thetao",  "thetaodegrees",  "omega",  "omegas",  "omegao",  "alpha",  "alphas",  "L",  "xs",  "ys",  "vxs",  "vys",  "answershow",  "b",  "amplitude",  "frequency",  "potentialEnergy",  "kineticEnergy",  "totalEnergy",  "afrequency",  "Hertz",  "n1",  "nc",  "numberofswing",  "omegastored",  "T1",  "ts",  "showAnswerFlag",  "K1fcorrect",  "l_enterK1f",  "K1fcorrectbackground",  "enterK1f",  "l_answer",  "isAndroid",  "Android",  "iOS",  "iPad",  "iPhone",  "Width",  "selectedview",  "Height",  "Width1",  "Width2",  "disabledworld",  "disabled",  "maxy",  "n",  "n2",  "c",  "cs",  "xline",  "yline",  "msg",  "Rs",  "dxs",  "ds",  "xline2",  "yline2",  "dys",  "D",  "D2",  "red",  "green",  "blue",  "color",  "stroke",  "xdrag",  "ydrag",  "thetadrag",  "xdragtop",  "ydragtop",  "thetadragtop",  "xodragtop",  "yodragtop",  "thetaodragtop",  "counter",  "selectedmodel",  "functionY",  "functionY2",  "xmodel",  "showmodel",  "appleshow",  "pineappleshow",  "coinshow"]; 

  _model._outputAndPublicParameters = ["inputdropmenu",  "font",  "gramshow",  "factor",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "elementinteracted",  "selected",  "decimal",  "text",  "pi",  "y1",  "ysize",  "g",  "vvst",  "avst",  "m",  "scaletype",  "massscale",  "massscaleo",  "k",  "l",  "x",  "xo",  "y",  "yo",  "ye",  "vx",  "vy",  "v",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "theta",  "thetas",  "thetadegrees",  "thetao",  "thetaodegrees",  "omega",  "omegas",  "omegao",  "alpha",  "alphas",  "L",  "xs",  "ys",  "vxs",  "vys",  "answershow",  "b",  "amplitude",  "frequency",  "potentialEnergy",  "kineticEnergy",  "totalEnergy",  "afrequency",  "Hertz",  "n1",  "nc",  "numberofswing",  "omegastored",  "T1",  "ts",  "showAnswerFlag",  "K1fcorrect",  "l_enterK1f",  "K1fcorrectbackground",  "enterK1f",  "l_answer",  "isAndroid",  "Android",  "iOS",  "iPad",  "iPhone",  "Width",  "selectedview",  "Height",  "Width1",  "Width2",  "disabledworld",  "disabled",  "maxy",  "n",  "n2",  "c",  "cs",  "xline",  "yline",  "msg",  "Rs",  "dxs",  "ds",  "xline2",  "yline2",  "dys",  "D",  "D2",  "red",  "green",  "blue",  "color",  "stroke",  "xdrag",  "ydrag",  "thetadrag",  "xdragtop",  "ydragtop",  "thetadragtop",  "xodragtop",  "yodragtop",  "thetaodragtop",  "counter",  "selectedmodel",  "functionY",  "functionY2",  "xmodel",  "showmodel",  "appleshow",  "pineappleshow",  "coinshow"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["draw"] = true;
    __pagesEnabled["svgradial"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["zoom"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["angletomass"] = true;
    __pagesEnabled["getcorrectl_answer"] = true;
    __pagesEnabled["check"] = true;
  });

  _model.addToReset(function() {
    inputdropmenu = true; // EjsS Model.Variables.Var Table.inputdropmenu
    font = "normal normal 2.5vw "; // EjsS Model.Variables.Var Table.font
    gramshow = true; // EjsS Model.Variables.Var Table.gramshow
    factor = 1; // EjsS Model.Variables.Var Table.factor
    xmin = -1; // EjsS Model.Variables.Var Table.xmin
    xmax = 1; // EjsS Model.Variables.Var Table.xmax
    ymin = -1; // EjsS Model.Variables.Var Table.ymin
    ymax = 1; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    elementinteracted = 0; // EjsS Model.Variables.Var Table.elementinteracted
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    decimal = 2; // EjsS Model.Variables.Var Table.decimal
    text = "click reset \nto generate random mass reading"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    g = 9.81; // EjsS Model.Variables.Var Table.g
    vvst = true; // EjsS Model.Variables.Var Table.vvst
    avst = true; // EjsS Model.Variables.Var Table.avst
  });

  _model.addToReset(function() {
    m = 1; // EjsS Model.Variables.simplespring.m
    scaletype = 1; // EjsS Model.Variables.simplespring.scaletype
    massscale = 0; // EjsS Model.Variables.simplespring.massscale
    massscaleo = Math.round(Math.random()*10)*0.5; // EjsS Model.Variables.simplespring.massscaleo
    k = 10; // EjsS Model.Variables.simplespring.k
    l = 0; // EjsS Model.Variables.simplespring.l
    x = 0.72; // EjsS Model.Variables.simplespring.x
    xo = 0; // EjsS Model.Variables.simplespring.xo
    y = 0; // EjsS Model.Variables.simplespring.y
    yo = 0; // EjsS Model.Variables.simplespring.yo
    ye = -g*m/k; // EjsS Model.Variables.simplespring.ye
    vx = 0; // EjsS Model.Variables.simplespring.vx
    vy = 0; // EjsS Model.Variables.simplespring.vy
    v = 0; // EjsS Model.Variables.simplespring.v
    t = 0; // EjsS Model.Variables.simplespring.t
    tcst = 0; // EjsS Model.Variables.simplespring.tcst
    X = x-l; // EjsS Model.Variables.simplespring.X
    T = 2*pi*Math.sqrt(m/k); // EjsS Model.Variables.simplespring.T
    dt = T/50; // EjsS Model.Variables.simplespring.dt
    w = 2*pi/T; // EjsS Model.Variables.simplespring.w
    a = -w^2*x; // EjsS Model.Variables.simplespring.a
    f = 0; // EjsS Model.Variables.simplespring.f
  });

  _model.addToReset(function() {
    theta = 2*pi; // EjsS Model.Variables.pendulum.theta
    thetas = theta; // EjsS Model.Variables.pendulum.thetas
    thetadegrees = theta*180/pi; // EjsS Model.Variables.pendulum.thetadegrees
    thetao = 2*pi-massscaleo/5*(2*pi); // EjsS Model.Variables.pendulum.thetao
    thetaodegrees = thetao*180/pi; // EjsS Model.Variables.pendulum.thetaodegrees
    omega = 0; // EjsS Model.Variables.pendulum.omega
    omegas = 0; // EjsS Model.Variables.pendulum.omegas
    omegao = 0; // EjsS Model.Variables.pendulum.omegao
    alpha = 0; // EjsS Model.Variables.pendulum.alpha
    alphas = 0; // EjsS Model.Variables.pendulum.alphas
    L = 0.72; // EjsS Model.Variables.pendulum.L
    xs = 0; // EjsS Model.Variables.pendulum.xs
    ys = 0; // EjsS Model.Variables.pendulum.ys
    vxs = 0; // EjsS Model.Variables.pendulum.vxs
    vys = 0; // EjsS Model.Variables.pendulum.vys
  });

  _model.addToReset(function() {
    b = 2; // EjsS Model.Variables.advancedspring.b
    amplitude = 0.5; // EjsS Model.Variables.advancedspring.amplitude
    frequency = 0; // EjsS Model.Variables.advancedspring.frequency
    potentialEnergy = 0; // EjsS Model.Variables.advancedspring.potentialEnergy
    kineticEnergy = 0; // EjsS Model.Variables.advancedspring.kineticEnergy
    totalEnergy = 0; // EjsS Model.Variables.advancedspring.totalEnergy
    afrequency = 0; // EjsS Model.Variables.advancedspring.afrequency
    Hertz = 0; // EjsS Model.Variables.advancedspring.Hertz
  });

  _model.addToReset(function() {
    n1 = 0; // EjsS Model.Variables.peroid.n1
    nc = 0; // EjsS Model.Variables.peroid.nc
    numberofswing = 0; // EjsS Model.Variables.peroid.numberofswing
    omegastored = 0; // EjsS Model.Variables.peroid.omegastored
    T1 = new Array(100); // EjsS Model.Variables.peroid.T1
    (function () {
      var _i0;
      for (_i0=0; _i0<100; _i0+=1) {  // EjsS Model.Variables.peroid.T1
        T1[_i0] = 0;  // EjsS Model.Variables.peroid.T1
      }
    }());
    ts = 0; // EjsS Model.Variables.peroid.ts
  });

  _model.addToReset(function() {
    showAnswerFlag = false; // EjsS Model.Variables.check.showAnswerFlag
    K1fcorrect = ""; // EjsS Model.Variables.check.K1fcorrect
    l_enterK1f = ""; // EjsS Model.Variables.check.l_enterK1f
    K1fcorrectbackground = ""; // EjsS Model.Variables.check.K1fcorrectbackground
    enterK1f = 0; // EjsS Model.Variables.check.enterK1f
    l_answer = ""; // EjsS Model.Variables.check.l_answer
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    selectedview = new Array(1); // EjsS Model.Variables.layout.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview
        selectedview[_i0] = "world";  // EjsS Model.Variables.layout.selectedview
      }
    }());
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    maxy = 1; // EjsS Model.Variables.draw.maxy
    n = 10; // EjsS Model.Variables.draw.n
    n2 = n*10; // EjsS Model.Variables.draw.n2
    c = pi*2/n; // EjsS Model.Variables.draw.c
    cs = new Array(n); // EjsS Model.Variables.draw.cs
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.draw.cs
        cs[_i0] = 0;  // EjsS Model.Variables.draw.cs
      }
    }());
    xline = new Array(n); // EjsS Model.Variables.draw.xline
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.draw.xline
        xline[_i0] = 0.0;  // EjsS Model.Variables.draw.xline
      }
    }());
    yline = new Array(n); // EjsS Model.Variables.draw.yline
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.draw.yline
        yline[_i0] = 0.0;  // EjsS Model.Variables.draw.yline
      }
    }());
    msg = new Array(n); // EjsS Model.Variables.draw.msg
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.draw.msg
        msg[_i0] = "";  // EjsS Model.Variables.draw.msg
      }
    }());
    Rs = xmax*0.75; // EjsS Model.Variables.draw.Rs
    dxs = new Array(n2); // EjsS Model.Variables.draw.dxs
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.draw.dxs
        dxs[_i0] = 0.0;  // EjsS Model.Variables.draw.dxs
      }
    }());
    ds = Rs*0.045; // EjsS Model.Variables.draw.ds
    xline2 = new Array(n); // EjsS Model.Variables.draw.xline2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.draw.xline2
        xline2[_i0] = 0.0;  // EjsS Model.Variables.draw.xline2
      }
    }());
    yline2 = new Array(n); // EjsS Model.Variables.draw.yline2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.draw.yline2
        yline2[_i0] = 0.0;  // EjsS Model.Variables.draw.yline2
      }
    }());
    dys = new Array(n2); // EjsS Model.Variables.draw.dys
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.draw.dys
        dys[_i0] = 0.0;  // EjsS Model.Variables.draw.dys
      }
    }());
    D = (xmax-xmin)*0.9; // EjsS Model.Variables.draw.D
    D2 = D/2; // EjsS Model.Variables.draw.D2
    red = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.draw.red
    green = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.draw.green
    blue = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.draw.blue
    color = new Array(n2); // EjsS Model.Variables.draw.color
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.draw.color
        color[_i0] = "rgba(%red%,%green%,%blue%,255)";  // EjsS Model.Variables.draw.color
      }
    }());
    stroke = new Array(n2); // EjsS Model.Variables.draw.stroke
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.draw.stroke
        stroke[_i0] = 1;  // EjsS Model.Variables.draw.stroke
      }
    }());
  });

  _model.addToReset(function() {
    xdrag = x; // EjsS Model.Variables.dragable.xdrag
    ydrag = y; // EjsS Model.Variables.dragable.ydrag
    thetadrag = theta; // EjsS Model.Variables.dragable.thetadrag
    xdragtop = y; // EjsS Model.Variables.dragable.xdragtop
    ydragtop = x; // EjsS Model.Variables.dragable.ydragtop
    thetadragtop = theta; // EjsS Model.Variables.dragable.thetadragtop
    xodragtop = y; // EjsS Model.Variables.dragable.xodragtop
    yodragtop = x; // EjsS Model.Variables.dragable.yodragtop
    thetaodragtop = theta; // EjsS Model.Variables.dragable.thetaodragtop
  });

  _model.addToReset(function() {
    counter = 0; // EjsS Model.Variables.functionY.counter
    selectedmodel = new Array(1); // EjsS Model.Variables.functionY.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.functionY.selectedmodel
        selectedmodel[_i0] = "0";  // EjsS Model.Variables.functionY.selectedmodel
      }
    }());
    functionY = selectedmodel+""; // EjsS Model.Variables.functionY.functionY
    functionY2 = selectedmodel+""; // EjsS Model.Variables.functionY.functionY2
    showmodel = false; // EjsS Model.Variables.functionY.showmodel
  });

  _model.addToReset(function() {
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function rgb(r, g, b){  // > CustomCode.Lib Page:1
    return "rgb("+r+","+g+","+b+")";  // > CustomCode.Lib Page:2
  }  // > CustomCode.Lib Page:3

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.Lib Page 2:1
  // does not work for iOS   // > CustomCode.Lib Page 2:2
  /*jslint browser:true */  // > CustomCode.Lib Page 2:3
  function toggleFullScreen() {  // > CustomCode.Lib Page 2:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.Lib Page 2:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.Lib Page 2:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.Lib Page 2:7
        document.documentElement.requestFullscreen();  // > CustomCode.Lib Page 2:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.Lib Page 2:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.Lib Page 2:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.Lib Page 2:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.Lib Page 2:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.Lib Page 2:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.Lib Page 2:14
      }  // > CustomCode.Lib Page 2:15
    } else {  // > CustomCode.Lib Page 2:16
      if (document.exitFullscreen) {  // > CustomCode.Lib Page 2:17
        document.exitFullscreen();  // > CustomCode.Lib Page 2:18
      } else if (document.msExitFullscreen) {  // > CustomCode.Lib Page 2:19
        document.msExitFullscreen();  // > CustomCode.Lib Page 2:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.Lib Page 2:21
        document.mozCancelFullScreen();  // > CustomCode.Lib Page 2:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.Lib Page 2:23
        document.webkitExitFullscreen();  // > CustomCode.Lib Page 2:24
      }  // > CustomCode.Lib Page 2:25
    }  // > CustomCode.Lib Page 2:26
  }  // > CustomCode.Lib Page 2:27

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  function changeOrientation() {  // > CustomCode.changeOrientation:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.changeOrientation:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.changeOrientation:3
  //else  // > CustomCode.changeOrientation:4
  //  _view.mytext.setText("nada:");  // > CustomCode.changeOrientation:5
  // check platform for Apps  // > CustomCode.changeOrientation:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.changeOrientation:14
  switch (window.orientation) {  // > CustomCode.changeOrientation:15
    case 0:  // > CustomCode.changeOrientation:16
    case 180:  // > CustomCode.changeOrientation:17
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:18
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:20
        return window.screen.height*0.9;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:21
        // return window.screen.height;  // > CustomCode.changeOrientation:22
        //  return window.innerHeight;  // > CustomCode.changeOrientation:23
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:24
      }  // > CustomCode.changeOrientation:25
        // > CustomCode.changeOrientation:26
      else {  // > CustomCode.changeOrientation:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*0.9;  // > CustomCode.changeOrientation:29
      }  // > CustomCode.changeOrientation:30
      break;  // > CustomCode.changeOrientation:31
    case 90:  // > CustomCode.changeOrientation:32
    case -90:  // > CustomCode.changeOrientation:33
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:34
      if (iOSapp){ // App  // > CustomCode.changeOrientation:35
        return window.screen.width*0.9;    // > CustomCode.changeOrientation:36
        // return window.screen.height;  // > CustomCode.changeOrientation:37
        //  return window.innerHeight;  // > CustomCode.changeOrientation:38
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:39
      }  // > CustomCode.changeOrientation:40
        // > CustomCode.changeOrientation:41
      else { // browser Android and PC  // > CustomCode.changeOrientation:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:43
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:44
        return window.innerHeight*0.9;  // > CustomCode.changeOrientation:45
      }  // > CustomCode.changeOrientation:46
      break;  // > CustomCode.changeOrientation:47
    default:  // > CustomCode.changeOrientation:48
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:50
      return window.innerHeight*0.9;  // > CustomCode.changeOrientation:51
  }  // > CustomCode.changeOrientation:52
  }  // > CustomCode.changeOrientation:53

  function OnOrientationChange() {  // > CustomCode.OnOrientationChange:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.OnOrientationChange:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.OnOrientationChange:3
  //else  // > CustomCode.OnOrientationChange:4
  //  _view.mytext.setText("nada:");  // > CustomCode.OnOrientationChange:5
  // check platform for Apps  // > CustomCode.OnOrientationChange:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.OnOrientationChange:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.OnOrientationChange:8
  // check platform for web browsers  // > CustomCode.OnOrientationChange:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.OnOrientationChange:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.OnOrientationChange:14
  switch (window.orientation) {  // > CustomCode.OnOrientationChange:15
    case 0:  // > CustomCode.OnOrientationChange:16
    case 180:  // > CustomCode.OnOrientationChange:17
      this.screenOrientation = 'portrait';  // > CustomCode.OnOrientationChange:18
    //  if (iOSapp){ // does not seems to work  // > CustomCode.OnOrientationChange:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.OnOrientationChange:20
     //   return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.OnOrientationChange:21
        // return window.screen.height;  // > CustomCode.OnOrientationChange:22
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:23
        // return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:24
     // }  // > CustomCode.OnOrientationChange:25
        // > CustomCode.OnOrientationChange:26
     // else {  // > CustomCode.OnOrientationChange:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:28
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:29
     // }  // > CustomCode.OnOrientationChange:30
      break;  // > CustomCode.OnOrientationChange:31
    case 90:  // > CustomCode.OnOrientationChange:32
    case -90:  // > CustomCode.OnOrientationChange:33
      this.screenOrientation = 'landscape';  // > CustomCode.OnOrientationChange:34
     // if (iOSapp){ // App  // > CustomCode.OnOrientationChange:35
     //   return window.screen.width*0.7;    // > CustomCode.OnOrientationChange:36
        // return window.screen.height;  // > CustomCode.OnOrientationChange:37
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:38
        //  return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:39
     // }  // > CustomCode.OnOrientationChange:40
        // > CustomCode.OnOrientationChange:41
    //  else { // browser Android and PC  // > CustomCode.OnOrientationChange:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:43
        // alert("browser Android and PC");  // > CustomCode.OnOrientationChange:44
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:45
    //  }  // > CustomCode.OnOrientationChange:46
      break;  // > CustomCode.OnOrientationChange:47
    default:  // > CustomCode.OnOrientationChange:48
      this.screenOrientation = 'unknown';  // > CustomCode.OnOrientationChange:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.OnOrientationChange:50
      return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:51
  }  // > CustomCode.OnOrientationChange:52
  }  // > CustomCode.OnOrientationChange:53

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (answershow==undefined){  // > Initialization.undefined:1
    answershow = false;  // > Initialization.undefined:2
      }   // > Initialization.undefined:3
      if (Width1==undefined){  // > Initialization.undefined:4
    Width1 = "100%";  // > Initialization.undefined:5
      }  // > Initialization.undefined:6
      if (Width2==undefined){  // > Initialization.undefined:7
    Width2 = "0%";  // > Initialization.undefined:8
      }  // > Initialization.undefined:9
      //appleshow  // > Initialization.undefined:10
     if (appleshow==undefined){  // > Initialization.undefined:11
    appleshow = false;  // > Initialization.undefined:12
      }  // > Initialization.undefined:13
      if (pineappleshow==undefined){  // > Initialization.undefined:14
    pineappleshow = false;  // > Initialization.undefined:15
      }  // > Initialization.undefined:16
      //coinshow  // > Initialization.undefined:17
      if (coinshow==undefined){  // > Initialization.undefined:18
    coinshow = false;  // > Initialization.undefined:19
      }  // > Initialization.undefined:20
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["draw"]) return;
    scaletype =1; //set scale  // > Initialization.draw:1
    // if (selected[0]==undefined){ //strange need this to render correctly  // > Initialization.draw:2
      //   selected[0]="1.00 kg";  // > Initialization.draw:3
          // > Initialization.draw:4
       //  }  // > Initialization.draw:5
    // alert(selected[0]);     // > Initialization.draw:6
          // > Initialization.draw:7
    //if ( selected[0]=="1.00 kg"){  // > Initialization.draw:8
    n =10;  // > Initialization.draw:9
    n2 =n*10  // > Initialization.draw:10
    var c=Math.PI*2/n;  // > Initialization.draw:11
    var j;  // > Initialization.draw:12
    for(var i=0;i<n;i++){  // > Initialization.draw:13
      j=i+1;  // > Initialization.draw:14
      cs[i]=-c*j;  // > Initialization.draw:15
      xline[i]=Rs*0.7*Math.sin(c*j);  // > Initialization.draw:16
      yline[i]=Rs*0.7*Math.cos(c*j);  // > Initialization.draw:17
      if (j ===n){  // > Initialization.draw:18
        msg[i]="0";  // > Initialization.draw:19
        }  // > Initialization.draw:20
        else {  // > Initialization.draw:21
          msg[i]=j+"00";  // > Initialization.draw:22
              }  // > Initialization.draw:23
    }  // > Initialization.draw:24
    var c2=Math.PI*2/n2;  // > Initialization.draw:25
    // draw lines ticks on the clock  // > Initialization.draw:26
    var ci;  // > Initialization.draw:27
    for(var i=0;i<n2;i++){  // > Initialization.draw:28
     ci=c2*i;  // > Initialization.draw:29
     xline2[i]=L*Math.sin(ci);  // > Initialization.draw:30
     yline2[i]=L*Math.cos(ci);  // > Initialization.draw:31
     dxs[i]=-ds*Math.sin(ci);  // > Initialization.draw:32
     dys[i]=-ds*Math.cos(ci);  // > Initialization.draw:33
     color[i]= rgb(0,0,0);  // > Initialization.draw:34
     stroke[i]=2;  // > Initialization.draw:35
     if(i%5===0){  // > Initialization.draw:36
      dxs[i]=2*dxs[i];  // > Initialization.draw:37
      dys[i]=2*dys[i];  // > Initialization.draw:38
      color[i]= rgb(255,0,0);  // > Initialization.draw:39
      stroke[i]=2;  // > Initialization.draw:40
     }  // > Initialization.draw:41
     if(i%10===0){  // > Initialization.draw:42
      dxs[i]=2.2*dxs[i];  // > Initialization.draw:43
      dys[i]=2.2*dys[i];  // > Initialization.draw:44
      color[i]= rgb(255,0,255);  // > Initialization.draw:45
      stroke[i]=3;  // > Initialization.draw:46
     }  // > Initialization.draw:47
    }  // > Initialization.draw:48
    //}  // > Initialization.draw:49
    /*  // > Initialization.draw:50
    else if ( _view.comboBox.getProperty("SelectedOptions")=="4.00 kg"){  // > Initialization.draw:51
    n =4;  // > Initialization.draw:52
    n2 =n*20; //change to 20 for finer spaced lines  // > Initialization.draw:53
    var c=Math.PI*2/n;  // > Initialization.draw:54
    var j;  // > Initialization.draw:55
    for(var i=0;i<n;i++){  // > Initialization.draw:56
      j=i+1;  // > Initialization.draw:57
      cs[i]=-c*j;  // > Initialization.draw:58
      xline[i]=Rs*0.7*Math.sin(c*j);  // > Initialization.draw:59
      yline[i]=Rs*0.7*Math.cos(c*j);  // > Initialization.draw:60
      if (j ===n){  // > Initialization.draw:61
        msg[i]="4.00 kg";  // > Initialization.draw:62
        }  // > Initialization.draw:63
        else {  // > Initialization.draw:64
          msg[i]=j+".00 kg";  // > Initialization.draw:65
              }  // > Initialization.draw:66
    }  // > Initialization.draw:67
    var c2=Math.PI*2/n2;  // > Initialization.draw:68
    // draw lines ticks on the clock  // > Initialization.draw:69
    var ci;  // > Initialization.draw:70
    for(var i=0;i<n2;i++){  // > Initialization.draw:71
     ci=c2*i;  // > Initialization.draw:72
     xline2[i]=L*Math.sin(ci);  // > Initialization.draw:73
     yline2[i]=L*Math.cos(ci);  // > Initialization.draw:74
     dxs[i]=-ds*Math.sin(ci);  // > Initialization.draw:75
     dys[i]=-ds*Math.cos(ci);  // > Initialization.draw:76
     color[i]= rgb(0,0,0);  // > Initialization.draw:77
     stroke[i]=2;  // > Initialization.draw:78
     if(i%2===0){  // > Initialization.draw:79
      dxs[i]=2*dxs[i];  // > Initialization.draw:80
      dys[i]=2*dys[i];  // > Initialization.draw:81
      color[i]= rgb(0,0,0);  // > Initialization.draw:82
      stroke[i]=2;  // > Initialization.draw:83
     }  // > Initialization.draw:84
     if(i%10===0){  // > Initialization.draw:85
      dxs[i]=1.5*dxs[i];  // > Initialization.draw:86
      dys[i]=1.5*dys[i];  // > Initialization.draw:87
      color[i]= rgb(255,0,0);  // > Initialization.draw:88
      stroke[i]=3;  // > Initialization.draw:89
     }  // > Initialization.draw:90
     if(i%20===0){  // > Initialization.draw:91
      dxs[i]=1.2*dxs[i];  // > Initialization.draw:92
      dys[i]=1.2*dys[i];  // > Initialization.draw:93
      color[i]= rgb(255,0,0);  // > Initialization.draw:94
      stroke[i]=4;  // > Initialization.draw:95
     }  // > Initialization.draw:96
    }  // > Initialization.draw:97
    }  // > Initialization.draw:98
    */  // > Initialization.draw:99
    /*  // > Initialization.draw:100
    if (_view.comboBox.getProperty("SelectedOptions")=="5.0 kg"){  // > Initialization.draw:101
      n =5;  // > Initialization.draw:102
    n2 =n*10; //change to 20 for finer spaced lines  // > Initialization.draw:103
    var c=Math.PI*2/n;  // > Initialization.draw:104
    var j;  // > Initialization.draw:105
    for(var i=0;i<n;i++){  // > Initialization.draw:106
      j=i+1;  // > Initialization.draw:107
      cs[i]=-c*j;  // > Initialization.draw:108
      xline[i]=Rs*0.7*Math.sin(c*j);  // > Initialization.draw:109
      yline[i]=Rs*0.7*Math.cos(c*j);  // > Initialization.draw:110
      if (j ===n){  // > Initialization.draw:111
        msg[i]="0.0 kg";  // > Initialization.draw:112
        }  // > Initialization.draw:113
        else {  // > Initialization.draw:114
          msg[i]=j+".0 kg";  // > Initialization.draw:115
              }  // > Initialization.draw:116
    }  // > Initialization.draw:117
    var c2=Math.PI*2/n2;  // > Initialization.draw:118
    // draw lines ticks on the clock  // > Initialization.draw:119
    var ci;  // > Initialization.draw:120
    for(var i=0;i<n2;i++){  // > Initialization.draw:121
     ci=c2*i;  // > Initialization.draw:122
     xline2[i]=L*Math.sin(ci);  // > Initialization.draw:123
     yline2[i]=L*Math.cos(ci);  // > Initialization.draw:124
     dxs[i]=-ds*Math.sin(ci);  // > Initialization.draw:125
     dys[i]=-ds*Math.cos(ci);  // > Initialization.draw:126
     color[i]= rgb(0,0,0);  // > Initialization.draw:127
     stroke[i]=2;  // > Initialization.draw:128
     if(i%5===0){  // > Initialization.draw:129
      dxs[i]=2*dxs[i];  // > Initialization.draw:130
      dys[i]=2*dys[i];  // > Initialization.draw:131
      color[i]= rgb(255,0,0);  // > Initialization.draw:132
      stroke[i]=2;  // > Initialization.draw:133
     }  // > Initialization.draw:134
     if(i%10===0){  // > Initialization.draw:135
      dxs[i]=1.5*dxs[i];  // > Initialization.draw:136
      dys[i]=1.5*dys[i];  // > Initialization.draw:137
      color[i]= rgb(255,0,0);  // > Initialization.draw:138
      stroke[i]=3;  // > Initialization.draw:139
     }  // > Initialization.draw:140
     if(i%20===0){  // > Initialization.draw:141
      dxs[i]=1.2*dxs[i];  // > Initialization.draw:142
      dys[i]=1.2*dys[i];  // > Initialization.draw:143
      color[i]= rgb(255,0,0);  // > Initialization.draw:144
      stroke[i]=4;  // > Initialization.draw:145
     }  // > Initialization.draw:146
    }  // > Initialization.draw:147
    }  // > Initialization.draw:148
    */  // > Initialization.draw:149
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svgradial"]) return;
    var container = document.createElement('div');  // > Initialization.svgradial:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svgradial:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svgradial:3
      '    <stop offset="10%" style="stop-color:rgb(255,255,255); stop-opacity:1" />'+  // > Initialization.svgradial:4
      '    <stop offset="100%" style="stop-color:rgb(0,255,255);stop-opacity:1" />'+  // > Initialization.svgradial:5
      '  </radialGradient>'+  // > Initialization.svgradial:6
      '</defs></svg>';  // > Initialization.svgradial:7
    container.innerHTML = svggradient;  // > Initialization.svgradial:8
    document.body.appendChild(container);  // > Initialization.svgradial:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanelxvst.getAxisX().setPosition([0,0.045]);  // > Initialization.axes:1
    _view.plottingPanelxvst.getTitleX().setPosition([0.95,0.045]);  // > Initialization.axes:2
    _view.plottingPanelxvst.getAxisY().setPosition([0.045,0]);  // > Initialization.axes:3
    _view.plottingPanelxvst.getTitleY().setPosition([0.075,0.9]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["zoom"]) return;
    _view.plottingPanel.setZoomLimits([0.7,8]);  // > Initialization.zoom:1
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    x= L*Math.cos(theta);  // > FixedRelations.FixRel Page:1
    y = L*Math.sin(theta);  // > FixedRelations.FixRel Page:2
    //xdragtop = x/0.72*Math.sin(theta); // sync dragable to actual  // > FixedRelations.FixRel Page:3
    //ydragtop = y/0.72*Math.sin(theta);  // > FixedRelations.FixRel Page:4
    thetadegrees = theta*180/pi;  // > FixedRelations.FixRel Page:5
    vx = -omega*L*Math.sin(theta);  // > FixedRelations.FixRel Page:6
    vy = omega*L*Math.cos(theta);  // > FixedRelations.FixRel Page:7
    v = Math.sqrt(vx*vx+vy*vy);  // > FixedRelations.FixRel Page:8
    xo= L*Math.cos(thetao);  // > FixedRelations.FixRel Page:9
    yo = L*Math.sin(thetao);  // > FixedRelations.FixRel Page:10
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["angletomass"]) return;
    //if ( _view.comboBox.getProperty("SelectedOptions")=="1.00 kg"){  // > FixedRelations.angletomass:1
    if ( scaletype==1){  // > FixedRelations.angletomass:2
      maxy=1;  // > FixedRelations.angletomass:3
    }  // > FixedRelations.angletomass:4
    //else if ( _view.comboBox.getProperty("SelectedOptions")=="4.00 kg"){  // > FixedRelations.angletomass:5
    else if ( scaletype==4){  // > FixedRelations.angletomass:6
      maxy=4;  // > FixedRelations.angletomass:7
    }  // > FixedRelations.angletomass:8
    //else if ( _view.comboBox.getProperty("SelectedOptions")=="5.0 kg"){  // > FixedRelations.angletomass:9
    else if ( scaletype==5){  // > FixedRelations.angletomass:10
      maxy=5;  // > FixedRelations.angletomass:11
    }  // > FixedRelations.angletomass:12
    massscale = -(theta)*maxy/(2*pi);  // > FixedRelations.angletomass:13
    massscaleo=maxy/(2*pi)*((2*pi)-thetao);  // > FixedRelations.angletomass:14
    //if (massscale <0){  // > FixedRelations.angletomass:15
     // massscale = maxy+massscale;  // > FixedRelations.angletomass:16
     // massscaleo=massscale; // sync store with actual for input checking  // > FixedRelations.angletomass:17
     // }  // > FixedRelations.angletomass:18
    //massscale=maxy/(2*pi)*((2*pi)-theta);  // > FixedRelations.angletomass:19
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["getcorrectl_answer"]) return;
    //if ( _view.comboBox.getProperty("SelectedOptions")=="1.00 kg"||_view.comboBox.getProperty("SelectedOptions")=="4.00 kg"){  // > FixedRelations.getcorrectl_answer:1
    if ( (scaletype==1||scaletype==4)&&!gramshow){  // > FixedRelations.getcorrectl_answer:2
    l_answer=_view._format(massscaleo,"0.00")+"";  // > FixedRelations.getcorrectl_answer:3
       // > FixedRelations.getcorrectl_answer:4
    }  // > FixedRelations.getcorrectl_answer:5
    // else if ( _view.comboBox.getProperty("SelectedOptions")=="5.0 kg"){  // > FixedRelations.getcorrectl_answer:6
      else if (( scaletype==5)&&!gramshow){  // > FixedRelations.getcorrectl_answer:7
    l_answer=_view._format(massscaleo,"0.0")+"";  // > FixedRelations.getcorrectl_answer:8
    }  // > FixedRelations.getcorrectl_answer:9
    else if ( (scaletype==1||scaletype==4)&&gramshow){  // > FixedRelations.getcorrectl_answer:10
    l_answer=_view._format(massscaleo*1000,"0")+"";  // > FixedRelations.getcorrectl_answer:11
    }  // > FixedRelations.getcorrectl_answer:12
    // else if ( _view.comboBox.getProperty("SelectedOptions")=="5.0 kg"){  // > FixedRelations.getcorrectl_answer:13
      else if (( scaletype==5)&&gramshow){  // > FixedRelations.getcorrectl_answer:14
    l_answer=_view._format(massscaleo*1000,"0")+"";  // > FixedRelations.getcorrectl_answer:15
    }  // > FixedRelations.getcorrectl_answer:16
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["check"]) return;
    var gramerror = 100;  // > FixedRelations.check:1
    var kiloerror = 0.1;  // > FixedRelations.check:2
    if (showAnswerFlag==false)  // > FixedRelations.check:3
    {   // > FixedRelations.check:4
    K1fcorrect = "";  // > FixedRelations.check:5
    }  // > FixedRelations.check:6
    else if (counter>0) // added to make show dislog box once  // > FixedRelations.check:7
    {  // > FixedRelations.check:8
    //l_enterK1f===_view._format(l_answer,"0.0"))  // > FixedRelations.check:9
      //  if(Math.abs(massscaleo-functionY)<0.005){  // > FixedRelations.check:10
        if((l_answer==functionY)&&(scaletype==1||scaletype==4)&&!gramshow){  // > FixedRelations.check:11
    K1fcorrect = "Great! You have \nthe right answer!";  // > FixedRelations.check:12
    K1fcorrectbackground = "rgba(0,255,0,255)";  // > FixedRelations.check:13
    EJSS_INTERFACE.BoxPanel.showOkDialog("Great!<br/>You have the right answer!");  // > FixedRelations.check:14
       // > FixedRelations.check:15
    }  // > FixedRelations.check:16
    else if((l_answer==functionY)&&(scaletype==5)&&!gramshow){  // > FixedRelations.check:17
    K1fcorrect = "Great! You have \nthe right answer!";  // > FixedRelations.check:18
    K1fcorrectbackground = "rgba(0,255,0,255)";  // > FixedRelations.check:19
    EJSS_INTERFACE.BoxPanel.showOkDialog(K1fcorrect);  // > FixedRelations.check:20
       // > FixedRelations.check:21
    }  // > FixedRelations.check:22
    else if((l_answer==functionY)&&(scaletype==1||scaletype==4)&&gramshow){  // > FixedRelations.check:23
    K1fcorrect = "Great! You have \nthe right gram answer!";  // > FixedRelations.check:24
    K1fcorrectbackground = "rgba(0,255,0,255)";  // > FixedRelations.check:25
     EJSS_INTERFACE.BoxPanel.showOkDialog("Great!<br/>You have the right gram answer!");  // > FixedRelations.check:26
     alert();  // > FixedRelations.check:27
    }  // > FixedRelations.check:28
    else if((l_answer==functionY)&&(scaletype==5)&&gramshow){  // > FixedRelations.check:29
    K1fcorrect = "Great! You have \nthe right answer!";  // > FixedRelations.check:30
    K1fcorrectbackground = "rgba(0,255,0,255)";  // > FixedRelations.check:31
    EJSS_INTERFACE.BoxPanel.showOkDialog(K1fcorrect);  // > FixedRelations.check:32
       // > FixedRelations.check:33
    }  // > FixedRelations.check:34
     else if((Math.abs(l_answer-functionY)<1.e-7&&!gramshow)){// same value but different digits or incorrect format  // > FixedRelations.check:35
    K1fcorrect = " Check the number \nof digits ";  // > FixedRelations.check:36
    K1fcorrectbackground = "rgba(255,200,0,255)";  // > FixedRelations.check:37
     EJSS_INTERFACE.BoxPanel.showOkDialog(K1fcorrect); // doesnt seems to work now 20170823  // > FixedRelations.check:38
       // > FixedRelations.check:39
     }  // > FixedRelations.check:40
       // > FixedRelations.check:41
     else if (Math.abs(l_answer-functionY)>0.01&&!gramshow){ //assume 0.01 kg difference maximum  // > FixedRelations.check:42
    K1fcorrect = " Incorrect,\nyour input is \nout by " + _view._format((massscaleo-functionY),"0.00") ;  // > FixedRelations.check:43
    K1fcorrectbackground = "rgba(255,0,0,255)";  // > FixedRelations.check:44
    EJSS_INTERFACE.BoxPanel.showOkDialog(K1fcorrect);  // > FixedRelations.check:45
    }  // > FixedRelations.check:46
     else if (Math.abs(l_answer-functionY)>10&&gramshow){ //assume 10 grams difference maximum  // > FixedRelations.check:47
    K1fcorrect = " Incorrect,\nyour input is \nout by " + _view._format((massscaleo*1000-functionY),"0") ;  // > FixedRelations.check:48
    K1fcorrectbackground = "rgba(255,0,0,255)";  // > FixedRelations.check:49
    EJSS_INTERFACE.BoxPanel.showOkDialog(K1fcorrect);  // > FixedRelations.check:50
    //alert(functionY);  // > FixedRelations.check:51
    //alert(massscaleo);  // > FixedRelations.check:52
     }  // > FixedRelations.check:53
       // > FixedRelations.check:54
    if(parent.cordova&&counter>0) { // check it is running in Android  // > FixedRelations.check:55
           parent.TTS.speak(K1fcorrect, function () {  // > FixedRelations.check:56
                // success  // > FixedRelations.check:57
            }, function (reason) {  // > FixedRelations.check:58
                // error  // > FixedRelations.check:59
            });  // > FixedRelations.check:60
        }  // > FixedRelations.check:61
        else if (counter>0){  // > FixedRelations.check:62
      var msg2 = new SpeechSynthesisUtterance(K1fcorrect);  // > FixedRelations.check:63
    window.speechSynthesis.speak(msg2);  // > FixedRelations.check:64
    }  // > FixedRelations.check:65
    counter =0; // make speak once  // > FixedRelations.check:66
    }  // > FixedRelations.check:67
       // > FixedRelations.check:68
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["theta","omega","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=theta) __mustReinitialize = true;
        __state[__cIn++] = theta;
        if (__state[__cIn]!=omega) __mustReinitialize = true;
        __state[__cIn++] = omega;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = omega; // Rate for ODE: Evol Page:theta
        _aRate[__cRate++] = -k*((theta)-(thetao))/m-b*(omega)/m; // Rate for ODE: Evol Page:omega
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = theta;
        __state[__cIn++] = omega;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var t = _aState[__cOut++];
        //return (theta -thetao)-0.0001;  // > Event zero-condition for page Evol Page:1
        return (theta -thetao); // debugging what sometime 4 n 5 kg random is weird  // > Event zero-condition for page Evol Page:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = theta;
        __state[__cIn++] = omega;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        disabled=true;  // > Event action for page Evol Page:2
        text = "paused, select your answer \n from the dropdown menu";  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_theta(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_omega(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new SHMmassscale_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.comboBox.linkProperty("Options",  function() { return ["random","$1 coin","apple","pineapple","","scale type⚖","1.00 kg","4.00 kg","5.0 kg","","hint","hint off"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  // text 1 to 12 on the clock
  if ( option=="1.00 kg"){
    scaletype=1;
     massscaleo = Math.round(Math.random()*10)*0.5 ;//random the reading
   thetao = 2*pi-massscaleo/5*(2*pi) ; // real mass angle set to random
   _play(); // to activate to move to actual mass
   
    decimal = 2;
    showAnswerFlag=false;
  n =10;
  n2 =n*10
  var c=Math.PI*2/n;
  var j;
  for(var i=0;i<n;i++){
    j=i+1;
    cs[i]=-c*j;
    xline[i]=Rs*0.7*Math.sin(c*j);
    yline[i]=Rs*0.7*Math.cos(c*j);
    if (j ===n){
      msg[i]="0";
      }
      else {
        msg[i]=j+"00";
            }
  }
  var c2=Math.PI*2/n2;
  // draw lines ticks on the clock
  var ci;
  for(var i=0;i<n2;i++){
   ci=c2*i;
   xline2[i]=L*Math.sin(ci);
   yline2[i]=L*Math.cos(ci);
   dxs[i]=-ds*Math.sin(ci);
   dys[i]=-ds*Math.cos(ci);
   color[i]= rgb(0,0,0);
   stroke[i]=2;
   if(i%5===0){
    dxs[i]=2*dxs[i];
    dys[i]=2*dys[i];
    color[i]= rgb(255,0,0);
    stroke[i]=2;
   }
   if(i%10===0){
    dxs[i]=2.2*dxs[i];
    dys[i]=2.2*dys[i];
    color[i]= rgb(255,0,0);
    stroke[i]=4;
   }
  }
  }
   if ( option=="4.00 kg"){
    scaletype=4;
     massscaleo = Math.round(Math.random()*10)/2 ;//random the reading 0.0 to 4.0
    //alert(massscaleo);
  thetao = 2*pi-massscaleo/5*(2*pi) ; // real mass angle set to random
   _play(); // to activate to move to actual mass
   
    showAnswerFlag=false;
    decimal = 2;
  n =4;
  n2 =n*20; //change to 20 for finer spaced lines
  var c=Math.PI*2/n;
  var j;
  for(var i=0;i<n;i++){
    j=i+1;
    cs[i]=-c*j;
    xline[i]=Rs*0.7*Math.sin(c*j);
    yline[i]=Rs*0.7*Math.cos(c*j);
    if (j ===n){
      msg[i]="4.00 kg";
      }
      else {
        msg[i]=j+".00 kg";
            }
  }
  var c2=Math.PI*2/n2;
  // draw lines ticks on the clock
  var ci;
  for(var i=0;i<n2;i++){
   ci=c2*i;
   xline2[i]=L*Math.sin(ci);
   yline2[i]=L*Math.cos(ci);
   dxs[i]=-ds*Math.sin(ci);
   dys[i]=-ds*Math.cos(ci);
   color[i]= rgb(0,0,0);
   stroke[i]=2;
   if(i%2===0){
    dxs[i]=2*dxs[i];
    dys[i]=2*dys[i];
    color[i]= rgb(0,0,0);
    stroke[i]=2;
   }
   if(i%10===0){
    dxs[i]=1.5*dxs[i];
    dys[i]=1.5*dys[i];
    color[i]= rgb(255,0,0);
    stroke[i]=3;
   }
   if(i%20===0){
    dxs[i]=1.2*dxs[i];
    dys[i]=1.2*dys[i];
    color[i]= rgb(255,0,0);
    stroke[i]=4;
   }
  }
  }
   if ( option=="5.0 kg"){
    scaletype=5;
    massscaleo = Math.round(Math.random()*50)/10 ;//random the reading
   thetao = 2*pi-massscaleo/5*(2*pi) ; // real mass angle set to random
   _play(); // to activate to move to actual mass
   showAnswerFlag=false;
    decimal = 1;
    n =5;
  n2 =n*10; //change to 20 for finer spaced lines
  var c=Math.PI*2/n;
  var j;
  for(var i=0;i<n;i++){
    j=i+1;
    cs[i]=-c*j;
    xline[i]=Rs*0.7*Math.sin(c*j);
    yline[i]=Rs*0.7*Math.cos(c*j);
    if (j ===n){
      msg[i]="0.0 kg";
      }
      else {
        msg[i]=j+".0 kg";
            }
  }
  var c2=Math.PI*2/n2;
  // draw lines ticks on the clock
  var ci;
  for(var i=0;i<n2;i++){
   ci=c2*i;
   xline2[i]=L*Math.sin(ci);
   yline2[i]=L*Math.cos(ci);
   dxs[i]=-ds*Math.sin(ci);
   dys[i]=-ds*Math.cos(ci);
   color[i]= rgb(0,0,0);
   stroke[i]=2;
   if(i%5===0){
    dxs[i]=2*dxs[i];
    dys[i]=2*dys[i];
    color[i]= rgb(255,0,0);
    stroke[i]=2;
   }
   if(i%10===0){
    dxs[i]=1.5*dxs[i];
    dys[i]=1.5*dys[i];
    color[i]= rgb(255,0,0);
    stroke[i]=3;
   }
   if(i%20===0){
    dxs[i]=1.2*dxs[i];
    dys[i]=1.2*dys[i];
    color[i]= rgb(255,0,0);
    stroke[i]=4;
   }
  }
  }
   if (option =="hint"){
    answershow=true;
    }
    else if (option =="hint off"){
    answershow=false;
    }
   
   
    if (option =="apple"){
    appleshow=true;
     ymin=-1;
    ymax=1.75;
  _view.plottingPanel.setProperty("MaximumY",1.7);
  _view.plottingPanel.setProperty("MinimumY",-1);
    pineappleshow=false;
    coinshow=false;
   // theta =2*pi-massscaleo/5*(2*pi);
   // thetao =2*pi-massscaleo/5*(2*pi);
   if (scaletype==1){
     theta =5.65486677646128;
    thetao =5.65486677646128;
    }
    else if (scaletype==4){
     theta =6.1225;
    thetao =6.1225;
    }
    else if (scaletype==5){
     theta =6.154;
    thetao =6.154;
    }
    }
    
    //pineapple
    if (option =="pineapple"){
    
    appleshow=false;
    ymin=-1;
    ymax=2.5;
    _view.plottingPanel.setProperty("MaximumY",3);
  _view.plottingPanel.setProperty("MinimumY",-1);
    pineappleshow=true;
    coinshow=false;
   // theta =2*pi-massscaleo/5*(2*pi);
   // thetao =2*pi-massscaleo/5*(2*pi);
   if (scaletype==1){
     theta =0.63;
    thetao =0.63;
    }
    else if (scaletype==4){
     theta =4.8675;
    thetao =4.8675;
    }
    else if (scaletype==5){
     theta =5.15;
    thetao =5.15;
    }
   
    }
    //$1 coin 16.85g = 0.02
    
    if (option =="$1 coin"){
    
    appleshow=false;
    pineappleshow=false;
    coinshow=true;
     ymin=-1;
    ymax=1.5;
    _view.plottingPanel.setProperty("MaximumY",1.5);
  _view.plottingPanel.setProperty("MinimumY",-1);
   // theta =2*pi-massscaleo/5*(2*pi);
   // thetao =2*pi-massscaleo/5*(2*pi);
   if (scaletype==1){
     theta =6.154;
    thetao =6.154;
    }
    else if (scaletype==4){
     theta =6.2485;
    thetao =6.2485;
    }
    else if (scaletype==5){
     theta =6.2548;
    thetao =6.2548;
    }
    }
    else if (option =="random"){
      appleshow=false;
    pineappleshow=false;
    coinshow=false;
    _reset();
      }
    
     //handle dual cases
     //insert to make apple correct reading
  if (scaletype==1&&appleshow==true){
     theta =5.65486677646128; //need the fine numbers 
    thetao =5.65486677646128;
    }
    else if (scaletype==4&&appleshow==true){
     theta =6.1225;
    thetao =6.1225;
    }
    else if (scaletype==5&&appleshow==true){
     theta =6.154;
    thetao =6.154;
    }
  // end of insert
  //pineapple
  if (scaletype==1&&pineappleshow==true){
       theta =0.63;
    thetao =0.63;
    }
    else if (scaletype==4&&pineappleshow==true){
    theta =4.8675;
    thetao =4.8675;
    }
    else if (scaletype==5&&pineappleshow==true){
      theta =5.15;
    thetao =5.15;
    }
    //coin
  if (scaletype==1&&coinshow==true){
       theta =6.157521601;
    thetao =6.157521601;
    }
    else if (scaletype==4&&coinshow==true){
    theta =6.2485;
    thetao =6.2485;
    }
    else if (scaletype==5&&coinshow==true){
      theta =6.2548;
    thetao =6.2548;
    }
     
     
     
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg2 = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg2);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.answer.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'answer'
          _view.answer.setAction("OnClick", function(_data,_info) {
  if (inputdropmenu==true){
    inputdropmenu=false;
    }
    else if (inputdropmenu==false){
    inputdropmenu=true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'answer'
          _view.answer.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'answer'
          _view.models2gram.linkProperty("Options",  function() { return ["0","20","40","60","80","100","120","140","160","180","200","220","240","260","280","300","320","340","360","380","400","420","440","460","480","500","520","540","560","580","600","620","640","660","680","700","720","740","760","780","800","820","840","860","880","900","920","940","960","980","1000","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models2gram'
          _view.models2gram.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'models2gram'
          _view.models2gram.setAction("OnChange", function(_data,_info) {
  var opts = _view.models2gram.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  showmodel=true;
  showAnswerFlag=true;
  functionY=option+"";
  if (option=="show me"){
  //functionY= _view._format(massscaleo*1000,"0");  
  functionY=l_answer;
  _view.models2gram.setSelectedOptions([l_answer]);
  //alert(_view.models2gram.setSelectedOptions([l_answer]));
  //functionY2= +_view._format(x1part+x2part,"0");  
   //if ( scaletype==1||scaletype==4){
  //functionY=_view._format(massscaleo*1000,"0");
  //}
  //else if ( scaletype==5){
  //functionY=_view._format(massscaleo*1000,"0");
  //}
  //alert("The correct Weighing Scale Reading is "+functionY+ " kg");
  //showAnswerFlag=false;
  }
  counter =1; // make speak once;

}); // HtmlView Page setting action 'OnChange' for element 'models2gram'
          _view.models2gram.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models2gram'
          _view.models2gram.linkProperty("Display",  function() { return (inputdropmenu&&gramshow&&scaletype==1)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models2gram'
          _view.models2.linkProperty("Options",  function() { return ["0.00","0.02","0.04","0.06","0.08","0.10","0.12","0.14","0.16","0.18","0.20","0.22","0.24","0.26","0.28","0.30","0.30","0.32","0.34","0.36","0.38","0.40","0.42","0.44","0.46","0.48","0.50","0.52","0.54","0.56","0.58","0.60","0.60","0.62","0.64","0.66","0.68","0.70","0.72","0.74","0.76","0.78","0.80","0.82","0.84","0.86","0.88","0.90","0.92","0.94","0.96","0.98","1.00","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models2'
          _view.models2.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'models2'
          _view.models2.setAction("OnChange", function(_data,_info) {
  var opts = _view.models2.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  showmodel=true;
  showAnswerFlag=true;
  functionY=option+"";
  if (option=="show me"){
  //functionY= _view._format(massscaleo*1000,"0");  
  functionY=l_answer;
  _view.models2.setSelectedOptions([l_answer]);
  }
  counter =1; // make speak once;

}); // HtmlView Page setting action 'OnChange' for element 'models2'
          _view.models2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models2'
          _view.models2.linkProperty("Display",  function() { return (inputdropmenu&&scaletype==1&&!gramshow)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models2'
          _view.models3scaletype4.linkProperty("Options",  function() { return ["0","50","100","150","200","250","300","350","400","450","500","550","600","650","700","750","800","850","900","950","1000","1050","1100","1150","1200","1250","1300","1350","1400","1450","1500","1550","1600","1650","1700","1750","1800","1850","1900","1950","2000","2050","2100","2150","2200","2250","2300","2350","2400","2450","2500","2550","2600","2650","2700","2750","2800","2850","2900","2950","3000","3050","3100","3150","3200","3250","3300","3350","3400","3450","3500","3550","3600","3650","3700","3750","3800","3850","3900","3950","4000","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models3scaletype4'
          _view.models3scaletype4.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'models3scaletype4'
          _view.models3scaletype4.setAction("OnChange", function(_data,_info) {
  var opts = _view.models3scaletype4.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  showmodel=true;
  showAnswerFlag=true;
  functionY=option+"";
  if (option=="show me"){
  //functionY= _view._format(massscaleo*1000,"0");  
  functionY=l_answer;
  _view.models3scaletype4.setSelectedOptions([l_answer]);
  }
  counter =1; // make speak once;

}); // HtmlView Page setting action 'OnChange' for element 'models3scaletype4'
          _view.models3scaletype4.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models3scaletype4'
          _view.models3scaletype4.linkProperty("Display",  function() { return (inputdropmenu&&gramshow&&scaletype==4)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models3scaletype4'
          _view.models3.linkProperty("Options",  function() { return ["0.00","0.05","0.10","0.15","0.20","0.25","0.30","0.35","0.40","0.45","0.50","0.55","0.60","0.65","0.70","0.75","0.80","0.85","0.90","0.95","1.00","1.05","1.10","1.15","1.20","1.25","1.30","1.35","1.40","1.45","1.50","1.55","1.60","1.65","1.70","1.75","1.80","1.85","1.90","1.95","2.00","2.05","2.10","2.15","2.20","2.25","2.30","2.35","2.40","2.45","2.50","2.55","2.60","2.65","2.70","2.75","2.80","2.85","2.90","2.95","3.00","3.05","3.10","3.15","3.20","3.25","3.30","3.35","3.40","3.45","3.50","3.55","3.60","3.65","3.70","3.75","3.80","3.85","3.90","3.95","4.00","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models3'
          _view.models3.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'models3'
          _view.models3.setAction("OnChange", function(_data,_info) {
  var opts = _view.models3.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  showmodel=true;
  showAnswerFlag=true;
  functionY=option+"";
  if (option=="show me"){
  //functionY= _view._format(massscaleo*1000,"0");  
  functionY=l_answer;
  _view.models3.setSelectedOptions([l_answer]);
  }
  counter =1; // make speak once;

}); // HtmlView Page setting action 'OnChange' for element 'models3'
          _view.models3.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models3'
          _view.models3.linkProperty("Display",  function() { return (inputdropmenu&&scaletype==4&&!gramshow)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models3'
          _view.modelsscaletype5.linkProperty("Options",  function() { return ["0","100","200","300","400","500","600","700","800","900","1000","1100","1200","1300","1400","1500","1600","1700","1800","1900","2000","2100","2200","2300","2400","2500","2600","2700","2800","2900","3000","3100","3200","3300","3400","3500","3600","3700","3800","3900","4000","4100","4200","4300","4400","4500","4600","4700","4800","4900","5000","show me"]; } ); // HtmlView Page linking property 'Options' for element 'modelsscaletype5'
          _view.modelsscaletype5.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'modelsscaletype5'
          _view.modelsscaletype5.setAction("OnChange", function(_data,_info) {
  var opts = _view.modelsscaletype5.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  showmodel=true;
  showAnswerFlag=true;
  functionY=option+"";
  if (option=="show me"){
  //functionY= _view._format(massscaleo*1000,"0");  
  functionY=l_answer;
  _view.modelsscaletype5.setSelectedOptions([l_answer]);
  }
  counter =1; // make speak once;

}); // HtmlView Page setting action 'OnChange' for element 'modelsscaletype5'
          _view.modelsscaletype5.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'modelsscaletype5'
          _view.modelsscaletype5.linkProperty("Display",  function() { return (inputdropmenu&&gramshow&&scaletype==5)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'modelsscaletype5'
          _view.models.linkProperty("Options",  function() { return ["0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0","1.1","1.2","1.3","1.4","1.5","1.6","1.7","1.8","1.9","2.0","2.1","2.2","2.3","2.4","2.5","2.6","2.7","2.8","2.9","3.0","3.1","3.2","3.3","3.4","3.5","3.6","3.7","3.8","3.9","4.0","4.1","4.2","4.3","4.4","4.5","4.6","4.7","4.8","4.9","5.0","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models'
          _view.models.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'models'
          _view.models.setAction("OnChange", function(_data,_info) {
  //var opts = _view.models.getProperty("SelectedOptions");  // array of options
   //   var option = (opts.length > 0)? opts[0]:""; // selected option 
  option = _view.models.getProperty("SelectedOptions");
  showmodel=true;
  showAnswerFlag=true;
  functionY=option+"";
  if (option=="show me"){
  //functionY= _view._format(massscaleo*1000,"0");  
  functionY=l_answer;
  _view.models.setSelectedOptions([l_answer]);
  }
  counter =1; // make speak once;

}); // HtmlView Page setting action 'OnChange' for element 'models'
          _view.models.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models'
          _view.models.linkProperty("Display",  function() { return (inputdropmenu&&scaletype==5&&!gramshow)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models'
          _view.fField.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'fField'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.setAction("OnChange", function(_data,_info) {
  showmodel=true;
  showAnswerFlag=true;
  //xmodel=_view.fField.evaluate({ t : t, x : xmodel }); 
  //checkanswer();
  counter =1; // make speak once;

}); // HtmlView Page setting action 'OnChange' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.fField.linkProperty("Display",  function() { return !inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'fField'
          _view.g.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'g'
          _view.g.linkProperty("Visibility",  function() { return gramshow; }, function(_v) { gramshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'g'
          _view.g.setAction("OnClick", function(_data,_info) {
  //var opts = _view.models2gram.getProperty("SelectedOptions");  // array of options
  //    var option = (opts.length > 0)? opts[0]:""; // selected option 
  gramshow=false;
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak("kilograms", function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg2 = new SpeechSynthesisUtterance("kilograms");
  window.speechSynthesis.speak(msg2);
  }

}); // HtmlView Page setting action 'OnClick' for element 'g'
          _view.g.linkProperty("Display",  function() { return (gramshow)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'g'
          _view.kg.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'kg'
          _view.kg.linkProperty("Visibility",  function() { return !gramshow; } ); // HtmlView Page linking property 'Visibility' for element 'kg'
          _view.kg.setAction("OnClick", function(_data,_info) {
  gramshow=true;
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak("grams", function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg2 = new SpeechSynthesisUtterance("grams");
  window.speechSynthesis.speak(msg2);
  }

}); // HtmlView Page setting action 'OnClick' for element 'kg'
          _view.kg.linkProperty("Display",  function() { return (!gramshow)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'kg'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  text="paused";
  isPaused=true;
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Disabled",  function() { return disabled; }, function(_v) { disabled = _v; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();
  isPaused=false;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.userreset.setAction("OnClick", function(_data,_info) {
  //t=0;
  theta=2*pi;
  x = 0.72*Math.sin(theta)*ydragtop;
  y = 0.72*Math.sin(theta)*xdragtop;
  thetadragtop = Math.atan2(ydragtop,xdragtop);
  //theta=(thetadragtop-pi/2)%(2*pi);
  //theta = 2*pi-massscale/5*(2*pi);
  massscale = -(theta)*maxy/(2*pi);
  if (massscale <0){
    massscale = maxy+massscale;
    }
  //x=0;
  //y=0; // fake reset to allow dropmenu to stay same
  _play();
  disabled=false;

}); // HtmlView Page setting action 'OnClick' for element 'userreset'
          _view.userreset.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'userreset'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return K1fcorrect; }, function(_v) { K1fcorrect = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDrag", function(_data,_info) {
  _view.plottingPanel.setProperty("MinimumY",Math.max(_view.plottingPanel.getProperty("MinimumY"),-1));
  _view.plottingPanel.setProperty("MaximumY",Math.min(_view.plottingPanel.getProperty("MaximumY"),3));

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnZoom", function(_data,_info) {
  //_view.plottingPanel.setZoomLimits([0.5,5]);
  _view.plottingPanel.setProperty("MinimumY",Math.max(_view.plottingPanel.getProperty("MinimumY"),-1));
  _view.plottingPanel.setProperty("MaximumY",Math.min(_view.plottingPanel.getProperty("MaximumY"),3));

}); // HtmlView Page setting action 'OnZoom' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return " t = "+_view._format(t,"0.00") + " s "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.circle.linkProperty("SizeX",  function() { return L*2; } ); // HtmlView Page linking property 'SizeX' for element 'circle'
          _view.circle.linkProperty("SizeY",  function() { return L*2; } ); // HtmlView Page linking property 'SizeY' for element 'circle'
          _view.segmentSet.linkProperty("NumberOfElements",  function() { return n2; }, function(_v) { n2 = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeX",  function() { return dxs; }, function(_v) { dxs = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSet'
          _view.segmentSet.linkProperty("X",  function() { return xline2; }, function(_v) { xline2 = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet'
          _view.segmentSet.linkProperty("LineColor",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'LineColor' for element 'segmentSet'
          _view.segmentSet.linkProperty("Y",  function() { return yline2; }, function(_v) { yline2 = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeY",  function() { return dys; }, function(_v) { dys = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet'
          _view.segmentSet.linkProperty("LineWidth",  function() { return stroke; }, function(_v) { stroke = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'segmentSet'
          _view.group.linkProperty("Transformation",  function() { return pi/2; } ); // HtmlView Page linking property 'Transformation' for element 'group'
          _view.thetao.linkProperty("SizeX",  function() { return xo; }, function(_v) { xo = _v; } ); // HtmlView Page linking property 'SizeX' for element 'thetao'
          _view.thetao.linkProperty("Visibility",  function() { return answershow; }, function(_v) { answershow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'thetao'
          _view.thetao.linkProperty("SizeY",  function() { return yo; }, function(_v) { yo = _v; } ); // HtmlView Page linking property 'SizeY' for element 'thetao'
          _view.theta.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'theta'
          _view.theta.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'theta'
          _view.hint2.linkProperty("Transformation",  function() { return -pi/2; } ); // HtmlView Page linking property 'Transformation' for element 'hint2'
          _view.hint2.linkProperty("X",  function() { return xo*1.2; } ); // HtmlView Page linking property 'X' for element 'hint2'
          _view.hint2.setAction("OnEnter", function(_data,_info) {
  var option = ""+massscaleo.toFixed(2) + " kg";
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg2 = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg2);
  }

}); // HtmlView Page setting action 'OnEnter' for element 'hint2'
          _view.hint2.linkProperty("Y",  function() { return yo*1.2; } ); // HtmlView Page linking property 'Y' for element 'hint2'
          _view.hint2.linkProperty("Text",  function() { return ""+massscaleo.toFixed(2) + " kg"; } ); // HtmlView Page linking property 'Text' for element 'hint2'
          _view.hint2.linkProperty("Visibility",  function() { return decimal==2&&answershow; } ); // HtmlView Page linking property 'Visibility' for element 'hint2'
          _view.hint2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'hint2'
          _view.hint.linkProperty("Transformation",  function() { return -pi/2; } ); // HtmlView Page linking property 'Transformation' for element 'hint'
          _view.hint.linkProperty("X",  function() { return xo*1.2; } ); // HtmlView Page linking property 'X' for element 'hint'
          _view.hint.setAction("OnEnter", function(_data,_info) {
  var option = ""+massscaleo.toFixed(1) + " kg";
  if(parent.cordova) { // check it is running in Android
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg2 = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg2);
  }

}); // HtmlView Page setting action 'OnEnter' for element 'hint'
          _view.hint.linkProperty("Y",  function() { return yo*1.2; } ); // HtmlView Page linking property 'Y' for element 'hint'
          _view.hint.linkProperty("Text",  function() { return ""+massscaleo.toFixed(1)+ " kg"; } ); // HtmlView Page linking property 'Text' for element 'hint'
          _view.hint.linkProperty("Visibility",  function() { return decimal==1&&answershow; } ); // HtmlView Page linking property 'Visibility' for element 'hint'
          _view.hint.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'hint'
          _view.textSet2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet2'
          _view.textSet2.linkProperty("SizeX",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'textSet2'
          _view.textSet2.linkProperty("X",  function() { return xline; }, function(_v) { xline = _v; } ); // HtmlView Page linking property 'X' for element 'textSet2'
          _view.textSet2.linkProperty("Y",  function() { return yline; }, function(_v) { yline = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet2'
          _view.textSet2.linkProperty("Text",  function() { return msg; }, function(_v) { msg = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet2'
          _view.textSet2.linkProperty("SizeY",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'textSet2'
          _view.textSet2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet2'
          _view.textSet2.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'textSet2'
          _view.shapedrago.setAction("OnDrag", function(_data,_info) {
  xo = 0.72*Math.sin(thetao)*yodragtop;
  yo = 0.72*Math.sin(thetao)*xodragtop;
  thetaodragtop = Math.atan2(yodragtop,xodragtop);
  thetao=(thetaodragtop-pi/2)%(2*pi);
  //theta = 2*pi-massscale/5*(2*pi);
  massscaleo = -(thetao)*maxy/(2*pi);
  if (massscaleo <0){
    massscaleo = maxy+massscaleo;
    }

}); // HtmlView Page setting action 'OnDrag' for element 'shapedrago'
          _view.shapedrago.setAction("OnRelease", function(_data,_info) {
  thetao = 2*pi+thetao;

}); // HtmlView Page setting action 'OnRelease' for element 'shapedrago'
          _view.shapedrago.linkProperty("X",  function() { return xodragtop; }, function(_v) { xodragtop = _v; } ); // HtmlView Page linking property 'X' for element 'shapedrago'
          _view.shapedrago.linkProperty("Y",  function() { return yodragtop; }, function(_v) { yodragtop = _v; } ); // HtmlView Page linking property 'Y' for element 'shapedrago'
          _view.shapedrago.setAction("OnPress", function(_data,_info) {
  disabled=false;

}); // HtmlView Page setting action 'OnPress' for element 'shapedrago'
          _view.shapedrag2.setAction("OnDrag", function(_data,_info) {
  x = 0.72*Math.sin(theta)*ydragtop;
  y = 0.72*Math.sin(theta)*xdragtop;
  //ctam = Math.round(Math.atan2(mx,my)/(2*pi)*60)/60*(2*pi);
  if (scaletype!=5){
  thetadragtop = Math.round(Math.atan2(ydragtop,xdragtop)/(2*pi)*n2)/n2*(2*pi);
  }
  else {
  // thetadragtop = Math.floor(Math.atan2(ydragtop,xdragtop)/(2*pi)*n2)/n2*(2*pi); 
   thetadragtop = Math.round(Math.atan2(ydragtop,xdragtop)/(2*pi)*(n2))/(n2)*(2*pi)+pi/50;
    }
  theta=(thetadragtop-pi/2)%(2*pi);
  //theta = 2*pi-massscale/5*(2*pi);
  massscale = -(theta)*maxy/(2*pi);
  massscaleo=massscale; // sync store with actual for input checking
  if (massscale <0){
    massscale = maxy+massscale;
    massscaleo=massscale; // sync store with actual for input checking
    }

}); // HtmlView Page setting action 'OnDrag' for element 'shapedrag2'
          _view.shapedrag2.setAction("OnRelease", function(_data,_info) {
  theta = 2*pi+theta;
  massscaleo=massscale; // sync store with actual for input checking;

}); // HtmlView Page setting action 'OnRelease' for element 'shapedrag2'
          _view.shapedrag2.linkProperty("X",  function() { return xdragtop; }, function(_v) { xdragtop = _v; } ); // HtmlView Page linking property 'X' for element 'shapedrag2'
          _view.shapedrag2.linkProperty("Y",  function() { return ydragtop; }, function(_v) { ydragtop = _v; } ); // HtmlView Page linking property 'Y' for element 'shapedrag2'
          _view.shapedrag2.setAction("OnPress", function(_data,_info) {
  disabled=false;

}); // HtmlView Page setting action 'OnPress' for element 'shapedrag2'
          _view.shapedrag.linkProperty("X",  function() { return xdrag; }, function(_v) { xdrag = _v; } ); // HtmlView Page linking property 'X' for element 'shapedrag'
          _view.shapedrag.linkProperty("Y",  function() { return ydrag; }, function(_v) { ydrag = _v; } ); // HtmlView Page linking property 'Y' for element 'shapedrag'
          _view.shapedrag.setAction("OnDrag", function(_data,_info) {
  thetadrag = Math.atan2(ydrag,xdrag)-pi/2;
  _view.comboBox.setSelectedOptions(["user defined"]);
  //selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'shapedrag'
          _view.shape2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'shape2'
          _view.shape2.setAction("OnDrag", function(_data,_info) {
  theta = Math.atan2(y,x)-pi/2;
  _view.comboBox.setSelectedOptions(["user defined"]);
  //selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'shape2'
          _view._K1fcorrect_.linkProperty("FillColor",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'FillColor' for element '_K1fcorrect_'
          _view._K1fcorrect_.linkProperty("Text",  function() { return K1fcorrect; }, function(_v) { K1fcorrect = _v; } ); // HtmlView Page linking property 'Text' for element '_K1fcorrect_'
          _view.coin.linkProperty("SizeX",  function() { return rangex/4; } ); // HtmlView Page linking property 'SizeX' for element 'coin'
          _view.coin.linkProperty("Visibility",  function() { return coinshow; }, function(_v) { coinshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'coin'
          _view.coin.linkProperty("SizeY",  function() { return rangey/4; } ); // HtmlView Page linking property 'SizeY' for element 'coin'
          _view.pineapple.linkProperty("SizeX",  function() { return rangex/2.5; } ); // HtmlView Page linking property 'SizeX' for element 'pineapple'
          _view.pineapple.linkProperty("Visibility",  function() { return pineappleshow; }, function(_v) { pineappleshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'pineapple'
          _view.pineapple.linkProperty("SizeY",  function() { return rangey*1.1; } ); // HtmlView Page linking property 'SizeY' for element 'pineapple'
          _view.apple.linkProperty("SizeX",  function() { return rangex/4; } ); // HtmlView Page linking property 'SizeX' for element 'apple'
          _view.apple.linkProperty("Visibility",  function() { return appleshow; }, function(_v) { appleshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'apple'
          _view.apple.linkProperty("SizeY",  function() { return rangey/3; } ); // HtmlView Page linking property 'SizeY' for element 'apple'
          _view.arrow2.setAction("OnPress", function(_data,_info) {
  ymax=ymax+0.25;
  ymin=ymin-0.25;
  if (ymax>2.5)ymax=2.5;
  if (ymin<-1)ymin=-1;

}); // HtmlView Page setting action 'OnPress' for element 'arrow2'
          _view.arrow.setAction("OnPress", function(_data,_info) {
  ymax=ymax-0.25;
  ymin=ymin+0.25;
  if (ymax<0.75)ymax=0.75;
  if (ymin>-0.75)ymin=-0.75;

}); // HtmlView Page setting action 'OnPress' for element 'arrow'
          _view.plottingPanelxvst.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MaximumY",  function() { return maxy; }, function(_v) { maxy = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MaximumX",  function() { return T; }, function(_v) { T = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("YTickStep",  function() { return maxy/10; } ); // HtmlView Page linking property 'YTickStep' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("BRMessage",  function() { return K1fcorrect; }, function(_v) { K1fcorrect = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanelxvst'
          _view.trail2.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail2'
          _view.trail2.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail2'
          _view.trail2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail2'
          _view.trail2.linkProperty("InputY",  function() { return massscale; }, function(_v) { massscale = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail2'
          _view.trailDot22.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot22'
          _view.trailDot22.linkProperty("Y",  function() { return massscale; }, function(_v) { massscale = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot22'
          _view.equilibrium.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'equilibrium'
          _view.equilibrium.linkProperty("InputY",  function() { return massscaleo; }, function(_v) { massscaleo = _v; } ); // HtmlView Page linking property 'InputY' for element 'equilibrium'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function SHMmassscale_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = SHMmassscale_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function SHMmassscale_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomPanel2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomPanel2'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'bottomPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"answer", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'answer'
      .setProperty("Text","?=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'answer'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models2gram", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'models2gram'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models2gram'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models2", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'models2'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models3scaletype4", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'models3scaletype4'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models3scaletype4'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models3", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'models3'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models3'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"modelsscaletype5", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'modelsscaletype5'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'modelsscaletype5'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'models'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","model input field") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"g", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'g'
      .setProperty("Tooltip","gram") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'g'
      .setProperty("Text"," g ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'g'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'g'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"kg", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'kg'
      .setProperty("Tooltip","kilogram") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'kg'
      .setProperty("Text"," kg ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'kg'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'kg'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","⏯") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"userreset", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'userreset'
      .setProperty("Tooltip","user restart or replay") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'userreset'
      .setProperty("Text","⏮") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'userreset'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","full reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("XTicks",1) // EJsS HtmlView.HtmlView Page: setting property 'XTicks' for element 'plottingPanel'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","Weighing or \nMass Scale Model") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YTicks",1) // EJsS HtmlView.HtmlView Page: setting property 'YTicks' for element 'plottingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'image'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'image'
      .setProperty("ImageUrl","./massscale/kilogramblankscalergb.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'image'
      .setProperty("SizeY",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"centre", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centre'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'centre'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'centre'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"circle", _view.centre) // EJsS HtmlView.HtmlView Page: declaration of element 'circle'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'circle'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'circle'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'circle'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'circle'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet", _view.centre) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'group'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"thetao", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'thetao'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'thetao'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'thetao'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'thetao'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'thetao'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'thetao'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"theta", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'theta'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theta'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'theta'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'theta'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'theta'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'theta'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'theta'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"hint2", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'hint2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hint2'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hint2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"hint", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'hint'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hint'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hint'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"centre2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centre2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'centre2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'centre2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet2", _view.centre2) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapedrago", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapedrago'
      .setProperty("FillColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapedrago'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapedrago'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapedrago'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapedrago'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapedrago'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapedrago'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shapedrago'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shapedrago'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapedrag2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapedrag2'
      .setProperty("FillColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapedrag2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapedrag2'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapedrag2'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapedrag2'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapedrag2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapedrag2'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shapedrag2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shapedrag2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapedrag", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapedrag'
      .setProperty("FillColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapedrag'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapedrag'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapedrag'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapedrag'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'shapedrag'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapedrag'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapedrag'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shapedrag'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shapedrag'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'shape2'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"_K1fcorrect_", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element '_K1fcorrect_'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element '_K1fcorrect_'
      .setProperty("Y",0.35) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element '_K1fcorrect_'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element '_K1fcorrect_'
      .setProperty("Font","normal normal 4vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element '_K1fcorrect_'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element '_K1fcorrect_'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"coin", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'coin'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'coin'
      .setProperty("ImageUrl","./massscale/Singapore-One-dollar-Coin.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'coin'
      .setProperty("Y",1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'coin'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"pineapple", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'pineapple'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'pineapple'
      .setProperty("ImageUrl","./massscale/pineapple01-md.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'pineapple'
      .setProperty("Y",1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'pineapple'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"apple", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'apple'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'apple'
      .setProperty("ImageUrl","./massscale/Single_apple.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'apple'
      .setProperty("Y",1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'apple'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"step", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'step'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'step'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'step'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'step'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow2", _view.step) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow2'
      .setProperty("LineColor","rgba(0,150,0,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow2'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.step) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow'
      .setProperty("LineColor","rgba(0,150,0,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow'
      .setProperty("SizeY",-20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanelxvst'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst'
      .setProperty("YScalePrecision",2) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst'
      .setProperty("Title","mass  vs. Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanelxvst'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanelxvst'
      .setProperty("TitleY","mass  (kg)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanelxvst'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanelxvst'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trail2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail2'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot22", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot22'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot22'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"equilibrium", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'equilibrium'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'equilibrium'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'equilibrium'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Reading Scale Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_SHMmassscale/massscale/Screen Shot 2017-05-23 at 11.29.31 AM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_SHMmassscale/01authorlookang50x50.png" />
 weelookang@gmail.com http://weelookang.blogspot.sg/2014/11/ejss-mass-scale-model.html
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, creative commons attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new SHMmassscale("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_SHMmassscale/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
