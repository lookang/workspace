<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Symmetry Blocks Primary Math Interactives</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function symmetryblockgridonly(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var font; // EjsS Model.Variables.Var Table.font
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var a; // EjsS Model.Variables.Var Table.a
  var b; // EjsS Model.Variables.Var Table.b
  var c; // EjsS Model.Variables.Var Table.c
  var d; // EjsS Model.Variables.Var Table.d
  var e; // EjsS Model.Variables.Var Table.e
  var f; // EjsS Model.Variables.Var Table.f
  var letter; // EjsS Model.Variables.Var Table.letter
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var xi; // EjsS Model.Variables.Var Table.xi
  var yi; // EjsS Model.Variables.Var Table.yi
  var cursorpress; // EjsS Model.Variables.Var Table.cursorpress
  var cursorpressline; // EjsS Model.Variables.Var Table.cursorpressline
  var xiline; // EjsS Model.Variables.Var Table.xiline
  var yiline; // EjsS Model.Variables.Var Table.yiline
  var memorycolor; // EjsS Model.Variables.Var Table.memorycolor
  var ncountline; // EjsS Model.Variables.Var Table.ncountline
  var xilineset; // EjsS Model.Variables.Var Table.xilineset
  var yilineset; // EjsS Model.Variables.Var Table.yilineset
  var dxilineset; // EjsS Model.Variables.Var Table.dxilineset
  var dyilineset; // EjsS Model.Variables.Var Table.dyilineset
  var draw; // EjsS Model.Variables.Var Table.draw
  var drawline; // EjsS Model.Variables.Var Table.drawline
  var myscale; // EjsS Model.Variables.Var Table.myscale
  var countline; // EjsS Model.Variables.Var Table.countline

  var comboxselected; // EjsS Model.Variables.combo.comboxselected
  var comboxselected2; // EjsS Model.Variables.combo.comboxselected2
  var comboxselected3; // EjsS Model.Variables.combo.comboxselected3

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var removegrid; // EjsS Model.Variables.numberblocks.removegrid
  var k; // EjsS Model.Variables.numberblocks.k
  var i; // EjsS Model.Variables.numberblocks.i
  var i2; // EjsS Model.Variables.numberblocks.i2
  var j; // EjsS Model.Variables.numberblocks.j
  var vectorIndex; // EjsS Model.Variables.numberblocks.vectorIndex
  var n; // EjsS Model.Variables.numberblocks.n
  var nMax; // EjsS Model.Variables.numberblocks.nMax
  var nVectors; // EjsS Model.Variables.numberblocks.nVectors
  var nVectorsMax; // EjsS Model.Variables.numberblocks.nVectorsMax
  var nVectorsSq; // EjsS Model.Variables.numberblocks.nVectorsSq
  var textpos; // EjsS Model.Variables.numberblocks.textpos
  var colorVectors; // EjsS Model.Variables.numberblocks.colorVectors
  var x; // EjsS Model.Variables.numberblocks.x
  var y; // EjsS Model.Variables.numberblocks.y
  var posx; // EjsS Model.Variables.numberblocks.posx
  var posy; // EjsS Model.Variables.numberblocks.posy
  var factorresults; // EjsS Model.Variables.numberblocks.factorresults
  var factorresultsMax; // EjsS Model.Variables.numberblocks.factorresultsMax

  var A; // EjsS Model.Variables.letters.A
  var Ainner; // EjsS Model.Variables.letters.Ainner

  var elementinteracted; // EjsS Model.Variables.interaction.elementinteracted
  var score; // EjsS Model.Variables.interaction.score
  var scores; // EjsS Model.Variables.interaction.scores
  var scoredebug; // EjsS Model.Variables.interaction.scoredebug
  var feedbacktext; // EjsS Model.Variables.interaction.feedbacktext
  var left; // EjsS Model.Variables.interaction.left
  var oddnumbersleft; // EjsS Model.Variables.interaction.oddnumbersleft
  var evennumbersleft; // EjsS Model.Variables.interaction.evennumbersleft
  var multiplenumbersleft; // EjsS Model.Variables.interaction.multiplenumbersleft
  var multiplenumbersleftonscreen; // EjsS Model.Variables.interaction.multiplenumbersleftonscreen
  var multiplenumbersleftonscreen2; // EjsS Model.Variables.interaction.multiplenumbersleftonscreen2
  var factorresultsleftonscreen; // EjsS Model.Variables.interaction.factorresultsleftonscreen
  var alertcount; // EjsS Model.Variables.interaction.alertcount
  var oddtextpos; // EjsS Model.Variables.interaction.oddtextpos
  var eventextpos; // EjsS Model.Variables.interaction.eventextpos
  var multipletextpos; // EjsS Model.Variables.interaction.multipletextpos
  var multipletextpos2; // EjsS Model.Variables.interaction.multipletextpos2
  var factortextpos; // EjsS Model.Variables.interaction.factortextpos

  var colororiginal; // EjsS Model.Variables.color.colororiginal
  var colorodd; // EjsS Model.Variables.color.colorodd
  var coloreven; // EjsS Model.Variables.color.coloreven
  var colormultiples; // EjsS Model.Variables.color.colormultiples
  var colorfactors; // EjsS Model.Variables.color.colorfactors
  var colorhint; // EjsS Model.Variables.color.colorhint
  var numbercolor; // EjsS Model.Variables.color.numbercolor
  var numbercolorblack; // EjsS Model.Variables.color.numbercolorblack
  var colordull; // EjsS Model.Variables.color.colordull

  var hint; // EjsS Model.Variables.mirror.hint
  var correcttext; // EjsS Model.Variables.mirror.correcttext
  var numberofinteraction; // EjsS Model.Variables.mirror.numberofinteraction
  var comboboxmode; // EjsS Model.Variables.mirror.comboboxmode
  var quizmode; // EjsS Model.Variables.mirror.quizmode
  var quizmodeline; // EjsS Model.Variables.mirror.quizmodeline
  var mirrorx; // EjsS Model.Variables.mirror.mirrorx
  var mirrory; // EjsS Model.Variables.mirror.mirrory
  var mirrorsizex; // EjsS Model.Variables.mirror.mirrorsizex
  var mirrorsizey; // EjsS Model.Variables.mirror.mirrorsizey
  var elementinteractedmirror; // EjsS Model.Variables.mirror.elementinteractedmirror
  var xtext; // EjsS Model.Variables.mirror.xtext
  var ytext; // EjsS Model.Variables.mirror.ytext
  var textshow; // EjsS Model.Variables.mirror.textshow
  var xtextmirror; // EjsS Model.Variables.mirror.xtextmirror
  var ytextmirror; // EjsS Model.Variables.mirror.ytextmirror
  var scalextext; // EjsS Model.Variables.mirror.scalextext
  var scaleytext; // EjsS Model.Variables.mirror.scaleytext
  var rotate; // EjsS Model.Variables.mirror.rotate
  var fontsize; // EjsS Model.Variables.mirror.fontsize
  var elementinteractedmirrorquiz; // EjsS Model.Variables.mirror.elementinteractedmirrorquiz
  var arrayobject; // EjsS Model.Variables.mirror.arrayobject
  var arraymirror90; // EjsS Model.Variables.mirror.arraymirror90
  var arraymirror00; // EjsS Model.Variables.mirror.arraymirror00
  var arraymirror45; // EjsS Model.Variables.mirror.arraymirror45
  var arraymirrorminus45; // EjsS Model.Variables.mirror.arraymirrorminus45
  var feedbackshow; // EjsS Model.Variables.mirror.feedbackshow

  var xilineset90; // EjsS Model.Variables.drawline.xilineset90
  var yilineset90; // EjsS Model.Variables.drawline.yilineset90
  var dxilineset90; // EjsS Model.Variables.drawline.dxilineset90
  var dyilineset90; // EjsS Model.Variables.drawline.dyilineset90
  var xilineset00; // EjsS Model.Variables.drawline.xilineset00
  var yilineset00; // EjsS Model.Variables.drawline.yilineset00
  var dxilineset00; // EjsS Model.Variables.drawline.dxilineset00
  var dyilineset00; // EjsS Model.Variables.drawline.dyilineset00
  var xilineset45; // EjsS Model.Variables.drawline.xilineset45
  var yilineset45; // EjsS Model.Variables.drawline.yilineset45
  var dxilineset45; // EjsS Model.Variables.drawline.dxilineset45
  var dyilineset45; // EjsS Model.Variables.drawline.dyilineset45
  var xilinesetn45; // EjsS Model.Variables.drawline.xilinesetn45
  var yilinesetn45; // EjsS Model.Variables.drawline.yilinesetn45
  var dxilinesetn45; // EjsS Model.Variables.drawline.dxilinesetn45
  var dyilinesetn45; // EjsS Model.Variables.drawline.dyilinesetn45
  var scoreline; // EjsS Model.Variables.drawline.scoreline

  var elementtouched; // EjsS Model.Variables.drawlinequiz.elementtouched

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      font : font,
      xmin : xmin,
      a : a,
      b : b,
      c : c,
      d : d,
      e : e,
      f : f,
      letter : letter,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      t : t,
      dt : dt,
      xi : xi,
      yi : yi,
      cursorpress : cursorpress,
      cursorpressline : cursorpressline,
      xiline : xiline,
      yiline : yiline,
      memorycolor : memorycolor,
      ncountline : ncountline,
      xilineset : xilineset,
      yilineset : yilineset,
      dxilineset : dxilineset,
      dyilineset : dyilineset,
      draw : draw,
      drawline : drawline,
      myscale : myscale,
      countline : countline,
      comboxselected : comboxselected,
      comboxselected2 : comboxselected2,
      comboxselected3 : comboxselected3,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      removegrid : removegrid,
      k : k,
      i : i,
      i2 : i2,
      j : j,
      vectorIndex : vectorIndex,
      n : n,
      nMax : nMax,
      nVectors : nVectors,
      nVectorsMax : nVectorsMax,
      nVectorsSq : nVectorsSq,
      textpos : textpos,
      colorVectors : colorVectors,
      x : x,
      y : y,
      posx : posx,
      posy : posy,
      factorresults : factorresults,
      factorresultsMax : factorresultsMax,
      A : A,
      Ainner : Ainner,
      elementinteracted : elementinteracted,
      score : score,
      scores : scores,
      scoredebug : scoredebug,
      feedbacktext : feedbacktext,
      left : left,
      oddnumbersleft : oddnumbersleft,
      evennumbersleft : evennumbersleft,
      multiplenumbersleft : multiplenumbersleft,
      multiplenumbersleftonscreen : multiplenumbersleftonscreen,
      multiplenumbersleftonscreen2 : multiplenumbersleftonscreen2,
      factorresultsleftonscreen : factorresultsleftonscreen,
      alertcount : alertcount,
      oddtextpos : oddtextpos,
      eventextpos : eventextpos,
      multipletextpos : multipletextpos,
      multipletextpos2 : multipletextpos2,
      factortextpos : factortextpos,
      colororiginal : colororiginal,
      colorodd : colorodd,
      coloreven : coloreven,
      colormultiples : colormultiples,
      colorfactors : colorfactors,
      colorhint : colorhint,
      numbercolor : numbercolor,
      numbercolorblack : numbercolorblack,
      colordull : colordull,
      hint : hint,
      correcttext : correcttext,
      numberofinteraction : numberofinteraction,
      comboboxmode : comboboxmode,
      quizmode : quizmode,
      quizmodeline : quizmodeline,
      mirrorx : mirrorx,
      mirrory : mirrory,
      mirrorsizex : mirrorsizex,
      mirrorsizey : mirrorsizey,
      elementinteractedmirror : elementinteractedmirror,
      xtext : xtext,
      ytext : ytext,
      textshow : textshow,
      xtextmirror : xtextmirror,
      ytextmirror : ytextmirror,
      scalextext : scalextext,
      scaleytext : scaleytext,
      rotate : rotate,
      fontsize : fontsize,
      elementinteractedmirrorquiz : elementinteractedmirrorquiz,
      arrayobject : arrayobject,
      arraymirror90 : arraymirror90,
      arraymirror00 : arraymirror00,
      arraymirror45 : arraymirror45,
      arraymirrorminus45 : arraymirrorminus45,
      feedbackshow : feedbackshow,
      xilineset90 : xilineset90,
      yilineset90 : yilineset90,
      dxilineset90 : dxilineset90,
      dyilineset90 : dyilineset90,
      xilineset00 : xilineset00,
      yilineset00 : yilineset00,
      dxilineset00 : dxilineset00,
      dyilineset00 : dyilineset00,
      xilineset45 : xilineset45,
      yilineset45 : yilineset45,
      dxilineset45 : dxilineset45,
      dyilineset45 : dyilineset45,
      xilinesetn45 : xilinesetn45,
      yilinesetn45 : yilinesetn45,
      dxilinesetn45 : dxilinesetn45,
      dyilinesetn45 : dyilinesetn45,
      scoreline : scoreline,
      elementtouched : elementtouched
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      font : font,
      xmin : xmin,
      a : a,
      b : b,
      c : c,
      d : d,
      e : e,
      f : f,
      letter : letter,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      t : t,
      dt : dt,
      xi : xi,
      yi : yi,
      cursorpress : cursorpress,
      cursorpressline : cursorpressline,
      xiline : xiline,
      yiline : yiline,
      memorycolor : memorycolor,
      ncountline : ncountline,
      xilineset : xilineset,
      yilineset : yilineset,
      dxilineset : dxilineset,
      dyilineset : dyilineset,
      draw : draw,
      drawline : drawline,
      myscale : myscale,
      countline : countline,
      comboxselected : comboxselected,
      comboxselected2 : comboxselected2,
      comboxselected3 : comboxselected3,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      removegrid : removegrid,
      k : k,
      i : i,
      i2 : i2,
      j : j,
      vectorIndex : vectorIndex,
      n : n,
      nMax : nMax,
      nVectors : nVectors,
      nVectorsMax : nVectorsMax,
      nVectorsSq : nVectorsSq,
      textpos : textpos,
      colorVectors : colorVectors,
      x : x,
      y : y,
      posx : posx,
      posy : posy,
      factorresults : factorresults,
      factorresultsMax : factorresultsMax,
      A : A,
      Ainner : Ainner,
      elementinteracted : elementinteracted,
      score : score,
      scores : scores,
      scoredebug : scoredebug,
      feedbacktext : feedbacktext,
      left : left,
      oddnumbersleft : oddnumbersleft,
      evennumbersleft : evennumbersleft,
      multiplenumbersleft : multiplenumbersleft,
      multiplenumbersleftonscreen : multiplenumbersleftonscreen,
      multiplenumbersleftonscreen2 : multiplenumbersleftonscreen2,
      factorresultsleftonscreen : factorresultsleftonscreen,
      alertcount : alertcount,
      oddtextpos : oddtextpos,
      eventextpos : eventextpos,
      multipletextpos : multipletextpos,
      multipletextpos2 : multipletextpos2,
      factortextpos : factortextpos,
      colororiginal : colororiginal,
      colorodd : colorodd,
      coloreven : coloreven,
      colormultiples : colormultiples,
      colorfactors : colorfactors,
      colorhint : colorhint,
      numbercolor : numbercolor,
      numbercolorblack : numbercolorblack,
      colordull : colordull,
      hint : hint,
      correcttext : correcttext,
      numberofinteraction : numberofinteraction,
      comboboxmode : comboboxmode,
      quizmode : quizmode,
      quizmodeline : quizmodeline,
      mirrorx : mirrorx,
      mirrory : mirrory,
      mirrorsizex : mirrorsizex,
      mirrorsizey : mirrorsizey,
      elementinteractedmirror : elementinteractedmirror,
      xtext : xtext,
      ytext : ytext,
      textshow : textshow,
      xtextmirror : xtextmirror,
      ytextmirror : ytextmirror,
      scalextext : scalextext,
      scaleytext : scaleytext,
      rotate : rotate,
      fontsize : fontsize,
      elementinteractedmirrorquiz : elementinteractedmirrorquiz,
      arrayobject : arrayobject,
      arraymirror90 : arraymirror90,
      arraymirror00 : arraymirror00,
      arraymirror45 : arraymirror45,
      arraymirrorminus45 : arraymirrorminus45,
      feedbackshow : feedbackshow,
      xilineset90 : xilineset90,
      yilineset90 : yilineset90,
      dxilineset90 : dxilineset90,
      dyilineset90 : dyilineset90,
      xilineset00 : xilineset00,
      yilineset00 : yilineset00,
      dxilineset00 : dxilineset00,
      dyilineset00 : dyilineset00,
      xilineset45 : xilineset45,
      yilineset45 : yilineset45,
      dxilineset45 : dxilineset45,
      dyilineset45 : dyilineset45,
      xilinesetn45 : xilinesetn45,
      yilinesetn45 : yilinesetn45,
      dxilinesetn45 : dxilinesetn45,
      dyilinesetn45 : dyilinesetn45,
      scoreline : scoreline,
      elementtouched : elementtouched
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.e != "undefined") e = json.e;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.letter != "undefined") letter = json.letter;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.xi != "undefined") xi = json.xi;
    if(typeof json.yi != "undefined") yi = json.yi;
    if(typeof json.cursorpress != "undefined") cursorpress = json.cursorpress;
    if(typeof json.cursorpressline != "undefined") cursorpressline = json.cursorpressline;
    if(typeof json.xiline != "undefined") xiline = json.xiline;
    if(typeof json.yiline != "undefined") yiline = json.yiline;
    if(typeof json.memorycolor != "undefined") memorycolor = json.memorycolor;
    if(typeof json.ncountline != "undefined") ncountline = json.ncountline;
    if(typeof json.xilineset != "undefined") xilineset = json.xilineset;
    if(typeof json.yilineset != "undefined") yilineset = json.yilineset;
    if(typeof json.dxilineset != "undefined") dxilineset = json.dxilineset;
    if(typeof json.dyilineset != "undefined") dyilineset = json.dyilineset;
    if(typeof json.draw != "undefined") draw = json.draw;
    if(typeof json.drawline != "undefined") drawline = json.drawline;
    if(typeof json.myscale != "undefined") myscale = json.myscale;
    if(typeof json.countline != "undefined") countline = json.countline;
    if(typeof json.comboxselected != "undefined") comboxselected = json.comboxselected;
    if(typeof json.comboxselected2 != "undefined") comboxselected2 = json.comboxselected2;
    if(typeof json.comboxselected3 != "undefined") comboxselected3 = json.comboxselected3;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.removegrid != "undefined") removegrid = json.removegrid;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.i2 != "undefined") i2 = json.i2;
    if(typeof json.j != "undefined") j = json.j;
    if(typeof json.vectorIndex != "undefined") vectorIndex = json.vectorIndex;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.nMax != "undefined") nMax = json.nMax;
    if(typeof json.nVectors != "undefined") nVectors = json.nVectors;
    if(typeof json.nVectorsMax != "undefined") nVectorsMax = json.nVectorsMax;
    if(typeof json.nVectorsSq != "undefined") nVectorsSq = json.nVectorsSq;
    if(typeof json.textpos != "undefined") textpos = json.textpos;
    if(typeof json.colorVectors != "undefined") colorVectors = json.colorVectors;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.posx != "undefined") posx = json.posx;
    if(typeof json.posy != "undefined") posy = json.posy;
    if(typeof json.factorresults != "undefined") factorresults = json.factorresults;
    if(typeof json.factorresultsMax != "undefined") factorresultsMax = json.factorresultsMax;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.Ainner != "undefined") Ainner = json.Ainner;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.scores != "undefined") scores = json.scores;
    if(typeof json.scoredebug != "undefined") scoredebug = json.scoredebug;
    if(typeof json.feedbacktext != "undefined") feedbacktext = json.feedbacktext;
    if(typeof json.left != "undefined") left = json.left;
    if(typeof json.oddnumbersleft != "undefined") oddnumbersleft = json.oddnumbersleft;
    if(typeof json.evennumbersleft != "undefined") evennumbersleft = json.evennumbersleft;
    if(typeof json.multiplenumbersleft != "undefined") multiplenumbersleft = json.multiplenumbersleft;
    if(typeof json.multiplenumbersleftonscreen != "undefined") multiplenumbersleftonscreen = json.multiplenumbersleftonscreen;
    if(typeof json.multiplenumbersleftonscreen2 != "undefined") multiplenumbersleftonscreen2 = json.multiplenumbersleftonscreen2;
    if(typeof json.factorresultsleftonscreen != "undefined") factorresultsleftonscreen = json.factorresultsleftonscreen;
    if(typeof json.alertcount != "undefined") alertcount = json.alertcount;
    if(typeof json.oddtextpos != "undefined") oddtextpos = json.oddtextpos;
    if(typeof json.eventextpos != "undefined") eventextpos = json.eventextpos;
    if(typeof json.multipletextpos != "undefined") multipletextpos = json.multipletextpos;
    if(typeof json.multipletextpos2 != "undefined") multipletextpos2 = json.multipletextpos2;
    if(typeof json.factortextpos != "undefined") factortextpos = json.factortextpos;
    if(typeof json.colororiginal != "undefined") colororiginal = json.colororiginal;
    if(typeof json.colorodd != "undefined") colorodd = json.colorodd;
    if(typeof json.coloreven != "undefined") coloreven = json.coloreven;
    if(typeof json.colormultiples != "undefined") colormultiples = json.colormultiples;
    if(typeof json.colorfactors != "undefined") colorfactors = json.colorfactors;
    if(typeof json.colorhint != "undefined") colorhint = json.colorhint;
    if(typeof json.numbercolor != "undefined") numbercolor = json.numbercolor;
    if(typeof json.numbercolorblack != "undefined") numbercolorblack = json.numbercolorblack;
    if(typeof json.colordull != "undefined") colordull = json.colordull;
    if(typeof json.hint != "undefined") hint = json.hint;
    if(typeof json.correcttext != "undefined") correcttext = json.correcttext;
    if(typeof json.numberofinteraction != "undefined") numberofinteraction = json.numberofinteraction;
    if(typeof json.comboboxmode != "undefined") comboboxmode = json.comboboxmode;
    if(typeof json.quizmode != "undefined") quizmode = json.quizmode;
    if(typeof json.quizmodeline != "undefined") quizmodeline = json.quizmodeline;
    if(typeof json.mirrorx != "undefined") mirrorx = json.mirrorx;
    if(typeof json.mirrory != "undefined") mirrory = json.mirrory;
    if(typeof json.mirrorsizex != "undefined") mirrorsizex = json.mirrorsizex;
    if(typeof json.mirrorsizey != "undefined") mirrorsizey = json.mirrorsizey;
    if(typeof json.elementinteractedmirror != "undefined") elementinteractedmirror = json.elementinteractedmirror;
    if(typeof json.xtext != "undefined") xtext = json.xtext;
    if(typeof json.ytext != "undefined") ytext = json.ytext;
    if(typeof json.textshow != "undefined") textshow = json.textshow;
    if(typeof json.xtextmirror != "undefined") xtextmirror = json.xtextmirror;
    if(typeof json.ytextmirror != "undefined") ytextmirror = json.ytextmirror;
    if(typeof json.scalextext != "undefined") scalextext = json.scalextext;
    if(typeof json.scaleytext != "undefined") scaleytext = json.scaleytext;
    if(typeof json.rotate != "undefined") rotate = json.rotate;
    if(typeof json.fontsize != "undefined") fontsize = json.fontsize;
    if(typeof json.elementinteractedmirrorquiz != "undefined") elementinteractedmirrorquiz = json.elementinteractedmirrorquiz;
    if(typeof json.arrayobject != "undefined") arrayobject = json.arrayobject;
    if(typeof json.arraymirror90 != "undefined") arraymirror90 = json.arraymirror90;
    if(typeof json.arraymirror00 != "undefined") arraymirror00 = json.arraymirror00;
    if(typeof json.arraymirror45 != "undefined") arraymirror45 = json.arraymirror45;
    if(typeof json.arraymirrorminus45 != "undefined") arraymirrorminus45 = json.arraymirrorminus45;
    if(typeof json.feedbackshow != "undefined") feedbackshow = json.feedbackshow;
    if(typeof json.xilineset90 != "undefined") xilineset90 = json.xilineset90;
    if(typeof json.yilineset90 != "undefined") yilineset90 = json.yilineset90;
    if(typeof json.dxilineset90 != "undefined") dxilineset90 = json.dxilineset90;
    if(typeof json.dyilineset90 != "undefined") dyilineset90 = json.dyilineset90;
    if(typeof json.xilineset00 != "undefined") xilineset00 = json.xilineset00;
    if(typeof json.yilineset00 != "undefined") yilineset00 = json.yilineset00;
    if(typeof json.dxilineset00 != "undefined") dxilineset00 = json.dxilineset00;
    if(typeof json.dyilineset00 != "undefined") dyilineset00 = json.dyilineset00;
    if(typeof json.xilineset45 != "undefined") xilineset45 = json.xilineset45;
    if(typeof json.yilineset45 != "undefined") yilineset45 = json.yilineset45;
    if(typeof json.dxilineset45 != "undefined") dxilineset45 = json.dxilineset45;
    if(typeof json.dyilineset45 != "undefined") dyilineset45 = json.dyilineset45;
    if(typeof json.xilinesetn45 != "undefined") xilinesetn45 = json.xilinesetn45;
    if(typeof json.yilinesetn45 != "undefined") yilinesetn45 = json.yilinesetn45;
    if(typeof json.dxilinesetn45 != "undefined") dxilinesetn45 = json.dxilinesetn45;
    if(typeof json.dyilinesetn45 != "undefined") dyilinesetn45 = json.dyilinesetn45;
    if(typeof json.scoreline != "undefined") scoreline = json.scoreline;
    if(typeof json.elementtouched != "undefined") elementtouched = json.elementtouched;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.e != "undefined") e = json.e;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.letter != "undefined") letter = json.letter;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.xi != "undefined") xi = json.xi;
    if(typeof json.yi != "undefined") yi = json.yi;
    if(typeof json.cursorpress != "undefined") cursorpress = json.cursorpress;
    if(typeof json.cursorpressline != "undefined") cursorpressline = json.cursorpressline;
    if(typeof json.xiline != "undefined") xiline = json.xiline;
    if(typeof json.yiline != "undefined") yiline = json.yiline;
    if(typeof json.memorycolor != "undefined") memorycolor = json.memorycolor;
    if(typeof json.ncountline != "undefined") ncountline = json.ncountline;
    if(typeof json.xilineset != "undefined") xilineset = json.xilineset;
    if(typeof json.yilineset != "undefined") yilineset = json.yilineset;
    if(typeof json.dxilineset != "undefined") dxilineset = json.dxilineset;
    if(typeof json.dyilineset != "undefined") dyilineset = json.dyilineset;
    if(typeof json.draw != "undefined") draw = json.draw;
    if(typeof json.drawline != "undefined") drawline = json.drawline;
    if(typeof json.myscale != "undefined") myscale = json.myscale;
    if(typeof json.countline != "undefined") countline = json.countline;
    if(typeof json.comboxselected != "undefined") comboxselected = json.comboxselected;
    if(typeof json.comboxselected2 != "undefined") comboxselected2 = json.comboxselected2;
    if(typeof json.comboxselected3 != "undefined") comboxselected3 = json.comboxselected3;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.removegrid != "undefined") removegrid = json.removegrid;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.i2 != "undefined") i2 = json.i2;
    if(typeof json.j != "undefined") j = json.j;
    if(typeof json.vectorIndex != "undefined") vectorIndex = json.vectorIndex;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.nMax != "undefined") nMax = json.nMax;
    if(typeof json.nVectors != "undefined") nVectors = json.nVectors;
    if(typeof json.nVectorsMax != "undefined") nVectorsMax = json.nVectorsMax;
    if(typeof json.nVectorsSq != "undefined") nVectorsSq = json.nVectorsSq;
    if(typeof json.textpos != "undefined") textpos = json.textpos;
    if(typeof json.colorVectors != "undefined") colorVectors = json.colorVectors;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.posx != "undefined") posx = json.posx;
    if(typeof json.posy != "undefined") posy = json.posy;
    if(typeof json.factorresults != "undefined") factorresults = json.factorresults;
    if(typeof json.factorresultsMax != "undefined") factorresultsMax = json.factorresultsMax;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.Ainner != "undefined") Ainner = json.Ainner;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.scores != "undefined") scores = json.scores;
    if(typeof json.scoredebug != "undefined") scoredebug = json.scoredebug;
    if(typeof json.feedbacktext != "undefined") feedbacktext = json.feedbacktext;
    if(typeof json.left != "undefined") left = json.left;
    if(typeof json.oddnumbersleft != "undefined") oddnumbersleft = json.oddnumbersleft;
    if(typeof json.evennumbersleft != "undefined") evennumbersleft = json.evennumbersleft;
    if(typeof json.multiplenumbersleft != "undefined") multiplenumbersleft = json.multiplenumbersleft;
    if(typeof json.multiplenumbersleftonscreen != "undefined") multiplenumbersleftonscreen = json.multiplenumbersleftonscreen;
    if(typeof json.multiplenumbersleftonscreen2 != "undefined") multiplenumbersleftonscreen2 = json.multiplenumbersleftonscreen2;
    if(typeof json.factorresultsleftonscreen != "undefined") factorresultsleftonscreen = json.factorresultsleftonscreen;
    if(typeof json.alertcount != "undefined") alertcount = json.alertcount;
    if(typeof json.oddtextpos != "undefined") oddtextpos = json.oddtextpos;
    if(typeof json.eventextpos != "undefined") eventextpos = json.eventextpos;
    if(typeof json.multipletextpos != "undefined") multipletextpos = json.multipletextpos;
    if(typeof json.multipletextpos2 != "undefined") multipletextpos2 = json.multipletextpos2;
    if(typeof json.factortextpos != "undefined") factortextpos = json.factortextpos;
    if(typeof json.colororiginal != "undefined") colororiginal = json.colororiginal;
    if(typeof json.colorodd != "undefined") colorodd = json.colorodd;
    if(typeof json.coloreven != "undefined") coloreven = json.coloreven;
    if(typeof json.colormultiples != "undefined") colormultiples = json.colormultiples;
    if(typeof json.colorfactors != "undefined") colorfactors = json.colorfactors;
    if(typeof json.colorhint != "undefined") colorhint = json.colorhint;
    if(typeof json.numbercolor != "undefined") numbercolor = json.numbercolor;
    if(typeof json.numbercolorblack != "undefined") numbercolorblack = json.numbercolorblack;
    if(typeof json.colordull != "undefined") colordull = json.colordull;
    if(typeof json.hint != "undefined") hint = json.hint;
    if(typeof json.correcttext != "undefined") correcttext = json.correcttext;
    if(typeof json.numberofinteraction != "undefined") numberofinteraction = json.numberofinteraction;
    if(typeof json.comboboxmode != "undefined") comboboxmode = json.comboboxmode;
    if(typeof json.quizmode != "undefined") quizmode = json.quizmode;
    if(typeof json.quizmodeline != "undefined") quizmodeline = json.quizmodeline;
    if(typeof json.mirrorx != "undefined") mirrorx = json.mirrorx;
    if(typeof json.mirrory != "undefined") mirrory = json.mirrory;
    if(typeof json.mirrorsizex != "undefined") mirrorsizex = json.mirrorsizex;
    if(typeof json.mirrorsizey != "undefined") mirrorsizey = json.mirrorsizey;
    if(typeof json.elementinteractedmirror != "undefined") elementinteractedmirror = json.elementinteractedmirror;
    if(typeof json.xtext != "undefined") xtext = json.xtext;
    if(typeof json.ytext != "undefined") ytext = json.ytext;
    if(typeof json.textshow != "undefined") textshow = json.textshow;
    if(typeof json.xtextmirror != "undefined") xtextmirror = json.xtextmirror;
    if(typeof json.ytextmirror != "undefined") ytextmirror = json.ytextmirror;
    if(typeof json.scalextext != "undefined") scalextext = json.scalextext;
    if(typeof json.scaleytext != "undefined") scaleytext = json.scaleytext;
    if(typeof json.rotate != "undefined") rotate = json.rotate;
    if(typeof json.fontsize != "undefined") fontsize = json.fontsize;
    if(typeof json.elementinteractedmirrorquiz != "undefined") elementinteractedmirrorquiz = json.elementinteractedmirrorquiz;
    if(typeof json.arrayobject != "undefined") arrayobject = json.arrayobject;
    if(typeof json.arraymirror90 != "undefined") arraymirror90 = json.arraymirror90;
    if(typeof json.arraymirror00 != "undefined") arraymirror00 = json.arraymirror00;
    if(typeof json.arraymirror45 != "undefined") arraymirror45 = json.arraymirror45;
    if(typeof json.arraymirrorminus45 != "undefined") arraymirrorminus45 = json.arraymirrorminus45;
    if(typeof json.feedbackshow != "undefined") feedbackshow = json.feedbackshow;
    if(typeof json.xilineset90 != "undefined") xilineset90 = json.xilineset90;
    if(typeof json.yilineset90 != "undefined") yilineset90 = json.yilineset90;
    if(typeof json.dxilineset90 != "undefined") dxilineset90 = json.dxilineset90;
    if(typeof json.dyilineset90 != "undefined") dyilineset90 = json.dyilineset90;
    if(typeof json.xilineset00 != "undefined") xilineset00 = json.xilineset00;
    if(typeof json.yilineset00 != "undefined") yilineset00 = json.yilineset00;
    if(typeof json.dxilineset00 != "undefined") dxilineset00 = json.dxilineset00;
    if(typeof json.dyilineset00 != "undefined") dyilineset00 = json.dyilineset00;
    if(typeof json.xilineset45 != "undefined") xilineset45 = json.xilineset45;
    if(typeof json.yilineset45 != "undefined") yilineset45 = json.yilineset45;
    if(typeof json.dxilineset45 != "undefined") dxilineset45 = json.dxilineset45;
    if(typeof json.dyilineset45 != "undefined") dyilineset45 = json.dyilineset45;
    if(typeof json.xilinesetn45 != "undefined") xilinesetn45 = json.xilinesetn45;
    if(typeof json.yilinesetn45 != "undefined") yilinesetn45 = json.yilinesetn45;
    if(typeof json.dxilinesetn45 != "undefined") dxilinesetn45 = json.dxilinesetn45;
    if(typeof json.dyilinesetn45 != "undefined") dyilinesetn45 = json.dyilinesetn45;
    if(typeof json.scoreline != "undefined") scoreline = json.scoreline;
    if(typeof json.elementtouched != "undefined") elementtouched = json.elementtouched;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["arrayobject"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["alert"] = true;
    __pagesEnabled["vertical"] = false;
    __pagesEnabled["vertical 2"] = false;
    __pagesEnabled["horizontal"] = false;
    __pagesEnabled["45line"] = false;
    __pagesEnabled["45line 2"] = false;
  });

  _model.addToReset(function() {
    font = "normal normal 2vw "; // EjsS Model.Variables.Var Table.font
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    a = 0; // EjsS Model.Variables.Var Table.a
    b = 0; // EjsS Model.Variables.Var Table.b
    c = 0; // EjsS Model.Variables.Var Table.c
    d = 0; // EjsS Model.Variables.Var Table.d
    e = 0; // EjsS Model.Variables.Var Table.e
    f = 0; // EjsS Model.Variables.Var Table.f
    letter = "A"; // EjsS Model.Variables.Var Table.letter
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -5; // EjsS Model.Variables.Var Table.ymin
    ymax = 5; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "select dropdown menu to explore symmetry"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    xi = 0; // EjsS Model.Variables.Var Table.xi
    yi = 0; // EjsS Model.Variables.Var Table.yi
    xiline = 0; // EjsS Model.Variables.Var Table.xiline
    yiline = 0; // EjsS Model.Variables.Var Table.yiline
    memorycolor = 0; // EjsS Model.Variables.Var Table.memorycolor
    ncountline = 200; // EjsS Model.Variables.Var Table.ncountline
    xilineset = new Array(ncountline); // EjsS Model.Variables.Var Table.xilineset
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.Var Table.xilineset
        xilineset[_i0] = 0;  // EjsS Model.Variables.Var Table.xilineset
      }
    }());
    yilineset = new Array(ncountline); // EjsS Model.Variables.Var Table.yilineset
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.Var Table.yilineset
        yilineset[_i0] = -10;  // EjsS Model.Variables.Var Table.yilineset
      }
    }());
    dxilineset = new Array(ncountline); // EjsS Model.Variables.Var Table.dxilineset
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.Var Table.dxilineset
        dxilineset[_i0] = 0;  // EjsS Model.Variables.Var Table.dxilineset
      }
    }());
    dyilineset = new Array(ncountline); // EjsS Model.Variables.Var Table.dyilineset
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.Var Table.dyilineset
        dyilineset[_i0] = 0;  // EjsS Model.Variables.Var Table.dyilineset
      }
    }());
    myscale = 1.07; // EjsS Model.Variables.Var Table.myscale
    countline = 0; // EjsS Model.Variables.Var Table.countline
  });

  _model.addToReset(function() {
    comboxselected = 0; // EjsS Model.Variables.combo.comboxselected
    comboxselected2 = 0; // EjsS Model.Variables.combo.comboxselected2
    comboxselected3 = 0; // EjsS Model.Variables.combo.comboxselected3
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    k = 9; // EjsS Model.Variables.numberblocks.k
    i = 0; // EjsS Model.Variables.numberblocks.i
    i2 = 11; // EjsS Model.Variables.numberblocks.i2
    j = 0; // EjsS Model.Variables.numberblocks.j
    vectorIndex = 0; // EjsS Model.Variables.numberblocks.vectorIndex
    n = 1; // EjsS Model.Variables.numberblocks.n
    nMax = 5; // EjsS Model.Variables.numberblocks.nMax
    nVectors = 10; // EjsS Model.Variables.numberblocks.nVectors
    nVectorsMax = 10; // EjsS Model.Variables.numberblocks.nVectorsMax
    nVectorsSq = nVectors*nVectors+1; // EjsS Model.Variables.numberblocks.nVectorsSq
    textpos = new Array(nVectorsSq); // EjsS Model.Variables.numberblocks.textpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numberblocks.textpos
        textpos[_i0] = "0";  // EjsS Model.Variables.numberblocks.textpos
      }
    }());
    colorVectors = new Array(nVectorsSq); // EjsS Model.Variables.numberblocks.colorVectors
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numberblocks.colorVectors
        colorVectors[_i0] = "rgba(255,200,0,1)";  // EjsS Model.Variables.numberblocks.colorVectors
      }
    }());
    x = new Array(nMax); // EjsS Model.Variables.numberblocks.x
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.numberblocks.x
        x[_i0] = 0;  // EjsS Model.Variables.numberblocks.x
      }
    }());
    y = new Array(nMax); // EjsS Model.Variables.numberblocks.y
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.numberblocks.y
        y[_i0] = 0;  // EjsS Model.Variables.numberblocks.y
      }
    }());
    posx = new Array(nVectorsSq); // EjsS Model.Variables.numberblocks.posx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numberblocks.posx
        posx[_i0] = 0.0;  // EjsS Model.Variables.numberblocks.posx
      }
    }());
    posy = new Array(nVectorsSq); // EjsS Model.Variables.numberblocks.posy
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.numberblocks.posy
        posy[_i0] = 0.0;  // EjsS Model.Variables.numberblocks.posy
      }
    }());
    factorresults = new Array(20); // EjsS Model.Variables.numberblocks.factorresults
    (function () {
      var _i0;
      for (_i0=0; _i0<20; _i0+=1) {  // EjsS Model.Variables.numberblocks.factorresults
        factorresults[_i0] = 0;  // EjsS Model.Variables.numberblocks.factorresults
      }
    }());
    factorresultsMax = 10; // EjsS Model.Variables.numberblocks.factorresultsMax
  });

  _model.addToReset(function() {
    A = new Array(9); // EjsS Model.Variables.letters.A
    Ainner = new Array(3); // EjsS Model.Variables.letters.Ainner
  });

  _model.addToReset(function() {
    elementinteracted = 0; // EjsS Model.Variables.interaction.elementinteracted
    score = 0; // EjsS Model.Variables.interaction.score
    scores = 0; // EjsS Model.Variables.interaction.scores
    scoredebug = new Array(100); // EjsS Model.Variables.interaction.scoredebug
    (function () {
      var _i0;
      for (_i0=0; _i0<100; _i0+=1) {  // EjsS Model.Variables.interaction.scoredebug
        scoredebug[_i0] = 0;  // EjsS Model.Variables.interaction.scoredebug
      }
    }());
    feedbacktext = ""; // EjsS Model.Variables.interaction.feedbacktext
    left = 50; // EjsS Model.Variables.interaction.left
    oddnumbersleft = 50; // EjsS Model.Variables.interaction.oddnumbersleft
    evennumbersleft = 50; // EjsS Model.Variables.interaction.evennumbersleft
    multiplenumbersleft = 100; // EjsS Model.Variables.interaction.multiplenumbersleft
    multiplenumbersleftonscreen = 100; // EjsS Model.Variables.interaction.multiplenumbersleftonscreen
    multiplenumbersleftonscreen2 = 100; // EjsS Model.Variables.interaction.multiplenumbersleftonscreen2
    factorresultsleftonscreen = 100; // EjsS Model.Variables.interaction.factorresultsleftonscreen
    alertcount = 1; // EjsS Model.Variables.interaction.alertcount
    oddtextpos = new Array(nVectorsSq); // EjsS Model.Variables.interaction.oddtextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.interaction.oddtextpos
        oddtextpos[_i0] = "0";  // EjsS Model.Variables.interaction.oddtextpos
      }
    }());
    eventextpos = new Array(nVectorsSq); // EjsS Model.Variables.interaction.eventextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.interaction.eventextpos
        eventextpos[_i0] = "0";  // EjsS Model.Variables.interaction.eventextpos
      }
    }());
    multipletextpos = new Array(nVectorsSq); // EjsS Model.Variables.interaction.multipletextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.interaction.multipletextpos
        multipletextpos[_i0] = "0";  // EjsS Model.Variables.interaction.multipletextpos
      }
    }());
    multipletextpos2 = new Array(nVectorsSq); // EjsS Model.Variables.interaction.multipletextpos2
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.interaction.multipletextpos2
        multipletextpos2[_i0] = "0";  // EjsS Model.Variables.interaction.multipletextpos2
      }
    }());
    factortextpos = new Array(nVectorsSq); // EjsS Model.Variables.interaction.factortextpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.interaction.factortextpos
        factortextpos[_i0] = "0";  // EjsS Model.Variables.interaction.factortextpos
      }
    }());
  });

  _model.addToReset(function() {
    colororiginal = colorVectors[0]; // EjsS Model.Variables.color.colororiginal
    colorodd = "rgba(255,0,0,1.0)"; // EjsS Model.Variables.color.colorodd
    coloreven = "rgba(0,255,0,1.0)"; // EjsS Model.Variables.color.coloreven
    colormultiples = "rgba(0,255,255,1.0)"; // EjsS Model.Variables.color.colormultiples
    colorfactors = 0; // EjsS Model.Variables.color.colorfactors
    colorhint = "rgba(255,255,0,1.0)"; // EjsS Model.Variables.color.colorhint
    numbercolor = new Array(nVectorsSq); // EjsS Model.Variables.color.numbercolor
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.color.numbercolor
        numbercolor[_i0] = "rgba(0,0,0,1.0)";  // EjsS Model.Variables.color.numbercolor
      }
    }());
    numbercolorblack = "rgba(0,0,0,1.0)"; // EjsS Model.Variables.color.numbercolorblack
    colordull = "rgba(192,192,192,0.5)"; // EjsS Model.Variables.color.colordull
  });

  _model.addToReset(function() {
    correcttext = ""; // EjsS Model.Variables.mirror.correcttext
    numberofinteraction = 0; // EjsS Model.Variables.mirror.numberofinteraction
    comboboxmode = 1; // EjsS Model.Variables.mirror.comboboxmode
    quizmode = false; // EjsS Model.Variables.mirror.quizmode
    quizmodeline = false; // EjsS Model.Variables.mirror.quizmodeline
    mirrorx = 0; // EjsS Model.Variables.mirror.mirrorx
    mirrory = 0; // EjsS Model.Variables.mirror.mirrory
    mirrorsizex = 0; // EjsS Model.Variables.mirror.mirrorsizex
    mirrorsizey = 10; // EjsS Model.Variables.mirror.mirrorsizey
    elementinteractedmirror = 0; // EjsS Model.Variables.mirror.elementinteractedmirror
    xtext = 0; // EjsS Model.Variables.mirror.xtext
    ytext = 0; // EjsS Model.Variables.mirror.ytext
    xtextmirror = 0; // EjsS Model.Variables.mirror.xtextmirror
    ytextmirror = 0; // EjsS Model.Variables.mirror.ytextmirror
    scalextext = 0; // EjsS Model.Variables.mirror.scalextext
    scaleytext = 0; // EjsS Model.Variables.mirror.scaleytext
    rotate = 0; // EjsS Model.Variables.mirror.rotate
    fontsize = "66.5vmin"; // EjsS Model.Variables.mirror.fontsize
    elementinteractedmirrorquiz = new Array(nVectorsSq); // EjsS Model.Variables.mirror.elementinteractedmirrorquiz
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.mirror.elementinteractedmirrorquiz
        elementinteractedmirrorquiz[_i0] = 0;  // EjsS Model.Variables.mirror.elementinteractedmirrorquiz
      }
    }());
    arrayobject = new Array(nVectorsSq); // EjsS Model.Variables.mirror.arrayobject
    arraymirror90 = [0,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,30,29,28,27,26,25,24,23,22,21,40,39,38,37,36,35,34,33,32,31,50,49,48,47,46,45,44,43,42,41,60,59,58,57,56,55,54,53,52,51,70,69,68,67,66,65,64,63,62,61,80,79,78,77,76,75,74,73,72,71,90,89,88,87,86,85,84,83,82,81,100,99,98,97,96,95,94,93,92,91]; // EjsS Model.Variables.mirror.arraymirror90
    arraymirror00 = [0,91,92,93,94,95,96,97,98,99,100,81,82,83,84,85,86,87,88,89,90,71,72,73,74,75,76,77,78,79,80,61,62,63,64,65,66,67,68,69,70,51,52,53,54,55,56,57,58,59,60,41,42,43,44,45,46,47,48,49,50,31,32,33,34,35,36,37,38,39,40,21,22,23,24,25,26,27,28,29,30,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]; // EjsS Model.Variables.mirror.arraymirror00
    arraymirror45 = [0,100,90,80,70,60,50,40,30,20,10,99,89,79,69,59,49,39,29,19,9,98,88,78,68,58,48,38,28,18,8,97,87,77,67,57,47,37,27,17,7,96,86,76,66,56,46,36,26,16,6,95,85,75,65,55,45,35,25,15,5,94,84,74,64,54,44,34,24,14,4,93,83,73,63,53,43,33,23,13,3,92,82,72,62,52,42,32,22,12,2,91,81,71,61,51,41,31,21,11,1]; // EjsS Model.Variables.mirror.arraymirror45
    arraymirrorminus45 = [0,1,11,21,31,41,51,61,71,81,91,2,12,22,32,42,52,62,72,82,92,3,13,23,33,43,53,63,73,83,93,4,14,24,34,44,54,64,74,84,94,5,15,25,35,45,55,65,75,85,95,6,16,26,36,46,56,66,76,86,96,7,17,27,37,47,57,67,77,87,97,8,18,28,38,48,58,68,78,88,98,9,19,29,39,49,59,69,79,89,99,10,20,30,40,50,60,70,80,90,100]; // EjsS Model.Variables.mirror.arraymirrorminus45
    feedbackshow = 1; // EjsS Model.Variables.mirror.feedbackshow
  });

  _model.addToReset(function() {
    xilineset90 = new Array(ncountline); // EjsS Model.Variables.drawline.xilineset90
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.xilineset90
        xilineset90[_i0] = 0;  // EjsS Model.Variables.drawline.xilineset90
      }
    }());
    yilineset90 = new Array(ncountline); // EjsS Model.Variables.drawline.yilineset90
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.yilineset90
        yilineset90[_i0] = -10;  // EjsS Model.Variables.drawline.yilineset90
      }
    }());
    dxilineset90 = new Array(ncountline); // EjsS Model.Variables.drawline.dxilineset90
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dxilineset90
        dxilineset90[_i0] = 0;  // EjsS Model.Variables.drawline.dxilineset90
      }
    }());
    dyilineset90 = new Array(ncountline); // EjsS Model.Variables.drawline.dyilineset90
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dyilineset90
        dyilineset90[_i0] = 0;  // EjsS Model.Variables.drawline.dyilineset90
      }
    }());
    xilineset00 = new Array(ncountline); // EjsS Model.Variables.drawline.xilineset00
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.xilineset00
        xilineset00[_i0] = 0;  // EjsS Model.Variables.drawline.xilineset00
      }
    }());
    yilineset00 = new Array(ncountline); // EjsS Model.Variables.drawline.yilineset00
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.yilineset00
        yilineset00[_i0] = -10;  // EjsS Model.Variables.drawline.yilineset00
      }
    }());
    dxilineset00 = new Array(ncountline); // EjsS Model.Variables.drawline.dxilineset00
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dxilineset00
        dxilineset00[_i0] = 0;  // EjsS Model.Variables.drawline.dxilineset00
      }
    }());
    dyilineset00 = new Array(ncountline); // EjsS Model.Variables.drawline.dyilineset00
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dyilineset00
        dyilineset00[_i0] = 0;  // EjsS Model.Variables.drawline.dyilineset00
      }
    }());
    xilineset45 = new Array(ncountline); // EjsS Model.Variables.drawline.xilineset45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.xilineset45
        xilineset45[_i0] = 0;  // EjsS Model.Variables.drawline.xilineset45
      }
    }());
    yilineset45 = new Array(ncountline); // EjsS Model.Variables.drawline.yilineset45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.yilineset45
        yilineset45[_i0] = -10;  // EjsS Model.Variables.drawline.yilineset45
      }
    }());
    dxilineset45 = new Array(ncountline); // EjsS Model.Variables.drawline.dxilineset45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dxilineset45
        dxilineset45[_i0] = 0;  // EjsS Model.Variables.drawline.dxilineset45
      }
    }());
    dyilineset45 = new Array(ncountline); // EjsS Model.Variables.drawline.dyilineset45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dyilineset45
        dyilineset45[_i0] = 0;  // EjsS Model.Variables.drawline.dyilineset45
      }
    }());
    xilinesetn45 = new Array(ncountline); // EjsS Model.Variables.drawline.xilinesetn45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.xilinesetn45
        xilinesetn45[_i0] = 0;  // EjsS Model.Variables.drawline.xilinesetn45
      }
    }());
    yilinesetn45 = new Array(ncountline); // EjsS Model.Variables.drawline.yilinesetn45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.yilinesetn45
        yilinesetn45[_i0] = -10;  // EjsS Model.Variables.drawline.yilinesetn45
      }
    }());
    dxilinesetn45 = new Array(ncountline); // EjsS Model.Variables.drawline.dxilinesetn45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dxilinesetn45
        dxilinesetn45[_i0] = 0;  // EjsS Model.Variables.drawline.dxilinesetn45
      }
    }());
    dyilinesetn45 = new Array(ncountline); // EjsS Model.Variables.drawline.dyilinesetn45
    (function () {
      var _i0;
      for (_i0=0; _i0<ncountline; _i0+=1) {  // EjsS Model.Variables.drawline.dyilinesetn45
        dyilinesetn45[_i0] = 0;  // EjsS Model.Variables.drawline.dyilinesetn45
      }
    }());
    scoreline = false; // EjsS Model.Variables.drawline.scoreline
  });

  _model.addToReset(function() {
    elementtouched = 0; // EjsS Model.Variables.drawlinequiz.elementtouched
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  function hola () {  // > CustomCode.hola:1
  _update();  // > CustomCode.hola:2
  }  // > CustomCode.hola:3

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function changeOrientation() {  // > CustomCode.changeorientation:1
     // > CustomCode.changeorientation:2
  var k =0.9 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeorientation:3
  var kepub =0.9 ;  // > CustomCode.changeorientation:4
  // check platform for Apps  // > CustomCode.changeorientation:5
  try {  // > CustomCode.changeorientation:6
    var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeorientation:7
    var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeorientation:8
  } catch(e) {  // > CustomCode.changeorientation:9
    var iOSapp = false;  // > CustomCode.changeorientation:10
    var Androidapp = false;  // > CustomCode.changeorientation:11
  }  // > CustomCode.changeorientation:12
  // check platform for web browsers  // > CustomCode.changeorientation:13
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeorientation:14
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeorientation:15
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeorientation:16
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeorientation:17
  //navigator  // > CustomCode.changeorientation:18
  var Firefox = navigator.userAgent.indexOf("Firefox") != -1;  // > CustomCode.changeorientation:19
     // > CustomCode.changeorientation:20
  switch (window.orientation) {  // > CustomCode.changeorientation:21
    case 0:  // > CustomCode.changeorientation:22
    case 180:  // > CustomCode.changeorientation:23
      this.screenOrientation = 'portrait';  // > CustomCode.changeorientation:24
      if (iOSapp){ // does not seems to work  // > CustomCode.changeorientation:25
          // > CustomCode.changeorientation:26
        return window.screen.height*k;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeorientation:27
        // > CustomCode.changeorientation:28
      }  // > CustomCode.changeorientation:29
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeorientation:30
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeorientation:31
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeorientation:32
        // return window.screen.height;  // > CustomCode.changeorientation:33
        //  return window.innerHeight;  // > CustomCode.changeorientation:34
        // return document.documentElement.clientHeight;  // > CustomCode.changeorientation:35
      }  // > CustomCode.changeorientation:36
       // > CustomCode.changeorientation:37
      else {  // > CustomCode.changeorientation:38
         // > CustomCode.changeorientation:39
        return 100*k+"vh";  // > CustomCode.changeorientation:40
      }  // > CustomCode.changeorientation:41
      break;  // > CustomCode.changeorientation:42
    case 90:  // > CustomCode.changeorientation:43
    case -90:  // > CustomCode.changeorientation:44
      this.screenOrientation = 'landscape';  // > CustomCode.changeorientation:45
     // > CustomCode.changeorientation:46
      if (iOSapp){ // App  // > CustomCode.changeorientation:47
        return window.screen.width*k;    // > CustomCode.changeorientation:48
        // return window.screen.height;  // > CustomCode.changeorientation:49
        //  return window.innerHeight;  // > CustomCode.changeorientation:50
        //  return document.documentElement.clientHeight;  // > CustomCode.changeorientation:51
      }  // > CustomCode.changeorientation:52
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeorientation:53
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeorientation:54
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeorientation:55
        // return window.screen.height;  // > CustomCode.changeorientation:56
        //  return window.innerHeight;  // > CustomCode.changeorientation:57
        // return document.documentElement.clientHeight;  // > CustomCode.changeorientation:58
      }  // > CustomCode.changeorientation:59
       // > CustomCode.changeorientation:60
      else {  // > CustomCode.changeorientation:61
        return 100*k+"vh";  // > CustomCode.changeorientation:62
        }  // > CustomCode.changeorientation:63
      break;  // > CustomCode.changeorientation:64
    default:  // > CustomCode.changeorientation:65
      this.screenOrientation = 'unknown';  // > CustomCode.changeorientation:66
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeorientation:67
       if (Firefox){  // > CustomCode.changeorientation:68
        return window.innerHeight*k;  // > CustomCode.changeorientation:69
        }  // > CustomCode.changeorientation:70
          // > CustomCode.changeorientation:71
        else {  // > CustomCode.changeorientation:72
          return 100*k+"vh";  // > CustomCode.changeorientation:73
  }  // > CustomCode.changeorientation:74
  }  // > CustomCode.changeorientation:75
     // > CustomCode.changeorientation:76
  }  // > CustomCode.changeorientation:77
     // > CustomCode.changeorientation:78

  function OnOrientationChange() {  // > CustomCode.OnOrientationChange:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.OnOrientationChange:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.OnOrientationChange:3
  //else  // > CustomCode.OnOrientationChange:4
  //  _view.mytext.setText("nada:");  // > CustomCode.OnOrientationChange:5
  // check platform for Apps  // > CustomCode.OnOrientationChange:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.OnOrientationChange:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.OnOrientationChange:8
  // check platform for web browsers  // > CustomCode.OnOrientationChange:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.OnOrientationChange:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.OnOrientationChange:14
  switch (window.orientation) {  // > CustomCode.OnOrientationChange:15
    case 0:  // > CustomCode.OnOrientationChange:16
    case 180:  // > CustomCode.OnOrientationChange:17
      this.screenOrientation = 'portrait';  // > CustomCode.OnOrientationChange:18
    //  if (iOSapp){ // does not seems to work  // > CustomCode.OnOrientationChange:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.OnOrientationChange:20
     //   return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.OnOrientationChange:21
        // return window.screen.height;  // > CustomCode.OnOrientationChange:22
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:23
        // return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:24
     // }  // > CustomCode.OnOrientationChange:25
        // > CustomCode.OnOrientationChange:26
     // else {  // > CustomCode.OnOrientationChange:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:28
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:29
     // }  // > CustomCode.OnOrientationChange:30
      break;  // > CustomCode.OnOrientationChange:31
    case 90:  // > CustomCode.OnOrientationChange:32
    case -90:  // > CustomCode.OnOrientationChange:33
      this.screenOrientation = 'landscape';  // > CustomCode.OnOrientationChange:34
     // if (iOSapp){ // App  // > CustomCode.OnOrientationChange:35
     //   return window.screen.width*0.7;    // > CustomCode.OnOrientationChange:36
        // return window.screen.height;  // > CustomCode.OnOrientationChange:37
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:38
        //  return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:39
     // }  // > CustomCode.OnOrientationChange:40
        // > CustomCode.OnOrientationChange:41
    //  else { // browser Android and PC  // > CustomCode.OnOrientationChange:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:43
        // alert("browser Android and PC");  // > CustomCode.OnOrientationChange:44
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:45
    //  }  // > CustomCode.OnOrientationChange:46
      break;  // > CustomCode.OnOrientationChange:47
    default:  // > CustomCode.OnOrientationChange:48
      this.screenOrientation = 'unknown';  // > CustomCode.OnOrientationChange:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.OnOrientationChange:50
      return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:51
  }  // > CustomCode.OnOrientationChange:52
  }  // > CustomCode.OnOrientationChange:53

  //https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript  // > CustomCode.arraysEqual:1
  //sample usage  // > CustomCode.arraysEqual:2
  // arraysEqual([[1,2],3], [[1,2],3]);  // > CustomCode.arraysEqual:3
  function arraysEqual(a,b) {  // > CustomCode.arraysEqual:4
      /*  // > CustomCode.arraysEqual:5
          Array-aware equality checker:  // > CustomCode.arraysEqual:6
          Returns whether arguments a and b are == to each other;  // > CustomCode.arraysEqual:7
          however if they are equal-lengthed arrays, returns whether their   // > CustomCode.arraysEqual:8
          elements are pairwise == to each other recursively under this  // > CustomCode.arraysEqual:9
          definition.  // > CustomCode.arraysEqual:10
      */  // > CustomCode.arraysEqual:11
      if (a instanceof Array && b instanceof Array) {  // > CustomCode.arraysEqual:12
          if (a.length!=b.length)  // assert same length  // > CustomCode.arraysEqual:13
              return false;  // > CustomCode.arraysEqual:14
          for(var i=0; i<a.length; i++)  // assert each element equal  // > CustomCode.arraysEqual:15
              if (!arraysEqual(a[i],b[i]))  // > CustomCode.arraysEqual:16
                  return false;  // > CustomCode.arraysEqual:17
          return true;  // > CustomCode.arraysEqual:18
      } else {  // > CustomCode.arraysEqual:19
          return a==b;  // if not both arrays, should be the same  // > CustomCode.arraysEqual:20
      }  // > CustomCode.arraysEqual:21
  }  // > CustomCode.arraysEqual:22

  function vertical () {  // > CustomCode.vertical:1
  //if (elementinteracted<0)elementinteracted=-11 // fix bug of 11 selected  // > CustomCode.vertical:2
  //if (_view.comboBox.getProperty("SelectedOptions")=="vertical"){  // > CustomCode.vertical:3
      // > CustomCode.vertical:4
  if (comboboxmode==1&&quizmode==false){  // > CustomCode.vertical:5
    //textshow=true;  // > CustomCode.vertical:6
    xtextmirror = -xtext;  // > CustomCode.vertical:7
    ytextmirror = ytext;  // > CustomCode.vertical:8
    scalextext = -1*myscale;  // > CustomCode.vertical:9
      // > CustomCode.vertical:10
    scaleytext = 1; //1 is default do nothing  // > CustomCode.vertical:11
    rotate = 0;  // > CustomCode.vertical:12
    //for (var i=1; i<100 /* Iterations */ ; i++) {  // > CustomCode.vertical:13
    //colorVectors[i] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:14
  //}  // > CustomCode.vertical:15
  if (elementinteracted>0&&elementinteracted<11){ // for 1 to 10   // > CustomCode.vertical:16
  elementinteractedmirror=(11-elementinteracted);  // > CustomCode.vertical:17
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:18
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:19
    }  // > CustomCode.vertical:20
    else {  // > CustomCode.vertical:21
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:22
   }  // > CustomCode.vertical:23
   }  // > CustomCode.vertical:24
   else if (elementinteracted>10&&elementinteracted<21){ // for 11 to 20  // > CustomCode.vertical:25
  elementinteractedmirror=(31-elementinteracted);  // > CustomCode.vertical:26
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:27
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:28
    }  // > CustomCode.vertical:29
    else {  // > CustomCode.vertical:30
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:31
   }  // > CustomCode.vertical:32
   }  // > CustomCode.vertical:33
   //  // > CustomCode.vertical:34
   else if (elementinteracted>20&&elementinteracted<31){ // for 21 to 30  // > CustomCode.vertical:35
  elementinteractedmirror=(51-elementinteracted);  // > CustomCode.vertical:36
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:37
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:38
    }  // > CustomCode.vertical:39
    else {  // > CustomCode.vertical:40
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:41
   }  // > CustomCode.vertical:42
   }  // > CustomCode.vertical:43
   //  // > CustomCode.vertical:44
   else if (elementinteracted>30&&elementinteracted<41){ // for 31 to 40  // > CustomCode.vertical:45
  elementinteractedmirror=(71-elementinteracted);  // > CustomCode.vertical:46
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:47
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:48
    }  // > CustomCode.vertical:49
    else {  // > CustomCode.vertical:50
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:51
   }  // > CustomCode.vertical:52
   }  // > CustomCode.vertical:53
   //  // > CustomCode.vertical:54
   else if (elementinteracted>40&&elementinteracted<51){ // for 41 to 50  // > CustomCode.vertical:55
  elementinteractedmirror=(91-elementinteracted);  // > CustomCode.vertical:56
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:57
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:58
    }  // > CustomCode.vertical:59
    else {  // > CustomCode.vertical:60
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:61
   }  // > CustomCode.vertical:62
   }  // > CustomCode.vertical:63
   //  // > CustomCode.vertical:64
   else if (elementinteracted<61){ // for 51 to 60  // > CustomCode.vertical:65
  elementinteractedmirror=(111-elementinteracted);  // > CustomCode.vertical:66
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:67
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:68
    }  // > CustomCode.vertical:69
    else {  // > CustomCode.vertical:70
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:71
   }  // > CustomCode.vertical:72
   }  // > CustomCode.vertical:73
   //  // > CustomCode.vertical:74
   else if (elementinteracted<71){ // for 61 to 70  // > CustomCode.vertical:75
  elementinteractedmirror=(131-elementinteracted);  // > CustomCode.vertical:76
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:77
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:78
    }  // > CustomCode.vertical:79
    else {  // > CustomCode.vertical:80
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:81
   }  // > CustomCode.vertical:82
   }  // > CustomCode.vertical:83
     // > CustomCode.vertical:84
   //  // > CustomCode.vertical:85
   else if (elementinteracted<81){ // for 71 to 80  // > CustomCode.vertical:86
  elementinteractedmirror=(151-elementinteracted);  // > CustomCode.vertical:87
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:88
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:89
    }  // > CustomCode.vertical:90
    else {  // > CustomCode.vertical:91
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:92
   }  // > CustomCode.vertical:93
   }  // > CustomCode.vertical:94
   //  // > CustomCode.vertical:95
   else if (elementinteracted<91){ // for 81 to 90  // > CustomCode.vertical:96
  elementinteractedmirror=(171-elementinteracted);  // > CustomCode.vertical:97
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:98
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:99
    }  // > CustomCode.vertical:100
    else {  // > CustomCode.vertical:101
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:102
   }  // > CustomCode.vertical:103
   }  // > CustomCode.vertical:104
   //  // > CustomCode.vertical:105
   else if (elementinteracted<101){ // for 91 to 100  // > CustomCode.vertical:106
  elementinteractedmirror=(191-elementinteracted);  // > CustomCode.vertical:107
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.vertical:108
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.vertical:109
    }  // > CustomCode.vertical:110
    else {  // > CustomCode.vertical:111
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.vertical:112
   }  // > CustomCode.vertical:113
   }  // > CustomCode.vertical:114
     // > CustomCode.vertical:115
     // > CustomCode.vertical:116
   }  // > CustomCode.vertical:117
  }  // > CustomCode.vertical:118

  function horizontal () {  // > CustomCode.horizontal:1
  //if (_view.comboBox.getProperty("SelectedOptions")=="horizontal"){  // > CustomCode.horizontal:2
    //for (var i=1; i<100 /* Iterations */ ; i++) {  // > CustomCode.horizontal:3
    //colorVectors[i] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:4
  //}  // > CustomCode.horizontal:5
  if (comboboxmode==2&&quizmode==false){  // > CustomCode.horizontal:6
     xtextmirror = xtext;  // > CustomCode.horizontal:7
    ytextmirror = -ytext;  // > CustomCode.horizontal:8
    scalextext = 1*myscale;  // > CustomCode.horizontal:9
    scaleytext = -1; //1 is default do nothing  // > CustomCode.horizontal:10
    rotate = 0;  // > CustomCode.horizontal:11
  for (var i=0; i<10 /* Iterations */ ; i++) { //special codes  // > CustomCode.horizontal:12
      // > CustomCode.horizontal:13
      // > CustomCode.horizontal:14
  if (elementinteracted==(i*10+1)){ // for 1,11,21,31,....  // > CustomCode.horizontal:15
  elementinteractedmirror=(92-elementinteracted);  // > CustomCode.horizontal:16
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:17
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:18
    }  // > CustomCode.horizontal:19
    else {  // > CustomCode.horizontal:20
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:21
   }  // > CustomCode.horizontal:22
   }  // > CustomCode.horizontal:23
   //  // > CustomCode.horizontal:24
   if (elementinteracted==(i*10+2)){ // for 2,12,22,32,....  // > CustomCode.horizontal:25
  elementinteractedmirror=(94-elementinteracted);  // > CustomCode.horizontal:26
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:27
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:28
    }  // > CustomCode.horizontal:29
    else {  // > CustomCode.horizontal:30
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:31
   }  // > CustomCode.horizontal:32
   }  // > CustomCode.horizontal:33
   //  // > CustomCode.horizontal:34
   if (elementinteracted==(i*10+3)){ // for 3,13,23,33,....  // > CustomCode.horizontal:35
  elementinteractedmirror=(96-elementinteracted);  // > CustomCode.horizontal:36
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:37
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:38
    }  // > CustomCode.horizontal:39
    else {  // > CustomCode.horizontal:40
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:41
   }  // > CustomCode.horizontal:42
   }  // > CustomCode.horizontal:43
   //  // > CustomCode.horizontal:44
   if (elementinteracted==(i*10+4)){ // for 4,14,24,34,....  // > CustomCode.horizontal:45
  elementinteractedmirror=(98-elementinteracted);  // > CustomCode.horizontal:46
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:47
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:48
    }  // > CustomCode.horizontal:49
    else {  // > CustomCode.horizontal:50
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:51
   }  // > CustomCode.horizontal:52
   }  // > CustomCode.horizontal:53
   //  // > CustomCode.horizontal:54
   if (elementinteracted==(i*10+5)){ // for 5,15,25,35,....  // > CustomCode.horizontal:55
  elementinteractedmirror=(100-elementinteracted);  // > CustomCode.horizontal:56
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:57
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:58
    }  // > CustomCode.horizontal:59
    else {  // > CustomCode.horizontal:60
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:61
   }  // > CustomCode.horizontal:62
   }  // > CustomCode.horizontal:63
   //  // > CustomCode.horizontal:64
   if (elementinteracted==(i*10+6)){ // for 6,16,26,36,....  // > CustomCode.horizontal:65
  elementinteractedmirror=(102-elementinteracted);  // > CustomCode.horizontal:66
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:67
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:68
    }  // > CustomCode.horizontal:69
    else {  // > CustomCode.horizontal:70
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:71
   }  // > CustomCode.horizontal:72
   }  // > CustomCode.horizontal:73
   //  // > CustomCode.horizontal:74
   if (elementinteracted==(i*10+7)){ // for 7,17,27,37,....  // > CustomCode.horizontal:75
  elementinteractedmirror=(104-elementinteracted);  // > CustomCode.horizontal:76
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:77
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:78
    }  // > CustomCode.horizontal:79
    else {  // > CustomCode.horizontal:80
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:81
   }  // > CustomCode.horizontal:82
   }  // > CustomCode.horizontal:83
   //  // > CustomCode.horizontal:84
   if (elementinteracted==(i*10+8)){ // for 8,18,28,38,....  // > CustomCode.horizontal:85
  elementinteractedmirror=(106-elementinteracted);  // > CustomCode.horizontal:86
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:87
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:88
    }  // > CustomCode.horizontal:89
    else {  // > CustomCode.horizontal:90
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:91
   }  // > CustomCode.horizontal:92
   }  // > CustomCode.horizontal:93
   //  // > CustomCode.horizontal:94
   if (elementinteracted==(i*10+9)){ // for 9,19,29,39,....  // > CustomCode.horizontal:95
  elementinteractedmirror=(108-elementinteracted);  // > CustomCode.horizontal:96
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:97
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:98
    }  // > CustomCode.horizontal:99
    else {  // > CustomCode.horizontal:100
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:101
   }  // > CustomCode.horizontal:102
   }  // > CustomCode.horizontal:103
   //  // > CustomCode.horizontal:104
   if (elementinteracted==(i*10+10)){ // for 10,20,30,40,....  // > CustomCode.horizontal:105
  elementinteractedmirror=(110-elementinteracted);  // > CustomCode.horizontal:106
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.horizontal:107
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.horizontal:108
    }  // > CustomCode.horizontal:109
    else {  // > CustomCode.horizontal:110
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.horizontal:111
   }  // > CustomCode.horizontal:112
   }  // > CustomCode.horizontal:113
     // > CustomCode.horizontal:114
     // > CustomCode.horizontal:115
   }  // > CustomCode.horizontal:116
   }  // > CustomCode.horizontal:117
  }  // > CustomCode.horizontal:118

  function line45 () {  // > CustomCode.line45:1
  //if (_view.comboBox.getProperty("SelectedOptions")=="45 line"){  // > CustomCode.line45:2
    //for (var i=1; i<100 /* Iterations */ ; i++) {  // > CustomCode.line45:3
    //colorVectors[i] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:4
  //}  // > CustomCode.line45:5
  if (comboboxmode==3&&quizmode==false){  // > CustomCode.line45:6
     // > CustomCode.line45:7
   // xtextmirror = ytext;  // > CustomCode.line45:8
    //ytextmirror = xtext;  // > CustomCode.line45:9
     xtextmirror = ytext;  // > CustomCode.line45:10
    ytextmirror = xtext;  // > CustomCode.line45:11
   // scalextext = -1;  // > CustomCode.line45:12
   // scaleytext = -1; //1 is default do nothing  // > CustomCode.line45:13
     scalextext = -1;  // > CustomCode.line45:14
    scaleytext = 1*myscale; //1 is default do nothing  // > CustomCode.line45:15
   rotate = pi/2;  // > CustomCode.line45:16
     // > CustomCode.line45:17
   //manually  // > CustomCode.line45:18
  if (elementinteracted==1){ // for 1  // > CustomCode.line45:19
  elementinteractedmirror=100;  // > CustomCode.line45:20
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:21
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:22
    }  // > CustomCode.line45:23
    else {  // > CustomCode.line45:24
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:25
   }  // > CustomCode.line45:26
   }  // > CustomCode.line45:27
     //manually  // > CustomCode.line45:28
  if (elementinteracted==2){ // for 1  // > CustomCode.line45:29
  elementinteractedmirror=90;  // > CustomCode.line45:30
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:31
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:32
    }  // > CustomCode.line45:33
    else {  // > CustomCode.line45:34
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:35
   }  // > CustomCode.line45:36
   }  // > CustomCode.line45:37
     //manually  // > CustomCode.line45:38
  if (elementinteracted==3){ // for 1  // > CustomCode.line45:39
  elementinteractedmirror=80;  // > CustomCode.line45:40
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:41
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:42
    }  // > CustomCode.line45:43
    else {  // > CustomCode.line45:44
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:45
   }  // > CustomCode.line45:46
   }  // > CustomCode.line45:47
     //manually  // > CustomCode.line45:48
  if (elementinteracted==4){ // for 1  // > CustomCode.line45:49
  elementinteractedmirror=70;  // > CustomCode.line45:50
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:51
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:52
    }  // > CustomCode.line45:53
    else {  // > CustomCode.line45:54
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:55
   }  // > CustomCode.line45:56
   }  // > CustomCode.line45:57
     //manually  // > CustomCode.line45:58
  if (elementinteracted==5){ // for 1  // > CustomCode.line45:59
  elementinteractedmirror=60;  // > CustomCode.line45:60
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:61
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:62
    }  // > CustomCode.line45:63
    else {  // > CustomCode.line45:64
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:65
   }  // > CustomCode.line45:66
   }  // > CustomCode.line45:67
     //manually  // > CustomCode.line45:68
  if (elementinteracted==6){ // for 1  // > CustomCode.line45:69
  elementinteractedmirror=50;  // > CustomCode.line45:70
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:71
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:72
    }  // > CustomCode.line45:73
    else {  // > CustomCode.line45:74
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:75
   }  // > CustomCode.line45:76
   }  // > CustomCode.line45:77
     //manually  // > CustomCode.line45:78
  if (elementinteracted==7){ // for 1  // > CustomCode.line45:79
  elementinteractedmirror=40;  // > CustomCode.line45:80
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:81
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:82
    }  // > CustomCode.line45:83
    else {  // > CustomCode.line45:84
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:85
   }  // > CustomCode.line45:86
   }  // > CustomCode.line45:87
     //manually  // > CustomCode.line45:88
  if (elementinteracted==8){ // for 8  // > CustomCode.line45:89
  elementinteractedmirror=30;  // > CustomCode.line45:90
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:91
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:92
    }  // > CustomCode.line45:93
    else {  // > CustomCode.line45:94
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:95
   }  // > CustomCode.line45:96
   }  // > CustomCode.line45:97
     //manually  // > CustomCode.line45:98
  if (elementinteracted==9){ // for 9  // > CustomCode.line45:99
  elementinteractedmirror=20;  // > CustomCode.line45:100
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:101
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:102
    }  // > CustomCode.line45:103
    else {  // > CustomCode.line45:104
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:105
   }  // > CustomCode.line45:106
   }  // > CustomCode.line45:107
   // 11 to 20 minus 19  // > CustomCode.line45:108
    //manually  // > CustomCode.line45:109
  else if (elementinteracted==11){ // for 1  // > CustomCode.line45:110
  elementinteractedmirror=99;  // > CustomCode.line45:111
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:112
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:113
    }  // > CustomCode.line45:114
    else {  // > CustomCode.line45:115
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:116
   }  // > CustomCode.line45:117
   }  // > CustomCode.line45:118
     //manually  // > CustomCode.line45:119
  if (elementinteracted==12){ // for 1  // > CustomCode.line45:120
  elementinteractedmirror=89;  // > CustomCode.line45:121
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:122
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:123
    }  // > CustomCode.line45:124
    else {  // > CustomCode.line45:125
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:126
   }  // > CustomCode.line45:127
   }  // > CustomCode.line45:128
     //manually  // > CustomCode.line45:129
  if (elementinteracted==13){ // for 1  // > CustomCode.line45:130
  elementinteractedmirror=79;  // > CustomCode.line45:131
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:132
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:133
    }  // > CustomCode.line45:134
    else {  // > CustomCode.line45:135
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:136
   }  // > CustomCode.line45:137
   }  // > CustomCode.line45:138
     //manually  // > CustomCode.line45:139
  if (elementinteracted==14){ // for 1  // > CustomCode.line45:140
  elementinteractedmirror=69;  // > CustomCode.line45:141
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:142
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:143
    }  // > CustomCode.line45:144
    else {  // > CustomCode.line45:145
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:146
   }  // > CustomCode.line45:147
   }  // > CustomCode.line45:148
     //manually  // > CustomCode.line45:149
  if (elementinteracted==15){ // for 1  // > CustomCode.line45:150
  elementinteractedmirror=59;  // > CustomCode.line45:151
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:152
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:153
    }  // > CustomCode.line45:154
    else {  // > CustomCode.line45:155
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:156
   }  // > CustomCode.line45:157
   }  // > CustomCode.line45:158
     //manually  // > CustomCode.line45:159
  if (elementinteracted==16){ // for 1  // > CustomCode.line45:160
  elementinteractedmirror=49;  // > CustomCode.line45:161
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:162
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:163
    }  // > CustomCode.line45:164
    else {  // > CustomCode.line45:165
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:166
   }  // > CustomCode.line45:167
   }  // > CustomCode.line45:168
     //manually  // > CustomCode.line45:169
  if (elementinteracted==17){ // for 1  // > CustomCode.line45:170
  elementinteractedmirror=39;  // > CustomCode.line45:171
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:172
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:173
    }  // > CustomCode.line45:174
    else {  // > CustomCode.line45:175
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:176
   }  // > CustomCode.line45:177
   }  // > CustomCode.line45:178
     //manually  // > CustomCode.line45:179
  if (elementinteracted==18){ // for 8  // > CustomCode.line45:180
  elementinteractedmirror=29;  // > CustomCode.line45:181
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:182
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:183
    }  // > CustomCode.line45:184
    else {  // > CustomCode.line45:185
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:186
   }  // > CustomCode.line45:187
   }  // > CustomCode.line45:188
     //manually  // > CustomCode.line45:189
  if (elementinteracted==20){ // for 9  // > CustomCode.line45:190
  elementinteractedmirror=9;  // > CustomCode.line45:191
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:192
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:193
    }  // > CustomCode.line45:194
    else {  // > CustomCode.line45:195
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:196
   }  // > CustomCode.line45:197
   }  // > CustomCode.line45:198
   // 21 to 30 minus 28  // > CustomCode.line45:199
    //manually  // > CustomCode.line45:200
  else if (elementinteracted==21){ // for 1  // > CustomCode.line45:201
  elementinteractedmirror=98;  // > CustomCode.line45:202
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:203
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:204
    }  // > CustomCode.line45:205
    else {  // > CustomCode.line45:206
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:207
   }  // > CustomCode.line45:208
   }  // > CustomCode.line45:209
     //manually  // > CustomCode.line45:210
  if (elementinteracted==22){ // for 1  // > CustomCode.line45:211
  elementinteractedmirror=88;  // > CustomCode.line45:212
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:213
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:214
    }  // > CustomCode.line45:215
    else {  // > CustomCode.line45:216
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:217
   }  // > CustomCode.line45:218
   }  // > CustomCode.line45:219
     //manually  // > CustomCode.line45:220
  if (elementinteracted==23){ // for 1  // > CustomCode.line45:221
  elementinteractedmirror=78;  // > CustomCode.line45:222
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:223
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:224
    }  // > CustomCode.line45:225
    else {  // > CustomCode.line45:226
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:227
   }  // > CustomCode.line45:228
   }  // > CustomCode.line45:229
     //manually  // > CustomCode.line45:230
  if (elementinteracted==24){ // for 1  // > CustomCode.line45:231
  elementinteractedmirror=68;  // > CustomCode.line45:232
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:233
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:234
    }  // > CustomCode.line45:235
    else {  // > CustomCode.line45:236
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:237
   }  // > CustomCode.line45:238
   }  // > CustomCode.line45:239
     //manually  // > CustomCode.line45:240
  if (elementinteracted==25){ // for 1  // > CustomCode.line45:241
  elementinteractedmirror=58;  // > CustomCode.line45:242
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:243
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:244
    }  // > CustomCode.line45:245
    else {  // > CustomCode.line45:246
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:247
   }  // > CustomCode.line45:248
   }  // > CustomCode.line45:249
     //manually  // > CustomCode.line45:250
  if (elementinteracted==26){ // for 1  // > CustomCode.line45:251
  elementinteractedmirror=48;  // > CustomCode.line45:252
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:253
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:254
    }  // > CustomCode.line45:255
    else {  // > CustomCode.line45:256
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:257
   }  // > CustomCode.line45:258
   }  // > CustomCode.line45:259
     //manually  // > CustomCode.line45:260
  if (elementinteracted==27){ // for 1  // > CustomCode.line45:261
  elementinteractedmirror=38;  // > CustomCode.line45:262
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:263
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:264
    }  // > CustomCode.line45:265
    else {  // > CustomCode.line45:266
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:267
   }  // > CustomCode.line45:268
   }  // > CustomCode.line45:269
     //manually  // > CustomCode.line45:270
  if (elementinteracted==29){ // for 8  // > CustomCode.line45:271
  elementinteractedmirror=18;  // > CustomCode.line45:272
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:273
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:274
    }  // > CustomCode.line45:275
    else {  // > CustomCode.line45:276
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:277
   }  // > CustomCode.line45:278
   }  // > CustomCode.line45:279
     //manually  // > CustomCode.line45:280
  if (elementinteracted==30){ // for 9  // > CustomCode.line45:281
  elementinteractedmirror=8;  // > CustomCode.line45:282
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:283
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:284
    }  // > CustomCode.line45:285
    else {  // > CustomCode.line45:286
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:287
   }  // > CustomCode.line45:288
   }  // > CustomCode.line45:289
   // 31 to 40 minus 37  // > CustomCode.line45:290
    //manually  // > CustomCode.line45:291
  else if (elementinteracted==31){ // for 1  // > CustomCode.line45:292
  elementinteractedmirror=97;  // > CustomCode.line45:293
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:294
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:295
    }  // > CustomCode.line45:296
    else {  // > CustomCode.line45:297
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:298
   }  // > CustomCode.line45:299
   }  // > CustomCode.line45:300
     //manually  // > CustomCode.line45:301
  if (elementinteracted==32){ // for 1  // > CustomCode.line45:302
  elementinteractedmirror=87;  // > CustomCode.line45:303
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:304
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:305
    }  // > CustomCode.line45:306
    else {  // > CustomCode.line45:307
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:308
   }  // > CustomCode.line45:309
   }  // > CustomCode.line45:310
     //manually  // > CustomCode.line45:311
  if (elementinteracted==33){ // for 1  // > CustomCode.line45:312
  elementinteractedmirror=77;  // > CustomCode.line45:313
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:314
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:315
    }  // > CustomCode.line45:316
    else {  // > CustomCode.line45:317
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:318
   }  // > CustomCode.line45:319
   }  // > CustomCode.line45:320
     //manually  // > CustomCode.line45:321
  if (elementinteracted==34){ // for 1  // > CustomCode.line45:322
  elementinteractedmirror=67;  // > CustomCode.line45:323
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:324
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:325
    }  // > CustomCode.line45:326
    else {  // > CustomCode.line45:327
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:328
   }  // > CustomCode.line45:329
   }  // > CustomCode.line45:330
     //manually  // > CustomCode.line45:331
  if (elementinteracted==35){ // for 1  // > CustomCode.line45:332
  elementinteractedmirror=57;  // > CustomCode.line45:333
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:334
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:335
    }  // > CustomCode.line45:336
    else {  // > CustomCode.line45:337
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:338
   }  // > CustomCode.line45:339
   }  // > CustomCode.line45:340
     //manually  // > CustomCode.line45:341
  if (elementinteracted==36){ // for 1  // > CustomCode.line45:342
  elementinteractedmirror=47;  // > CustomCode.line45:343
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:344
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:345
    }  // > CustomCode.line45:346
    else {  // > CustomCode.line45:347
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:348
   }  // > CustomCode.line45:349
   }  // > CustomCode.line45:350
     //manually  // > CustomCode.line45:351
  if (elementinteracted==38){ // for 1  // > CustomCode.line45:352
  elementinteractedmirror=27;  // > CustomCode.line45:353
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:354
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:355
    }  // > CustomCode.line45:356
    else {  // > CustomCode.line45:357
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:358
   }  // > CustomCode.line45:359
   }  // > CustomCode.line45:360
     //manually  // > CustomCode.line45:361
  if (elementinteracted==39){ // for 8  // > CustomCode.line45:362
  elementinteractedmirror=17;  // > CustomCode.line45:363
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:364
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:365
    }  // > CustomCode.line45:366
    else {  // > CustomCode.line45:367
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:368
   }  // > CustomCode.line45:369
   }  // > CustomCode.line45:370
     //manually  // > CustomCode.line45:371
  if (elementinteracted==40){ // for 9  // > CustomCode.line45:372
  elementinteractedmirror=7;  // > CustomCode.line45:373
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:374
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:375
    }  // > CustomCode.line45:376
    else {  // > CustomCode.line45:377
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:378
   }  // > CustomCode.line45:379
   }  // > CustomCode.line45:380
   // 41 to 50 minus 46  // > CustomCode.line45:381
    //manually  // > CustomCode.line45:382
  else if (elementinteracted==41){ // for 1  // > CustomCode.line45:383
  elementinteractedmirror=96;  // > CustomCode.line45:384
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:385
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:386
    }  // > CustomCode.line45:387
    else {  // > CustomCode.line45:388
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:389
   }  // > CustomCode.line45:390
   }  // > CustomCode.line45:391
     //manually  // > CustomCode.line45:392
  if (elementinteracted==42){ // for 1  // > CustomCode.line45:393
  elementinteractedmirror=86;  // > CustomCode.line45:394
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:395
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:396
    }  // > CustomCode.line45:397
    else {  // > CustomCode.line45:398
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:399
   }  // > CustomCode.line45:400
   }  // > CustomCode.line45:401
     //manually  // > CustomCode.line45:402
  if (elementinteracted==43){ // for 1  // > CustomCode.line45:403
  elementinteractedmirror=76;  // > CustomCode.line45:404
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:405
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:406
    }  // > CustomCode.line45:407
    else {  // > CustomCode.line45:408
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:409
   }  // > CustomCode.line45:410
   }  // > CustomCode.line45:411
     //manually  // > CustomCode.line45:412
  if (elementinteracted==44){ // for 1  // > CustomCode.line45:413
  elementinteractedmirror=66;  // > CustomCode.line45:414
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:415
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:416
    }  // > CustomCode.line45:417
    else {  // > CustomCode.line45:418
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:419
   }  // > CustomCode.line45:420
   }  // > CustomCode.line45:421
     //manually  // > CustomCode.line45:422
  if (elementinteracted==45){ // for 1  // > CustomCode.line45:423
  elementinteractedmirror=56;  // > CustomCode.line45:424
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:425
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:426
    }  // > CustomCode.line45:427
    else {  // > CustomCode.line45:428
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:429
   }  // > CustomCode.line45:430
   }  // > CustomCode.line45:431
     //manually  // > CustomCode.line45:432
  if (elementinteracted==47){ // for 1  // > CustomCode.line45:433
  elementinteractedmirror=36;  // > CustomCode.line45:434
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:435
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:436
    }  // > CustomCode.line45:437
    else {  // > CustomCode.line45:438
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:439
   }  // > CustomCode.line45:440
   }  // > CustomCode.line45:441
     //manually  // > CustomCode.line45:442
  if (elementinteracted==48){ // for 1  // > CustomCode.line45:443
  elementinteractedmirror=26;  // > CustomCode.line45:444
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:445
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:446
    }  // > CustomCode.line45:447
    else {  // > CustomCode.line45:448
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:449
   }  // > CustomCode.line45:450
   }  // > CustomCode.line45:451
     //manually  // > CustomCode.line45:452
  if (elementinteracted==49){ // for 8  // > CustomCode.line45:453
  elementinteractedmirror=16;  // > CustomCode.line45:454
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:455
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:456
    }  // > CustomCode.line45:457
    else {  // > CustomCode.line45:458
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:459
   }  // > CustomCode.line45:460
   }  // > CustomCode.line45:461
     //manually  // > CustomCode.line45:462
  if (elementinteracted==50){ // for 9  // > CustomCode.line45:463
  elementinteractedmirror=6;  // > CustomCode.line45:464
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:465
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:466
    }  // > CustomCode.line45:467
    else {  // > CustomCode.line45:468
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:469
   }  // > CustomCode.line45:470
   }  // > CustomCode.line45:471
   // 51 to 60 minus 55  // > CustomCode.line45:472
    //manually  // > CustomCode.line45:473
  else if (elementinteracted==51){ // for 1  // > CustomCode.line45:474
  elementinteractedmirror=95;  // > CustomCode.line45:475
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:476
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:477
    }  // > CustomCode.line45:478
    else {  // > CustomCode.line45:479
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:480
   }  // > CustomCode.line45:481
   }  // > CustomCode.line45:482
     //manually  // > CustomCode.line45:483
  if (elementinteracted==52){ // for 1  // > CustomCode.line45:484
  elementinteractedmirror=85;  // > CustomCode.line45:485
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:486
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:487
    }  // > CustomCode.line45:488
    else {  // > CustomCode.line45:489
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:490
   }  // > CustomCode.line45:491
   }  // > CustomCode.line45:492
     //manually  // > CustomCode.line45:493
  if (elementinteracted==53){ // for 1  // > CustomCode.line45:494
  elementinteractedmirror=75;  // > CustomCode.line45:495
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:496
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:497
    }  // > CustomCode.line45:498
    else {  // > CustomCode.line45:499
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:500
   }  // > CustomCode.line45:501
   }  // > CustomCode.line45:502
     //manually  // > CustomCode.line45:503
  if (elementinteracted==54){ // for 1  // > CustomCode.line45:504
  elementinteractedmirror=65;  // > CustomCode.line45:505
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:506
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:507
    }  // > CustomCode.line45:508
    else {  // > CustomCode.line45:509
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:510
   }  // > CustomCode.line45:511
   }  // > CustomCode.line45:512
     //manually  // > CustomCode.line45:513
  if (elementinteracted==56){ // for 1  // > CustomCode.line45:514
  elementinteractedmirror=45;  // > CustomCode.line45:515
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:516
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:517
    }  // > CustomCode.line45:518
    else {  // > CustomCode.line45:519
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:520
   }  // > CustomCode.line45:521
   }  // > CustomCode.line45:522
     //manually  // > CustomCode.line45:523
  if (elementinteracted==57){ // for 1  // > CustomCode.line45:524
  elementinteractedmirror=35;  // > CustomCode.line45:525
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:526
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:527
    }  // > CustomCode.line45:528
    else {  // > CustomCode.line45:529
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:530
   }  // > CustomCode.line45:531
   }  // > CustomCode.line45:532
     //manually  // > CustomCode.line45:533
  if (elementinteracted==58){ // for 1  // > CustomCode.line45:534
  elementinteractedmirror=25;  // > CustomCode.line45:535
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:536
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:537
    }  // > CustomCode.line45:538
    else {  // > CustomCode.line45:539
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:540
   }  // > CustomCode.line45:541
   }  // > CustomCode.line45:542
     //manually  // > CustomCode.line45:543
  if (elementinteracted==59){ // for 8  // > CustomCode.line45:544
  elementinteractedmirror=15;  // > CustomCode.line45:545
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:546
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:547
    }  // > CustomCode.line45:548
    else {  // > CustomCode.line45:549
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:550
   }  // > CustomCode.line45:551
   }  // > CustomCode.line45:552
     //manually  // > CustomCode.line45:553
  if (elementinteracted==60){ // for 9  // > CustomCode.line45:554
  elementinteractedmirror=5;  // > CustomCode.line45:555
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:556
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:557
    }  // > CustomCode.line45:558
    else {  // > CustomCode.line45:559
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:560
   }  // > CustomCode.line45:561
   }  // > CustomCode.line45:562
   // 61 to 70 minus 64  // > CustomCode.line45:563
    //manually  // > CustomCode.line45:564
  else if (elementinteracted==61){ // for 1  // > CustomCode.line45:565
  elementinteractedmirror=94;  // > CustomCode.line45:566
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:567
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:568
    }  // > CustomCode.line45:569
    else {  // > CustomCode.line45:570
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:571
   }  // > CustomCode.line45:572
   }  // > CustomCode.line45:573
     //manually  // > CustomCode.line45:574
  if (elementinteracted==62){ // for 1  // > CustomCode.line45:575
  elementinteractedmirror=84;  // > CustomCode.line45:576
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:577
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:578
    }  // > CustomCode.line45:579
    else {  // > CustomCode.line45:580
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:581
   }  // > CustomCode.line45:582
   }  // > CustomCode.line45:583
     //manually  // > CustomCode.line45:584
  if (elementinteracted==63){ // for 1  // > CustomCode.line45:585
  elementinteractedmirror=74;  // > CustomCode.line45:586
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:587
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:588
    }  // > CustomCode.line45:589
    else {  // > CustomCode.line45:590
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:591
   }  // > CustomCode.line45:592
   }  // > CustomCode.line45:593
     //manually  // > CustomCode.line45:594
  if (elementinteracted==65){ // for 1  // > CustomCode.line45:595
  elementinteractedmirror=54;  // > CustomCode.line45:596
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:597
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:598
    }  // > CustomCode.line45:599
    else {  // > CustomCode.line45:600
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:601
   }  // > CustomCode.line45:602
   }  // > CustomCode.line45:603
     //manually  // > CustomCode.line45:604
  if (elementinteracted==66){ // for 1  // > CustomCode.line45:605
  elementinteractedmirror=44;  // > CustomCode.line45:606
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:607
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:608
    }  // > CustomCode.line45:609
    else {  // > CustomCode.line45:610
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:611
   }  // > CustomCode.line45:612
   }  // > CustomCode.line45:613
     //manually  // > CustomCode.line45:614
  if (elementinteracted==67){ // for 1  // > CustomCode.line45:615
  elementinteractedmirror=34;  // > CustomCode.line45:616
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:617
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:618
    }  // > CustomCode.line45:619
    else {  // > CustomCode.line45:620
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:621
   }  // > CustomCode.line45:622
   }  // > CustomCode.line45:623
     //manually  // > CustomCode.line45:624
  if (elementinteracted==68){ // for 1  // > CustomCode.line45:625
  elementinteractedmirror=24;  // > CustomCode.line45:626
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:627
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:628
    }  // > CustomCode.line45:629
    else {  // > CustomCode.line45:630
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:631
   }  // > CustomCode.line45:632
   }  // > CustomCode.line45:633
     //manually  // > CustomCode.line45:634
  if (elementinteracted==69){ // for 8  // > CustomCode.line45:635
  elementinteractedmirror=14;  // > CustomCode.line45:636
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:637
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:638
    }  // > CustomCode.line45:639
    else {  // > CustomCode.line45:640
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:641
   }  // > CustomCode.line45:642
   }  // > CustomCode.line45:643
     //manually  // > CustomCode.line45:644
  if (elementinteracted==70){ // for 9  // > CustomCode.line45:645
  elementinteractedmirror=4;  // > CustomCode.line45:646
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:647
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:648
    }  // > CustomCode.line45:649
    else {  // > CustomCode.line45:650
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:651
   }  // > CustomCode.line45:652
   }  // > CustomCode.line45:653
    // 71 to 80 minus 73  // > CustomCode.line45:654
    //manually  // > CustomCode.line45:655
  else if (elementinteracted==71){ // for 1  // > CustomCode.line45:656
  elementinteractedmirror=93;  // > CustomCode.line45:657
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:658
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:659
    }  // > CustomCode.line45:660
    else {  // > CustomCode.line45:661
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:662
   }  // > CustomCode.line45:663
   }  // > CustomCode.line45:664
     //manually  // > CustomCode.line45:665
  if (elementinteracted==72){ // for 1  // > CustomCode.line45:666
  elementinteractedmirror=83;  // > CustomCode.line45:667
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:668
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:669
    }  // > CustomCode.line45:670
    else {  // > CustomCode.line45:671
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:672
   }  // > CustomCode.line45:673
   }  // > CustomCode.line45:674
     //manually  // > CustomCode.line45:675
  if (elementinteracted==74){ // for 1  // > CustomCode.line45:676
  elementinteractedmirror=63;  // > CustomCode.line45:677
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:678
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:679
    }  // > CustomCode.line45:680
    else {  // > CustomCode.line45:681
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:682
   }  // > CustomCode.line45:683
   }  // > CustomCode.line45:684
     //manually  // > CustomCode.line45:685
  if (elementinteracted==75){ // for 1  // > CustomCode.line45:686
  elementinteractedmirror=53;  // > CustomCode.line45:687
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:688
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:689
    }  // > CustomCode.line45:690
    else {  // > CustomCode.line45:691
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:692
   }  // > CustomCode.line45:693
   }  // > CustomCode.line45:694
     //manually  // > CustomCode.line45:695
  if (elementinteracted==76){ // for 1  // > CustomCode.line45:696
  elementinteractedmirror=43;  // > CustomCode.line45:697
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:698
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:699
    }  // > CustomCode.line45:700
    else {  // > CustomCode.line45:701
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:702
   }  // > CustomCode.line45:703
   }  // > CustomCode.line45:704
     //manually  // > CustomCode.line45:705
  if (elementinteracted==77){ // for 1  // > CustomCode.line45:706
  elementinteractedmirror=33;  // > CustomCode.line45:707
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:708
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:709
    }  // > CustomCode.line45:710
    else {  // > CustomCode.line45:711
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:712
   }  // > CustomCode.line45:713
   }  // > CustomCode.line45:714
     //manually  // > CustomCode.line45:715
  if (elementinteracted==78){ // for 1  // > CustomCode.line45:716
  elementinteractedmirror=23;  // > CustomCode.line45:717
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:718
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:719
    }  // > CustomCode.line45:720
    else {  // > CustomCode.line45:721
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:722
   }  // > CustomCode.line45:723
   }  // > CustomCode.line45:724
     //manually  // > CustomCode.line45:725
  if (elementinteracted==79){ // for 8  // > CustomCode.line45:726
  elementinteractedmirror=13;  // > CustomCode.line45:727
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:728
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:729
    }  // > CustomCode.line45:730
    else {  // > CustomCode.line45:731
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:732
   }  // > CustomCode.line45:733
   }  // > CustomCode.line45:734
     //manually  // > CustomCode.line45:735
  if (elementinteracted==80){ // for 9  // > CustomCode.line45:736
  elementinteractedmirror=3;  // > CustomCode.line45:737
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:738
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:739
    }  // > CustomCode.line45:740
    else {  // > CustomCode.line45:741
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:742
   }  // > CustomCode.line45:743
   }  // > CustomCode.line45:744
    // 81 to 90 minus 82  // > CustomCode.line45:745
    //manually  // > CustomCode.line45:746
  else if (elementinteracted==81){ // for 1  // > CustomCode.line45:747
  elementinteractedmirror=92;  // > CustomCode.line45:748
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:749
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:750
    }  // > CustomCode.line45:751
    else {  // > CustomCode.line45:752
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:753
   }  // > CustomCode.line45:754
   }  // > CustomCode.line45:755
     //manually  // > CustomCode.line45:756
  if (elementinteracted==83){ // for 1  // > CustomCode.line45:757
  elementinteractedmirror=72;  // > CustomCode.line45:758
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:759
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:760
    }  // > CustomCode.line45:761
    else {  // > CustomCode.line45:762
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:763
   }  // > CustomCode.line45:764
   }  // > CustomCode.line45:765
     //manually  // > CustomCode.line45:766
  if (elementinteracted==84){ // for 1  // > CustomCode.line45:767
  elementinteractedmirror=62;  // > CustomCode.line45:768
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:769
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:770
    }  // > CustomCode.line45:771
    else {  // > CustomCode.line45:772
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:773
   }  // > CustomCode.line45:774
   }  // > CustomCode.line45:775
     //manually  // > CustomCode.line45:776
  if (elementinteracted==85){ // for 1  // > CustomCode.line45:777
  elementinteractedmirror=52; //doing stop here  // > CustomCode.line45:778
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:779
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:780
    }  // > CustomCode.line45:781
    else {  // > CustomCode.line45:782
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:783
   }  // > CustomCode.line45:784
   }  // > CustomCode.line45:785
     //manually  // > CustomCode.line45:786
  if (elementinteracted==86){ // for 1  // > CustomCode.line45:787
  elementinteractedmirror=42;  // > CustomCode.line45:788
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:789
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:790
    }  // > CustomCode.line45:791
    else {  // > CustomCode.line45:792
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:793
   }  // > CustomCode.line45:794
   }  // > CustomCode.line45:795
     //manually  // > CustomCode.line45:796
  if (elementinteracted==87){ // for 1  // > CustomCode.line45:797
  elementinteractedmirror=32;  // > CustomCode.line45:798
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:799
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:800
    }  // > CustomCode.line45:801
    else {  // > CustomCode.line45:802
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:803
   }  // > CustomCode.line45:804
   }  // > CustomCode.line45:805
     //manually  // > CustomCode.line45:806
  if (elementinteracted==88){ // for 1  // > CustomCode.line45:807
  elementinteractedmirror=22;  // > CustomCode.line45:808
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:809
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:810
    }  // > CustomCode.line45:811
    else {  // > CustomCode.line45:812
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:813
   }  // > CustomCode.line45:814
   }  // > CustomCode.line45:815
     //manually  // > CustomCode.line45:816
  if (elementinteracted==89){ // for 8  // > CustomCode.line45:817
  elementinteractedmirror=12;  // > CustomCode.line45:818
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:819
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:820
    }  // > CustomCode.line45:821
    else {  // > CustomCode.line45:822
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:823
   }  // > CustomCode.line45:824
   }  // > CustomCode.line45:825
     //manually  // > CustomCode.line45:826
  if (elementinteracted==90){ // for 9  // > CustomCode.line45:827
  elementinteractedmirror=2;  // > CustomCode.line45:828
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:829
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:830
    }  // > CustomCode.line45:831
    else {  // > CustomCode.line45:832
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:833
   }  // > CustomCode.line45:834
   }  // > CustomCode.line45:835
    // 91 to 100 minus 91  // > CustomCode.line45:836
    //manually  // > CustomCode.line45:837
  else if (elementinteracted==92){ // for 1  // > CustomCode.line45:838
  elementinteractedmirror=81;  // > CustomCode.line45:839
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:840
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:841
    }  // > CustomCode.line45:842
    else {  // > CustomCode.line45:843
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:844
   }  // > CustomCode.line45:845
   }  // > CustomCode.line45:846
     //manually  // > CustomCode.line45:847
  if (elementinteracted==93){ // for 1  // > CustomCode.line45:848
  elementinteractedmirror=71;  // > CustomCode.line45:849
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:850
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:851
    }  // > CustomCode.line45:852
    else {  // > CustomCode.line45:853
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:854
   }  // > CustomCode.line45:855
   }  // > CustomCode.line45:856
     //manually  // > CustomCode.line45:857
  if (elementinteracted==94){ // for 1  // > CustomCode.line45:858
  elementinteractedmirror=61;  // > CustomCode.line45:859
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:860
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:861
    }  // > CustomCode.line45:862
    else {  // > CustomCode.line45:863
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:864
   }  // > CustomCode.line45:865
   }  // > CustomCode.line45:866
     //manually  // > CustomCode.line45:867
  if (elementinteracted==95){ // for 1  // > CustomCode.line45:868
  elementinteractedmirror=51; //doing stop here  // > CustomCode.line45:869
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:870
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:871
    }  // > CustomCode.line45:872
    else {  // > CustomCode.line45:873
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:874
   }  // > CustomCode.line45:875
   }  // > CustomCode.line45:876
     //manually  // > CustomCode.line45:877
  if (elementinteracted==96){ // for 1  // > CustomCode.line45:878
  elementinteractedmirror=41;  // > CustomCode.line45:879
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:880
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:881
    }  // > CustomCode.line45:882
    else {  // > CustomCode.line45:883
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:884
   }  // > CustomCode.line45:885
   }  // > CustomCode.line45:886
     //manually  // > CustomCode.line45:887
  if (elementinteracted==97){ // for 1  // > CustomCode.line45:888
  elementinteractedmirror=31;  // > CustomCode.line45:889
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:890
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:891
    }  // > CustomCode.line45:892
    else {  // > CustomCode.line45:893
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:894
   }  // > CustomCode.line45:895
   }  // > CustomCode.line45:896
     //manually  // > CustomCode.line45:897
  if (elementinteracted==98){ // for 1  // > CustomCode.line45:898
  elementinteractedmirror=21;  // > CustomCode.line45:899
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:900
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:901
    }  // > CustomCode.line45:902
    else {  // > CustomCode.line45:903
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:904
   }  // > CustomCode.line45:905
   }  // > CustomCode.line45:906
     //manually  // > CustomCode.line45:907
  if (elementinteracted==99){ // for 8  // > CustomCode.line45:908
  elementinteractedmirror=11;  // > CustomCode.line45:909
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:910
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:911
    }  // > CustomCode.line45:912
    else {  // > CustomCode.line45:913
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:914
   }  // > CustomCode.line45:915
   }  // > CustomCode.line45:916
     //manually  // > CustomCode.line45:917
  if (elementinteracted==100){ // for 9  // > CustomCode.line45:918
  elementinteractedmirror=1;  // > CustomCode.line45:919
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.line45:920
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.line45:921
    }  // > CustomCode.line45:922
    else {  // > CustomCode.line45:923
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.line45:924
   }  // > CustomCode.line45:925
   }  // > CustomCode.line45:926
     // > CustomCode.line45:927
     // > CustomCode.line45:928
     // > CustomCode.line45:929
     // > CustomCode.line45:930
   }  // > CustomCode.line45:931
  }  // > CustomCode.line45:932

  function linem45 () {  // > CustomCode.linem45:1
  //if (_view.comboBox.getProperty("SelectedOptions")=="-45 line"){  // > CustomCode.linem45:2
    //for (var i=1; i<100 /* Iterations */ ; i++) {  // > CustomCode.linem45:3
    //colorVectors[i] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:4
  //}  // > CustomCode.linem45:5
  if (comboboxmode==4&&quizmode==false){  // > CustomCode.linem45:6
     xtextmirror = -ytext;  // > CustomCode.linem45:7
    ytextmirror = -xtext;  // > CustomCode.linem45:8
    scalextext = 1;  // > CustomCode.linem45:9
    scaleytext = -1*myscale; //1 is default do nothing  // > CustomCode.linem45:10
    rotate = pi/2;  // > CustomCode.linem45:11
    //manually  // > CustomCode.linem45:12
     //manually  // > CustomCode.linem45:13
  if (elementinteracted==2){ // for 1  // > CustomCode.linem45:14
  elementinteractedmirror=11;  // > CustomCode.linem45:15
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:16
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:17
    }  // > CustomCode.linem45:18
    else {  // > CustomCode.linem45:19
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:20
   }  // > CustomCode.linem45:21
   }  // > CustomCode.linem45:22
     //manually  // > CustomCode.linem45:23
  if (elementinteracted==3){ // for 1  // > CustomCode.linem45:24
  elementinteractedmirror=21;  // > CustomCode.linem45:25
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:26
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:27
    }  // > CustomCode.linem45:28
    else {  // > CustomCode.linem45:29
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:30
   }  // > CustomCode.linem45:31
   }  // > CustomCode.linem45:32
     //manually  // > CustomCode.linem45:33
  if (elementinteracted==4){ // for 1  // > CustomCode.linem45:34
  elementinteractedmirror=31;  // > CustomCode.linem45:35
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:36
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:37
    }  // > CustomCode.linem45:38
    else {  // > CustomCode.linem45:39
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:40
   }  // > CustomCode.linem45:41
   }  // > CustomCode.linem45:42
     //manually  // > CustomCode.linem45:43
  if (elementinteracted==5){ // for 1  // > CustomCode.linem45:44
  elementinteractedmirror=41;  // > CustomCode.linem45:45
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:46
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:47
    }  // > CustomCode.linem45:48
    else {  // > CustomCode.linem45:49
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:50
   }  // > CustomCode.linem45:51
   }  // > CustomCode.linem45:52
     //manually  // > CustomCode.linem45:53
  if (elementinteracted==6){ // for 1  // > CustomCode.linem45:54
  elementinteractedmirror=51;  // > CustomCode.linem45:55
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:56
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:57
    }  // > CustomCode.linem45:58
    else {  // > CustomCode.linem45:59
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:60
   }  // > CustomCode.linem45:61
   }  // > CustomCode.linem45:62
     //manually  // > CustomCode.linem45:63
  if (elementinteracted==7){ // for 1  // > CustomCode.linem45:64
  elementinteractedmirror=61;  // > CustomCode.linem45:65
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:66
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:67
    }  // > CustomCode.linem45:68
    else {  // > CustomCode.linem45:69
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:70
   }  // > CustomCode.linem45:71
   }  // > CustomCode.linem45:72
     //manually  // > CustomCode.linem45:73
  if (elementinteracted==8){ // for 8  // > CustomCode.linem45:74
  elementinteractedmirror=71;  // > CustomCode.linem45:75
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:76
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:77
    }  // > CustomCode.linem45:78
    else {  // > CustomCode.linem45:79
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:80
   }  // > CustomCode.linem45:81
   }  // > CustomCode.linem45:82
     //manually  // > CustomCode.linem45:83
  if (elementinteracted==9){ // for 9  // > CustomCode.linem45:84
  elementinteractedmirror=81;  // > CustomCode.linem45:85
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:86
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:87
    }  // > CustomCode.linem45:88
    else {  // > CustomCode.linem45:89
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:90
   }  // > CustomCode.linem45:91
   }  // > CustomCode.linem45:92
   if (elementinteracted==10){ // for 9  // > CustomCode.linem45:93
  elementinteractedmirror=91;  // > CustomCode.linem45:94
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:95
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:96
    }  // > CustomCode.linem45:97
    else {  // > CustomCode.linem45:98
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:99
   }  // > CustomCode.linem45:100
   }  // > CustomCode.linem45:101
   // 11 to 20 minus 19  // > CustomCode.linem45:102
    //manually  // > CustomCode.linem45:103
  else if (elementinteracted==11){ // for 1  // > CustomCode.linem45:104
  elementinteractedmirror=2;  // > CustomCode.linem45:105
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:106
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:107
    }  // > CustomCode.linem45:108
    else {  // > CustomCode.linem45:109
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:110
   }  // > CustomCode.linem45:111
   }  // > CustomCode.linem45:112
     //manually  // > CustomCode.linem45:113
     //manually  // > CustomCode.linem45:114
  if (elementinteracted==13){ // for 1  // > CustomCode.linem45:115
  elementinteractedmirror=22;  // > CustomCode.linem45:116
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:117
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:118
    }  // > CustomCode.linem45:119
    else {  // > CustomCode.linem45:120
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:121
   }  // > CustomCode.linem45:122
   }  // > CustomCode.linem45:123
     //manually  // > CustomCode.linem45:124
  if (elementinteracted==14){ // for 1  // > CustomCode.linem45:125
  elementinteractedmirror=32;  // > CustomCode.linem45:126
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:127
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:128
    }  // > CustomCode.linem45:129
    else {  // > CustomCode.linem45:130
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:131
   }  // > CustomCode.linem45:132
   }  // > CustomCode.linem45:133
     //manually  // > CustomCode.linem45:134
  if (elementinteracted==15){ // for 1  // > CustomCode.linem45:135
  elementinteractedmirror=42;  // > CustomCode.linem45:136
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:137
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:138
    }  // > CustomCode.linem45:139
    else {  // > CustomCode.linem45:140
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:141
   }  // > CustomCode.linem45:142
   }  // > CustomCode.linem45:143
     //manually  // > CustomCode.linem45:144
  if (elementinteracted==16){ // for 1  // > CustomCode.linem45:145
  elementinteractedmirror=52;  // > CustomCode.linem45:146
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:147
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:148
    }  // > CustomCode.linem45:149
    else {  // > CustomCode.linem45:150
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:151
   }  // > CustomCode.linem45:152
   }  // > CustomCode.linem45:153
     //manually  // > CustomCode.linem45:154
  if (elementinteracted==17){ // for 1  // > CustomCode.linem45:155
  elementinteractedmirror=62;  // > CustomCode.linem45:156
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:157
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:158
    }  // > CustomCode.linem45:159
    else {  // > CustomCode.linem45:160
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:161
   }  // > CustomCode.linem45:162
   }  // > CustomCode.linem45:163
     //manually  // > CustomCode.linem45:164
  if (elementinteracted==18){ // for 8  // > CustomCode.linem45:165
  elementinteractedmirror=72;  // > CustomCode.linem45:166
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:167
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:168
    }  // > CustomCode.linem45:169
    else {  // > CustomCode.linem45:170
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:171
   }  // > CustomCode.linem45:172
   }  // > CustomCode.linem45:173
   if (elementinteracted==19){ // for 8  // > CustomCode.linem45:174
  elementinteractedmirror=82;  // > CustomCode.linem45:175
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:176
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:177
    }  // > CustomCode.linem45:178
    else {  // > CustomCode.linem45:179
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:180
   }  // > CustomCode.linem45:181
   }  // > CustomCode.linem45:182
     //manually  // > CustomCode.linem45:183
  if (elementinteracted==20){ // for 9  // > CustomCode.linem45:184
  elementinteractedmirror=92;  // > CustomCode.linem45:185
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:186
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:187
    }  // > CustomCode.linem45:188
    else {  // > CustomCode.linem45:189
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:190
   }  // > CustomCode.linem45:191
   }  // > CustomCode.linem45:192
   // 21 to 30 minus 28  // > CustomCode.linem45:193
    //manually  // > CustomCode.linem45:194
  else if (elementinteracted==21){ // for 1  // > CustomCode.linem45:195
  elementinteractedmirror=3;  // > CustomCode.linem45:196
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:197
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:198
    }  // > CustomCode.linem45:199
    else {  // > CustomCode.linem45:200
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:201
   }  // > CustomCode.linem45:202
   }  // > CustomCode.linem45:203
     //manually  // > CustomCode.linem45:204
  if (elementinteracted==22){ // for 1  // > CustomCode.linem45:205
  elementinteractedmirror=13;  // > CustomCode.linem45:206
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:207
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:208
    }  // > CustomCode.linem45:209
    else {  // > CustomCode.linem45:210
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:211
   }  // > CustomCode.linem45:212
   }  // > CustomCode.linem45:213
     //manually  // > CustomCode.linem45:214
     //manually  // > CustomCode.linem45:215
  if (elementinteracted==24){ // for 1  // > CustomCode.linem45:216
  elementinteractedmirror=33;  // > CustomCode.linem45:217
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:218
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:219
    }  // > CustomCode.linem45:220
    else {  // > CustomCode.linem45:221
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:222
   }  // > CustomCode.linem45:223
   }  // > CustomCode.linem45:224
     //manually  // > CustomCode.linem45:225
  if (elementinteracted==25){ // for 1  // > CustomCode.linem45:226
  elementinteractedmirror=43;  // > CustomCode.linem45:227
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:228
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:229
    }  // > CustomCode.linem45:230
    else {  // > CustomCode.linem45:231
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:232
   }  // > CustomCode.linem45:233
   }  // > CustomCode.linem45:234
     //manually  // > CustomCode.linem45:235
  if (elementinteracted==26){ // for 1  // > CustomCode.linem45:236
  elementinteractedmirror=53;  // > CustomCode.linem45:237
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:238
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:239
    }  // > CustomCode.linem45:240
    else {  // > CustomCode.linem45:241
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:242
   }  // > CustomCode.linem45:243
   }  // > CustomCode.linem45:244
     //manually  // > CustomCode.linem45:245
  if (elementinteracted==27){ // for 1  // > CustomCode.linem45:246
  elementinteractedmirror=63;  // > CustomCode.linem45:247
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:248
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:249
    }  // > CustomCode.linem45:250
    else {  // > CustomCode.linem45:251
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:252
   }  // > CustomCode.linem45:253
   }  // > CustomCode.linem45:254
     //manually  // > CustomCode.linem45:255
     if (elementinteracted==28){ // for 1  // > CustomCode.linem45:256
  elementinteractedmirror=73;  // > CustomCode.linem45:257
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:258
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:259
    }  // > CustomCode.linem45:260
    else {  // > CustomCode.linem45:261
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:262
   }  // > CustomCode.linem45:263
   }  // > CustomCode.linem45:264
     //manually  // > CustomCode.linem45:265
  if (elementinteracted==29){ // for 8  // > CustomCode.linem45:266
  elementinteractedmirror=83;  // > CustomCode.linem45:267
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:268
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:269
    }  // > CustomCode.linem45:270
    else {  // > CustomCode.linem45:271
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:272
   }  // > CustomCode.linem45:273
   }  // > CustomCode.linem45:274
     //manually  // > CustomCode.linem45:275
  if (elementinteracted==30){ // for 9  // > CustomCode.linem45:276
  elementinteractedmirror=93;  // > CustomCode.linem45:277
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:278
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:279
    }  // > CustomCode.linem45:280
    else {  // > CustomCode.linem45:281
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:282
   }  // > CustomCode.linem45:283
   }  // > CustomCode.linem45:284
   // 31 to 40 minus 37  // > CustomCode.linem45:285
    //manually  // > CustomCode.linem45:286
  else if (elementinteracted==31){ // for 1  // > CustomCode.linem45:287
  elementinteractedmirror=4;  // > CustomCode.linem45:288
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:289
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:290
    }  // > CustomCode.linem45:291
    else {  // > CustomCode.linem45:292
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:293
   }  // > CustomCode.linem45:294
   }  // > CustomCode.linem45:295
     //manually  // > CustomCode.linem45:296
  if (elementinteracted==32){ // for 1  // > CustomCode.linem45:297
  elementinteractedmirror=14;  // > CustomCode.linem45:298
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:299
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:300
    }  // > CustomCode.linem45:301
    else {  // > CustomCode.linem45:302
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:303
   }  // > CustomCode.linem45:304
   }  // > CustomCode.linem45:305
     //manually  // > CustomCode.linem45:306
  if (elementinteracted==33){ // for 1  // > CustomCode.linem45:307
  elementinteractedmirror=24;  // > CustomCode.linem45:308
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:309
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:310
    }  // > CustomCode.linem45:311
    else {  // > CustomCode.linem45:312
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:313
   }  // > CustomCode.linem45:314
   }  // > CustomCode.linem45:315
     //manually  // > CustomCode.linem45:316
     //manually  // > CustomCode.linem45:317
  if (elementinteracted==35){ // for 1  // > CustomCode.linem45:318
  elementinteractedmirror=44;  // > CustomCode.linem45:319
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:320
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:321
    }  // > CustomCode.linem45:322
    else {  // > CustomCode.linem45:323
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:324
   }  // > CustomCode.linem45:325
   }  // > CustomCode.linem45:326
     //manually  // > CustomCode.linem45:327
  if (elementinteracted==36){ // for 1  // > CustomCode.linem45:328
  elementinteractedmirror=54;  // > CustomCode.linem45:329
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:330
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:331
    }  // > CustomCode.linem45:332
    else {  // > CustomCode.linem45:333
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:334
   }  // > CustomCode.linem45:335
   }  // > CustomCode.linem45:336
     //manually  // > CustomCode.linem45:337
     if (elementinteracted==37){ // for 1  // > CustomCode.linem45:338
  elementinteractedmirror=64;  // > CustomCode.linem45:339
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:340
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:341
    }  // > CustomCode.linem45:342
    else {  // > CustomCode.linem45:343
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:344
   }  // > CustomCode.linem45:345
   }  // > CustomCode.linem45:346
     //manually  // > CustomCode.linem45:347
  if (elementinteracted==38){ // for 1  // > CustomCode.linem45:348
  elementinteractedmirror=74;  // > CustomCode.linem45:349
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:350
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:351
    }  // > CustomCode.linem45:352
    else {  // > CustomCode.linem45:353
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:354
   }  // > CustomCode.linem45:355
   }  // > CustomCode.linem45:356
     //manually  // > CustomCode.linem45:357
  if (elementinteracted==39){ // for 8  // > CustomCode.linem45:358
  elementinteractedmirror=84;  // > CustomCode.linem45:359
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:360
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:361
    }  // > CustomCode.linem45:362
    else {  // > CustomCode.linem45:363
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:364
   }  // > CustomCode.linem45:365
   }  // > CustomCode.linem45:366
     //manually  // > CustomCode.linem45:367
  if (elementinteracted==40){ // for 9  // > CustomCode.linem45:368
  elementinteractedmirror=94;  // > CustomCode.linem45:369
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:370
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:371
    }  // > CustomCode.linem45:372
    else {  // > CustomCode.linem45:373
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:374
   }  // > CustomCode.linem45:375
   }  // > CustomCode.linem45:376
   // 41 to 50 minus 46  // > CustomCode.linem45:377
    //manually  // > CustomCode.linem45:378
  else if (elementinteracted==41){ // for 1  // > CustomCode.linem45:379
  elementinteractedmirror=5;  // > CustomCode.linem45:380
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:381
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:382
    }  // > CustomCode.linem45:383
    else {  // > CustomCode.linem45:384
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:385
   }  // > CustomCode.linem45:386
   }  // > CustomCode.linem45:387
     //manually  // > CustomCode.linem45:388
  if (elementinteracted==42){ // for 1  // > CustomCode.linem45:389
  elementinteractedmirror=15;  // > CustomCode.linem45:390
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:391
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:392
    }  // > CustomCode.linem45:393
    else {  // > CustomCode.linem45:394
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:395
   }  // > CustomCode.linem45:396
   }  // > CustomCode.linem45:397
     //manually  // > CustomCode.linem45:398
  if (elementinteracted==43){ // for 1  // > CustomCode.linem45:399
  elementinteractedmirror=25;  // > CustomCode.linem45:400
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:401
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:402
    }  // > CustomCode.linem45:403
    else {  // > CustomCode.linem45:404
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:405
   }  // > CustomCode.linem45:406
   }  // > CustomCode.linem45:407
     //manually  // > CustomCode.linem45:408
  if (elementinteracted==44){ // for 1  // > CustomCode.linem45:409
  elementinteractedmirror=35;  // > CustomCode.linem45:410
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:411
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:412
    }  // > CustomCode.linem45:413
    else {  // > CustomCode.linem45:414
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:415
   }  // > CustomCode.linem45:416
   }  // > CustomCode.linem45:417
     //manually  // > CustomCode.linem45:418
  if (elementinteracted==46){ // for 1  // > CustomCode.linem45:419
  elementinteractedmirror=55;  // > CustomCode.linem45:420
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:421
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:422
    }  // > CustomCode.linem45:423
    else {  // > CustomCode.linem45:424
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:425
   }  // > CustomCode.linem45:426
   }  // > CustomCode.linem45:427
     //manually  // > CustomCode.linem45:428
  if (elementinteracted==47){ // for 1  // > CustomCode.linem45:429
  elementinteractedmirror=65;  // > CustomCode.linem45:430
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:431
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:432
    }  // > CustomCode.linem45:433
    else {  // > CustomCode.linem45:434
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:435
   }  // > CustomCode.linem45:436
   }  // > CustomCode.linem45:437
     //manually  // > CustomCode.linem45:438
  if (elementinteracted==48){ // for 1  // > CustomCode.linem45:439
  elementinteractedmirror=75;  // > CustomCode.linem45:440
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:441
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:442
    }  // > CustomCode.linem45:443
    else {  // > CustomCode.linem45:444
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:445
   }  // > CustomCode.linem45:446
   }  // > CustomCode.linem45:447
     //manually  // > CustomCode.linem45:448
  if (elementinteracted==49){ // for 8  // > CustomCode.linem45:449
  elementinteractedmirror=85;  // > CustomCode.linem45:450
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:451
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:452
    }  // > CustomCode.linem45:453
    else {  // > CustomCode.linem45:454
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:455
   }  // > CustomCode.linem45:456
   }  // > CustomCode.linem45:457
     //manually  // > CustomCode.linem45:458
  if (elementinteracted==50){ // for 9  // > CustomCode.linem45:459
  elementinteractedmirror=95;  // > CustomCode.linem45:460
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:461
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:462
    }  // > CustomCode.linem45:463
    else {  // > CustomCode.linem45:464
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:465
   }  // > CustomCode.linem45:466
   }  // > CustomCode.linem45:467
   // 51 to 60 minus 55  // > CustomCode.linem45:468
    //manually  // > CustomCode.linem45:469
  else if (elementinteracted==51){ // for 1  // > CustomCode.linem45:470
  elementinteractedmirror=6;  // > CustomCode.linem45:471
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:472
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:473
    }  // > CustomCode.linem45:474
    else {  // > CustomCode.linem45:475
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:476
   }  // > CustomCode.linem45:477
   }  // > CustomCode.linem45:478
     //manually  // > CustomCode.linem45:479
  if (elementinteracted==52){ // for 1  // > CustomCode.linem45:480
  elementinteractedmirror=16;  // > CustomCode.linem45:481
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:482
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:483
    }  // > CustomCode.linem45:484
    else {  // > CustomCode.linem45:485
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:486
   }  // > CustomCode.linem45:487
   }  // > CustomCode.linem45:488
     //manually  // > CustomCode.linem45:489
  if (elementinteracted==53){ // for 1  // > CustomCode.linem45:490
  elementinteractedmirror=26;  // > CustomCode.linem45:491
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:492
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:493
    }  // > CustomCode.linem45:494
    else {  // > CustomCode.linem45:495
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:496
   }  // > CustomCode.linem45:497
   }  // > CustomCode.linem45:498
     //manually  // > CustomCode.linem45:499
  if (elementinteracted==54){ // for 1  // > CustomCode.linem45:500
  elementinteractedmirror=36;  // > CustomCode.linem45:501
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:502
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:503
    }  // > CustomCode.linem45:504
    else {  // > CustomCode.linem45:505
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:506
   }  // > CustomCode.linem45:507
   }  // > CustomCode.linem45:508
     //manually  // > CustomCode.linem45:509
       //manually  // > CustomCode.linem45:510
  if (elementinteracted==55){ // for 1  // > CustomCode.linem45:511
  elementinteractedmirror=46;  // > CustomCode.linem45:512
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:513
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:514
    }  // > CustomCode.linem45:515
    else {  // > CustomCode.linem45:516
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:517
   }  // > CustomCode.linem45:518
   }  // > CustomCode.linem45:519
   //  // > CustomCode.linem45:520
     //manually  // > CustomCode.linem45:521
  if (elementinteracted==57){ // for 1  // > CustomCode.linem45:522
  elementinteractedmirror=66;  // > CustomCode.linem45:523
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:524
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:525
    }  // > CustomCode.linem45:526
    else {  // > CustomCode.linem45:527
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:528
   }  // > CustomCode.linem45:529
   }  // > CustomCode.linem45:530
     //manually  // > CustomCode.linem45:531
  if (elementinteracted==58){ // for 1  // > CustomCode.linem45:532
  elementinteractedmirror=76;  // > CustomCode.linem45:533
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:534
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:535
    }  // > CustomCode.linem45:536
    else {  // > CustomCode.linem45:537
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:538
   }  // > CustomCode.linem45:539
   }  // > CustomCode.linem45:540
     //manually  // > CustomCode.linem45:541
  if (elementinteracted==59){ // for 8  // > CustomCode.linem45:542
  elementinteractedmirror=86;  // > CustomCode.linem45:543
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:544
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:545
    }  // > CustomCode.linem45:546
    else {  // > CustomCode.linem45:547
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:548
   }  // > CustomCode.linem45:549
   }  // > CustomCode.linem45:550
     //manually  // > CustomCode.linem45:551
  if (elementinteracted==60){ // for 9  // > CustomCode.linem45:552
  elementinteractedmirror=96;  // > CustomCode.linem45:553
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:554
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:555
    }  // > CustomCode.linem45:556
    else {  // > CustomCode.linem45:557
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:558
   }  // > CustomCode.linem45:559
   }  // > CustomCode.linem45:560
   // 61 to 70 minus 64  // > CustomCode.linem45:561
    //manually  // > CustomCode.linem45:562
  else if (elementinteracted==61){ // for 1  // > CustomCode.linem45:563
  elementinteractedmirror=7;  // > CustomCode.linem45:564
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:565
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:566
    }  // > CustomCode.linem45:567
    else {  // > CustomCode.linem45:568
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:569
   }  // > CustomCode.linem45:570
   }  // > CustomCode.linem45:571
     //manually  // > CustomCode.linem45:572
  if (elementinteracted==62){ // for 1  // > CustomCode.linem45:573
  elementinteractedmirror=17;  // > CustomCode.linem45:574
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:575
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:576
    }  // > CustomCode.linem45:577
    else {  // > CustomCode.linem45:578
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:579
   }  // > CustomCode.linem45:580
   }  // > CustomCode.linem45:581
     //manually  // > CustomCode.linem45:582
  if (elementinteracted==63){ // for 1  // > CustomCode.linem45:583
  elementinteractedmirror=27;  // > CustomCode.linem45:584
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:585
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:586
    }  // > CustomCode.linem45:587
    else {  // > CustomCode.linem45:588
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:589
   }  // > CustomCode.linem45:590
   }  // > CustomCode.linem45:591
    //manually  // > CustomCode.linem45:592
  if (elementinteracted==64){ // for 1  // > CustomCode.linem45:593
  elementinteractedmirror=37;  // > CustomCode.linem45:594
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:595
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:596
    }  // > CustomCode.linem45:597
    else {  // > CustomCode.linem45:598
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:599
   }  // > CustomCode.linem45:600
   }  // > CustomCode.linem45:601
     //manually  // > CustomCode.linem45:602
  if (elementinteracted==65){ // for 1  // > CustomCode.linem45:603
  elementinteractedmirror=47;  // > CustomCode.linem45:604
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:605
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:606
    }  // > CustomCode.linem45:607
    else {  // > CustomCode.linem45:608
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:609
   }  // > CustomCode.linem45:610
   }  // > CustomCode.linem45:611
     //manually  // > CustomCode.linem45:612
  if (elementinteracted==66){ // for 1  // > CustomCode.linem45:613
  elementinteractedmirror=57;  // > CustomCode.linem45:614
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:615
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:616
    }  // > CustomCode.linem45:617
    else {  // > CustomCode.linem45:618
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:619
   }  // > CustomCode.linem45:620
   }  // > CustomCode.linem45:621
      // > CustomCode.linem45:622
     //manually  // > CustomCode.linem45:623
  if (elementinteracted==68){ // for 1  // > CustomCode.linem45:624
  elementinteractedmirror=77;  // > CustomCode.linem45:625
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:626
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:627
    }  // > CustomCode.linem45:628
    else {  // > CustomCode.linem45:629
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:630
   }  // > CustomCode.linem45:631
   }  // > CustomCode.linem45:632
     //manually  // > CustomCode.linem45:633
  if (elementinteracted==69){ // for 8  // > CustomCode.linem45:634
  elementinteractedmirror=87;  // > CustomCode.linem45:635
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:636
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:637
    }  // > CustomCode.linem45:638
    else {  // > CustomCode.linem45:639
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:640
   }  // > CustomCode.linem45:641
   }  // > CustomCode.linem45:642
     //manually  // > CustomCode.linem45:643
  if (elementinteracted==70){ // for 9  // > CustomCode.linem45:644
  elementinteractedmirror=97;  // > CustomCode.linem45:645
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:646
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:647
    }  // > CustomCode.linem45:648
    else {  // > CustomCode.linem45:649
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:650
   }  // > CustomCode.linem45:651
   }  // > CustomCode.linem45:652
    // 71 to 80 minus 73  // > CustomCode.linem45:653
    //manually  // > CustomCode.linem45:654
  else if (elementinteracted==71){ // for 1  // > CustomCode.linem45:655
  elementinteractedmirror=8;  // > CustomCode.linem45:656
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:657
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:658
    }  // > CustomCode.linem45:659
    else {  // > CustomCode.linem45:660
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:661
   }  // > CustomCode.linem45:662
   }  // > CustomCode.linem45:663
     //manually  // > CustomCode.linem45:664
  if (elementinteracted==72){ // for 1  // > CustomCode.linem45:665
  elementinteractedmirror=18;  // > CustomCode.linem45:666
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:667
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:668
    }  // > CustomCode.linem45:669
    else {  // > CustomCode.linem45:670
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:671
   }  // > CustomCode.linem45:672
   }  // > CustomCode.linem45:673
     //manually  // > CustomCode.linem45:674
     if (elementinteracted==73){ // for 1  // > CustomCode.linem45:675
  elementinteractedmirror=28;  // > CustomCode.linem45:676
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:677
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:678
    }  // > CustomCode.linem45:679
    else {  // > CustomCode.linem45:680
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:681
   }  // > CustomCode.linem45:682
   }  // > CustomCode.linem45:683
     //manually  // > CustomCode.linem45:684
  if (elementinteracted==74){ // for 1  // > CustomCode.linem45:685
  elementinteractedmirror=38;  // > CustomCode.linem45:686
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:687
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:688
    }  // > CustomCode.linem45:689
    else {  // > CustomCode.linem45:690
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:691
   }  // > CustomCode.linem45:692
   }  // > CustomCode.linem45:693
     //manually  // > CustomCode.linem45:694
  if (elementinteracted==75){ // for 1  // > CustomCode.linem45:695
  elementinteractedmirror=48;  // > CustomCode.linem45:696
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:697
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:698
    }  // > CustomCode.linem45:699
    else {  // > CustomCode.linem45:700
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:701
   }  // > CustomCode.linem45:702
   }  // > CustomCode.linem45:703
     //manually  // > CustomCode.linem45:704
  if (elementinteracted==76){ // for 1  // > CustomCode.linem45:705
  elementinteractedmirror=58;  // > CustomCode.linem45:706
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:707
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:708
    }  // > CustomCode.linem45:709
    else {  // > CustomCode.linem45:710
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:711
   }  // > CustomCode.linem45:712
   }  // > CustomCode.linem45:713
     //manually  // > CustomCode.linem45:714
  if (elementinteracted==77){ // for 1  // > CustomCode.linem45:715
  elementinteractedmirror=68;  // > CustomCode.linem45:716
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:717
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:718
    }  // > CustomCode.linem45:719
    else {  // > CustomCode.linem45:720
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:721
   }  // > CustomCode.linem45:722
   }  // > CustomCode.linem45:723
      // > CustomCode.linem45:724
     //manually  // > CustomCode.linem45:725
  if (elementinteracted==79){ // for 8  // > CustomCode.linem45:726
  elementinteractedmirror=88;  // > CustomCode.linem45:727
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:728
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:729
    }  // > CustomCode.linem45:730
    else {  // > CustomCode.linem45:731
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:732
   }  // > CustomCode.linem45:733
   }  // > CustomCode.linem45:734
     //manually  // > CustomCode.linem45:735
  if (elementinteracted==80){ // for 9  // > CustomCode.linem45:736
  elementinteractedmirror=98;  // > CustomCode.linem45:737
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:738
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:739
    }  // > CustomCode.linem45:740
    else {  // > CustomCode.linem45:741
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:742
   }  // > CustomCode.linem45:743
   }  // > CustomCode.linem45:744
    // 81 to 90 minus 82  // > CustomCode.linem45:745
    //manually  // > CustomCode.linem45:746
  else if (elementinteracted==81){ // for 1  // > CustomCode.linem45:747
  elementinteractedmirror=9;  // > CustomCode.linem45:748
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:749
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:750
    }  // > CustomCode.linem45:751
    else {  // > CustomCode.linem45:752
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:753
   }  // > CustomCode.linem45:754
   }  // > CustomCode.linem45:755
     //manually  // > CustomCode.linem45:756
     else if (elementinteracted==82){ // for 1  // > CustomCode.linem45:757
  elementinteractedmirror=19;  // > CustomCode.linem45:758
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:759
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:760
    }  // > CustomCode.linem45:761
    else {  // > CustomCode.linem45:762
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:763
   }  // > CustomCode.linem45:764
   }  // > CustomCode.linem45:765
   //  // > CustomCode.linem45:766
  if (elementinteracted==83){ // for 1  // > CustomCode.linem45:767
  elementinteractedmirror=29;  // > CustomCode.linem45:768
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:769
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:770
    }  // > CustomCode.linem45:771
    else {  // > CustomCode.linem45:772
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:773
   }  // > CustomCode.linem45:774
   }  // > CustomCode.linem45:775
     //manually  // > CustomCode.linem45:776
  if (elementinteracted==84){ // for 1  // > CustomCode.linem45:777
  elementinteractedmirror=39;  // > CustomCode.linem45:778
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:779
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:780
    }  // > CustomCode.linem45:781
    else {  // > CustomCode.linem45:782
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:783
   }  // > CustomCode.linem45:784
   }  // > CustomCode.linem45:785
     //manually  // > CustomCode.linem45:786
  if (elementinteracted==85){ // for 1  // > CustomCode.linem45:787
  elementinteractedmirror=49; //doing stop here  // > CustomCode.linem45:788
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:789
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:790
    }  // > CustomCode.linem45:791
    else {  // > CustomCode.linem45:792
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:793
   }  // > CustomCode.linem45:794
   }  // > CustomCode.linem45:795
     //manually  // > CustomCode.linem45:796
  if (elementinteracted==86){ // for 1  // > CustomCode.linem45:797
  elementinteractedmirror=59;  // > CustomCode.linem45:798
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:799
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:800
    }  // > CustomCode.linem45:801
    else {  // > CustomCode.linem45:802
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:803
   }  // > CustomCode.linem45:804
   }  // > CustomCode.linem45:805
     //manually  // > CustomCode.linem45:806
  if (elementinteracted==87){ // for 1  // > CustomCode.linem45:807
  elementinteractedmirror=69;  // > CustomCode.linem45:808
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:809
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:810
    }  // > CustomCode.linem45:811
    else {  // > CustomCode.linem45:812
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:813
   }  // > CustomCode.linem45:814
   }  // > CustomCode.linem45:815
     //manually  // > CustomCode.linem45:816
  if (elementinteracted==88){ // for 1  // > CustomCode.linem45:817
  elementinteractedmirror=79;  // > CustomCode.linem45:818
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:819
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:820
    }  // > CustomCode.linem45:821
    else {  // > CustomCode.linem45:822
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:823
   }  // > CustomCode.linem45:824
   }  // > CustomCode.linem45:825
       // > CustomCode.linem45:826
     //manually  // > CustomCode.linem45:827
  if (elementinteracted==90){ // for 9  // > CustomCode.linem45:828
  elementinteractedmirror=99;  // > CustomCode.linem45:829
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:830
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:831
    }  // > CustomCode.linem45:832
    else {  // > CustomCode.linem45:833
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:834
   }  // > CustomCode.linem45:835
   }  // > CustomCode.linem45:836
    // 91 to 100 minus 91  // > CustomCode.linem45:837
    //manually  // > CustomCode.linem45:838
    else if (elementinteracted==91){ // for 1  // > CustomCode.linem45:839
  elementinteractedmirror=10;  // > CustomCode.linem45:840
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:841
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:842
    }  // > CustomCode.linem45:843
    else {  // > CustomCode.linem45:844
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:845
   }  // > CustomCode.linem45:846
   }  // > CustomCode.linem45:847
     //manually  // > CustomCode.linem45:848
  else if (elementinteracted==92){ // for 1  // > CustomCode.linem45:849
  elementinteractedmirror=20;  // > CustomCode.linem45:850
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:851
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:852
    }  // > CustomCode.linem45:853
    else {  // > CustomCode.linem45:854
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:855
   }  // > CustomCode.linem45:856
   }  // > CustomCode.linem45:857
     //manually  // > CustomCode.linem45:858
  if (elementinteracted==93){ // for 1  // > CustomCode.linem45:859
  elementinteractedmirror=30;  // > CustomCode.linem45:860
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:861
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:862
    }  // > CustomCode.linem45:863
    else {  // > CustomCode.linem45:864
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:865
   }  // > CustomCode.linem45:866
   }  // > CustomCode.linem45:867
     //manually  // > CustomCode.linem45:868
  if (elementinteracted==94){ // for 1  // > CustomCode.linem45:869
  elementinteractedmirror=40;  // > CustomCode.linem45:870
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:871
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:872
    }  // > CustomCode.linem45:873
    else {  // > CustomCode.linem45:874
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:875
   }  // > CustomCode.linem45:876
   }  // > CustomCode.linem45:877
     //manually  // > CustomCode.linem45:878
  if (elementinteracted==95){ // for 1  // > CustomCode.linem45:879
  elementinteractedmirror=50; //doing stop here  // > CustomCode.linem45:880
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:881
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:882
    }  // > CustomCode.linem45:883
    else {  // > CustomCode.linem45:884
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:885
   }  // > CustomCode.linem45:886
   }  // > CustomCode.linem45:887
     //manually  // > CustomCode.linem45:888
  if (elementinteracted==96){ // for 1  // > CustomCode.linem45:889
  elementinteractedmirror=60;  // > CustomCode.linem45:890
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:891
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:892
    }  // > CustomCode.linem45:893
    else {  // > CustomCode.linem45:894
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:895
   }  // > CustomCode.linem45:896
   }  // > CustomCode.linem45:897
     //manually  // > CustomCode.linem45:898
  if (elementinteracted==97){ // for 1  // > CustomCode.linem45:899
  elementinteractedmirror=70;  // > CustomCode.linem45:900
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:901
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:902
    }  // > CustomCode.linem45:903
    else {  // > CustomCode.linem45:904
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:905
   }  // > CustomCode.linem45:906
   }  // > CustomCode.linem45:907
     //manually  // > CustomCode.linem45:908
  if (elementinteracted==98){ // for 1  // > CustomCode.linem45:909
  elementinteractedmirror=80;  // > CustomCode.linem45:910
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:911
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:912
    }  // > CustomCode.linem45:913
    else {  // > CustomCode.linem45:914
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:915
   }  // > CustomCode.linem45:916
   }  // > CustomCode.linem45:917
     //manually  // > CustomCode.linem45:918
  if (elementinteracted==99){ // for 8  // > CustomCode.linem45:919
  elementinteractedmirror=90;  // > CustomCode.linem45:920
  if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > CustomCode.linem45:921
    colorVectors[elementinteractedmirror]=colororiginal;  // > CustomCode.linem45:922
    }  // > CustomCode.linem45:923
    else {  // > CustomCode.linem45:924
  colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > CustomCode.linem45:925
   }  // > CustomCode.linem45:926
   }  // > CustomCode.linem45:927
       // > CustomCode.linem45:928
     // > CustomCode.linem45:929
     // > CustomCode.linem45:930
     // > CustomCode.linem45:931
     // > CustomCode.linem45:932
   }  // > CustomCode.linem45:933
  }  // > CustomCode.linem45:934

  function drawlineListener () {  // > CustomCode.drawline:1
    //xi= _info.point[0];  // > CustomCode.drawline:2
    //yi= _info.point[1];  // > CustomCode.drawline:3
    var position = _view.plottingPanel.getInteraction().getInteractionPoint();  // > CustomCode.drawline:4
    if (draw==true){  // > CustomCode.drawline:5
      drawline=false; // set other to false to avoid conflict lookang  // > CustomCode.drawline:6
      xi = position[0];  // > CustomCode.drawline:7
      yi = position[1];  // > CustomCode.drawline:8
    }  // > CustomCode.drawline:9
    if (drawline==true){  // > CustomCode.drawline:10
      //xiline = Math.round(_info._point[0]); // orginal point still draw  // > CustomCode.drawline:11
      //yiline = Math.round(_info._point[1]);  // > CustomCode.drawline:12
      draw=false; // set other to false to avoid conflict lookang  // > CustomCode.drawline:13
      xiline = Math.round(position[0]); // orginal point still draw  // > CustomCode.drawline:14
      yiline = Math.round(position[1]);  // > CustomCode.drawline:15
      xilineset[countline] = xiline; //plot pointssets  // > CustomCode.drawline:16
      yilineset[countline] = yiline;  // > CustomCode.drawline:17
   //   alert("does it work?");  // > CustomCode.drawline:18
      if (countline==0){  // > CustomCode.drawline:19
        //handle first time ntg   // > CustomCode.drawline:20
        //90 initialise first mirror points  // > CustomCode.drawline:21
        xilineset90[countline] = -xiline; //plot pointssets  // > CustomCode.drawline:22
        yilineset90[countline] = yiline;  // > CustomCode.drawline:23
        //00 initialise first mirror points  // > CustomCode.drawline:24
        xilineset00[countline] = xiline; //plot pointssets  // > CustomCode.drawline:25
        yilineset00[countline] = -yiline;  // > CustomCode.drawline:26
        //45 initialise first mirror points  // > CustomCode.drawline:27
        xilineset45[countline] = yiline; //plot pointssets  // > CustomCode.drawline:28
        yilineset45[countline] = xiline;  // > CustomCode.drawline:29
        //n45  // > CustomCode.drawline:30
        xilinesetn45[countline]=-yiline;  // > CustomCode.drawline:31
        yilinesetn45[countline]=-xiline;  // > CustomCode.drawline:32
        //alert(countline); //test  // > CustomCode.drawline:33
      }  // > CustomCode.drawline:34
      else {  // > CustomCode.drawline:35
        dxilineset[countline] = xilineset[countline]-xilineset[countline-1];  // > CustomCode.drawline:36
        dyilineset[countline] = yilineset[countline]-yilineset[countline-1];  // > CustomCode.drawline:37
        //90 line  // > CustomCode.drawline:38
        xilineset90[countline]=-xilineset[countline];  // > CustomCode.drawline:39
        yilineset90[countline]=yilineset[countline];  // > CustomCode.drawline:40
        dxilineset90[countline] = (xilineset90[countline]-xilineset90[countline-1]);  // > CustomCode.drawline:41
        dyilineset90[countline] = yilineset90[countline]-yilineset90[countline-1];  // > CustomCode.drawline:42
        //00 line  // > CustomCode.drawline:43
        xilineset00[countline]=xilineset[countline];  // > CustomCode.drawline:44
        yilineset00[countline]=-yilineset[countline];  // > CustomCode.drawline:45
        dxilineset00[countline] = (xilineset00[countline]-xilineset00[countline-1]);  // > CustomCode.drawline:46
        dyilineset00[countline] = yilineset00[countline]-yilineset00[countline-1];  // > CustomCode.drawline:47
        //45 line  // > CustomCode.drawline:48
        xilineset45[countline]=yilineset[countline];  // > CustomCode.drawline:49
        yilineset45[countline]=xilineset[countline];  // > CustomCode.drawline:50
        dxilineset45[countline] = (xilineset45[countline]-xilineset45[countline-1]);  // > CustomCode.drawline:51
        dyilineset45[countline] = yilineset45[countline]-yilineset45[countline-1];  // > CustomCode.drawline:52
        //n45 line  // > CustomCode.drawline:53
        xilinesetn45[countline]=-yilineset[countline];  // > CustomCode.drawline:54
        yilinesetn45[countline]=-xilineset[countline];  // > CustomCode.drawline:55
        dxilinesetn45[countline] = (xilinesetn45[countline]-xilinesetn45[countline-1]);  // > CustomCode.drawline:56
        dyilinesetn45[countline] = yilinesetn45[countline]-yilinesetn45[countline-1];  // > CustomCode.drawline:57
      }    // > CustomCode.drawline:58
      countline= countline+1;  // > CustomCode.drawline:59
      //alert();  // > CustomCode.drawline:60
    }  // > CustomCode.drawline:61
  }  // > CustomCode.drawline:62

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (letter==undefined){  // > Initialization.undefined:1
      letter = "A";  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
      if (hint==undefined){  // > Initialization.undefined:4
       hint=false;  // > Initialization.undefined:5
      }  // > Initialization.undefined:6
      if (draw==undefined){  // > Initialization.undefined:7
       draw=false;  // > Initialization.undefined:8
      }  // > Initialization.undefined:9
      if (drawline==undefined){  // > Initialization.undefined:10
       drawline=false;  // > Initialization.undefined:11
      }  // > Initialization.undefined:12
     if (textshow==undefined){  // > Initialization.undefined:13
       textshow=false; //letter show  // > Initialization.undefined:14
      }  // > Initialization.undefined:15
    if (removegrid==undefined){  // > Initialization.undefined:16
       removegrid=true; //grid hide reverse  // > Initialization.undefined:17
      }  // > Initialization.undefined:18
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    var dx = (xmax-xmin)/(nVectors);  // > Initialization.Init Page:1
    var dy = (ymax-ymin)/(nVectors);  // > Initialization.Init Page:2
    //draw outside unused arrays lookang  // > Initialization.Init Page:3
    for (var i = 1; i < nVectorsMax+1; i++)  // > Initialization.Init Page:4
    {  // > Initialization.Init Page:5
      for (var j = 0; j < nVectorsMax+1; j++)  // > Initialization.Init Page:6
      {  // > Initialization.Init Page:7
       vectorIndex = i+nVectors*j;  // > Initialization.Init Page:8
       textpos[vectorIndex] = ""+vectorIndex;  // > Initialization.Init Page:9
      //  oddtextpos[vectorIndex] = ""+vectorIndex; // for odd game  // > Initialization.Init Page:10
      //  eventextpos[vectorIndex] = ""+vectorIndex; // for even game  // > Initialization.Init Page:11
      //  multipletextpos[vectorIndex] = ""+vectorIndex; // for mulitple game  // > Initialization.Init Page:12
      //  multipletextpos2[vectorIndex] = ""+vectorIndex; // for mulitples 2 game to generate unique answers key  // > Initialization.Init Page:13
      //  factortextpos[vectorIndex] = ""+vectorIndex; // for factor game to generate unique answers key  // > Initialization.Init Page:14
       posx[vectorIndex]=xmin+(i-0.5)*dx; //-0.5 to postion with o as centre  // > Initialization.Init Page:15
        posy[vectorIndex]=ymax-(j+0.5)*dy; //put far away  // > Initialization.Init Page:16
             // > Initialization.Init Page:17
      }  // > Initialization.Init Page:18
    }  // > Initialization.Init Page:19
    posx[0]= xmin-dx; // put outside screen  // > Initialization.Init Page:20
    posy[0]= ymin-dy;  // > Initialization.Init Page:21
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["arrayobject"]) return;
    for (var i=0; i<101 ; i++) {  // > Initialization.arrayobject:1
     arrayobject[i]=i;  // > Initialization.arrayobject:2
    }  // > Initialization.arrayobject:3
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="50%" fy="50%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:0.3" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.3" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient)"  // > Initialization.svg:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["alert"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["vertical"]) return;
    function vertical () {  // > FixedRelations.vertical:1
    //if (elementinteracted<0)elementinteracted=-11 // fix bug of 11 selected  // > FixedRelations.vertical:2
    //if (_view.comboBox.getProperty("SelectedOptions")=="vertical"){  // > FixedRelations.vertical:3
        // > FixedRelations.vertical:4
    if (comboboxmode==1&&quizmode==false){  // > FixedRelations.vertical:5
      //textshow=true;  // > FixedRelations.vertical:6
      xtextmirror = -xtext;  // > FixedRelations.vertical:7
      ytextmirror = ytext;  // > FixedRelations.vertical:8
      scalextext = -1*myscale;  // > FixedRelations.vertical:9
        // > FixedRelations.vertical:10
      scaleytext = 1; //1 is default do nothing  // > FixedRelations.vertical:11
      rotate = 0;  // > FixedRelations.vertical:12
      //for (var i=1; i<100 /* Iterations */ ; i++) {  // > FixedRelations.vertical:13
      //colorVectors[i] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:14
    //}  // > FixedRelations.vertical:15
    if (elementinteracted>0&&elementinteracted<11){ // for 1 to 10   // > FixedRelations.vertical:16
    elementinteractedmirror=(11-elementinteracted);  // > FixedRelations.vertical:17
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:18
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:19
      }  // > FixedRelations.vertical:20
      else {  // > FixedRelations.vertical:21
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:22
     }  // > FixedRelations.vertical:23
     }  // > FixedRelations.vertical:24
     else if (elementinteracted>10&&elementinteracted<21){ // for 11 to 20  // > FixedRelations.vertical:25
    elementinteractedmirror=(31-elementinteracted);  // > FixedRelations.vertical:26
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:27
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:28
      }  // > FixedRelations.vertical:29
      else {  // > FixedRelations.vertical:30
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:31
     }  // > FixedRelations.vertical:32
     }  // > FixedRelations.vertical:33
     //  // > FixedRelations.vertical:34
     else if (elementinteracted>20&&elementinteracted<31){ // for 21 to 30  // > FixedRelations.vertical:35
    elementinteractedmirror=(51-elementinteracted);  // > FixedRelations.vertical:36
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:37
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:38
      }  // > FixedRelations.vertical:39
      else {  // > FixedRelations.vertical:40
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:41
     }  // > FixedRelations.vertical:42
     }  // > FixedRelations.vertical:43
     //  // > FixedRelations.vertical:44
     else if (elementinteracted>30&&elementinteracted<41){ // for 31 to 40  // > FixedRelations.vertical:45
    elementinteractedmirror=(71-elementinteracted);  // > FixedRelations.vertical:46
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:47
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:48
      }  // > FixedRelations.vertical:49
      else {  // > FixedRelations.vertical:50
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:51
     }  // > FixedRelations.vertical:52
     }  // > FixedRelations.vertical:53
     //  // > FixedRelations.vertical:54
     else if (elementinteracted>40&&elementinteracted<51){ // for 41 to 50  // > FixedRelations.vertical:55
    elementinteractedmirror=(91-elementinteracted);  // > FixedRelations.vertical:56
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:57
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:58
      }  // > FixedRelations.vertical:59
      else {  // > FixedRelations.vertical:60
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:61
     }  // > FixedRelations.vertical:62
     }  // > FixedRelations.vertical:63
     //  // > FixedRelations.vertical:64
     else if (elementinteracted<61){ // for 51 to 60  // > FixedRelations.vertical:65
    elementinteractedmirror=(111-elementinteracted);  // > FixedRelations.vertical:66
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:67
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:68
      }  // > FixedRelations.vertical:69
      else {  // > FixedRelations.vertical:70
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:71
     }  // > FixedRelations.vertical:72
     }  // > FixedRelations.vertical:73
     //  // > FixedRelations.vertical:74
     else if (elementinteracted<71){ // for 61 to 70  // > FixedRelations.vertical:75
    elementinteractedmirror=(131-elementinteracted);  // > FixedRelations.vertical:76
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:77
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:78
      }  // > FixedRelations.vertical:79
      else {  // > FixedRelations.vertical:80
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:81
     }  // > FixedRelations.vertical:82
     }  // > FixedRelations.vertical:83
       // > FixedRelations.vertical:84
     //  // > FixedRelations.vertical:85
     else if (elementinteracted<81){ // for 71 to 80  // > FixedRelations.vertical:86
    elementinteractedmirror=(151-elementinteracted);  // > FixedRelations.vertical:87
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:88
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:89
      }  // > FixedRelations.vertical:90
      else {  // > FixedRelations.vertical:91
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:92
     }  // > FixedRelations.vertical:93
     }  // > FixedRelations.vertical:94
     //  // > FixedRelations.vertical:95
     else if (elementinteracted<91){ // for 81 to 90  // > FixedRelations.vertical:96
    elementinteractedmirror=(171-elementinteracted);  // > FixedRelations.vertical:97
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:98
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:99
      }  // > FixedRelations.vertical:100
      else {  // > FixedRelations.vertical:101
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:102
     }  // > FixedRelations.vertical:103
     }  // > FixedRelations.vertical:104
     //  // > FixedRelations.vertical:105
     else if (elementinteracted<101){ // for 91 to 100  // > FixedRelations.vertical:106
    elementinteractedmirror=(191-elementinteracted);  // > FixedRelations.vertical:107
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical:108
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical:109
      }  // > FixedRelations.vertical:110
      else {  // > FixedRelations.vertical:111
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical:112
     }  // > FixedRelations.vertical:113
     }  // > FixedRelations.vertical:114
       // > FixedRelations.vertical:115
       // > FixedRelations.vertical:116
     }  // > FixedRelations.vertical:117
    }  // > FixedRelations.vertical:118
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["vertical 2"]) return;
    //if (elementinteracted<0)elementinteracted=-11 // fix bug of 11 selected  // > FixedRelations.vertical 2:1
    //if (_view.comboBox.getProperty("SelectedOptions")=="vertical"){  // > FixedRelations.vertical 2:2
        // > FixedRelations.vertical 2:3
    if (comboboxmode==1&&quizmode==false){  // > FixedRelations.vertical 2:4
      //textshow=true;  // > FixedRelations.vertical 2:5
      xtextmirror = -xtext;  // > FixedRelations.vertical 2:6
      ytextmirror = ytext;  // > FixedRelations.vertical 2:7
      scalextext = -1*myscale;  // > FixedRelations.vertical 2:8
        // > FixedRelations.vertical 2:9
      scaleytext = 1; //1 is default do nothing  // > FixedRelations.vertical 2:10
      rotate = 0;  // > FixedRelations.vertical 2:11
      //for (var i=1; i<100 /* Iterations */ ; i++) {  // > FixedRelations.vertical 2:12
      //colorVectors[i] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:13
    //}  // > FixedRelations.vertical 2:14
    if (elementinteracted>0&&elementinteracted<11){ // for 1 to 10   // > FixedRelations.vertical 2:15
    elementinteractedmirror=(11-elementinteracted);  // > FixedRelations.vertical 2:16
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:17
     }  // > FixedRelations.vertical 2:18
     else if (elementinteracted>10&&elementinteracted<21){ // for 11 to 20  // > FixedRelations.vertical 2:19
    elementinteractedmirror=(31-elementinteracted);  // > FixedRelations.vertical 2:20
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:21
       // > FixedRelations.vertical 2:22
     }  // > FixedRelations.vertical 2:23
     //  // > FixedRelations.vertical 2:24
     else if (elementinteracted>20&&elementinteracted<31){ // for 21 to 30  // > FixedRelations.vertical 2:25
    elementinteractedmirror=(51-elementinteracted);  // > FixedRelations.vertical 2:26
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:27
     }  // > FixedRelations.vertical 2:28
     //  // > FixedRelations.vertical 2:29
     else if (elementinteracted>30&&elementinteracted<41){ // for 31 to 40  // > FixedRelations.vertical 2:30
    elementinteractedmirror=(71-elementinteracted);  // > FixedRelations.vertical 2:31
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:32
     }  // > FixedRelations.vertical 2:33
     //  // > FixedRelations.vertical 2:34
     else if (elementinteracted>40&&elementinteracted<51){ // for 41 to 50  // > FixedRelations.vertical 2:35
    elementinteractedmirror=(91-elementinteracted);  // > FixedRelations.vertical 2:36
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:37
       // > FixedRelations.vertical 2:38
     }  // > FixedRelations.vertical 2:39
     //  // > FixedRelations.vertical 2:40
     else if (elementinteracted<61){ // for 51 to 60  // > FixedRelations.vertical 2:41
    elementinteractedmirror=(111-elementinteracted);  // > FixedRelations.vertical 2:42
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.vertical 2:43
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.vertical 2:44
      }  // > FixedRelations.vertical 2:45
      else {  // > FixedRelations.vertical 2:46
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:47
     }  // > FixedRelations.vertical 2:48
     }  // > FixedRelations.vertical 2:49
     //  // > FixedRelations.vertical 2:50
     else if (elementinteracted<71){ // for 61 to 70  // > FixedRelations.vertical 2:51
    elementinteractedmirror=(131-elementinteracted);  // > FixedRelations.vertical 2:52
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:53
     }  // > FixedRelations.vertical 2:54
       // > FixedRelations.vertical 2:55
     //  // > FixedRelations.vertical 2:56
     else if (elementinteracted<81){ // for 71 to 80  // > FixedRelations.vertical 2:57
    elementinteractedmirror=(151-elementinteracted);  // > FixedRelations.vertical 2:58
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:59
     }  // > FixedRelations.vertical 2:60
     //  // > FixedRelations.vertical 2:61
     else if (elementinteracted<91){ // for 81 to 90  // > FixedRelations.vertical 2:62
    elementinteractedmirror=(171-elementinteracted);  // > FixedRelations.vertical 2:63
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:64
     }  // > FixedRelations.vertical 2:65
     //  // > FixedRelations.vertical 2:66
     else if (elementinteracted<101){ // for 91 to 100  // > FixedRelations.vertical 2:67
    elementinteractedmirror=(191-elementinteracted);  // > FixedRelations.vertical 2:68
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.vertical 2:69
     }  // > FixedRelations.vertical 2:70
       // > FixedRelations.vertical 2:71
       // > FixedRelations.vertical 2:72
     }  // > FixedRelations.vertical 2:73
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["horizontal"]) return;
    //if (_view.comboBox.getProperty("SelectedOptions")=="horizontal"){  // > FixedRelations.horizontal:1
      //for (var i=1; i<100 /* Iterations */ ; i++) {  // > FixedRelations.horizontal:2
      //colorVectors[i] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:3
    //}  // > FixedRelations.horizontal:4
    if (comboboxmode==2&&quizmode==false){  // > FixedRelations.horizontal:5
       xtextmirror = xtext;  // > FixedRelations.horizontal:6
      ytextmirror = -ytext;  // > FixedRelations.horizontal:7
      scalextext = 1*myscale;  // > FixedRelations.horizontal:8
      scaleytext = -1; //1 is default do nothing  // > FixedRelations.horizontal:9
      rotate = 0;  // > FixedRelations.horizontal:10
    for (var i=0; i<10 /* Iterations */ ; i++) { //special codes  // > FixedRelations.horizontal:11
        // > FixedRelations.horizontal:12
        // > FixedRelations.horizontal:13
    if (elementinteracted==(i*10+1)){ // for 1,11,21,31,....  // > FixedRelations.horizontal:14
    elementinteractedmirror=(92-elementinteracted);  // > FixedRelations.horizontal:15
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:16
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:17
      }  // > FixedRelations.horizontal:18
      else {  // > FixedRelations.horizontal:19
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:20
     }  // > FixedRelations.horizontal:21
     }  // > FixedRelations.horizontal:22
     //  // > FixedRelations.horizontal:23
     if (elementinteracted==(i*10+2)){ // for 2,12,22,32,....  // > FixedRelations.horizontal:24
    elementinteractedmirror=(94-elementinteracted);  // > FixedRelations.horizontal:25
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:26
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:27
      }  // > FixedRelations.horizontal:28
      else {  // > FixedRelations.horizontal:29
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:30
     }  // > FixedRelations.horizontal:31
     }  // > FixedRelations.horizontal:32
     //  // > FixedRelations.horizontal:33
     if (elementinteracted==(i*10+3)){ // for 3,13,23,33,....  // > FixedRelations.horizontal:34
    elementinteractedmirror=(96-elementinteracted);  // > FixedRelations.horizontal:35
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:36
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:37
      }  // > FixedRelations.horizontal:38
      else {  // > FixedRelations.horizontal:39
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:40
     }  // > FixedRelations.horizontal:41
     }  // > FixedRelations.horizontal:42
     //  // > FixedRelations.horizontal:43
     if (elementinteracted==(i*10+4)){ // for 4,14,24,34,....  // > FixedRelations.horizontal:44
    elementinteractedmirror=(98-elementinteracted);  // > FixedRelations.horizontal:45
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:46
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:47
      }  // > FixedRelations.horizontal:48
      else {  // > FixedRelations.horizontal:49
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:50
     }  // > FixedRelations.horizontal:51
     }  // > FixedRelations.horizontal:52
     //  // > FixedRelations.horizontal:53
     if (elementinteracted==(i*10+5)){ // for 5,15,25,35,....  // > FixedRelations.horizontal:54
    elementinteractedmirror=(100-elementinteracted);  // > FixedRelations.horizontal:55
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:56
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:57
      }  // > FixedRelations.horizontal:58
      else {  // > FixedRelations.horizontal:59
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:60
     }  // > FixedRelations.horizontal:61
     }  // > FixedRelations.horizontal:62
     //  // > FixedRelations.horizontal:63
     if (elementinteracted==(i*10+6)){ // for 6,16,26,36,....  // > FixedRelations.horizontal:64
    elementinteractedmirror=(102-elementinteracted);  // > FixedRelations.horizontal:65
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:66
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:67
      }  // > FixedRelations.horizontal:68
      else {  // > FixedRelations.horizontal:69
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:70
     }  // > FixedRelations.horizontal:71
     }  // > FixedRelations.horizontal:72
     //  // > FixedRelations.horizontal:73
     if (elementinteracted==(i*10+7)){ // for 7,17,27,37,....  // > FixedRelations.horizontal:74
    elementinteractedmirror=(104-elementinteracted);  // > FixedRelations.horizontal:75
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:76
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:77
      }  // > FixedRelations.horizontal:78
      else {  // > FixedRelations.horizontal:79
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:80
     }  // > FixedRelations.horizontal:81
     }  // > FixedRelations.horizontal:82
     //  // > FixedRelations.horizontal:83
     if (elementinteracted==(i*10+8)){ // for 8,18,28,38,....  // > FixedRelations.horizontal:84
    elementinteractedmirror=(106-elementinteracted);  // > FixedRelations.horizontal:85
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:86
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:87
      }  // > FixedRelations.horizontal:88
      else {  // > FixedRelations.horizontal:89
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:90
     }  // > FixedRelations.horizontal:91
     }  // > FixedRelations.horizontal:92
     //  // > FixedRelations.horizontal:93
     if (elementinteracted==(i*10+9)){ // for 9,19,29,39,....  // > FixedRelations.horizontal:94
    elementinteractedmirror=(108-elementinteracted);  // > FixedRelations.horizontal:95
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:96
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:97
      }  // > FixedRelations.horizontal:98
      else {  // > FixedRelations.horizontal:99
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:100
     }  // > FixedRelations.horizontal:101
     }  // > FixedRelations.horizontal:102
     //  // > FixedRelations.horizontal:103
     if (elementinteracted==(i*10+10)){ // for 10,20,30,40,....  // > FixedRelations.horizontal:104
    elementinteractedmirror=(110-elementinteracted);  // > FixedRelations.horizontal:105
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.horizontal:106
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.horizontal:107
      }  // > FixedRelations.horizontal:108
      else {  // > FixedRelations.horizontal:109
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.horizontal:110
     }  // > FixedRelations.horizontal:111
     }  // > FixedRelations.horizontal:112
       // > FixedRelations.horizontal:113
       // > FixedRelations.horizontal:114
     }  // > FixedRelations.horizontal:115
     }  // > FixedRelations.horizontal:116
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["45line"]) return;
    //if (_view.comboBox.getProperty("SelectedOptions")=="45 line"){  // > FixedRelations.45line:1
      //for (var i=1; i<100 /* Iterations */ ; i++) {  // > FixedRelations.45line:2
      //colorVectors[i] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:3
    //}  // > FixedRelations.45line:4
    if (comboboxmode==3&&quizmode==false){  // > FixedRelations.45line:5
       // > FixedRelations.45line:6
     // xtextmirror = ytext;  // > FixedRelations.45line:7
      //ytextmirror = xtext;  // > FixedRelations.45line:8
       xtextmirror = ytext;  // > FixedRelations.45line:9
      ytextmirror = xtext;  // > FixedRelations.45line:10
     // scalextext = -1;  // > FixedRelations.45line:11
     // scaleytext = -1; //1 is default do nothing  // > FixedRelations.45line:12
       scalextext = -1;  // > FixedRelations.45line:13
      scaleytext = 1*myscale; //1 is default do nothing  // > FixedRelations.45line:14
     rotate = pi/2;  // > FixedRelations.45line:15
       // > FixedRelations.45line:16
     //manually  // > FixedRelations.45line:17
    if (elementinteracted==1){ // for 1  // > FixedRelations.45line:18
    elementinteractedmirror=100;  // > FixedRelations.45line:19
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:20
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:21
      }  // > FixedRelations.45line:22
      else {  // > FixedRelations.45line:23
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:24
     }  // > FixedRelations.45line:25
     }  // > FixedRelations.45line:26
       //manually  // > FixedRelations.45line:27
    if (elementinteracted==2){ // for 1  // > FixedRelations.45line:28
    elementinteractedmirror=90;  // > FixedRelations.45line:29
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:30
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:31
      }  // > FixedRelations.45line:32
      else {  // > FixedRelations.45line:33
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:34
     }  // > FixedRelations.45line:35
     }  // > FixedRelations.45line:36
       //manually  // > FixedRelations.45line:37
    if (elementinteracted==3){ // for 1  // > FixedRelations.45line:38
    elementinteractedmirror=80;  // > FixedRelations.45line:39
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:40
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:41
      }  // > FixedRelations.45line:42
      else {  // > FixedRelations.45line:43
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:44
     }  // > FixedRelations.45line:45
     }  // > FixedRelations.45line:46
       //manually  // > FixedRelations.45line:47
    if (elementinteracted==4){ // for 1  // > FixedRelations.45line:48
    elementinteractedmirror=70;  // > FixedRelations.45line:49
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:50
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:51
      }  // > FixedRelations.45line:52
      else {  // > FixedRelations.45line:53
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:54
     }  // > FixedRelations.45line:55
     }  // > FixedRelations.45line:56
       //manually  // > FixedRelations.45line:57
    if (elementinteracted==5){ // for 1  // > FixedRelations.45line:58
    elementinteractedmirror=60;  // > FixedRelations.45line:59
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:60
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:61
      }  // > FixedRelations.45line:62
      else {  // > FixedRelations.45line:63
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:64
     }  // > FixedRelations.45line:65
     }  // > FixedRelations.45line:66
       //manually  // > FixedRelations.45line:67
    if (elementinteracted==6){ // for 1  // > FixedRelations.45line:68
    elementinteractedmirror=50;  // > FixedRelations.45line:69
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:70
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:71
      }  // > FixedRelations.45line:72
      else {  // > FixedRelations.45line:73
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:74
     }  // > FixedRelations.45line:75
     }  // > FixedRelations.45line:76
       //manually  // > FixedRelations.45line:77
    if (elementinteracted==7){ // for 1  // > FixedRelations.45line:78
    elementinteractedmirror=40;  // > FixedRelations.45line:79
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:80
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:81
      }  // > FixedRelations.45line:82
      else {  // > FixedRelations.45line:83
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:84
     }  // > FixedRelations.45line:85
     }  // > FixedRelations.45line:86
       //manually  // > FixedRelations.45line:87
    if (elementinteracted==8){ // for 8  // > FixedRelations.45line:88
    elementinteractedmirror=30;  // > FixedRelations.45line:89
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:90
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:91
      }  // > FixedRelations.45line:92
      else {  // > FixedRelations.45line:93
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:94
     }  // > FixedRelations.45line:95
     }  // > FixedRelations.45line:96
       //manually  // > FixedRelations.45line:97
    if (elementinteracted==9){ // for 9  // > FixedRelations.45line:98
    elementinteractedmirror=20;  // > FixedRelations.45line:99
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:100
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:101
      }  // > FixedRelations.45line:102
      else {  // > FixedRelations.45line:103
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:104
     }  // > FixedRelations.45line:105
     }  // > FixedRelations.45line:106
     // 11 to 20 minus 19  // > FixedRelations.45line:107
      //manually  // > FixedRelations.45line:108
    else if (elementinteracted==11){ // for 1  // > FixedRelations.45line:109
    elementinteractedmirror=99;  // > FixedRelations.45line:110
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:111
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:112
      }  // > FixedRelations.45line:113
      else {  // > FixedRelations.45line:114
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:115
     }  // > FixedRelations.45line:116
     }  // > FixedRelations.45line:117
       //manually  // > FixedRelations.45line:118
    if (elementinteracted==12){ // for 1  // > FixedRelations.45line:119
    elementinteractedmirror=89;  // > FixedRelations.45line:120
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:121
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:122
      }  // > FixedRelations.45line:123
      else {  // > FixedRelations.45line:124
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:125
     }  // > FixedRelations.45line:126
     }  // > FixedRelations.45line:127
       //manually  // > FixedRelations.45line:128
    if (elementinteracted==13){ // for 1  // > FixedRelations.45line:129
    elementinteractedmirror=79;  // > FixedRelations.45line:130
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:131
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:132
      }  // > FixedRelations.45line:133
      else {  // > FixedRelations.45line:134
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:135
     }  // > FixedRelations.45line:136
     }  // > FixedRelations.45line:137
       //manually  // > FixedRelations.45line:138
    if (elementinteracted==14){ // for 1  // > FixedRelations.45line:139
    elementinteractedmirror=69;  // > FixedRelations.45line:140
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:141
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:142
      }  // > FixedRelations.45line:143
      else {  // > FixedRelations.45line:144
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:145
     }  // > FixedRelations.45line:146
     }  // > FixedRelations.45line:147
       //manually  // > FixedRelations.45line:148
    if (elementinteracted==15){ // for 1  // > FixedRelations.45line:149
    elementinteractedmirror=59;  // > FixedRelations.45line:150
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:151
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:152
      }  // > FixedRelations.45line:153
      else {  // > FixedRelations.45line:154
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:155
     }  // > FixedRelations.45line:156
     }  // > FixedRelations.45line:157
       //manually  // > FixedRelations.45line:158
    if (elementinteracted==16){ // for 1  // > FixedRelations.45line:159
    elementinteractedmirror=49;  // > FixedRelations.45line:160
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:161
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:162
      }  // > FixedRelations.45line:163
      else {  // > FixedRelations.45line:164
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:165
     }  // > FixedRelations.45line:166
     }  // > FixedRelations.45line:167
       //manually  // > FixedRelations.45line:168
    if (elementinteracted==17){ // for 1  // > FixedRelations.45line:169
    elementinteractedmirror=39;  // > FixedRelations.45line:170
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:171
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:172
      }  // > FixedRelations.45line:173
      else {  // > FixedRelations.45line:174
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:175
     }  // > FixedRelations.45line:176
     }  // > FixedRelations.45line:177
       //manually  // > FixedRelations.45line:178
    if (elementinteracted==18){ // for 8  // > FixedRelations.45line:179
    elementinteractedmirror=29;  // > FixedRelations.45line:180
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:181
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:182
      }  // > FixedRelations.45line:183
      else {  // > FixedRelations.45line:184
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:185
     }  // > FixedRelations.45line:186
     }  // > FixedRelations.45line:187
       //manually  // > FixedRelations.45line:188
    if (elementinteracted==20){ // for 9  // > FixedRelations.45line:189
    elementinteractedmirror=9;  // > FixedRelations.45line:190
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:191
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:192
      }  // > FixedRelations.45line:193
      else {  // > FixedRelations.45line:194
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:195
     }  // > FixedRelations.45line:196
     }  // > FixedRelations.45line:197
     // 21 to 30 minus 28  // > FixedRelations.45line:198
      //manually  // > FixedRelations.45line:199
    else if (elementinteracted==21){ // for 1  // > FixedRelations.45line:200
    elementinteractedmirror=98;  // > FixedRelations.45line:201
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:202
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:203
      }  // > FixedRelations.45line:204
      else {  // > FixedRelations.45line:205
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:206
     }  // > FixedRelations.45line:207
     }  // > FixedRelations.45line:208
       //manually  // > FixedRelations.45line:209
    if (elementinteracted==22){ // for 1  // > FixedRelations.45line:210
    elementinteractedmirror=88;  // > FixedRelations.45line:211
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:212
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:213
      }  // > FixedRelations.45line:214
      else {  // > FixedRelations.45line:215
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:216
     }  // > FixedRelations.45line:217
     }  // > FixedRelations.45line:218
       //manually  // > FixedRelations.45line:219
    if (elementinteracted==23){ // for 1  // > FixedRelations.45line:220
    elementinteractedmirror=78;  // > FixedRelations.45line:221
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:222
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:223
      }  // > FixedRelations.45line:224
      else {  // > FixedRelations.45line:225
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:226
     }  // > FixedRelations.45line:227
     }  // > FixedRelations.45line:228
       //manually  // > FixedRelations.45line:229
    if (elementinteracted==24){ // for 1  // > FixedRelations.45line:230
    elementinteractedmirror=68;  // > FixedRelations.45line:231
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:232
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:233
      }  // > FixedRelations.45line:234
      else {  // > FixedRelations.45line:235
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:236
     }  // > FixedRelations.45line:237
     }  // > FixedRelations.45line:238
       //manually  // > FixedRelations.45line:239
    if (elementinteracted==25){ // for 1  // > FixedRelations.45line:240
    elementinteractedmirror=58;  // > FixedRelations.45line:241
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:242
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:243
      }  // > FixedRelations.45line:244
      else {  // > FixedRelations.45line:245
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:246
     }  // > FixedRelations.45line:247
     }  // > FixedRelations.45line:248
       //manually  // > FixedRelations.45line:249
    if (elementinteracted==26){ // for 1  // > FixedRelations.45line:250
    elementinteractedmirror=48;  // > FixedRelations.45line:251
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:252
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:253
      }  // > FixedRelations.45line:254
      else {  // > FixedRelations.45line:255
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:256
     }  // > FixedRelations.45line:257
     }  // > FixedRelations.45line:258
       //manually  // > FixedRelations.45line:259
    if (elementinteracted==27){ // for 1  // > FixedRelations.45line:260
    elementinteractedmirror=38;  // > FixedRelations.45line:261
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:262
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:263
      }  // > FixedRelations.45line:264
      else {  // > FixedRelations.45line:265
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:266
     }  // > FixedRelations.45line:267
     }  // > FixedRelations.45line:268
       //manually  // > FixedRelations.45line:269
    if (elementinteracted==29){ // for 8  // > FixedRelations.45line:270
    elementinteractedmirror=18;  // > FixedRelations.45line:271
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:272
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:273
      }  // > FixedRelations.45line:274
      else {  // > FixedRelations.45line:275
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:276
     }  // > FixedRelations.45line:277
     }  // > FixedRelations.45line:278
       //manually  // > FixedRelations.45line:279
    if (elementinteracted==30){ // for 9  // > FixedRelations.45line:280
    elementinteractedmirror=8;  // > FixedRelations.45line:281
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:282
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:283
      }  // > FixedRelations.45line:284
      else {  // > FixedRelations.45line:285
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:286
     }  // > FixedRelations.45line:287
     }  // > FixedRelations.45line:288
     // 31 to 40 minus 37  // > FixedRelations.45line:289
      //manually  // > FixedRelations.45line:290
    else if (elementinteracted==31){ // for 1  // > FixedRelations.45line:291
    elementinteractedmirror=97;  // > FixedRelations.45line:292
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:293
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:294
      }  // > FixedRelations.45line:295
      else {  // > FixedRelations.45line:296
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:297
     }  // > FixedRelations.45line:298
     }  // > FixedRelations.45line:299
       //manually  // > FixedRelations.45line:300
    if (elementinteracted==32){ // for 1  // > FixedRelations.45line:301
    elementinteractedmirror=87;  // > FixedRelations.45line:302
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:303
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:304
      }  // > FixedRelations.45line:305
      else {  // > FixedRelations.45line:306
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:307
     }  // > FixedRelations.45line:308
     }  // > FixedRelations.45line:309
       //manually  // > FixedRelations.45line:310
    if (elementinteracted==33){ // for 1  // > FixedRelations.45line:311
    elementinteractedmirror=77;  // > FixedRelations.45line:312
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:313
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:314
      }  // > FixedRelations.45line:315
      else {  // > FixedRelations.45line:316
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:317
     }  // > FixedRelations.45line:318
     }  // > FixedRelations.45line:319
       //manually  // > FixedRelations.45line:320
    if (elementinteracted==34){ // for 1  // > FixedRelations.45line:321
    elementinteractedmirror=67;  // > FixedRelations.45line:322
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:323
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:324
      }  // > FixedRelations.45line:325
      else {  // > FixedRelations.45line:326
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:327
     }  // > FixedRelations.45line:328
     }  // > FixedRelations.45line:329
       //manually  // > FixedRelations.45line:330
    if (elementinteracted==35){ // for 1  // > FixedRelations.45line:331
    elementinteractedmirror=57;  // > FixedRelations.45line:332
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:333
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:334
      }  // > FixedRelations.45line:335
      else {  // > FixedRelations.45line:336
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:337
     }  // > FixedRelations.45line:338
     }  // > FixedRelations.45line:339
       //manually  // > FixedRelations.45line:340
    if (elementinteracted==36){ // for 1  // > FixedRelations.45line:341
    elementinteractedmirror=47;  // > FixedRelations.45line:342
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:343
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:344
      }  // > FixedRelations.45line:345
      else {  // > FixedRelations.45line:346
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:347
     }  // > FixedRelations.45line:348
     }  // > FixedRelations.45line:349
       //manually  // > FixedRelations.45line:350
    if (elementinteracted==38){ // for 1  // > FixedRelations.45line:351
    elementinteractedmirror=27;  // > FixedRelations.45line:352
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:353
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:354
      }  // > FixedRelations.45line:355
      else {  // > FixedRelations.45line:356
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:357
     }  // > FixedRelations.45line:358
     }  // > FixedRelations.45line:359
       //manually  // > FixedRelations.45line:360
    if (elementinteracted==39){ // for 8  // > FixedRelations.45line:361
    elementinteractedmirror=17;  // > FixedRelations.45line:362
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:363
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:364
      }  // > FixedRelations.45line:365
      else {  // > FixedRelations.45line:366
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:367
     }  // > FixedRelations.45line:368
     }  // > FixedRelations.45line:369
       //manually  // > FixedRelations.45line:370
    if (elementinteracted==40){ // for 9  // > FixedRelations.45line:371
    elementinteractedmirror=7;  // > FixedRelations.45line:372
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:373
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:374
      }  // > FixedRelations.45line:375
      else {  // > FixedRelations.45line:376
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:377
     }  // > FixedRelations.45line:378
     }  // > FixedRelations.45line:379
     // 41 to 50 minus 46  // > FixedRelations.45line:380
      //manually  // > FixedRelations.45line:381
    else if (elementinteracted==41){ // for 1  // > FixedRelations.45line:382
    elementinteractedmirror=96;  // > FixedRelations.45line:383
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:384
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:385
      }  // > FixedRelations.45line:386
      else {  // > FixedRelations.45line:387
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:388
     }  // > FixedRelations.45line:389
     }  // > FixedRelations.45line:390
       //manually  // > FixedRelations.45line:391
    if (elementinteracted==42){ // for 1  // > FixedRelations.45line:392
    elementinteractedmirror=86;  // > FixedRelations.45line:393
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:394
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:395
      }  // > FixedRelations.45line:396
      else {  // > FixedRelations.45line:397
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:398
     }  // > FixedRelations.45line:399
     }  // > FixedRelations.45line:400
       //manually  // > FixedRelations.45line:401
    if (elementinteracted==43){ // for 1  // > FixedRelations.45line:402
    elementinteractedmirror=76;  // > FixedRelations.45line:403
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:404
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:405
      }  // > FixedRelations.45line:406
      else {  // > FixedRelations.45line:407
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:408
     }  // > FixedRelations.45line:409
     }  // > FixedRelations.45line:410
       //manually  // > FixedRelations.45line:411
    if (elementinteracted==44){ // for 1  // > FixedRelations.45line:412
    elementinteractedmirror=66;  // > FixedRelations.45line:413
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:414
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:415
      }  // > FixedRelations.45line:416
      else {  // > FixedRelations.45line:417
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:418
     }  // > FixedRelations.45line:419
     }  // > FixedRelations.45line:420
       //manually  // > FixedRelations.45line:421
    if (elementinteracted==45){ // for 1  // > FixedRelations.45line:422
    elementinteractedmirror=56;  // > FixedRelations.45line:423
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:424
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:425
      }  // > FixedRelations.45line:426
      else {  // > FixedRelations.45line:427
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:428
     }  // > FixedRelations.45line:429
     }  // > FixedRelations.45line:430
       //manually  // > FixedRelations.45line:431
    if (elementinteracted==47){ // for 1  // > FixedRelations.45line:432
    elementinteractedmirror=36;  // > FixedRelations.45line:433
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:434
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:435
      }  // > FixedRelations.45line:436
      else {  // > FixedRelations.45line:437
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:438
     }  // > FixedRelations.45line:439
     }  // > FixedRelations.45line:440
       //manually  // > FixedRelations.45line:441
    if (elementinteracted==48){ // for 1  // > FixedRelations.45line:442
    elementinteractedmirror=26;  // > FixedRelations.45line:443
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:444
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:445
      }  // > FixedRelations.45line:446
      else {  // > FixedRelations.45line:447
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:448
     }  // > FixedRelations.45line:449
     }  // > FixedRelations.45line:450
       //manually  // > FixedRelations.45line:451
    if (elementinteracted==49){ // for 8  // > FixedRelations.45line:452
    elementinteractedmirror=16;  // > FixedRelations.45line:453
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:454
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:455
      }  // > FixedRelations.45line:456
      else {  // > FixedRelations.45line:457
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:458
     }  // > FixedRelations.45line:459
     }  // > FixedRelations.45line:460
       //manually  // > FixedRelations.45line:461
    if (elementinteracted==50){ // for 9  // > FixedRelations.45line:462
    elementinteractedmirror=6;  // > FixedRelations.45line:463
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:464
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:465
      }  // > FixedRelations.45line:466
      else {  // > FixedRelations.45line:467
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:468
     }  // > FixedRelations.45line:469
     }  // > FixedRelations.45line:470
     // 51 to 60 minus 55  // > FixedRelations.45line:471
      //manually  // > FixedRelations.45line:472
    else if (elementinteracted==51){ // for 1  // > FixedRelations.45line:473
    elementinteractedmirror=95;  // > FixedRelations.45line:474
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:475
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:476
      }  // > FixedRelations.45line:477
      else {  // > FixedRelations.45line:478
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:479
     }  // > FixedRelations.45line:480
     }  // > FixedRelations.45line:481
       //manually  // > FixedRelations.45line:482
    if (elementinteracted==52){ // for 1  // > FixedRelations.45line:483
    elementinteractedmirror=85;  // > FixedRelations.45line:484
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:485
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:486
      }  // > FixedRelations.45line:487
      else {  // > FixedRelations.45line:488
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:489
     }  // > FixedRelations.45line:490
     }  // > FixedRelations.45line:491
       //manually  // > FixedRelations.45line:492
    if (elementinteracted==53){ // for 1  // > FixedRelations.45line:493
    elementinteractedmirror=75;  // > FixedRelations.45line:494
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:495
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:496
      }  // > FixedRelations.45line:497
      else {  // > FixedRelations.45line:498
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:499
     }  // > FixedRelations.45line:500
     }  // > FixedRelations.45line:501
       //manually  // > FixedRelations.45line:502
    if (elementinteracted==54){ // for 1  // > FixedRelations.45line:503
    elementinteractedmirror=65;  // > FixedRelations.45line:504
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:505
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:506
      }  // > FixedRelations.45line:507
      else {  // > FixedRelations.45line:508
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:509
     }  // > FixedRelations.45line:510
     }  // > FixedRelations.45line:511
       //manually  // > FixedRelations.45line:512
    if (elementinteracted==56){ // for 1  // > FixedRelations.45line:513
    elementinteractedmirror=45;  // > FixedRelations.45line:514
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:515
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:516
      }  // > FixedRelations.45line:517
      else {  // > FixedRelations.45line:518
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:519
     }  // > FixedRelations.45line:520
     }  // > FixedRelations.45line:521
       //manually  // > FixedRelations.45line:522
    if (elementinteracted==57){ // for 1  // > FixedRelations.45line:523
    elementinteractedmirror=35;  // > FixedRelations.45line:524
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:525
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:526
      }  // > FixedRelations.45line:527
      else {  // > FixedRelations.45line:528
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:529
     }  // > FixedRelations.45line:530
     }  // > FixedRelations.45line:531
       //manually  // > FixedRelations.45line:532
    if (elementinteracted==58){ // for 1  // > FixedRelations.45line:533
    elementinteractedmirror=25;  // > FixedRelations.45line:534
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:535
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:536
      }  // > FixedRelations.45line:537
      else {  // > FixedRelations.45line:538
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:539
     }  // > FixedRelations.45line:540
     }  // > FixedRelations.45line:541
       //manually  // > FixedRelations.45line:542
    if (elementinteracted==59){ // for 8  // > FixedRelations.45line:543
    elementinteractedmirror=15;  // > FixedRelations.45line:544
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:545
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:546
      }  // > FixedRelations.45line:547
      else {  // > FixedRelations.45line:548
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:549
     }  // > FixedRelations.45line:550
     }  // > FixedRelations.45line:551
       //manually  // > FixedRelations.45line:552
    if (elementinteracted==60){ // for 9  // > FixedRelations.45line:553
    elementinteractedmirror=5;  // > FixedRelations.45line:554
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:555
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:556
      }  // > FixedRelations.45line:557
      else {  // > FixedRelations.45line:558
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:559
     }  // > FixedRelations.45line:560
     }  // > FixedRelations.45line:561
     // 61 to 70 minus 64  // > FixedRelations.45line:562
      //manually  // > FixedRelations.45line:563
    else if (elementinteracted==61){ // for 1  // > FixedRelations.45line:564
    elementinteractedmirror=94;  // > FixedRelations.45line:565
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:566
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:567
      }  // > FixedRelations.45line:568
      else {  // > FixedRelations.45line:569
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:570
     }  // > FixedRelations.45line:571
     }  // > FixedRelations.45line:572
       //manually  // > FixedRelations.45line:573
    if (elementinteracted==62){ // for 1  // > FixedRelations.45line:574
    elementinteractedmirror=84;  // > FixedRelations.45line:575
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:576
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:577
      }  // > FixedRelations.45line:578
      else {  // > FixedRelations.45line:579
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:580
     }  // > FixedRelations.45line:581
     }  // > FixedRelations.45line:582
       //manually  // > FixedRelations.45line:583
    if (elementinteracted==63){ // for 1  // > FixedRelations.45line:584
    elementinteractedmirror=74;  // > FixedRelations.45line:585
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:586
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:587
      }  // > FixedRelations.45line:588
      else {  // > FixedRelations.45line:589
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:590
     }  // > FixedRelations.45line:591
     }  // > FixedRelations.45line:592
       //manually  // > FixedRelations.45line:593
    if (elementinteracted==65){ // for 1  // > FixedRelations.45line:594
    elementinteractedmirror=54;  // > FixedRelations.45line:595
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:596
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:597
      }  // > FixedRelations.45line:598
      else {  // > FixedRelations.45line:599
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:600
     }  // > FixedRelations.45line:601
     }  // > FixedRelations.45line:602
       //manually  // > FixedRelations.45line:603
    if (elementinteracted==66){ // for 1  // > FixedRelations.45line:604
    elementinteractedmirror=44;  // > FixedRelations.45line:605
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:606
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:607
      }  // > FixedRelations.45line:608
      else {  // > FixedRelations.45line:609
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:610
     }  // > FixedRelations.45line:611
     }  // > FixedRelations.45line:612
       //manually  // > FixedRelations.45line:613
    if (elementinteracted==67){ // for 1  // > FixedRelations.45line:614
    elementinteractedmirror=34;  // > FixedRelations.45line:615
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:616
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:617
      }  // > FixedRelations.45line:618
      else {  // > FixedRelations.45line:619
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:620
     }  // > FixedRelations.45line:621
     }  // > FixedRelations.45line:622
       //manually  // > FixedRelations.45line:623
    if (elementinteracted==68){ // for 1  // > FixedRelations.45line:624
    elementinteractedmirror=24;  // > FixedRelations.45line:625
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:626
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:627
      }  // > FixedRelations.45line:628
      else {  // > FixedRelations.45line:629
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:630
     }  // > FixedRelations.45line:631
     }  // > FixedRelations.45line:632
       //manually  // > FixedRelations.45line:633
    if (elementinteracted==69){ // for 8  // > FixedRelations.45line:634
    elementinteractedmirror=14;  // > FixedRelations.45line:635
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:636
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:637
      }  // > FixedRelations.45line:638
      else {  // > FixedRelations.45line:639
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:640
     }  // > FixedRelations.45line:641
     }  // > FixedRelations.45line:642
       //manually  // > FixedRelations.45line:643
    if (elementinteracted==70){ // for 9  // > FixedRelations.45line:644
    elementinteractedmirror=4;  // > FixedRelations.45line:645
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:646
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:647
      }  // > FixedRelations.45line:648
      else {  // > FixedRelations.45line:649
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:650
     }  // > FixedRelations.45line:651
     }  // > FixedRelations.45line:652
      // 71 to 80 minus 73  // > FixedRelations.45line:653
      //manually  // > FixedRelations.45line:654
    else if (elementinteracted==71){ // for 1  // > FixedRelations.45line:655
    elementinteractedmirror=93;  // > FixedRelations.45line:656
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:657
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:658
      }  // > FixedRelations.45line:659
      else {  // > FixedRelations.45line:660
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:661
     }  // > FixedRelations.45line:662
     }  // > FixedRelations.45line:663
       //manually  // > FixedRelations.45line:664
    if (elementinteracted==72){ // for 1  // > FixedRelations.45line:665
    elementinteractedmirror=83;  // > FixedRelations.45line:666
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:667
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:668
      }  // > FixedRelations.45line:669
      else {  // > FixedRelations.45line:670
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:671
     }  // > FixedRelations.45line:672
     }  // > FixedRelations.45line:673
       //manually  // > FixedRelations.45line:674
    if (elementinteracted==74){ // for 1  // > FixedRelations.45line:675
    elementinteractedmirror=63;  // > FixedRelations.45line:676
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:677
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:678
      }  // > FixedRelations.45line:679
      else {  // > FixedRelations.45line:680
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:681
     }  // > FixedRelations.45line:682
     }  // > FixedRelations.45line:683
       //manually  // > FixedRelations.45line:684
    if (elementinteracted==75){ // for 1  // > FixedRelations.45line:685
    elementinteractedmirror=53;  // > FixedRelations.45line:686
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:687
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:688
      }  // > FixedRelations.45line:689
      else {  // > FixedRelations.45line:690
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:691
     }  // > FixedRelations.45line:692
     }  // > FixedRelations.45line:693
       //manually  // > FixedRelations.45line:694
    if (elementinteracted==76){ // for 1  // > FixedRelations.45line:695
    elementinteractedmirror=43;  // > FixedRelations.45line:696
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:697
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:698
      }  // > FixedRelations.45line:699
      else {  // > FixedRelations.45line:700
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:701
     }  // > FixedRelations.45line:702
     }  // > FixedRelations.45line:703
       //manually  // > FixedRelations.45line:704
    if (elementinteracted==77){ // for 1  // > FixedRelations.45line:705
    elementinteractedmirror=33;  // > FixedRelations.45line:706
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:707
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:708
      }  // > FixedRelations.45line:709
      else {  // > FixedRelations.45line:710
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:711
     }  // > FixedRelations.45line:712
     }  // > FixedRelations.45line:713
       //manually  // > FixedRelations.45line:714
    if (elementinteracted==78){ // for 1  // > FixedRelations.45line:715
    elementinteractedmirror=23;  // > FixedRelations.45line:716
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:717
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:718
      }  // > FixedRelations.45line:719
      else {  // > FixedRelations.45line:720
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:721
     }  // > FixedRelations.45line:722
     }  // > FixedRelations.45line:723
       //manually  // > FixedRelations.45line:724
    if (elementinteracted==79){ // for 8  // > FixedRelations.45line:725
    elementinteractedmirror=13;  // > FixedRelations.45line:726
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:727
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:728
      }  // > FixedRelations.45line:729
      else {  // > FixedRelations.45line:730
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:731
     }  // > FixedRelations.45line:732
     }  // > FixedRelations.45line:733
       //manually  // > FixedRelations.45line:734
    if (elementinteracted==80){ // for 9  // > FixedRelations.45line:735
    elementinteractedmirror=3;  // > FixedRelations.45line:736
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:737
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:738
      }  // > FixedRelations.45line:739
      else {  // > FixedRelations.45line:740
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:741
     }  // > FixedRelations.45line:742
     }  // > FixedRelations.45line:743
      // 81 to 90 minus 82  // > FixedRelations.45line:744
      //manually  // > FixedRelations.45line:745
    else if (elementinteracted==81){ // for 1  // > FixedRelations.45line:746
    elementinteractedmirror=92;  // > FixedRelations.45line:747
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:748
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:749
      }  // > FixedRelations.45line:750
      else {  // > FixedRelations.45line:751
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:752
     }  // > FixedRelations.45line:753
     }  // > FixedRelations.45line:754
       //manually  // > FixedRelations.45line:755
    if (elementinteracted==83){ // for 1  // > FixedRelations.45line:756
    elementinteractedmirror=72;  // > FixedRelations.45line:757
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:758
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:759
      }  // > FixedRelations.45line:760
      else {  // > FixedRelations.45line:761
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:762
     }  // > FixedRelations.45line:763
     }  // > FixedRelations.45line:764
       //manually  // > FixedRelations.45line:765
    if (elementinteracted==84){ // for 1  // > FixedRelations.45line:766
    elementinteractedmirror=62;  // > FixedRelations.45line:767
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:768
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:769
      }  // > FixedRelations.45line:770
      else {  // > FixedRelations.45line:771
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:772
     }  // > FixedRelations.45line:773
     }  // > FixedRelations.45line:774
       //manually  // > FixedRelations.45line:775
    if (elementinteracted==85){ // for 1  // > FixedRelations.45line:776
    elementinteractedmirror=52; //doing stop here  // > FixedRelations.45line:777
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:778
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:779
      }  // > FixedRelations.45line:780
      else {  // > FixedRelations.45line:781
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:782
     }  // > FixedRelations.45line:783
     }  // > FixedRelations.45line:784
       //manually  // > FixedRelations.45line:785
    if (elementinteracted==86){ // for 1  // > FixedRelations.45line:786
    elementinteractedmirror=42;  // > FixedRelations.45line:787
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:788
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:789
      }  // > FixedRelations.45line:790
      else {  // > FixedRelations.45line:791
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:792
     }  // > FixedRelations.45line:793
     }  // > FixedRelations.45line:794
       //manually  // > FixedRelations.45line:795
    if (elementinteracted==87){ // for 1  // > FixedRelations.45line:796
    elementinteractedmirror=32;  // > FixedRelations.45line:797
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:798
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:799
      }  // > FixedRelations.45line:800
      else {  // > FixedRelations.45line:801
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:802
     }  // > FixedRelations.45line:803
     }  // > FixedRelations.45line:804
       //manually  // > FixedRelations.45line:805
    if (elementinteracted==88){ // for 1  // > FixedRelations.45line:806
    elementinteractedmirror=22;  // > FixedRelations.45line:807
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:808
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:809
      }  // > FixedRelations.45line:810
      else {  // > FixedRelations.45line:811
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:812
     }  // > FixedRelations.45line:813
     }  // > FixedRelations.45line:814
       //manually  // > FixedRelations.45line:815
    if (elementinteracted==89){ // for 8  // > FixedRelations.45line:816
    elementinteractedmirror=12;  // > FixedRelations.45line:817
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:818
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:819
      }  // > FixedRelations.45line:820
      else {  // > FixedRelations.45line:821
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:822
     }  // > FixedRelations.45line:823
     }  // > FixedRelations.45line:824
       //manually  // > FixedRelations.45line:825
    if (elementinteracted==90){ // for 9  // > FixedRelations.45line:826
    elementinteractedmirror=2;  // > FixedRelations.45line:827
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:828
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:829
      }  // > FixedRelations.45line:830
      else {  // > FixedRelations.45line:831
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:832
     }  // > FixedRelations.45line:833
     }  // > FixedRelations.45line:834
      // 91 to 100 minus 91  // > FixedRelations.45line:835
      //manually  // > FixedRelations.45line:836
    else if (elementinteracted==92){ // for 1  // > FixedRelations.45line:837
    elementinteractedmirror=81;  // > FixedRelations.45line:838
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:839
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:840
      }  // > FixedRelations.45line:841
      else {  // > FixedRelations.45line:842
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:843
     }  // > FixedRelations.45line:844
     }  // > FixedRelations.45line:845
       //manually  // > FixedRelations.45line:846
    if (elementinteracted==93){ // for 1  // > FixedRelations.45line:847
    elementinteractedmirror=71;  // > FixedRelations.45line:848
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:849
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:850
      }  // > FixedRelations.45line:851
      else {  // > FixedRelations.45line:852
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:853
     }  // > FixedRelations.45line:854
     }  // > FixedRelations.45line:855
       //manually  // > FixedRelations.45line:856
    if (elementinteracted==94){ // for 1  // > FixedRelations.45line:857
    elementinteractedmirror=61;  // > FixedRelations.45line:858
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:859
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:860
      }  // > FixedRelations.45line:861
      else {  // > FixedRelations.45line:862
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:863
     }  // > FixedRelations.45line:864
     }  // > FixedRelations.45line:865
       //manually  // > FixedRelations.45line:866
    if (elementinteracted==95){ // for 1  // > FixedRelations.45line:867
    elementinteractedmirror=51; //doing stop here  // > FixedRelations.45line:868
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:869
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:870
      }  // > FixedRelations.45line:871
      else {  // > FixedRelations.45line:872
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:873
     }  // > FixedRelations.45line:874
     }  // > FixedRelations.45line:875
       //manually  // > FixedRelations.45line:876
    if (elementinteracted==96){ // for 1  // > FixedRelations.45line:877
    elementinteractedmirror=41;  // > FixedRelations.45line:878
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:879
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:880
      }  // > FixedRelations.45line:881
      else {  // > FixedRelations.45line:882
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:883
     }  // > FixedRelations.45line:884
     }  // > FixedRelations.45line:885
       //manually  // > FixedRelations.45line:886
    if (elementinteracted==97){ // for 1  // > FixedRelations.45line:887
    elementinteractedmirror=31;  // > FixedRelations.45line:888
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:889
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:890
      }  // > FixedRelations.45line:891
      else {  // > FixedRelations.45line:892
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:893
     }  // > FixedRelations.45line:894
     }  // > FixedRelations.45line:895
       //manually  // > FixedRelations.45line:896
    if (elementinteracted==98){ // for 1  // > FixedRelations.45line:897
    elementinteractedmirror=21;  // > FixedRelations.45line:898
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:899
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:900
      }  // > FixedRelations.45line:901
      else {  // > FixedRelations.45line:902
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:903
     }  // > FixedRelations.45line:904
     }  // > FixedRelations.45line:905
       //manually  // > FixedRelations.45line:906
    if (elementinteracted==99){ // for 8  // > FixedRelations.45line:907
    elementinteractedmirror=11;  // > FixedRelations.45line:908
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:909
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:910
      }  // > FixedRelations.45line:911
      else {  // > FixedRelations.45line:912
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:913
     }  // > FixedRelations.45line:914
     }  // > FixedRelations.45line:915
       //manually  // > FixedRelations.45line:916
    if (elementinteracted==100){ // for 9  // > FixedRelations.45line:917
    elementinteractedmirror=1;  // > FixedRelations.45line:918
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line:919
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line:920
      }  // > FixedRelations.45line:921
      else {  // > FixedRelations.45line:922
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line:923
     }  // > FixedRelations.45line:924
     }  // > FixedRelations.45line:925
       // > FixedRelations.45line:926
       // > FixedRelations.45line:927
       // > FixedRelations.45line:928
       // > FixedRelations.45line:929
     }  // > FixedRelations.45line:930
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["45line 2"]) return;
    //if (_view.comboBox.getProperty("SelectedOptions")=="-45 line"){  // > FixedRelations.45line 2:1
      //for (var i=1; i<100 /* Iterations */ ; i++) {  // > FixedRelations.45line 2:2
      //colorVectors[i] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:3
    //}  // > FixedRelations.45line 2:4
    if (comboboxmode==4&&quizmode==false){  // > FixedRelations.45line 2:5
       xtextmirror = -ytext;  // > FixedRelations.45line 2:6
      ytextmirror = -xtext;  // > FixedRelations.45line 2:7
      scalextext = 1;  // > FixedRelations.45line 2:8
      scaleytext = -1*myscale; //1 is default do nothing  // > FixedRelations.45line 2:9
      rotate = pi/2;  // > FixedRelations.45line 2:10
      //manually  // > FixedRelations.45line 2:11
       //manually  // > FixedRelations.45line 2:12
    if (elementinteracted==2){ // for 1  // > FixedRelations.45line 2:13
    elementinteractedmirror=11;  // > FixedRelations.45line 2:14
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:15
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:16
      }  // > FixedRelations.45line 2:17
      else {  // > FixedRelations.45line 2:18
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:19
     }  // > FixedRelations.45line 2:20
     }  // > FixedRelations.45line 2:21
       //manually  // > FixedRelations.45line 2:22
    if (elementinteracted==3){ // for 1  // > FixedRelations.45line 2:23
    elementinteractedmirror=21;  // > FixedRelations.45line 2:24
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:25
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:26
      }  // > FixedRelations.45line 2:27
      else {  // > FixedRelations.45line 2:28
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:29
     }  // > FixedRelations.45line 2:30
     }  // > FixedRelations.45line 2:31
       //manually  // > FixedRelations.45line 2:32
    if (elementinteracted==4){ // for 1  // > FixedRelations.45line 2:33
    elementinteractedmirror=31;  // > FixedRelations.45line 2:34
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:35
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:36
      }  // > FixedRelations.45line 2:37
      else {  // > FixedRelations.45line 2:38
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:39
     }  // > FixedRelations.45line 2:40
     }  // > FixedRelations.45line 2:41
       //manually  // > FixedRelations.45line 2:42
    if (elementinteracted==5){ // for 1  // > FixedRelations.45line 2:43
    elementinteractedmirror=41;  // > FixedRelations.45line 2:44
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:45
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:46
      }  // > FixedRelations.45line 2:47
      else {  // > FixedRelations.45line 2:48
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:49
     }  // > FixedRelations.45line 2:50
     }  // > FixedRelations.45line 2:51
       //manually  // > FixedRelations.45line 2:52
    if (elementinteracted==6){ // for 1  // > FixedRelations.45line 2:53
    elementinteractedmirror=51;  // > FixedRelations.45line 2:54
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:55
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:56
      }  // > FixedRelations.45line 2:57
      else {  // > FixedRelations.45line 2:58
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:59
     }  // > FixedRelations.45line 2:60
     }  // > FixedRelations.45line 2:61
       //manually  // > FixedRelations.45line 2:62
    if (elementinteracted==7){ // for 1  // > FixedRelations.45line 2:63
    elementinteractedmirror=61;  // > FixedRelations.45line 2:64
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:65
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:66
      }  // > FixedRelations.45line 2:67
      else {  // > FixedRelations.45line 2:68
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:69
     }  // > FixedRelations.45line 2:70
     }  // > FixedRelations.45line 2:71
       //manually  // > FixedRelations.45line 2:72
    if (elementinteracted==8){ // for 8  // > FixedRelations.45line 2:73
    elementinteractedmirror=71;  // > FixedRelations.45line 2:74
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:75
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:76
      }  // > FixedRelations.45line 2:77
      else {  // > FixedRelations.45line 2:78
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:79
     }  // > FixedRelations.45line 2:80
     }  // > FixedRelations.45line 2:81
       //manually  // > FixedRelations.45line 2:82
    if (elementinteracted==9){ // for 9  // > FixedRelations.45line 2:83
    elementinteractedmirror=81;  // > FixedRelations.45line 2:84
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:85
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:86
      }  // > FixedRelations.45line 2:87
      else {  // > FixedRelations.45line 2:88
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:89
     }  // > FixedRelations.45line 2:90
     }  // > FixedRelations.45line 2:91
     if (elementinteracted==10){ // for 9  // > FixedRelations.45line 2:92
    elementinteractedmirror=91;  // > FixedRelations.45line 2:93
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:94
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:95
      }  // > FixedRelations.45line 2:96
      else {  // > FixedRelations.45line 2:97
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:98
     }  // > FixedRelations.45line 2:99
     }  // > FixedRelations.45line 2:100
     // 11 to 20 minus 19  // > FixedRelations.45line 2:101
      //manually  // > FixedRelations.45line 2:102
    else if (elementinteracted==11){ // for 1  // > FixedRelations.45line 2:103
    elementinteractedmirror=2;  // > FixedRelations.45line 2:104
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:105
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:106
      }  // > FixedRelations.45line 2:107
      else {  // > FixedRelations.45line 2:108
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:109
     }  // > FixedRelations.45line 2:110
     }  // > FixedRelations.45line 2:111
       //manually  // > FixedRelations.45line 2:112
       //manually  // > FixedRelations.45line 2:113
    if (elementinteracted==13){ // for 1  // > FixedRelations.45line 2:114
    elementinteractedmirror=22;  // > FixedRelations.45line 2:115
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:116
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:117
      }  // > FixedRelations.45line 2:118
      else {  // > FixedRelations.45line 2:119
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:120
     }  // > FixedRelations.45line 2:121
     }  // > FixedRelations.45line 2:122
       //manually  // > FixedRelations.45line 2:123
    if (elementinteracted==14){ // for 1  // > FixedRelations.45line 2:124
    elementinteractedmirror=32;  // > FixedRelations.45line 2:125
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:126
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:127
      }  // > FixedRelations.45line 2:128
      else {  // > FixedRelations.45line 2:129
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:130
     }  // > FixedRelations.45line 2:131
     }  // > FixedRelations.45line 2:132
       //manually  // > FixedRelations.45line 2:133
    if (elementinteracted==15){ // for 1  // > FixedRelations.45line 2:134
    elementinteractedmirror=42;  // > FixedRelations.45line 2:135
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:136
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:137
      }  // > FixedRelations.45line 2:138
      else {  // > FixedRelations.45line 2:139
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:140
     }  // > FixedRelations.45line 2:141
     }  // > FixedRelations.45line 2:142
       //manually  // > FixedRelations.45line 2:143
    if (elementinteracted==16){ // for 1  // > FixedRelations.45line 2:144
    elementinteractedmirror=52;  // > FixedRelations.45line 2:145
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:146
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:147
      }  // > FixedRelations.45line 2:148
      else {  // > FixedRelations.45line 2:149
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:150
     }  // > FixedRelations.45line 2:151
     }  // > FixedRelations.45line 2:152
       //manually  // > FixedRelations.45line 2:153
    if (elementinteracted==17){ // for 1  // > FixedRelations.45line 2:154
    elementinteractedmirror=62;  // > FixedRelations.45line 2:155
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:156
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:157
      }  // > FixedRelations.45line 2:158
      else {  // > FixedRelations.45line 2:159
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:160
     }  // > FixedRelations.45line 2:161
     }  // > FixedRelations.45line 2:162
       //manually  // > FixedRelations.45line 2:163
    if (elementinteracted==18){ // for 8  // > FixedRelations.45line 2:164
    elementinteractedmirror=72;  // > FixedRelations.45line 2:165
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:166
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:167
      }  // > FixedRelations.45line 2:168
      else {  // > FixedRelations.45line 2:169
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:170
     }  // > FixedRelations.45line 2:171
     }  // > FixedRelations.45line 2:172
     if (elementinteracted==19){ // for 8  // > FixedRelations.45line 2:173
    elementinteractedmirror=82;  // > FixedRelations.45line 2:174
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:175
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:176
      }  // > FixedRelations.45line 2:177
      else {  // > FixedRelations.45line 2:178
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:179
     }  // > FixedRelations.45line 2:180
     }  // > FixedRelations.45line 2:181
       //manually  // > FixedRelations.45line 2:182
    if (elementinteracted==20){ // for 9  // > FixedRelations.45line 2:183
    elementinteractedmirror=92;  // > FixedRelations.45line 2:184
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:185
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:186
      }  // > FixedRelations.45line 2:187
      else {  // > FixedRelations.45line 2:188
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:189
     }  // > FixedRelations.45line 2:190
     }  // > FixedRelations.45line 2:191
     // 21 to 30 minus 28  // > FixedRelations.45line 2:192
      //manually  // > FixedRelations.45line 2:193
    else if (elementinteracted==21){ // for 1  // > FixedRelations.45line 2:194
    elementinteractedmirror=3;  // > FixedRelations.45line 2:195
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:196
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:197
      }  // > FixedRelations.45line 2:198
      else {  // > FixedRelations.45line 2:199
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:200
     }  // > FixedRelations.45line 2:201
     }  // > FixedRelations.45line 2:202
       //manually  // > FixedRelations.45line 2:203
    if (elementinteracted==22){ // for 1  // > FixedRelations.45line 2:204
    elementinteractedmirror=13;  // > FixedRelations.45line 2:205
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:206
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:207
      }  // > FixedRelations.45line 2:208
      else {  // > FixedRelations.45line 2:209
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:210
     }  // > FixedRelations.45line 2:211
     }  // > FixedRelations.45line 2:212
       //manually  // > FixedRelations.45line 2:213
       //manually  // > FixedRelations.45line 2:214
    if (elementinteracted==24){ // for 1  // > FixedRelations.45line 2:215
    elementinteractedmirror=33;  // > FixedRelations.45line 2:216
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:217
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:218
      }  // > FixedRelations.45line 2:219
      else {  // > FixedRelations.45line 2:220
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:221
     }  // > FixedRelations.45line 2:222
     }  // > FixedRelations.45line 2:223
       //manually  // > FixedRelations.45line 2:224
    if (elementinteracted==25){ // for 1  // > FixedRelations.45line 2:225
    elementinteractedmirror=43;  // > FixedRelations.45line 2:226
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:227
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:228
      }  // > FixedRelations.45line 2:229
      else {  // > FixedRelations.45line 2:230
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:231
     }  // > FixedRelations.45line 2:232
     }  // > FixedRelations.45line 2:233
       //manually  // > FixedRelations.45line 2:234
    if (elementinteracted==26){ // for 1  // > FixedRelations.45line 2:235
    elementinteractedmirror=53;  // > FixedRelations.45line 2:236
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:237
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:238
      }  // > FixedRelations.45line 2:239
      else {  // > FixedRelations.45line 2:240
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:241
     }  // > FixedRelations.45line 2:242
     }  // > FixedRelations.45line 2:243
       //manually  // > FixedRelations.45line 2:244
    if (elementinteracted==27){ // for 1  // > FixedRelations.45line 2:245
    elementinteractedmirror=63;  // > FixedRelations.45line 2:246
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:247
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:248
      }  // > FixedRelations.45line 2:249
      else {  // > FixedRelations.45line 2:250
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:251
     }  // > FixedRelations.45line 2:252
     }  // > FixedRelations.45line 2:253
       //manually  // > FixedRelations.45line 2:254
       if (elementinteracted==28){ // for 1  // > FixedRelations.45line 2:255
    elementinteractedmirror=73;  // > FixedRelations.45line 2:256
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:257
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:258
      }  // > FixedRelations.45line 2:259
      else {  // > FixedRelations.45line 2:260
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:261
     }  // > FixedRelations.45line 2:262
     }  // > FixedRelations.45line 2:263
       //manually  // > FixedRelations.45line 2:264
    if (elementinteracted==29){ // for 8  // > FixedRelations.45line 2:265
    elementinteractedmirror=83;  // > FixedRelations.45line 2:266
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:267
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:268
      }  // > FixedRelations.45line 2:269
      else {  // > FixedRelations.45line 2:270
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:271
     }  // > FixedRelations.45line 2:272
     }  // > FixedRelations.45line 2:273
       //manually  // > FixedRelations.45line 2:274
    if (elementinteracted==30){ // for 9  // > FixedRelations.45line 2:275
    elementinteractedmirror=93;  // > FixedRelations.45line 2:276
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:277
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:278
      }  // > FixedRelations.45line 2:279
      else {  // > FixedRelations.45line 2:280
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:281
     }  // > FixedRelations.45line 2:282
     }  // > FixedRelations.45line 2:283
     // 31 to 40 minus 37  // > FixedRelations.45line 2:284
      //manually  // > FixedRelations.45line 2:285
    else if (elementinteracted==31){ // for 1  // > FixedRelations.45line 2:286
    elementinteractedmirror=4;  // > FixedRelations.45line 2:287
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:288
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:289
      }  // > FixedRelations.45line 2:290
      else {  // > FixedRelations.45line 2:291
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:292
     }  // > FixedRelations.45line 2:293
     }  // > FixedRelations.45line 2:294
       //manually  // > FixedRelations.45line 2:295
    if (elementinteracted==32){ // for 1  // > FixedRelations.45line 2:296
    elementinteractedmirror=14;  // > FixedRelations.45line 2:297
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:298
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:299
      }  // > FixedRelations.45line 2:300
      else {  // > FixedRelations.45line 2:301
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:302
     }  // > FixedRelations.45line 2:303
     }  // > FixedRelations.45line 2:304
       //manually  // > FixedRelations.45line 2:305
    if (elementinteracted==33){ // for 1  // > FixedRelations.45line 2:306
    elementinteractedmirror=24;  // > FixedRelations.45line 2:307
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:308
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:309
      }  // > FixedRelations.45line 2:310
      else {  // > FixedRelations.45line 2:311
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:312
     }  // > FixedRelations.45line 2:313
     }  // > FixedRelations.45line 2:314
       //manually  // > FixedRelations.45line 2:315
       //manually  // > FixedRelations.45line 2:316
    if (elementinteracted==35){ // for 1  // > FixedRelations.45line 2:317
    elementinteractedmirror=44;  // > FixedRelations.45line 2:318
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:319
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:320
      }  // > FixedRelations.45line 2:321
      else {  // > FixedRelations.45line 2:322
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:323
     }  // > FixedRelations.45line 2:324
     }  // > FixedRelations.45line 2:325
       //manually  // > FixedRelations.45line 2:326
    if (elementinteracted==36){ // for 1  // > FixedRelations.45line 2:327
    elementinteractedmirror=54;  // > FixedRelations.45line 2:328
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:329
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:330
      }  // > FixedRelations.45line 2:331
      else {  // > FixedRelations.45line 2:332
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:333
     }  // > FixedRelations.45line 2:334
     }  // > FixedRelations.45line 2:335
       //manually  // > FixedRelations.45line 2:336
       if (elementinteracted==37){ // for 1  // > FixedRelations.45line 2:337
    elementinteractedmirror=64;  // > FixedRelations.45line 2:338
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:339
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:340
      }  // > FixedRelations.45line 2:341
      else {  // > FixedRelations.45line 2:342
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:343
     }  // > FixedRelations.45line 2:344
     }  // > FixedRelations.45line 2:345
       //manually  // > FixedRelations.45line 2:346
    if (elementinteracted==38){ // for 1  // > FixedRelations.45line 2:347
    elementinteractedmirror=74;  // > FixedRelations.45line 2:348
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:349
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:350
      }  // > FixedRelations.45line 2:351
      else {  // > FixedRelations.45line 2:352
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:353
     }  // > FixedRelations.45line 2:354
     }  // > FixedRelations.45line 2:355
       //manually  // > FixedRelations.45line 2:356
    if (elementinteracted==39){ // for 8  // > FixedRelations.45line 2:357
    elementinteractedmirror=84;  // > FixedRelations.45line 2:358
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:359
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:360
      }  // > FixedRelations.45line 2:361
      else {  // > FixedRelations.45line 2:362
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:363
     }  // > FixedRelations.45line 2:364
     }  // > FixedRelations.45line 2:365
       //manually  // > FixedRelations.45line 2:366
    if (elementinteracted==40){ // for 9  // > FixedRelations.45line 2:367
    elementinteractedmirror=94;  // > FixedRelations.45line 2:368
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:369
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:370
      }  // > FixedRelations.45line 2:371
      else {  // > FixedRelations.45line 2:372
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:373
     }  // > FixedRelations.45line 2:374
     }  // > FixedRelations.45line 2:375
     // 41 to 50 minus 46  // > FixedRelations.45line 2:376
      //manually  // > FixedRelations.45line 2:377
    else if (elementinteracted==41){ // for 1  // > FixedRelations.45line 2:378
    elementinteractedmirror=5;  // > FixedRelations.45line 2:379
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:380
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:381
      }  // > FixedRelations.45line 2:382
      else {  // > FixedRelations.45line 2:383
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:384
     }  // > FixedRelations.45line 2:385
     }  // > FixedRelations.45line 2:386
       //manually  // > FixedRelations.45line 2:387
    if (elementinteracted==42){ // for 1  // > FixedRelations.45line 2:388
    elementinteractedmirror=15;  // > FixedRelations.45line 2:389
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:390
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:391
      }  // > FixedRelations.45line 2:392
      else {  // > FixedRelations.45line 2:393
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:394
     }  // > FixedRelations.45line 2:395
     }  // > FixedRelations.45line 2:396
       //manually  // > FixedRelations.45line 2:397
    if (elementinteracted==43){ // for 1  // > FixedRelations.45line 2:398
    elementinteractedmirror=25;  // > FixedRelations.45line 2:399
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:400
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:401
      }  // > FixedRelations.45line 2:402
      else {  // > FixedRelations.45line 2:403
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:404
     }  // > FixedRelations.45line 2:405
     }  // > FixedRelations.45line 2:406
       //manually  // > FixedRelations.45line 2:407
    if (elementinteracted==44){ // for 1  // > FixedRelations.45line 2:408
    elementinteractedmirror=35;  // > FixedRelations.45line 2:409
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:410
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:411
      }  // > FixedRelations.45line 2:412
      else {  // > FixedRelations.45line 2:413
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:414
     }  // > FixedRelations.45line 2:415
     }  // > FixedRelations.45line 2:416
       //manually  // > FixedRelations.45line 2:417
    if (elementinteracted==46){ // for 1  // > FixedRelations.45line 2:418
    elementinteractedmirror=55;  // > FixedRelations.45line 2:419
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:420
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:421
      }  // > FixedRelations.45line 2:422
      else {  // > FixedRelations.45line 2:423
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:424
     }  // > FixedRelations.45line 2:425
     }  // > FixedRelations.45line 2:426
       //manually  // > FixedRelations.45line 2:427
    if (elementinteracted==47){ // for 1  // > FixedRelations.45line 2:428
    elementinteractedmirror=65;  // > FixedRelations.45line 2:429
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:430
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:431
      }  // > FixedRelations.45line 2:432
      else {  // > FixedRelations.45line 2:433
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:434
     }  // > FixedRelations.45line 2:435
     }  // > FixedRelations.45line 2:436
       //manually  // > FixedRelations.45line 2:437
    if (elementinteracted==48){ // for 1  // > FixedRelations.45line 2:438
    elementinteractedmirror=75;  // > FixedRelations.45line 2:439
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:440
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:441
      }  // > FixedRelations.45line 2:442
      else {  // > FixedRelations.45line 2:443
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:444
     }  // > FixedRelations.45line 2:445
     }  // > FixedRelations.45line 2:446
       //manually  // > FixedRelations.45line 2:447
    if (elementinteracted==49){ // for 8  // > FixedRelations.45line 2:448
    elementinteractedmirror=85;  // > FixedRelations.45line 2:449
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:450
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:451
      }  // > FixedRelations.45line 2:452
      else {  // > FixedRelations.45line 2:453
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:454
     }  // > FixedRelations.45line 2:455
     }  // > FixedRelations.45line 2:456
       //manually  // > FixedRelations.45line 2:457
    if (elementinteracted==50){ // for 9  // > FixedRelations.45line 2:458
    elementinteractedmirror=95;  // > FixedRelations.45line 2:459
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:460
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:461
      }  // > FixedRelations.45line 2:462
      else {  // > FixedRelations.45line 2:463
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:464
     }  // > FixedRelations.45line 2:465
     }  // > FixedRelations.45line 2:466
     // 51 to 60 minus 55  // > FixedRelations.45line 2:467
      //manually  // > FixedRelations.45line 2:468
    else if (elementinteracted==51){ // for 1  // > FixedRelations.45line 2:469
    elementinteractedmirror=6;  // > FixedRelations.45line 2:470
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:471
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:472
      }  // > FixedRelations.45line 2:473
      else {  // > FixedRelations.45line 2:474
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:475
     }  // > FixedRelations.45line 2:476
     }  // > FixedRelations.45line 2:477
       //manually  // > FixedRelations.45line 2:478
    if (elementinteracted==52){ // for 1  // > FixedRelations.45line 2:479
    elementinteractedmirror=16;  // > FixedRelations.45line 2:480
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:481
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:482
      }  // > FixedRelations.45line 2:483
      else {  // > FixedRelations.45line 2:484
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:485
     }  // > FixedRelations.45line 2:486
     }  // > FixedRelations.45line 2:487
       //manually  // > FixedRelations.45line 2:488
    if (elementinteracted==53){ // for 1  // > FixedRelations.45line 2:489
    elementinteractedmirror=26;  // > FixedRelations.45line 2:490
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:491
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:492
      }  // > FixedRelations.45line 2:493
      else {  // > FixedRelations.45line 2:494
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:495
     }  // > FixedRelations.45line 2:496
     }  // > FixedRelations.45line 2:497
       //manually  // > FixedRelations.45line 2:498
    if (elementinteracted==54){ // for 1  // > FixedRelations.45line 2:499
    elementinteractedmirror=36;  // > FixedRelations.45line 2:500
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:501
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:502
      }  // > FixedRelations.45line 2:503
      else {  // > FixedRelations.45line 2:504
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:505
     }  // > FixedRelations.45line 2:506
     }  // > FixedRelations.45line 2:507
       //manually  // > FixedRelations.45line 2:508
         //manually  // > FixedRelations.45line 2:509
    if (elementinteracted==55){ // for 1  // > FixedRelations.45line 2:510
    elementinteractedmirror=46;  // > FixedRelations.45line 2:511
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:512
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:513
      }  // > FixedRelations.45line 2:514
      else {  // > FixedRelations.45line 2:515
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:516
     }  // > FixedRelations.45line 2:517
     }  // > FixedRelations.45line 2:518
     //  // > FixedRelations.45line 2:519
       //manually  // > FixedRelations.45line 2:520
    if (elementinteracted==57){ // for 1  // > FixedRelations.45line 2:521
    elementinteractedmirror=66;  // > FixedRelations.45line 2:522
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:523
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:524
      }  // > FixedRelations.45line 2:525
      else {  // > FixedRelations.45line 2:526
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:527
     }  // > FixedRelations.45line 2:528
     }  // > FixedRelations.45line 2:529
       //manually  // > FixedRelations.45line 2:530
    if (elementinteracted==58){ // for 1  // > FixedRelations.45line 2:531
    elementinteractedmirror=76;  // > FixedRelations.45line 2:532
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:533
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:534
      }  // > FixedRelations.45line 2:535
      else {  // > FixedRelations.45line 2:536
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:537
     }  // > FixedRelations.45line 2:538
     }  // > FixedRelations.45line 2:539
       //manually  // > FixedRelations.45line 2:540
    if (elementinteracted==59){ // for 8  // > FixedRelations.45line 2:541
    elementinteractedmirror=86;  // > FixedRelations.45line 2:542
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:543
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:544
      }  // > FixedRelations.45line 2:545
      else {  // > FixedRelations.45line 2:546
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:547
     }  // > FixedRelations.45line 2:548
     }  // > FixedRelations.45line 2:549
       //manually  // > FixedRelations.45line 2:550
    if (elementinteracted==60){ // for 9  // > FixedRelations.45line 2:551
    elementinteractedmirror=96;  // > FixedRelations.45line 2:552
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:553
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:554
      }  // > FixedRelations.45line 2:555
      else {  // > FixedRelations.45line 2:556
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:557
     }  // > FixedRelations.45line 2:558
     }  // > FixedRelations.45line 2:559
     // 61 to 70 minus 64  // > FixedRelations.45line 2:560
      //manually  // > FixedRelations.45line 2:561
    else if (elementinteracted==61){ // for 1  // > FixedRelations.45line 2:562
    elementinteractedmirror=7;  // > FixedRelations.45line 2:563
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:564
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:565
      }  // > FixedRelations.45line 2:566
      else {  // > FixedRelations.45line 2:567
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:568
     }  // > FixedRelations.45line 2:569
     }  // > FixedRelations.45line 2:570
       //manually  // > FixedRelations.45line 2:571
    if (elementinteracted==62){ // for 1  // > FixedRelations.45line 2:572
    elementinteractedmirror=17;  // > FixedRelations.45line 2:573
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:574
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:575
      }  // > FixedRelations.45line 2:576
      else {  // > FixedRelations.45line 2:577
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:578
     }  // > FixedRelations.45line 2:579
     }  // > FixedRelations.45line 2:580
       //manually  // > FixedRelations.45line 2:581
    if (elementinteracted==63){ // for 1  // > FixedRelations.45line 2:582
    elementinteractedmirror=27;  // > FixedRelations.45line 2:583
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:584
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:585
      }  // > FixedRelations.45line 2:586
      else {  // > FixedRelations.45line 2:587
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:588
     }  // > FixedRelations.45line 2:589
     }  // > FixedRelations.45line 2:590
      //manually  // > FixedRelations.45line 2:591
    if (elementinteracted==64){ // for 1  // > FixedRelations.45line 2:592
    elementinteractedmirror=37;  // > FixedRelations.45line 2:593
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:594
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:595
      }  // > FixedRelations.45line 2:596
      else {  // > FixedRelations.45line 2:597
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:598
     }  // > FixedRelations.45line 2:599
     }  // > FixedRelations.45line 2:600
       //manually  // > FixedRelations.45line 2:601
    if (elementinteracted==65){ // for 1  // > FixedRelations.45line 2:602
    elementinteractedmirror=47;  // > FixedRelations.45line 2:603
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:604
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:605
      }  // > FixedRelations.45line 2:606
      else {  // > FixedRelations.45line 2:607
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:608
     }  // > FixedRelations.45line 2:609
     }  // > FixedRelations.45line 2:610
       //manually  // > FixedRelations.45line 2:611
    if (elementinteracted==66){ // for 1  // > FixedRelations.45line 2:612
    elementinteractedmirror=57;  // > FixedRelations.45line 2:613
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:614
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:615
      }  // > FixedRelations.45line 2:616
      else {  // > FixedRelations.45line 2:617
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:618
     }  // > FixedRelations.45line 2:619
     }  // > FixedRelations.45line 2:620
        // > FixedRelations.45line 2:621
       //manually  // > FixedRelations.45line 2:622
    if (elementinteracted==68){ // for 1  // > FixedRelations.45line 2:623
    elementinteractedmirror=77;  // > FixedRelations.45line 2:624
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:625
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:626
      }  // > FixedRelations.45line 2:627
      else {  // > FixedRelations.45line 2:628
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:629
     }  // > FixedRelations.45line 2:630
     }  // > FixedRelations.45line 2:631
       //manually  // > FixedRelations.45line 2:632
    if (elementinteracted==69){ // for 8  // > FixedRelations.45line 2:633
    elementinteractedmirror=87;  // > FixedRelations.45line 2:634
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:635
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:636
      }  // > FixedRelations.45line 2:637
      else {  // > FixedRelations.45line 2:638
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:639
     }  // > FixedRelations.45line 2:640
     }  // > FixedRelations.45line 2:641
       //manually  // > FixedRelations.45line 2:642
    if (elementinteracted==70){ // for 9  // > FixedRelations.45line 2:643
    elementinteractedmirror=97;  // > FixedRelations.45line 2:644
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:645
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:646
      }  // > FixedRelations.45line 2:647
      else {  // > FixedRelations.45line 2:648
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:649
     }  // > FixedRelations.45line 2:650
     }  // > FixedRelations.45line 2:651
      // 71 to 80 minus 73  // > FixedRelations.45line 2:652
      //manually  // > FixedRelations.45line 2:653
    else if (elementinteracted==71){ // for 1  // > FixedRelations.45line 2:654
    elementinteractedmirror=8;  // > FixedRelations.45line 2:655
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:656
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:657
      }  // > FixedRelations.45line 2:658
      else {  // > FixedRelations.45line 2:659
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:660
     }  // > FixedRelations.45line 2:661
     }  // > FixedRelations.45line 2:662
       //manually  // > FixedRelations.45line 2:663
    if (elementinteracted==72){ // for 1  // > FixedRelations.45line 2:664
    elementinteractedmirror=18;  // > FixedRelations.45line 2:665
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:666
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:667
      }  // > FixedRelations.45line 2:668
      else {  // > FixedRelations.45line 2:669
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:670
     }  // > FixedRelations.45line 2:671
     }  // > FixedRelations.45line 2:672
       //manually  // > FixedRelations.45line 2:673
       if (elementinteracted==73){ // for 1  // > FixedRelations.45line 2:674
    elementinteractedmirror=28;  // > FixedRelations.45line 2:675
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:676
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:677
      }  // > FixedRelations.45line 2:678
      else {  // > FixedRelations.45line 2:679
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:680
     }  // > FixedRelations.45line 2:681
     }  // > FixedRelations.45line 2:682
       //manually  // > FixedRelations.45line 2:683
    if (elementinteracted==74){ // for 1  // > FixedRelations.45line 2:684
    elementinteractedmirror=38;  // > FixedRelations.45line 2:685
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:686
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:687
      }  // > FixedRelations.45line 2:688
      else {  // > FixedRelations.45line 2:689
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:690
     }  // > FixedRelations.45line 2:691
     }  // > FixedRelations.45line 2:692
       //manually  // > FixedRelations.45line 2:693
    if (elementinteracted==75){ // for 1  // > FixedRelations.45line 2:694
    elementinteractedmirror=48;  // > FixedRelations.45line 2:695
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:696
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:697
      }  // > FixedRelations.45line 2:698
      else {  // > FixedRelations.45line 2:699
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:700
     }  // > FixedRelations.45line 2:701
     }  // > FixedRelations.45line 2:702
       //manually  // > FixedRelations.45line 2:703
    if (elementinteracted==76){ // for 1  // > FixedRelations.45line 2:704
    elementinteractedmirror=58;  // > FixedRelations.45line 2:705
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:706
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:707
      }  // > FixedRelations.45line 2:708
      else {  // > FixedRelations.45line 2:709
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:710
     }  // > FixedRelations.45line 2:711
     }  // > FixedRelations.45line 2:712
       //manually  // > FixedRelations.45line 2:713
    if (elementinteracted==77){ // for 1  // > FixedRelations.45line 2:714
    elementinteractedmirror=68;  // > FixedRelations.45line 2:715
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:716
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:717
      }  // > FixedRelations.45line 2:718
      else {  // > FixedRelations.45line 2:719
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:720
     }  // > FixedRelations.45line 2:721
     }  // > FixedRelations.45line 2:722
        // > FixedRelations.45line 2:723
       //manually  // > FixedRelations.45line 2:724
    if (elementinteracted==79){ // for 8  // > FixedRelations.45line 2:725
    elementinteractedmirror=88;  // > FixedRelations.45line 2:726
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:727
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:728
      }  // > FixedRelations.45line 2:729
      else {  // > FixedRelations.45line 2:730
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:731
     }  // > FixedRelations.45line 2:732
     }  // > FixedRelations.45line 2:733
       //manually  // > FixedRelations.45line 2:734
    if (elementinteracted==80){ // for 9  // > FixedRelations.45line 2:735
    elementinteractedmirror=98;  // > FixedRelations.45line 2:736
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:737
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:738
      }  // > FixedRelations.45line 2:739
      else {  // > FixedRelations.45line 2:740
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:741
     }  // > FixedRelations.45line 2:742
     }  // > FixedRelations.45line 2:743
      // 81 to 90 minus 82  // > FixedRelations.45line 2:744
      //manually  // > FixedRelations.45line 2:745
    else if (elementinteracted==81){ // for 1  // > FixedRelations.45line 2:746
    elementinteractedmirror=9;  // > FixedRelations.45line 2:747
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:748
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:749
      }  // > FixedRelations.45line 2:750
      else {  // > FixedRelations.45line 2:751
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:752
     }  // > FixedRelations.45line 2:753
     }  // > FixedRelations.45line 2:754
       //manually  // > FixedRelations.45line 2:755
       else if (elementinteracted==82){ // for 1  // > FixedRelations.45line 2:756
    elementinteractedmirror=19;  // > FixedRelations.45line 2:757
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:758
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:759
      }  // > FixedRelations.45line 2:760
      else {  // > FixedRelations.45line 2:761
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:762
     }  // > FixedRelations.45line 2:763
     }  // > FixedRelations.45line 2:764
     //  // > FixedRelations.45line 2:765
    if (elementinteracted==83){ // for 1  // > FixedRelations.45line 2:766
    elementinteractedmirror=29;  // > FixedRelations.45line 2:767
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:768
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:769
      }  // > FixedRelations.45line 2:770
      else {  // > FixedRelations.45line 2:771
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:772
     }  // > FixedRelations.45line 2:773
     }  // > FixedRelations.45line 2:774
       //manually  // > FixedRelations.45line 2:775
    if (elementinteracted==84){ // for 1  // > FixedRelations.45line 2:776
    elementinteractedmirror=39;  // > FixedRelations.45line 2:777
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:778
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:779
      }  // > FixedRelations.45line 2:780
      else {  // > FixedRelations.45line 2:781
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:782
     }  // > FixedRelations.45line 2:783
     }  // > FixedRelations.45line 2:784
       //manually  // > FixedRelations.45line 2:785
    if (elementinteracted==85){ // for 1  // > FixedRelations.45line 2:786
    elementinteractedmirror=49; //doing stop here  // > FixedRelations.45line 2:787
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:788
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:789
      }  // > FixedRelations.45line 2:790
      else {  // > FixedRelations.45line 2:791
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:792
     }  // > FixedRelations.45line 2:793
     }  // > FixedRelations.45line 2:794
       //manually  // > FixedRelations.45line 2:795
    if (elementinteracted==86){ // for 1  // > FixedRelations.45line 2:796
    elementinteractedmirror=59;  // > FixedRelations.45line 2:797
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:798
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:799
      }  // > FixedRelations.45line 2:800
      else {  // > FixedRelations.45line 2:801
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:802
     }  // > FixedRelations.45line 2:803
     }  // > FixedRelations.45line 2:804
       //manually  // > FixedRelations.45line 2:805
    if (elementinteracted==87){ // for 1  // > FixedRelations.45line 2:806
    elementinteractedmirror=69;  // > FixedRelations.45line 2:807
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:808
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:809
      }  // > FixedRelations.45line 2:810
      else {  // > FixedRelations.45line 2:811
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:812
     }  // > FixedRelations.45line 2:813
     }  // > FixedRelations.45line 2:814
       //manually  // > FixedRelations.45line 2:815
    if (elementinteracted==88){ // for 1  // > FixedRelations.45line 2:816
    elementinteractedmirror=79;  // > FixedRelations.45line 2:817
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:818
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:819
      }  // > FixedRelations.45line 2:820
      else {  // > FixedRelations.45line 2:821
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:822
     }  // > FixedRelations.45line 2:823
     }  // > FixedRelations.45line 2:824
         // > FixedRelations.45line 2:825
       //manually  // > FixedRelations.45line 2:826
    if (elementinteracted==90){ // for 9  // > FixedRelations.45line 2:827
    elementinteractedmirror=99;  // > FixedRelations.45line 2:828
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:829
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:830
      }  // > FixedRelations.45line 2:831
      else {  // > FixedRelations.45line 2:832
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:833
     }  // > FixedRelations.45line 2:834
     }  // > FixedRelations.45line 2:835
      // 91 to 100 minus 91  // > FixedRelations.45line 2:836
      //manually  // > FixedRelations.45line 2:837
      else if (elementinteracted==91){ // for 1  // > FixedRelations.45line 2:838
    elementinteractedmirror=10;  // > FixedRelations.45line 2:839
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:840
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:841
      }  // > FixedRelations.45line 2:842
      else {  // > FixedRelations.45line 2:843
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:844
     }  // > FixedRelations.45line 2:845
     }  // > FixedRelations.45line 2:846
       //manually  // > FixedRelations.45line 2:847
    else if (elementinteracted==92){ // for 1  // > FixedRelations.45line 2:848
    elementinteractedmirror=20;  // > FixedRelations.45line 2:849
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:850
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:851
      }  // > FixedRelations.45line 2:852
      else {  // > FixedRelations.45line 2:853
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:854
     }  // > FixedRelations.45line 2:855
     }  // > FixedRelations.45line 2:856
       //manually  // > FixedRelations.45line 2:857
    if (elementinteracted==93){ // for 1  // > FixedRelations.45line 2:858
    elementinteractedmirror=30;  // > FixedRelations.45line 2:859
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:860
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:861
      }  // > FixedRelations.45line 2:862
      else {  // > FixedRelations.45line 2:863
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:864
     }  // > FixedRelations.45line 2:865
     }  // > FixedRelations.45line 2:866
       //manually  // > FixedRelations.45line 2:867
    if (elementinteracted==94){ // for 1  // > FixedRelations.45line 2:868
    elementinteractedmirror=40;  // > FixedRelations.45line 2:869
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:870
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:871
      }  // > FixedRelations.45line 2:872
      else {  // > FixedRelations.45line 2:873
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:874
     }  // > FixedRelations.45line 2:875
     }  // > FixedRelations.45line 2:876
       //manually  // > FixedRelations.45line 2:877
    if (elementinteracted==95){ // for 1  // > FixedRelations.45line 2:878
    elementinteractedmirror=50; //doing stop here  // > FixedRelations.45line 2:879
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:880
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:881
      }  // > FixedRelations.45line 2:882
      else {  // > FixedRelations.45line 2:883
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:884
     }  // > FixedRelations.45line 2:885
     }  // > FixedRelations.45line 2:886
       //manually  // > FixedRelations.45line 2:887
    if (elementinteracted==96){ // for 1  // > FixedRelations.45line 2:888
    elementinteractedmirror=60;  // > FixedRelations.45line 2:889
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:890
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:891
      }  // > FixedRelations.45line 2:892
      else {  // > FixedRelations.45line 2:893
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:894
     }  // > FixedRelations.45line 2:895
     }  // > FixedRelations.45line 2:896
       //manually  // > FixedRelations.45line 2:897
    if (elementinteracted==97){ // for 1  // > FixedRelations.45line 2:898
    elementinteractedmirror=70;  // > FixedRelations.45line 2:899
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:900
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:901
      }  // > FixedRelations.45line 2:902
      else {  // > FixedRelations.45line 2:903
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:904
     }  // > FixedRelations.45line 2:905
     }  // > FixedRelations.45line 2:906
       //manually  // > FixedRelations.45line 2:907
    if (elementinteracted==98){ // for 1  // > FixedRelations.45line 2:908
    elementinteractedmirror=80;  // > FixedRelations.45line 2:909
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:910
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:911
      }  // > FixedRelations.45line 2:912
      else {  // > FixedRelations.45line 2:913
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:914
     }  // > FixedRelations.45line 2:915
     }  // > FixedRelations.45line 2:916
       //manually  // > FixedRelations.45line 2:917
    if (elementinteracted==99){ // for 8  // > FixedRelations.45line 2:918
    elementinteractedmirror=90;  // > FixedRelations.45line 2:919
    if (colorVectors[elementinteractedmirror]=="rgba(100,100,255,0.5)"){  // > FixedRelations.45line 2:920
      colorVectors[elementinteractedmirror]=colororiginal;  // > FixedRelations.45line 2:921
      }  // > FixedRelations.45line 2:922
      else {  // > FixedRelations.45line 2:923
    colorVectors[elementinteractedmirror] = "rgba(100,100,255,0.5)";  // > FixedRelations.45line 2:924
     }  // > FixedRelations.45line 2:925
     }  // > FixedRelations.45line 2:926
         // > FixedRelations.45line 2:927
       // > FixedRelations.45line 2:928
       // > FixedRelations.45line 2:929
       // > FixedRelations.45line 2:930
       // > FixedRelations.45line 2:931
     }  // > FixedRelations.45line 2:932
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new symmetryblockgridonly_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.vectorcompo.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'vectorcompo'
          _view.comboBox4unused.linkProperty("Options",  function() { return ["vertical","horizontal","45 line","-45 line"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox4unused'
          _view.comboBox4unused.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
  var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["vertical","horizontal","45 line","-45 line"]
  if ( option=="vertical") {
    comboboxmode=1;
  mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 0;
  mirrorsizey= 10;
  }
  	else if ( option=="horizontal") {
  	comboboxmode=2;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 0;
  	}
  	else if ( option=="45 line") {
  	comboboxmode=3;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 10;
  	}
  	else if ( option=="-45 line") {
  	comboboxmode=4;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= -10;
  	}
  	
  	else if ( option=="quiz") {
  quizmode=true;
  textshow=false;
  	}
  	else if ( option=="explore") {
  quizmode=false;
  textshow=true;
  	}
  	else if ( option=="remove grid") {
  removegrid=false;
  	}
  	else if ( option=="grid") {
  removegrid=true;
  	}
  	else if ( option=="letter show") {
  textshow=true;
  	}
  	else if ( option=="letter hide") {
  textshow=false;
  	}
  	else if ( option=="draw") {
  draw=true;
  	}
  	else if ( option=="draw off") {
  draw=false;
  	}
  	
  	else if ( option=="hint") {
  hint=true;
  	}
  	else if ( option=="hint off") {
  hint=false;
  	}
  // also set to old state
  for (var i=1; i<101 ; i++) { //special codes
  elementinteractedmirrorquiz[i]=0 
  //score=score+1;
  //alert(i);
  }
  // set back to original state
  for (var i = 1; i < nVectorsMax+1; i++)
  {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
    colorVectors[vectorIndex]=colororiginal;    
    }
  }
  elementinteracted=-1; // solve problem of funny things shown
  numberofinteraction=0; //set back to original for quiz calculation
  comboxselected=1;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox4unused'
          _view.comboBox4unused.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox4unused'
          _view.comboBox.linkProperty("Options",  function() { return ["","|","__","/","\\"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
  var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["vertical","horizontal","45 line","-45 line"]
  if ( option=="|") {
    comboboxmode=1;
  mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 0;
  mirrorsizey= 10;
  }
  //["__","|","/","\\"]
  	else if ( option=="__") {
  	comboboxmode=2;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 0;
  	}
  	else if ( option=="/") {
  	comboboxmode=3;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 10;
  	}
  	else if ( option=="\\") {
  	comboboxmode=4;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= -10;
  	}
  	
  	else if ( option=="quiz") {
  quizmode=true;
  textshow=false;
  	}
  	else if ( option=="explore") {
  quizmode=false;
  textshow=true;
  	}
  	else if ( option=="remove grid") {
  removegrid=false;
  	}
  	else if ( option=="grid") {
  removegrid=true;
  	}
  	else if ( option=="letter show") {
  textshow=true;
  	}
  	else if ( option=="letter hide") {
  textshow=false;
  	}
  	else if ( option=="draw") {
  draw=true;
  	}
  	else if ( option=="draw off") {
  draw=false;
  	}
  	
  	else if ( option=="hint") {
  hint=true;
  	}
  	else if ( option=="hint off") {
  hint=false;
  	}
  // also set to old state
  for (var i=1; i<101 ; i++) { //special codes
  elementinteractedmirrorquiz[i]=0 
  //score=score+1;
  //alert(i);
  }
  // set back to original state
  for (var i = 1; i < nVectorsMax+1; i++)
  {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
    colorVectors[vectorIndex]=colororiginal;    
    }
  }
  elementinteracted=-1; // solve problem of funny things shown
  numberofinteraction=0; //set back to original for quiz calculation
  comboxselected=1;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.comboBox2.linkProperty("Options",  function() { return ["grid","remove grid","","hint","hint off"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox2'
          _view.comboBox2.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox2.getProperty("SelectedOptions");  // array of options
  var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["vertical","horizontal","45 line","-45 line"]
  if ( option=="vertical") {
    comboboxmode=1;
  mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 0;
  mirrorsizey= 10;
  }
  	else if ( option=="horizontal") {
  	comboboxmode=2;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 0;
  	}
  	else if ( option=="45 line") {
  	comboboxmode=3;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 10;
  	}
  	else if ( option=="-45 line") {
  	comboboxmode=4;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= -10;
  	}
  	
  	else if ( option=="quiz") {
  quizmode=true;
  textshow=false;
  	}
  	else if ( option=="explore") {
  quizmode=false;
  //textshow=true;
  	}
  	else if ( option=="remove grid") {
  removegrid=false;
  	}
  	else if ( option=="grid") {
  removegrid=true;
  	}
  	else if ( option=="letter show") {
  textshow=true;
  	}
  	else if ( option=="letter hide") {
  textshow=false;
  	}
  	else if ( option=="draw") {
  draw=true;
  removegrid=false; //force grid off
  	}
  	else if ( option=="draw off") {
  draw=false;
  	}
  	else if ( option=="drawline") {
  drawline=true;
  removegrid=false; //remove grid for drawline to work properly on a clean panel
  	}
  	else if ( option=="drawline off") {
  drawline=false;
  	}
  	
  	else if ( option=="hint") {
  hint=true;
  	}
  	else if ( option=="hint off") {
  hint=false;
  	}
  // also set to old state
  for (var i=1; i<101 ; i++) { //special codes
  elementinteractedmirrorquiz[i]=0 
  //score=score+1;
  //alert(i);
  }
  // set back to original state
  for (var i = 1; i < nVectorsMax+1; i++)
  {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
    colorVectors[vectorIndex]=colororiginal;    
    }
  }
  elementinteracted=-1; // solve problem of funny things shown
  numberofinteraction=0; //set back to original for quiz calculation
  comboxselected2=1;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox2'
          _view.comboBox2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox2'
          _view.comboBox2.linkProperty("Display",  function() { return comboxselected==1?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'comboBox2'
          _view.quizline.linkProperty("Checked",  function() { return quizmodeline; }, function(_v) { quizmodeline = _v; } ); // HtmlView Page linking property 'Checked' for element 'quizline'
          _view.quizline.linkProperty("Tooltip",  function() { return _view.comboBox2.getProperty("SelectedOptions")=="drawline"?"inline-block":"none"; } ); // HtmlView Page linking property 'Tooltip' for element 'quizline'
          _view.quizline.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'quizline'
          _view.quiz.linkProperty("Checked",  function() { return quizmode; }, function(_v) { quizmode = _v; } ); // HtmlView Page linking property 'Checked' for element 'quiz'
          _view.quiz.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'quiz'
          _view.quiz.linkProperty("Display",  function() { return _view.comboBox2.getProperty("SelectedOptions")=="grid"?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'quiz'
          _view.comboBox3.linkProperty("Options",  function() { return ["select quiz?","quiz block","quiz line"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox3'
          _view.comboBox3.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox3.getProperty("SelectedOptions");  // array of options
  var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["vertical","horizontal","45 line","-45 line"]
  if ( option=="vertical") {
    comboboxmode=1;
  mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 0;
  mirrorsizey= 10;
  }
  	else if ( option=="horizontal") {
  	comboboxmode=2;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 0;
  	}
  	else if ( option=="45 line") {
  	comboboxmode=3;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= 10;
  	}
  	else if ( option=="-45 line") {
  	comboboxmode=4;
  	mirrorx= 0;
  mirrory= 0;
  mirrorsizex = 10;
  mirrorsizey= -10;
  	}
  	
  	else if ( option=="quiz block") {
  quizmode=true;
  textshow=false;
  	}
  	else if ( option=="explore") {
  quizmode=false;
  textshow=true;
  	}
  	else if ( option=="remove grid") {
  removegrid=false;
  	}
  	else if ( option=="grid") {
  removegrid=true;
  	}
  	else if ( option=="letter show") {
  textshow=true;
  	}
  	else if ( option=="letter hide") {
  textshow=false;
  	}
  	else if ( option=="draw") {
  draw=true;
  	}
  	else if ( option=="draw off") {
  draw=false;
  	}
  	
  	else if ( option=="hint") {
  hint=true;
  	}
  	else if ( option=="hint off") {
  hint=false;
  	}
  // also set to old state
  for (var i=1; i<101 ; i++) { //special codes
  elementinteractedmirrorquiz[i]=0 
  //score=score+1;
  //alert(i);
  }
  // set back to original state
  for (var i = 1; i < nVectorsMax+1; i++)
  {
    for (var j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;
    colorVectors[vectorIndex]=colororiginal;    
    }
  }
  elementinteracted=-1; // solve problem of funny things shown
  numberofinteraction=0; //set back to original for quiz calculation
  comboxselected3=1;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox3'
          _view.comboBox3.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox3'
          _view.comboBoxletter.linkProperty("Options",  function() { return ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]; } ); // HtmlView Page linking property 'Options' for element 'comboBoxletter'
          _view.comboBoxletter.linkProperty("Tooltip",  function() { return textshow?"inline-block":"none"; } ); // HtmlView Page linking property 'Tooltip' for element 'comboBoxletter'
          _view.comboBoxletter.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBoxletter.getProperty("SelectedOptions");  // array of options
  var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["vertical","horizontal","45 line","-45 line"]
  letter=option;
  //var wletter = +document.getElementById("text.text").getComputedTextLength();
  //myscale = 0.65*Math.max(document.documentElement.clientHeight, window.innerHeight || 0) / wletter;
  if (option=="A"){
    xtext=0;
    ytext=0;
  //  fontsize="66.5vmin";
     fontsize="66.5vmin";
    myscale = 1.08;
    
  }
  else if (option=="B"){
      xtext=0.48;
    ytext=0;
   //  fontsize="66vmin";
      fontsize="66vmin";
    myscale = 1.32;
   
  }
  else if (option=="C"){
      xtext=0.3;
    ytext=0.1;
     fontsize="64vmin";
    myscale = 1.17;
   
  }
  else if (option=="D"){
    xtext=0.42;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.2;
    
  }
  else if (option=="E"){
    xtext=0.42;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.32;
    
  }
  else if (option=="F"){
    xtext=0.42;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.47;
    
  }
  else if (option=="G"){
    xtext=0.4;
    ytext=0.1;
    fontsize="64vmin";
    myscale = 1.10;
    
  }
  else if (option=="H"){
    xtext=0.65;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.26;
    
  }
  else if (option=="I"){
    xtext=-0.1;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.45;
    
  }
  else if (option=="J"){
    xtext=0.95;
    ytext=0.1;
    fontsize="65vmin";
    myscale = 1.85;
    
  }
  else if (option=="K"){
    xtext=0;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.2;
    
  }
  else if (option=="L"){
    xtext=0.35;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.58;
    
  }
  else if (option=="M"){
    xtext=0.5;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.04;
    
  }
  else if (option=="N"){
    xtext=0.65;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.25;
    
  }
  else if (option=="O"){
    xtext=0.3;
    ytext=0.1;
    fontsize="64vmin";
    myscale = 1.08;
    
  }
  else if (option=="P"){
    xtext=0.35;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.3;
    
  }
  else if (option=="Q"){
    xtext=0.2;
    ytext=0.1;
    fontsize="64vmin";
    myscale = 1.05;
    
  }
  else if (option=="R"){
    xtext=0.05;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.12;
    
  }
  else if (option=="S"){
    xtext=0.45;
    ytext=0.1;
    fontsize="64vmin";
    myscale = 1.3;
    
  }
  else if (option=="T"){
    xtext=0.13;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.25;
    
  }
  else if (option=="U"){
    xtext=0.65;
    ytext=0.1;
    fontsize="65vmin";
    myscale = 1.28;
    
  }
  else if (option=="V"){
    xtext=0;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.08;
    
  }
  else if (option=="W"){
    xtext=0.05;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 0.77;
    
  }
  else if (option=="X"){
    xtext=0;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.08;
    
  }
  else if (option=="Y"){
  xtext=0;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.08;
    
  }
  else if (option=="Z"){
    xtext=0.18;
    ytext=0;
    fontsize="66.5vmin";
    myscale = 1.25;
    
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBoxletter'
          _view.comboBoxletter.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBoxletter'
          _view.checkblocknone.setAction("OnClick", function(_data,_info) {
  //if (elementinteracted<0)elementinteracted=-11 // fix bug of 11 selected
  //if (_view.comboBox.getProperty("SelectedOptions")=="vertical"){
   for (var i=1; i<11 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(11-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=11; i<21 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(31-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=21; i<31 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(51-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=31; i<41 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(71-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=41; i<51 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(91-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=51; i<61 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(111-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=61; i<71 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(131-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=71; i<81 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(151-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=81; i<91 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(171-i)]=="1"){
    score=score+1;
    }
  } //for loop
  for (var i=91; i<101 /* Iterations */ ; i++) {
  if (elementinteractedmirrorquiz[i]=="1"&&elementinteractedmirrorquiz[(191-i)]=="1"){
    score=score+1;
    }
  } //for loop
  // check correct
  if (score==numberofinteraction){
  correcttext= "Well done!";
  EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "green";
    }
    else {
   correcttext= "Incorrect, check your answers again";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "red";
      }
  _update();// force fixed relationship
  //reset score back to zero
  score=0;

}); // HtmlView Page setting action 'OnClick' for element 'checkblocknone'
          _view.checkblocknone.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'checkblocknone'
          _view.check90.setAction("OnClick", function(_data,_info) {
  score=0; //reset score back to zero
  //score=0; //set back to zero to count correctly
  for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1&&elementinteractedmirrorquiz[arraymirror90[i]]==1){ // for 1,11,21,31,....
  score=score+1;
  //alert(i);
   }
  }
  /*
  for (var i=0; i<10  ; i++) { 
  if (elementinteractedmirrorquiz[i*10+1]==1&&elementinteractedmirrorquiz[92-elementinteracted]==1){ // for 1,11,21,31,....
  score=score+1;
  scoredebug[i*10+1]=scoredebug[i*10+1]+1;
  //alert(1);
   }
   if (elementinteractedmirrorquiz[i*10+2]==1&&elementinteractedmirrorquiz[94-elementinteracted]==1){ // for 2,12,22,32,....
  score=score+1; 
  scoredebug[i*10+2]=scoredebug[i*10+2]+1;
  //alert(2);
   }
   if (elementinteractedmirrorquiz[i*10+3]==1&&elementinteractedmirrorquiz[96-elementinteracted]==1){ // for 3,13,23,33,....
  score=score+1;  
  scoredebug[i*10+3]=scoredebug[i*10+3]+1;
  //alert(3);
   }
   //
   if (elementinteractedmirrorquiz[i*10+4]==1&&elementinteractedmirrorquiz[98-elementinteracted]==1){ // for 4,14,24,34,....
  score=score+1;  
  scoredebug[i]=scoredebug[i]+1;
  //alert(4);
   }
   //
   if (elementinteractedmirrorquiz[i*10+5]==1&&elementinteractedmirrorquiz[100-elementinteracted]==1){ // for 5,15,25,35,....
  score=score+1;  
  scoredebug[i*10+5]=scoredebug[i*10+5]+1;
  //alert(5);
   }
   //
   if (elementinteractedmirrorquiz[i*10+6]==1&&elementinteractedmirrorquiz[102-elementinteracted]==1){ // for 616,26,36,....
  score=score+1; 
  scoredebug[i*10+6]=scoredebug[i*10+6]+1;
  //alert(6);
   }
   //
   if (elementinteractedmirrorquiz[i*10+7]==1&&elementinteractedmirrorquiz[104-elementinteracted]==1){ // for 7,17,27,37,....
  score=score+1;  
  scoredebug[i*10+7]=scoredebug[i*10+7]+1;
  //alert(7);
   }
   //
   //
   if (elementinteractedmirrorquiz[i*10+8]==1&&elementinteractedmirrorquiz[106-elementinteracted]==1){ // for 8,18,28,38,....
  score=score+1; 
  scoredebug[i*10+8]=scoredebug[i*10+8]+1;
  //alert(8);
   }
   //
   //
   if (elementinteractedmirrorquiz[i*10+9]==1&&elementinteractedmirrorquiz[108-elementinteracted]==1){ // for 9,19,29,39,....
  score=score+1;  
  scoredebug[i*10+9]=scoredebug[i*10+9]+1;
  //alert(9);
   }
   //
   if (elementinteractedmirrorquiz[i*10+10]==1&&elementinteractedmirrorquiz[110-elementinteracted]==1){ // for 10,20,30,40,....
  score=score+1; 
  scoredebug[i*10+10]=scoredebug[i*10+10]+1;
  //alert(10);
   }
   
   
   }
  */
   // check correct
    
  //if ((numberofinteraction==score)&&score>0&&numberofinteraction%2==0){ // must be even to be correct
  if ((numberofinteraction==score)&&numberofinteraction%2==0){ // must be even to be correctcorrecttext= "Well done!";
  correcttext= "Well Done!!";
  EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "green";
  // alert(score+"...1");
   }
    else if (numberofinteraction==0){
   correcttext= "Click on any square to continue";
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "yellow";
   //  alert(score+"...2");  
      }
    else if (feedbackshow<3) {
   correcttext= "Incorrect, check your answers again";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "red";
   //  alert(score+"...3");
   feedbackshow=feedbackshow+1;
     }
     else if (feedbackshow=>3){ // show answer despite wrong
     for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1){ // for 1,11,21,31,....
  elementinteractedmirrorquiz[arraymirror90[i]]==1;
  colorVectors[arraymirror90[i]] = "rgba(100,100,255,0.5)"; // take color change
   }
  }
   correcttext= "The correct answer is shown!";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "lightgreen";    
       }
     
  //_update();// force fixed relationship
  /*
  if (feedbackshow>2){
    // do something
    for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1){ // for 1,11,21,31,....
  elementinteractedmirrorquiz[arraymirror90[i]]==1;
  colorVectors[arraymirror90[i]] = "rgba(100,100,255,0.5)"; // take color change
   }
  }
   // alert(feedbackshow);
    }
  */
   //
  // _update();

}); // HtmlView Page setting action 'OnClick' for element 'check90'
          _view.check90.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'check90'
          _view.check90.linkProperty("Display",  function() { return (comboboxmode==1&&quizmode==true)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'check90'
          _view.check00.setAction("OnClick", function(_data,_info) {
  score=0; //reset score back to zero
  //score=0; //set back to zero to count correctly
  for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1&&elementinteractedmirrorquiz[arraymirror00[i]]==1){ // for 1,11,21,31,....
  score=score+1;
  //alert(1);
   }
  }
  /*
  for (var i=0; i<10  ; i++) { 
  if (elementinteractedmirrorquiz[i*10+1]==1&&elementinteractedmirrorquiz[92-elementinteracted]==1){ // for 1,11,21,31,....
  score=score+1;
  scoredebug[i*10+1]=scoredebug[i*10+1]+1;
  //alert(1);
   }
   if (elementinteractedmirrorquiz[i*10+2]==1&&elementinteractedmirrorquiz[94-elementinteracted]==1){ // for 2,12,22,32,....
  score=score+1; 
  scoredebug[i*10+2]=scoredebug[i*10+2]+1;
  //alert(2);
   }
   if (elementinteractedmirrorquiz[i*10+3]==1&&elementinteractedmirrorquiz[96-elementinteracted]==1){ // for 3,13,23,33,....
  score=score+1;  
  scoredebug[i*10+3]=scoredebug[i*10+3]+1;
  //alert(3);
   }
   //
   if (elementinteractedmirrorquiz[i*10+4]==1&&elementinteractedmirrorquiz[98-elementinteracted]==1){ // for 4,14,24,34,....
  score=score+1;  
  scoredebug[i]=scoredebug[i]+1;
  //alert(4);
   }
   //
   if (elementinteractedmirrorquiz[i*10+5]==1&&elementinteractedmirrorquiz[100-elementinteracted]==1){ // for 5,15,25,35,....
  score=score+1;  
  scoredebug[i*10+5]=scoredebug[i*10+5]+1;
  //alert(5);
   }
   //
   if (elementinteractedmirrorquiz[i*10+6]==1&&elementinteractedmirrorquiz[102-elementinteracted]==1){ // for 616,26,36,....
  score=score+1; 
  scoredebug[i*10+6]=scoredebug[i*10+6]+1;
  //alert(6);
   }
   //
   if (elementinteractedmirrorquiz[i*10+7]==1&&elementinteractedmirrorquiz[104-elementinteracted]==1){ // for 7,17,27,37,....
  score=score+1;  
  scoredebug[i*10+7]=scoredebug[i*10+7]+1;
  //alert(7);
   }
   //
   //
   if (elementinteractedmirrorquiz[i*10+8]==1&&elementinteractedmirrorquiz[106-elementinteracted]==1){ // for 8,18,28,38,....
  score=score+1; 
  scoredebug[i*10+8]=scoredebug[i*10+8]+1;
  //alert(8);
   }
   //
   //
   if (elementinteractedmirrorquiz[i*10+9]==1&&elementinteractedmirrorquiz[108-elementinteracted]==1){ // for 9,19,29,39,....
  score=score+1;  
  scoredebug[i*10+9]=scoredebug[i*10+9]+1;
  //alert(9);
   }
   //
   if (elementinteractedmirrorquiz[i*10+10]==1&&elementinteractedmirrorquiz[110-elementinteracted]==1){ // for 10,20,30,40,....
  score=score+1; 
  scoredebug[i*10+10]=scoredebug[i*10+10]+1;
  //alert(10);
   }
   
   
   }
  */
   // check correct
    
  //if ((numberofinteraction==score)&&score>0&&numberofinteraction%2==0){ // must be even to be correct
  if ((numberofinteraction==score)&&numberofinteraction%2==0){ // must be even to be correctcorrecttext= "Well done!";
  correcttext= "Well Done!!";
  EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "green";
   //alert(score+"...1");
   }
    else if (numberofinteraction==0){
   correcttext= "Click on any square to continue";
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "yellow";
   //  alert(score+"...2");  
      }
     else if (feedbackshow<3) {
   correcttext= "Incorrect, check your answers again";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "red";
   //  alert(score+"...3");
    feedbackshow=feedbackshow+1;
     }
     else if (feedbackshow=>3){ // show answer despite wrong
     for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1){ 
  elementinteractedmirrorquiz[arraymirror00[i]]==1;
  colorVectors[arraymirror00[i]] = "rgba(100,100,255,0.5)"; // take color change
   }
  }
   correcttext= "The correct answer is shown!";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "lightgreen";     
       }
  //_update();// force fixed relationship
   //
  // _update();

}); // HtmlView Page setting action 'OnClick' for element 'check00'
          _view.check00.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'check00'
          _view.check00.linkProperty("Display",  function() { return (comboboxmode==2&&quizmode==true)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'check00'
          _view.check45.setAction("OnClick", function(_data,_info) {
  score=0; //set back to zero to count correctly
  for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1&&elementinteractedmirrorquiz[arraymirror45[i]]==1){ // for 1,11,21,31,....
  score=score+1;
  //alert(1);
   }
  }
  // check correct
    
  if ((numberofinteraction==score)&&numberofinteraction%2==0){ // must be even to be correctcorrecttext= "Well done!";
  correcttext= "Well Done!!";
  EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "green";
  // alert(score+"...1");
   }
    else if (numberofinteraction==0){
   correcttext= "Click on any square to continue";
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "yellow";
   //  alert(score+"...2");  
      }
     else if (feedbackshow<3) {
   correcttext= "Incorrect, check your answers again";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "red";
    feedbackshow=feedbackshow+1;
     }
   else if (feedbackshow=>3){ // show answer despite wrong
     for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1){ // for 1,11,21,31,....
  elementinteractedmirrorquiz[arraymirror45[i]]==1;
  colorVectors[arraymirror45[i]] = "rgba(100,100,255,0.5)"; // take color change
   }
  }
   correcttext= "The correct answer is shown!";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "lightgreen";    
       }

}); // HtmlView Page setting action 'OnClick' for element 'check45'
          _view.check45.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'check45'
          _view.check45.linkProperty("Display",  function() { return (comboboxmode==3&&quizmode==true)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'check45'
          _view.checkn45.setAction("OnClick", function(_data,_info) {
  score=0; //set back to zero to count correctly
  for (var i=1; i<101 /* Iterations */ ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1&&elementinteractedmirrorquiz[arraymirrorminus45[i]]==1){ // for 1,11,21,31,....
  score=score+1;
  //alert(1);
   }
  }
  // check correct
    
  //if ((numberofinteraction==score)&&score>0&&numberofinteraction%2==0){ // must be even to be correct
  if ((numberofinteraction==score)&&numberofinteraction%2==0){ // must be even to be correctcorrecttext= "Well done!";
  correcttext= "Well Done!!";
  EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "green";
   //alert(score+"...1");
   }
    else if (numberofinteraction==0){
   correcttext= "Click on any square to continue";
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "yellow";
    // alert(score+"...2");  
      }
     else if (feedbackshow<3) {
   correcttext= "Incorrect, check your answers again";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "red";
   feedbackshow=feedbackshow+1;
     }
  else if (feedbackshow=>3){ // show answer despite wrong
     for (var i=1; i<101 ; i++) { //special codes
  if (elementinteractedmirrorquiz[arrayobject[i]]==1){ // for 1,11,21,31,....
  elementinteractedmirrorquiz[arraymirrorminus45[i]]==1;
  colorVectors[arraymirrorminus45[i]] = "rgba(100,100,255,0.5)"; // take color change
   }
  }
   correcttext= "The correct answer is shown!";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "lightgreen";    
       }
   _update();

}); // HtmlView Page setting action 'OnClick' for element 'checkn45'
          _view.checkn45.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'checkn45'
          _view.checkn45.linkProperty("Display",  function() { return (comboboxmode==4&&quizmode==true)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'checkn45'
          _view.check90line.setAction("OnClick", function(_data,_info) {
  score=0; //reset score back to zero
  //score=0; //set back to zero to count correctly
  //for (var i=1; i<101 ; i++) { //special codes
  //if (elementinteractedmirrorquiz[arrayobject[i]]==1&&elementinteractedmirrorquiz[arraymirror90[i]]==1){ // for 1,11,21,31,....
  //score=score+1;
  //alert(i);
  // }
  //}
  //scoreline = arraysEqual([[xilineset90,yilineset90],3], [[0,-10],[0,-10],3]);
  //alert(scoreline);
  //if ((numberofinteraction==score)&&score>0&&numberofinteraction%2==0){ // must be even to be correct
  /*
  if ((numberofinteraction==score)&&numberofinteraction%2==0){ // must be even to be correctcorrecttext= "Well done!";
  correcttext= "Well Done!!";
  EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "green";
  // alert(score+"...1");
   }
    else if (numberofinteraction==0){
   correcttext= "Click on any square to continue";
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "yellow";
   //  alert(score+"...2");  
      }
    else {
   correcttext= "Incorrect, check your answers again";   
   EJSS_INTERFACE.BoxPanel.showOkDialog(""+correcttext,hola);
  document.getElementById(".myBoxPanelOk").style.backgroundColor = "red";
   //  alert(score+"...3");
     }
     
  //_update();// force fixed relationship
   //
  // _update();
  */;

}); // HtmlView Page setting action 'OnClick' for element 'check90line'
          _view.check90line.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'check90line'
          _view.check90line.linkProperty("Display",  function() { return (comboboxmode==1&&quizmodeline==true)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'check90line'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.plottingPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnResize", _update); // HtmlView Page setting action 'OnResize' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnPress", drawlineListener); // HtmlView Page setting action 'OnPress' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Tooltip",  function() { return "elementinteracted="+elementinteracted+"\nelementinteractedmirror="+elementinteractedmirror+"\nnumberofinteraction="+numberofinteraction+"\ncomboboxmode="+comboboxmode+"\nquizmode="+quizmode+"xi="+xi+"\nyi="+yi+"\nxiline="+xiline+"\nyiline="+yiline+"\ndraw="+draw+"\ndrawline="+drawline; } ); // HtmlView Page linking property 'Tooltip' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax+0.25; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin-0.25; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.fieldpoint2.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("FillColor",  function() { return colorVectors; }, function(_v) { colorVectors = _v; } ); // HtmlView Page linking property 'FillColor' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'fieldpoint2'
          _view.fieldpoint2.linkProperty("Visibility",  function() { return removegrid; }, function(_v) { removegrid = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fieldpoint2'
          _view.forgame_45.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'forgame_45'
          _view.forgame_45.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'forgame_45'
          _view.forgame_45.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'forgame_45'
          _view.forgame_45.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'forgame_45'
          _view.forgame_45.linkProperty("Visibility",  function() { return removegrid&&comboboxmode==4; } ); // HtmlView Page linking property 'Visibility' for element 'forgame_45'
          _view.forgame_45.setAction("OnPress", function(_data,_info) {
  // set color for all for gamemode 
  // for self color change
  if (colorVectors[elementinteracted]==colororiginal){ // press a new element
  colorVectors[elementinteracted] = "rgba(100,100,255,0.5)"; //change color
  numberofinteraction=numberofinteraction+1; //count +1
  alert("-45+="+elementinteracted);
  }
  else { //change back color if unrequired by user
   colorVectors[elementinteracted] = colororiginal;
   numberofinteraction=numberofinteraction-1;
   alert("-45-="+elementinteracted);
    }
  // set count for all for gamemode 
  if (elementinteractedmirrorquiz[elementinteracted]==1){
    elementinteractedmirrorquiz[elementinteracted]=0; // delete record itself
    }
    else{
  elementinteractedmirrorquiz[elementinteracted]=1; // record itself
  //elementinteractedmirrorquiz[(11-elementinteracted)]=1; // 1 for correct, 0 for no selected
  }
  //vertical ();
  //horizontal ();
  //line45 () ;
  linem45 ();
  elementinteracted=0; //set back to zero to prevent triggering again;

}); // HtmlView Page setting action 'OnPress' for element 'forgame_45'
          _view.forgame45.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'forgame45'
          _view.forgame45.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'forgame45'
          _view.forgame45.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'forgame45'
          _view.forgame45.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'forgame45'
          _view.forgame45.linkProperty("Visibility",  function() { return removegrid&&comboboxmode==3; } ); // HtmlView Page linking property 'Visibility' for element 'forgame45'
          _view.forgame45.setAction("OnPress", function(_data,_info) {
  // set color for all for gamemode 
  // for self color change
  if (colorVectors[elementinteracted]==colororiginal){ // press a new element
  colorVectors[elementinteracted] = "rgba(100,100,255,0.5)"; //change color
  numberofinteraction=numberofinteraction+1; //count +1
  alert("45+="+elementinteracted);
  }
  else { //change back color if unrequired by user
   colorVectors[elementinteracted] = colororiginal;
   numberofinteraction=numberofinteraction-1;
   alert("45-="+elementinteracted);
    }
  // set count for all for gamemode 
  if (elementinteractedmirrorquiz[elementinteracted]==1){
    elementinteractedmirrorquiz[elementinteracted]=0; // delete record itself
    }
    else{
  elementinteractedmirrorquiz[elementinteracted]=1; // record itself
  //elementinteractedmirrorquiz[(11-elementinteracted)]=1; // 1 for correct, 0 for no selected
  }
  //vertical ();
  //horizontal ();
  line45 () ;
  //linem45 ();
  elementinteracted=0; //set back to zero to prevent triggering again;

}); // HtmlView Page setting action 'OnPress' for element 'forgame45'
          _view.forgame90.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'forgame90'
          _view.forgame90.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'forgame90'
          _view.forgame90.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'forgame90'
          _view.forgame90.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'forgame90'
          _view.forgame90.linkProperty("Visibility",  function() { return removegrid&&comboboxmode==1; } ); // HtmlView Page linking property 'Visibility' for element 'forgame90'
          _view.forgame90.setAction("OnPress", function(_data,_info) {
  // set color for all for gamemode 
  // for self color change
  if (colorVectors[elementinteracted]==colororiginal){ // press a new element
  colorVectors[elementinteracted] = "rgba(100,100,255,0.5)"; //change color
  numberofinteraction=numberofinteraction+1; //count +1
  alert("90+="+elementinteracted);
  }
  else { //change back color if unrequired by user
   colorVectors[elementinteracted] = colororiginal;
   numberofinteraction=numberofinteraction-1;
   alert("90-="+elementinteracted);
    }
  // set count for all for gamemode 
  if (elementinteractedmirrorquiz[elementinteracted]==1){
    elementinteractedmirrorquiz[elementinteracted]=0; // delete record itself
    }
    else{
  elementinteractedmirrorquiz[elementinteracted]=1; // record itself
  //elementinteractedmirrorquiz[(11-elementinteracted)]=1; // 1 for correct, 0 for no selected
  }
  vertical ();
  //horizontal ();
  //line45 () ;
  //linem45 ();
  elementinteracted=0; //set back to zero to prevent triggering again;

}); // HtmlView Page setting action 'OnPress' for element 'forgame90'
          _view.forgame00.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'forgame00'
          _view.forgame00.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'forgame00'
          _view.forgame00.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'forgame00'
          _view.forgame00.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'forgame00'
          _view.forgame00.linkProperty("Visibility",  function() { return removegrid&&comboboxmode==2; } ); // HtmlView Page linking property 'Visibility' for element 'forgame00'
          _view.forgame00.setAction("OnPress", function(_data,_info) {
  // set color for all for gamemode 
  // for self color change
  if (colorVectors[elementinteracted]==colororiginal){ // press a new element
  colorVectors[elementinteracted] = "rgba(100,100,255,0.5)"; //change color
  numberofinteraction=numberofinteraction+1; //count +1
  alert("00+="+elementinteracted);
  //_view._update();
  }
  else { //change back color if unrequired by user
   colorVectors[elementinteracted] = colororiginal;
   numberofinteraction=numberofinteraction-1;
   alert("00-="+elementinteracted);
   //_view._update();
    }
  // set count for all for gamemode 
  if (elementinteractedmirrorquiz[elementinteracted]==1){
    elementinteractedmirrorquiz[elementinteracted]=0; // delete record itself
    }
    else{
  elementinteractedmirrorquiz[elementinteracted]=1; // record itself
  //elementinteractedmirrorquiz[(11-elementinteracted)]=1; // 1 for correct, 0 for no selected
  }
  //vertical ();
  horizontal ();
  //line45 () ;
  //linem45 ();
  elementinteracted=0; //set back to zero to prevent triggering again;

}); // HtmlView Page setting action 'OnPress' for element 'forgame00'
          _view.textSet.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("FillColor",  function() { return numbercolor; }, function(_v) { numbercolor = _v; } ); // HtmlView Page linking property 'FillColor' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return textpos; }, function(_v) { textpos = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.textSet.linkProperty("Visibility",  function() { return hint; }, function(_v) { hint = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textSet'
          _view.symmetry.linkProperty("SizeX",  function() { return mirrorsizex; }, function(_v) { mirrorsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'symmetry'
          _view.symmetry.linkProperty("X",  function() { return mirrorx; }, function(_v) { mirrorx = _v; } ); // HtmlView Page linking property 'X' for element 'symmetry'
          _view.symmetry.linkProperty("Y",  function() { return mirrory; }, function(_v) { mirrory = _v; } ); // HtmlView Page linking property 'Y' for element 'symmetry'
          _view.symmetry.linkProperty("SizeY",  function() { return mirrorsizey; }, function(_v) { mirrorsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'symmetry'
          _view.lettersselfdrawn.linkProperty("X",  function() { return xtext; }, function(_v) { xtext = _v; } ); // HtmlView Page linking property 'X' for element 'lettersselfdrawn'
          _view.lettersselfdrawn.linkProperty("Y",  function() { return ytext; }, function(_v) { ytext = _v; } ); // HtmlView Page linking property 'Y' for element 'lettersselfdrawn'
          _view.A2.linkProperty("Visibility",  function() { return letter=="A"; } ); // HtmlView Page linking property 'Visibility' for element 'A2'
          _view.A5.linkProperty("Points",  function() { return [[-5,0],[-3,5],[-2,5],[0,0],[-1,0],[-1.75,2],[-3.25,2],[-4,0],[-5,0],[-3,3,0],[-2,3],[-2.5,4]]; } ); // HtmlView Page linking property 'Points' for element 'A5'
          _view.B.linkProperty("Visibility",  function() { return letter=="B"; } ); // HtmlView Page linking property 'Visibility' for element 'B'
          _view.B2.linkProperty("Points",  function() { return [[-5,0],[-5,5],[-2,5]]; } ); // HtmlView Page linking property 'Points' for element 'B2'
          _view.text.linkProperty("FontSize",  function() { return fontsize; }, function(_v) { fontsize = _v; } ); // HtmlView Page linking property 'FontSize' for element 'text'
          _view.text.linkProperty("X",  function() { return xtext; }, function(_v) { xtext = _v; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return ytext; }, function(_v) { ytext = _v; } ); // HtmlView Page linking property 'Y' for element 'text'
          _view.text.linkProperty("Text",  function() { return letter; }, function(_v) { letter = _v; } ); // HtmlView Page linking property 'Text' for element 'text'
          _view.text.linkProperty("Visibility",  function() { return textshow; }, function(_v) { textshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text'
          _view.text.linkProperty("ScaleX",  function() { return myscale; }, function(_v) { myscale = _v; } ); // HtmlView Page linking property 'ScaleX' for element 'text'
          _view.lettersselfdrawn2.linkProperty("Transformation",  function() { return [scalextext,0,0,scaleytext,0,0]; } ); // HtmlView Page linking property 'Transformation' for element 'lettersselfdrawn2'
          _view.lettersselfdrawn2.linkProperty("X",  function() { return xtextmirror; }, function(_v) { xtextmirror = _v; } ); // HtmlView Page linking property 'X' for element 'lettersselfdrawn2'
          _view.lettersselfdrawn2.linkProperty("Y",  function() { return ytextmirror; }, function(_v) { ytextmirror = _v; } ); // HtmlView Page linking property 'Y' for element 'lettersselfdrawn2'
          _view.A22.linkProperty("Visibility",  function() { return letter=="A"; } ); // HtmlView Page linking property 'Visibility' for element 'A22'
          _view.A52.linkProperty("Points",  function() { return [[-5,0],[-3,5],[-2,5],[0,0],[-1,0],[-1.75,2],[-3.25,2],[-4,0],[-5,0],[-3,3,0],[-2,3],[-2.5,4]]; } ); // HtmlView Page linking property 'Points' for element 'A52'
          _view.B3.linkProperty("Visibility",  function() { return letter=="B"; } ); // HtmlView Page linking property 'Visibility' for element 'B3'
          _view.text22.linkProperty("Rotate",  function() { return rotate; }, function(_v) { rotate = _v; } ); // HtmlView Page linking property 'Rotate' for element 'text22'
          _view.text22.linkProperty("FontSize",  function() { return fontsize; }, function(_v) { fontsize = _v; } ); // HtmlView Page linking property 'FontSize' for element 'text22'
          _view.text22.linkProperty("X",  function() { return xtextmirror; }, function(_v) { xtextmirror = _v; } ); // HtmlView Page linking property 'X' for element 'text22'
          _view.text22.linkProperty("Y",  function() { return ytextmirror; }, function(_v) { ytextmirror = _v; } ); // HtmlView Page linking property 'Y' for element 'text22'
          _view.text22.linkProperty("Text",  function() { return letter; }, function(_v) { letter = _v; } ); // HtmlView Page linking property 'Text' for element 'text22'
          _view.text22.linkProperty("Visibility",  function() { return textshow; }, function(_v) { textshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text22'
          _view.text22.linkProperty("ScaleY",  function() { return scaleytext; }, function(_v) { scaleytext = _v; } ); // HtmlView Page linking property 'ScaleY' for element 'text22'
          _view.text22.linkProperty("ScaleX",  function() { return scalextext; }, function(_v) { scalextext = _v; } ); // HtmlView Page linking property 'ScaleX' for element 'text22'
          _view.centre2.linkProperty("X",  function() { return xtext; }, function(_v) { xtext = _v; } ); // HtmlView Page linking property 'X' for element 'centre2'
          _view.centre2.linkProperty("Y",  function() { return ytext; }, function(_v) { ytext = _v; } ); // HtmlView Page linking property 'Y' for element 'centre2'
          _view.centremirror.linkProperty("X",  function() { return xtextmirror; }, function(_v) { xtextmirror = _v; } ); // HtmlView Page linking property 'X' for element 'centremirror'
          _view.centremirror.linkProperty("Y",  function() { return ytextmirror; }, function(_v) { ytextmirror = _v; } ); // HtmlView Page linking property 'Y' for element 'centremirror'
          _view.freehanddraw2mustbeinroottowork.setAction("OnRelease", function(_data,_info) {
  _view.trail.newSegment();
  _view.trail90.newSegment(); // 90
  _view.trail00.newSegment(); // 00
  _view.trail45.newSegment(); // 45
  _view.trail_45.newSegment(); // -45
  memorycolor=memorycolor+1;
  cursorpress=false;

}); // HtmlView Page setting action 'OnRelease' for element 'freehanddraw2mustbeinroottowork'
          _view.freehanddraw2mustbeinroottowork.linkProperty("X",  function() { return xi; }, function(_v) { xi = _v; } ); // HtmlView Page linking property 'X' for element 'freehanddraw2mustbeinroottowork'
          _view.freehanddraw2mustbeinroottowork.linkProperty("Y",  function() { return yi; }, function(_v) { yi = _v; } ); // HtmlView Page linking property 'Y' for element 'freehanddraw2mustbeinroottowork'
          _view.freehanddraw2mustbeinroottowork.linkProperty("Visibility",  function() { return draw; }, function(_v) { draw = _v; } ); // HtmlView Page linking property 'Visibility' for element 'freehanddraw2mustbeinroottowork'
          _view.freehanddraw2mustbeinroottowork.setAction("OnPress", function(_data,_info) {
  cursorpress=true;

}); // HtmlView Page setting action 'OnPress' for element 'freehanddraw2mustbeinroottowork'
          _view.freehanddraw2mustbeinroottowork.setAction("OnDrag", function(_data,_info) {
  cursorpress=true;

}); // HtmlView Page setting action 'OnDrag' for element 'freehanddraw2mustbeinroottowork'
          _view.trail.linkProperty("Active",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return xi; }, function(_v) { xi = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("Visibility",  function() { return draw; }, function(_v) { draw = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return yi; }, function(_v) { yi = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.ninety.linkProperty("Visibility",  function() { return comboboxmode==1&&draw; } ); // HtmlView Page linking property 'Visibility' for element 'ninety'
          _view.trail90.linkProperty("Active",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Active' for element 'trail90'
          _view.trail90.linkProperty("Connected",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Connected' for element 'trail90'
          _view.trail90.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail90'
          _view.trail90.linkProperty("InputX",  function() { return -xi; } ); // HtmlView Page linking property 'InputX' for element 'trail90'
          _view.trail90.linkProperty("InputY",  function() { return yi; }, function(_v) { yi = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail90'
          _view.mirror902.linkProperty("X",  function() { return -xi; } ); // HtmlView Page linking property 'X' for element 'mirror902'
          _view.mirror902.linkProperty("Y",  function() { return yi; }, function(_v) { yi = _v; } ); // HtmlView Page linking property 'Y' for element 'mirror902'
          _view.zero.linkProperty("Visibility",  function() { return comboboxmode==2&&draw; } ); // HtmlView Page linking property 'Visibility' for element 'zero'
          _view.trail00.linkProperty("Active",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Active' for element 'trail00'
          _view.trail00.linkProperty("Connected",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Connected' for element 'trail00'
          _view.trail00.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail00'
          _view.trail00.linkProperty("InputX",  function() { return xi; }, function(_v) { xi = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail00'
          _view.trail00.linkProperty("InputY",  function() { return -yi; } ); // HtmlView Page linking property 'InputY' for element 'trail00'
          _view.mirror9022.linkProperty("X",  function() { return xi; }, function(_v) { xi = _v; } ); // HtmlView Page linking property 'X' for element 'mirror9022'
          _view.mirror9022.linkProperty("Y",  function() { return -yi; } ); // HtmlView Page linking property 'Y' for element 'mirror9022'
          _view.fortyfive.linkProperty("Visibility",  function() { return comboboxmode==3&&draw; } ); // HtmlView Page linking property 'Visibility' for element 'fortyfive'
          _view.trail45.linkProperty("Active",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Active' for element 'trail45'
          _view.trail45.linkProperty("Connected",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Connected' for element 'trail45'
          _view.trail45.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail45'
          _view.trail45.linkProperty("InputX",  function() { return yi; }, function(_v) { yi = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail45'
          _view.trail45.linkProperty("InputY",  function() { return xi; }, function(_v) { xi = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail45'
          _view.mirror9023.linkProperty("X",  function() { return yi; }, function(_v) { yi = _v; } ); // HtmlView Page linking property 'X' for element 'mirror9023'
          _view.mirror9023.linkProperty("Y",  function() { return xi; }, function(_v) { xi = _v; } ); // HtmlView Page linking property 'Y' for element 'mirror9023'
          _view._fortyfive.linkProperty("Visibility",  function() { return comboboxmode==4&&draw; } ); // HtmlView Page linking property 'Visibility' for element '_fortyfive'
          _view.trail_45.linkProperty("Active",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Active' for element 'trail_45'
          _view.trail_45.linkProperty("Connected",  function() { return cursorpress; }, function(_v) { cursorpress = _v; } ); // HtmlView Page linking property 'Connected' for element 'trail_45'
          _view.trail_45.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail_45'
          _view.trail_45.linkProperty("InputX",  function() { return -yi; } ); // HtmlView Page linking property 'InputX' for element 'trail_45'
          _view.trail_45.linkProperty("InputY",  function() { return -xi; } ); // HtmlView Page linking property 'InputY' for element 'trail_45'
          _view.mirror90232.linkProperty("X",  function() { return -yi; } ); // HtmlView Page linking property 'X' for element 'mirror90232'
          _view.mirror90232.linkProperty("Y",  function() { return -xi; } ); // HtmlView Page linking property 'Y' for element 'mirror90232'
          _view.freehanddraw22.setAction("OnRelease", function(_data,_info) {
  //_view.trail.newSegment();
  //_view.trail90.newSegment(); // 90
  //_view.trail00.newSegment(); // 00
  //_view.trail45.newSegment(); // 45
  //_view.trail_45.newSegment(); // -45
  //memorycolor=memorycolor+1;
  cursorpressline=false;

}); // HtmlView Page setting action 'OnRelease' for element 'freehanddraw22'
          _view.freehanddraw22.linkProperty("X",  function() { return xiline; }, function(_v) { xiline = _v; } ); // HtmlView Page linking property 'X' for element 'freehanddraw22'
          _view.freehanddraw22.linkProperty("Y",  function() { return yiline; }, function(_v) { yiline = _v; } ); // HtmlView Page linking property 'Y' for element 'freehanddraw22'
          _view.freehanddraw22.linkProperty("Visibility",  function() { return drawline; }, function(_v) { drawline = _v; } ); // HtmlView Page linking property 'Visibility' for element 'freehanddraw22'
          _view.freehanddraw22.setAction("OnPress", drawlineListener); // HtmlView Page setting action 'OnPress' for element 'freehanddraw22'
          _view.freehanddraw22.setAction("OnDrag", function(_data,_info) {
  cursorpressline=true;

}); // HtmlView Page setting action 'OnDrag' for element 'freehanddraw22'
          _view.shapeSetpoints.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSetpoints'
          _view.shapeSetpoints.linkProperty("X",  function() { return xilineset; }, function(_v) { xilineset = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSetpoints'
          _view.shapeSetpoints.linkProperty("Y",  function() { return yilineset; }, function(_v) { yilineset = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSetpoints'
          _view.shapeSetpoints.linkProperty("ElementInteracted",  function() { return elementtouched; }, function(_v) { elementtouched = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'shapeSetpoints'
          _view.segmentSet.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeX",  function() { return dxilineset; }, function(_v) { dxilineset = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSet'
          _view.segmentSet.linkProperty("X",  function() { return xilineset; }, function(_v) { xilineset = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet'
          _view.segmentSet.linkProperty("Y",  function() { return yilineset; }, function(_v) { yilineset = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeY",  function() { return dyilineset; }, function(_v) { dyilineset = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet'
          _view.ninety2.linkProperty("Visibility",  function() { return comboboxmode==1&&drawline; } ); // HtmlView Page linking property 'Visibility' for element 'ninety2'
          _view.segmentSet2.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("SizeX",  function() { return dxilineset90; }, function(_v) { dxilineset90 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("X",  function() { return xilineset90; }, function(_v) { xilineset90 = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("Y",  function() { return yilineset90; }, function(_v) { yilineset90 = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("SizeY",  function() { return dyilineset90; }, function(_v) { dyilineset90 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("ElementInteracted",  function() { return elementtouched; }, function(_v) { elementtouched = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'segmentSet2'
          _view.symmetrydraw90.setAction("OnRelease", function(_data,_info) {
  //_view.trail.newSegment();
  //_view.trail90.newSegment(); // 90
  //_view.trail00.newSegment(); // 00
  //_view.trail45.newSegment(); // 45
  //_view.trail_45.newSegment(); // -45
  //memorycolor=memorycolor+1;
  cursorpressline=false;

}); // HtmlView Page setting action 'OnRelease' for element 'symmetrydraw90'
          _view.symmetrydraw90.linkProperty("X",  function() { return -xiline; } ); // HtmlView Page linking property 'X' for element 'symmetrydraw90'
          _view.symmetrydraw90.linkProperty("Y",  function() { return yiline; }, function(_v) { yiline = _v; } ); // HtmlView Page linking property 'Y' for element 'symmetrydraw90'
          _view.symmetrydraw90.linkProperty("Visibility",  function() { return drawline; }, function(_v) { drawline = _v; } ); // HtmlView Page linking property 'Visibility' for element 'symmetrydraw90'
          _view.symmetrydraw90.setAction("OnDrag", function(_data,_info) {
  cursorpressline=true;

}); // HtmlView Page setting action 'OnDrag' for element 'symmetrydraw90'
          _view.shapeSetpoints2.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSetpoints2'
          _view.shapeSetpoints2.linkProperty("X",  function() { return xilineset90; }, function(_v) { xilineset90 = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSetpoints2'
          _view.shapeSetpoints2.linkProperty("Y",  function() { return yilineset90; }, function(_v) { yilineset90 = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSetpoints2'
          _view.shapeSetpoints2.linkProperty("ElementInteracted",  function() { return elementtouched; }, function(_v) { elementtouched = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'shapeSetpoints2'
          _view.zero2.linkProperty("Visibility",  function() { return comboboxmode==2&&drawline; } ); // HtmlView Page linking property 'Visibility' for element 'zero2'
          _view.segmentSet22.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet22'
          _view.segmentSet22.linkProperty("SizeX",  function() { return dxilineset00; }, function(_v) { dxilineset00 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSet22'
          _view.segmentSet22.linkProperty("X",  function() { return xilineset00; }, function(_v) { xilineset00 = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet22'
          _view.segmentSet22.linkProperty("Y",  function() { return yilineset00; }, function(_v) { yilineset00 = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet22'
          _view.segmentSet22.linkProperty("SizeY",  function() { return dyilineset00; }, function(_v) { dyilineset00 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet22'
          _view.symmetrydraw902.setAction("OnRelease", function(_data,_info) {
  //_view.trail.newSegment();
  //_view.trail90.newSegment(); // 90
  //_view.trail00.newSegment(); // 00
  //_view.trail45.newSegment(); // 45
  //_view.trail_45.newSegment(); // -45
  //memorycolor=memorycolor+1;
  cursorpressline=false;

}); // HtmlView Page setting action 'OnRelease' for element 'symmetrydraw902'
          _view.symmetrydraw902.linkProperty("X",  function() { return xiline; }, function(_v) { xiline = _v; } ); // HtmlView Page linking property 'X' for element 'symmetrydraw902'
          _view.symmetrydraw902.linkProperty("Y",  function() { return -yiline; } ); // HtmlView Page linking property 'Y' for element 'symmetrydraw902'
          _view.symmetrydraw902.linkProperty("Visibility",  function() { return drawline; }, function(_v) { drawline = _v; } ); // HtmlView Page linking property 'Visibility' for element 'symmetrydraw902'
          _view.symmetrydraw902.setAction("OnDrag", function(_data,_info) {
  cursorpressline=true;

}); // HtmlView Page setting action 'OnDrag' for element 'symmetrydraw902'
          _view.shapeSetpoints22.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSetpoints22'
          _view.shapeSetpoints22.linkProperty("X",  function() { return xilineset00; }, function(_v) { xilineset00 = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSetpoints22'
          _view.shapeSetpoints22.linkProperty("Y",  function() { return yilineset00; }, function(_v) { yilineset00 = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSetpoints22'
          _view.fortyfive2.linkProperty("Visibility",  function() { return comboboxmode==3&&drawline; } ); // HtmlView Page linking property 'Visibility' for element 'fortyfive2'
          _view.mirror90233.linkProperty("X",  function() { return yi; }, function(_v) { yi = _v; } ); // HtmlView Page linking property 'X' for element 'mirror90233'
          _view.mirror90233.linkProperty("Y",  function() { return xi; }, function(_v) { xi = _v; } ); // HtmlView Page linking property 'Y' for element 'mirror90233'
          _view.segmentSet222.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet222'
          _view.segmentSet222.linkProperty("SizeX",  function() { return dxilineset45; }, function(_v) { dxilineset45 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSet222'
          _view.segmentSet222.linkProperty("X",  function() { return xilineset45; }, function(_v) { xilineset45 = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet222'
          _view.segmentSet222.linkProperty("Y",  function() { return yilineset45; }, function(_v) { yilineset45 = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet222'
          _view.segmentSet222.linkProperty("SizeY",  function() { return dyilineset45; }, function(_v) { dyilineset45 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet222'
          _view.shapeSetpoints222.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSetpoints222'
          _view.shapeSetpoints222.linkProperty("X",  function() { return xilineset45; }, function(_v) { xilineset45 = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSetpoints222'
          _view.shapeSetpoints222.linkProperty("Y",  function() { return yilineset45; }, function(_v) { yilineset45 = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSetpoints222'
          _view._fortyfive2.linkProperty("Visibility",  function() { return comboboxmode==4&&drawline; } ); // HtmlView Page linking property 'Visibility' for element '_fortyfive2'
          _view.mirror902322.linkProperty("X",  function() { return -yi; } ); // HtmlView Page linking property 'X' for element 'mirror902322'
          _view.mirror902322.linkProperty("Y",  function() { return -xi; } ); // HtmlView Page linking property 'Y' for element 'mirror902322'
          _view.segmentSet2222.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSet2222'
          _view.segmentSet2222.linkProperty("SizeX",  function() { return dxilinesetn45; }, function(_v) { dxilinesetn45 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSet2222'
          _view.segmentSet2222.linkProperty("X",  function() { return xilinesetn45; }, function(_v) { xilinesetn45 = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSet2222'
          _view.segmentSet2222.linkProperty("Y",  function() { return yilinesetn45; }, function(_v) { yilinesetn45 = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSet2222'
          _view.segmentSet2222.linkProperty("SizeY",  function() { return dyilinesetn45; }, function(_v) { dyilinesetn45 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSet2222'
          _view.shapeSetpoints2222.linkProperty("NumberOfElements",  function() { return ncountline; }, function(_v) { ncountline = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSetpoints2222'
          _view.shapeSetpoints2222.linkProperty("X",  function() { return xilinesetn45; }, function(_v) { xilinesetn45 = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSetpoints2222'
          _view.shapeSetpoints2222.linkProperty("Y",  function() { return yilinesetn45; }, function(_v) { yilinesetn45 = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSetpoints2222'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function symmetryblockgridonly_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = symmetryblockgridonly_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function symmetryblockgridonly_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'fullscreen'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vectorcompo", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vectorcompo'
      .setProperty("Text","Create a Symmetric Figure!") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vectorcompo'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox4unused", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox4unused'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'comboBox4unused'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select the orientation of line of symmetry, for example horizontal, vertical, 45 degrees or -45 degrees") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox2'
      .setProperty("Tooltip","select the option to explore or create symmetric figure") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox2'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"quizline", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'quizline'
      .setProperty("Text","quiz line") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'quizline'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'quizline'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"quiz", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'quiz'
      .setProperty("Tooltip","select this to create sets of symmetric figures and check if it is correct") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'quiz'
      .setProperty("Text","quiz block") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'quiz'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox3", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox3'
      .setProperty("Tooltip","select user_defined rays to show") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox3'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'comboBox3'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBoxletter", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBoxletter'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'comboBoxletter'
      ;

    _view._addElement(EJSS_INTERFACE.button,"checkblocknone", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'checkblocknone'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/caution.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'checkblocknone'
      .setProperty("Text","check") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'checkblocknone'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'checkblocknone'
      ;

    _view._addElement(EJSS_INTERFACE.button,"check90", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'check90'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/caution.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'check90'
      .setProperty("Text","🎯 90") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'check90'
      ;

    _view._addElement(EJSS_INTERFACE.button,"check00", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'check00'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/caution.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'check00'
      .setProperty("Text","🎯 00") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'check00'
      ;

    _view._addElement(EJSS_INTERFACE.button,"check45", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'check45'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/caution.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'check45'
      .setProperty("Text","🎯 45") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'check45'
      ;

    _view._addElement(EJSS_INTERFACE.button,"checkn45", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'checkn45'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/caution.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'checkn45'
      .setProperty("Text","🎯-45") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'checkn45'
      ;

    _view._addElement(EJSS_INTERFACE.button,"check90line", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'check90line'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/caution.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'check90line'
      .setProperty("Text","🎯 90line not working yet") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'check90line'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("EnabledZooming",false) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("StopEventPropagation",false) // EJsS HtmlView.HtmlView Page: setting property 'StopEventPropagation' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"fieldpoint2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldpoint2'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'fieldpoint2'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'fieldpoint2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'fieldpoint2'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'fieldpoint2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'fieldpoint2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"gridgame", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gridgame'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"forgame_45", _view.gridgame) // EJsS HtmlView.HtmlView Page: declaration of element 'forgame_45'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'forgame_45'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'forgame_45'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'forgame_45'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'forgame_45'
      .setProperty("SizeX",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'forgame_45'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'forgame_45'
      .setProperty("SizeY",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'forgame_45'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'forgame_45'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'forgame_45'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"forgame45", _view.gridgame) // EJsS HtmlView.HtmlView Page: declaration of element 'forgame45'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'forgame45'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'forgame45'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'forgame45'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'forgame45'
      .setProperty("SizeX",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'forgame45'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'forgame45'
      .setProperty("SizeY",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'forgame45'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'forgame45'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'forgame45'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"forgame90", _view.gridgame) // EJsS HtmlView.HtmlView Page: declaration of element 'forgame90'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'forgame90'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'forgame90'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'forgame90'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'forgame90'
      .setProperty("SizeX",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'forgame90'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'forgame90'
      .setProperty("SizeY",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'forgame90'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'forgame90'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'forgame90'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"forgame00", _view.gridgame) // EJsS HtmlView.HtmlView Page: declaration of element 'forgame00'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'forgame00'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'forgame00'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'forgame00'
      .setProperty("CornerRadius",20) // EJsS HtmlView.HtmlView Page: setting property 'CornerRadius' for element 'forgame00'
      .setProperty("SizeX",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'forgame00'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'forgame00'
      .setProperty("SizeY",0.95) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'forgame00'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'forgame00'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'forgame00'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet'
      .setProperty("LineColor","rgba(1,2,3,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"symmetry", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetry'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'symmetry'
      .setProperty("MarkStart","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'symmetry'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'symmetry'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'symmetry'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"lettersselfdrawn", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lettersselfdrawn'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'lettersselfdrawn'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"A2", _view.lettersselfdrawn) // EJsS HtmlView.HtmlView Page: declaration of element 'A2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"A5", _view.A2) // EJsS HtmlView.HtmlView Page: declaration of element 'A5'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'A5'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'A5'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'A5'
      .setProperty("X",2.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'A5'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'A5'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"B", _view.lettersselfdrawn) // EJsS HtmlView.HtmlView Page: declaration of element 'B'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"B2", _view.B) // EJsS HtmlView.HtmlView Page: declaration of element 'B2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'B2'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'B2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'B2'
      .setProperty("X",2.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'B2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'B2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("FontFamily","Arial, Helvetica, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'FontFamily' for element 'text'
      .setProperty("Sensitivity",800) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'text'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"textletter", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textletter'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"lettersselfdrawn2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lettersselfdrawn2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'lettersselfdrawn2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"A22", _view.lettersselfdrawn2) // EJsS HtmlView.HtmlView Page: declaration of element 'A22'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"A52", _view.A22) // EJsS HtmlView.HtmlView Page: declaration of element 'A52'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'A52'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'A52'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'A52'
      .setProperty("X",2.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'A52'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'A52'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"B3", _view.lettersselfdrawn2) // EJsS HtmlView.HtmlView Page: declaration of element 'B3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text22", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text22'
      .setProperty("FontFamily","Arial, Helvetica, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'FontFamily' for element 'text22'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"centre2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centre2'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'centre2'
      .setProperty("Transformation",[-1,0,0,-1,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Transformation' for element 'centre2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'centre2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"centremirror", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centremirror'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'centremirror'
      .setProperty("Transformation",[1,0,0,1,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Transformation' for element 'centremirror'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'centremirror'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"freehanddraw2mustbeinroottowork", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'freehanddraw2mustbeinroottowork'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'freehanddraw2mustbeinroottowork'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'freehanddraw2mustbeinroottowork'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'freehanddraw2mustbeinroottowork'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'freehanddraw2mustbeinroottowork'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'freehanddraw2mustbeinroottowork'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'freehanddraw2mustbeinroottowork'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"freehanddrawreal", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'freehanddrawreal'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"freehanddraw", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'freehanddraw'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ninety", _view.freehanddraw) // EJsS HtmlView.HtmlView Page: declaration of element 'ninety'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail90", _view.ninety) // EJsS HtmlView.HtmlView Page: declaration of element 'trail90'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail90'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail90'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mirror902", _view.ninety) // EJsS HtmlView.HtmlView Page: declaration of element 'mirror902'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mirror902'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mirror902'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mirror902'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mirror902'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"zero", _view.freehanddraw) // EJsS HtmlView.HtmlView Page: declaration of element 'zero'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail00", _view.zero) // EJsS HtmlView.HtmlView Page: declaration of element 'trail00'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail00'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail00'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mirror9022", _view.zero) // EJsS HtmlView.HtmlView Page: declaration of element 'mirror9022'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mirror9022'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mirror9022'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mirror9022'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mirror9022'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"fortyfive", _view.freehanddraw) // EJsS HtmlView.HtmlView Page: declaration of element 'fortyfive'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail45", _view.fortyfive) // EJsS HtmlView.HtmlView Page: declaration of element 'trail45'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail45'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail45'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mirror9023", _view.fortyfive) // EJsS HtmlView.HtmlView Page: declaration of element 'mirror9023'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mirror9023'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mirror9023'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mirror9023'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mirror9023'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"_fortyfive", _view.freehanddraw) // EJsS HtmlView.HtmlView Page: declaration of element '_fortyfive'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail_45", _view._fortyfive) // EJsS HtmlView.HtmlView Page: declaration of element 'trail_45'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail_45'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail_45'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mirror90232", _view._fortyfive) // EJsS HtmlView.HtmlView Page: declaration of element 'mirror90232'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mirror90232'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mirror90232'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mirror90232'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mirror90232'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"drawstraightlinepoints", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawstraightlinepoints'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"freehanddraw22", _view.drawstraightlinepoints) // EJsS HtmlView.HtmlView Page: declaration of element 'freehanddraw22'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'freehanddraw22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'freehanddraw22'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'freehanddraw22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'freehanddraw22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'freehanddraw22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'freehanddraw22'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSetpoints", _view.drawstraightlinepoints) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSetpoints'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSetpoints'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSetpoints'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSetpoints'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeSetpoints'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSetpoints'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet", _view.drawstraightlinepoints) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSet'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSet'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'segmentSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"drawstraightline", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawstraightline'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ninety2", _view.drawstraightline) // EJsS HtmlView.HtmlView Page: declaration of element 'ninety2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet2", _view.ninety2) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSet2'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSet2'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'segmentSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"symmetrydraw90", _view.ninety2) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetrydraw90'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'symmetrydraw90'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetrydraw90'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'symmetrydraw90'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetrydraw90'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'symmetrydraw90'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetrydraw90'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSetpoints2", _view.ninety2) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSetpoints2'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSetpoints2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSetpoints2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSetpoints2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeSetpoints2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSetpoints2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"zero2", _view.drawstraightline) // EJsS HtmlView.HtmlView Page: declaration of element 'zero2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet22", _view.zero2) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet22'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSet22'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSet22'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'segmentSet22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"symmetrydraw902", _view.zero2) // EJsS HtmlView.HtmlView Page: declaration of element 'symmetrydraw902'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'symmetrydraw902'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'symmetrydraw902'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'symmetrydraw902'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'symmetrydraw902'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'symmetrydraw902'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'symmetrydraw902'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSetpoints22", _view.zero2) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSetpoints22'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSetpoints22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSetpoints22'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSetpoints22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeSetpoints22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSetpoints22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"fortyfive2", _view.drawstraightline) // EJsS HtmlView.HtmlView Page: declaration of element 'fortyfive2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mirror90233", _view.fortyfive2) // EJsS HtmlView.HtmlView Page: declaration of element 'mirror90233'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mirror90233'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mirror90233'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mirror90233'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mirror90233'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet222", _view.fortyfive2) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet222'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSet222'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSet222'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'segmentSet222'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSetpoints222", _view.fortyfive2) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSetpoints222'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSetpoints222'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSetpoints222'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSetpoints222'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeSetpoints222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSetpoints222'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"_fortyfive2", _view.drawstraightline) // EJsS HtmlView.HtmlView Page: declaration of element '_fortyfive2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mirror902322", _view._fortyfive2) // EJsS HtmlView.HtmlView Page: declaration of element 'mirror902322'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mirror902322'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mirror902322'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mirror902322'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mirror902322'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet2222", _view._fortyfive2) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSet2222'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSet2222'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSet2222'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'segmentSet2222'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSetpoints2222", _view._fortyfive2) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSetpoints2222'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSetpoints2222'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSetpoints2222'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSetpoints2222'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeSetpoints2222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSetpoints2222'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Symmetry Blocks Primary Math Interactives<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_symmetryblock/symmetryblock/Screen Shot 2018-07-31 at 2.46.52 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_symmetryblock/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_symmetryblock/01authorPacoEsquembre2011.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_symmetryblock/01authorFelix_J_Garcia_Clemente.png" />
 weelookang@gmail.com; Francisco Esquembre; Felix J. Garcia Clemente
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com; Francisco Esquembre; Felix J. Garcia Clemente. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new symmetryblockgridonly("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_symmetryblock/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
