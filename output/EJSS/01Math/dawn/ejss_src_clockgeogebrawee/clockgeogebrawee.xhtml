<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Clock Teaching Model</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_clockgeogebrawee/Clock/ttf_fonts.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function clockgeogebrawee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var zero; // EjsS Model.Variables.Var Table.zero
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var range; // EjsS Model.Variables.Var Table.range
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var sizex2; // EjsS Model.Variables.Var Table.sizex2
  var sizey2; // EjsS Model.Variables.Var Table.sizey2
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var pi2; // EjsS Model.Variables.Var Table.pi2
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var angletext; // EjsS Model.Variables.Var Table.angletext
  var ctahminusctam; // EjsS Model.Variables.Var Table.ctahminusctam
  var angleshow; // EjsS Model.Variables.Var Table.angleshow

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Width; // EjsS Model.Variables.layout.Width
  var iOS; // EjsS Model.Variables.layout.iOS
  var Android; // EjsS Model.Variables.layout.Android
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var m; // EjsS Model.Variables.simplespring.m
  var k; // EjsS Model.Variables.simplespring.k
  var l; // EjsS Model.Variables.simplespring.l
  var vx; // EjsS Model.Variables.simplespring.vx
  var vxs; // EjsS Model.Variables.simplespring.vxs
  var vxstored; // EjsS Model.Variables.simplespring.vxstored
  var t; // EjsS Model.Variables.simplespring.t
  var tstore; // EjsS Model.Variables.simplespring.tstore
  var tcst; // EjsS Model.Variables.simplespring.tcst
  var dt; // EjsS Model.Variables.simplespring.dt
  var f; // EjsS Model.Variables.simplespring.f
  var nt; // EjsS Model.Variables.simplespring.nt
  var counterA; // EjsS Model.Variables.simplespring.counterA
  var counterB; // EjsS Model.Variables.simplespring.counterB
  var pointB; // EjsS Model.Variables.simplespring.pointB
  var arraypointB; // EjsS Model.Variables.simplespring.arraypointB
  var tpointB; // EjsS Model.Variables.simplespring.tpointB
  var tarraypointB; // EjsS Model.Variables.simplespring.tarraypointB
  var pointA; // EjsS Model.Variables.simplespring.pointA
  var tpointA; // EjsS Model.Variables.simplespring.tpointA
  var arraypointA; // EjsS Model.Variables.simplespring.arraypointA
  var tarraypointA; // EjsS Model.Variables.simplespring.tarraypointA
  var textA; // EjsS Model.Variables.simplespring.textA
  var textB; // EjsS Model.Variables.simplespring.textB

  var selectedmodel; // EjsS Model.Variables.functionY.selectedmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var xmodel; // EjsS Model.Variables.functionY.xmodel
  var showmodel; // EjsS Model.Variables.functionY.showmodel


  var D; // EjsS Model.Variables.basic.D
  var D2; // EjsS Model.Variables.basic.D2
  var R; // EjsS Model.Variables.basic.R
  var ds; // EjsS Model.Variables.basic.ds
  var n; // EjsS Model.Variables.basic.n
  var n2; // EjsS Model.Variables.basic.n2
  var x; // EjsS Model.Variables.basic.x
  var y; // EjsS Model.Variables.basic.y
  var x1324hr; // EjsS Model.Variables.basic.x1324hr
  var y1324hr; // EjsS Model.Variables.basic.y1324hr
  var coloritick; // EjsS Model.Variables.basic.coloritick
  var widthitick; // EjsS Model.Variables.basic.widthitick
  var minfaceshow; // EjsS Model.Variables.basic.minfaceshow
  var msg; // EjsS Model.Variables.basic.msg
  var msg1324hr; // EjsS Model.Variables.basic.msg1324hr
  var msg60; // EjsS Model.Variables.basic.msg60
  var cs; // EjsS Model.Variables.basic.cs
  var Rm; // EjsS Model.Variables.basic.Rm
  var Rh; // EjsS Model.Variables.basic.Rh
  var Rs; // EjsS Model.Variables.basic.Rs
  var xs; // EjsS Model.Variables.basic.xs
  var ys; // EjsS Model.Variables.basic.ys
  var dxs; // EjsS Model.Variables.basic.dxs
  var dys; // EjsS Model.Variables.basic.dys

  var show1324; // EjsS Model.Variables.clock.show1324
  var elementinteracted; // EjsS Model.Variables.clock.elementinteracted
  var detect; // EjsS Model.Variables.clock.detect
  var T; // EjsS Model.Variables.clock.T
  var vs; // EjsS Model.Variables.clock.vs
  var vm; // EjsS Model.Variables.clock.vm
  var vmrandom; // EjsS Model.Variables.clock.vmrandom
  var vmtest; // EjsS Model.Variables.clock.vmtest
  var vh; // EjsS Model.Variables.clock.vh
  var vhrandom; // EjsS Model.Variables.clock.vhrandom
  var vh12text; // EjsS Model.Variables.clock.vh12text
  var vhs; // EjsS Model.Variables.clock.vhs
  var vms; // EjsS Model.Variables.clock.vms
  var vss; // EjsS Model.Variables.clock.vss
  var sx; // EjsS Model.Variables.clock.sx
  var sy; // EjsS Model.Variables.clock.sy
  var mx; // EjsS Model.Variables.clock.mx
  var my; // EjsS Model.Variables.clock.my
  var hx; // EjsS Model.Variables.clock.hx
  var hy; // EjsS Model.Variables.clock.hy
  var twofourhourformat; // EjsS Model.Variables.clock.twofourhourformat
  var twofourhourformatb; // EjsS Model.Variables.clock.twofourhourformatb
  var cta; // EjsS Model.Variables.clock.cta
  var ctam; // EjsS Model.Variables.clock.ctam
  var ctah; // EjsS Model.Variables.clock.ctah
  var digitalAMPMx; // EjsS Model.Variables.clock.digitalAMPMx
  var digitalAMPMy; // EjsS Model.Variables.clock.digitalAMPMy

  var wordhintshow; // EjsS Model.Variables.words.wordhintshow
  var secondhandshow; // EjsS Model.Variables.words.secondhandshow
  var minutehandshow; // EjsS Model.Variables.words.minutehandshow
  var daynightshow; // EjsS Model.Variables.words.daynightshow
  var digitalshow; // EjsS Model.Variables.words.digitalshow
  var ampmtext; // EjsS Model.Variables.words.ampmtext
  var digitalshow2; // EjsS Model.Variables.words.digitalshow2
  var myFont1; // EjsS Model.Variables.words.myFont1
  var myFont; // EjsS Model.Variables.words.myFont
  var digitalx; // EjsS Model.Variables.words.digitalx
  var digitaly; // EjsS Model.Variables.words.digitaly
  var digitalgroupx; // EjsS Model.Variables.words.digitalgroupx
  var digitalgroupy; // EjsS Model.Variables.words.digitalgroupy
  var teachingmode; // EjsS Model.Variables.words.teachingmode
  var wordsshow; // EjsS Model.Variables.words.wordsshow
  var wordhour; // EjsS Model.Variables.words.wordhour
  var wordhour1; // EjsS Model.Variables.words.wordhour1
  var wordmin; // EjsS Model.Variables.words.wordmin
  var words; // EjsS Model.Variables.words.words
  var test; // EjsS Model.Variables.words.test
  var wordsx; // EjsS Model.Variables.words.wordsx
  var wordsy; // EjsS Model.Variables.words.wordsy

  var mIOSkind; // EjsS Model.Variables.mobile.mIOSkind

  var questionnumber; // EjsS Model.Variables.check.questionnumber
  var score; // EjsS Model.Variables.check.score
  var counter; // EjsS Model.Variables.check.counter
  var showAnswerFlag; // EjsS Model.Variables.check.showAnswerFlag
  var K1fcorrect; // EjsS Model.Variables.check.K1fcorrect
  var l_enterK1f; // EjsS Model.Variables.check.l_enterK1f
  var K1fcorrectbackground; // EjsS Model.Variables.check.K1fcorrectbackground
  var enterK1f; // EjsS Model.Variables.check.enterK1f
  var l_answer; // EjsS Model.Variables.check.l_answer
  var l_question; // EjsS Model.Variables.check.l_question
  var angleinput; // EjsS Model.Variables.check.angleinput
  var showangleinput; // EjsS Model.Variables.check.showangleinput

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      zero : zero,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      range : range,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      sizex2 : sizex2,
      sizey2 : sizey2,
      selected : selected,
      text : text,
      pi : pi,
      pi2 : pi2,
      y1 : y1,
      ysize : ysize,
      angletext : angletext,
      ctahminusctam : ctahminusctam,
      angleshow : angleshow,
      isAndroid : isAndroid,
      Width : Width,
      iOS : iOS,
      Android : Android,
      iPad : iPad,
      iPhone : iPhone,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      m : m,
      k : k,
      l : l,
      vx : vx,
      vxs : vxs,
      vxstored : vxstored,
      t : t,
      tstore : tstore,
      tcst : tcst,
      dt : dt,
      f : f,
      nt : nt,
      counterA : counterA,
      counterB : counterB,
      pointB : pointB,
      arraypointB : arraypointB,
      tpointB : tpointB,
      tarraypointB : tarraypointB,
      pointA : pointA,
      tpointA : tpointA,
      arraypointA : arraypointA,
      tarraypointA : tarraypointA,
      textA : textA,
      textB : textB,
      selectedmodel : selectedmodel,
      functionY : functionY,
      xmodel : xmodel,
      showmodel : showmodel,
      D : D,
      D2 : D2,
      R : R,
      ds : ds,
      n : n,
      n2 : n2,
      x : x,
      y : y,
      x1324hr : x1324hr,
      y1324hr : y1324hr,
      coloritick : coloritick,
      widthitick : widthitick,
      minfaceshow : minfaceshow,
      msg : msg,
      msg1324hr : msg1324hr,
      msg60 : msg60,
      cs : cs,
      Rm : Rm,
      Rh : Rh,
      Rs : Rs,
      xs : xs,
      ys : ys,
      dxs : dxs,
      dys : dys,
      show1324 : show1324,
      elementinteracted : elementinteracted,
      detect : detect,
      T : T,
      vs : vs,
      vm : vm,
      vmrandom : vmrandom,
      vmtest : vmtest,
      vh : vh,
      vhrandom : vhrandom,
      vh12text : vh12text,
      vhs : vhs,
      vms : vms,
      vss : vss,
      sx : sx,
      sy : sy,
      mx : mx,
      my : my,
      hx : hx,
      hy : hy,
      twofourhourformat : twofourhourformat,
      twofourhourformatb : twofourhourformatb,
      cta : cta,
      ctam : ctam,
      ctah : ctah,
      digitalAMPMx : digitalAMPMx,
      digitalAMPMy : digitalAMPMy,
      wordhintshow : wordhintshow,
      secondhandshow : secondhandshow,
      minutehandshow : minutehandshow,
      daynightshow : daynightshow,
      digitalshow : digitalshow,
      ampmtext : ampmtext,
      digitalshow2 : digitalshow2,
      myFont1 : myFont1,
      myFont : myFont,
      digitalx : digitalx,
      digitaly : digitaly,
      digitalgroupx : digitalgroupx,
      digitalgroupy : digitalgroupy,
      teachingmode : teachingmode,
      wordsshow : wordsshow,
      wordhour : wordhour,
      wordhour1 : wordhour1,
      wordmin : wordmin,
      words : words,
      test : test,
      wordsx : wordsx,
      wordsy : wordsy,
      mIOSkind : mIOSkind,
      questionnumber : questionnumber,
      score : score,
      counter : counter,
      showAnswerFlag : showAnswerFlag,
      K1fcorrect : K1fcorrect,
      l_enterK1f : l_enterK1f,
      K1fcorrectbackground : K1fcorrectbackground,
      enterK1f : enterK1f,
      l_answer : l_answer,
      l_question : l_question,
      angleinput : angleinput,
      showangleinput : showangleinput
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.zero != "undefined") zero = json.zero;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.sizex2 != "undefined") sizex2 = json.sizex2;
    if(typeof json.sizey2 != "undefined") sizey2 = json.sizey2;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.pi2 != "undefined") pi2 = json.pi2;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.angletext != "undefined") angletext = json.angletext;
    if(typeof json.ctahminusctam != "undefined") ctahminusctam = json.ctahminusctam;
    if(typeof json.angleshow != "undefined") angleshow = json.angleshow;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vxs != "undefined") vxs = json.vxs;
    if(typeof json.vxstored != "undefined") vxstored = json.vxstored;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.tstore != "undefined") tstore = json.tstore;
    if(typeof json.tcst != "undefined") tcst = json.tcst;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.nt != "undefined") nt = json.nt;
    if(typeof json.counterA != "undefined") counterA = json.counterA;
    if(typeof json.counterB != "undefined") counterB = json.counterB;
    if(typeof json.pointB != "undefined") pointB = json.pointB;
    if(typeof json.arraypointB != "undefined") arraypointB = json.arraypointB;
    if(typeof json.tpointB != "undefined") tpointB = json.tpointB;
    if(typeof json.tarraypointB != "undefined") tarraypointB = json.tarraypointB;
    if(typeof json.pointA != "undefined") pointA = json.pointA;
    if(typeof json.tpointA != "undefined") tpointA = json.tpointA;
    if(typeof json.arraypointA != "undefined") arraypointA = json.arraypointA;
    if(typeof json.tarraypointA != "undefined") tarraypointA = json.tarraypointA;
    if(typeof json.textA != "undefined") textA = json.textA;
    if(typeof json.textB != "undefined") textB = json.textB;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.D2 != "undefined") D2 = json.D2;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.ds != "undefined") ds = json.ds;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.n2 != "undefined") n2 = json.n2;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.x1324hr != "undefined") x1324hr = json.x1324hr;
    if(typeof json.y1324hr != "undefined") y1324hr = json.y1324hr;
    if(typeof json.coloritick != "undefined") coloritick = json.coloritick;
    if(typeof json.widthitick != "undefined") widthitick = json.widthitick;
    if(typeof json.minfaceshow != "undefined") minfaceshow = json.minfaceshow;
    if(typeof json.msg != "undefined") msg = json.msg;
    if(typeof json.msg1324hr != "undefined") msg1324hr = json.msg1324hr;
    if(typeof json.msg60 != "undefined") msg60 = json.msg60;
    if(typeof json.cs != "undefined") cs = json.cs;
    if(typeof json.Rm != "undefined") Rm = json.Rm;
    if(typeof json.Rh != "undefined") Rh = json.Rh;
    if(typeof json.Rs != "undefined") Rs = json.Rs;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.dxs != "undefined") dxs = json.dxs;
    if(typeof json.dys != "undefined") dys = json.dys;
    if(typeof json.show1324 != "undefined") show1324 = json.show1324;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.detect != "undefined") detect = json.detect;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.vs != "undefined") vs = json.vs;
    if(typeof json.vm != "undefined") vm = json.vm;
    if(typeof json.vmrandom != "undefined") vmrandom = json.vmrandom;
    if(typeof json.vmtest != "undefined") vmtest = json.vmtest;
    if(typeof json.vh != "undefined") vh = json.vh;
    if(typeof json.vhrandom != "undefined") vhrandom = json.vhrandom;
    if(typeof json.vh12text != "undefined") vh12text = json.vh12text;
    if(typeof json.vhs != "undefined") vhs = json.vhs;
    if(typeof json.vms != "undefined") vms = json.vms;
    if(typeof json.vss != "undefined") vss = json.vss;
    if(typeof json.sx != "undefined") sx = json.sx;
    if(typeof json.sy != "undefined") sy = json.sy;
    if(typeof json.mx != "undefined") mx = json.mx;
    if(typeof json.my != "undefined") my = json.my;
    if(typeof json.hx != "undefined") hx = json.hx;
    if(typeof json.hy != "undefined") hy = json.hy;
    if(typeof json.twofourhourformat != "undefined") twofourhourformat = json.twofourhourformat;
    if(typeof json.twofourhourformatb != "undefined") twofourhourformatb = json.twofourhourformatb;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.ctam != "undefined") ctam = json.ctam;
    if(typeof json.ctah != "undefined") ctah = json.ctah;
    if(typeof json.digitalAMPMx != "undefined") digitalAMPMx = json.digitalAMPMx;
    if(typeof json.digitalAMPMy != "undefined") digitalAMPMy = json.digitalAMPMy;
    if(typeof json.wordhintshow != "undefined") wordhintshow = json.wordhintshow;
    if(typeof json.secondhandshow != "undefined") secondhandshow = json.secondhandshow;
    if(typeof json.minutehandshow != "undefined") minutehandshow = json.minutehandshow;
    if(typeof json.daynightshow != "undefined") daynightshow = json.daynightshow;
    if(typeof json.digitalshow != "undefined") digitalshow = json.digitalshow;
    if(typeof json.ampmtext != "undefined") ampmtext = json.ampmtext;
    if(typeof json.digitalshow2 != "undefined") digitalshow2 = json.digitalshow2;
    if(typeof json.myFont1 != "undefined") myFont1 = json.myFont1;
    if(typeof json.myFont != "undefined") myFont = json.myFont;
    if(typeof json.digitalx != "undefined") digitalx = json.digitalx;
    if(typeof json.digitaly != "undefined") digitaly = json.digitaly;
    if(typeof json.digitalgroupx != "undefined") digitalgroupx = json.digitalgroupx;
    if(typeof json.digitalgroupy != "undefined") digitalgroupy = json.digitalgroupy;
    if(typeof json.teachingmode != "undefined") teachingmode = json.teachingmode;
    if(typeof json.wordsshow != "undefined") wordsshow = json.wordsshow;
    if(typeof json.wordhour != "undefined") wordhour = json.wordhour;
    if(typeof json.wordhour1 != "undefined") wordhour1 = json.wordhour1;
    if(typeof json.wordmin != "undefined") wordmin = json.wordmin;
    if(typeof json.words != "undefined") words = json.words;
    if(typeof json.test != "undefined") test = json.test;
    if(typeof json.wordsx != "undefined") wordsx = json.wordsx;
    if(typeof json.wordsy != "undefined") wordsy = json.wordsy;
    if(typeof json.mIOSkind != "undefined") mIOSkind = json.mIOSkind;
    if(typeof json.questionnumber != "undefined") questionnumber = json.questionnumber;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.showAnswerFlag != "undefined") showAnswerFlag = json.showAnswerFlag;
    if(typeof json.K1fcorrect != "undefined") K1fcorrect = json.K1fcorrect;
    if(typeof json.l_enterK1f != "undefined") l_enterK1f = json.l_enterK1f;
    if(typeof json.K1fcorrectbackground != "undefined") K1fcorrectbackground = json.K1fcorrectbackground;
    if(typeof json.enterK1f != "undefined") enterK1f = json.enterK1f;
    if(typeof json.l_answer != "undefined") l_answer = json.l_answer;
    if(typeof json.l_question != "undefined") l_question = json.l_question;
    if(typeof json.angleinput != "undefined") angleinput = json.angleinput;
    if(typeof json.showangleinput != "undefined") showangleinput = json.showangleinput;
  };

  _model._inputAndPublicParameters = ["zero",  "xmin",  "xmax",  "ymin",  "ymax",  "range",  "rangex",  "rangey",  "sizex",  "sizey",  "sizex2",  "sizey2",  "selected",  "text",  "pi",  "pi2",  "y1",  "ysize",  "angletext",  "ctahminusctam",  "angleshow",  "isAndroid",  "Width",  "iOS",  "Android",  "iPad",  "iPhone",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "m",  "k",  "l",  "vx",  "vxs",  "vxstored",  "t",  "tstore",  "tcst",  "dt",  "f",  "nt",  "counterA",  "counterB",  "pointB",  "arraypointB",  "tpointB",  "tarraypointB",  "pointA",  "tpointA",  "arraypointA",  "tarraypointA",  "textA",  "textB",  "selectedmodel",  "functionY",  "xmodel",  "showmodel",  "D",  "D2",  "R",  "ds",  "n",  "n2",  "x",  "y",  "x1324hr",  "y1324hr",  "coloritick",  "widthitick",  "minfaceshow",  "msg",  "msg1324hr",  "msg60",  "cs",  "Rm",  "Rh",  "Rs",  "xs",  "ys",  "dxs",  "dys",  "show1324",  "elementinteracted",  "detect",  "T",  "vs",  "vm",  "vmrandom",  "vmtest",  "vh",  "vhrandom",  "vh12text",  "vhs",  "vms",  "vss",  "sx",  "sy",  "mx",  "my",  "hx",  "hy",  "twofourhourformat",  "twofourhourformatb",  "cta",  "ctam",  "ctah",  "digitalAMPMx",  "digitalAMPMy",  "wordhintshow",  "secondhandshow",  "minutehandshow",  "daynightshow",  "digitalshow",  "ampmtext",  "digitalshow2",  "myFont1",  "myFont",  "digitalx",  "digitaly",  "digitalgroupx",  "digitalgroupy",  "teachingmode",  "wordsshow",  "wordhour",  "wordhour1",  "wordmin",  "words",  "test",  "wordsx",  "wordsy",  "mIOSkind",  "questionnumber",  "score",  "counter",  "showAnswerFlag",  "K1fcorrect",  "l_enterK1f",  "K1fcorrectbackground",  "enterK1f",  "l_answer",  "l_question",  "angleinput",  "showangleinput"]; 

  _model._outputAndPublicParameters = ["zero",  "xmin",  "xmax",  "ymin",  "ymax",  "range",  "rangex",  "rangey",  "sizex",  "sizey",  "sizex2",  "sizey2",  "selected",  "text",  "pi",  "pi2",  "y1",  "ysize",  "angletext",  "ctahminusctam",  "angleshow",  "isAndroid",  "Width",  "iOS",  "Android",  "iPad",  "iPhone",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "m",  "k",  "l",  "vx",  "vxs",  "vxstored",  "t",  "tstore",  "tcst",  "dt",  "f",  "nt",  "counterA",  "counterB",  "pointB",  "arraypointB",  "tpointB",  "tarraypointB",  "pointA",  "tpointA",  "arraypointA",  "tarraypointA",  "textA",  "textB",  "selectedmodel",  "functionY",  "xmodel",  "showmodel",  "D",  "D2",  "R",  "ds",  "n",  "n2",  "x",  "y",  "x1324hr",  "y1324hr",  "coloritick",  "widthitick",  "minfaceshow",  "msg",  "msg1324hr",  "msg60",  "cs",  "Rm",  "Rh",  "Rs",  "xs",  "ys",  "dxs",  "dys",  "show1324",  "elementinteracted",  "detect",  "T",  "vs",  "vm",  "vmrandom",  "vmtest",  "vh",  "vhrandom",  "vh12text",  "vhs",  "vms",  "vss",  "sx",  "sy",  "mx",  "my",  "hx",  "hy",  "twofourhourformat",  "twofourhourformatb",  "cta",  "ctam",  "ctah",  "digitalAMPMx",  "digitalAMPMy",  "wordhintshow",  "secondhandshow",  "minutehandshow",  "daynightshow",  "digitalshow",  "ampmtext",  "digitalshow2",  "myFont1",  "myFont",  "digitalx",  "digitaly",  "digitalgroupx",  "digitalgroupy",  "teachingmode",  "wordsshow",  "wordhour",  "wordhour1",  "wordmin",  "words",  "test",  "wordsx",  "wordsy",  "mIOSkind",  "questionnumber",  "score",  "counter",  "showAnswerFlag",  "K1fcorrect",  "l_enterK1f",  "K1fcorrectbackground",  "enterK1f",  "l_answer",  "l_question",  "angleinput",  "showangleinput"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = false;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["laytext1to12"] = true;
    __pagesEnabled["ticks"] = true;
    __pagesEnabled["timetoday"] = true;
    __pagesEnabled["drawhands"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["fixedlengthofarms"] = true;
    __pagesEnabled["angle"] = true;
    __pagesEnabled["12"] = true;
    __pagesEnabled["am/pm"] = true;
    __pagesEnabled["words"] = true;
    __pagesEnabled["hour"] = true;
    __pagesEnabled["combinewords"] = true;
    __pagesEnabled["exactwords"] = true;
    __pagesEnabled["check"] = true;
  });

  _model.addToReset(function() {
    zero = 0.0; // EjsS Model.Variables.Var Table.zero
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -5; // EjsS Model.Variables.Var Table.ymin
    ymax = 5; // EjsS Model.Variables.Var Table.ymax
    range = xmax-xmin; // EjsS Model.Variables.Var Table.range
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    sizex2 = rangex/40; // EjsS Model.Variables.Var Table.sizex2
    sizey2 = rangey/40; // EjsS Model.Variables.Var Table.sizey2
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "playing, \npause to select"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    pi2 = 2*pi; // EjsS Model.Variables.Var Table.pi2
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    angletext = ""; // EjsS Model.Variables.Var Table.angletext
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    m = 1; // EjsS Model.Variables.simplespring.m
    k = 1; // EjsS Model.Variables.simplespring.k
    l = 0; // EjsS Model.Variables.simplespring.l
    vx = 0; // EjsS Model.Variables.simplespring.vx
    vxs = vx; // EjsS Model.Variables.simplespring.vxs
    vxstored = 0; // EjsS Model.Variables.simplespring.vxstored
    t = 0; // EjsS Model.Variables.simplespring.t
    tstore = t; // EjsS Model.Variables.simplespring.tstore
    dt = 1; // EjsS Model.Variables.simplespring.dt
    nt = 10; // EjsS Model.Variables.simplespring.nt
    counterA = 0; // EjsS Model.Variables.simplespring.counterA
    counterB = 1; // EjsS Model.Variables.simplespring.counterB
    pointB = 0; // EjsS Model.Variables.simplespring.pointB
    arraypointB = new Array(nt); // EjsS Model.Variables.simplespring.arraypointB
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.arraypointB
        arraypointB[_i0] = 0;  // EjsS Model.Variables.simplespring.arraypointB
      }
    }());
    tpointB = 0; // EjsS Model.Variables.simplespring.tpointB
    tarraypointB = new Array(nt); // EjsS Model.Variables.simplespring.tarraypointB
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.tarraypointB
        tarraypointB[_i0] = 0;  // EjsS Model.Variables.simplespring.tarraypointB
      }
    }());
    pointA = 0; // EjsS Model.Variables.simplespring.pointA
    tpointA = 0; // EjsS Model.Variables.simplespring.tpointA
    arraypointA = new Array(nt); // EjsS Model.Variables.simplespring.arraypointA
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.arraypointA
        arraypointA[_i0] = 0;  // EjsS Model.Variables.simplespring.arraypointA
      }
    }());
    tarraypointA = new Array(nt); // EjsS Model.Variables.simplespring.tarraypointA
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.tarraypointA
        tarraypointA[_i0] = 0;  // EjsS Model.Variables.simplespring.tarraypointA
      }
    }());
    textA = new Array(nt); // EjsS Model.Variables.simplespring.textA
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.textA
        textA[_i0] = "";  // EjsS Model.Variables.simplespring.textA
      }
    }());
    textB = new Array(nt); // EjsS Model.Variables.simplespring.textB
    (function () {
      var _i0;
      for (_i0=0; _i0<nt; _i0+=1) {  // EjsS Model.Variables.simplespring.textB
        textB[_i0] = "";  // EjsS Model.Variables.simplespring.textB
      }
    }());
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.functionY.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.functionY.selectedmodel
        selectedmodel[_i0] = "2*sin(t)";  // EjsS Model.Variables.functionY.selectedmodel
      }
    }());
    functionY = selectedmodel+""; // EjsS Model.Variables.functionY.functionY
    showmodel = false; // EjsS Model.Variables.functionY.showmodel
  });

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
    D = range*0.95; // EjsS Model.Variables.basic.D
    D2 = D/2; // EjsS Model.Variables.basic.D2
    R = range/2*1; // EjsS Model.Variables.basic.R
    ds = R*0.045; // EjsS Model.Variables.basic.ds
    n = 12; // EjsS Model.Variables.basic.n
    n2 = n*5; // EjsS Model.Variables.basic.n2
    x = new Array(n); // EjsS Model.Variables.basic.x
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.x
        x[_i0] = 0.0;  // EjsS Model.Variables.basic.x
      }
    }());
    y = new Array(n); // EjsS Model.Variables.basic.y
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.y
        y[_i0] = 0.0;  // EjsS Model.Variables.basic.y
      }
    }());
    x1324hr = new Array(n); // EjsS Model.Variables.basic.x1324hr
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.x1324hr
        x1324hr[_i0] = 0.0;  // EjsS Model.Variables.basic.x1324hr
      }
    }());
    y1324hr = new Array(n); // EjsS Model.Variables.basic.y1324hr
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.y1324hr
        y1324hr[_i0] = 0.0;  // EjsS Model.Variables.basic.y1324hr
      }
    }());
    coloritick = new Array(n); // EjsS Model.Variables.basic.coloritick
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.coloritick
        coloritick[_i0] = "rgba(0,0,0,1.0)";  // EjsS Model.Variables.basic.coloritick
      }
    }());
    widthitick = new Array(n); // EjsS Model.Variables.basic.widthitick
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.widthitick
        widthitick[_i0] = 2;  // EjsS Model.Variables.basic.widthitick
      }
    }());
    minfaceshow = false; // EjsS Model.Variables.basic.minfaceshow
    msg = new Array(n); // EjsS Model.Variables.basic.msg
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.msg
        msg[_i0] = "";  // EjsS Model.Variables.basic.msg
      }
    }());
    msg1324hr = new Array(n); // EjsS Model.Variables.basic.msg1324hr
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.msg1324hr
        msg1324hr[_i0] = "";  // EjsS Model.Variables.basic.msg1324hr
      }
    }());
    msg60 = new Array(n); // EjsS Model.Variables.basic.msg60
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.msg60
        msg60[_i0] = "";  // EjsS Model.Variables.basic.msg60
      }
    }());
    cs = new Array(n); // EjsS Model.Variables.basic.cs
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.basic.cs
        cs[_i0] = 0.0;  // EjsS Model.Variables.basic.cs
      }
    }());
    Rm = xmax*0.7; // EjsS Model.Variables.basic.Rm
    Rh = xmax*0.60; // EjsS Model.Variables.basic.Rh
    Rs = xmax*0.85; // EjsS Model.Variables.basic.Rs
    xs = new Array(n2); // EjsS Model.Variables.basic.xs
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.basic.xs
        xs[_i0] = 0.0;  // EjsS Model.Variables.basic.xs
      }
    }());
    ys = new Array(n2); // EjsS Model.Variables.basic.ys
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.basic.ys
        ys[_i0] = 0.0;  // EjsS Model.Variables.basic.ys
      }
    }());
    dxs = new Array(n2); // EjsS Model.Variables.basic.dxs
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.basic.dxs
        dxs[_i0] = 0.0;  // EjsS Model.Variables.basic.dxs
      }
    }());
    dys = new Array(n2); // EjsS Model.Variables.basic.dys
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.basic.dys
        dys[_i0] = 0.0;  // EjsS Model.Variables.basic.dys
      }
    }());
  });

  _model.addToReset(function() {
    show1324 = true; // EjsS Model.Variables.clock.show1324
    elementinteracted = -1; // EjsS Model.Variables.clock.elementinteracted
    detect = 0; // EjsS Model.Variables.clock.detect
    T = 60; // EjsS Model.Variables.clock.T
    vs = 0; // EjsS Model.Variables.clock.vs
    vm = 0; // EjsS Model.Variables.clock.vm
    vmrandom = 0; // EjsS Model.Variables.clock.vmrandom
    vmtest = 0; // EjsS Model.Variables.clock.vmtest
    vh = 0; // EjsS Model.Variables.clock.vh
    vhrandom = 0; // EjsS Model.Variables.clock.vhrandom
    vh12text = vh; // EjsS Model.Variables.clock.vh12text
    vhs = 0; // EjsS Model.Variables.clock.vhs
    vms = 0; // EjsS Model.Variables.clock.vms
    vss = 0; // EjsS Model.Variables.clock.vss
    sx = 0.0; // EjsS Model.Variables.clock.sx
    sy = 0.0; // EjsS Model.Variables.clock.sy
    mx = 0.0; // EjsS Model.Variables.clock.mx
    my = 0.0; // EjsS Model.Variables.clock.my
    hx = 0.0; // EjsS Model.Variables.clock.hx
    hy = 0.0; // EjsS Model.Variables.clock.hy
    twofourhourformat = ""; // EjsS Model.Variables.clock.twofourhourformat
    cta = 0; // EjsS Model.Variables.clock.cta
    ctam = 0.0; // EjsS Model.Variables.clock.ctam
    ctah = 0.0; // EjsS Model.Variables.clock.ctah
  });

  _model.addToReset(function() {
    ampmtext = ""; // EjsS Model.Variables.words.ampmtext
    myFont1 = "normal normal 30px digital-7"; // EjsS Model.Variables.words.myFont1
    myFont = "normal normal 40px digital-7"; // EjsS Model.Variables.words.myFont
    digitalx = 0; // EjsS Model.Variables.words.digitalx
    digitaly = 0; // EjsS Model.Variables.words.digitaly
    digitalgroupx = xmin; // EjsS Model.Variables.words.digitalgroupx
    digitalgroupy = ymin+sizey; // EjsS Model.Variables.words.digitalgroupy
    wordhour = ""; // EjsS Model.Variables.words.wordhour
    wordhour1 = ""; // EjsS Model.Variables.words.wordhour1
    wordmin = ""; // EjsS Model.Variables.words.wordmin
    words = ""; // EjsS Model.Variables.words.words
    test = 0; // EjsS Model.Variables.words.test
  });

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
    questionnumber = 0; // EjsS Model.Variables.check.questionnumber
    score = 0; // EjsS Model.Variables.check.score
    counter = 0; // EjsS Model.Variables.check.counter
    showAnswerFlag = false; // EjsS Model.Variables.check.showAnswerFlag
    K1fcorrect = ""; // EjsS Model.Variables.check.K1fcorrect
    l_enterK1f = ""; // EjsS Model.Variables.check.l_enterK1f
    K1fcorrectbackground = ""; // EjsS Model.Variables.check.K1fcorrectbackground
    enterK1f = 0; // EjsS Model.Variables.check.enterK1f
    l_answer = ""; // EjsS Model.Variables.check.l_answer
    l_question = ""; // EjsS Model.Variables.check.l_question
    angleinput = 0; // EjsS Model.Variables.check.angleinput
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.9 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  // check platform for Apps  // > CustomCode.changeOrientation:4
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:5
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:6
     // > CustomCode.changeOrientation:7
  // check platform for web browsers  // > CustomCode.changeOrientation:8
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:9
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:12
     // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
  switch (window.orientation) {  // > CustomCode.changeOrientation:15
    case 0:  // > CustomCode.changeOrientation:16
    case 180:  // > CustomCode.changeOrientation:17
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:18
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:20
        return window.screen.height*0.85;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:21
        // return window.screen.height;  // > CustomCode.changeOrientation:22
        //  return window.innerHeight;  // > CustomCode.changeOrientation:23
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:24
      }  // > CustomCode.changeOrientation:25
        // > CustomCode.changeOrientation:26
      else {  // > CustomCode.changeOrientation:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*k;  // > CustomCode.changeOrientation:29
      }  // > CustomCode.changeOrientation:30
      break;  // > CustomCode.changeOrientation:31
    case 90:  // > CustomCode.changeOrientation:32
    case -90:  // > CustomCode.changeOrientation:33
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:34
     // > CustomCode.changeOrientation:35
      if (iOSapp){ // App  // > CustomCode.changeOrientation:36
        return window.screen.width*0.75;    // > CustomCode.changeOrientation:37
        // return window.screen.height;  // > CustomCode.changeOrientation:38
        //  return window.innerHeight;  // > CustomCode.changeOrientation:39
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:40
      }  // > CustomCode.changeOrientation:41
        // > CustomCode.changeOrientation:42
      else { // browser Android and PC  // > CustomCode.changeOrientation:43
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:44
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:45
        return window.innerHeight*k;  // > CustomCode.changeOrientation:46
      }  // > CustomCode.changeOrientation:47
      break;  // > CustomCode.changeOrientation:48
    default:  // > CustomCode.changeOrientation:49
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:50
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:51
      return window.innerHeight*k;  // > CustomCode.changeOrientation:52
  }  // > CustomCode.changeOrientation:53
     // > CustomCode.changeOrientation:54
  }  // > CustomCode.changeOrientation:55
     // > CustomCode.changeOrientation:56

  function OnOrientationChange() {  // > CustomCode.OnOrientationChange:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.OnOrientationChange:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.OnOrientationChange:3
  //else  // > CustomCode.OnOrientationChange:4
  //  _view.mytext.setText("nada:");  // > CustomCode.OnOrientationChange:5
  // check platform for Apps  // > CustomCode.OnOrientationChange:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.OnOrientationChange:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.OnOrientationChange:8
  // check platform for web browsers  // > CustomCode.OnOrientationChange:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.OnOrientationChange:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.OnOrientationChange:14
  switch (window.orientation) {  // > CustomCode.OnOrientationChange:15
    case 0:  // > CustomCode.OnOrientationChange:16
    case 180:  // > CustomCode.OnOrientationChange:17
      this.screenOrientation = 'portrait';  // > CustomCode.OnOrientationChange:18
    //  if (iOSapp){ // does not seems to work  // > CustomCode.OnOrientationChange:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.OnOrientationChange:20
     //   return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.OnOrientationChange:21
        // return window.screen.height;  // > CustomCode.OnOrientationChange:22
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:23
        // return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:24
     // }  // > CustomCode.OnOrientationChange:25
        // > CustomCode.OnOrientationChange:26
     // else {  // > CustomCode.OnOrientationChange:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:28
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:29
     // }  // > CustomCode.OnOrientationChange:30
      break;  // > CustomCode.OnOrientationChange:31
    case 90:  // > CustomCode.OnOrientationChange:32
    case -90:  // > CustomCode.OnOrientationChange:33
      this.screenOrientation = 'landscape';  // > CustomCode.OnOrientationChange:34
     // if (iOSapp){ // App  // > CustomCode.OnOrientationChange:35
     //   return window.screen.width*0.7;    // > CustomCode.OnOrientationChange:36
        // return window.screen.height;  // > CustomCode.OnOrientationChange:37
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:38
        //  return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:39
     // }  // > CustomCode.OnOrientationChange:40
        // > CustomCode.OnOrientationChange:41
    //  else { // browser Android and PC  // > CustomCode.OnOrientationChange:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:43
        // alert("browser Android and PC");  // > CustomCode.OnOrientationChange:44
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:45
    //  }  // > CustomCode.OnOrientationChange:46
      break;  // > CustomCode.OnOrientationChange:47
    default:  // > CustomCode.OnOrientationChange:48
      this.screenOrientation = 'unknown';  // > CustomCode.OnOrientationChange:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.OnOrientationChange:50
      return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:51
  }  // > CustomCode.OnOrientationChange:52
  }  // > CustomCode.OnOrientationChange:53

  function toggleFullScreen() {  // > CustomCode.fullscreen:1
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:2
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:3
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:4
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:5
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:6
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:7
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:8
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:9
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:10
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:11
      }  // > CustomCode.fullscreen:12
    } else {  // > CustomCode.fullscreen:13
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:14
        document.exitFullscreen();  // > CustomCode.fullscreen:15
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:16
        document.msExitFullscreen();  // > CustomCode.fullscreen:17
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:18
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:19
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:20
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:21
      }  // > CustomCode.fullscreen:22
    }  // > CustomCode.fullscreen:23
  }  // > CustomCode.fullscreen:24

  //http://stackoverflow.com/questions/8089875/show-a-leading-zero-if-a-number-is-less-than-10  // > CustomCode.pad:1
  //function pad(n) {  // > CustomCode.pad:2
   //   return (n < 10) ? ("0" + n) : n;  // > CustomCode.pad:3
  //}  // > CustomCode.pad:4
  function pad(n) {   // > CustomCode.pad:5
  if (n < 10 & n >=0) return ("0" + n);   // > CustomCode.pad:6
  if(n < 0 & n > -11) return ("-0" + Math.abs(n));   // > CustomCode.pad:7
  return n; }  // > CustomCode.pad:8

  function quizmaker () {  // > CustomCode.quizmaker:1
  var opts = _view.models.getProperty("SelectedOptions");  // array of options  // > CustomCode.quizmaker:2
     var option = (opts.length > 0)? opts[0]:""; // selected option   // > CustomCode.quizmaker:3
  //option = _view.models.getProperty("SelectedOptions");  // > CustomCode.quizmaker:4
  _pause();  // > CustomCode.quizmaker:5
  //showmodel=true;  // > CustomCode.quizmaker:6
  //showAnswerFlag=true;  // > CustomCode.quizmaker:7
  //functionY=option+"";  // > CustomCode.quizmaker:8
  questionnumber = questionnumber+1;  // > CustomCode.quizmaker:9
  if (option=="random 5min"){  // > CustomCode.quizmaker:10
    showAnswerFlag=false; //turn off answer  // > CustomCode.quizmaker:11
  vhrandom=Math.floor(Math.random()*12);  // > CustomCode.quizmaker:12
  if (vhrandom==0){  // > CustomCode.quizmaker:13
    vhrandom=12;  // > CustomCode.quizmaker:14
    }  // > CustomCode.quizmaker:15
  vmrandom=Math.floor(Math.floor(Math.random()*60/5)*5);  // > CustomCode.quizmaker:16
  //l_question = "Drag to "+vh +" hour and "+vm+" minute";  // > CustomCode.quizmaker:17
  //vh=1;  // > CustomCode.quizmaker:18
  //vm=0;  // > CustomCode.quizmaker:19
  vs=0;  // > CustomCode.quizmaker:20
  trandom = vs+vmrandom*60+vhrandom*60*60;  // > CustomCode.quizmaker:21
  //_pause();  // > CustomCode.quizmaker:22
  text = "Question "+questionnumber +": Drag to "+vhrandom +" O'clock and "+vmrandom+" minutes";  // > CustomCode.quizmaker:23
  //alert(text);  // > CustomCode.quizmaker:24
   EJSS_INTERFACE.BoxPanel.showOkDialog(text+" and score = "+ score);  // > CustomCode.quizmaker:25
   }  // > CustomCode.quizmaker:26
   if (option=="random 30min"){  // > CustomCode.quizmaker:27
      showAnswerFlag=false; //turn off answer  // > CustomCode.quizmaker:28
  vhrandom=Math.floor(Math.random()*12);  // > CustomCode.quizmaker:29
  if (vhrandom==0){  // > CustomCode.quizmaker:30
    vhrandom=12;  // > CustomCode.quizmaker:31
    }  // > CustomCode.quizmaker:32
  vmrandom=Math.floor(Math.floor(Math.random()*60/30)*30);  // > CustomCode.quizmaker:33
  //l_question = "Drag to "+vh +" hour and "+vm+" minute";  // > CustomCode.quizmaker:34
  //vh=1;  // > CustomCode.quizmaker:35
  //vm=0;  // > CustomCode.quizmaker:36
  vs=0;  // > CustomCode.quizmaker:37
  trandom = vs+vmrandom*60+vhrandom*60*60;  // > CustomCode.quizmaker:38
  //_pause();  // > CustomCode.quizmaker:39
  text = "Question "+questionnumber +": Drag to "+vhrandom +" O'clock and "+vmrandom+" minutes";  // > CustomCode.quizmaker:40
  //alert(text);  // > CustomCode.quizmaker:41
   EJSS_INTERFACE.BoxPanel.showOkDialog(text+" and score = "+ score);  // > CustomCode.quizmaker:42
   }  // > CustomCode.quizmaker:43
   else if (option=="show me"){  // > CustomCode.quizmaker:44
  vh =vhrandom;  // > CustomCode.quizmaker:45
  vm = vmrandom;  // > CustomCode.quizmaker:46
  vs=0;  // > CustomCode.quizmaker:47
  t = vs+vm*60+vh*60*60;  // > CustomCode.quizmaker:48
  text = "The answer is "+vhrandom +" O'clock and "+vmrandom+" minutes";  // > CustomCode.quizmaker:49
     }  // > CustomCode.quizmaker:50
     // > CustomCode.quizmaker:51
     // > CustomCode.quizmaker:52
  counter =1; // make speak once  // > CustomCode.quizmaker:53
  /*  // > CustomCode.quizmaker:54
  if(parent.cordova) { // check it is running in Android  // > CustomCode.quizmaker:55
  //var option1 = _view.comboBox.getProperty("SelectedOptions");  // > CustomCode.quizmaker:56
         parent.TTS.speak(text, function () {  // > CustomCode.quizmaker:57
              // success  // > CustomCode.quizmaker:58
          }, function (reason) {  // > CustomCode.quizmaker:59
              // error  // > CustomCode.quizmaker:60
          });  // > CustomCode.quizmaker:61
      }  // > CustomCode.quizmaker:62
      else {  // > CustomCode.quizmaker:63
    var msg = new SpeechSynthesisUtterance(text);  // > CustomCode.quizmaker:64
  window.speechSynthesis.speak(msg);  // > CustomCode.quizmaker:65
  }  // > CustomCode.quizmaker:66
  */  // > CustomCode.quizmaker:67
  }  // > CustomCode.quizmaker:68

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    if ( selected[0]==="user_defined"){  // > Initialization.Init Page:1
        // > Initialization.Init Page:2
      }  // > Initialization.Init Page:3
    else if ( selected[0]==="part1+part2=whole"){  // > Initialization.Init Page:4
      }  // > Initialization.Init Page:5
        // > Initialization.Init Page:6
       // > Initialization.Init Page:7
        // > Initialization.Init Page:8
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (Width1==undefined){  // > Initialization.undefined:1
      Width1="100%";  // > Initialization.undefined:2
      }   // > Initialization.undefined:3
      if (Width2==undefined){  // > Initialization.undefined:4
      Width2="0%";  // > Initialization.undefined:5
      }  // > Initialization.undefined:6
      //teachingmode  // > Initialization.undefined:7
    if (teachingmode==undefined){  // > Initialization.undefined:8
      teachingmode=false;  // > Initialization.undefined:9
      }  // > Initialization.undefined:10
      //secondhandshow  // > Initialization.undefined:11
    if (secondhandshow==undefined){  // > Initialization.undefined:12
      secondhandshow=false;  // > Initialization.undefined:13
      }    // > Initialization.undefined:14
      //minutehandshow  // > Initialization.undefined:15
     if (minutehandshow==undefined){  // > Initialization.undefined:16
      minutehandshow=true;  // > Initialization.undefined:17
      }   // > Initialization.undefined:18
      //twofourhourformatb  // > Initialization.undefined:19
     if (twofourhourformatb==undefined){  // > Initialization.undefined:20
      twofourhourformatb=false;  // > Initialization.undefined:21
      }     // > Initialization.undefined:22
      //digitalAMPMx  // > Initialization.undefined:23
      if (digitalAMPMx==undefined){  // > Initialization.undefined:24
      digitalAMPMx=0;  // > Initialization.undefined:25
      }   // > Initialization.undefined:26
      if (digitalAMPMy==undefined){  // > Initialization.undefined:27
      digitalAMPMy=0;  // > Initialization.undefined:28
      }   // > Initialization.undefined:29
    //wordsx  // > Initialization.undefined:30
    if (wordsx==undefined){  // > Initialization.undefined:31
      wordsx=0;  // > Initialization.undefined:32
      }   // > Initialization.undefined:33
      if (wordsy==undefined){  // > Initialization.undefined:34
      wordsy=-2;  // > Initialization.undefined:35
      }  // > Initialization.undefined:36
      //  // > Initialization.undefined:37
      if (showangleinput==undefined){  // > Initialization.undefined:38
     showangleinput=false;  // > Initialization.undefined:39
      }  // > Initialization.undefined:40
    //wordsshow  // > Initialization.undefined:41
    //if (wordsshow==undefined){  // > Initialization.undefined:42
    //  wordsshow=false;  // > Initialization.undefined:43
     // }  // > Initialization.undefined:44
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:0.5" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(100,150,100);stop-opacity:0.5" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient)"  // > Initialization.svg:10
    var container = document.createElement('div');  // > Initialization.svg:11
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:12
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:13
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.5" />'+  // > Initialization.svg:14
      '    <stop offset="100%" style="stop-color:rgb(0,50,50);stop-opacity:0.5" />'+  // > Initialization.svg:15
      '  </radialGradient>'+  // > Initialization.svg:16
      '</defs></svg>';  // > Initialization.svg:17
    container.innerHTML = svggradient;  // > Initialization.svg:18
    document.body.appendChild(container);  // > Initialization.svg:19
    //"url(#mygrandient1)"  // > Initialization.svg:20
    //shadow  // > Initialization.svg:21
    var container = document.createElement('div');  // > Initialization.svg:22
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:23
      '  <radialGradient id="mygrandient2" cx="10%" cy="80%" r="90%" fx="20%" fy="80%">'+  // > Initialization.svg:24
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:1" />'+  // > Initialization.svg:25
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.svg:26
      '  </radialGradient>'+  // > Initialization.svg:27
      '</defs></svg>';  // > Initialization.svg:28
    container.innerHTML = svggradient;  // > Initialization.svg:29
    document.body.appendChild(container);  // > Initialization.svg:30
    //"url(#mygrandient2)"  // > Initialization.svg:31
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["laytext1to12"]) return;
    var c=Math.PI*2/n; // assign as 2pi/12 to lay text  // > Initialization.laytext1to12:1
    var ci;  // > Initialization.laytext1to12:2
    var j;  // > Initialization.laytext1to12:3
    for(var i=0;i<n;i++){  // > Initialization.laytext1to12:4
      j=i+1; // increase by 1 start as 1 instead of zero  // > Initialization.laytext1to12:5
      cs[i]=-c*j;  // > Initialization.laytext1to12:6
      x[i]=Rs*0.95*Math.sin(c*j); //position  // > Initialization.laytext1to12:7
      y[i]=Rs*0.95*Math.cos(c*j); //position of text  // > Initialization.laytext1to12:8
      msg[i]=j+""; // to lay 1 to 12 on clock face  // > Initialization.laytext1to12:9
    msg60[i]=j*5+""; // to lay 5 to 60 on clock face  // > Initialization.laytext1to12:10
     x1324hr[i]=Rs*0.8*Math.sin(c*j); //position  // > Initialization.laytext1to12:11
      y1324hr[i]=Rs*0.8*Math.cos(c*j); //position of text  // > Initialization.laytext1to12:12
    msg1324hr[i]=j+12;  // > Initialization.laytext1to12:13
    }  // > Initialization.laytext1to12:14
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["ticks"]) return;
    var ctick=pi2/n2; // reassign c to be 2pi/n2 need 60 ticks now  // > Initialization.ticks:1
    // draw lines ticks on the clock  // > Initialization.ticks:2
    for(var itick=0;itick<n2;itick++){  // > Initialization.ticks:3
    var citick=ctick*itick; // spacings  // > Initialization.ticks:4
     xs[itick]=D2*Math.sin(citick);  // > Initialization.ticks:5
     ys[itick]=D2*Math.cos(citick);  // > Initialization.ticks:6
     dxs[itick]=-ds*Math.sin(citick);  // > Initialization.ticks:7
     dys[itick]=-ds*Math.cos(citick);  // > Initialization.ticks:8
     coloritick[itick]="rgba(0,0,0,1.0)";  // > Initialization.ticks:9
     widthitick[itick]=2;  // > Initialization.ticks:10
     if(itick%5===0){ // longer if remainder equal 5  // > Initialization.ticks:11
      dxs[itick]=2*dxs[itick];  // > Initialization.ticks:12
      dys[itick]=2*dys[itick];  // > Initialization.ticks:13
      coloritick[itick]="rgba(50,50,50,1.0)";  // > Initialization.ticks:14
      widthitick[itick]=6;  // > Initialization.ticks:15
     }  // > Initialization.ticks:16
    }  // > Initialization.ticks:17
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["timetoday"]) return;
    var today = new Date();  // > Initialization.timetoday:1
    vs = today.getSeconds();  // > Initialization.timetoday:2
    vm = today.getMinutes();  // > Initialization.timetoday:3
    vh =vh12text= today.getHours();  // > Initialization.timetoday:4
    t = vs+vm*60+vh*60*60;  // > Initialization.timetoday:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["drawhands"]) return;
    sx = Rs*Math.sin(vs/60*pi2);  // > Initialization.drawhands:1
    sy = Rs*Math.cos(vs/60*pi2);  // > Initialization.drawhands:2
    mx=Rm*Math.sin(vm/60*pi2);  // > Initialization.drawhands:3
    my=Rm*Math.cos(vm/60*pi2);  // > Initialization.drawhands:4
    hx=Rh*Math.sin(vh/12*pi2);  // > Initialization.drawhands:5
    hy=Rh*Math.cos(vh/12*pi2);  // > Initialization.drawhands:6
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["fixedlengthofarms"]) return;
    //calculate angles  // > FixedRelations.fixedlengthofarms:1
    ctas = cta = Math.atan2(sx,sy);  // > FixedRelations.fixedlengthofarms:2
     //   ctam = Math.atan2(mx,my); // disable conflict with fu-kwun min hand drag  // > FixedRelations.fixedlengthofarms:3
    ctah = Math.atan2(hx,hy);  // > FixedRelations.fixedlengthofarms:4
    ctam = Math.atan2(mx,my); //added back for angle calculation to be correct  // > FixedRelations.fixedlengthofarms:5
    // t = vs+vm*60+vh*60*60;  // > FixedRelations.fixedlengthofarms:6
    //decompose t into the 3 arms  // > FixedRelations.fixedlengthofarms:7
    if (teachingmode===true){  // > FixedRelations.fixedlengthofarms:8
    vh =vh12text= Math.floor(t/3600);  // > FixedRelations.fixedlengthofarms:9
    vm = Math.floor((t%(3600))/60);  // > FixedRelations.fixedlengthofarms:10
    vs = ((t%(3600))%60);  // > FixedRelations.fixedlengthofarms:11
    }  // > FixedRelations.fixedlengthofarms:12
    else {  // > FixedRelations.fixedlengthofarms:13
    vh =vh12text = (t/3600);  // > FixedRelations.fixedlengthofarms:14
    vm = ((t%(3600))/60);  // > FixedRelations.fixedlengthofarms:15
    vs = ((t%(3600))%60);  // > FixedRelations.fixedlengthofarms:16
    }  // > FixedRelations.fixedlengthofarms:17
    vms=vm; //make vms store vm value from fu-kwun  // > FixedRelations.fixedlengthofarms:18
    // make arms move  // > FixedRelations.fixedlengthofarms:19
    sx = Rs*Math.sin(vs/60*pi2);  // > FixedRelations.fixedlengthofarms:20
    sy = Rs*Math.cos(vs/60*pi2);  // > FixedRelations.fixedlengthofarms:21
    mx=Rm*Math.sin(vm/60*pi2);  // > FixedRelations.fixedlengthofarms:22
    my=Rm*Math.cos(vm/60*pi2);  // > FixedRelations.fixedlengthofarms:23
    hx=Rh*Math.sin(vh/12*pi2);  // > FixedRelations.fixedlengthofarms:24
    hy=Rh*Math.cos(vh/12*pi2);  // > FixedRelations.fixedlengthofarms:25
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["angle"]) return;
    ctahminusctam=ctah-ctam;  // > FixedRelations.angle:1
    if (ctah-ctam>=0){//positive show as normal  // > FixedRelations.angle:2
    angletext = "ϑ="+(((ctah-ctam)*360/(2*pi)%360)).toFixed(0)+"°";  // > FixedRelations.angle:3
    }  // > FixedRelations.angle:4
    else if  (ctah-ctam<0){//negative need to add 2*pi to make + show as normal  // > FixedRelations.angle:5
    angletext = "ϑ="+(((ctah-ctam-2*pi)*360/(2*pi)%360)).toFixed(0)+"°";  // > FixedRelations.angle:6
    }  // > FixedRelations.angle:7
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["12"]) return;
    //vh = vh12text;  // > FixedRelations.12:1
    if ((vh%24)<1){ // to address HH =00 change to 12  // > FixedRelations.12:2
      vh12text = vh+12;  // > FixedRelations.12:3
     // alert(vh%24);  // > FixedRelations.12:4
      }  // > FixedRelations.12:5
    if ((vh%24)>=13){ //to address HH=13 to 24 change to 1 to 12  // > FixedRelations.12:6
      vh12text = vh-12;  // > FixedRelations.12:7
     // alert(vh%12+"twelve");  // > FixedRelations.12:8
      }  // > FixedRelations.12:9
    //24hour format  // > FixedRelations.12:10
    if (twofourhourformatb== true){  // > FixedRelations.12:11
    twofourhourformat= "Primary 4-5 \n24-hour clock"+"\nhour = "+pad(Math.floor(vh)%24)+"\n"+"minute = "+pad(Math.floor(vm))+"\n"+"second = "+pad(Math.floor(vs));  // > FixedRelations.12:12
    }  // > FixedRelations.12:13
    else {  // > FixedRelations.12:14
      twofourhourformat="";  // > FixedRelations.12:15
      }  // > FixedRelations.12:16
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["am/pm"]) return;
    if ((vh%24<12)&&secondhandshow==true){  // > FixedRelations.am/pm:1
    ampmtext = pad(Math.floor(vh12text%24))+" : "+pad(Math.floor(vm))+" : "+pad(Math.floor(vs))+ " A.M.";  // > FixedRelations.am/pm:2
    }  // > FixedRelations.am/pm:3
    else if ((vh%24 >=12)&&secondhandshow==true){  // > FixedRelations.am/pm:4
    // ampmtext = pad(Math.floor(vh12text%12))+" : "+pad(Math.floor(vm))+" : "+pad(Math.floor(vs))+ " PM";  // > FixedRelations.am/pm:5
     ampmtext = pad(Math.floor(vh12text))+" : "+pad(Math.floor(vm))+" : "+pad(Math.floor(vs))+ " P.M.";  // > FixedRelations.am/pm:6
      }  // > FixedRelations.am/pm:7
        // > FixedRelations.am/pm:8
      else if ((vh%24<12)&&secondhandshow==false){  // > FixedRelations.am/pm:9
    ampmtext = pad(Math.floor(vh12text%24))+" : "+pad(Math.floor(vm))+" A.M.";  // > FixedRelations.am/pm:10
    }  // > FixedRelations.am/pm:11
    else if ((vh%24 >=12)&&secondhandshow==false){  // > FixedRelations.am/pm:12
    // ampmtext = pad(Math.floor(vh12text%12))+" : "+pad(Math.floor(vm))+" : "+pad(Math.floor(vs))+ " PM";  // > FixedRelations.am/pm:13
     ampmtext = pad(Math.floor(vh12text))+" : "+pad(Math.floor(vm))+ " P.M.";  // > FixedRelations.am/pm:14
      }  // > FixedRelations.am/pm:15
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["words"]) return;
    //if (vm===0){  // > FixedRelations.words:1
     // wordmin = "_";  // > FixedRelations.words:2
    //}  // > FixedRelations.words:3
     if (Math.floor(vm)==1){  // > FixedRelations.words:4
      wordmin = "one minute past";  // > FixedRelations.words:5
    }  // > FixedRelations.words:6
    else if (Math.floor(vm)==2){  // > FixedRelations.words:7
      wordmin = "two minutes past";  // > FixedRelations.words:8
    }  // > FixedRelations.words:9
    else if (Math.floor(vm)==3){  // > FixedRelations.words:10
      wordmin = "three minutes past";  // > FixedRelations.words:11
    }  // > FixedRelations.words:12
    else if (Math.floor(vm)==4){  // > FixedRelations.words:13
      wordmin = "four minutes past";  // > FixedRelations.words:14
    }  // > FixedRelations.words:15
    else if (Math.floor(vm)==5){  // > FixedRelations.words:16
      wordmin = "five minutes past";  // > FixedRelations.words:17
    }  // > FixedRelations.words:18
    else if (Math.floor(vm)==6){  // > FixedRelations.words:19
      wordmin = "six minutes past";  // > FixedRelations.words:20
    }  // > FixedRelations.words:21
    else if (Math.floor(vm)==7){  // > FixedRelations.words:22
      wordmin = "seven minutes past";  // > FixedRelations.words:23
    }  // > FixedRelations.words:24
    else if (Math.floor(vm)==8){  // > FixedRelations.words:25
      wordmin = "eight minutes past";  // > FixedRelations.words:26
    }  // > FixedRelations.words:27
    else if (Math.floor(vm)==9){  // > FixedRelations.words:28
      wordmin = "nine minutes past";  // > FixedRelations.words:29
    }  // > FixedRelations.words:30
    else if (Math.floor(vm)==10){  // > FixedRelations.words:31
      wordmin = "ten minutes past";  // > FixedRelations.words:32
    }  // > FixedRelations.words:33
    else if (Math.floor(vm)==11){  // > FixedRelations.words:34
      wordmin = "eleven minute past";  // > FixedRelations.words:35
    }  // > FixedRelations.words:36
    else if (Math.floor(vm)==12){  // > FixedRelations.words:37
      wordmin = "twelve minutes past";  // > FixedRelations.words:38
    }  // > FixedRelations.words:39
    else if (Math.floor(vm)==13){  // > FixedRelations.words:40
      wordmin = "thirteen minutes past";  // > FixedRelations.words:41
    }  // > FixedRelations.words:42
    else if (Math.floor(vm)==14){  // > FixedRelations.words:43
      wordmin = "fourteen minutes past";  // > FixedRelations.words:44
    }  // > FixedRelations.words:45
    else if (Math.floor(vm)==15){  // > FixedRelations.words:46
      wordmin = "quarter past ";  // > FixedRelations.words:47
    }  // > FixedRelations.words:48
    else if (Math.floor(vm)==16){  // > FixedRelations.words:49
      wordmin = "sixteen minutes past";  // > FixedRelations.words:50
    }  // > FixedRelations.words:51
    else if (Math.floor(vm)==17){  // > FixedRelations.words:52
      wordmin = "seventeen minutes past";  // > FixedRelations.words:53
    }  // > FixedRelations.words:54
    else if (Math.floor(vm)==18){  // > FixedRelations.words:55
      wordmin = "eighteen minutes past";  // > FixedRelations.words:56
    }  // > FixedRelations.words:57
    else if (Math.floor(vm)==19){  // > FixedRelations.words:58
      wordmin = "nineteen minutes past";  // > FixedRelations.words:59
    }  // > FixedRelations.words:60
    else if (Math.floor(vm)==20){  // > FixedRelations.words:61
      wordmin = "twenty minutes past";  // > FixedRelations.words:62
    }  // > FixedRelations.words:63
    else if (Math.floor(vm)==21){  // > FixedRelations.words:64
      wordmin = "twenty one minutes to";  // > FixedRelations.words:65
    }  // > FixedRelations.words:66
    else if (Math.floor(vm)==22){  // > FixedRelations.words:67
      wordmin = "twenty two minutes past";  // > FixedRelations.words:68
    }  // > FixedRelations.words:69
    else if (Math.floor(vm)==23){  // > FixedRelations.words:70
      wordmin = "twenty three minutes past";  // > FixedRelations.words:71
    }  // > FixedRelations.words:72
    else if (Math.floor(vm)==24){  // > FixedRelations.words:73
      wordmin = "twenty four minutes past";  // > FixedRelations.words:74
    }  // > FixedRelations.words:75
    else if (Math.floor(vm)==25){  // > FixedRelations.words:76
      wordmin = "twenty five minutes past ";  // > FixedRelations.words:77
    }  // > FixedRelations.words:78
    else if (Math.floor(vm)==26){  // > FixedRelations.words:79
      wordmin = "twenty six minutes past";  // > FixedRelations.words:80
    }  // > FixedRelations.words:81
    else if (Math.floor(vm)==27){  // > FixedRelations.words:82
      wordmin = "twenty seven minutes past";  // > FixedRelations.words:83
    }  // > FixedRelations.words:84
    else if (Math.floor(vm)==28){  // > FixedRelations.words:85
      wordmin = "twenty eight minutes past";  // > FixedRelations.words:86
    }  // > FixedRelations.words:87
    else if (Math.floor(vm)==29){  // > FixedRelations.words:88
      wordmin = "twenty nine minutes past";  // > FixedRelations.words:89
    }  // > FixedRelations.words:90
    else if (Math.floor(vm)==30){  // > FixedRelations.words:91
      wordmin = "half past ";  // > FixedRelations.words:92
    }  // > FixedRelations.words:93
    else if (Math.floor(vm)==31){  // > FixedRelations.words:94
      wordmin = "twenty nine minutes to";  // > FixedRelations.words:95
    }  // > FixedRelations.words:96
    else if (Math.floor(vm)==32){  // > FixedRelations.words:97
      wordmin = "twenty eight minutes to";  // > FixedRelations.words:98
    }  // > FixedRelations.words:99
    else if (Math.floor(vm)==33){  // > FixedRelations.words:100
      wordmin = "twenty seven minutes to";  // > FixedRelations.words:101
    }  // > FixedRelations.words:102
    else if (Math.floor(vm)==34){  // > FixedRelations.words:103
      wordmin = "twenty six minutes to";  // > FixedRelations.words:104
    }  // > FixedRelations.words:105
    else if (Math.floor(vm)==35){  // > FixedRelations.words:106
      wordmin = "twenty five minutes to ";  // > FixedRelations.words:107
    }  // > FixedRelations.words:108
    else if (Math.floor(vm)==36){  // > FixedRelations.words:109
      wordmin = "twenty four minutes to";  // > FixedRelations.words:110
    }  // > FixedRelations.words:111
    else if (Math.floor(vm)==37){  // > FixedRelations.words:112
      wordmin = "twenty three minutes to";  // > FixedRelations.words:113
    }  // > FixedRelations.words:114
    else if (Math.floor(vm)==38){  // > FixedRelations.words:115
      wordmin = "twenty two minutes to";  // > FixedRelations.words:116
    }  // > FixedRelations.words:117
    else if (Math.floor(vm)==39){  // > FixedRelations.words:118
      wordmin = "twenty one minutes to";  // > FixedRelations.words:119
    }  // > FixedRelations.words:120
    else if (Math.floor(vm)==40){  // > FixedRelations.words:121
      wordmin = "twenty minutes to";  // > FixedRelations.words:122
    }  // > FixedRelations.words:123
    else if (Math.floor(vm)==41){  // > FixedRelations.words:124
      wordmin = "nineteen minutes to";  // > FixedRelations.words:125
    }  // > FixedRelations.words:126
    else if (Math.floor(vm)==42){  // > FixedRelations.words:127
      wordmin = "eighteen minutes to";  // > FixedRelations.words:128
    }  // > FixedRelations.words:129
    else if (Math.floor(vm)==43){  // > FixedRelations.words:130
      wordmin = "seventeen minutes to";  // > FixedRelations.words:131
    }  // > FixedRelations.words:132
    else if (Math.floor(vm)==44){  // > FixedRelations.words:133
      wordmin = "sixteen minutes to";  // > FixedRelations.words:134
    }  // > FixedRelations.words:135
    else if (Math.floor(vm)==45){  // > FixedRelations.words:136
      wordmin = "quarter to ";  // > FixedRelations.words:137
    }  // > FixedRelations.words:138
    else if (Math.floor(vm)==46){  // > FixedRelations.words:139
      wordmin = "fourteen minutes to";  // > FixedRelations.words:140
    }  // > FixedRelations.words:141
    else if (Math.floor(vm)==47){  // > FixedRelations.words:142
      wordmin = "thirteen minutes to";  // > FixedRelations.words:143
    }  // > FixedRelations.words:144
    else if (Math.floor(vm)==48){  // > FixedRelations.words:145
      wordmin = "twelve minutes to";  // > FixedRelations.words:146
    }  // > FixedRelations.words:147
    else if (Math.floor(vm)==49){  // > FixedRelations.words:148
      wordmin = "eleven minutes to";  // > FixedRelations.words:149
    }  // > FixedRelations.words:150
    else if (Math.floor(vm)==50){  // > FixedRelations.words:151
      wordmin = "ten minutes to";  // > FixedRelations.words:152
    }  // > FixedRelations.words:153
    else if (Math.floor(vm)==51){  // > FixedRelations.words:154
      wordmin = "nine minutes to";  // > FixedRelations.words:155
    }  // > FixedRelations.words:156
    else if (Math.floor(vm)==52){  // > FixedRelations.words:157
      wordmin = "eight minutes to";  // > FixedRelations.words:158
    }  // > FixedRelations.words:159
    else if (Math.floor(vm)==53){  // > FixedRelations.words:160
      wordmin = "seven minutes to";  // > FixedRelations.words:161
    }  // > FixedRelations.words:162
    else if (Math.floor(vm)==54){  // > FixedRelations.words:163
      wordmin = "six minutes to";  // > FixedRelations.words:164
    }  // > FixedRelations.words:165
    else if (Math.floor(vm)==55){  // > FixedRelations.words:166
      wordmin = "five minutes to";  // > FixedRelations.words:167
    }  // > FixedRelations.words:168
    else if (Math.floor(vm)==56){  // > FixedRelations.words:169
      wordmin = "four minutes to";  // > FixedRelations.words:170
    }  // > FixedRelations.words:171
    else if (Math.floor(vm)==57){  // > FixedRelations.words:172
      wordmin = "three minutes to";  // > FixedRelations.words:173
    }  // > FixedRelations.words:174
    else if (Math.floor(vm)==58){  // > FixedRelations.words:175
      wordmin = "two minutes to";  // > FixedRelations.words:176
    }  // > FixedRelations.words:177
    else if (Math.floor(vm)==59){  // > FixedRelations.words:178
      wordmin = "one minute to";  // > FixedRelations.words:179
    }  // > FixedRelations.words:180
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["hour"]) return;
    if (vm>0){  // > FixedRelations.hour:1
        // > FixedRelations.hour:2
    if (Math.floor(vh)==0){  // > FixedRelations.hour:3
      wordhour = "twelve ";  // > FixedRelations.hour:4
      wordhour1 = "one ";  // > FixedRelations.hour:5
    }  // > FixedRelations.hour:6
     else if (Math.floor(vh)==1){  // > FixedRelations.hour:7
      wordhour = "one ";  // > FixedRelations.hour:8
       wordhour1 = "two ";  // > FixedRelations.hour:9
    }  // > FixedRelations.hour:10
    else if (Math.floor(vh)==2){  // > FixedRelations.hour:11
      wordhour = "two ";  // > FixedRelations.hour:12
      wordhour1 = "three ";  // > FixedRelations.hour:13
    }  // > FixedRelations.hour:14
    else if (Math.floor(vh)==3){  // > FixedRelations.hour:15
      wordhour = "three ";  // > FixedRelations.hour:16
      wordhour1 = "four ";  // > FixedRelations.hour:17
    }  // > FixedRelations.hour:18
    else if (Math.floor(vh)==4){  // > FixedRelations.hour:19
      wordhour = "four ";  // > FixedRelations.hour:20
      wordhour1 = "five ";  // > FixedRelations.hour:21
    }  // > FixedRelations.hour:22
    else if (Math.floor(vh)==5){  // > FixedRelations.hour:23
      wordhour = "five ";  // > FixedRelations.hour:24
       wordhour1 = "six ";  // > FixedRelations.hour:25
    }  // > FixedRelations.hour:26
    else if (Math.floor(vh)==6){  // > FixedRelations.hour:27
      wordhour = "six ";  // > FixedRelations.hour:28
      wordhour1 = "seven ";  // > FixedRelations.hour:29
    }  // > FixedRelations.hour:30
    else if (Math.floor(vh)==7){  // > FixedRelations.hour:31
      wordhour = "seven ";  // > FixedRelations.hour:32
      wordhour1 = "eight ";  // > FixedRelations.hour:33
    }  // > FixedRelations.hour:34
    else if (Math.floor(vh)==8){  // > FixedRelations.hour:35
      wordhour = "eight ";  // > FixedRelations.hour:36
      wordhour1 = "nine ";  // > FixedRelations.hour:37
    }  // > FixedRelations.hour:38
    else if (Math.floor(vh)==9){  // > FixedRelations.hour:39
      wordhour = "nine ";  // > FixedRelations.hour:40
       wordhour1 = "ten ";  // > FixedRelations.hour:41
    }  // > FixedRelations.hour:42
    else if (Math.floor(vh)==10){  // > FixedRelations.hour:43
      wordhour = "ten ";  // > FixedRelations.hour:44
      wordhour1 = "eleven ";  // > FixedRelations.hour:45
    }  // > FixedRelations.hour:46
    else if (Math.floor(vh)==11){  // > FixedRelations.hour:47
      wordhour = "eleven ";  // > FixedRelations.hour:48
      wordhour1 = "twelve ";  // > FixedRelations.hour:49
    }  // > FixedRelations.hour:50
    else if (Math.floor(vh)==12){  // > FixedRelations.hour:51
      wordhour = "twelve ";  // > FixedRelations.hour:52
    }  // > FixedRelations.hour:53
    else if (Math.floor(vh)==13){  // > FixedRelations.hour:54
      wordhour = "one ";  // > FixedRelations.hour:55
      wordhour1 = "two ";  // > FixedRelations.hour:56
    }  // > FixedRelations.hour:57
    else if (Math.floor(vh)==14){  // > FixedRelations.hour:58
      wordhour = "two ";  // > FixedRelations.hour:59
      wordhour1 = "three ";  // > FixedRelations.hour:60
    }  // > FixedRelations.hour:61
    else if (Math.floor(vh)==15){  // > FixedRelations.hour:62
      wordhour = "three ";  // > FixedRelations.hour:63
       wordhour1 = "four ";  // > FixedRelations.hour:64
    }  // > FixedRelations.hour:65
    else if (Math.floor(vh)==16){  // > FixedRelations.hour:66
      wordhour = "four ";  // > FixedRelations.hour:67
      wordhour1 = "five ";  // > FixedRelations.hour:68
    }  // > FixedRelations.hour:69
    else if (Math.floor(vh)==17){  // > FixedRelations.hour:70
      wordhour = "five ";  // > FixedRelations.hour:71
       wordhour1 = "six ";  // > FixedRelations.hour:72
    }  // > FixedRelations.hour:73
    else if (Math.floor(vh)==18){  // > FixedRelations.hour:74
      wordhour = "six ";  // > FixedRelations.hour:75
      wordhour1 = "seven ";  // > FixedRelations.hour:76
    }  // > FixedRelations.hour:77
    else if (Math.floor(vh)==19){  // > FixedRelations.hour:78
      wordhour = "seven ";  // > FixedRelations.hour:79
       wordhour1 = "eight ";  // > FixedRelations.hour:80
    }  // > FixedRelations.hour:81
    else if (Math.floor(vh)==20){  // > FixedRelations.hour:82
      wordhour = "eight ";  // > FixedRelations.hour:83
       wordhour1 = "nine ";  // > FixedRelations.hour:84
    }  // > FixedRelations.hour:85
    else if (Math.floor(vh)==21){  // > FixedRelations.hour:86
      wordhour = "nine ";  // > FixedRelations.hour:87
      wordhour1 = "ten ";  // > FixedRelations.hour:88
    }  // > FixedRelations.hour:89
    else if (Math.floor(vh)==22){  // > FixedRelations.hour:90
      wordhour = "ten ";  // > FixedRelations.hour:91
      wordhour1 = "eleven ";  // > FixedRelations.hour:92
    }  // > FixedRelations.hour:93
    else if (Math.floor(vh)==23){  // > FixedRelations.hour:94
      wordhour = "eleven ";  // > FixedRelations.hour:95
      wordhour1 = "twelve ";  // > FixedRelations.hour:96
    }  // > FixedRelations.hour:97
    }  // > FixedRelations.hour:98
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["combinewords"]) return;
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["exactwords"]) return;
     if (vm>=1&&vm<31){  // > FixedRelations.exactwords:1
    words = ""+wordmin+" "+wordhour;  // > FixedRelations.exactwords:2
    }  // > FixedRelations.exactwords:3
    else if (vm=>31&&vm<=59){  // > FixedRelations.exactwords:4
    words = ""+wordmin+" "+wordhour1;  // > FixedRelations.exactwords:5
    }  // > FixedRelations.exactwords:6
    //exact  // > FixedRelations.exactwords:7
     if (vh>=0&&vh<1&&vm>=0&&vm<1){  // > FixedRelations.exactwords:8
      words = "twelve O'clock";  // > FixedRelations.exactwords:9
     // alert(words);  // > FixedRelations.exactwords:10
    }  // > FixedRelations.exactwords:11
    else if (vh>=1&&vh<2&&vm>=0&&vm<1){  // > FixedRelations.exactwords:12
      words = "one O'clock";  // > FixedRelations.exactwords:13
    }  // > FixedRelations.exactwords:14
    else if (vh>=2&&vh<3&&vm>=0&&vm<1){  // > FixedRelations.exactwords:15
      words = "two O'clock";  // > FixedRelations.exactwords:16
    }  // > FixedRelations.exactwords:17
    else if (vh>=3&&vh<4&&vm>=0&&vm<1){  // > FixedRelations.exactwords:18
      words = "three O'clock";  // > FixedRelations.exactwords:19
    }  // > FixedRelations.exactwords:20
    else if (vh>=4&&vh<5&&vm>=0&&vm<1){  // > FixedRelations.exactwords:21
      words = "four O'clock";  // > FixedRelations.exactwords:22
     // alert(words);  // > FixedRelations.exactwords:23
    }  // > FixedRelations.exactwords:24
    else if (vh>=5&&vh<6&&vm>=0&&vm<1){  // > FixedRelations.exactwords:25
      words = "five O'clock";  // > FixedRelations.exactwords:26
    }  // > FixedRelations.exactwords:27
    else if (vh>=6&&vh<7&&vm>=0&&vm<1){  // > FixedRelations.exactwords:28
      words = "six O'clock";  // > FixedRelations.exactwords:29
    }  // > FixedRelations.exactwords:30
    else if (vh>=7&&vh<8&&vm>=0&&vm<1){  // > FixedRelations.exactwords:31
      words = "seven O'clock";  // > FixedRelations.exactwords:32
    }  // > FixedRelations.exactwords:33
    else if (vh>=8&&vh<9&&vm>=0&&vm<1){  // > FixedRelations.exactwords:34
      words = "eight O'clock";  // > FixedRelations.exactwords:35
    }  // > FixedRelations.exactwords:36
    else if (vh>=9&&vh<10&&vm>=0&&vm<1){  // > FixedRelations.exactwords:37
      words = "nine O'clock";  // > FixedRelations.exactwords:38
    }  // > FixedRelations.exactwords:39
    else if (vh>=10&&vh<11&&vm>=0&&vm<1){  // > FixedRelations.exactwords:40
      words = "ten O'clock";  // > FixedRelations.exactwords:41
    }  // > FixedRelations.exactwords:42
    else if (vh>=11&&vh<12&&vm>=0&&vm<1){  // > FixedRelations.exactwords:43
      words = "eleven O'clock";  // > FixedRelations.exactwords:44
    }  // > FixedRelations.exactwords:45
    else if (vh>=12&&vh<13&&vm>=0&&vm<1){  // > FixedRelations.exactwords:46
      words = "twelve O'clock";  // > FixedRelations.exactwords:47
    }  // > FixedRelations.exactwords:48
    else if (vh>=13&&vh<14&&vm>=0&&vm<1){  // > FixedRelations.exactwords:49
      words = "one O'clock";  // > FixedRelations.exactwords:50
    }  // > FixedRelations.exactwords:51
    else if (vh>=14&&vh<15&&vm>=0&&vm<1){  // > FixedRelations.exactwords:52
      words = "two O'clock";  // > FixedRelations.exactwords:53
    }  // > FixedRelations.exactwords:54
    else if (vh>=15&&vh<16&&vm>=0&&vm<1){  // > FixedRelations.exactwords:55
      words = "three O'clock";  // > FixedRelations.exactwords:56
    }  // > FixedRelations.exactwords:57
    else if (vh>=16&&vh<17&&vm>=0&&vm<1){  // > FixedRelations.exactwords:58
      words = "four O'clock";  // > FixedRelations.exactwords:59
    }  // > FixedRelations.exactwords:60
    else if (vh>=17&&vh<18&&vm>=0&&vm<1){  // > FixedRelations.exactwords:61
      words = "five O'clock";  // > FixedRelations.exactwords:62
    }  // > FixedRelations.exactwords:63
    else if (vh>=18&&vh<19&&vm>=0&&vm<1){  // > FixedRelations.exactwords:64
      words = "six O'clock";  // > FixedRelations.exactwords:65
    }  // > FixedRelations.exactwords:66
    else if (vh>=19&&vh<20&&vm>=0&&vm<1){  // > FixedRelations.exactwords:67
      words = "seven O'clock";  // > FixedRelations.exactwords:68
    }  // > FixedRelations.exactwords:69
    else if (vh>=20&&vh<21&&vm>=0&&vm<1){  // > FixedRelations.exactwords:70
      words = "eight O'clock";  // > FixedRelations.exactwords:71
    }  // > FixedRelations.exactwords:72
    else if (vh>=21&&vh<22&&vm>=0&&vm<1){  // > FixedRelations.exactwords:73
      words = "nine O'clock";  // > FixedRelations.exactwords:74
    }  // > FixedRelations.exactwords:75
    else if (vh>=22&&vh<23&&vm>=0&&vm<1){  // > FixedRelations.exactwords:76
      words = "ten O'clock";  // > FixedRelations.exactwords:77
    }  // > FixedRelations.exactwords:78
    else if (vh>=23&&vh<24&&vm>=0&&vm<1){  // > FixedRelations.exactwords:79
      words = "eleven O'clock";  // > FixedRelations.exactwords:80
        // > FixedRelations.exactwords:81
    }  // > FixedRelations.exactwords:82
    //words = wordhour;  // > FixedRelations.exactwords:83
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["check"]) return;
    if (showAnswerFlag===false)  // > FixedRelations.check:1
    {   // > FixedRelations.check:2
    K1fcorrect = "";  // > FixedRelations.check:3
    }  // > FixedRelations.check:4
    else  // > FixedRelations.check:5
    {  // > FixedRelations.check:6
    //l_enterK1f===_view._format(l_answer,"0.0"))  // > FixedRelations.check:7
      //  if(Math.abs(massscaleo-functionY)<0.005){  // > FixedRelations.check:8
       // solve 5 clock inaccurate feedback convert to time t  // > FixedRelations.check:9
     if (Math.abs(t-(vhrandom%12)*3600+vmrandom*60)<30){ // better solution 20170707  // > FixedRelations.check:10
       K1fcorrect = "Great! You have \nthe right answer!!, \nthe time is \n "+words ;  // > FixedRelations.check:11
    //alert(K1fcorrect);  // > FixedRelations.check:12
       score=score+1;  // > FixedRelations.check:13
    K1fcorrectbackground = "rgba(0,255,0,255)";  // > FixedRelations.check:14
    //quiz again  // > FixedRelations.check:15
      if (score ==0){  // > FixedRelations.check:16
          // > FixedRelations.check:17
        }  // > FixedRelations.check:18
        else {  // > FixedRelations.check:19
       //   score=score+1;  // > FixedRelations.check:20
      quizmaker ();  // > FixedRelations.check:21
      }  // > FixedRelations.check:22
        // > FixedRelations.check:23
      }  // > FixedRelations.check:24
     //   if((Math.floor(vh%12)==vhrandom)&&(Math.abs((vm)-vmrandom))<1){ // 1+ to 11+ works 0+ fail  // > FixedRelations.check:25
       else if((Math.floor(vh%12)==vhrandom%12)&&(Math.abs((vm)-vmrandom))<0.5){ // 1+ to 11+ works 0+ works  // > FixedRelations.check:26
        K1fcorrect = "Great! You have \nthe right answer!!, \nthe time is \n"+words ;  // > FixedRelations.check:27
    //alert(K1fcorrect);  // > FixedRelations.check:28
    score=score+1;  // > FixedRelations.check:29
    K1fcorrectbackground = "rgba(0,255,0,255)";  // > FixedRelations.check:30
    //quizagain  // > FixedRelations.check:31
     if (score ==0){  // > FixedRelations.check:32
          // > FixedRelations.check:33
        }  // > FixedRelations.check:34
        else {  // > FixedRelations.check:35
        //  score=score+1;  // > FixedRelations.check:36
      quizmaker ();  // > FixedRelations.check:37
      }  // > FixedRelations.check:38
        // > FixedRelations.check:39
    }  // > FixedRelations.check:40
    else { // wrong give feedback  // > FixedRelations.check:41
    K1fcorrect = " Incorrect,\nyour input is \nout by "  + _view._format((t/60-(vmrandom+vhrandom*60)),"0") + "minutes" ;  // > FixedRelations.check:42
      K1fcorrectbackground = "rgba(255,0,0,255)";  // > FixedRelations.check:43
      if ((_view._format((t/60-(vmrandom+vhrandom*60)),"0"))>30){ //positive  // > FixedRelations.check:44
     K1fcorrect = " Incorrect,\nyour input is \nout by " + _view._format(Math.floor(t/60/60-(vmrandom/60+vhrandom)),"0")+ "hour and" + _view._format((t/60-(vmrandom+vhrandom*60))%60,"0") + "minutes" ;  // > FixedRelations.check:45
      K1fcorrectbackground = "rgba(255,0,0,255)";     // > FixedRelations.check:46
        }  // > FixedRelations.check:47
        else if ((_view._format((t/60-(vmrandom+vhrandom*60)),"0"))<-30){ //positive  // > FixedRelations.check:48
     K1fcorrect = " Incorrect,\nyour input is \nout by " + _view._format(-Math.floor(-t/60/60+(vmrandom/60+vhrandom)),"0")+ "hour and" + _view._format((t/60-(vmrandom+vhrandom*60))%60,"0") + "minutes" ;  // > FixedRelations.check:49
      K1fcorrectbackground = "rgba(255,0,0,255)";     // > FixedRelations.check:50
        }  // > FixedRelations.check:51
        // > FixedRelations.check:52
      }  // > FixedRelations.check:53
    /*     // > FixedRelations.check:54
     else if (vh!=vhrandom&&vm==vmrandom){  // > FixedRelations.check:55
    K1fcorrect = " Incorrect,\nyour input is \nout by " + _view._format((vh-vhrandom),"0") + "hour" ;  // > FixedRelations.check:56
    K1fcorrectbackground = "rgba(255,0,0,255)";  // > FixedRelations.check:57
    //alert(K1fcorrect);  // > FixedRelations.check:58
     }  // > FixedRelations.check:59
     else if (vh==vhrandom&&vm!=vmrandom){  // > FixedRelations.check:60
    K1fcorrect = " Incorrect,\nyour input is \nout by " + _view._format((vm-vmrandom),"0") + "minute" ;  // > FixedRelations.check:61
    K1fcorrectbackground = "rgba(255,0,0,255)";  // > FixedRelations.check:62
    //alert(K1fcorrect);  // > FixedRelations.check:63
     }  // > FixedRelations.check:64
     else if (Math.floor(vh%12)!=vhrandom%12&&vm!=vmrandom){  // > FixedRelations.check:65
    K1fcorrect = " Incorrect,\nyour input is \nout by " + _view._format((vh-vhrandom),"0") + "hour and" + _view._format((vm-vmrandom),"0") + "minute" ;  // > FixedRelations.check:66
    K1fcorrectbackground = "rgba(255,0,0,255)";  // > FixedRelations.check:67
    //alert(K1fcorrect);  // > FixedRelations.check:68
     }  // > FixedRelations.check:69
    */  // > FixedRelations.check:70
    /*  // > FixedRelations.check:71
    if(parent.cordova&&counter>0) { // check it is running in Android  // > FixedRelations.check:72
           parent.TTS.speak(K1fcorrect, function () {  // > FixedRelations.check:73
                // success  // > FixedRelations.check:74
            }, function (reason) {  // > FixedRelations.check:75
                // error  // > FixedRelations.check:76
            });  // > FixedRelations.check:77
        }  // > FixedRelations.check:78
        else if (!parent.cordova&&counter>0){  // > FixedRelations.check:79
      var msg2 = new SpeechSynthesisUtterance(K1fcorrect);  // > FixedRelations.check:80
    window.speechSynthesis.speak(msg2);  // > FixedRelations.check:81
    }  // > FixedRelations.check:82
    */  // > FixedRelations.check:83
    counter =0; // make speak once  // > FixedRelations.check:84
    }  // > FixedRelations.check:85
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new clockgeogebrawee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.comboBox.linkProperty("Options",  function() { return ["Teaching Mode off","Teaching Mode on","","Primary 1","12 O'clock","half past 12"," 1 O'clock","half past  1"," 2 O'clock","half past  2"," 3 O'clock","half past  3"," 4 O'clock","half past  4"," 5 O'clock","half past  5"," 6 O'clock","half past  6"," 7 O'clock","half past  7"," 8 O'clock","half past  8"," 9 O'clock","half past  9","10 O'clock","half past 10","11 O'clock","half past 11","","Primary 2","min face","hour face","Digital AM/PM show","Digital AM/PM hide","","Primary 4","Second Hand show","Second Hand hide","Minute Hand show","Minute Hand hide","24hour format show","12hour format show","Night/Day show","Night/Day hide","Words show","Words hide","","Challenge","test angle","show angle","hide angle"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  //["","Night/Day show","Night/Day hide","Words show","Words hide","Teaching Mode on","Teaching Mode off"]
  // option = _view.comboBox.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if (option== "Words show") {
  wordsshow=true;
  wordsy=-5.5;
  ymin = ymin-1;
  }
  else if (option== "Words hide") {
  wordsshow=false;
  ymin = ymin+1;
  }
  else if (option== "Teaching Mode on") {
  teachingmode=true;
  }
  else if (option== "Teaching Mode off") {
  teachingmode=false;
  }
  else if (option== "Second Hand show") {
  secondhandshow=true;
  dt=1;
  twofourhourformatb=true;
  }
  else if (option== "Second Hand hide") {
  secondhandshow=false;
  dt=60;
  }
  //minutehandshow
  else if (option== "Minute Hand show") {
  minutehandshow=true;
  //dt=1;
  //twofourhourformatb=true;
  }
  else if (option== "Minute Hand hide") {
  minutehandshow=false;
  //dt=60;
  }
  //twofourhourformatb
  else if (option== "Primary 4") {
  twofourhourformatb=true;
  }
  else if (option== "Primary 2") {
  twofourhourformatb=false;
  }
  //"Hints for words show","Hints for words off"
  else if (option== "Hints for words show") {
  wordhintshow=true;
   wordsy=-6;
  }
  else if (option== "Hints for words off") {
  wordhintshow=false;
   
  }
  //"min face","hour face"
  else if (option== "min face") {
  minfaceshow=true;
  }
  else if (option== "hour face") {
  minfaceshow=false;
  }
  //"Digital show","Digital hide"
  else if (option== "Digital AM/PM show") {
  digitalshow2=true;
  digitalAMPMy=5.5;
  ymax= ymax+2;
  //Width1="50%";
  //Width2="50%";
  }
  else if (option== "Digital AM/PM hide") {
  digitalshow2=false;
  ymax= ymax-2;
  }
  else if (option== "24hour format show") {
  twofourhourformatb=true;
  }
  else if (option== "12hour format show") {
  twofourhourformatb=false;
  }
  else if (option== "Digital show") {
  digitalshow=true;
  //Width1="50%";
  //Width2="50%";
  }
  else if (option== "Digital hide") {
  digitalshow=false;
  }
  //"12 O'clock","half past 12"," 1 O'clock","half past 1 "," 2 O'clock","half past 2 "
  else if (option== "12 O'clock") {
  vh=0;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  //daynightshow
  else if (option== "Night/Day show") {
  daynightshow=true;
  }
  else if (option== "Night/Day hide") {
  daynightshow=false;
  }
  else if (option== " 1 O'clock") {
  vh=1;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 2 O'clock") {
  vh=2;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 3 O'clock") {
  vh=3;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 4 O'clock") {
  vh=4;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 5 O'clock") {
  vh=5;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 6 O'clock") {
  vh=6;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 7 O'clock") {
  vh=7;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 8 O'clock") {
  vh=8;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== " 9 O'clock") {
  vh=9;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "10 O'clock") {
  vh=10;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "11 O'clock") {
  vh=11;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "12 O'clock") {
  vh=12;
  vm=0;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past 12") {
  vh=0;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  1") {
  vh=1;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  2") {
  vh=2;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  3") {
  vh=3;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  4") {
  vh=4;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  5") {
  vh=5;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  6") {
  vh=6;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  7") {
  vh=7;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  8") {
  vh=8;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past  9") {
  vh=9;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past 10") {
  vh=10;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "half past 11") {
  vh=11;
  vm=30;
  vs=0;
  t = vs+vm*60+vh*60*60;
  _pause();
  text = "paused";
  }
  else if (option== "test angle") {
    _pause(); // to stop running
  var question =  "What is the angle (in degrees) between the hour and minute hands?";
  showangleinput=true;
   //alert(question);
    EJSS_INTERFACE.BoxPanel.showOkDialog(question);
  /*
  switch(favDrink) {
      case "a":
          text = "Excellent choice! it is correct that at a point in time 0<t<3 around t=1.5 s that the gradient on the position vs time plot is apprioximately the same, thus the same velocity.";
          alert(text);
          break;
          default:
          text = "I have never heard of that one..";
          break;
  }
  */
   
  }
  else if (option== "show angle") {
  angleshow=true;
  }
  else if (option== "hide angle") {
  angleshow=false;
  showangleinput=false;
  }
  if ( digitalshow==false&&digitalshow2==false){
  // Width1="100%";
  // Width2="0%";
    }
    /*
  if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg);
  }
  */;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.models.linkProperty("Options",  function() { return ["quiz","random 5min","random 30min","show me"]; } ); // HtmlView Page linking property 'Options' for element 'models'
          _view.models.linkProperty("Background",  function() { return K1fcorrectbackground; }, function(_v) { K1fcorrectbackground = _v; } ); // HtmlView Page linking property 'Background' for element 'models'
          _view.models.setAction("OnChange", function(_data,_info) {
  quizmaker ();

}); // HtmlView Page setting action 'OnChange' for element 'models'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  text="paused";
  isPaused=true;
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();
  isPaused=false;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.resetButton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.checkanswerButton.setAction("OnClick", function(_data,_info) {
  showAnswerFlag=true;
  counter=1; // make sound;

}); // HtmlView Page setting action 'OnClick' for element 'checkanswerButton'
          _view.angle.linkProperty("Visibility",  function() { return showangleinput; }, function(_v) { showangleinput = _v; } ); // HtmlView Page linking property 'Visibility' for element 'angle'
          _view.angle.linkProperty("Display",  function() { return showangleinput?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'angle'
          _view.angle2.linkProperty("Value",  function() { return angleinput; }, function(_v) { angleinput = _v; } ); // HtmlView Page linking property 'Value' for element 'angle2'
          _view.angle2.setAction("OnChange", function(_data,_info) {
  if (Math.abs(angleinput-(((ctah-ctam)*360/(2*pi))%360).toFixed(0))<2){
   // alert(Math.abs((((ctah-ctam)*360/(2*pi))%360).toFixed(0)));
   // alert("correct 1!"); // correct for first angle
    EJSS_INTERFACE.BoxPanel.showOkDialog("correct1!");
   // alert((((ctah-ctam-2*pi)*360/(2*pi))%360).toFixed(0));
    }
   else if (Math.abs(angleinput-Math.abs(((ctah-ctam-2*pi)*360/(2*pi))%360).toFixed(0))<2){
   // alert((((ctah-ctam-2*pi)*360/(2*pi))%360).toFixed(0));
   // alert("correct 2!"); // correct for 360- first angle
   EJSS_INTERFACE.BoxPanel.showOkDialog("correct2!");
   }
    else{
    //  alert("try again");
       EJSS_INTERFACE.BoxPanel.showOkDialog("try again!");
      }

}); // HtmlView Page setting action 'OnChange' for element 'angle2'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  _pause();
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return K1fcorrect; }, function(_v) { K1fcorrect = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BLMessage",  function() { return "score="+score; } ); // HtmlView Page linking property 'BLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return twofourhourformat; }, function(_v) { twofourhourformat = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.stopwatchoutercircle.linkProperty("SizeX",  function() { return D*1.05; } ); // HtmlView Page linking property 'SizeX' for element 'stopwatchoutercircle'
          _view.stopwatchoutercircle.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'stopwatchoutercircle'
          _view.stopwatchoutercircle.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'stopwatchoutercircle'
          _view.stopwatchoutercircle.linkProperty("SizeY",  function() { return D*1.05; } ); // HtmlView Page linking property 'SizeY' for element 'stopwatchoutercircle'
          _view.stopwatchoutercircle22.linkProperty("SizeX",  function() { return D; }, function(_v) { D = _v; } ); // HtmlView Page linking property 'SizeX' for element 'stopwatchoutercircle22'
          _view.stopwatchoutercircle22.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'stopwatchoutercircle22'
          _view.stopwatchoutercircle22.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'stopwatchoutercircle22'
          _view.stopwatchoutercircle22.linkProperty("SizeY",  function() { return D; }, function(_v) { D = _v; } ); // HtmlView Page linking property 'SizeY' for element 'stopwatchoutercircle22'
          _view.group3.linkProperty("Visibility",  function() { return wordhintshow; }, function(_v) { wordhintshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group3'
          _view.arrowSet.linkProperty("NumberOfElements",  function() { return n2; }, function(_v) { n2 = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeX",  function() { return dxs; }, function(_v) { dxs = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSet'
          _view.arrowSet.linkProperty("X",  function() { return xs; }, function(_v) { xs = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet'
          _view.arrowSet.linkProperty("LineColor",  function() { return coloritick; }, function(_v) { coloritick = _v; } ); // HtmlView Page linking property 'LineColor' for element 'arrowSet'
          _view.arrowSet.linkProperty("Y",  function() { return ys; }, function(_v) { ys = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeY",  function() { return dys; }, function(_v) { dys = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowSet'
          _view.arrowSet.linkProperty("LineWidth",  function() { return widthitick; }, function(_v) { widthitick = _v; } ); // HtmlView Page linking property 'LineWidth' for element 'arrowSet'
          _view.textSet60.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet60'
          _view.textSet60.linkProperty("SizeX",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'textSet60'
          _view.textSet60.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet60'
          _view.textSet60.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet60'
          _view.textSet60.linkProperty("Text",  function() { return msg60; }, function(_v) { msg60 = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet60'
          _view.textSet60.linkProperty("Visibility",  function() { return minfaceshow; }, function(_v) { minfaceshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textSet60'
          _view.textSet60.linkProperty("SizeY",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'SizeY' for element 'textSet60'
          _view.textSet2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet2'
          _view.textSet2.linkProperty("X",  function() { return x1324hr; }, function(_v) { x1324hr = _v; } ); // HtmlView Page linking property 'X' for element 'textSet2'
          _view.textSet2.linkProperty("Y",  function() { return y1324hr; }, function(_v) { y1324hr = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet2'
          _view.textSet2.linkProperty("Text",  function() { return msg1324hr; }, function(_v) { msg1324hr = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet2'
          _view.textSet2.linkProperty("Visibility",  function() { return twofourhourformatb; }, function(_v) { twofourhourformatb = _v; } ); // HtmlView Page linking property 'Visibility' for element 'textSet2'
          _view.textSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return msg; }, function(_v) { msg = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.textSet.linkProperty("Visibility",  function() { return !minfaceshow; } ); // HtmlView Page linking property 'Visibility' for element 'textSet'
          _view.teaching.linkProperty("Visibility",  function() { return teachingmode; }, function(_v) { teachingmode = _v; } ); // HtmlView Page linking property 'Visibility' for element 'teaching'
          _view.second.linkProperty("X",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'X' for element 'second'
          _view.second.linkProperty("Y",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'Y' for element 'second'
          _view.second.linkProperty("Visibility",  function() { return secondhandshow; }, function(_v) { secondhandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'second'
          _view.second.setAction("OnDrag", function(_data,_info) {
  //three lines to restrict drag to circle path
  ctas = cta = Math.atan2(sx,sy);
  sx=3.75*Math.sin(ctas); //lookang cannot use Rs variable
  sy=3.75*Math.cos(ctas);
  //vs = Math.round(60/pi2*Math.atan2(sx,sy));
  vs = 60/pi2*Math.atan2(sx,sy); //assign coordinates sx sy to vs
  if (vs <0) { // 31 to 59 sec are return back as -29 and -1
    vs = vs+60; // clever way to assign 31 to 59 sec
    }
    //drag increase when vs>60
    if(Math.abs(vs-vss)>40){// why 40? strange
   if(vss>30.){
     vm=vm+1;// looks correct
  // if(vss<30.){vm=vm++; // ++ des not work
  test = -1;
  }
  else if(vss<30.){
  //  vm--; //  taken out
    vm= vm-1;
  test =1;
  }
  }
  //assign t back with new values of vs
  t = vs+vm*60+vh*60*60;
  //decompose t into the 3 arms
  //vh = (t/3600);
  //vm = ((t%(3600))/60);
  //vs = ((t%(3600))%60);
  //vh = (t/3600);
  //vm = ((t%(3600))/60);
  //vs = ((t%(3600))%60);
  // make arms move
  //sx = Rs*Math.sin(vs/60*pi2);
  //sy = Rs*Math.cos(vs/60*pi2);
  mx=Rm*Math.sin(vm/60*pi2);
  my=Rm*Math.cos(vm/60*pi2);
  hx=Rh*Math.sin(vh/12*pi2);
  hy=Rh*Math.cos(vh/12*pi2);
  //store value for drag to work
  vss = vs;

}); // HtmlView Page setting action 'OnDrag' for element 'second'
          _view.sechand.linkProperty("SizeX",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'sechand'
          _view.sechand.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'sechand'
          _view.sechand.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'sechand'
          _view.sechand.linkProperty("Visibility",  function() { return secondhandshow; }, function(_v) { secondhandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'sechand'
          _view.sechand.linkProperty("SizeY",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'sechand'
          _view.minhand.linkProperty("SizeX",  function() { return mx; }, function(_v) { mx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'minhand'
          _view.minhand.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'minhand'
          _view.minhand.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'minhand'
          _view.minhand.linkProperty("Visibility",  function() { return minutehandshow; }, function(_v) { minutehandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'minhand'
          _view.minhand.linkProperty("SizeY",  function() { return my; }, function(_v) { my = _v; } ); // HtmlView Page linking property 'SizeY' for element 'minhand'
          _view.min.linkProperty("X",  function() { return mx; }, function(_v) { mx = _v; } ); // HtmlView Page linking property 'X' for element 'min'
          _view.min.linkProperty("Y",  function() { return my; }, function(_v) { my = _v; } ); // HtmlView Page linking property 'Y' for element 'min'
          _view.min.linkProperty("Visibility",  function() { return minutehandshow; }, function(_v) { minutehandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'min'
          _view.min.setAction("OnDrag", function(_data,_info) {
  //three lines to restrict drag to circle path
  //ctam = Math.atan2(mx,my);
  // implement discrete
  ctam = Math.round(Math.atan2(mx,my)/(2*pi)*60)/60*(2*pi);
  mx=3.25*Math.sin(ctam); //lookang cannot use Rs variable
  my=3.25*Math.cos(ctam);
  //vs = Math.round(60/pi2*Math.atan2(sx,sy));
  vm = 60/pi2*Math.atan2(mx,my); //assign coordinates sx sy to vs
  if (vm <0) { // 31 to 59 sec are return back as -29 and -1
    vm = vm+60; // clever way to assign 31 to 59 sec
    }
    //drag increase when vs>60
    if(Math.abs(vm-vms)>40){// why 40? strange
   if(vms>30.){
     vh=vh+1;// looks correct
  // if(vss<30.){vm=vm++; // ++ des not work
  test = -1;
  }
  else if(vms<30.){
  //  vm--; //  taken out
    vh= vh-1;
  test =1;
  }
  }
  //assign t back with new values of vs
  //t = vs+vm*60+vh*60*60;
  t = vm*60+vh*60*60;
  //decompose t into the 3 arms
  //vh = (t/3600);
  //vm = ((t%(3600))/60);
  //vs = ((t%(3600))%60);
  // make arms move
  //sx = Rs*Math.sin(vs/60*pi2);
  //sy = Rs*Math.cos(vs/60*pi2);
  //mx=Rm*Math.sin(vm/60*pi2);
  //my=Rm*Math.cos(vm/60*pi2);
  hx=Rh*Math.sin(vh/12*pi2);
  hy=Rh*Math.cos(vh/12*pi2);
  //store value for drag to work
  vms = vm;

}); // HtmlView Page setting action 'OnDrag' for element 'min'
          _view.hourhand.linkProperty("SizeX",  function() { return hx; }, function(_v) { hx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'hourhand'
          _view.hourhand.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'hourhand'
          _view.hourhand.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'hourhand'
          _view.hourhand.linkProperty("SizeY",  function() { return hy; }, function(_v) { hy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'hourhand'
          _view.hr.linkProperty("X",  function() { return hx; }, function(_v) { hx = _v; } ); // HtmlView Page linking property 'X' for element 'hr'
          _view.hr.linkProperty("Y",  function() { return hy; }, function(_v) { hy = _v; } ); // HtmlView Page linking property 'Y' for element 'hr'
          _view.hr.setAction("OnDrag", function(_data,_info) {
  //three lines to restrict drag to circle path
  ctah = Math.atan2(hx,hy);
  hx=2.5*Math.sin(ctah); //lookang cannot use Rs variable
  hy=2.5*Math.cos(ctah);
  //vs = Math.round(60/pi2*Math.atan2(sx,sy));
  vh = 12/pi2*Math.atan2(hx,hy); //assign coordinates sx sy to vs
  if (vh <0) { // 7 to 11 sec are return back as -29 and -1
    vh = vh+12; // clever way to assign 7 to 11 hr from -1 to -5
   }
  //assign t back with new values of vs
  //t = vs+vm*60+vh*60*60;
  t = vh*60*60;
  //decompose t into the 3 arms
  //vh = (t/3600);
  //vm = ((t%(3600))/60);
  //vs = ((t%(3600))%60);
  // make arms move
  //sx = Rs*Math.sin(vs/60*pi2);
  //sy = Rs*Math.cos(vs/60*pi2);
  //mx=Rm*Math.sin(vm/60*pi2);
  //my=Rm*Math.cos(vm/60*pi2);
  //hx=Rh*Math.sin(vh/12*pi2);
  //hy=Rh*Math.cos(vh/12*pi2);
  //store value for drag to work
  //vhs = vh;

}); // HtmlView Page setting action 'OnDrag' for element 'hr'
          _view.nonteaching2.linkProperty("Visibility",  function() { return !teachingmode; } ); // HtmlView Page linking property 'Visibility' for element 'nonteaching2'
          _view.second2.linkProperty("X",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'X' for element 'second2'
          _view.second2.linkProperty("Y",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'Y' for element 'second2'
          _view.second2.setAction("OnDrag", function(_data,_info) {
  //notworking correctly;

}); // HtmlView Page setting action 'OnDrag' for element 'second2'
          _view.sechand22.linkProperty("SizeX",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'sechand22'
          _view.sechand22.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'sechand22'
          _view.sechand22.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'sechand22'
          _view.sechand22.linkProperty("Visibility",  function() { return secondhandshow; }, function(_v) { secondhandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'sechand22'
          _view.sechand22.linkProperty("SizeY",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'sechand22'
          _view.minhand2.linkProperty("SizeX",  function() { return mx; }, function(_v) { mx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'minhand2'
          _view.minhand2.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'minhand2'
          _view.minhand2.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'minhand2'
          _view.minhand2.linkProperty("Visibility",  function() { return minutehandshow; }, function(_v) { minutehandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'minhand2'
          _view.minhand2.linkProperty("SizeY",  function() { return my; }, function(_v) { my = _v; } ); // HtmlView Page linking property 'SizeY' for element 'minhand2'
          _view.min32.linkProperty("X",  function() { return mx; }, function(_v) { mx = _v; } ); // HtmlView Page linking property 'X' for element 'min32'
          _view.min32.linkProperty("Y",  function() { return my; }, function(_v) { my = _v; } ); // HtmlView Page linking property 'Y' for element 'min32'
          _view.min32.linkProperty("Visibility",  function() { return minutehandshow; }, function(_v) { minutehandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'min32'
          _view.min32.setAction("OnDrag", function(_data,_info) {
  _pause(); // must pause to avoid bugs
  //ctam = Math.atan2(mx,my);
  // implement discrete
  //ctam = Math.round(Math.atan2(mx,my)/(2*pi)*60)/60*(2*pi);
  ctam = Math.round(Math.atan2(_info.point[0],_info.point[1])/(2*pi)*60)/60*(2*pi);
  var mxtest = Math.sin(ctam); //new position angles
  var mytest =Math.cos(ctam);
   vmtest = 60/pi2*Math.atan2(mxtest,mytest); //resolve to minute value based on mouse
  if (vmtest <0) { // 31 to 59 sec are return back as -29 and -1
    vmtest = vmtest+60; // clever way to assign 31 to 59 sec
   //vh= vh-1; // test if works for drag from 1 min to 59 min for a decrease in hour
   //t = Math.floor(t/3600)*3600+ vmtest*60;
   }
  else if (vmtest>0) { //about normal 1 to 29 mins
    
  }
  //if ( (vmtest-vms)>0&&_view._format(ctam,"0.0")==0.0){ // does it work? positive crossing
    if ((vmtest-vm)<-40){ //postive direction example 1 - 59
      detect=1;
  // t = Math.floor(t/3600)*3600+3600+ vmtest*60;
  // detect=0; // make it do once only
    }
   else if ((vmtest-vm)>40){ //negative direction example 59 - 1
      detect=-1;
  // t = Math.floor(t/3600)*3600-3600+ vmtest*60;
  // detect=0; // make it do once only
    }
    else {
      detect=0;
    
      }
      
      if (t<0){
        t= t+24*60*60; //fix bug of hour hand rotate wildly
        }
        else {
   // t = Math.floor(t/3600)*3600+ detect*3600+ vmtest*60; // assign value of t based on vmtest
      t = (Math.floor(t/3600)*3600+ detect*3600+ vmtest*60); // assign value of t based on vmtest
      }
  //  _play; // must play now ok
  /*
  if((vmtest-vms)<=10&&(vmtest-vms)>0&&_view._format(ctam,"0.0")==0.0&&detect==0){
     t = Math.floor(t/3600)*3600+3600+ vmtest*60;
     detect =1;
    alert(detect);
  }
  else if(vmtest>=59.5&&ctam==0&&detect==0){
     t = Math.floor(t/3600)*3600-3600+ vmtest*60;
    detect =2;
    alert(detect);
  }
  // detect=0;
  if ( vmtest>5 &&vmtest<55) { // set detect to 0 after some angle
    detect=0;
    }
   
  */
  //store value for drag to work
  // not sure if it still works
  //vms = vmtest;
  //vmtest = 60/pi2*Math.atan2(mxtest,mytest);

}); // HtmlView Page setting action 'OnDrag' for element 'min32'
          _view.hourhand2.linkProperty("SizeX",  function() { return hx; }, function(_v) { hx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'hourhand2'
          _view.hourhand2.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'hourhand2'
          _view.hourhand2.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'hourhand2'
          _view.hourhand2.linkProperty("SizeY",  function() { return hy; }, function(_v) { hy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'hourhand2'
          _view.hr2.linkProperty("X",  function() { return hx; }, function(_v) { hx = _v; } ); // HtmlView Page linking property 'X' for element 'hr2'
          _view.hr2.linkProperty("Y",  function() { return hy; }, function(_v) { hy = _v; } ); // HtmlView Page linking property 'Y' for element 'hr2'
          _view.hr2.setAction("OnDrag", function(_data,_info) {
  //three lines to restrict drag to circle path
  //_info.point
  ctah = Math.atan2(_info.point[0],_info.point[1]);
  //ctah = Math.atan2(hx,hy);
  hx=2.5*Math.sin(ctah); //lookang cannot use Rs variable
  hy=2.5*Math.cos(ctah);
  //vs = Math.round(60/pi2*Math.atan2(sx,sy));
  vh = 12/pi2*Math.atan2(hx,hy); //assign coordinates sx sy to vs
  if (vh <0) { // 31 to 59 sec are return back as -29 and -1
    vh = vh+12; // clever way to assign 31 to 59 sec
    }
    //drag increase when vs>60
    if(Math.abs(vh-vhs)>40){// why 40? strange
   if(vhs>30.){
   //  vh=vh+1;// looks correct
  // if(vss<30.){vm=vm++; // ++ des not work
  //test = -1;
  }
  else if(vhs<30.){
  //  vm--; //  taken out
  //  vh= vh-1;
  //test =1;
  }
  }
  //assign t back with new values of vs
  //t = vs+vm*60+vh*60*60;
  t = vh*60*60;
  //decompose t into the 3 arms
  //vh = (t/3600);
  //vm = ((t%(3600))/60);
  //vs = ((t%(3600))%60);
  // make arms move
  //sx = Rs*Math.sin(vs/60*pi2);
  //sy = Rs*Math.cos(vs/60*pi2);
  //mx=Rm*Math.sin(vm/60*pi2);
  //my=Rm*Math.cos(vm/60*pi2);
  //hx=Rh*Math.sin(vh/12*pi2);
  //hy=Rh*Math.cos(vh/12*pi2);
  //store value for drag to work
  vhs = vh;

}); // HtmlView Page setting action 'OnDrag' for element 'hr2'
          _view.group2.linkProperty("X",  function() { return wordsx; }, function(_v) { wordsx = _v; } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.group2.linkProperty("Y",  function() { return wordsy; }, function(_v) { wordsy = _v; } ); // HtmlView Page linking property 'Y' for element 'group2'
          _view.group2.linkProperty("Visibility",  function() { return wordsshow; }, function(_v) { wordsshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group2'
          _view.words.setAction("OnRelease", function(_data,_info) {
  _pause();
  if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(words, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(words);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnRelease' for element 'words'
          _view.words.linkProperty("Text",  function() { return words; }, function(_v) { words = _v; } ); // HtmlView Page linking property 'Text' for element 'words'
          _view.group.linkProperty("X",  function() { return digitalgroupx; }, function(_v) { digitalgroupx = _v; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return digitalgroupy; }, function(_v) { digitalgroupy = _v; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.shape.linkProperty("X",  function() { return digitalx; }, function(_v) { digitalx = _v; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return digitaly; }, function(_v) { digitaly = _v; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.shape.linkProperty("Visibility",  function() { return digitalshow; }, function(_v) { digitalshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shape'
          _view.hrmmss.linkProperty("X",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'X' for element 'hrmmss'
          _view.hrmmss.linkProperty("Y",  function() { return sizey*2; } ); // HtmlView Page linking property 'Y' for element 'hrmmss'
          _view.hrmmss.linkProperty("Visibility",  function() { return digitalshow; }, function(_v) { digitalshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'hrmmss'
          _view.digital.linkProperty("X",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'X' for element 'digital'
          _view.digital.linkProperty("Y",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'Y' for element 'digital'
          _view.digital.linkProperty("Text",  function() { return pad(Math.floor(vh%24))+" : "+pad(Math.floor(vm))+" : "+pad(Math.floor(vs))+ ""; } ); // HtmlView Page linking property 'Text' for element 'digital'
          _view.digital.linkProperty("Visibility",  function() { return digitalshow; }, function(_v) { digitalshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'digital'
          _view.digitalAMPM.linkProperty("X",  function() { return digitalAMPMx; }, function(_v) { digitalAMPMx = _v; } ); // HtmlView Page linking property 'X' for element 'digitalAMPM'
          _view.digitalAMPM.linkProperty("Y",  function() { return digitalAMPMy; }, function(_v) { digitalAMPMy = _v; } ); // HtmlView Page linking property 'Y' for element 'digitalAMPM'
          _view.digitalAMPM.linkProperty("Visibility",  function() { return digitalshow2; }, function(_v) { digitalshow2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'digitalAMPM'
          _view.shape2.setAction("OnRelease", function(_data,_info) {
  _pause();
  if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(ampmtext, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(ampmtext);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnRelease' for element 'shape2'
          _view.shape2.linkProperty("SizeX",  function() { return sizex*10; } ); // HtmlView Page linking property 'SizeX' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return -sizey2; } ); // HtmlView Page linking property 'Y' for element 'shape2'
          _view.shape2.linkProperty("SizeY",  function() { return sizey*3; } ); // HtmlView Page linking property 'SizeY' for element 'shape2'
          _view.hrmmss2.linkProperty("Y",  function() { return sizey2; }, function(_v) { sizey2 = _v; } ); // HtmlView Page linking property 'Y' for element 'hrmmss2'
          _view.HH.linkProperty("X",  function() { return -sizex*2; } ); // HtmlView Page linking property 'X' for element 'HH'
          _view.HH.linkProperty("Y",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'Y' for element 'HH'
          _view.HH.linkProperty("SizeY",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'HH'
          _view.MM.linkProperty("X",  function() { return sizex2; }, function(_v) { sizex2 = _v; } ); // HtmlView Page linking property 'X' for element 'MM'
          _view.MM.linkProperty("Y",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'Y' for element 'MM'
          _view.MM.linkProperty("SizeY",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'MM'
          _view.SS.linkProperty("X",  function() { return sizex*2; } ); // HtmlView Page linking property 'X' for element 'SS'
          _view.SS.linkProperty("Y",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'Y' for element 'SS'
          _view.SS.linkProperty("Visibility",  function() { return secondhandshow; }, function(_v) { secondhandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'SS'
          _view.SS.linkProperty("SizeY",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'SS'
          _view.digital22.linkProperty("Y",  function() { return -sizey*2; } ); // HtmlView Page linking property 'Y' for element 'digital22'
          _view.digital22.linkProperty("Text",  function() { return ampmtext; }, function(_v) { ampmtext = _v; } ); // HtmlView Page linking property 'Text' for element 'digital22'
          _view.HH0012.linkProperty("X",  function() { return -sizex*2; } ); // HtmlView Page linking property 'X' for element 'HH0012'
          _view.HH0012.linkProperty("Text",  function() { return " "+pad(Math.floor(vh12text))+"  :"; } ); // HtmlView Page linking property 'Text' for element 'HH0012'
          _view.MM2.linkProperty("X",  function() { return sizex2; }, function(_v) { sizex2 = _v; } ); // HtmlView Page linking property 'X' for element 'MM2'
          _view.MM2.linkProperty("Text",  function() { return pad(Math.floor(vm))+" :"; } ); // HtmlView Page linking property 'Text' for element 'MM2'
          _view.SS22.linkProperty("X",  function() { return sizex*2; } ); // HtmlView Page linking property 'X' for element 'SS22'
          _view.SS22.linkProperty("Text",  function() { return pad(Math.floor(vs))+""; } ); // HtmlView Page linking property 'Text' for element 'SS22'
          _view.SS22.linkProperty("Visibility",  function() { return secondhandshow; }, function(_v) { secondhandshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'SS22'
          _view.AMPM.linkProperty("X",  function() { return sizex*4; } ); // HtmlView Page linking property 'X' for element 'AMPM'
          _view.AMPM.linkProperty("Visibility",  function() { return vh%24<12; } ); // HtmlView Page linking property 'Visibility' for element 'AMPM'
          _view.AMPM2.linkProperty("X",  function() { return sizex*4; } ); // HtmlView Page linking property 'X' for element 'AMPM2'
          _view.AMPM2.linkProperty("Visibility",  function() { return vh%24 >=12; } ); // HtmlView Page linking property 'Visibility' for element 'AMPM2'
          _view.drag.setAction("OnRelease", function(_data,_info) {
  _pause();
  if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(ampmtext, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(ampmtext);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnRelease' for element 'drag'
          _view.drag.linkProperty("SizeX",  function() { return sizex*10; } ); // HtmlView Page linking property 'SizeX' for element 'drag'
          _view.drag.linkProperty("Y",  function() { return -sizey2; } ); // HtmlView Page linking property 'Y' for element 'drag'
          _view.drag.linkProperty("SizeY",  function() { return sizey*3; } ); // HtmlView Page linking property 'SizeY' for element 'drag'
          _view.angkeA32.linkProperty("PointsY",  function() { return [0,0, Math.sin(ctahminusctam/16),Math.sin(ctahminusctam/8), Math.sin(ctahminusctam*3/16),Math.sin(ctahminusctam/4), Math.sin(ctahminusctam*5/16),Math.sin(ctahminusctam*3/8), Math.sin(ctahminusctam*7/16),Math.sin(ctahminusctam/2), Math.sin(ctahminusctam*9/16),Math.sin(ctahminusctam*5/8), Math.sin(ctahminusctam*11/16),Math.sin(ctahminusctam*3/4), Math.sin(ctahminusctam*13/16),Math.sin(ctahminusctam*7/8), Math.sin(ctahminusctam*15/16),Math.sin(ctahminusctam)]; } ); // HtmlView Page linking property 'PointsY' for element 'angkeA32'
          _view.angkeA32.linkProperty("PointsX",  function() { return [0,1, Math.cos(ctahminusctam/16),Math.cos(ctahminusctam/8), Math.cos(ctahminusctam*3/16),Math.cos(ctahminusctam/4), Math.cos(ctahminusctam*5/16),Math.cos(ctahminusctam*3/8), Math.cos(ctahminusctam*7/16),Math.cos(ctahminusctam/2), Math.cos(ctahminusctam*9/16),Math.cos(ctahminusctam*5/8), Math.cos(ctahminusctam*11/16),Math.cos(ctahminusctam*3/4), Math.cos(ctahminusctam*13/16),Math.cos(ctahminusctam*7/8), Math.cos(ctahminusctam*15/16),Math.cos(ctahminusctam)]; } ); // HtmlView Page linking property 'PointsX' for element 'angkeA32'
          _view.angkeA32.linkProperty("Transformation",  function() { return pi/2-ctah; } ); // HtmlView Page linking property 'Transformation' for element 'angkeA32'
          _view.angkeA32.linkProperty("Visibility",  function() { return angleshow; }, function(_v) { angleshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'angkeA32'
          _view.nightdayshow.linkProperty("Visibility",  function() { return daynightshow; }, function(_v) { daynightshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'nightdayshow'
          _view.morningsunshine.linkProperty("SizeX",  function() { return range/4; } ); // HtmlView Page linking property 'SizeX' for element 'morningsunshine'
          _view.morningsunshine.linkProperty("Visibility",  function() { return vh>=6&&vh<7; } ); // HtmlView Page linking property 'Visibility' for element 'morningsunshine'
          _view.morningsunshine.linkProperty("SizeY",  function() { return range/4; } ); // HtmlView Page linking property 'SizeY' for element 'morningsunshine'
          _view.teeth.linkProperty("SizeX",  function() { return range/4; } ); // HtmlView Page linking property 'SizeX' for element 'teeth'
          _view.teeth.linkProperty("Visibility",  function() { return vh>=7&&vh<8; } ); // HtmlView Page linking property 'Visibility' for element 'teeth'
          _view.teeth.linkProperty("SizeY",  function() { return range/4; } ); // HtmlView Page linking property 'SizeY' for element 'teeth'
          _view.breakfast.linkProperty("SizeX",  function() { return range/4; } ); // HtmlView Page linking property 'SizeX' for element 'breakfast'
          _view.breakfast.linkProperty("Visibility",  function() { return vh>=8&&vh<9; } ); // HtmlView Page linking property 'Visibility' for element 'breakfast'
          _view.breakfast.linkProperty("SizeY",  function() { return range/4; } ); // HtmlView Page linking property 'SizeY' for element 'breakfast'
          _view.school.linkProperty("SizeX",  function() { return range/4; } ); // HtmlView Page linking property 'SizeX' for element 'school'
          _view.school.linkProperty("Visibility",  function() { return vh>=9&&vh<10; } ); // HtmlView Page linking property 'Visibility' for element 'school'
          _view.school.linkProperty("SizeY",  function() { return range/4; } ); // HtmlView Page linking property 'SizeY' for element 'school'
          _view.circlecentre.linkProperty("SizeX",  function() { return D/30; } ); // HtmlView Page linking property 'SizeX' for element 'circlecentre'
          _view.circlecentre.linkProperty("X",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'X' for element 'circlecentre'
          _view.circlecentre.linkProperty("Y",  function() { return zero; }, function(_v) { zero = _v; } ); // HtmlView Page linking property 'Y' for element 'circlecentre'
          _view.circlecentre.linkProperty("SizeY",  function() { return D/30; } ); // HtmlView Page linking property 'SizeY' for element 'circlecentre'
          _view.angles.linkProperty("Visibility",  function() { return angleshow; }, function(_v) { angleshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'angles'
          _view.text.linkProperty("Text",  function() { return angletext; }, function(_v) { angletext = _v; } ); // HtmlView Page linking property 'Text' for element 'text'
          _view.plottingPanelxvst.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("Visibility",  function() { return graph===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanelxvst'
          _view.digitalAMPM2.linkProperty("Visibility",  function() { return digitalshow2; }, function(_v) { digitalshow2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'digitalAMPM2'
          _view.shape22.linkProperty("Visibility",  function() { return digitalshow2; }, function(_v) { digitalshow2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shape22'
          _view.hrmmss22.linkProperty("Y",  function() { return sizey2; }, function(_v) { sizey2 = _v; } ); // HtmlView Page linking property 'Y' for element 'hrmmss22'
          _view.digital222.linkProperty("Y",  function() { return -sizey*2; } ); // HtmlView Page linking property 'Y' for element 'digital222'
          _view.digital222.linkProperty("Text",  function() { return ampmtext; }, function(_v) { ampmtext = _v; } ); // HtmlView Page linking property 'Text' for element 'digital222'
          _view.HH00122.linkProperty("Text",  function() { return " "+pad(Math.floor(vh12text))+"  :"; } ); // HtmlView Page linking property 'Text' for element 'HH00122'
          _view.MM22.linkProperty("Text",  function() { return pad(Math.floor(vm))+" :"; } ); // HtmlView Page linking property 'Text' for element 'MM22'
          _view.SS222.linkProperty("Text",  function() { return pad(Math.floor(vs))+""; } ); // HtmlView Page linking property 'Text' for element 'SS222'
          _view.AMPM3.linkProperty("Visibility",  function() { return vh%24<12; } ); // HtmlView Page linking property 'Visibility' for element 'AMPM3'
          _view.AMPM22.linkProperty("Visibility",  function() { return vh%24 >=12; } ); // HtmlView Page linking property 'Visibility' for element 'AMPM22'
          _view.group4.linkProperty("Visibility",  function() { return digitalshow; }, function(_v) { digitalshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group4'
          _view.digital2.linkProperty("Text",  function() { return pad(Math.floor(vh%24))+" : "+pad(Math.floor(vm))+" : "+pad(Math.floor(vs))+ ""; } ); // HtmlView Page linking property 'Text' for element 'digital2'
          _view.field.linkProperty("Value",  function() { return ctam; }, function(_v) { ctam = _v; } ); // HtmlView Page linking property 'Value' for element 'field'
          _view.field2.linkProperty("Value",  function() { return vm; }, function(_v) { vm = _v; } ); // HtmlView Page linking property 'Value' for element 'field2'
          _view.field3.linkProperty("Value",  function() { return vms; }, function(_v) { vms = _v; } ); // HtmlView Page linking property 'Value' for element 'field3'
          _view.field4.linkProperty("Value",  function() { return vh; }, function(_v) { vh = _v; } ); // HtmlView Page linking property 'Value' for element 'field4'
          _view.field5.linkProperty("Value",  function() { return cta; }, function(_v) { cta = _v; } ); // HtmlView Page linking property 'Value' for element 'field5'
          _view.field52.linkProperty("Value",  function() { return vmtest; }, function(_v) { vmtest = _v; } ); // HtmlView Page linking property 'Value' for element 'field52'
          _view.field522.linkProperty("Value",  function() { return detect; }, function(_v) { detect = _v; } ); // HtmlView Page linking property 'Value' for element 'field522'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function clockgeogebrawee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = clockgeogebrawee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function clockgeogebrawee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("Font","normal normal 20px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'models'
      .setProperty("Multiple",false) // EJsS HtmlView.HtmlView Page: setting property 'Multiple' for element 'models'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'models'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("CSS",{   "transform":"scaleY(-1)"   }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'resetButton'
      .setProperty("Text","⌫") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"checkanswerButton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'checkanswerButton'
      .setProperty("Background","Orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'checkanswerButton'
      .setProperty("Tooltip","check answer ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'checkanswerButton'
      .setProperty("Text","✓") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'checkanswerButton'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'checkanswerButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"angle", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'angle'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label4", _view.angle) // EJsS HtmlView.HtmlView Page: declaration of element 'label4'
      .setProperty("Text","ϑ =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label4'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'label4'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"angle2", _view.angle) // EJsS HtmlView.HtmlView Page: declaration of element 'angle2'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'angle2'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'angle2'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'angle2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label5", _view.angle) // EJsS HtmlView.HtmlView Page: declaration of element 'label5'
      .setProperty("Text","°") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label5'
      .setProperty("Font","normal normal 3vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'label5'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      .setProperty("Background","Black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"stopwatchoutercircle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stopwatchoutercircle'
      .setProperty("FillColor","LIGHTGRAY") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'stopwatchoutercircle'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'stopwatchoutercircle'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"stopwatchoutercircle22", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stopwatchoutercircle22'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'stopwatchoutercircle22'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'stopwatchoutercircle22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"top", _view.group3) // EJsS HtmlView.HtmlView Page: declaration of element 'top'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'top'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'top'
      .setProperty("Y",4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'top'
      .setProperty("Text"," Hr hand + O'clock") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'top'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'top'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"bottom", _view.group3) // EJsS HtmlView.HtmlView Page: declaration of element 'bottom'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bottom'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'bottom'
      .setProperty("Y",-4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'bottom'
      .setProperty("Text"," half past Hr hand") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'bottom'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'bottom'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"right", _view.group3) // EJsS HtmlView.HtmlView Page: declaration of element 'right'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'right'
      .setProperty("X",4) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'right'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'right'
      .setProperty("Text"," quarter past Hr hand") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'right'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'right'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'right'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"left", _view.group3) // EJsS HtmlView.HtmlView Page: declaration of element 'left'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'left'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'left'
      .setProperty("X",-4) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'left'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'left'
      .setProperty("Text"," quarter to (Hr hand+1)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'left'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'left'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'left'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet'
      .setProperty("MarkEnd","NONE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSet'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet60", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet60'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet60'
      .setProperty("Font","normal normal 49px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'textSet60'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet2'
      .setProperty("Font","normal normal 20px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'textSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet'
      .setProperty("Font","normal normal 49px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"teaching", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'teaching'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"second", _view.teaching) // EJsS HtmlView.HtmlView Page: declaration of element 'second'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'second'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'second'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'second'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'second'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'second'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'second'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"sechand", _view.teaching) // EJsS HtmlView.HtmlView Page: declaration of element 'sechand'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'sechand'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sechand'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'sechand'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"minhand", _view.teaching) // EJsS HtmlView.HtmlView Page: declaration of element 'minhand'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'minhand'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'minhand'
      .setProperty("LineWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'minhand'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"min", _view.teaching) // EJsS HtmlView.HtmlView Page: declaration of element 'min'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'min'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'min'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'min'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'min'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'min'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'min'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'min'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"hourhand", _view.teaching) // EJsS HtmlView.HtmlView Page: declaration of element 'hourhand'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'hourhand'
      .setProperty("MarkEndHeight",50) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndHeight' for element 'hourhand'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hourhand'
      .setProperty("MarkEndWidth",50) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndWidth' for element 'hourhand'
      .setProperty("LineWidth",15) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'hourhand'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hr", _view.teaching) // EJsS HtmlView.HtmlView Page: declaration of element 'hr'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hr'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hr'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hr'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hr'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hr'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hr'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hr'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"nonteaching2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nonteaching2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"second2", _view.nonteaching2) // EJsS HtmlView.HtmlView Page: declaration of element 'second2'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'second2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'second2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'second2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'second2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'second2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'second2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'second2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"sechand22", _view.nonteaching2) // EJsS HtmlView.HtmlView Page: declaration of element 'sechand22'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'sechand22'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'sechand22'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'sechand22'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"minhand2", _view.nonteaching2) // EJsS HtmlView.HtmlView Page: declaration of element 'minhand2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'minhand2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'minhand2'
      .setProperty("LineWidth",10) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'minhand2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"min32", _view.nonteaching2) // EJsS HtmlView.HtmlView Page: declaration of element 'min32'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'min32'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'min32'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'min32'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'min32'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'min32'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'min32'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'min32'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"hourhand2", _view.nonteaching2) // EJsS HtmlView.HtmlView Page: declaration of element 'hourhand2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'hourhand2'
      .setProperty("MarkEndHeight",50) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndHeight' for element 'hourhand2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'hourhand2'
      .setProperty("MarkEndWidth",50) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndWidth' for element 'hourhand2'
      .setProperty("LineWidth",15) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'hourhand2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"hr2", _view.nonteaching2) // EJsS HtmlView.HtmlView Page: declaration of element 'hr2'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'hr2'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'hr2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hr2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'hr2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hr2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hr2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'hr2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"words", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'words'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'words'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'words'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'words'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'words'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'words'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'words'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'words'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'words'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","rgba(0,255,0,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape'
      .setProperty("SizeX",400) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"hrmmss", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'hrmmss'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'hrmmss'
      .setProperty("Text","hr--mm--ss") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'hrmmss'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hrmmss'
      .setProperty("Font","normal normal 20px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'hrmmss'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"digital", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'digital'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'digital'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'digital'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'digital'
      .setProperty("Font","normal normal 20px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'digital'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"digitalAMPM", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'digitalAMPM'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape2'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'shape2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"hrmmss2", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'hrmmss2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'hrmmss2'
      .setProperty("Text","HH--MM--SS___") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'hrmmss2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'hrmmss2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hrmmss2'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'hrmmss2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"HH", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'HH'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'HH'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'HH'
      .setProperty("Text","HH :") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'HH'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'HH'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'HH'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"MM", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'MM'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'MM'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'MM'
      .setProperty("Text","MM :") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'MM'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'MM'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'MM'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"SS", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'SS'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'SS'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'SS'
      .setProperty("Text","SS") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'SS'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'SS'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'SS'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"digital22", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'digital22'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'digital22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'digital22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'digital22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'digital22'
      .setProperty("Font","normal normal 40px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'digital22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"HH0012", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'HH0012'
      .setProperty("FillColor","rgba(50,50,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'HH0012'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'HH0012'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'HH0012'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'HH0012'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'HH0012'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'HH0012'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'HH0012'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'HH0012'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"MM2", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'MM2'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'MM2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'MM2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'MM2'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'MM2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"SS22", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'SS22'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'SS22'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'SS22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'SS22'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'SS22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"AMPM", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'AMPM'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'AMPM'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'AMPM'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'AMPM'
      .setProperty("Text","A.M.") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'AMPM'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'AMPM'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"AMPM2", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'AMPM2'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'AMPM2'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'AMPM2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'AMPM2'
      .setProperty("Text","P.M.") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'AMPM2'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'AMPM2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"drag", _view.digitalAMPM) // EJsS HtmlView.HtmlView Page: declaration of element 'drag'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'drag'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'drag'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'drag'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'drag'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'drag'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'drag'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'drag'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'drag'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"angkeA32", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'angkeA32'
      .setProperty("FillColor","rgba(200,100,100,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'angkeA32'
      .setProperty("SizeX",40) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'angkeA32'
      .setProperty("SizeY",40) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'angkeA32'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'angkeA32'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"nightdayshow", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nightdayshow'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"morningsunshine", _view.nightdayshow) // EJsS HtmlView.HtmlView Page: declaration of element 'morningsunshine'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'morningsunshine'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'morningsunshine'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'morningsunshine'
      .setProperty("ImageUrl","./Clock/320px-Morning_Sun_Rays_(5077976668).jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'morningsunshine'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"teeth", _view.nightdayshow) // EJsS HtmlView.HtmlView Page: declaration of element 'teeth'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'teeth'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'teeth'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'teeth'
      .setProperty("ImageUrl","./Clock/320px-Woman_brushing_teeth.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'teeth'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"breakfast", _view.nightdayshow) // EJsS HtmlView.HtmlView Page: declaration of element 'breakfast'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'breakfast'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'breakfast'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'breakfast'
      .setProperty("ImageUrl","./Clock/320px-Breakfast!.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'breakfast'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"school", _view.nightdayshow) // EJsS HtmlView.HtmlView Page: declaration of element 'school'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'school'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'school'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'school'
      .setProperty("ImageUrl","./Clock/Lmspic.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'school'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"circlecentre", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'circlecentre'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'circlecentre'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'circlecentre'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'circlecentre'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"angles", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'angles'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'angles'
      .setProperty("Y",1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'angles'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.angles) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanelxvst'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst'
      .setProperty("YScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst'
      .setProperty("XFixedTick",-0.75) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst'
      .setProperty("Title","Acceleration vs. Position") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanelxvst'
      .setProperty("MaximumX",1.25) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanelxvst'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst'
      .setProperty("TRMessage","AM/PM time") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanelxvst'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst'
      .setProperty("MinimumX",-0.75) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst'
      .setProperty("XTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanelxvst'
      .setProperty("MinimumY",-1) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanelxvst'
      .setProperty("YTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanelxvst'
      .setProperty("TitleY","Acceleration  (m/s²)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst'
      .setProperty("TitleX","Position (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst'
      .setProperty("XScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst'
      .setProperty("BRMessage","standard time") // EJsS HtmlView.HtmlView Page: setting property 'BRMessage' for element 'plottingPanelxvst'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"digitalAMPM2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'digitalAMPM2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'digitalAMPM2'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'digitalAMPM2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape22", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'shape22'
      .setProperty("FillColor","rgba(0,255,0,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape22'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape22'
      .setProperty("SizeX",2.25) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape22'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape22'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape22'
      .setProperty("X",-1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape22'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"hrmmss22", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'hrmmss22'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'hrmmss22'
      .setProperty("Text","HH--MM--SS___") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'hrmmss22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'hrmmss22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'hrmmss22'
      .setProperty("Font","normal normal 40px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'hrmmss22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"HH2", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'HH2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'HH2'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'HH2'
      .setProperty("Y",0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'HH2'
      .setProperty("Text","HH :") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'HH2'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'HH2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"MM3", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'MM3'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'MM3'
      .setProperty("X",-0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'MM3'
      .setProperty("Y",0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'MM3'
      .setProperty("Text","MM :") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'MM3'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'MM3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"SS2", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'SS2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'SS2'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'SS2'
      .setProperty("Y",0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'SS2'
      .setProperty("Text","SS ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'SS2'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'SS2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"digital222", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'digital222'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'digital222'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'digital222'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'digital222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'digital222'
      .setProperty("Font","normal normal 40px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'digital222'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"HH00122", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'HH00122'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'HH00122'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'HH00122'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'HH00122'
      .setProperty("Y",-0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'HH00122'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'HH00122'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"MM22", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'MM22'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'MM22'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'MM22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'MM22'
      .setProperty("Y",-0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'MM22'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'MM22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"SS222", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'SS222'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'SS222'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'SS222'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'SS222'
      .setProperty("Y",-0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'SS222'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'SS222'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"AMPM3", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'AMPM3'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'AMPM3'
      .setProperty("X",1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'AMPM3'
      .setProperty("Y",-0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'AMPM3'
      .setProperty("Text","AM") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'AMPM3'
      .setProperty("Font","normal normal 20px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'AMPM3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"AMPM22", _view.digitalAMPM2) // EJsS HtmlView.HtmlView Page: declaration of element 'AMPM22'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'AMPM22'
      .setProperty("X",1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'AMPM22'
      .setProperty("Y",-0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'AMPM22'
      .setProperty("Text","PM") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'AMPM22'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'AMPM22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group4", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'group4'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'group4'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'group4'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape3", _view.group4) // EJsS HtmlView.HtmlView Page: declaration of element 'shape3'
      .setProperty("FillColor","rgba(0,255,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape3'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape3'
      .setProperty("SizeX",1.75) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape3'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape3'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape3'
      .setProperty("X",-1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape3'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape3'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"hrmmss3", _view.group4) // EJsS HtmlView.HtmlView Page: declaration of element 'hrmmss3'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'hrmmss3'
      .setProperty("Y",0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'hrmmss3'
      .setProperty("Text","hr--mm--ss") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'hrmmss3'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'hrmmss3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"digital2", _view.group4) // EJsS HtmlView.HtmlView Page: declaration of element 'digital2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'digital2'
      .setProperty("Y",-0.25) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'digital2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'digital2'
      .setProperty("Font","normal normal 30px digital-7") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'digital2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"debug", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'debug'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'debug'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'field'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field2", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'field2'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label2", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'label2'
      .setProperty("Text","vms=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field3", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'field3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field3'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field4", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'field4'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field4'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field5", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'field5'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field5'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
      .setProperty("Text","vmtest=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field52", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'field52'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field52'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'field52'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label3", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'label3'
      .setProperty("Text","detect=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label3'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field522", _view.debug) // EJsS HtmlView.HtmlView Page: declaration of element 'field522'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field522'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'field522'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Clock Teaching Model<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_clockgeogebrawee/Clock/Screen Shot 2017-02-06 at 12.40.23 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_clockgeogebrawee/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_clockgeogebrawee/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_clockgeogebrawee/01authorFelix_J_Garcia_Clemente.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_clockgeogebrawee/01authorPacoEsquembre2011.png" />
 weelookang@gmail.com; Fu-Kwun Hwang; Felix J. Garcia-Clemente; Francisco (Paco) Esquembre
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, CC-BY-NC-SA.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new clockgeogebrawee("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_clockgeogebrawee/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
