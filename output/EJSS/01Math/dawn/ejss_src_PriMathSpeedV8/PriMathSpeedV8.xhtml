<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Primary Math Speed</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PriMathSpeedV8(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var font; // EjsS Model.Variables.Town.font
  var town_size; // EjsS Model.Variables.Town.town_size
  var town_starty; // EjsS Model.Variables.Town.town_starty
  var townB_x; // EjsS Model.Variables.Town.townB_x
  var townA_x; // EjsS Model.Variables.Town.townA_x
  var zero; // EjsS Model.Variables.Town.zero
  var msg_coll; // EjsS Model.Variables.Town.msg_coll
  var coll_time; // EjsS Model.Variables.Town.coll_time
  var town_time; // EjsS Model.Variables.Town.town_time
  var min_x; // EjsS Model.Variables.Town.min_x
  var max_x; // EjsS Model.Variables.Town.max_x
  var min_y; // EjsS Model.Variables.Town.min_y
  var max_y; // EjsS Model.Variables.Town.max_y
  var size; // EjsS Model.Variables.Town.size
  var townlabel_y; // EjsS Model.Variables.Town.townlabel_y

  var dragmex; // EjsS Model.Variables.dragme.dragmex
  var dragmexs; // EjsS Model.Variables.dragme.dragmexs
  var dragmey; // EjsS Model.Variables.dragme.dragmey
  var dragemetrue; // EjsS Model.Variables.dragme.dragemetrue
  var dragemetrue2; // EjsS Model.Variables.dragme.dragemetrue2

  var a; // EjsS Model.Variables.transformunicode.a
  var b; // EjsS Model.Variables.transformunicode.b
  var c; // EjsS Model.Variables.transformunicode.c
  var d; // EjsS Model.Variables.transformunicode.d
  var e; // EjsS Model.Variables.transformunicode.e
  var f; // EjsS Model.Variables.transformunicode.f

  var offset_pos; // EjsS Model.Variables.Display.offset_pos
  var offset_dist; // EjsS Model.Variables.Display.offset_dist
  var offset_txt; // EjsS Model.Variables.Display.offset_txt
  var show_distA; // EjsS Model.Variables.Display.show_distA
  var show_distB; // EjsS Model.Variables.Display.show_distB
  var show_objmove; // EjsS Model.Variables.Display.show_objmove
  var abt2meetmsg; // EjsS Model.Variables.Display.abt2meetmsg
  var abt2meetstart; // EjsS Model.Variables.Display.abt2meetstart
  var show_initialA; // EjsS Model.Variables.Display.show_initialA
  var show_hourly; // EjsS Model.Variables.Display.show_hourly
  var show_initialB; // EjsS Model.Variables.Display.show_initialB
  var show_initial; // EjsS Model.Variables.Display.show_initial
  var enable_B; // EjsS Model.Variables.Display.enable_B
  var show_label; // EjsS Model.Variables.Display.show_label
  var has_notstarted; // EjsS Model.Variables.Display.has_notstarted
  var show_distbtwobj; // EjsS Model.Variables.Display.show_distbtwobj

  var time; // EjsS Model.Variables.Time.time
  var dt; // EjsS Model.Variables.Time.dt
  var abt2meet; // EjsS Model.Variables.Time.abt2meet
  var faster; // EjsS Model.Variables.Time.faster
  var slower; // EjsS Model.Variables.Time.slower
  var counter; // EjsS Model.Variables.Time.counter
  var stop_sim_time; // EjsS Model.Variables.Time.stop_sim_time
  var stop_sim_time0; // EjsS Model.Variables.Time.stop_sim_time0
  var stop_sim_obj1; // EjsS Model.Variables.Time.stop_sim_obj1
  var stop_sim_obj2; // EjsS Model.Variables.Time.stop_sim_obj2
  var msg; // EjsS Model.Variables.Time.msg
  var stop_sim_hr; // EjsS Model.Variables.Time.stop_sim_hr
  var stop_sim_min; // EjsS Model.Variables.Time.stop_sim_min

  var WORKING_1; // EjsS Model.Variables.Object.WORKING_1
  var WORKING_2; // EjsS Model.Variables.Object.WORKING_2
  var ANS_1; // EjsS Model.Variables.Object.ANS_1
  var ANS_2; // EjsS Model.Variables.Object.ANS_2
  var MAX_OBJ; // EjsS Model.Variables.Object.MAX_OBJ
  var MAX_VELCHG; // EjsS Model.Variables.Object.MAX_VELCHG
  var obj1_x; // EjsS Model.Variables.Object.obj1_x
  var obj1_x0; // EjsS Model.Variables.Object.obj1_x0
  var obj1_y; // EjsS Model.Variables.Object.obj1_y
  var obj2_x; // EjsS Model.Variables.Object.obj2_x
  var obj2_x0; // EjsS Model.Variables.Object.obj2_x0
  var obj2_y; // EjsS Model.Variables.Object.obj2_y
  var size_x; // EjsS Model.Variables.Object.size_x
  var size_y; // EjsS Model.Variables.Object.size_y
  var obj1_distmoved; // EjsS Model.Variables.Object.obj1_distmoved
  var obj2_distmoved; // EjsS Model.Variables.Object.obj2_distmoved
  var obj1_distfromB; // EjsS Model.Variables.Object.obj1_distfromB
  var obj2_distfromB; // EjsS Model.Variables.Object.obj2_distfromB
  var obj_btw_2; // EjsS Model.Variables.Object.obj_btw_2
  var obj_btw_1; // EjsS Model.Variables.Object.obj_btw_1
  var obj_vel; // EjsS Model.Variables.Object.obj_vel
  var obj_vel_act; // EjsS Model.Variables.Object.obj_vel_act
  var obj_velchg_time; // EjsS Model.Variables.Object.obj_velchg_time
  var obj_startpos; // EjsS Model.Variables.Object.obj_startpos
  var obj_towardsA; // EjsS Model.Variables.Object.obj_towardsA
  var obj_stop; // EjsS Model.Variables.Object.obj_stop
  var obj_UTurn; // EjsS Model.Variables.Object.obj_UTurn
  var obj_direction; // EjsS Model.Variables.Object.obj_direction
  var obj_distmsg; // EjsS Model.Variables.Object.obj_distmsg
  var obj_reachtown; // EjsS Model.Variables.Object.obj_reachtown
  var state; // EjsS Model.Variables.Object.state
  var show_obj1_A; // EjsS Model.Variables.Object.show_obj1_A
  var show_obj2_A; // EjsS Model.Variables.Object.show_obj2_A
  var show_obj1_B; // EjsS Model.Variables.Object.show_obj1_B
  var show_obj2_B; // EjsS Model.Variables.Object.show_obj2_B

  var U_1; // EjsS Model.Variables.temp.U_1
  var A_1; // EjsS Model.Variables.temp.A_1
  var T_1; // EjsS Model.Variables.temp.T_1
  var P_1; // EjsS Model.Variables.temp.P_1
  var V_1; // EjsS Model.Variables.temp.V_1
  var V_1s; // EjsS Model.Variables.temp.V_1s
  var U_2; // EjsS Model.Variables.temp.U_2
  var A_2; // EjsS Model.Variables.temp.A_2
  var T_2; // EjsS Model.Variables.temp.T_2
  var P_2; // EjsS Model.Variables.temp.P_2
  var V_2; // EjsS Model.Variables.temp.V_2
  var V_2s; // EjsS Model.Variables.temp.V_2s
  var temp; // EjsS Model.Variables.temp.temp

  var Msg; // EjsS Model.Variables.GroupArrow.Msg
  var obj1_arrow1; // EjsS Model.Variables.GroupArrow.obj1_arrow1
  var obj1_size1; // EjsS Model.Variables.GroupArrow.obj1_size1
  var obj1_arrow2; // EjsS Model.Variables.GroupArrow.obj1_arrow2
  var obj1_size2; // EjsS Model.Variables.GroupArrow.obj1_size2
  var obj2_arrow1; // EjsS Model.Variables.GroupArrow.obj2_arrow1
  var obj2_size1; // EjsS Model.Variables.GroupArrow.obj2_size1
  var obj2_arrow2; // EjsS Model.Variables.GroupArrow.obj2_arrow2
  var obj2_size2; // EjsS Model.Variables.GroupArrow.obj2_size2
  var obj2_x_txtpos; // EjsS Model.Variables.GroupArrow.obj2_x_txtpos
  var obj1_x_txtpos; // EjsS Model.Variables.GroupArrow.obj1_x_txtpos
  var obj1_distmsg; // EjsS Model.Variables.GroupArrow.obj1_distmsg
  var obj2_distmsg; // EjsS Model.Variables.GroupArrow.obj2_distmsg
  var obj1_arrow_pos; // EjsS Model.Variables.GroupArrow.obj1_arrow_pos
  var obj2_arrow_pos; // EjsS Model.Variables.GroupArrow.obj2_arrow_pos
  var obj1_dist_text; // EjsS Model.Variables.GroupArrow.obj1_dist_text
  var obj2_dist_text; // EjsS Model.Variables.GroupArrow.obj2_dist_text

  var show_obj1_wkmv; // EjsS Model.Variables.showWorking.show_obj1_wkmv
  var show_obj1_wkfrA; // EjsS Model.Variables.showWorking.show_obj1_wkfrA
  var show_obj2_wkmv; // EjsS Model.Variables.showWorking.show_obj2_wkmv
  var show_obj2_wkfrA; // EjsS Model.Variables.showWorking.show_obj2_wkfrA

  var selected; // EjsS Model.Variables.layout.selected
  var selected1; // EjsS Model.Variables.layout.selected1
  var selected2; // EjsS Model.Variables.layout.selected2
  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var datashow; // EjsS Model.Variables.layout.datashow
  var datashow2; // EjsS Model.Variables.layout.datashow2

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];
  var _ODEi_evolution2;
  var userEvents2=[];

  _model.getOdes = function() { return [_ODEi_evolution1,_ODEi_evolution2]; };

  _model.removeEvents = function(){
    userEvents1=[];
    userEvents2=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      font : font,
      town_size : town_size,
      town_starty : town_starty,
      townB_x : townB_x,
      townA_x : townA_x,
      zero : zero,
      msg_coll : msg_coll,
      coll_time : coll_time,
      town_time : town_time,
      min_x : min_x,
      max_x : max_x,
      min_y : min_y,
      max_y : max_y,
      size : size,
      townlabel_y : townlabel_y,
      dragmex : dragmex,
      dragmexs : dragmexs,
      dragmey : dragmey,
      dragemetrue : dragemetrue,
      dragemetrue2 : dragemetrue2,
      a : a,
      b : b,
      c : c,
      d : d,
      e : e,
      f : f,
      offset_pos : offset_pos,
      offset_dist : offset_dist,
      offset_txt : offset_txt,
      show_distA : show_distA,
      show_distB : show_distB,
      show_objmove : show_objmove,
      abt2meetmsg : abt2meetmsg,
      abt2meetstart : abt2meetstart,
      show_initialA : show_initialA,
      show_hourly : show_hourly,
      show_initialB : show_initialB,
      show_initial : show_initial,
      enable_B : enable_B,
      show_label : show_label,
      has_notstarted : has_notstarted,
      show_distbtwobj : show_distbtwobj,
      time : time,
      dt : dt,
      abt2meet : abt2meet,
      faster : faster,
      slower : slower,
      counter : counter,
      stop_sim_time : stop_sim_time,
      stop_sim_time0 : stop_sim_time0,
      stop_sim_obj1 : stop_sim_obj1,
      stop_sim_obj2 : stop_sim_obj2,
      msg : msg,
      stop_sim_hr : stop_sim_hr,
      stop_sim_min : stop_sim_min,
      WORKING_1 : WORKING_1,
      WORKING_2 : WORKING_2,
      ANS_1 : ANS_1,
      ANS_2 : ANS_2,
      MAX_OBJ : MAX_OBJ,
      MAX_VELCHG : MAX_VELCHG,
      obj1_x : obj1_x,
      obj1_x0 : obj1_x0,
      obj1_y : obj1_y,
      obj2_x : obj2_x,
      obj2_x0 : obj2_x0,
      obj2_y : obj2_y,
      size_x : size_x,
      size_y : size_y,
      obj1_distmoved : obj1_distmoved,
      obj2_distmoved : obj2_distmoved,
      obj1_distfromB : obj1_distfromB,
      obj2_distfromB : obj2_distfromB,
      obj_btw_2 : obj_btw_2,
      obj_btw_1 : obj_btw_1,
      obj_vel : obj_vel,
      obj_vel_act : obj_vel_act,
      obj_velchg_time : obj_velchg_time,
      obj_startpos : obj_startpos,
      obj_towardsA : obj_towardsA,
      obj_stop : obj_stop,
      obj_UTurn : obj_UTurn,
      obj_direction : obj_direction,
      obj_distmsg : obj_distmsg,
      obj_reachtown : obj_reachtown,
      state : state,
      show_obj1_A : show_obj1_A,
      show_obj2_A : show_obj2_A,
      show_obj1_B : show_obj1_B,
      show_obj2_B : show_obj2_B,
      U_1 : U_1,
      A_1 : A_1,
      T_1 : T_1,
      P_1 : P_1,
      V_1 : V_1,
      V_1s : V_1s,
      U_2 : U_2,
      A_2 : A_2,
      T_2 : T_2,
      P_2 : P_2,
      V_2 : V_2,
      V_2s : V_2s,
      temp : temp,
      Msg : Msg,
      obj1_arrow1 : obj1_arrow1,
      obj1_size1 : obj1_size1,
      obj1_arrow2 : obj1_arrow2,
      obj1_size2 : obj1_size2,
      obj2_arrow1 : obj2_arrow1,
      obj2_size1 : obj2_size1,
      obj2_arrow2 : obj2_arrow2,
      obj2_size2 : obj2_size2,
      obj2_x_txtpos : obj2_x_txtpos,
      obj1_x_txtpos : obj1_x_txtpos,
      obj1_distmsg : obj1_distmsg,
      obj2_distmsg : obj2_distmsg,
      obj1_arrow_pos : obj1_arrow_pos,
      obj2_arrow_pos : obj2_arrow_pos,
      obj1_dist_text : obj1_dist_text,
      obj2_dist_text : obj2_dist_text,
      show_obj1_wkmv : show_obj1_wkmv,
      show_obj1_wkfrA : show_obj1_wkfrA,
      show_obj2_wkmv : show_obj2_wkmv,
      show_obj2_wkfrA : show_obj2_wkfrA,
      selected : selected,
      selected1 : selected1,
      selected2 : selected2,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      disabledworld : disabledworld,
      disabled : disabled,
      datashow : datashow,
      datashow2 : datashow2
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.town_size != "undefined") town_size = json.town_size;
    if(typeof json.town_starty != "undefined") town_starty = json.town_starty;
    if(typeof json.townB_x != "undefined") townB_x = json.townB_x;
    if(typeof json.townA_x != "undefined") townA_x = json.townA_x;
    if(typeof json.zero != "undefined") zero = json.zero;
    if(typeof json.msg_coll != "undefined") msg_coll = json.msg_coll;
    if(typeof json.coll_time != "undefined") coll_time = json.coll_time;
    if(typeof json.town_time != "undefined") town_time = json.town_time;
    if(typeof json.min_x != "undefined") min_x = json.min_x;
    if(typeof json.max_x != "undefined") max_x = json.max_x;
    if(typeof json.min_y != "undefined") min_y = json.min_y;
    if(typeof json.max_y != "undefined") max_y = json.max_y;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.townlabel_y != "undefined") townlabel_y = json.townlabel_y;
    if(typeof json.dragmex != "undefined") dragmex = json.dragmex;
    if(typeof json.dragmexs != "undefined") dragmexs = json.dragmexs;
    if(typeof json.dragmey != "undefined") dragmey = json.dragmey;
    if(typeof json.dragemetrue != "undefined") dragemetrue = json.dragemetrue;
    if(typeof json.dragemetrue2 != "undefined") dragemetrue2 = json.dragemetrue2;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.e != "undefined") e = json.e;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.offset_pos != "undefined") offset_pos = json.offset_pos;
    if(typeof json.offset_dist != "undefined") offset_dist = json.offset_dist;
    if(typeof json.offset_txt != "undefined") offset_txt = json.offset_txt;
    if(typeof json.show_distA != "undefined") show_distA = json.show_distA;
    if(typeof json.show_distB != "undefined") show_distB = json.show_distB;
    if(typeof json.show_objmove != "undefined") show_objmove = json.show_objmove;
    if(typeof json.abt2meetmsg != "undefined") abt2meetmsg = json.abt2meetmsg;
    if(typeof json.abt2meetstart != "undefined") abt2meetstart = json.abt2meetstart;
    if(typeof json.show_initialA != "undefined") show_initialA = json.show_initialA;
    if(typeof json.show_hourly != "undefined") show_hourly = json.show_hourly;
    if(typeof json.show_initialB != "undefined") show_initialB = json.show_initialB;
    if(typeof json.show_initial != "undefined") show_initial = json.show_initial;
    if(typeof json.enable_B != "undefined") enable_B = json.enable_B;
    if(typeof json.show_label != "undefined") show_label = json.show_label;
    if(typeof json.has_notstarted != "undefined") has_notstarted = json.has_notstarted;
    if(typeof json.show_distbtwobj != "undefined") show_distbtwobj = json.show_distbtwobj;
    if(typeof json.time != "undefined") time = json.time;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.abt2meet != "undefined") abt2meet = json.abt2meet;
    if(typeof json.faster != "undefined") faster = json.faster;
    if(typeof json.slower != "undefined") slower = json.slower;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.stop_sim_time != "undefined") stop_sim_time = json.stop_sim_time;
    if(typeof json.stop_sim_time0 != "undefined") stop_sim_time0 = json.stop_sim_time0;
    if(typeof json.stop_sim_obj1 != "undefined") stop_sim_obj1 = json.stop_sim_obj1;
    if(typeof json.stop_sim_obj2 != "undefined") stop_sim_obj2 = json.stop_sim_obj2;
    if(typeof json.msg != "undefined") msg = json.msg;
    if(typeof json.stop_sim_hr != "undefined") stop_sim_hr = json.stop_sim_hr;
    if(typeof json.stop_sim_min != "undefined") stop_sim_min = json.stop_sim_min;
    if(typeof json.WORKING_1 != "undefined") WORKING_1 = json.WORKING_1;
    if(typeof json.WORKING_2 != "undefined") WORKING_2 = json.WORKING_2;
    if(typeof json.ANS_1 != "undefined") ANS_1 = json.ANS_1;
    if(typeof json.ANS_2 != "undefined") ANS_2 = json.ANS_2;
    if(typeof json.MAX_OBJ != "undefined") MAX_OBJ = json.MAX_OBJ;
    if(typeof json.MAX_VELCHG != "undefined") MAX_VELCHG = json.MAX_VELCHG;
    if(typeof json.obj1_x != "undefined") obj1_x = json.obj1_x;
    if(typeof json.obj1_x0 != "undefined") obj1_x0 = json.obj1_x0;
    if(typeof json.obj1_y != "undefined") obj1_y = json.obj1_y;
    if(typeof json.obj2_x != "undefined") obj2_x = json.obj2_x;
    if(typeof json.obj2_x0 != "undefined") obj2_x0 = json.obj2_x0;
    if(typeof json.obj2_y != "undefined") obj2_y = json.obj2_y;
    if(typeof json.size_x != "undefined") size_x = json.size_x;
    if(typeof json.size_y != "undefined") size_y = json.size_y;
    if(typeof json.obj1_distmoved != "undefined") obj1_distmoved = json.obj1_distmoved;
    if(typeof json.obj2_distmoved != "undefined") obj2_distmoved = json.obj2_distmoved;
    if(typeof json.obj1_distfromB != "undefined") obj1_distfromB = json.obj1_distfromB;
    if(typeof json.obj2_distfromB != "undefined") obj2_distfromB = json.obj2_distfromB;
    if(typeof json.obj_btw_2 != "undefined") obj_btw_2 = json.obj_btw_2;
    if(typeof json.obj_btw_1 != "undefined") obj_btw_1 = json.obj_btw_1;
    if(typeof json.obj_vel != "undefined") obj_vel = json.obj_vel;
    if(typeof json.obj_vel_act != "undefined") obj_vel_act = json.obj_vel_act;
    if(typeof json.obj_velchg_time != "undefined") obj_velchg_time = json.obj_velchg_time;
    if(typeof json.obj_startpos != "undefined") obj_startpos = json.obj_startpos;
    if(typeof json.obj_towardsA != "undefined") obj_towardsA = json.obj_towardsA;
    if(typeof json.obj_stop != "undefined") obj_stop = json.obj_stop;
    if(typeof json.obj_UTurn != "undefined") obj_UTurn = json.obj_UTurn;
    if(typeof json.obj_direction != "undefined") obj_direction = json.obj_direction;
    if(typeof json.obj_distmsg != "undefined") obj_distmsg = json.obj_distmsg;
    if(typeof json.obj_reachtown != "undefined") obj_reachtown = json.obj_reachtown;
    if(typeof json.state != "undefined") state = json.state;
    if(typeof json.show_obj1_A != "undefined") show_obj1_A = json.show_obj1_A;
    if(typeof json.show_obj2_A != "undefined") show_obj2_A = json.show_obj2_A;
    if(typeof json.show_obj1_B != "undefined") show_obj1_B = json.show_obj1_B;
    if(typeof json.show_obj2_B != "undefined") show_obj2_B = json.show_obj2_B;
    if(typeof json.U_1 != "undefined") U_1 = json.U_1;
    if(typeof json.A_1 != "undefined") A_1 = json.A_1;
    if(typeof json.T_1 != "undefined") T_1 = json.T_1;
    if(typeof json.P_1 != "undefined") P_1 = json.P_1;
    if(typeof json.V_1 != "undefined") V_1 = json.V_1;
    if(typeof json.V_1s != "undefined") V_1s = json.V_1s;
    if(typeof json.U_2 != "undefined") U_2 = json.U_2;
    if(typeof json.A_2 != "undefined") A_2 = json.A_2;
    if(typeof json.T_2 != "undefined") T_2 = json.T_2;
    if(typeof json.P_2 != "undefined") P_2 = json.P_2;
    if(typeof json.V_2 != "undefined") V_2 = json.V_2;
    if(typeof json.V_2s != "undefined") V_2s = json.V_2s;
    if(typeof json.temp != "undefined") temp = json.temp;
    if(typeof json.Msg != "undefined") Msg = json.Msg;
    if(typeof json.obj1_arrow1 != "undefined") obj1_arrow1 = json.obj1_arrow1;
    if(typeof json.obj1_size1 != "undefined") obj1_size1 = json.obj1_size1;
    if(typeof json.obj1_arrow2 != "undefined") obj1_arrow2 = json.obj1_arrow2;
    if(typeof json.obj1_size2 != "undefined") obj1_size2 = json.obj1_size2;
    if(typeof json.obj2_arrow1 != "undefined") obj2_arrow1 = json.obj2_arrow1;
    if(typeof json.obj2_size1 != "undefined") obj2_size1 = json.obj2_size1;
    if(typeof json.obj2_arrow2 != "undefined") obj2_arrow2 = json.obj2_arrow2;
    if(typeof json.obj2_size2 != "undefined") obj2_size2 = json.obj2_size2;
    if(typeof json.obj2_x_txtpos != "undefined") obj2_x_txtpos = json.obj2_x_txtpos;
    if(typeof json.obj1_x_txtpos != "undefined") obj1_x_txtpos = json.obj1_x_txtpos;
    if(typeof json.obj1_distmsg != "undefined") obj1_distmsg = json.obj1_distmsg;
    if(typeof json.obj2_distmsg != "undefined") obj2_distmsg = json.obj2_distmsg;
    if(typeof json.obj1_arrow_pos != "undefined") obj1_arrow_pos = json.obj1_arrow_pos;
    if(typeof json.obj2_arrow_pos != "undefined") obj2_arrow_pos = json.obj2_arrow_pos;
    if(typeof json.obj1_dist_text != "undefined") obj1_dist_text = json.obj1_dist_text;
    if(typeof json.obj2_dist_text != "undefined") obj2_dist_text = json.obj2_dist_text;
    if(typeof json.show_obj1_wkmv != "undefined") show_obj1_wkmv = json.show_obj1_wkmv;
    if(typeof json.show_obj1_wkfrA != "undefined") show_obj1_wkfrA = json.show_obj1_wkfrA;
    if(typeof json.show_obj2_wkmv != "undefined") show_obj2_wkmv = json.show_obj2_wkmv;
    if(typeof json.show_obj2_wkfrA != "undefined") show_obj2_wkfrA = json.show_obj2_wkfrA;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.selected1 != "undefined") selected1 = json.selected1;
    if(typeof json.selected2 != "undefined") selected2 = json.selected2;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.datashow != "undefined") datashow = json.datashow;
    if(typeof json.datashow2 != "undefined") datashow2 = json.datashow2;
  };

  _model._inputAndPublicParameters = ["font",  "town_size",  "town_starty",  "townB_x",  "townA_x",  "zero",  "msg_coll",  "coll_time",  "town_time",  "min_x",  "max_x",  "min_y",  "max_y",  "size",  "townlabel_y",  "dragmex",  "dragmexs",  "dragmey",  "dragemetrue",  "dragemetrue2",  "a",  "b",  "c",  "d",  "e",  "f",  "offset_pos",  "offset_dist",  "offset_txt",  "show_distA",  "show_distB",  "show_objmove",  "abt2meetmsg",  "abt2meetstart",  "show_initialA",  "show_hourly",  "show_initialB",  "show_initial",  "enable_B",  "show_label",  "has_notstarted",  "show_distbtwobj",  "time",  "dt",  "abt2meet",  "faster",  "slower",  "counter",  "stop_sim_time",  "stop_sim_time0",  "stop_sim_obj1",  "stop_sim_obj2",  "msg",  "stop_sim_hr",  "stop_sim_min",  "WORKING_1",  "WORKING_2",  "ANS_1",  "ANS_2",  "MAX_OBJ",  "MAX_VELCHG",  "obj1_x",  "obj1_x0",  "obj1_y",  "obj2_x",  "obj2_x0",  "obj2_y",  "size_x",  "size_y",  "obj1_distmoved",  "obj2_distmoved",  "obj1_distfromB",  "obj2_distfromB",  "obj_btw_2",  "obj_btw_1",  "obj_vel",  "obj_vel_act",  "obj_velchg_time",  "obj_startpos",  "obj_towardsA",  "obj_stop",  "obj_UTurn",  "obj_direction",  "obj_distmsg",  "obj_reachtown",  "state",  "show_obj1_A",  "show_obj2_A",  "show_obj1_B",  "show_obj2_B",  "U_1",  "A_1",  "T_1",  "P_1",  "V_1",  "V_1s",  "U_2",  "A_2",  "T_2",  "P_2",  "V_2",  "V_2s",  "temp",  "Msg",  "obj1_arrow1",  "obj1_size1",  "obj1_arrow2",  "obj1_size2",  "obj2_arrow1",  "obj2_size1",  "obj2_arrow2",  "obj2_size2",  "obj2_x_txtpos",  "obj1_x_txtpos",  "obj1_distmsg",  "obj2_distmsg",  "obj1_arrow_pos",  "obj2_arrow_pos",  "obj1_dist_text",  "obj2_dist_text",  "show_obj1_wkmv",  "show_obj1_wkfrA",  "show_obj2_wkmv",  "show_obj2_wkfrA",  "selected",  "selected1",  "selected2",  "isAndroid",  "Width",  "Height",  "Width1",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "datashow",  "datashow2"]; 

  _model._outputAndPublicParameters = ["font",  "town_size",  "town_starty",  "townB_x",  "townA_x",  "zero",  "msg_coll",  "coll_time",  "town_time",  "min_x",  "max_x",  "min_y",  "max_y",  "size",  "townlabel_y",  "dragmex",  "dragmexs",  "dragmey",  "dragemetrue",  "dragemetrue2",  "a",  "b",  "c",  "d",  "e",  "f",  "offset_pos",  "offset_dist",  "offset_txt",  "show_distA",  "show_distB",  "show_objmove",  "abt2meetmsg",  "abt2meetstart",  "show_initialA",  "show_hourly",  "show_initialB",  "show_initial",  "enable_B",  "show_label",  "has_notstarted",  "show_distbtwobj",  "time",  "dt",  "abt2meet",  "faster",  "slower",  "counter",  "stop_sim_time",  "stop_sim_time0",  "stop_sim_obj1",  "stop_sim_obj2",  "msg",  "stop_sim_hr",  "stop_sim_min",  "WORKING_1",  "WORKING_2",  "ANS_1",  "ANS_2",  "MAX_OBJ",  "MAX_VELCHG",  "obj1_x",  "obj1_x0",  "obj1_y",  "obj2_x",  "obj2_x0",  "obj2_y",  "size_x",  "size_y",  "obj1_distmoved",  "obj2_distmoved",  "obj1_distfromB",  "obj2_distfromB",  "obj_btw_2",  "obj_btw_1",  "obj_vel",  "obj_vel_act",  "obj_velchg_time",  "obj_startpos",  "obj_towardsA",  "obj_stop",  "obj_UTurn",  "obj_direction",  "obj_distmsg",  "obj_reachtown",  "state",  "show_obj1_A",  "show_obj2_A",  "show_obj1_B",  "show_obj2_B",  "U_1",  "A_1",  "T_1",  "P_1",  "V_1",  "V_1s",  "U_2",  "A_2",  "T_2",  "P_2",  "V_2",  "V_2s",  "temp",  "Msg",  "obj1_arrow1",  "obj1_size1",  "obj1_arrow2",  "obj1_size2",  "obj2_arrow1",  "obj2_size1",  "obj2_arrow2",  "obj2_size2",  "obj2_x_txtpos",  "obj1_x_txtpos",  "obj1_distmsg",  "obj2_distmsg",  "obj1_arrow_pos",  "obj2_arrow_pos",  "obj1_dist_text",  "obj2_dist_text",  "show_obj1_wkmv",  "show_obj1_wkfrA",  "show_obj2_wkmv",  "show_obj2_wkfrA",  "selected",  "selected1",  "selected2",  "isAndroid",  "Width",  "Height",  "Width1",  "xvst",  "vvst",  "avst",  "disabledworld",  "disabled",  "datashow",  "datashow2"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Settings"] = true;
    __pagesEnabled["menu"] = true;
    __pagesEnabled["Speed 2"] = true;
    __pagesEnabled["Obj1ReachTownA"] = true;
    __pagesEnabled["Obj2ReachTownA"] = true;
    __pagesEnabled["Obj1ReachTownB"] = true;
    __pagesEnabled["Obj2ReachTownB"] = true;
    __pagesEnabled["StopSim"] = true;
    __pagesEnabled["ObjectMeet"] = true;
    __pagesEnabled["StopObj2_Dist"] = true;
    __pagesEnabled["StopObj1_Dist"] = true;
    __pagesEnabled["Pausing"] = false;
    __pagesEnabled["Speed"] = false;
    __pagesEnabled["Obj1ReachTownA"] = true;
    __pagesEnabled["Obj2ReachTownA"] = true;
    __pagesEnabled["Obj1ReachTownB"] = true;
    __pagesEnabled["Obj2ReachTownB"] = true;
    __pagesEnabled["StopSim"] = true;
    __pagesEnabled["ObjectMeet"] = true;
    __pagesEnabled["StopObj2_Dist"] = true;
    __pagesEnabled["StopObj1_Dist"] = true;
    __pagesEnabled["Hourly"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["checkDirection"] = true;
  });

  _model.addToReset(function() {
    font = "normal normal 1.2vw "; // EjsS Model.Variables.Town.font
    town_size = 600; // EjsS Model.Variables.Town.town_size
    town_starty = -160; // EjsS Model.Variables.Town.town_starty
    townB_x = 150.0; // EjsS Model.Variables.Town.townB_x
    townA_x = 0; // EjsS Model.Variables.Town.townA_x
    zero = 0.0000001; // EjsS Model.Variables.Town.zero
    msg_coll = ""; // EjsS Model.Variables.Town.msg_coll
    coll_time = 0; // EjsS Model.Variables.Town.coll_time
    town_time = 0; // EjsS Model.Variables.Town.town_time
    min_x = -10; // EjsS Model.Variables.Town.min_x
    max_x = townB_x+10; // EjsS Model.Variables.Town.max_x
    min_y = -50; // EjsS Model.Variables.Town.min_y
    max_y = 450; // EjsS Model.Variables.Town.max_y
    size = (max_x-min_x)/20; // EjsS Model.Variables.Town.size
    townlabel_y = 350; // EjsS Model.Variables.Town.townlabel_y
  });

  _model.addToReset(function() {
    dragmex = size*15*Math.random(); // EjsS Model.Variables.dragme.dragmex
    dragmexs = dragmex; // EjsS Model.Variables.dragme.dragmexs
    dragmey = max_y*3/4; // EjsS Model.Variables.dragme.dragmey
    dragemetrue = false; // EjsS Model.Variables.dragme.dragemetrue
    dragemetrue2 = false; // EjsS Model.Variables.dragme.dragemetrue2
  });

  _model.addToReset(function() {
    a = -1; // EjsS Model.Variables.transformunicode.a
    b = 0; // EjsS Model.Variables.transformunicode.b
    c = 0; // EjsS Model.Variables.transformunicode.c
    d = 1; // EjsS Model.Variables.transformunicode.d
    e = 0; // EjsS Model.Variables.transformunicode.e
    f = 0; // EjsS Model.Variables.transformunicode.f
  });

  _model.addToReset(function() {
    offset_pos = 80; // EjsS Model.Variables.Display.offset_pos
    offset_dist = 10; // EjsS Model.Variables.Display.offset_dist
    offset_txt = 15; // EjsS Model.Variables.Display.offset_txt
    show_distA = true; // EjsS Model.Variables.Display.show_distA
    show_distB = true; // EjsS Model.Variables.Display.show_distB
    show_objmove = true; // EjsS Model.Variables.Display.show_objmove
    abt2meetmsg = ""; // EjsS Model.Variables.Display.abt2meetmsg
    abt2meetstart = 0; // EjsS Model.Variables.Display.abt2meetstart
    show_initialA = false; // EjsS Model.Variables.Display.show_initialA
    show_hourly = true; // EjsS Model.Variables.Display.show_hourly
    show_initialB = false; // EjsS Model.Variables.Display.show_initialB
    show_initial = false; // EjsS Model.Variables.Display.show_initial
    enable_B = true; // EjsS Model.Variables.Display.enable_B
    show_label = false; // EjsS Model.Variables.Display.show_label
    has_notstarted = true; // EjsS Model.Variables.Display.has_notstarted
    show_distbtwobj = true; // EjsS Model.Variables.Display.show_distbtwobj
  });

  _model.addToReset(function() {
    time = 0; // EjsS Model.Variables.Time.time
    dt = 1; // EjsS Model.Variables.Time.dt
    abt2meet = 0; // EjsS Model.Variables.Time.abt2meet
    faster = true; // EjsS Model.Variables.Time.faster
    slower = false; // EjsS Model.Variables.Time.slower
    counter = 60; // EjsS Model.Variables.Time.counter
    stop_sim_time = 0; // EjsS Model.Variables.Time.stop_sim_time
    stop_sim_time0 = stop_sim_time; // EjsS Model.Variables.Time.stop_sim_time0
    stop_sim_obj1 = 0; // EjsS Model.Variables.Time.stop_sim_obj1
    stop_sim_obj2 = 0; // EjsS Model.Variables.Time.stop_sim_obj2
    msg = ""; // EjsS Model.Variables.Time.msg
    stop_sim_hr = 0; // EjsS Model.Variables.Time.stop_sim_hr
    stop_sim_min = 0; // EjsS Model.Variables.Time.stop_sim_min
  });

  _model.addToReset(function() {
    WORKING_1 = 0; // EjsS Model.Variables.Object.WORKING_1
    WORKING_2 = 1; // EjsS Model.Variables.Object.WORKING_2
    ANS_1 = 2; // EjsS Model.Variables.Object.ANS_1
    ANS_2 = 3; // EjsS Model.Variables.Object.ANS_2
    MAX_OBJ = 2; // EjsS Model.Variables.Object.MAX_OBJ
    MAX_VELCHG = 10; // EjsS Model.Variables.Object.MAX_VELCHG
    obj1_x = 0; // EjsS Model.Variables.Object.obj1_x
    obj1_x0 = 0; // EjsS Model.Variables.Object.obj1_x0
    obj1_y = 0; // EjsS Model.Variables.Object.obj1_y
    obj2_x = 0; // EjsS Model.Variables.Object.obj2_x
    obj2_x0 = 0; // EjsS Model.Variables.Object.obj2_x0
    obj2_y = obj1_y+ 250; // EjsS Model.Variables.Object.obj2_y
    size_x = 1.2*townB_x*0.02; // EjsS Model.Variables.Object.size_x
    size_y = 30; // EjsS Model.Variables.Object.size_y
    obj1_distmoved = 0; // EjsS Model.Variables.Object.obj1_distmoved
    obj2_distmoved = 0; // EjsS Model.Variables.Object.obj2_distmoved
    obj1_distfromB = 0; // EjsS Model.Variables.Object.obj1_distfromB
    obj2_distfromB = 0; // EjsS Model.Variables.Object.obj2_distfromB
    obj_btw_2 = obj1_x; // EjsS Model.Variables.Object.obj_btw_2
    obj_btw_1 = obj1_x; // EjsS Model.Variables.Object.obj_btw_1
    obj_vel = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_vel
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_vel
        obj_vel[_i0] = [];
        for (_i1=0; _i1<MAX_VELCHG; _i1+=1) {  // EjsS Model.Variables.Object.obj_vel
          obj_vel[_i0][_i1] = 100;  // EjsS Model.Variables.Object.obj_vel
        }
      }
    }());
    obj_vel_act = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_vel_act
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_vel_act
        obj_vel_act[_i0] = [];
        for (_i1=0; _i1<MAX_VELCHG; _i1+=1) {  // EjsS Model.Variables.Object.obj_vel_act
          obj_vel_act[_i0][_i1] = 100;  // EjsS Model.Variables.Object.obj_vel_act
        }
      }
    }());
    obj_velchg_time = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_velchg_time
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_velchg_time
        obj_velchg_time[_i0] = [];
        for (_i1=0; _i1<MAX_VELCHG; _i1+=1) {  // EjsS Model.Variables.Object.obj_velchg_time
          obj_velchg_time[_i0][_i1] = 0;  // EjsS Model.Variables.Object.obj_velchg_time
        }
      }
    }());
    obj_startpos = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_startpos
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_startpos
        obj_startpos[_i0] = [];
        for (_i1=0; _i1<MAX_VELCHG; _i1+=1) {  // EjsS Model.Variables.Object.obj_startpos
          obj_startpos[_i0][_i1] = 50;  // EjsS Model.Variables.Object.obj_startpos
        }
      }
    }());
    obj_towardsA = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_towardsA
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_towardsA
        obj_towardsA[_i0] = false;  // EjsS Model.Variables.Object.obj_towardsA
      }
    }());
    obj_stop = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_stop
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_stop
        obj_stop[_i0] = false;  // EjsS Model.Variables.Object.obj_stop
      }
    }());
    obj_UTurn = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_UTurn
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_UTurn
        obj_UTurn[_i0] = false;  // EjsS Model.Variables.Object.obj_UTurn
      }
    }());
    obj_direction = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_direction
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_direction
        obj_direction[_i0] = false;  // EjsS Model.Variables.Object.obj_direction
      }
    }());
    obj_distmsg = new Array(4); // EjsS Model.Variables.Object.obj_distmsg
    (function () {
      var _i0,_i1,_i2;
      for (_i0=0; _i0<4; _i0+=1) {  // EjsS Model.Variables.Object.obj_distmsg
        obj_distmsg[_i0] = [];
        for (_i1=0; _i1<MAX_OBJ; _i1+=1) {  // EjsS Model.Variables.Object.obj_distmsg
          obj_distmsg[_i0][_i1] = [];
          for (_i2=0; _i2<MAX_VELCHG; _i2+=1) {  // EjsS Model.Variables.Object.obj_distmsg
            obj_distmsg[_i0][_i1][_i2] = "";  // EjsS Model.Variables.Object.obj_distmsg
          }
        }
      }
    }());
    obj_reachtown = new Array(MAX_OBJ); // EjsS Model.Variables.Object.obj_reachtown
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.obj_reachtown
        obj_reachtown[_i0] = 0;  // EjsS Model.Variables.Object.obj_reachtown
      }
    }());
    state = new Array(MAX_OBJ); // EjsS Model.Variables.Object.state
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_OBJ; _i0+=1) {  // EjsS Model.Variables.Object.state
        state[_i0] = 0;  // EjsS Model.Variables.Object.state
      }
    }());
    show_obj1_A = false; // EjsS Model.Variables.Object.show_obj1_A
    show_obj2_A = false; // EjsS Model.Variables.Object.show_obj2_A
    show_obj1_B = false; // EjsS Model.Variables.Object.show_obj1_B
    show_obj2_B = false; // EjsS Model.Variables.Object.show_obj2_B
  });

  _model.addToReset(function() {
    U_1 = true; // EjsS Model.Variables.temp.U_1
    A_1 = false; // EjsS Model.Variables.temp.A_1
    T_1 = 0; // EjsS Model.Variables.temp.T_1
    P_1 = 0; // EjsS Model.Variables.temp.P_1
    V_1 = 40; // EjsS Model.Variables.temp.V_1
    V_1s = 40; // EjsS Model.Variables.temp.V_1s
    U_2 = false; // EjsS Model.Variables.temp.U_2
    A_2 = false; // EjsS Model.Variables.temp.A_2
    T_2 = 0; // EjsS Model.Variables.temp.T_2
    P_2 = 0; // EjsS Model.Variables.temp.P_2
    V_2 = 40; // EjsS Model.Variables.temp.V_2
    V_2s = 40; // EjsS Model.Variables.temp.V_2s
    temp = 0; // EjsS Model.Variables.temp.temp
  });

  _model.addToReset(function() {
    Msg = new Array(2); // EjsS Model.Variables.GroupArrow.Msg
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<2; _i0+=1) {  // EjsS Model.Variables.GroupArrow.Msg
        Msg[_i0] = [];
        for (_i1=0; _i1<4; _i1+=1) {  // EjsS Model.Variables.GroupArrow.Msg
          Msg[_i0][_i1] = "";  // EjsS Model.Variables.GroupArrow.Msg
        }
      }
    }());
    obj1_arrow1 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_arrow1
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_arrow1
        obj1_arrow1[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj1_arrow1
      }
    }());
    obj1_size1 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_size1
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_size1
        obj1_size1[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj1_size1
      }
    }());
    obj1_arrow2 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_arrow2
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_arrow2
        obj1_arrow2[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj1_arrow2
      }
    }());
    obj1_size2 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_size2
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_size2
        obj1_size2[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj1_size2
      }
    }());
    obj2_arrow1 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_arrow1
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_arrow1
        obj2_arrow1[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj2_arrow1
      }
    }());
    obj2_size1 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_size1
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_size1
        obj2_size1[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj2_size1
      }
    }());
    obj2_arrow2 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_arrow2
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_arrow2
        obj2_arrow2[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj2_arrow2
      }
    }());
    obj2_size2 = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_size2
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_size2
        obj2_size2[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj2_size2
      }
    }());
    obj2_x_txtpos = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_x_txtpos
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_x_txtpos
        obj2_x_txtpos[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj2_x_txtpos
      }
    }());
    obj1_x_txtpos = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_x_txtpos
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_x_txtpos
        obj1_x_txtpos[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj1_x_txtpos
      }
    }());
    obj1_distmsg = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_distmsg
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_distmsg
        obj1_distmsg[_i0] = "";  // EjsS Model.Variables.GroupArrow.obj1_distmsg
      }
    }());
    obj2_distmsg = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_distmsg
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_distmsg
        obj2_distmsg[_i0] = "";  // EjsS Model.Variables.GroupArrow.obj2_distmsg
      }
    }());
    obj1_arrow_pos = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_arrow_pos
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_arrow_pos
        obj1_arrow_pos[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj1_arrow_pos
      }
    }());
    obj2_arrow_pos = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_arrow_pos
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_arrow_pos
        obj2_arrow_pos[_i0] = 0;  // EjsS Model.Variables.GroupArrow.obj2_arrow_pos
      }
    }());
    obj1_dist_text = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj1_dist_text
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj1_dist_text
        obj1_dist_text[_i0] = -offset_txt;  // EjsS Model.Variables.GroupArrow.obj1_dist_text
      }
    }());
    obj2_dist_text = new Array(MAX_VELCHG); // EjsS Model.Variables.GroupArrow.obj2_dist_text
    (function () {
      var _i0;
      for (_i0=0; _i0<MAX_VELCHG; _i0+=1) {  // EjsS Model.Variables.GroupArrow.obj2_dist_text
        obj2_dist_text[_i0] = offset_txt;  // EjsS Model.Variables.GroupArrow.obj2_dist_text
      }
    }());
  });

  _model.addToReset(function() {
    show_obj1_wkmv = false; // EjsS Model.Variables.showWorking.show_obj1_wkmv
    show_obj1_wkfrA = false; // EjsS Model.Variables.showWorking.show_obj1_wkfrA
    show_obj2_wkmv = false; // EjsS Model.Variables.showWorking.show_obj2_wkmv
    show_obj2_wkfrA = false; // EjsS Model.Variables.showWorking.show_obj2_wkfrA
  });

  _model.addToReset(function() {
    selected = new Array(1); // EjsS Model.Variables.layout.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selected
        selected[_i0] = "user_defined";  // EjsS Model.Variables.layout.selected
      }
    }());
    selected1 = new Array(1); // EjsS Model.Variables.layout.selected1
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selected1
        selected1[_i0] = "start position show";  // EjsS Model.Variables.layout.selected1
      }
    }());
    selected2 = new Array(1); // EjsS Model.Variables.layout.selected2
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selected2
        selected2[_i0] = "start position show";  // EjsS Model.Variables.layout.selected2
      }
    }());
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    vvst = true; // EjsS Model.Variables.layout.vvst
    datashow = true; // EjsS Model.Variables.layout.datashow
    datashow2 = true; // EjsS Model.Variables.layout.datashow2
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
    _ODEi_evolution2 = _ODE_evolution2();
    _privateOdesList.push(_ODEi_evolution2);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function reset_display()   // > CustomCode.function:1
  {  // > CustomCode.function:2
    //_reset();  // > CustomCode.function:3
    var j;  // > CustomCode.function:4
    time = 0;  // > CustomCode.function:5
    has_notstarted = true;  // > CustomCode.function:6
    dt = 1;  // > CustomCode.function:7
    obj1_x = obj_startpos[0][0];  // > CustomCode.function:8
    obj2_x = obj_startpos[1][0];  // > CustomCode.function:9
    show_label = false;  // > CustomCode.function:10
    abt2meet = 0;  // > CustomCode.function:11
    coll_time = 0;  // > CustomCode.function:12
    show_hourly = false;  // > CustomCode.function:13
    counter = 60;  // > CustomCode.function:14
    enable_B = true;  // > CustomCode.function:15
    abt2meetmsg = "";  // > CustomCode.function:16
    obj_UTurn[0] = U_1;  // > CustomCode.function:17
    obj_UTurn[1] = U_2;  // > CustomCode.function:18
    obj_towardsA[0] = A_1;  // > CustomCode.function:19
    obj_towardsA[1] = A_2;  // > CustomCode.function:20
    obj_vel[0][0] = convertspeed(V_1);  // > CustomCode.function:21
    obj_vel[1][0] = convertspeed(V_2);  // > CustomCode.function:22
         // > CustomCode.function:23
    stop_sim_time = 0;  // > CustomCode.function:24
    for (j=0; j<MAX_VELCHG; j++)  // > CustomCode.function:25
    {  // > CustomCode.function:26
       obj1_arrow1[j] = 0;  // > CustomCode.function:27
       obj1_arrow2[j] = 0;  // > CustomCode.function:28
       obj1_size1[j] = 0;  // > CustomCode.function:29
       obj1_size2[j] = 0;  // > CustomCode.function:30
       obj2_arrow1[j] = 0;  // > CustomCode.function:31
       obj2_arrow2[j] = 0;  // > CustomCode.function:32
       obj2_size1[j] = 0;  // > CustomCode.function:33
       obj2_size2[j] = 0;  // > CustomCode.function:34
       obj1_distmsg[j] = "";  // > CustomCode.function:35
       obj2_distmsg[j] = "";  // > CustomCode.function:36
       obj_vel[0][j] = 100;  // > CustomCode.function:37
       obj_vel[1][j] = 100;  // > CustomCode.function:38
       obj_velchg_time[0][j] = 0;  // > CustomCode.function:39
       obj_velchg_time[1][j] = 0;  // > CustomCode.function:40
       obj2_arrow_pos[j] = 0;  // > CustomCode.function:41
       obj1_arrow_pos[j] = 0;  // > CustomCode.function:42
       obj2_dist_text[j] = offset_txt;  // > CustomCode.function:43
       obj1_dist_text[j] = -offset_txt;  // > CustomCode.function:44
       obj_distmsg[WORKING_1][0][j] = "";   // > CustomCode.function:45
       obj_distmsg[WORKING_2][0][j] = "";   // > CustomCode.function:46
       obj_distmsg[WORKING_1][1][j] = "";   // > CustomCode.function:47
       obj_distmsg[WORKING_2][1][j] = "";   // > CustomCode.function:48
    }  // > CustomCode.function:49
       // > CustomCode.function:50
    obj_vel[0][0] = convertspeed(V_1);  // > CustomCode.function:51
    obj_vel[1][0] = convertspeed(V_2);  // > CustomCode.function:52
       // > CustomCode.function:53
    for (j=0; j < MAX_OBJ; j++)   // > CustomCode.function:54
    {  // > CustomCode.function:55
      obj_stop[j] = false;  // > CustomCode.function:56
      state[j] = 0;  // > CustomCode.function:57
      // > CustomCode.function:58
      obj_reachtown[j] = 0;  // > CustomCode.function:59
      // > CustomCode.function:60
       // At Town A , cannot move towards A  // > CustomCode.function:61
      if (obj_startpos[j][0] < zero)   // > CustomCode.function:62
      {  // > CustomCode.function:63
        obj_direction[j] = false;  // > CustomCode.function:64
        obj_towardsA[j] = false;  // > CustomCode.function:65
      }   // > CustomCode.function:66
        // > CustomCode.function:67
      // At town B , can only move towards A  // > CustomCode.function:68
      if (townB_x - obj_startpos[j][0] < zero)   // > CustomCode.function:69
      {  // > CustomCode.function:70
        obj_direction[j] = false;  // > CustomCode.function:71
        obj_towardsA[j] = true;  // > CustomCode.function:72
      }  // > CustomCode.function:73
    }  // > CustomCode.function:74
    _pause();  // > CustomCode.function:75
  }  // > CustomCode.function:76
  function cal_speed(obj, current)  // > CustomCode.function:77
  {  // > CustomCode.function:78
    //Object moving towards A  // > CustomCode.function:79
    var vel;  // > CustomCode.function:80
    var offset = 0;  // > CustomCode.function:81
    vel = obj_vel[obj][current]; // current speed w/o direction  // > CustomCode.function:82
    if (obj_towardsA[obj])  // > CustomCode.function:83
      vel = vel * (-1);  // > CustomCode.function:84
       // > CustomCode.function:85
    if (obj_stop[obj])  // > CustomCode.function:86
      vel = 0;  // > CustomCode.function:87
    offset = dt;  // > CustomCode.function:88
    if ((time + offset) > obj_velchg_time[obj][current])  // > CustomCode.function:89
      return vel;  // > CustomCode.function:90
    return 0;  // > CustomCode.function:91
  }  // > CustomCode.function:92
  function check_start_time(start_t)   // > CustomCode.function:93
  {  // > CustomCode.function:94
    abt2meetmsg = "";  // > CustomCode.function:95
    if (start_t < 0)  // > CustomCode.function:96
    {  // > CustomCode.function:97
      abt2meetmsg = "Please enter the valid start time. Time must be more than or equal to 0";   // > CustomCode.function:98
      return 0;  // > CustomCode.function:99
    }  // > CustomCode.function:100
    return start_t;  // > CustomCode.function:101
  }  // > CustomCode.function:102
  function check_pos(start_pos)  // > CustomCode.function:103
  {  // > CustomCode.function:104
    abt2meetmsg = "";  // > CustomCode.function:105
    if (start_pos < 0)   // > CustomCode.function:106
    {  // > CustomCode.function:107
      abt2meetmsg = "Please enter the valid position.Position must be more than or equal to 0";  // > CustomCode.function:108
      return 0;  // > CustomCode.function:109
    }  // > CustomCode.function:110
      // > CustomCode.function:111
    if (start_pos > townB_x)   // > CustomCode.function:112
    {  // > CustomCode.function:113
      abt2meetmsg = "Please enter the valid position.Position must be less than or equal to Town B";   // > CustomCode.function:114
      return townB_x;  // > CustomCode.function:115
    }  // > CustomCode.function:116
    return start_pos;  // > CustomCode.function:117
  }  // > CustomCode.function:118
  function cal_UTurnSpeed(j)  // > CustomCode.function:119
  {  // > CustomCode.function:120
    var current;  // > CustomCode.function:121
    current = state[j];    // > CustomCode.function:122
    obj_vel[j][current+1] = obj_vel[j][current] ;  // > CustomCode.function:123
    obj_reachtown[j] = time;  // > CustomCode.function:124
    obj_velchg_time[j][current+1] = time;  // > CustomCode.function:125
       // > CustomCode.function:126
    obj_UTurn[j] = false; // only U turn once  // > CustomCode.function:127
    state[j] = current + 1;  // > CustomCode.function:128
    if (obj_stop[j])  // > CustomCode.function:129
      obj_vel[j][state[j]] = 0;  // > CustomCode.function:130
  }  // > CustomCode.function:131
     // > CustomCode.function:132
  function displaymsg(obj, line)   // > CustomCode.function:133
  {  // > CustomCode.function:134
    var tmp = obj_distmsg[line][obj][0];  // > CustomCode.function:135
    var j = 1;  // > CustomCode.function:136
    while (j <= state[obj])  // > CustomCode.function:137
    {  // > CustomCode.function:138
      if ((time-obj_velchg_time[obj][j]) > zero)   // > CustomCode.function:139
      {  // > CustomCode.function:140
        tmp = tmp + "+" + obj_distmsg[line][obj][j];  // > CustomCode.function:141
      }  // > CustomCode.function:142
      j++;  // > CustomCode.function:143
    }  // > CustomCode.function:144
     // > CustomCode.function:145
    return tmp;  // > CustomCode.function:146
  }  // > CustomCode.function:147

  function texttospeech (whattospeak) {  // > CustomCode.texttospeech:1
  if(parent.cordova) { // check it is running in Android  // > CustomCode.texttospeech:2
  //var option1 = _view.comboBox.getProperty("SelectedOptions");  // > CustomCode.texttospeech:3
         parent.TTS.speak(whattospeak, function () {  // > CustomCode.texttospeech:4
              // success  // > CustomCode.texttospeech:5
          }, function (reason) {  // > CustomCode.texttospeech:6
              // error  // > CustomCode.texttospeech:7
          });  // > CustomCode.texttospeech:8
      }  // > CustomCode.texttospeech:9
      else {  // > CustomCode.texttospeech:10
    var msg = new SpeechSynthesisUtterance(whattospeak);  // > CustomCode.texttospeech:11
  window.speechSynthesis.speak(msg);  // > CustomCode.texttospeech:12
  }  // > CustomCode.texttospeech:13
  }  // > CustomCode.texttospeech:14

  function OnOrientationChange() {  // > CustomCode.OnOrientationChange:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.OnOrientationChange:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.OnOrientationChange:3
  //else  // > CustomCode.OnOrientationChange:4
  //  _view.mytext.setText("nada:");  // > CustomCode.OnOrientationChange:5
  // check platform for Apps  // > CustomCode.OnOrientationChange:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.OnOrientationChange:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.OnOrientationChange:8
  // check platform for web browsers  // > CustomCode.OnOrientationChange:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.OnOrientationChange:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.OnOrientationChange:14
  switch (window.orientation) {  // > CustomCode.OnOrientationChange:15
    case 0:  // > CustomCode.OnOrientationChange:16
    case 180:  // > CustomCode.OnOrientationChange:17
      this.screenOrientation = 'portrait';  // > CustomCode.OnOrientationChange:18
    //  if (iOSapp){ // does not seems to work  // > CustomCode.OnOrientationChange:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.OnOrientationChange:20
     //   return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.OnOrientationChange:21
        // return window.screen.height;  // > CustomCode.OnOrientationChange:22
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:23
        // return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:24
     // }  // > CustomCode.OnOrientationChange:25
        // > CustomCode.OnOrientationChange:26
     // else {  // > CustomCode.OnOrientationChange:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:28
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:29
     // }  // > CustomCode.OnOrientationChange:30
      break;  // > CustomCode.OnOrientationChange:31
    case 90:  // > CustomCode.OnOrientationChange:32
    case -90:  // > CustomCode.OnOrientationChange:33
      this.screenOrientation = 'landscape';  // > CustomCode.OnOrientationChange:34
     // if (iOSapp){ // App  // > CustomCode.OnOrientationChange:35
     //   return window.screen.width*0.7;    // > CustomCode.OnOrientationChange:36
        // return window.screen.height;  // > CustomCode.OnOrientationChange:37
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:38
        //  return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:39
     // }  // > CustomCode.OnOrientationChange:40
        // > CustomCode.OnOrientationChange:41
    //  else { // browser Android and PC  // > CustomCode.OnOrientationChange:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:43
        // alert("browser Android and PC");  // > CustomCode.OnOrientationChange:44
        return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:45
    //  }  // > CustomCode.OnOrientationChange:46
      break;  // > CustomCode.OnOrientationChange:47
    default:  // > CustomCode.OnOrientationChange:48
      this.screenOrientation = 'unknown';  // > CustomCode.OnOrientationChange:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.OnOrientationChange:50
      return window.innerHeight*0.9;  // > CustomCode.OnOrientationChange:51
  }  // > CustomCode.OnOrientationChange:52
  }  // > CustomCode.OnOrientationChange:53

  function convertspeed(speed)   // > CustomCode.convertspeed:1
  {  // > CustomCode.convertspeed:2
    // Convert Speed from km/h to km/min  // > CustomCode.convertspeed:3
    speed = speed/60;  // > CustomCode.convertspeed:4
    return speed;  // > CustomCode.convertspeed:5
  }  // > CustomCode.convertspeed:6
  function converttime(t)   // > CustomCode.convertspeed:7
  {  // > CustomCode.convertspeed:8
    //Convert time in hr and minute  // > CustomCode.convertspeed:9
    var msg;  // > CustomCode.convertspeed:10
    var min;  // > CustomCode.convertspeed:11
    var hr;  // > CustomCode.convertspeed:12
    min = t % 60;  // > CustomCode.convertspeed:13
    hr = parseInt(t/60);  // > CustomCode.convertspeed:14
    if (60 - min < 1)   // > CustomCode.convertspeed:15
    {  // > CustomCode.convertspeed:16
      min = 0;  // > CustomCode.convertspeed:17
      hr = hr + 1;  // > CustomCode.convertspeed:18
    }  // > CustomCode.convertspeed:19
    //msg = hr + "hr " +  String.format("%2.0f", min) + "min";  // > CustomCode.convertspeed:20
    msg = hr + "hr " + _view._format(min, "00.0") + "min";  // > CustomCode.convertspeed:21
    return msg;  // > CustomCode.convertspeed:22
  }  // > CustomCode.convertspeed:23

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Settings"]) return;
    // Storing Values   // > Initialization.Settings:1
    obj_velchg_time[0][0] = 0;  // > Initialization.Settings:2
    obj_startpos[0][0] = P_1;  // > Initialization.Settings:3
    obj_UTurn[0] = U_1;  // > Initialization.Settings:4
    obj_towardsA[0] = A_1;  // > Initialization.Settings:5
    obj_vel[0][0] = convertspeed(V_1);  // > Initialization.Settings:6
    obj_vel_act[0][0] = V_1;  // > Initialization.Settings:7
    obj_velchg_time[1][0] = 0;  // > Initialization.Settings:8
    obj_startpos[1][0] = P_2;  // > Initialization.Settings:9
    obj_UTurn[1] = U_2;  // > Initialization.Settings:10
    obj_towardsA[1] = A_2;  // > Initialization.Settings:11
    obj_vel[1][0] = convertspeed(V_2);  // > Initialization.Settings:12
    obj_vel_act[1][0] = V_2;  // > Initialization.Settings:13
    _pause();  // > Initialization.Settings:14
    time = 0;  // > Initialization.Settings:15
    abt2meet = 0;    // > Initialization.Settings:16
    obj1_x0 = obj1_x = obj_startpos[0][0]; // added obj1_x0 by lookang to store display start x  // > Initialization.Settings:17
    obj2_x0 = obj2_x = obj_startpos[1][0];  // > Initialization.Settings:18
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["menu"]) return;
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Speed 2"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Speed"]) return;
    _ODEi_evolution2.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    msg = "Time : " + converttime (time);  // > FixedRelations.FixRel Page:1
    msg_coll = "Collision Time : " + converttime(coll_time);   // > FixedRelations.FixRel Page:2
    var current;  // > FixedRelations.FixRel Page:3
    for (var j = 0; j < MAX_OBJ; j++)  // > FixedRelations.FixRel Page:4
    {  // > FixedRelations.FixRel Page:5
      temp = state[j];  // > FixedRelations.FixRel Page:6
      if ((time - obj_velchg_time[j][temp]) > zero && Math.abs(obj_vel[j][temp]) > zero )  // > FixedRelations.FixRel Page:7
      {  // > FixedRelations.FixRel Page:8
        //obj_distmsg[WORKING_1][j][temp] = String.format("%5.2f * (%5.2f - %5.2f)/60 ", obj_vel_act[j][temp], time, obj_velchg_time[j][temp]);  // > FixedRelations.FixRel Page:9
        obj_distmsg[WORKING_1][j][temp] = _view._format(obj_vel_act[j][temp], "00000.00") + " * (" + _view._format(time, "00000.00") + " - " + _view._format(obj_velchg_time[j][temp], "00000.00") + ")/60 ";   // > FixedRelations.FixRel Page:10
      }  // > FixedRelations.FixRel Page:11
    }  // > FixedRelations.FixRel Page:12
    // Arrows for obj 1  // > FixedRelations.FixRel Page:13
    obj1_arrow1[state[0]] = obj1_x;  // > FixedRelations.FixRel Page:14
    obj1_arrow2[state[0]] = obj_startpos[0][state[0]];  // > FixedRelations.FixRel Page:15
    obj1_size1[state[0]] = obj_startpos[0][state[0]] - obj1_x;  // > FixedRelations.FixRel Page:16
    obj1_size2[state[0]] = obj1_x - obj_startpos[0][state[0]] ;  // > FixedRelations.FixRel Page:17
    obj1_x_txtpos[state[0]] = obj1_x - obj1_size2[state[0]]/2;   // > FixedRelations.FixRel Page:18
    obj1_distmsg[state[0]] = obj_distmsg[WORKING_1][0][state[0]];  // > FixedRelations.FixRel Page:19
        // > FixedRelations.FixRel Page:20
    // Arrows for obj 2  // > FixedRelations.FixRel Page:21
    obj2_arrow1[state[1]] = obj2_x;  // > FixedRelations.FixRel Page:22
    obj2_arrow2[state[1]] = obj_startpos[1][state[1]];  // > FixedRelations.FixRel Page:23
    obj2_size1[state[1]] = obj_startpos[1][state[1]]-obj2_x;  // > FixedRelations.FixRel Page:24
    obj2_size2[state[1]] = obj2_x-obj_startpos[1][state[1]] ;  // > FixedRelations.FixRel Page:25
    obj2_x_txtpos[state[1]] = obj2_x - obj2_size2[state[1]]/2;   // > FixedRelations.FixRel Page:26
    obj2_distmsg[state[1]] = obj_distmsg[WORKING_1][1][state[1]];  // > FixedRelations.FixRel Page:27
          // > FixedRelations.FixRel Page:28
    if (time > zero && _model.isPaused())   // > FixedRelations.FixRel Page:29
    {  // > FixedRelations.FixRel Page:30
      show_label = true;  // > FixedRelations.FixRel Page:31
    }  // > FixedRelations.FixRel Page:32
        // > FixedRelations.FixRel Page:33
    if (_model.isPlaying())   // > FixedRelations.FixRel Page:34
    {  // > FixedRelations.FixRel Page:35
      abt2meetmsg = "";  // > FixedRelations.FixRel Page:36
      enable_B = false;  // > FixedRelations.FixRel Page:37
      show_label = false;  // > FixedRelations.FixRel Page:38
    }  // > FixedRelations.FixRel Page:39
    // Find where to place the in-between arrow  // > FixedRelations.FixRel Page:40
    if (obj1_x > obj2_x)   // > FixedRelations.FixRel Page:41
    {  // > FixedRelations.FixRel Page:42
      obj_btw_1 = obj2_x;   // > FixedRelations.FixRel Page:43
      obj_btw_2 = obj1_x;  // > FixedRelations.FixRel Page:44
    }  // > FixedRelations.FixRel Page:45
    else   // > FixedRelations.FixRel Page:46
    {  // > FixedRelations.FixRel Page:47
      obj_btw_1 = obj1_x;  // > FixedRelations.FixRel Page:48
      obj_btw_2 = obj2_x;  // > FixedRelations.FixRel Page:49
    }  // > FixedRelations.FixRel Page:50
    obj1_distmoved = obj1_x - obj_startpos[0][0];  // > FixedRelations.FixRel Page:51
    obj2_distmoved = obj2_x - obj_startpos[1][0];  // > FixedRelations.FixRel Page:52
    obj1_distfromB = Math.abs(townB_x - obj1_x);  // > FixedRelations.FixRel Page:53
    obj2_distfromB = Math.abs(townB_x - obj2_x);  // > FixedRelations.FixRel Page:54
    if (time > zero)  // > FixedRelations.FixRel Page:55
    {  // > FixedRelations.FixRel Page:56
      has_notstarted = false;  // > FixedRelations.FixRel Page:57
    }    // > FixedRelations.FixRel Page:58
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["checkDirection"]) return;
    A_1 = obj_towardsA[0];  // > FixedRelations.checkDirection:1
    A_2 = obj_towardsA[1];  // > FixedRelations.checkDirection:2
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Speed 2") return _ODEi_evolution1;
    if (_odeName=="Speed") return _ODEi_evolution2;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var _ODE_evolution1_Event5;
    var _ODE_evolution1_Event6;
    var _ODE_evolution1_Event7;
    var _ODE_evolution1_Event8;
    var _ODE_evolution1_Event9;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["obj1_x","obj2_x","time"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Obj1ReachTownA"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Obj2ReachTownA"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["Obj1ReachTownB"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["Obj2ReachTownB"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      if (__pagesEnabled["StopSim"]) __eventSolver.addEvent(_ODE_evolution1_Event5());
      if (__pagesEnabled["ObjectMeet"]) __eventSolver.addEvent(_ODE_evolution1_Event6());
      if (__pagesEnabled["StopObj2_Dist"]) __eventSolver.addEvent(_ODE_evolution1_Event7());
      if (__pagesEnabled["StopObj1_Dist"]) __eventSolver.addEvent(_ODE_evolution1_Event8());
      if (__pagesEnabled["Pausing"]) __eventSolver.addEvent(_ODE_evolution1_Event9());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.001,0.001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=obj1_x) __mustReinitialize = true;
        __state[__cIn++] = obj1_x;
        if (__state[__cIn]!=obj2_x) __mustReinitialize = true;
        __state[__cIn++] = obj2_x;
        if (__state[__cIn]!=time) __mustReinitialize = true;
        __state[__cIn++] = time;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.001,0.001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = V_1/60; // Rate for ODE: Speed 2:obj1_x
        _aRate[__cRate++] = V_2/60; // Rate for ODE: Speed 2:obj2_x
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj1_x; //blue  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed 2:1
        if (obj_UTurn[0])  // > Event action for page Speed 2:2
        {  // > Event action for page Speed 2:3
          V_1 = -V_1;  // > Event action for page Speed 2:4
        //  obj_towardsA[0] = false;  // > Event action for page Speed 2:5
            // > Event action for page Speed 2:6
        }  // > Event action for page Speed 2:7
        else  // > Event action for page Speed 2:8
        {  // > Event action for page Speed 2:9
        //  obj_stop[0] = true;  // > Event action for page Speed 2:10
          V_2 = 0;  // > Event action for page Speed 2:11
        }  // > Event action for page Speed 2:12
        //cal_UTurnSpeed(0);  // > Event action for page Speed 2:13
        abt2meetmsg = "Blue Object reach A";  // > Event action for page Speed 2:14
        //obj_startpos[0][state[0]] = obj1_x;  // > Event action for page Speed 2:15
        //V_1 = obj_vel[0][state[0]];  // > Event action for page Speed 2:16
        V_1 = -V_1; //reverse velocity by lookang  // > Event action for page Speed 2:17
        for (var j = state[0]; j<MAX_VELCHG ; j++)   // > Event action for page Speed 2:18
        {  // > Event action for page Speed 2:19
          obj1_arrow_pos[j] = -50;  // > Event action for page Speed 2:20
          obj1_dist_text[j] = obj1_dist_text[j] + obj1_arrow_pos[j];  // > Event action for page Speed 2:21
        }  // > Event action for page Speed 2:22
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj2_x; //red  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed 2:1
        if (obj_UTurn[1]) //yes  u turn  // > Event action for page Speed 2:2
        {  // > Event action for page Speed 2:3
          V_2 = -V_2; //reverse velocity by lookang  // > Event action for page Speed 2:4
        //  obj_towardsA[1] = false;  // > Event action for page Speed 2:5
            // > Event action for page Speed 2:6
        }  // > Event action for page Speed 2:7
        else  // > Event action for page Speed 2:8
        {  // > Event action for page Speed 2:9
        //  obj_stop[1] = true;  // > Event action for page Speed 2:10
          V_2 = 0;  // > Event action for page Speed 2:11
        }  // > Event action for page Speed 2:12
        abt2meetmsg = "Red Object reach A";  // > Event action for page Speed 2:13
        //cal_UTurnSpeed(1);  // > Event action for page Speed 2:14
        //obj_startpos[1][state[1]] = obj2_x;  // > Event action for page Speed 2:15
        //V_2 = obj_vel[1][state[1]];  // > Event action for page Speed 2:16
        //for (var j = state[1]; j<MAX_VELCHG; j++)   // > Event action for page Speed 2:17
        //{  // > Event action for page Speed 2:18
        //  obj2_arrow_pos[j] = 50;  // > Event action for page Speed 2:19
         // obj2_dist_text[j] = obj2_dist_text[j] + obj2_arrow_pos[j];  // > Event action for page Speed 2:20
        //}  // > Event action for page Speed 2:21
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return (townB_x - obj1_x);  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed 2:1
        if (obj_UTurn[0]) //yes u turn lookang  // > Event action for page Speed 2:2
        {  // > Event action for page Speed 2:3
          obj_towardsA[0] = true;  // > Event action for page Speed 2:4
          V_1 = -V_1; //reverse velocity by lookang  // > Event action for page Speed 2:5
         // convertspeed(V_1); // lookang fix bug of speed become 0.67  // > Event action for page Speed 2:6
        }  // > Event action for page Speed 2:7
        else  // > Event action for page Speed 2:8
        {  // > Event action for page Speed 2:9
          obj_stop[0] = true;  // > Event action for page Speed 2:10
          V_1 = 0;  // > Event action for page Speed 2:11
        }  // > Event action for page Speed 2:12
        abt2meetmsg = "Blue Object reach B";  // > Event action for page Speed 2:13
        cal_UTurnSpeed(0);  // > Event action for page Speed 2:14
        obj_startpos[0][state[0]] = obj1_x;  // > Event action for page Speed 2:15
        //V_1 = obj_vel[0][state[0]];  // > Event action for page Speed 2:16
        for (var j = state[0]; j<MAX_VELCHG; j++)   // > Event action for page Speed 2:17
        {  // > Event action for page Speed 2:18
          obj1_arrow_pos[j] = -50;  // > Event action for page Speed 2:19
          obj1_dist_text[j] = obj1_dist_text[j] + obj1_arrow_pos[j];  // > Event action for page Speed 2:20
        }  // > Event action for page Speed 2:21
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return (townB_x - obj2_x);  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed 2:1
        if (obj_UTurn[1]) //yes u turn lookang  // > Event action for page Speed 2:2
        {  // > Event action for page Speed 2:3
          obj_towardsA[1] = true;  // > Event action for page Speed 2:4
          V_2 = -V_2; //reverse velocity by lookang  // > Event action for page Speed 2:5
        //convertspeed(V_2); // lookang fix bug of speed become 0.67  // > Event action for page Speed 2:6
        }  // > Event action for page Speed 2:7
        else  // > Event action for page Speed 2:8
        {  // > Event action for page Speed 2:9
          obj_stop[1] = true;  // > Event action for page Speed 2:10
          V_2=0; // lookang  // > Event action for page Speed 2:11
        }  // > Event action for page Speed 2:12
        abt2meetmsg = "Red Object reach B";  // > Event action for page Speed 2:13
        cal_UTurnSpeed(1);  // > Event action for page Speed 2:14
        obj_startpos[1][state[1]] = obj2_x;  // > Event action for page Speed 2:15
        //V_2 = obj_vel[1][state[1]];  // > Event action for page Speed 2:16
        for (var j = state[1]; j<MAX_VELCHG ; j++)   // > Event action for page Speed 2:17
        {  // > Event action for page Speed 2:18
          obj2_arrow_pos[j] = 50;  // > Event action for page Speed 2:19
          obj2_dist_text[j] = obj2_dist_text[j] + obj2_arrow_pos[j];  // > Event action for page Speed 2:20
        }  // > Event action for page Speed 2:21
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-6; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return stop_sim_time- time;  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed 2:1
        abt2meetmsg = "Pause Simulation after " + converttime(stop_sim_time);  // > Event action for page Speed 2:2
        //String.format("Pause Simulation at, stop_sim_time);  // > Event action for page Speed 2:3
        stop_sim_time=stop_sim_time+stop_sim_time0; // lookang  // > Event action for page Speed 2:4
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event6 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-6; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return (obj1_x - obj2_x);  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        coll_time = time;  // > Event action for page Speed 2:1
        _pause();  // > Event action for page Speed 2:2
        abt2meetmsg = "Blue Object meet Red Object";  // > Event action for page Speed 2:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event7 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-6; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj2_x - stop_sim_obj2;  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed 2:1
        abt2meetmsg = "Pause Simulation For Red Object";  // > Event action for page Speed 2:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event8 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj1_x - stop_sim_obj1;  // > Event zero-condition for page Speed 2:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed 2:1
        abt2meetmsg = "Pause Simulation For Blue Object";  // > Event action for page Speed 2:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event9 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        //return counter - time; //lookang  // > Event zero-condition for page Speed 2:1
        return  time%stop_sim_time-0;  // > Event zero-condition for page Speed 2:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        //if (show_hourly)  // > Event action for page Speed 2:1
        //{  // > Event action for page Speed 2:2
          _pause();  // > Event action for page Speed 2:3
         // abt2meetmsg = "Pause Simulation at Every Hour";  // > Event action for page Speed 2:4
        //}  // > Event action for page Speed 2:5
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_obj1_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_obj2_x(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _ODE_evolution2() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.euler;
    var __state=[];
    var _ODE_evolution2_Event1;
    var _ODE_evolution2_Event2;
    var _ODE_evolution2_Event3;
    var _ODE_evolution2_Event4;
    var _ODE_evolution2_Event5;
    var _ODE_evolution2_Event6;
    var _ODE_evolution2_Event7;
    var _ODE_evolution2_Event8;
    var _ODE_evolution2_Event9;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["obj1_x","obj2_x","time"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Obj1ReachTownA"]) __eventSolver.addEvent(_ODE_evolution2_Event1());
      if (__pagesEnabled["Obj2ReachTownA"]) __eventSolver.addEvent(_ODE_evolution2_Event2());
      if (__pagesEnabled["Obj1ReachTownB"]) __eventSolver.addEvent(_ODE_evolution2_Event3());
      if (__pagesEnabled["Obj2ReachTownB"]) __eventSolver.addEvent(_ODE_evolution2_Event4());
      if (__pagesEnabled["StopSim"]) __eventSolver.addEvent(_ODE_evolution2_Event5());
      if (__pagesEnabled["ObjectMeet"]) __eventSolver.addEvent(_ODE_evolution2_Event6());
      if (__pagesEnabled["StopObj2_Dist"]) __eventSolver.addEvent(_ODE_evolution2_Event7());
      if (__pagesEnabled["StopObj1_Dist"]) __eventSolver.addEvent(_ODE_evolution2_Event8());
      if (__pagesEnabled["Hourly"]) __eventSolver.addEvent(_ODE_evolution2_Event9());
      for(k in userEvents2){__eventSolver.addEvent(userEvents2[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.001,0.001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=obj1_x) __mustReinitialize = true;
        __state[__cIn++] = obj1_x;
        if (__state[__cIn]!=obj2_x) __mustReinitialize = true;
        __state[__cIn++] = obj2_x;
        if (__state[__cIn]!=time) __mustReinitialize = true;
        __state[__cIn++] = time;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.001,0.001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = cal_speed(0, state[0]);; // Rate for ODE: Speed:obj1_x
        _aRate[__cRate++] = cal_speed(1, state[1]);; // Rate for ODE: Speed:obj2_x
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents2.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution2_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj1_x;  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed:1
        if (obj_UTurn[0])  // > Event action for page Speed:2
        {  // > Event action for page Speed:3
          obj_towardsA[0] = false;  // > Event action for page Speed:4
        }  // > Event action for page Speed:5
        else  // > Event action for page Speed:6
        {  // > Event action for page Speed:7
          obj_stop[0] = true;  // > Event action for page Speed:8
        }  // > Event action for page Speed:9
        cal_UTurnSpeed(0);  // > Event action for page Speed:10
        abt2meetmsg = "Blue Object reach A";  // > Event action for page Speed:11
        obj_startpos[0][state[0]] = obj1_x;  // > Event action for page Speed:12
        //V_1 = obj_vel[0][state[0]];  // > Event action for page Speed:13
        V_1 = -V_1; //reverse velocity by lookang  // > Event action for page Speed:14
        for (var j = state[0]; j<MAX_VELCHG ; j++)   // > Event action for page Speed:15
        {  // > Event action for page Speed:16
          obj1_arrow_pos[j] = -50;  // > Event action for page Speed:17
          obj1_dist_text[j] = obj1_dist_text[j] + obj1_arrow_pos[j];  // > Event action for page Speed:18
        }  // > Event action for page Speed:19
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj2_x;  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed:1
        if (obj_UTurn[1])  // > Event action for page Speed:2
        {  // > Event action for page Speed:3
          obj_towardsA[1] = false;  // > Event action for page Speed:4
        }  // > Event action for page Speed:5
        else  // > Event action for page Speed:6
        {  // > Event action for page Speed:7
          obj_stop[1] = true;  // > Event action for page Speed:8
        }  // > Event action for page Speed:9
        abt2meetmsg = "Red Object reach A";  // > Event action for page Speed:10
        cal_UTurnSpeed(1);  // > Event action for page Speed:11
        obj_startpos[1][state[1]] = obj2_x;  // > Event action for page Speed:12
        //V_2 = obj_vel[1][state[1]];  // > Event action for page Speed:13
        V_2 = -V_2; //reverse velocity by lookang  // > Event action for page Speed:14
        for (var j = state[1]; j<MAX_VELCHG; j++)   // > Event action for page Speed:15
        {  // > Event action for page Speed:16
          obj2_arrow_pos[j] = 50;  // > Event action for page Speed:17
          obj2_dist_text[j] = obj2_dist_text[j] + obj2_arrow_pos[j];  // > Event action for page Speed:18
        }  // > Event action for page Speed:19
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return (townB_x - obj1_x);  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed:1
        if (obj_UTurn[0])   // > Event action for page Speed:2
        {  // > Event action for page Speed:3
          obj_towardsA[0] = true;  // > Event action for page Speed:4
         // convertspeed(V_1); // lookang fix bug of speed become 0.67  // > Event action for page Speed:5
        }  // > Event action for page Speed:6
        else  // > Event action for page Speed:7
        {  // > Event action for page Speed:8
          obj_stop[0] = true;  // > Event action for page Speed:9
        }  // > Event action for page Speed:10
        abt2meetmsg = "Blue Object reach B";  // > Event action for page Speed:11
        cal_UTurnSpeed(0);  // > Event action for page Speed:12
        obj_startpos[0][state[0]] = obj1_x;  // > Event action for page Speed:13
        //V_1 = obj_vel[0][state[0]];  // > Event action for page Speed:14
        V_1 = -V_1; //reverse velocity by lookang  // > Event action for page Speed:15
        for (var j = state[0]; j<MAX_VELCHG; j++)   // > Event action for page Speed:16
        {  // > Event action for page Speed:17
          obj1_arrow_pos[j] = -50;  // > Event action for page Speed:18
          obj1_dist_text[j] = obj1_dist_text[j] + obj1_arrow_pos[j];  // > Event action for page Speed:19
        }  // > Event action for page Speed:20
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return (townB_x - obj2_x);  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed:1
        if (obj_UTurn[1])   // > Event action for page Speed:2
        {  // > Event action for page Speed:3
          obj_towardsA[1] = true;  // > Event action for page Speed:4
        //convertspeed(V_2); // lookang fix bug of speed become 0.67  // > Event action for page Speed:5
        }  // > Event action for page Speed:6
        else  // > Event action for page Speed:7
        {  // > Event action for page Speed:8
          obj_stop[1] = true;  // > Event action for page Speed:9
        }  // > Event action for page Speed:10
        abt2meetmsg = "Red Object reach B";  // > Event action for page Speed:11
        cal_UTurnSpeed(1);  // > Event action for page Speed:12
        obj_startpos[1][state[1]] = obj2_x;  // > Event action for page Speed:13
        //V_2 = obj_vel[1][state[1]];  // > Event action for page Speed:14
        V_2 = -V_2; //reverse velocity by lookang  // > Event action for page Speed:15
        for (var j = state[1]; j<MAX_VELCHG ; j++)   // > Event action for page Speed:16
        {  // > Event action for page Speed:17
          obj2_arrow_pos[j] = 50;  // > Event action for page Speed:18
          obj2_dist_text[j] = obj2_dist_text[j] + obj2_arrow_pos[j];  // > Event action for page Speed:19
        }  // > Event action for page Speed:20
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-6; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return time - stop_sim_time;  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed:1
        abt2meetmsg = "Pause Simulation after " + converttime(stop_sim_time);  // > Event action for page Speed:2
        //String.format("Pause Simulation at, stop_sim_time);  // > Event action for page Speed:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event6 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-6; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return (obj1_x - obj2_x);  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        coll_time = time;  // > Event action for page Speed:1
        _pause();  // > Event action for page Speed:2
        abt2meetmsg = "Blue Object meet Red Object";  // > Event action for page Speed:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event7 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-6; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj2_x - stop_sim_obj2;  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed:1
        abt2meetmsg = "Pause Simulation For Red Object";  // > Event action for page Speed:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event8 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return obj1_x - stop_sim_obj1;  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Speed:1
        abt2meetmsg = "Pause Simulation For Blue Object";  // > Event action for page Speed:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event9 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var obj1_x = _aState[__cOut++];
        var obj2_x = _aState[__cOut++];
        var time = _aState[__cOut++];
        return counter - time;  // > Event zero-condition for page Speed:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        obj1_x = __state[__cOut++];
        obj2_x = __state[__cOut++];
        time = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = obj1_x;
        __state[__cIn++] = obj2_x;
        __state[__cIn++] = time;
        return _returnValue;
      };

      function __userDefinedAction() {
        counter = counter + 60;  // > Event action for page Speed:1
        if (show_hourly)  // > Event action for page Speed:2
        {  // > Event action for page Speed:3
          _pause();  // > Event action for page Speed:4
          abt2meetmsg = "Pause Simulation at Every Hour";  // > Event action for page Speed:5
        }  // > Event action for page Speed:6
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_obj1_x(__time) {
    var __index = 0;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_obj2_x(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PriMathSpeedV8_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.comboBox.linkProperty("Options",  function() { return ["Town AB = 50km","Town AB = 100km","Town AB = 150km","Town AB = 200km","Bus starts at Town B","Car starts at Town B","Busspeed = 70, Carspeed = 50, TownB=70, Who reach first?","Bus travels 120 km in 2 hours, what is the speed in km/h?","Bus travels 300 km in 3 hours, what is the speed in km/h?","Bus travels 1600 m in 10 minutes, what is the speed in km/h?","Bus travels 1600 m in 8 minutes, what is the speed in km/h?","Bus travels 50 km/h, what is the time taken to complete 25 km?","Aeroplane travels 1800 km/h in 10minutes, how far did he travel?","Random","user_defined","distance Bus to Car show","distance Bus to Car hide","pause after every 10 min","pause after every 20 min","pause after every 30 min","pause after every 40 min","pause after every 50 min","pause after every 60 min","pause after every xx min"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
      
      if(option=="Town AB = 200km"){
   townB_x = 200;
   min_x = 0-10;
   max_x = townB_x+10;
   V_1 =40;
   V_2 =40;
  }
  if(option=="Town AB = 50km"){
   townB_x = 50;
   min_x = 0-10;
   max_x = townB_x+10;
    V_1 =40;
   V_2 =40;
  }
  if(option=="Town AB = 100km"){
   townB_x = 100;
   min_x = 0-10;
   max_x = townB_x+10;
    V_1 =40;
   V_2 =40;
  }
  if(option=="Town AB = 150km"){
   townB_x = 150;
   min_x = 0-10;
   max_x = townB_x+10;
    V_1 =40;
   V_2 =40;
  }
  else if(option=="User Defined"){
  }
  else if(option=="Bus starts at Town B"){
  obj2_x =obj2_x0= townB_x;
  V_2 =-40;
  obj1_x =obj1_x0= townA_x;
  V_1 =40;
  }
  else if(option=="Car starts at Town B"){
  obj2_x =obj2_x0= townA_x;
  V_2 =40;
  obj1_x =obj1_x0= townB_x;
  V_1 =-40;
  }
  else if(option=="Busspeed = 70, Carspeed = 50, TownB=70, Who reach first?"){
  V_2 =70;
  V_1 =50;
  townB_x = 70;
  min_x = 0-10;
   max_x = townB_x+10;
  }
  else if(option=="Bus travels 120 km in 2 hours, what is the speed in km/h?"){
  V_2 =60;
  V_1 =60;
  townB_x = 120;
  min_x = 0-10;
   max_x = townB_x+10;
  }
  else if(option=="Bus travels 300 km in 3 hours, what is the speed in km/h?"){
  V_2 =100;
  V_1 =100;
  townB_x = 300;
  min_x = 0-10;
   max_x = townB_x+10;
  }
  else if(option=="Bus travels 1600 m in 10 minutes, what is the speed in km/h?"){
  V_2 =9.6;
  V_1 =9.6;
  townB_x = 1.6;
  min_x = 0-10;
   max_x = townB_x+10;
  }
  else if(option=="Bus travels 1600 m in 8 minutes, what is the speed in km/h?"){
  V_2 =12;
  V_1 =12;
  townB_x = 1.6;
  min_x = 0-10;
   max_x = townB_x+20;
  }
  else if(option=="Bus travels 50 km/h, what is the time taken to complete 25 km?"){
  V_2 =50;
  V_1 =50;
  townB_x = 25;
  min_x = 0-10;
   max_x = townB_x+50;
  }
  else if(option=="Aeroplane travels 1800 km/h in 10minutes, how far did he travel?"){
  V_2 =1800;
  V_1 =1800;
  townB_x = 300;
  min_x = 0-10;
   max_x = townB_x+V_2;
  }
  else if(option=="Random"){
   townB_x =Math.round(Math.random()*20)*10;
   obj1_x =obj1_x0= Math.round(Math.random()*townB_x/10)*10;
  V_1 =Math.round(Math.random()*4)*10;
  obj2_x =obj2_x0= Math.round(Math.random()*townB_x/10)*10;
  V_2 =Math.round(Math.random()*4)*10;
  min_x = 0-10;
   max_x = townB_x+10;
  }
  //"distance Bus to Car show","distance Bus to Car hide"
  else if(option=="distance Bus to Car show"){
    show_distbtwobj=true;
    }
    else if(option=="distance Bus to Car hide"){
    show_distbtwobj=false;
    }
    
    //"pause after every 10 min","pause after every 20 min","pause after every 30 min","pause after every 40 min","pause after every 50 min","pause after every 60 min","pause after every xx min"
  else if(option=="pause after every 10 min"){
    stop_sim_min= 10;
  stop_sim_time =stop_sim_time0 = stop_sim_hr*60 + stop_sim_min;  
    }
    else if(option=="pause after every 20 min"){
    stop_sim_min= 20;
  stop_sim_time =stop_sim_time0 = stop_sim_hr*60 + stop_sim_min;  
    }
    else if(option=="pause after every 30 min"){
    stop_sim_min= 30;
  stop_sim_time =stop_sim_time0 = stop_sim_hr*60 + stop_sim_min;  
    }
    else if(option=="pause after every 40 min"){
    stop_sim_min= 40;
  stop_sim_time =stop_sim_time0 = stop_sim_hr*60 + stop_sim_min;  
    }
    else if(option=="pause after every 50 min"){
    stop_sim_min= 50;
  stop_sim_time =stop_sim_time0 = stop_sim_hr*60 + stop_sim_min;  
    }
    else if(option=="pause after every 60 min"){
    stop_sim_min= 60;
  stop_sim_time =stop_sim_time0 = stop_sim_hr*60 + stop_sim_min;  
    }
    else if(option=="pause after every xx min"){
      }
      
      //storing values
      
      V_2s =V_2;
  V_1s =V_2;
  //_initialize(); // attempt to add back storing values;

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Disabled",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Disabled' for element 'comboBox'
          _view.comboBox.linkProperty("SelectedOptions",  function() { return selected; }, function(_v) { selected = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.comboBox2.linkProperty("Options",  function() { return ["pause at 10 km","pause at 20 km","pause at 30 km","pause at 40 km","pause at 50 km","pause at 60 km","pause at 70 km","pause at 80 km","pause at 90 km","pause at100 km","pause at xx km","start position show","start position hide","from A show","from A hide","from B show","from B hide","distance moved show","distance moved hide","U turn true","U turn false"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox2'
          _view.comboBox2.setAction("OnChange", function(_data,_info) {
  //"start position show","start position off"
  var opts = _view.comboBox2.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //
  if(option=="start position show"){
   show_initialB=true;
  }
  else if(option=="start position hide"){
  show_initialB=false;
  }
  //"pause every 10 km"
  else if(option=="pause at 10 km"){
  stop_sim_obj2=10;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 20 km"){
  stop_sim_obj2=20;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 30 km"){
  stop_sim_obj2=30;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 40 km"){
  stop_sim_obj2=40;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 50 km"){
  stop_sim_obj2=50;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 60 km"){
  stop_sim_obj2=60;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 70 km"){
  stop_sim_obj2=70;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 80 km"){
  stop_sim_obj2=80;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at 90 km"){
  stop_sim_obj2=90;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  else if(option=="pause at100 km"){
  stop_sim_obj2=100;
  stop_sim_obj2 = check_pos(stop_sim_obj2);
  }
  //"from B show","from B hide","distance moved show","distance moved hide"
  else if(option=="from A show"){
  show_obj2_A=true;
  }
  else if(option=="from A hide"){
  show_obj2_A=false;
  }
  else if(option=="from B show"){
  show_obj2_B=true;
  }
  else if(option=="from B hide"){
  show_obj2_B=false;
  }
  //show_obj2_wkmv
  else if(option=="distance moved show"){
  show_obj2_wkmv=true;
  }
  else if(option=="distance moved hide"){
  show_obj2_wkmv=false;
  }
  //"U turn true","U turn false"
  //U_2
  else if(option=="U turn true"){
  U_2=true;
  obj_UTurn[1]=U_2;
  }
  else if(option=="U turn false"){
  U_2=false;
  obj_UTurn[1]=U_2;
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox2'
          _view.comboBox2.linkProperty("Disabled",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Disabled' for element 'comboBox2'
          _view.comboBox2.linkProperty("SelectedOptions",  function() { return selected1; }, function(_v) { selected1 = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'comboBox2'
          _view.comboBox2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox2'
          _view.RedSetDistStopDistField.linkProperty("Value",  function() { return stop_sim_obj2; }, function(_v) { stop_sim_obj2 = _v; } ); // HtmlView Page linking property 'Value' for element 'RedSetDistStopDistField'
          _view.RedSetDistStopDistField.linkProperty("Editable",  function() { return _isPaused; } ); // HtmlView Page linking property 'Editable' for element 'RedSetDistStopDistField'
          _view.RedSetDistStopDistField.setAction("OnChange", function(_data,_info) {
  stop_sim_obj2 = check_pos(stop_sim_obj2);

}); // HtmlView Page setting action 'OnChange' for element 'RedSetDistStopDistField'
          _view.RedSetDistStopDistField.linkProperty("Visibility",  function() { return _view.comboBox2.getProperty("SelectedOptions")=="pause at xx km"; } ); // HtmlView Page linking property 'Visibility' for element 'RedSetDistStopDistField'
          _view.RedSetDistStopDistField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'RedSetDistStopDistField'
          _view.comboBox22.linkProperty("Options",  function() { return ["pause at 10 km","pause at 20 km","pause at 30 km","pause at 40 km","pause at 50 km","pause at 60 km","pause at 70 km","pause at 80 km","pause at 90 km","pause at100 km","pause at xx km","start position show","start position hide","from A show","from A hide","from B show","from B hide","distance moved show","distance moved hide","U turn true","U turn false"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox22'
          _view.comboBox22.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox22.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //
  //"start position show","start position off"
  if(option=="start position show"){
   show_initialA=true;
  }
  else if(option=="start position hide"){
  show_initialA=false;
  }
  //"pause every 10 km"
  else if(option=="pause at 10 km"){
  stop_sim_obj1=10;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 20 km"){
  stop_sim_obj1=20;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 30 km"){
  stop_sim_obj1=30;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 40 km"){
  stop_sim_obj1=40;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 50 km"){
  stop_sim_obj1=50;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 60 km"){
  stop_sim_obj1=60;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 70 km"){
  stop_sim_obj1=70;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 80 km"){
  stop_sim_obj1=80;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at 90 km"){
  stop_sim_obj1=90;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  else if(option=="pause at100 km"){
  stop_sim_obj1=100;
  stop_sim_obj1 = check_pos(stop_sim_obj1);
  }
  //"from B show","from B hide","distance moved show","distance moved hide"
  else if(option=="from A show"){
  show_obj1_A=true;
  }
  else if(option=="from A hide"){
  show_obj1_A=false;
  }
  else if(option=="from B show"){
  show_obj1_B=true;
  }
  else if(option=="from B hide"){
  show_obj1_B=false;
  }
  //show_obj1_wkmv
  else if(option=="distance moved show"){
  show_obj1_wkmv=true;
  }
  else if(option=="distance moved hide"){
  show_obj1_wkmv=false;
  }
  //"U turn true","U turn false"
  //U_2
  else if(option=="U turn true"){
  U_2=true;
  }
  else if(option=="U turn false"){
  U_2=false;
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox22'
          _view.comboBox22.linkProperty("Disabled",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Disabled' for element 'comboBox22'
          _view.comboBox22.linkProperty("SelectedOptions",  function() { return selected2; }, function(_v) { selected2 = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'comboBox22'
          _view.comboBox22.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox22'
          _view.BlueSetDistStopDistField.linkProperty("Value",  function() { return stop_sim_obj1; }, function(_v) { stop_sim_obj1 = _v; } ); // HtmlView Page linking property 'Value' for element 'BlueSetDistStopDistField'
          _view.BlueSetDistStopDistField.linkProperty("Editable",  function() { return _isPaused; } ); // HtmlView Page linking property 'Editable' for element 'BlueSetDistStopDistField'
          _view.BlueSetDistStopDistField.setAction("OnChange", function(_data,_info) {
  stop_sim_obj1 = check_pos(stop_sim_obj1);

}); // HtmlView Page setting action 'OnChange' for element 'BlueSetDistStopDistField'
          _view.BlueSetDistStopDistField.linkProperty("Visibility",  function() { return _view.comboBox22.getProperty("SelectedOptions")=="pause at xx km"; } ); // HtmlView Page linking property 'Visibility' for element 'BlueSetDistStopDistField'
          _view.BlueSetDistStopDistField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'BlueSetDistStopDistField'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  isPaused=true;
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  isPaused=false;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.stepButton.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.stepButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton'
          _view.reset2.setAction("OnRelease", function(_data,_info) {
  reset_display();

}); // HtmlView Page setting action 'OnRelease' for element 'reset2'
          _view.reset2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'reset2'
          _view.reset.setAction("OnRelease", _reset); // HtmlView Page setting action 'OnRelease' for element 'reset'
          _view.reset.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'reset'
          _view.plottingPanel.linkProperty("Height",  function() { return +_view._format(window.innerHeight*0.9,"0"); } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return max_y; }, function(_v) { max_y = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return max_x; }, function(_v) { max_x = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return msg_coll; }, function(_v) { msg_coll = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return min_x; }, function(_v) { min_x = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return min_y; }, function(_v) { min_y = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("XTickStep",  function() { return (V_1s||V_2s)<500?10:100; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return abt2meetmsg; }, function(_v) { abt2meetmsg = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return msg; }, function(_v) { msg = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.image2.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'image2'
          _view.image.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'image'
          _view.image.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'image'
          _view.town2.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'town2'
          _view.town.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'town'
          _view.town.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'town'
          _view.A.linkProperty("Y",  function() { return town_starty; }, function(_v) { town_starty = _v; } ); // HtmlView Page linking property 'Y' for element 'A'
          _view.A.linkProperty("SizeY",  function() { return town_size; }, function(_v) { town_size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'A'
          _view.B.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'B'
          _view.B.linkProperty("Y",  function() { return town_starty; }, function(_v) { town_starty = _v; } ); // HtmlView Page linking property 'Y' for element 'B'
          _view.B.linkProperty("SizeY",  function() { return town_size; }, function(_v) { town_size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'B'
          _view.B.setAction("OnDrag", function(_data,_info) {
  townB_x=Math.round(townB_x);
  min_x = -0.1 * townB_x;
  max_x = 1.1 * townB_x;
  size_x  = 0.02 * 1.2 * townB_x;
  obj_startpos[0][0] = 0;
  obj_startpos[1][0] = 0;
  obj1_x = 0;
  obj2_x = 0;

}); // HtmlView Page setting action 'OnDrag' for element 'B'
          _view.Alabel.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'Alabel'
          _view.Blabel.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'Blabel'
          _view.Blabel.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'Blabel'
          _view.dragme.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'dragme'
          _view.dragme.linkProperty("Y",  function() { return town_starty+town_size; } ); // HtmlView Page linking property 'Y' for element 'dragme'
          _view.dragme.setAction("OnDrag", function(_data,_info) {
  dragemetrue2=true;
  townB_x= Math.round(townB_x);

}); // HtmlView Page setting action 'OnDrag' for element 'dragme'
          _view.dragarrow__.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'dragarrow__'
          _view.dragarrow__.linkProperty("Y",  function() { return town_starty+town_size; } ); // HtmlView Page linking property 'Y' for element 'dragarrow__'
          _view.dragme32.linkProperty("X",  function() { return dragmex; }, function(_v) { dragmex = _v; } ); // HtmlView Page linking property 'X' for element 'dragme32'
          _view.dragme32.linkProperty("Y",  function() { return dragmey; }, function(_v) { dragmey = _v; } ); // HtmlView Page linking property 'Y' for element 'dragme32'
          _view.dragme32.linkProperty("Visibility",  function() { return (dragemetrue2===false); } ); // HtmlView Page linking property 'Visibility' for element 'dragme32'
          _view.arrowdragme2.linkProperty("SizeX",  function() { return townB_x-dragmex; } ); // HtmlView Page linking property 'SizeX' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("X",  function() { return dragmex; }, function(_v) { dragmex = _v; } ); // HtmlView Page linking property 'X' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("Y",  function() { return dragmey; }, function(_v) { dragmey = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("Visibility",  function() { return dragemetrue2===false; } ); // HtmlView Page linking property 'Visibility' for element 'arrowdragme2'
          _view.arrowdragme2.linkProperty("SizeY",  function() { return town_starty+town_size-dragmey; } ); // HtmlView Page linking property 'SizeY' for element 'arrowdragme2'
          _view.arrow_right.linkProperty("SizeX",  function() { return townB_x-townA_x; } ); // HtmlView Page linking property 'SizeX' for element 'arrow_right'
          _view.arrow_right.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow_right'
          _view.distanceTown.linkProperty("X",  function() { return (townB_x+townA_x)/2; } ); // HtmlView Page linking property 'X' for element 'distanceTown'
          _view.distanceTown.linkProperty("Y",  function() { return townlabel_y+10; } ); // HtmlView Page linking property 'Y' for element 'distanceTown'
          _view.distanceTown.linkProperty("Text",  function() { return "Town A and town B distance ="+_view._format(Math.abs(townB_x+townA_x), "00000.0") + " km"; } ); // HtmlView Page linking property 'Text' for element 'distanceTown'
          _view.arrow_left.linkProperty("SizeX",  function() { return -(townB_x-townA_x); } ); // HtmlView Page linking property 'SizeX' for element 'arrow_left'
          _view.arrow_left.linkProperty("X",  function() { return townB_x-townA_x; } ); // HtmlView Page linking property 'X' for element 'arrow_left'
          _view.arrow_left.linkProperty("Y",  function() { return townlabel_y; }, function(_v) { townlabel_y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow_left'
          _view.t_0.linkProperty("X",  function() { return obj2_x0; }, function(_v) { obj2_x0 = _v; } ); // HtmlView Page linking property 'X' for element 't_0'
          _view.t_0.linkProperty("Y",  function() { return obj2_y; }, function(_v) { obj2_y = _v; } ); // HtmlView Page linking property 'Y' for element 't_0'
          _view.t_0.linkProperty("Visibility",  function() { return show_initialB; }, function(_v) { show_initialB = _v; } ); // HtmlView Page linking property 'Visibility' for element 't_0'
          _view.Object2.linkProperty("X",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'X' for element 'Object2'
          _view.Object2.linkProperty("Y",  function() { return obj2_y; }, function(_v) { obj2_y = _v; } ); // HtmlView Page linking property 'Y' for element 'Object2'
          _view.Object2.setAction("OnDrag", function(_data,_info) {
  obj2_x=Math.round(obj2_x);
  if (time <dt)obj2_x0 = obj2_x ;

}); // HtmlView Page setting action 'OnDrag' for element 'Object2'
          _view.busunicode3.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'busunicode3'
          _view.busunicode3.linkProperty("X",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'X' for element 'busunicode3'
          _view.busunicode3.linkProperty("Y",  function() { return obj2_y; }, function(_v) { obj2_y = _v; } ); // HtmlView Page linking property 'Y' for element 'busunicode3'
          _view.busunicode3.linkProperty("Visibility",  function() { return _view.comboBox.getProperty("SelectedOptions")!="Aeroplane travels 1800 km/h in 10minutes, how far did he travel?"; } ); // HtmlView Page linking property 'Visibility' for element 'busunicode3'
          _view.planeunicode.linkProperty("Transformation",  function() { return [1,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'planeunicode'
          _view.planeunicode.linkProperty("X",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'X' for element 'planeunicode'
          _view.planeunicode.linkProperty("Y",  function() { return obj2_y; }, function(_v) { obj2_y = _v; } ); // HtmlView Page linking property 'Y' for element 'planeunicode'
          _view.planeunicode.linkProperty("Visibility",  function() { return _view.comboBox.getProperty("SelectedOptions")=="Aeroplane travels 1800 km/h in 10minutes, how far did he travel?"; } ); // HtmlView Page linking property 'Visibility' for element 'planeunicode'
          _view.speed2.linkProperty("X",  function() { return obj2_x+V_2; } ); // HtmlView Page linking property 'X' for element 'speed2'
          _view.speed2.linkProperty("Y",  function() { return obj2_y-10; } ); // HtmlView Page linking property 'Y' for element 'speed2'
          _view.speed2.linkProperty("Text",  function() { return "speed = "+_view._format(Math.abs(V_2),"0.0")+ "km/hr"; } ); // HtmlView Page linking property 'Text' for element 'speed2'
          _view.group2.linkProperty("X",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.group2.linkProperty("Y",  function() { return obj2_y; }, function(_v) { obj2_y = _v; } ); // HtmlView Page linking property 'Y' for element 'group2'
          _view.speed32.linkProperty("X",  function() { return V_2; }, function(_v) { V_2 = _v; } ); // HtmlView Page linking property 'X' for element 'speed32'
          _view.speed.linkProperty("SizeX",  function() { return V_2; }, function(_v) { V_2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'speed'
          _view.speed.linkProperty("X",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'X' for element 'speed'
          _view.speed.linkProperty("Y",  function() { return obj2_y; }, function(_v) { obj2_y = _v; } ); // HtmlView Page linking property 'Y' for element 'speed'
          _view.speed.setAction("OnDrag", function(_data,_info) {
  V_2=Math.round(V_2);

}); // HtmlView Page setting action 'OnDrag' for element 'speed'
          _view.Obj2FromA.linkProperty("Y",  function() { return obj2_y-size_y*2; } ); // HtmlView Page linking property 'Y' for element 'Obj2FromA'
          _view.Obj2FromA.linkProperty("Visibility",  function() { return show_obj2_A; }, function(_v) { show_obj2_A = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Obj2FromA'
          _view.obj2DistA.linkProperty("SizeX",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'obj2DistA'
          _view.obj2DistA2.linkProperty("SizeX",  function() { return -obj2_x; } ); // HtmlView Page linking property 'SizeX' for element 'obj2DistA2'
          _view.obj2DistA2.linkProperty("X",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'X' for element 'obj2DistA2'
          _view.Obj2_DistAtxt.linkProperty("X",  function() { return (obj2_x)/2; } ); // HtmlView Page linking property 'X' for element 'Obj2_DistAtxt'
          _view.Obj2_DistAtxt.linkProperty("Y",  function() { return offset_txt; }, function(_v) { offset_txt = _v; } ); // HtmlView Page linking property 'Y' for element 'Obj2_DistAtxt'
          _view.Obj2_DistAtxt.linkProperty("Text",  function() { return _view._format(Math.abs(obj2_x), "00000.0") + " km"; } ); // HtmlView Page linking property 'Text' for element 'Obj2_DistAtxt'
          _view.Obj2_DistAtxt.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'Obj2_DistAtxt'
          _view.Obj2FromB.linkProperty("Y",  function() { return obj2_y-size_y*2; } ); // HtmlView Page linking property 'Y' for element 'Obj2FromB'
          _view.Obj2FromB.linkProperty("Visibility",  function() { return show_obj2_B; }, function(_v) { show_obj2_B = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Obj2FromB'
          _view.obj2DistB.linkProperty("SizeX",  function() { return -obj2_distfromB; } ); // HtmlView Page linking property 'SizeX' for element 'obj2DistB'
          _view.obj2DistB.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'obj2DistB'
          _view.obj2DistB2.linkProperty("SizeX",  function() { return obj2_distfromB; }, function(_v) { obj2_distfromB = _v; } ); // HtmlView Page linking property 'SizeX' for element 'obj2DistB2'
          _view.obj2DistB2.linkProperty("X",  function() { return obj2_x; }, function(_v) { obj2_x = _v; } ); // HtmlView Page linking property 'X' for element 'obj2DistB2'
          _view.obj2DistB_txt.linkProperty("X",  function() { return (townB_x+obj2_x)/2; } ); // HtmlView Page linking property 'X' for element 'obj2DistB_txt'
          _view.obj2DistB_txt.linkProperty("Y",  function() { return offset_txt; }, function(_v) { offset_txt = _v; } ); // HtmlView Page linking property 'Y' for element 'obj2DistB_txt'
          _view.obj2DistB_txt.linkProperty("Text",  function() { return _view._format(obj2_distfromB, "00000.0") + " km"; } ); // HtmlView Page linking property 'Text' for element 'obj2DistB_txt'
          _view.obj2DistB_txt.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'obj2DistB_txt'
          _view.InitialB.linkProperty("Y",  function() { return obj2_y+size_y-2; } ); // HtmlView Page linking property 'Y' for element 'InitialB'
          _view.InitialB.linkProperty("Visibility",  function() { return show_initialB; }, function(_v) { show_initialB = _v; } ); // HtmlView Page linking property 'Visibility' for element 'InitialB'
          _view.obj2DistInitB_txt.linkProperty("X",  function() { return obj2_x0; }, function(_v) { obj2_x0 = _v; } ); // HtmlView Page linking property 'X' for element 'obj2DistInitB_txt'
          _view.obj2DistInitB_txt.linkProperty("Y",  function() { return -offset_txt; } ); // HtmlView Page linking property 'Y' for element 'obj2DistInitB_txt'
          _view.obj2DistInitB_txt.linkProperty("Text",  function() { return _view._format(Math.abs(obj2_x0), "00000.0") + " km"; } ); // HtmlView Page linking property 'Text' for element 'obj2DistInitB_txt'
          _view.obj2DistInitB.linkProperty("SizeX",  function() { return -obj_startpos[1][0]; } ); // HtmlView Page linking property 'SizeX' for element 'obj2DistInitB'
          _view.obj2DistInitB.linkProperty("X",  function() { return obj_startpos[1][0]; } ); // HtmlView Page linking property 'X' for element 'obj2DistInitB'
          _view.obj2DistInitB2.linkProperty("SizeX",  function() { return obj_startpos[1][0]; } ); // HtmlView Page linking property 'SizeX' for element 'obj2DistInitB2'
          _view.t_02.linkProperty("X",  function() { return obj1_x0; }, function(_v) { obj1_x0 = _v; } ); // HtmlView Page linking property 'X' for element 't_02'
          _view.t_02.linkProperty("Y",  function() { return obj1_y; }, function(_v) { obj1_y = _v; } ); // HtmlView Page linking property 'Y' for element 't_02'
          _view.t_02.linkProperty("Visibility",  function() { return show_initialA; }, function(_v) { show_initialA = _v; } ); // HtmlView Page linking property 'Visibility' for element 't_02'
          _view.Object1.linkProperty("X",  function() { return obj1_x; }, function(_v) { obj1_x = _v; } ); // HtmlView Page linking property 'X' for element 'Object1'
          _view.Object1.linkProperty("Y",  function() { return obj1_y; }, function(_v) { obj1_y = _v; } ); // HtmlView Page linking property 'Y' for element 'Object1'
          _view.Object1.setAction("OnDrag", function(_data,_info) {
  obj1_x=Math.round(obj1_x);
  if (time <dt)obj1_x0 = obj1_x ;

}); // HtmlView Page setting action 'OnDrag' for element 'Object1'
          _view.busunicode2.linkProperty("Transformation",  function() { return [a,b,c,d,e,f]; } ); // HtmlView Page linking property 'Transformation' for element 'busunicode2'
          _view.busunicode2.linkProperty("X",  function() { return obj1_x; }, function(_v) { obj1_x = _v; } ); // HtmlView Page linking property 'X' for element 'busunicode2'
          _view.busunicode2.linkProperty("Y",  function() { return obj1_y; }, function(_v) { obj1_y = _v; } ); // HtmlView Page linking property 'Y' for element 'busunicode2'
          _view.text.linkProperty("X",  function() { return obj1_x+V_1; } ); // HtmlView Page linking property 'X' for element 'text'
          _view.text.linkProperty("Y",  function() { return obj1_y+10; } ); // HtmlView Page linking property 'Y' for element 'text'
          _view.text.linkProperty("Text",  function() { return "speed = "+_view._format(Math.abs(V_1),"0")+ "km/hr"; } ); // HtmlView Page linking property 'Text' for element 'text'
          _view.group.linkProperty("X",  function() { return obj1_x; }, function(_v) { obj1_x = _v; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return obj1_y; }, function(_v) { obj1_y = _v; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.speed3.linkProperty("X",  function() { return V_1; }, function(_v) { V_1 = _v; } ); // HtmlView Page linking property 'X' for element 'speed3'
          _view.speed1.linkProperty("SizeX",  function() { return V_1; }, function(_v) { V_1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'speed1'
          _view.speed1.linkProperty("X",  function() { return obj1_x; }, function(_v) { obj1_x = _v; } ); // HtmlView Page linking property 'X' for element 'speed1'
          _view.speed1.linkProperty("Y",  function() { return obj1_y; }, function(_v) { obj1_y = _v; } ); // HtmlView Page linking property 'Y' for element 'speed1'
          _view.speed1.setAction("OnDrag", function(_data,_info) {
  V_1=Math.round(V_1);

}); // HtmlView Page setting action 'OnDrag' for element 'speed1'
          _view.Obj1FromA.linkProperty("Y",  function() { return obj1_y + offset_pos - 10; } ); // HtmlView Page linking property 'Y' for element 'Obj1FromA'
          _view.Obj1FromA.linkProperty("Visibility",  function() { return show_obj1_A; }, function(_v) { show_obj1_A = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Obj1FromA'
          _view.obj1DistA2.linkProperty("SizeX",  function() { return -obj1_x; } ); // HtmlView Page linking property 'SizeX' for element 'obj1DistA2'
          _view.obj1DistA2.linkProperty("X",  function() { return obj1_x; }, function(_v) { obj1_x = _v; } ); // HtmlView Page linking property 'X' for element 'obj1DistA2'
          _view.obj1DistA.linkProperty("SizeX",  function() { return obj1_x; }, function(_v) { obj1_x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'obj1DistA'
          _view.obj1DistA_txt.linkProperty("X",  function() { return (obj1_x)/2; } ); // HtmlView Page linking property 'X' for element 'obj1DistA_txt'
          _view.obj1DistA_txt.linkProperty("Y",  function() { return -offset_txt; } ); // HtmlView Page linking property 'Y' for element 'obj1DistA_txt'
          _view.obj1DistA_txt.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'obj1DistA_txt'
          _view.obj1DistA_txt.linkProperty("Text",  function() { return _view._format(Math.abs(obj1_x), "00000.0") + " km"; } ); // HtmlView Page linking property 'Text' for element 'obj1DistA_txt'
          _view.Obj1FromB.linkProperty("Y",  function() { return obj1_y + offset_pos - 10; } ); // HtmlView Page linking property 'Y' for element 'Obj1FromB'
          _view.Obj1FromB.linkProperty("Visibility",  function() { return show_obj1_B; }, function(_v) { show_obj1_B = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Obj1FromB'
          _view.obj1DistB.linkProperty("SizeX",  function() { return -obj1_distfromB; } ); // HtmlView Page linking property 'SizeX' for element 'obj1DistB'
          _view.obj1DistB.linkProperty("X",  function() { return townB_x; }, function(_v) { townB_x = _v; } ); // HtmlView Page linking property 'X' for element 'obj1DistB'
          _view.obj1DistB.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'obj1DistB'
          _view.obj1DistB2.linkProperty("SizeX",  function() { return obj1_distfromB; }, function(_v) { obj1_distfromB = _v; } ); // HtmlView Page linking property 'SizeX' for element 'obj1DistB2'
          _view.obj1DistB2.linkProperty("X",  function() { return obj1_x; }, function(_v) { obj1_x = _v; } ); // HtmlView Page linking property 'X' for element 'obj1DistB2'
          _view.obj1DistB_txt.linkProperty("X",  function() { return (townB_x+obj1_x)/2; } ); // HtmlView Page linking property 'X' for element 'obj1DistB_txt'
          _view.obj1DistB_txt.linkProperty("Y",  function() { return -offset_txt; } ); // HtmlView Page linking property 'Y' for element 'obj1DistB_txt'
          _view.obj1DistB_txt.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'obj1DistB_txt'
          _view.obj1DistB_txt.linkProperty("Text",  function() { return _view._format(Math.abs(obj1_distfromB), "00000.0" ) + " km"; } ); // HtmlView Page linking property 'Text' for element 'obj1DistB_txt'
          _view.InitialA.linkProperty("Y",  function() { return obj1_y-15; } ); // HtmlView Page linking property 'Y' for element 'InitialA'
          _view.InitialA.linkProperty("Visibility",  function() { return show_initialA; }, function(_v) { show_initialA = _v; } ); // HtmlView Page linking property 'Visibility' for element 'InitialA'
          _view.obj1DistInitA_txt.linkProperty("X",  function() { return obj1_x0; }, function(_v) { obj1_x0 = _v; } ); // HtmlView Page linking property 'X' for element 'obj1DistInitA_txt'
          _view.obj1DistInitA_txt.linkProperty("Y",  function() { return offset_txt/2; } ); // HtmlView Page linking property 'Y' for element 'obj1DistInitA_txt'
          _view.obj1DistInitA_txt.linkProperty("Text",  function() { return _view._format(Math.abs(obj1_x0), "00000.0") + " km"; } ); // HtmlView Page linking property 'Text' for element 'obj1DistInitA_txt'
          _view.obj1DistInitA.linkProperty("SizeX",  function() { return -obj_startpos[0][0]; } ); // HtmlView Page linking property 'SizeX' for element 'obj1DistInitA'
          _view.obj1DistInitA.linkProperty("X",  function() { return obj_startpos[0][0]; } ); // HtmlView Page linking property 'X' for element 'obj1DistInitA'
          _view.obj1DistInitA2.linkProperty("SizeX",  function() { return obj_startpos[0][0]; } ); // HtmlView Page linking property 'SizeX' for element 'obj1DistInitA2'
          _view.BtwObject.linkProperty("Visibility",  function() { return show_distbtwobj; }, function(_v) { show_distbtwobj = _v; } ); // HtmlView Page linking property 'Visibility' for element 'BtwObject'
          _view.distance_btw.linkProperty("X",  function() { return (obj1_x+obj2_x)/2; } ); // HtmlView Page linking property 'X' for element 'distance_btw'
          _view.distance_btw.linkProperty("Y",  function() { return (obj2_y+obj1_y)/2 +10; } ); // HtmlView Page linking property 'Y' for element 'distance_btw'
          _view.distance_btw.linkProperty("Text",  function() { return _view._format(Math.abs(obj1_x-obj2_x), "00000.0") + " km"; } ); // HtmlView Page linking property 'Text' for element 'distance_btw'
          _view.distance_btw.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'distance_btw'
          _view.Object1Object2DistanceBTW_right.linkProperty("SizeX",  function() { return Math.abs(obj1_x-obj2_x); } ); // HtmlView Page linking property 'SizeX' for element 'Object1Object2DistanceBTW_right'
          _view.Object1Object2DistanceBTW_right.linkProperty("X",  function() { return obj_btw_1; }, function(_v) { obj_btw_1 = _v; } ); // HtmlView Page linking property 'X' for element 'Object1Object2DistanceBTW_right'
          _view.Object1Object2DistanceBTW_right.linkProperty("Y",  function() { return (obj1_y+obj2_y)/2; } ); // HtmlView Page linking property 'Y' for element 'Object1Object2DistanceBTW_right'
          _view.Object1Object2DistanceBTW_left.linkProperty("SizeX",  function() { return -Math.abs(obj1_x-obj2_x); } ); // HtmlView Page linking property 'SizeX' for element 'Object1Object2DistanceBTW_left'
          _view.Object1Object2DistanceBTW_left.linkProperty("X",  function() { return obj_btw_2; }, function(_v) { obj_btw_2 = _v; } ); // HtmlView Page linking property 'X' for element 'Object1Object2DistanceBTW_left'
          _view.Object1Object2DistanceBTW_left.linkProperty("Y",  function() { return (obj1_y+obj2_y)/2; } ); // HtmlView Page linking property 'Y' for element 'Object1Object2DistanceBTW_left'
          _view.Obj1DistMarkers.linkProperty("Visibility",  function() { return show_obj1_wkmv; }, function(_v) { show_obj1_wkmv = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Obj1DistMarkers'
          _view.obj1_dist.linkProperty("SizeX",  function() { return obj1_size1; }, function(_v) { obj1_size1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'obj1_dist'
          _view.obj1_dist.linkProperty("X",  function() { return obj1_arrow1; }, function(_v) { obj1_arrow1 = _v; } ); // HtmlView Page linking property 'X' for element 'obj1_dist'
          _view.obj1_dist.linkProperty("Y",  function() { return obj1_arrow_pos; }, function(_v) { obj1_arrow_pos = _v; } ); // HtmlView Page linking property 'Y' for element 'obj1_dist'
          _view.obj1_dist2.linkProperty("SizeX",  function() { return obj1_size2; }, function(_v) { obj1_size2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'obj1_dist2'
          _view.obj1_dist2.linkProperty("X",  function() { return obj1_arrow2; }, function(_v) { obj1_arrow2 = _v; } ); // HtmlView Page linking property 'X' for element 'obj1_dist2'
          _view.obj1_dist2.linkProperty("Y",  function() { return obj1_arrow_pos; }, function(_v) { obj1_arrow_pos = _v; } ); // HtmlView Page linking property 'Y' for element 'obj1_dist2'
          _view.textSet.linkProperty("X",  function() { return obj1_x_txtpos; }, function(_v) { obj1_x_txtpos = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return obj1_dist_text; }, function(_v) { obj1_dist_text = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return obj1_distmsg; }, function(_v) { obj1_distmsg = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.textSet.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'textSet'
          _view.Obj2DistMarkers.linkProperty("Y",  function() { return obj2_y+45; } ); // HtmlView Page linking property 'Y' for element 'Obj2DistMarkers'
          _view.Obj2DistMarkers.linkProperty("Visibility",  function() { return show_obj2_wkmv; }, function(_v) { show_obj2_wkmv = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Obj2DistMarkers'
          _view.Obj2Arrow1.linkProperty("SizeX",  function() { return obj2_size1; }, function(_v) { obj2_size1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Obj2Arrow1'
          _view.Obj2Arrow1.linkProperty("X",  function() { return obj2_arrow1; }, function(_v) { obj2_arrow1 = _v; } ); // HtmlView Page linking property 'X' for element 'Obj2Arrow1'
          _view.Obj2Arrow1.linkProperty("Y",  function() { return obj2_arrow_pos; }, function(_v) { obj2_arrow_pos = _v; } ); // HtmlView Page linking property 'Y' for element 'Obj2Arrow1'
          _view.Obj2Arrow2.linkProperty("SizeX",  function() { return obj2_size2; }, function(_v) { obj2_size2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'Obj2Arrow2'
          _view.Obj2Arrow2.linkProperty("X",  function() { return obj2_arrow2; }, function(_v) { obj2_arrow2 = _v; } ); // HtmlView Page linking property 'X' for element 'Obj2Arrow2'
          _view.Obj2Arrow2.linkProperty("Y",  function() { return obj2_arrow_pos; }, function(_v) { obj2_arrow_pos = _v; } ); // HtmlView Page linking property 'Y' for element 'Obj2Arrow2'
          _view.textSet2.linkProperty("X",  function() { return obj2_x_txtpos; }, function(_v) { obj2_x_txtpos = _v; } ); // HtmlView Page linking property 'X' for element 'textSet2'
          _view.textSet2.linkProperty("Y",  function() { return obj2_dist_text; }, function(_v) { obj2_dist_text = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet2'
          _view.textSet2.linkProperty("Text",  function() { return obj2_distmsg; }, function(_v) { obj2_distmsg = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet2'
          _view.textSet2.linkProperty("Visibility",  function() { return _isPaused; } ); // HtmlView Page linking property 'Visibility' for element 'textSet2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PriMathSpeedV8_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PriMathSpeedV8_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./PriMathSpeedV8_Intro_1.html');

  return _view;
} // end of main function

function PriMathSpeedV8_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'fullscreen'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"RedPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'RedPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'RedPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'RedPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox2", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox2'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'comboBox2'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"RedSetDistStopDistField", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'RedSetDistStopDistField'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'RedSetDistStopDistField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'RedSetDistStopDistField'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox22", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox22'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'comboBox22'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox22'
      .setProperty("Foreground","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'comboBox22'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"BlueSetDistStopDistField", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BlueSetDistStopDistField'
      .setProperty("Width","3vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'BlueSetDistStopDistField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'BlueSetDistStopDistField'
      .setProperty("Tooltip","Set Distance") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BlueSetDistStopDistField'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Text","|▶") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"reset2", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'reset2'
      .setProperty("Text","⌫") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'reset2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"reset", _view.RedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'reset'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'reset'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displayPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'displayPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("YTickStep",250) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AxisXFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Town", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Town'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image2", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'image2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'image2'
      .setProperty("ImageUrl","./PriMathV8/landscape2.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image2'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image2'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'image2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image'
      .setProperty("ImageUrl","./PriMathV8/ecology5.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"town2", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'town2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'town2'
      .setProperty("Text","🏠") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'town2'
      .setProperty("Font","normal normal 7vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'town2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"town", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'town'
      .setProperty("Text","🏫") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'town'
      .setProperty("Font","normal normal 7vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'town'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"A", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'A'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'A'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'A'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'A'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'A'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"B", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'B'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'B'
      .setProperty("LineColor","rgba(0,128,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'B'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'B'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Alabel", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'Alabel'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Alabel'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'Alabel'
      .setProperty("Text","A") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Alabel'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Alabel'
      .setProperty("Font","normal normal 5vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Alabel'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Blabel", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'Blabel'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Blabel'
      .setProperty("Text","B") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Blabel'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Blabel'
      .setProperty("Font","normal normal 5vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'Blabel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dragme", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'dragme'
      .setProperty("FillColor","rgba(200,200,0,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dragme'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'dragme'
      .setProperty("ShapeType","NONE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dragme'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'dragme'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'dragme'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragme'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"dragarrow__", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'dragarrow__'
      .setProperty("Text","↔") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dragarrow__'
      .setProperty("Font","normal normal 7vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'dragarrow__'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"dragme32", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'dragme32'
      .setProperty("Text","drag me") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'dragme32'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragme32'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrowdragme2", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowdragme2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowdragme2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowdragme2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowdragme2'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowdragme2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow_right", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow_right'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow_right'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrow_right'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow_right'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow_right'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow_right'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow_right'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"distanceTown", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'distanceTown'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'distanceTown'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'distanceTown'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow_left", _view.Town) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow_left'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow_left'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow_left'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow_left'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow_left'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow_left'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Object2_Red", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Object2_Red'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"t_0", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 't_0'
      .setProperty("FillColor","rgba(255,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 't_0'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 't_0'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 't_0'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 't_0'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 't_0'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 't_0'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Object2", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'Object2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Object2'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Object2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Object2'
      .setProperty("ShapeType","NONE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Object2'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Object2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Object2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Object2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"busunicode3", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'busunicode3'
      .setProperty("Text","🚌") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'busunicode3'
      .setProperty("Font","normal normal 7vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'busunicode3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"planeunicode", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'planeunicode'
      .setProperty("Text","🛩") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'planeunicode'
      .setProperty("Font","normal normal 7vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'planeunicode'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"speed2", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'speed2'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'speed2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'speed2'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'speed2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'speed2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"speed32", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'speed32'
      .setProperty("FillColor","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'speed32'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'speed32'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'speed32'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'speed32'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'speed32'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'speed32'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'speed32'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"speed", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'speed'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'speed'
      .setProperty("EnabledSize","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'speed'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'speed'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'speed'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Obj2FromA", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj2FromA'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj2DistA", _view.Obj2FromA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistA'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj2DistA'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'obj2DistA'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj2DistA'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj2DistA'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj2DistA'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj2DistA2", _view.Obj2FromA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistA2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj2DistA2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj2DistA2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj2DistA2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj2DistA2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Obj2_DistAtxt", _view.Obj2FromA) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj2_DistAtxt'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Obj2_DistAtxt'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Obj2_DistAtxt'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Obj2FromB", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj2FromB'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj2DistB", _view.Obj2FromB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistB'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj2DistB'
      .setProperty("LineColor","rgba(0,128,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj2DistB'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj2DistB'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj2DistB'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj2DistB2", _view.Obj2FromB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistB2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj2DistB2'
      .setProperty("LineColor","rgba(0,128,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj2DistB2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj2DistB2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj2DistB2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"obj2DistB_txt", _view.Obj2FromB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistB_txt'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'obj2DistB_txt'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'obj2DistB_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"InitialB", _view.Object2_Red) // EJsS HtmlView.HtmlView Page: declaration of element 'InitialB'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"obj2DistInitB_txt", _view.InitialB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistInitB_txt'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'obj2DistInitB_txt'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'obj2DistInitB_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj2DistInitB", _view.InitialB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistInitB'
      .setProperty("MarkEnd","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj2DistInitB'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj2DistInitB'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj2DistInitB'
      .setProperty("LineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj2DistInitB'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj2DistInitB2", _view.InitialB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj2DistInitB2'
      .setProperty("MarkEnd","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj2DistInitB2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'obj2DistInitB2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj2DistInitB2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj2DistInitB2'
      .setProperty("LineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj2DistInitB2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Object1_Blue", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Object1_Blue'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"t_02", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 't_02'
      .setProperty("FillColor","rgba(0,0,255,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 't_02'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 't_02'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 't_02'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 't_02'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 't_02'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 't_02'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Object1", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'Object1'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Object1'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Object1'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Object1'
      .setProperty("ShapeType","NONE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Object1'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Object1'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Object1'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'Object1'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Object1'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"busunicode2", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'busunicode2'
      .setProperty("Text","🚗") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'busunicode2'
      .setProperty("Font","normal normal 7vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'busunicode2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"speed3", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'speed3'
      .setProperty("FillColor","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'speed3'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'speed3'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'speed3'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'speed3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'speed3'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'speed3'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'speed3'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"speed1", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'speed1'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'speed1'
      .setProperty("EnabledSize","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'speed1'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'speed1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'speed1'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Obj1FromA", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj1FromA'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj1DistA2", _view.Obj1FromA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistA2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1DistA2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1DistA2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj1DistA2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj1DistA2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj1DistA", _view.Obj1FromA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistA'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1DistA'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'obj1DistA'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1DistA'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj1DistA'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj1DistA'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"obj1DistA_txt", _view.Obj1FromA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistA_txt'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'obj1DistA_txt'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'obj1DistA_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Obj1FromB", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj1FromB'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj1DistB", _view.Obj1FromB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistB'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1DistB'
      .setProperty("LineColor","rgba(0,128,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1DistB'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj1DistB'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj1DistB'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj1DistB2", _view.Obj1FromB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistB2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1DistB2'
      .setProperty("LineColor","rgba(0,128,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1DistB2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj1DistB2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj1DistB2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"obj1DistB_txt", _view.Obj1FromB) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistB_txt'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'obj1DistB_txt'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'obj1DistB_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"InitialA", _view.Object1_Blue) // EJsS HtmlView.HtmlView Page: declaration of element 'InitialA'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"obj1DistInitA_txt", _view.InitialA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistInitA_txt'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'obj1DistInitA_txt'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1DistInitA_txt'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'obj1DistInitA_txt'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj1DistInitA", _view.InitialA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistInitA'
      .setProperty("MarkEnd","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1DistInitA'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1DistInitA'
      .setProperty("Y",-2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'obj1DistInitA'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj1DistInitA'
      .setProperty("LineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj1DistInitA'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"obj1DistInitA2", _view.InitialA) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1DistInitA2'
      .setProperty("MarkEnd","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1DistInitA2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'obj1DistInitA2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1DistInitA2'
      .setProperty("Y",-2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'obj1DistInitA2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'obj1DistInitA2'
      .setProperty("LineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'obj1DistInitA2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"BtwObject", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BtwObject'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"distance_btw", _view.BtwObject) // EJsS HtmlView.HtmlView Page: declaration of element 'distance_btw'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'distance_btw'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'distance_btw'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Object1Object2DistanceBTW_right", _view.BtwObject) // EJsS HtmlView.HtmlView Page: declaration of element 'Object1Object2DistanceBTW_right'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'Object1Object2DistanceBTW_right'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Object1Object2DistanceBTW_right'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Object1Object2DistanceBTW_right'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Object1Object2DistanceBTW_right'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"Object1Object2DistanceBTW_left", _view.BtwObject) // EJsS HtmlView.HtmlView Page: declaration of element 'Object1Object2DistanceBTW_left'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'Object1Object2DistanceBTW_left'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Object1Object2DistanceBTW_left'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Object1Object2DistanceBTW_left'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'Object1Object2DistanceBTW_left'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Obj1DistMarkers", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj1DistMarkers'
      .setProperty("Y",-5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'Obj1DistMarkers'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"obj1_dist", _view.Obj1DistMarkers) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1_dist'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1_dist'
      .setProperty("LineColor","rgba(64,0,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1_dist'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"obj1_dist2", _view.Obj1DistMarkers) // EJsS HtmlView.HtmlView Page: declaration of element 'obj1_dist2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'obj1_dist2'
      .setProperty("LineColor","rgba(64,0,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'obj1_dist2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.Obj1DistMarkers) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"Obj2DistMarkers", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj2DistMarkers'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"Obj2Arrow1", _view.Obj2DistMarkers) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj2Arrow1'
      .setProperty("LineColor","rgba(255,64,64,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Obj2Arrow1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"Obj2Arrow2", _view.Obj2DistMarkers) // EJsS HtmlView.HtmlView Page: declaration of element 'Obj2Arrow2'
      .setProperty("LineColor","rgba(255,64,64,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'Obj2Arrow2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet2", _view.Obj2DistMarkers) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Primary Math Speed<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_PriMathSpeedV8/PriMathV8/Screen Shot 2017-12-14 at 10.23.21 AM.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_PriMathSpeedV8/01authorszeyee2014-06-20_1101.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_PriMathSpeedV8/01authorlookang50x50.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_PriMathSpeedV8/1authorlookangphoto5050.png" />
 Sze Yee; tina tan; lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Sze Yee; tina tan; lookang.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PriMathSpeedV8("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_PriMathSpeedV8/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
