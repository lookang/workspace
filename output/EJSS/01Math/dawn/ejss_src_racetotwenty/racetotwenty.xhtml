<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Add to Twenty Game</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function racetotwenty(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var font; // EjsS Model.Variables.Var Table.font
  var fontbig; // EjsS Model.Variables.Var Table.fontbig
  var fontsmall; // EjsS Model.Variables.Var Table.fontsmall
  var userdefined; // EjsS Model.Variables.Var Table.userdefined
  var dt; // EjsS Model.Variables.Var Table.dt
  var t; // EjsS Model.Variables.Var Table.t
  var showscore; // EjsS Model.Variables.Var Table.showscore
  var score; // EjsS Model.Variables.Var Table.score
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var pi; // EjsS Model.Variables.Var Table.pi
  var feedbacktext; // EjsS Model.Variables.Var Table.feedbacktext
  var hinttext; // EjsS Model.Variables.Var Table.hinttext
  var n; // EjsS Model.Variables.Var Table.n
  var ns; // EjsS Model.Variables.Var Table.ns
  var xcell; // EjsS Model.Variables.Var Table.xcell
  var ycell; // EjsS Model.Variables.Var Table.ycell
  var ycellwordsp1; // EjsS Model.Variables.Var Table.ycellwordsp1
  var ycellwordsp2; // EjsS Model.Variables.Var Table.ycellwordsp2
  var ycell2; // EjsS Model.Variables.Var Table.ycell2
  var xcell2; // EjsS Model.Variables.Var Table.xcell2
  var cellsizex; // EjsS Model.Variables.Var Table.cellsizex
  var cellsizey; // EjsS Model.Variables.Var Table.cellsizey
  var text; // EjsS Model.Variables.Var Table.text
  var text2; // EjsS Model.Variables.Var Table.text2
  var textwordsp1; // EjsS Model.Variables.Var Table.textwordsp1
  var textwordsp2; // EjsS Model.Variables.Var Table.textwordsp2
  var textwords; // EjsS Model.Variables.Var Table.textwords
  var textanswer; // EjsS Model.Variables.Var Table.textanswer
  var nobject; // EjsS Model.Variables.Var Table.nobject
  var textobject; // EjsS Model.Variables.Var Table.textobject
  var textobjectdisplay; // EjsS Model.Variables.Var Table.textobjectdisplay
  var xobject; // EjsS Model.Variables.Var Table.xobject
  var yobject; // EjsS Model.Variables.Var Table.yobject
  var objectsizex; // EjsS Model.Variables.Var Table.objectsizex
  var objectsizey; // EjsS Model.Variables.Var Table.objectsizey
  var firsttime; // EjsS Model.Variables.Var Table.firsttime
  var objectinteracted; // EjsS Model.Variables.Var Table.objectinteracted
  var objectinteracted2; // EjsS Model.Variables.Var Table.objectinteracted2
  var nVectorsSq; // EjsS Model.Variables.Var Table.nVectorsSq
  var colorVectors; // EjsS Model.Variables.Var Table.colorVectors

  var ngame; // EjsS Model.Variables.game.ngame
  var start; // EjsS Model.Variables.game.start
  var end; // EjsS Model.Variables.game.end
  var onceonly; // EjsS Model.Variables.game.onceonly
  var alertlater; // EjsS Model.Variables.game.alertlater
  var xgame; // EjsS Model.Variables.game.xgame
  var ygame; // EjsS Model.Variables.game.ygame
  var textgame; // EjsS Model.Variables.game.textgame
  var colorplayer1; // EjsS Model.Variables.game.colorplayer1
  var colorplayer2; // EjsS Model.Variables.game.colorplayer2
  var gamecolor; // EjsS Model.Variables.game.gamecolor
  var textwordsgame; // EjsS Model.Variables.game.textwordsgame
  var count; // EjsS Model.Variables.game.count
  var count2; // EjsS Model.Variables.game.count2
  var counttotal; // EjsS Model.Variables.game.counttotal
  var message; // EjsS Model.Variables.game.message


  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      font : font,
      fontbig : fontbig,
      fontsmall : fontsmall,
      userdefined : userdefined,
      dt : dt,
      t : t,
      showscore : showscore,
      score : score,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      pi : pi,
      feedbacktext : feedbacktext,
      hinttext : hinttext,
      n : n,
      ns : ns,
      xcell : xcell,
      ycell : ycell,
      ycellwordsp1 : ycellwordsp1,
      ycellwordsp2 : ycellwordsp2,
      ycell2 : ycell2,
      xcell2 : xcell2,
      cellsizex : cellsizex,
      cellsizey : cellsizey,
      text : text,
      text2 : text2,
      textwordsp1 : textwordsp1,
      textwordsp2 : textwordsp2,
      textwords : textwords,
      textanswer : textanswer,
      nobject : nobject,
      textobject : textobject,
      textobjectdisplay : textobjectdisplay,
      xobject : xobject,
      yobject : yobject,
      objectsizex : objectsizex,
      objectsizey : objectsizey,
      firsttime : firsttime,
      objectinteracted : objectinteracted,
      objectinteracted2 : objectinteracted2,
      nVectorsSq : nVectorsSq,
      colorVectors : colorVectors,
      ngame : ngame,
      start : start,
      end : end,
      onceonly : onceonly,
      alertlater : alertlater,
      xgame : xgame,
      ygame : ygame,
      textgame : textgame,
      colorplayer1 : colorplayer1,
      colorplayer2 : colorplayer2,
      gamecolor : gamecolor,
      textwordsgame : textwordsgame,
      count : count,
      count2 : count2,
      counttotal : counttotal,
      message : message
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontbig != "undefined") fontbig = json.fontbig;
    if(typeof json.fontsmall != "undefined") fontsmall = json.fontsmall;
    if(typeof json.userdefined != "undefined") userdefined = json.userdefined;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.showscore != "undefined") showscore = json.showscore;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.feedbacktext != "undefined") feedbacktext = json.feedbacktext;
    if(typeof json.hinttext != "undefined") hinttext = json.hinttext;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.ns != "undefined") ns = json.ns;
    if(typeof json.xcell != "undefined") xcell = json.xcell;
    if(typeof json.ycell != "undefined") ycell = json.ycell;
    if(typeof json.ycellwordsp1 != "undefined") ycellwordsp1 = json.ycellwordsp1;
    if(typeof json.ycellwordsp2 != "undefined") ycellwordsp2 = json.ycellwordsp2;
    if(typeof json.ycell2 != "undefined") ycell2 = json.ycell2;
    if(typeof json.xcell2 != "undefined") xcell2 = json.xcell2;
    if(typeof json.cellsizex != "undefined") cellsizex = json.cellsizex;
    if(typeof json.cellsizey != "undefined") cellsizey = json.cellsizey;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.text2 != "undefined") text2 = json.text2;
    if(typeof json.textwordsp1 != "undefined") textwordsp1 = json.textwordsp1;
    if(typeof json.textwordsp2 != "undefined") textwordsp2 = json.textwordsp2;
    if(typeof json.textwords != "undefined") textwords = json.textwords;
    if(typeof json.textanswer != "undefined") textanswer = json.textanswer;
    if(typeof json.nobject != "undefined") nobject = json.nobject;
    if(typeof json.textobject != "undefined") textobject = json.textobject;
    if(typeof json.textobjectdisplay != "undefined") textobjectdisplay = json.textobjectdisplay;
    if(typeof json.xobject != "undefined") xobject = json.xobject;
    if(typeof json.yobject != "undefined") yobject = json.yobject;
    if(typeof json.objectsizex != "undefined") objectsizex = json.objectsizex;
    if(typeof json.objectsizey != "undefined") objectsizey = json.objectsizey;
    if(typeof json.firsttime != "undefined") firsttime = json.firsttime;
    if(typeof json.objectinteracted != "undefined") objectinteracted = json.objectinteracted;
    if(typeof json.objectinteracted2 != "undefined") objectinteracted2 = json.objectinteracted2;
    if(typeof json.nVectorsSq != "undefined") nVectorsSq = json.nVectorsSq;
    if(typeof json.colorVectors != "undefined") colorVectors = json.colorVectors;
    if(typeof json.ngame != "undefined") ngame = json.ngame;
    if(typeof json.start != "undefined") start = json.start;
    if(typeof json.end != "undefined") end = json.end;
    if(typeof json.onceonly != "undefined") onceonly = json.onceonly;
    if(typeof json.alertlater != "undefined") alertlater = json.alertlater;
    if(typeof json.xgame != "undefined") xgame = json.xgame;
    if(typeof json.ygame != "undefined") ygame = json.ygame;
    if(typeof json.textgame != "undefined") textgame = json.textgame;
    if(typeof json.colorplayer1 != "undefined") colorplayer1 = json.colorplayer1;
    if(typeof json.colorplayer2 != "undefined") colorplayer2 = json.colorplayer2;
    if(typeof json.gamecolor != "undefined") gamecolor = json.gamecolor;
    if(typeof json.textwordsgame != "undefined") textwordsgame = json.textwordsgame;
    if(typeof json.count != "undefined") count = json.count;
    if(typeof json.count2 != "undefined") count2 = json.count2;
    if(typeof json.counttotal != "undefined") counttotal = json.counttotal;
    if(typeof json.message != "undefined") message = json.message;
  };

  _model._inputAndPublicParameters = ["font",  "fontbig",  "fontsmall",  "userdefined",  "dt",  "t",  "showscore",  "score",  "xmin",  "xmax",  "ymin",  "ymax",  "pi",  "feedbacktext",  "hinttext",  "n",  "ns",  "xcell",  "ycell",  "ycellwordsp1",  "ycellwordsp2",  "ycell2",  "xcell2",  "cellsizex",  "cellsizey",  "text",  "text2",  "textwordsp1",  "textwordsp2",  "textwords",  "textanswer",  "nobject",  "textobject",  "textobjectdisplay",  "xobject",  "yobject",  "objectsizex",  "objectsizey",  "firsttime",  "objectinteracted",  "objectinteracted2",  "nVectorsSq",  "colorVectors",  "ngame",  "start",  "end",  "onceonly",  "alertlater",  "xgame",  "ygame",  "textgame",  "colorplayer1",  "colorplayer2",  "gamecolor",  "textwordsgame",  "count",  "count2",  "counttotal",  "message"]; 

  _model._outputAndPublicParameters = ["font",  "fontbig",  "fontsmall",  "userdefined",  "dt",  "t",  "showscore",  "score",  "xmin",  "xmax",  "ymin",  "ymax",  "pi",  "feedbacktext",  "hinttext",  "n",  "ns",  "xcell",  "ycell",  "ycellwordsp1",  "ycellwordsp2",  "ycell2",  "xcell2",  "cellsizex",  "cellsizey",  "text",  "text2",  "textwordsp1",  "textwordsp2",  "textwords",  "textanswer",  "nobject",  "textobject",  "textobjectdisplay",  "xobject",  "yobject",  "objectsizex",  "objectsizey",  "firsttime",  "objectinteracted",  "objectinteracted2",  "nVectorsSq",  "colorVectors",  "ngame",  "start",  "end",  "onceonly",  "alertlater",  "xgame",  "ygame",  "textgame",  "colorplayer1",  "colorplayer2",  "gamecolor",  "textwordsgame",  "count",  "count2",  "counttotal",  "message"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["svg"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["challeng1"] = true;
    __pagesEnabled["setupcells"] = true;
    __pagesEnabled["setuptextongamecards"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["lockcell"] = true;
    __pagesEnabled["score"] = false;
    __pagesEnabled["score 2"] = true;
    __pagesEnabled["update"] = false;
  });

  _model.addToReset(function() {
    font = "normal normal 3vw"; // EjsS Model.Variables.Var Table.font
    fontbig = "normal normal 5vw"; // EjsS Model.Variables.Var Table.fontbig
    fontsmall = "normal normal 2vw"; // EjsS Model.Variables.Var Table.fontsmall
    dt = 0.05; // EjsS Model.Variables.Var Table.dt
    t = 0; // EjsS Model.Variables.Var Table.t
    score = 0; // EjsS Model.Variables.Var Table.score
    xmin = -11; // EjsS Model.Variables.Var Table.xmin
    xmax = 12; // EjsS Model.Variables.Var Table.xmax
    ymin = -10; // EjsS Model.Variables.Var Table.ymin
    ymax = 10; // EjsS Model.Variables.Var Table.ymax
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    feedbacktext = ""; // EjsS Model.Variables.Var Table.feedbacktext
    hinttext = ""; // EjsS Model.Variables.Var Table.hinttext
    n = 13; // EjsS Model.Variables.Var Table.n
    xcell = [-10,-8,-6,-4,-2,0,2,4,6,8,10,12]; // EjsS Model.Variables.Var Table.xcell
    ycell = new Array(n); // EjsS Model.Variables.Var Table.ycell
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.ycell
        ycell[_i0] = 0;  // EjsS Model.Variables.Var Table.ycell
      }
    }());
    ycellwordsp1 = new Array(n); // EjsS Model.Variables.Var Table.ycellwordsp1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.ycellwordsp1
        ycellwordsp1[_i0] = -1;  // EjsS Model.Variables.Var Table.ycellwordsp1
      }
    }());
    ycellwordsp2 = new Array(n); // EjsS Model.Variables.Var Table.ycellwordsp2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.ycellwordsp2
        ycellwordsp2[_i0] = -1;  // EjsS Model.Variables.Var Table.ycellwordsp2
      }
    }());
    ycell2 = new Array(n); // EjsS Model.Variables.Var Table.ycell2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.ycell2
        ycell2[_i0] = 0;  // EjsS Model.Variables.Var Table.ycell2
      }
    }());
    xcell2 = [-10,-8,-6,-4,-2,0,2,4,6,8,10,12]; // EjsS Model.Variables.Var Table.xcell2
    cellsizex = (xmax-xmin)/(n); // EjsS Model.Variables.Var Table.cellsizex
    cellsizey = (ymax-ymin)/4; // EjsS Model.Variables.Var Table.cellsizey
    text = new Array(n); // EjsS Model.Variables.Var Table.text
    text2 = new Array(n); // EjsS Model.Variables.Var Table.text2
    textwordsp1 = ["one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen"]; // EjsS Model.Variables.Var Table.textwordsp1
    textwordsp2 = ["one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen"]; // EjsS Model.Variables.Var Table.textwordsp2
    textwords = ["one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen"]; // EjsS Model.Variables.Var Table.textwords
    textanswer = ["Light bulb","Off switch","On switch","Resistor","Voltmeter","Ammeter","Cell","Variable resistor","Fuse","Two cells","Magnetising coil","Bell"]; // EjsS Model.Variables.Var Table.textanswer
    nobject = 12; // EjsS Model.Variables.Var Table.nobject
    textobject = ["Light bulb","Off switch","On switch","Resistor","Voltmeter","Ammeter","Cell","Variable resistor","Fuse","Two cells","Magnetising coil","Bell"]; // EjsS Model.Variables.Var Table.textobject
    textobjectdisplay = ["Light bulb","Off switch","On switch","Resistor","Voltmeter","Ammeter","Cell","Variable resistor","Fuse","Two cells","Magnetising coil","Bell"]; // EjsS Model.Variables.Var Table.textobjectdisplay
    xobject = [-10,-8,-6,-4,-2,0,2,4,6,8,10]; // EjsS Model.Variables.Var Table.xobject
    yobject = new Array(nobject); // EjsS Model.Variables.Var Table.yobject
    (function () {
      var _i0;
      for (_i0=0; _i0<nobject; _i0+=1) {  // EjsS Model.Variables.Var Table.yobject
        yobject[_i0] = ymin+3;  // EjsS Model.Variables.Var Table.yobject
      }
    }());
    objectsizex = (xmax-xmin)/(nobject+1); // EjsS Model.Variables.Var Table.objectsizex
    objectsizey = (ymax-ymin)/4; // EjsS Model.Variables.Var Table.objectsizey
    firsttime = new Array(nobject); // EjsS Model.Variables.Var Table.firsttime
    (function () {
      var _i0;
      for (_i0=0; _i0<nobject; _i0+=1) {  // EjsS Model.Variables.Var Table.firsttime
        firsttime[_i0] = true;  // EjsS Model.Variables.Var Table.firsttime
      }
    }());
    objectinteracted = -1; // EjsS Model.Variables.Var Table.objectinteracted
    objectinteracted2 = -1; // EjsS Model.Variables.Var Table.objectinteracted2
    nVectorsSq = nobject; // EjsS Model.Variables.Var Table.nVectorsSq
    colorVectors = new Array(nVectorsSq); // EjsS Model.Variables.Var Table.colorVectors
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.Var Table.colorVectors
        colorVectors[_i0] = "rgba(255,200,0,1)";  // EjsS Model.Variables.Var Table.colorVectors
      }
    }());
  });

  _model.addToReset(function() {
    ngame = 20; // EjsS Model.Variables.game.ngame
    xgame = [-10,-8,-6,-4,-2,0,2,4,6,8,10,12]; // EjsS Model.Variables.game.xgame
    ygame = new Array(ngame); // EjsS Model.Variables.game.ygame
    (function () {
      var _i0;
      for (_i0=0; _i0<ngame; _i0+=1) {  // EjsS Model.Variables.game.ygame
        ygame[_i0] = 0;  // EjsS Model.Variables.game.ygame
      }
    }());
    textgame = new Array(ngame); // EjsS Model.Variables.game.textgame
    colorplayer1 = new Array(ngame); // EjsS Model.Variables.game.colorplayer1
    (function () {
      var _i0;
      for (_i0=0; _i0<ngame; _i0+=1) {  // EjsS Model.Variables.game.colorplayer1
        colorplayer1[_i0] = "rgba(0,0,255,1)";  // EjsS Model.Variables.game.colorplayer1
      }
    }());
    colorplayer2 = new Array(ngame); // EjsS Model.Variables.game.colorplayer2
    (function () {
      var _i0;
      for (_i0=0; _i0<ngame; _i0+=1) {  // EjsS Model.Variables.game.colorplayer2
        colorplayer2[_i0] = "rgba(255,0,0,1)";  // EjsS Model.Variables.game.colorplayer2
      }
    }());
    gamecolor = new Array(ngame); // EjsS Model.Variables.game.gamecolor
    (function () {
      var _i0;
      for (_i0=0; _i0<ngame; _i0+=1) {  // EjsS Model.Variables.game.gamecolor
        gamecolor[_i0] = "rgba(0,00,0,0)";  // EjsS Model.Variables.game.gamecolor
      }
    }());
    textwordsgame = new Array(ngame); // EjsS Model.Variables.game.textwordsgame
    count = 0; // EjsS Model.Variables.game.count
    count2 = 0; // EjsS Model.Variables.game.count2
    counttotal = 0; // EjsS Model.Variables.game.counttotal
    message = ""; // EjsS Model.Variables.game.message
  });

  _model.addToReset(function() {
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function changeOrientation() {  // > CustomCode.changeOrientation:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.changeOrientation:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.changeOrientation:3
  //else  // > CustomCode.changeOrientation:4
  //  _view.mytext.setText("nada:");  // > CustomCode.changeOrientation:5
  // check platform for Apps  // > CustomCode.changeOrientation:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.changeOrientation:14
  switch (window.orientation) {  // > CustomCode.changeOrientation:15
    case 0:  // > CustomCode.changeOrientation:16
    case 180:  // > CustomCode.changeOrientation:17
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:18
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:20
        return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:21
        // return window.screen.height;  // > CustomCode.changeOrientation:22
        //  return window.innerHeight;  // > CustomCode.changeOrientation:23
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:24
      }  // > CustomCode.changeOrientation:25
        // > CustomCode.changeOrientation:26
      else {  // > CustomCode.changeOrientation:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*0.85;  // > CustomCode.changeOrientation:29
      }  // > CustomCode.changeOrientation:30
      break;  // > CustomCode.changeOrientation:31
    case 90:  // > CustomCode.changeOrientation:32
    case -90:  // > CustomCode.changeOrientation:33
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:34
      if (iOSapp){ // App  // > CustomCode.changeOrientation:35
        return window.screen.width*0.7;    // > CustomCode.changeOrientation:36
        // return window.screen.height;  // > CustomCode.changeOrientation:37
        //  return window.innerHeight;  // > CustomCode.changeOrientation:38
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:39
      }  // > CustomCode.changeOrientation:40
        // > CustomCode.changeOrientation:41
      else { // browser Android and PC  // > CustomCode.changeOrientation:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:43
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:44
        return window.innerHeight*0.85;  // > CustomCode.changeOrientation:45
      }  // > CustomCode.changeOrientation:46
      break;  // > CustomCode.changeOrientation:47
    default:  // > CustomCode.changeOrientation:48
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:50
      return window.innerHeight*0.85;  // > CustomCode.changeOrientation:51
  }  // > CustomCode.changeOrientation:52
  }  // > CustomCode.changeOrientation:53

  function texttospeech (whattospeak) {  // > CustomCode.texttospeech:1
  if(parent.cordova) { // check it is running in Android  // > CustomCode.texttospeech:2
  //var option1 = _view.comboBox.getProperty("SelectedOptions");  // > CustomCode.texttospeech:3
         parent.TTS.speak(whattospeak, function () {  // > CustomCode.texttospeech:4
              // success  // > CustomCode.texttospeech:5
          }, function (reason) {  // > CustomCode.texttospeech:6
              // error  // > CustomCode.texttospeech:7
          });  // > CustomCode.texttospeech:8
      }  // > CustomCode.texttospeech:9
      else {  // > CustomCode.texttospeech:10
    var msg = new SpeechSynthesisUtterance(whattospeak);  // > CustomCode.texttospeech:11
  window.speechSynthesis.speak(msg);  // > CustomCode.texttospeech:12
  }  // > CustomCode.texttospeech:13
  }  // > CustomCode.texttospeech:14

  function OnOrientationChange() {  // > CustomCode.OnOrientationChange:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.OnOrientationChange:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.OnOrientationChange:3
  //else  // > CustomCode.OnOrientationChange:4
  //  _view.mytext.setText("nada:");  // > CustomCode.OnOrientationChange:5
  // check platform for Apps  // > CustomCode.OnOrientationChange:6
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.OnOrientationChange:7
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.OnOrientationChange:8
  // check platform for web browsers  // > CustomCode.OnOrientationChange:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.OnOrientationChange:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.OnOrientationChange:13
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.OnOrientationChange:14
  switch (window.orientation) {  // > CustomCode.OnOrientationChange:15
    case 0:  // > CustomCode.OnOrientationChange:16
    case 180:  // > CustomCode.OnOrientationChange:17
      this.screenOrientation = 'portrait';  // > CustomCode.OnOrientationChange:18
    //  if (iOSapp){ // does not seems to work  // > CustomCode.OnOrientationChange:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.OnOrientationChange:20
     //   return window.screen.height*0.7;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.OnOrientationChange:21
        // return window.screen.height;  // > CustomCode.OnOrientationChange:22
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:23
        // return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:24
     // }  // > CustomCode.OnOrientationChange:25
        // > CustomCode.OnOrientationChange:26
     // else {  // > CustomCode.OnOrientationChange:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:28
        return window.innerHeight*0.88;  // > CustomCode.OnOrientationChange:29
     // }  // > CustomCode.OnOrientationChange:30
      break;  // > CustomCode.OnOrientationChange:31
    case 90:  // > CustomCode.OnOrientationChange:32
    case -90:  // > CustomCode.OnOrientationChange:33
      this.screenOrientation = 'landscape';  // > CustomCode.OnOrientationChange:34
     // if (iOSapp){ // App  // > CustomCode.OnOrientationChange:35
     //   return window.screen.width*0.7;    // > CustomCode.OnOrientationChange:36
        // return window.screen.height;  // > CustomCode.OnOrientationChange:37
        //  return window.innerHeight;  // > CustomCode.OnOrientationChange:38
        //  return document.documentElement.clientHeight;  // > CustomCode.OnOrientationChange:39
     // }  // > CustomCode.OnOrientationChange:40
        // > CustomCode.OnOrientationChange:41
    //  else { // browser Android and PC  // > CustomCode.OnOrientationChange:42
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.OnOrientationChange:43
        // alert("browser Android and PC");  // > CustomCode.OnOrientationChange:44
        return window.innerHeight*0.88;  // > CustomCode.OnOrientationChange:45
    //  }  // > CustomCode.OnOrientationChange:46
      break;  // > CustomCode.OnOrientationChange:47
    default:  // > CustomCode.OnOrientationChange:48
      this.screenOrientation = 'unknown';  // > CustomCode.OnOrientationChange:49
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.OnOrientationChange:50
      return window.innerHeight*0.88;  // > CustomCode.OnOrientationChange:51
  }  // > CustomCode.OnOrientationChange:52
  }  // > CustomCode.OnOrientationChange:53

  function normal () {  // > CustomCode.normal:1
  for (var i=0;i<n /* Iterations */ ; i++) {  // > CustomCode.normal:2
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.normal:3
  ycell[i]=0; //keep in position   // > CustomCode.normal:4
  ycell2[i]=0; //keep in position   // > CustomCode.normal:5
    }  // > CustomCode.normal:6
      // > CustomCode.normal:7
    }  // > CustomCode.normal:8

  function setupcells () {  // > CustomCode.setupcells:1
  for (var i=0;i<n /* Iterations */ ; i++) {  // > CustomCode.setupcells:2
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.setupcells:3
  xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.setupcells:4
  xcell2[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.setupcells:5
  text[i]=""+(i+1); //numbers on player 1  // > CustomCode.setupcells:6
  text2[i]=""+(i+1); //numbers on player 2  // > CustomCode.setupcells:7
  ycellwordsp1[i]=-1.2; //common displacement y for p1 n p2  // > CustomCode.setupcells:8
  ycellwordsp2[i]=-1.2; //common displacement y for p1 n p2  // > CustomCode.setupcells:9
  }  // > CustomCode.setupcells:10
  }  // > CustomCode.setupcells:11

  function p1even () {  // > CustomCode.p1even:1
  for (var i=0;(2*i+1)<n /* Iterations */ ; i++) {  // > CustomCode.p1even:2
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p1even:3
  ycell[2*i+1]=0; //keep in position   // > CustomCode.p1even:4
  ycellwordsp1[2*i+1]=-1.2;  // > CustomCode.p1even:5
    }  // > CustomCode.p1even:6
    for (var i=0;(2*i)<n /* Iterations */ ; i++) {  // > CustomCode.p1even:7
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p1even:8
  ycell[2*i]=20; //move high up  // > CustomCode.p1even:9
  ycellwordsp1[2*i]=20-1.2;  // > CustomCode.p1even:10
  }   // > CustomCode.p1even:11
  }  // > CustomCode.p1even:12

  function p1odd () {  // > CustomCode.p1odd:1
  for (var i=0;(2*i+1)<n /* Iterations */ ; i++) {  // > CustomCode.p1odd:2
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p1odd:3
  ycell[2*i+1]=20; //move high up    // > CustomCode.p1odd:4
  ycellwordsp1[2*i+1]=20-1.2;  // > CustomCode.p1odd:5
    }  // > CustomCode.p1odd:6
    for (var i=0;(2*i)<n /* Iterations */ ; i++) {  // > CustomCode.p1odd:7
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p1odd:8
  ycell[2*i]=0; //keep in position  // > CustomCode.p1odd:9
  ycellwordsp1[2*i]=-1.2;  // > CustomCode.p1odd:10
  }   // > CustomCode.p1odd:11
  }  // > CustomCode.p1odd:12

  function p2even () {  // > CustomCode.p2even:1
  for (var i=0;(2*i+1)<n /* Iterations */ ; i++) {  // > CustomCode.p2even:2
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p2even:3
  ycell2[2*i+1]=0; //keep in position   // > CustomCode.p2even:4
  ycellwordsp2[2*i+1]=-1.2;  // > CustomCode.p2even:5
    }  // > CustomCode.p2even:6
    for (var i=0;(2*i)<n /* Iterations */ ; i++) {  // > CustomCode.p2even:7
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p2even:8
  ycell2[2*i]=20; //move high up  // > CustomCode.p2even:9
  ycellwordsp2[2*i]=20-1.2;  // > CustomCode.p2even:10
  }  // > CustomCode.p2even:11
  }  // > CustomCode.p2even:12

  function p2odd () {  // > CustomCode.p2odd:1
  for (var i=0;(2*i+1)<n /* Iterations */ ; i++) {  // > CustomCode.p2odd:2
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p2odd:3
  ycell2[2*i+1]=20; //move high up    // > CustomCode.p2odd:4
  ycellwordsp2[2*i+1]=20-1.2;  // > CustomCode.p2odd:5
    }  // > CustomCode.p2odd:6
    for (var i=0;(2*i)<n /* Iterations */ ; i++) {  // > CustomCode.p2odd:7
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > CustomCode.p2odd:8
  ycell2[2*i]=0; //keep in position  // > CustomCode.p2odd:9
  ycellwordsp2[2*i]=-1.2;  // > CustomCode.p2odd:10
  }     // > CustomCode.p2odd:11
  }  // > CustomCode.p2odd:12

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:1" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.5" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    var container = document.createElement('div');  // > Initialization.svg:10
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:11
      '  <radialGradient id="mygrandient1" cx="50%" cy="70%" r="80%" fx="50%" fy="70%">'+  // > Initialization.svg:12
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:0.5" />'+  // > Initialization.svg:13
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.svg:14
      '  </radialGradient>'+  // > Initialization.svg:15
      '</defs></svg>';  // > Initialization.svg:16
    container.innerHTML = svggradient;  // > Initialization.svg:17
    document.body.appendChild(container);  // > Initialization.svg:18
    //"url(#mygrandient1)"  // > Initialization.svg:19
    var container = document.createElement('div');  // > Initialization.svg:20
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:21
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="70%" fx="90%" fy="50%">'+  // > Initialization.svg:22
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:0.5" />'+  // > Initialization.svg:23
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:0.5" />'+  // > Initialization.svg:24
      '  </radialGradient>'+  // > Initialization.svg:25
      '</defs></svg>';  // > Initialization.svg:26
    container.innerHTML = svggradient;  // > Initialization.svg:27
    document.body.appendChild(container);  // > Initialization.svg:28
    //"url(#mygrandient2)"  // > Initialization.svg:29
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (start==undefined){  // > Initialization.undefined:1
      start = 0;  // > Initialization.undefined:2
        }  // > Initialization.undefined:3
        if (end==undefined){  // > Initialization.undefined:4
      end = 20;  // > Initialization.undefined:5
        }  // > Initialization.undefined:6
      if (ns==undefined){  // > Initialization.undefined:7
        ns = 13;  // > Initialization.undefined:8
        }  // > Initialization.undefined:9
      n = ns;  // > Initialization.undefined:10
      cellsizex= (xmax-xmin)/(11);  // > Initialization.undefined:11
     xcell[n]= [-10,-8,-6,-4,-2,0,2,4,6,8,10,12];  // > Initialization.undefined:12
     xcell2[n]= [-10,-8,-6,-4,-2,0,2,4,6,8,10,12];  // > Initialization.undefined:13
    // ycell[n] =[7,7,7,7,7,7,7,7,7,7,7,7];  // > Initialization.undefined:14
    // }  // > Initialization.undefined:15
    if (showscore==undefined){  // > Initialization.undefined:16
      showscore=true;  // > Initialization.undefined:17
      }  // > Initialization.undefined:18
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["challeng1"]) return;
    n=ns=5; //number store n number of cards  // > Initialization.challeng1:1
      start=0;  // > Initialization.challeng1:2
      end=20;  // > Initialization.challeng1:3
        // > Initialization.challeng1:4
      for (var i=0;i<n /* Iterations */ ; i++) {  // > Initialization.challeng1:5
    //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > Initialization.challeng1:6
    ycell[i]=0; //keep in position   // > Initialization.challeng1:7
    ycell2[i]=0; //keep in position   // > Initialization.challeng1:8
      }  // > Initialization.challeng1:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["setupcells"]) return;
    for (var i=0;i<n /* Iterations */ ; i++) {  // > Initialization.setupcells:1
    //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > Initialization.setupcells:2
    xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > Initialization.setupcells:3
    xcell2[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > Initialization.setupcells:4
    text[i]=""+(i+1); //numbers on player 1  // > Initialization.setupcells:5
    text2[i]=""+(i+1); //numbers on player 2  // > Initialization.setupcells:6
    ycellwordsp1[i]=-1.2; //common displacement y for p1 n p2  // > Initialization.setupcells:7
    ycellwordsp2[i]=-1.2; //common displacement y for p1 n p2  // > Initialization.setupcells:8
    }  // > Initialization.setupcells:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["setuptextongamecards"]) return;
    for (var i=0; i<ngame /* Iterations */ ; i++) {  // > Initialization.setuptextongamecards:1
      textgame[i] = "";  // > Initialization.setuptextongamecards:2
      textwordsgame[i]="";  // > Initialization.setuptextongamecards:3
      xgame[i]=-10+i*2;  // > Initialization.setuptextongamecards:4
    }  // > Initialization.setuptextongamecards:5
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["lockcell"]) return;
    for (var i=0;i<n /* Iterations */ ; i++) {  // > FixedRelations.lockcell:1
    //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);  // > FixedRelations.lockcell:2
    xcell[i]=-10+(xmax-xmin)/(n-1)*(i);  // > FixedRelations.lockcell:3
    xcell2[i]=-10+(xmax-xmin)/(n-1)*(i); //works   // > FixedRelations.lockcell:4
    //text[i]=""+(i+1);  // > FixedRelations.lockcell:5
    }  // > FixedRelations.lockcell:6
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["score"]) return;
        // > FixedRelations.score:1
      if (score==end){  // > FixedRelations.score:2
        onceonly =true;  // > FixedRelations.score:3
        }  // > FixedRelations.score:4
        if (score==end&&onceonly==true){  // > FixedRelations.score:5
      message= "well done!, you won by reaching "+end;  // > FixedRelations.score:6
      alertlater = true;  // > FixedRelations.score:7
        // > FixedRelations.score:8
    //  _play();  // > FixedRelations.score:9
      }  // > FixedRelations.score:10
        // > FixedRelations.score:11
        if (score==end&&alertlater==true&&onceonly==true){  // > FixedRelations.score:12
        // > FixedRelations.score:13
        // > FixedRelations.score:14
        // > FixedRelations.score:15
     // message= "well done!, you won by reaching "+end;  // > FixedRelations.score:16
      alertlater = false;  // > FixedRelations.score:17
     onceonly=false;  // > FixedRelations.score:18
     //alert("well done!, you won by reaching "+end);  // > FixedRelations.score:19
     // _pause();  // > FixedRelations.score:20
      }  // > FixedRelations.score:21
        // > FixedRelations.score:22
        // > FixedRelations.score:23
        // > FixedRelations.score:24
    else if (score>end){  // > FixedRelations.score:25
        // > FixedRelations.score:26
       // > FixedRelations.score:27
      message= "game over!, you lose by exceeding "+end;  // > FixedRelations.score:28
      // alert("game over!, you lose by exceeding "+end);  // > FixedRelations.score:29
      }  // > FixedRelations.score:30
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["score 2"]) return;
    if (score==end){  // > FixedRelations.score 2:1
    //  _play();  // > FixedRelations.score 2:2
    //  alert("well done!, you won by reaching "+end);  // > FixedRelations.score 2:3
    if (counttotal%2==0){  // > FixedRelations.score 2:4
       EJSS_INTERFACE.BoxPanel.showOkDialog("well done!, player 2 won by reaching "+end);  // > FixedRelations.score 2:5
       //texttospeech ("well done!, player 2 won by reaching "+end);  // > FixedRelations.score 2:6
       }  // > FixedRelations.score 2:7
     else if (counttotal%2==1){  // > FixedRelations.score 2:8
       EJSS_INTERFACE.BoxPanel.showOkDialog("well done!, player 1 won by reaching "+end);  // > FixedRelations.score 2:9
     //texttospeech ("well done!, player 1 won by reaching "+end);  // > FixedRelations.score 2:10
      }  // > FixedRelations.score 2:11
         // > FixedRelations.score 2:12
      }  // > FixedRelations.score 2:13
    else if (score>end){  // > FixedRelations.score 2:14
      if (counttotal%2==0){  // > FixedRelations.score 2:15
       EJSS_INTERFACE.BoxPanel.showOkDialog("game over!, player 2 lose by exceeding "+end);  // > FixedRelations.score 2:16
       }  // > FixedRelations.score 2:17
     else if (counttotal%2==1){  // > FixedRelations.score 2:18
       EJSS_INTERFACE.BoxPanel.showOkDialog("game over!, player 1 lose by exceeding "+end);  // > FixedRelations.score 2:19
       }   // > FixedRelations.score 2:20
     // alert("game over!, you lose by exceeding "+end);  // > FixedRelations.score 2:21
     // EJSS_INTERFACE.BoxPanel.showOkDialog("game over!, you lose by exceeding "+end);  // > FixedRelations.score 2:22
      }  // > FixedRelations.score 2:23
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["update"]) return;
     _update();  // > FixedRelations.update:1
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new racetotwenty_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.comboBox.linkProperty("Options",  function() { return ["challenge 1 target=20","challenge 2 target=25","challenge 3 target=20","user defined","","Player1 always win?","Player2 always win?","","normal","Player1 odd","Player1 even","Player2 odd","Player2 even","","show score","hide score"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //_initialize();
  //"challenge 1","challenge 2","challenge 3","challenge 4"
  if (  option=="challenge 1 target=20"){
    n=ns=5; //number store n number of cards
    start=0;
    end=20;
    setupcells ();
    normal();
    userdefined=false;
    }
    if (  option=="challenge 2 target=25"){
    n=ns=8; //number store n number of cards
    start=0;
    end=25;
    setupcells ();
    normal();
    userdefined=false;
    }
    if (  option=="challenge 3 target=20"){
    n=ns=8; //number store n number of cards
    start=0;
    end=20;
    setupcells ();
    normal();
    userdefined=false;
    }
     if (  option=="Player1 always win?"){
    n=ns=11; //number store n number of cards
    start=0;
    end=20;
    setupcells ();
    normal();
    userdefined=true;
    //p2even();
   // p1even();
    }
    if (  option=="Player2 always win?"){
    n=ns=8; //number store n number of cards
    start=0;
    end=20;
    setupcells ();
    p2even();
    p1even();
    userdefined=true;
    }
    if (  option=="user defined"){
  userdefined=true;
    
    }
  else if (  option=="normal"){
    normal ();
    }
  else if (  option=="Player1 even"){
   p1even(); 
    }
    else if (  option=="Player1 odd"){
   p1odd();
    }
    else if (  option=="Player2 even"){
     p2even();
    }
    else if (  option=="Player2 odd"){
  p2odd();
    }
    //"show score","hide score"
    else if (  option=="show score"){
      showscore=true;
      }
        else if (  option=="hide score"){
      showscore=false;
      }
    
  //texttospeech(option);

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.userdefined.linkProperty("Visibility",  function() { return userdefined; }, function(_v) { userdefined = _v; } ); // HtmlView Page linking property 'Visibility' for element 'userdefined'
          _view.userdefined.linkProperty("Display",  function() { return userdefined?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'userdefined'
          _view.start.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'start'
          _view.start2.linkProperty("Value",  function() { return start; }, function(_v) { start = _v; } ); // HtmlView Page linking property 'Value' for element 'start2'
          _view.start2.setAction("OnChange", function(_data,_info) {
  score=start;
  if (start>end){
    start = 0;
    alert("start cannot be bigger than end");
    }
  if (start<0) {
    alert( "start cannot be lesser than zero");
  start=Math.max(n,0);
  }

}); // HtmlView Page setting action 'OnChange' for element 'start2'
          _view.start2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'start2'
          _view.start3.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'start3'
          _view.start22.linkProperty("Value",  function() { return end; }, function(_v) { end = _v; } ); // HtmlView Page linking property 'Value' for element 'start22'
          _view.start22.setAction("OnChange", function(_data,_info) {
  if (end<start){
    end = 20;
    alert("end cannot be smaller than start");
    }
    
    if (end>100){
    end = 100;
    alert("end cannot be greater than 100");
    }

}); // HtmlView Page setting action 'OnChange' for element 'start22'
          _view.start22.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'start22'
          _view.start32.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'start32'
          _view.start222.linkProperty("Value",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'Value' for element 'start222'
          _view.start222.setAction("OnChange", function(_data,_info) {
  if (n>13) {
    alert( "maximum number of cards limited to 13");
  }
  n=Math.min(n,13);
  if (n<2) {
    alert( "minimum number of cards limited to 2");
  }
  n=Math.max(n,2);
  ns=n; // for memory
  for (var i=0;i<n /* Iterations */ ; i++) {
  //xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);
  xcell[i]=xmin+cellsizex/2+(xmax-xmin)/(n)*(i);
  text[i]=""+(i+1);
  text2[i]=""+(i+1);
  //ycellwordsp1[i]=-1;
  //ycellwordsp2[i]=-1;
  }

}); // HtmlView Page setting action 'OnChange' for element 'start222'
          _view.start222.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'start222'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return showscore?"score="+score.toFixed(0):""; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return feedbacktext; }, function(_v) { feedbacktext = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return hinttext; }, function(_v) { hinttext = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.player12.linkProperty("Font",  function() { return fontsmall; }, function(_v) { fontsmall = _v; } ); // HtmlView Page linking property 'Font' for element 'player12'
          _view.cells3.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'cells3'
          _view.cells3.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'cells3'
          _view.cells3.linkProperty("X",  function() { return xcell; }, function(_v) { xcell = _v; } ); // HtmlView Page linking property 'X' for element 'cells3'
          _view.cells3.linkProperty("Y",  function() { return ycell; }, function(_v) { ycell = _v; } ); // HtmlView Page linking property 'Y' for element 'cells3'
          _view.cells3.setAction("OnPress", function(_data,_info) {
  count = count+1;
  counttotal=count+count2;
  //if ((count-count2)>1){//check player 2 turn
  if (counttotal%2==0){//check player 2 turn
    count = count-1;
    alert("player 2 turn");
    }
  else {
  score=score+objectinteracted+1;
  //count = count+1;
  gamecolor[counttotal]= colorplayer1[objectinteracted];
  textgame[counttotal]= text[objectinteracted];
  textwordsgame[counttotal]=textwords[objectinteracted];
  }

}); // HtmlView Page setting action 'OnPress' for element 'cells3'
          _view.cells3.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'cells3'
          _view.cells3.linkProperty("ElementInteracted",  function() { return objectinteracted; }, function(_v) { objectinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'cells3'
          _view.cells.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'cells'
          _view.cells.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'cells'
          _view.cells.linkProperty("X",  function() { return xcell; }, function(_v) { xcell = _v; } ); // HtmlView Page linking property 'X' for element 'cells'
          _view.cells.linkProperty("Y",  function() { return ycell; }, function(_v) { ycell = _v; } ); // HtmlView Page linking property 'Y' for element 'cells'
          _view.cells.setAction("OnPress", function(_data,_info) {
  count = count+1;
  counttotal=count+count2;
  //if ((count-count2)>1){//check player 2 turn
  if (counttotal%2==0){//check player 2 turn
    count = count-1;
    alert("player 2 turn");
    }
  else {
  score=score+objectinteracted+1;
  //count = count+1;
  gamecolor[counttotal-1]= colorplayer1[objectinteracted];
  textgame[counttotal-1]= text[objectinteracted];
  textwordsgame[counttotal-1]=textwords[objectinteracted];
  }

}); // HtmlView Page setting action 'OnPress' for element 'cells'
          _view.cells.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'cells'
          _view.cells.linkProperty("ElementInteracted",  function() { return objectinteracted; }, function(_v) { objectinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'cells'
          _view.numbers.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'numbers'
          _view.numbers.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'numbers'
          _view.numbers.linkProperty("X",  function() { return xcell; }, function(_v) { xcell = _v; } ); // HtmlView Page linking property 'X' for element 'numbers'
          _view.numbers.linkProperty("Y",  function() { return ycell; }, function(_v) { ycell = _v; } ); // HtmlView Page linking property 'Y' for element 'numbers'
          _view.numbers.linkProperty("Text",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'Text' for element 'numbers'
          _view.numbers.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'numbers'
          _view.numbers.linkProperty("Font",  function() { return fontbig; }, function(_v) { fontbig = _v; } ); // HtmlView Page linking property 'Font' for element 'numbers'
          _view.words.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'words'
          _view.words.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'words'
          _view.words.linkProperty("X",  function() { return xcell; }, function(_v) { xcell = _v; } ); // HtmlView Page linking property 'X' for element 'words'
          _view.words.linkProperty("Y",  function() { return ycellwordsp1; }, function(_v) { ycellwordsp1 = _v; } ); // HtmlView Page linking property 'Y' for element 'words'
          _view.words.linkProperty("Text",  function() { return textwordsp1; }, function(_v) { textwordsp1 = _v; } ); // HtmlView Page linking property 'Text' for element 'words'
          _view.words.linkProperty("Font",  function() { return fontsmall; }, function(_v) { fontsmall = _v; } ); // HtmlView Page linking property 'Font' for element 'words'
          _view.cells23.linkProperty("NumberOfElements",  function() { return ngame; }, function(_v) { ngame = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'cells23'
          _view.cells23.linkProperty("FillColor",  function() { return gamecolor; }, function(_v) { gamecolor = _v; } ); // HtmlView Page linking property 'FillColor' for element 'cells23'
          _view.cells23.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'cells23'
          _view.cells23.linkProperty("X",  function() { return xgame; }, function(_v) { xgame = _v; } ); // HtmlView Page linking property 'X' for element 'cells23'
          _view.cells23.linkProperty("Y",  function() { return ygame; }, function(_v) { ygame = _v; } ); // HtmlView Page linking property 'Y' for element 'cells23'
          _view.cells23.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'cells23'
          _view.cells2.linkProperty("NumberOfElements",  function() { return ngame; }, function(_v) { ngame = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'cells2'
          _view.cells2.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'cells2'
          _view.cells2.linkProperty("X",  function() { return xgame; }, function(_v) { xgame = _v; } ); // HtmlView Page linking property 'X' for element 'cells2'
          _view.cells2.linkProperty("Y",  function() { return ygame; }, function(_v) { ygame = _v; } ); // HtmlView Page linking property 'Y' for element 'cells2'
          _view.cells2.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'cells2'
          _view.textSet3.linkProperty("NumberOfElements",  function() { return ngame; }, function(_v) { ngame = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet3'
          _view.textSet3.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'textSet3'
          _view.textSet3.linkProperty("X",  function() { return xgame; }, function(_v) { xgame = _v; } ); // HtmlView Page linking property 'X' for element 'textSet3'
          _view.textSet3.linkProperty("Text",  function() { return textgame; }, function(_v) { textgame = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet3'
          _view.textSet3.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'textSet3'
          _view.textSet3.linkProperty("Font",  function() { return fontbig; }, function(_v) { fontbig = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet3'
          _view.textSet22.linkProperty("NumberOfElements",  function() { return ngame; }, function(_v) { ngame = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet22'
          _view.textSet22.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'textSet22'
          _view.textSet22.linkProperty("X",  function() { return xgame; }, function(_v) { xgame = _v; } ); // HtmlView Page linking property 'X' for element 'textSet22'
          _view.textSet22.linkProperty("Text",  function() { return textwordsgame; }, function(_v) { textwordsgame = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet22'
          _view.textSet22.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'textSet22'
          _view.textSet22.linkProperty("Font",  function() { return fontsmall; }, function(_v) { fontsmall = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet22'
          _view.message.linkProperty("Text",  function() { return message; }, function(_v) { message = _v; } ); // HtmlView Page linking property 'Text' for element 'message'
          _view.player122.linkProperty("Font",  function() { return fontsmall; }, function(_v) { fontsmall = _v; } ); // HtmlView Page linking property 'Font' for element 'player122'
          _view.cells222.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'cells222'
          _view.cells222.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'cells222'
          _view.cells222.linkProperty("X",  function() { return xcell2; }, function(_v) { xcell2 = _v; } ); // HtmlView Page linking property 'X' for element 'cells222'
          _view.cells222.linkProperty("Y",  function() { return ycell2; }, function(_v) { ycell2 = _v; } ); // HtmlView Page linking property 'Y' for element 'cells222'
          _view.cells222.setAction("OnPress", function(_data,_info) {
  count2 = count2+1;
  counttotal=count+count2;
  //if ((count2-count)>1){//check player 2 turn
  if (counttotal%2==1){//check player 2 turn
    count2 = count2-1;
    alert("player 1 turn");
    }
    else {
    score=score+objectinteracted2+1;
  //count2=count2+1;
  gamecolor[counttotal]= colorplayer2[objectinteracted2];
  //textgame[counttotal]= text2[objectinteracted2+1];
  textgame[counttotal]= text[objectinteracted2];
  textwordsgame[counttotal]=textwords[objectinteracted2];
  }

}); // HtmlView Page setting action 'OnPress' for element 'cells222'
          _view.cells222.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'cells222'
          _view.cells222.linkProperty("ElementInteracted",  function() { return objectinteracted2; }, function(_v) { objectinteracted2 = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'cells222'
          _view.cells22.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'cells22'
          _view.cells22.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'cells22'
          _view.cells22.linkProperty("X",  function() { return xcell2; }, function(_v) { xcell2 = _v; } ); // HtmlView Page linking property 'X' for element 'cells22'
          _view.cells22.linkProperty("Y",  function() { return ycell2; }, function(_v) { ycell2 = _v; } ); // HtmlView Page linking property 'Y' for element 'cells22'
          _view.cells22.setAction("OnPress", function(_data,_info) {
  count2 = count2+1;
  counttotal=count+count2;
  //if ((count2-count)>1){//check player 2 turn
  if (counttotal%2==1){//check player 2 turn
    count2 = count2-1;
    alert("player 1 turn");
    }
    else {
    score=score+objectinteracted2+1;
  //count2=count2+1;
  gamecolor[counttotal-1]= colorplayer2[objectinteracted2];
  //textgame[counttotal]= text2[objectinteracted2+1];
  textgame[counttotal-1]= text[objectinteracted2];
  textwordsgame[counttotal-1]=textwords[objectinteracted2];
  }

}); // HtmlView Page setting action 'OnPress' for element 'cells22'
          _view.cells22.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'cells22'
          _view.cells22.linkProperty("ElementInteracted",  function() { return objectinteracted2; }, function(_v) { objectinteracted2 = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'cells22'
          _view.textSet32.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet32'
          _view.textSet32.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'textSet32'
          _view.textSet32.linkProperty("X",  function() { return xcell2; }, function(_v) { xcell2 = _v; } ); // HtmlView Page linking property 'X' for element 'textSet32'
          _view.textSet32.linkProperty("Y",  function() { return ycell2; }, function(_v) { ycell2 = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet32'
          _view.textSet32.linkProperty("Text",  function() { return text2; }, function(_v) { text2 = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet32'
          _view.textSet32.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'textSet32'
          _view.textSet32.linkProperty("Font",  function() { return fontbig; }, function(_v) { fontbig = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet32'
          _view.textSet222.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet222'
          _view.textSet222.linkProperty("SizeX",  function() { return cellsizex; }, function(_v) { cellsizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'textSet222'
          _view.textSet222.linkProperty("X",  function() { return xcell2; }, function(_v) { xcell2 = _v; } ); // HtmlView Page linking property 'X' for element 'textSet222'
          _view.textSet222.linkProperty("Y",  function() { return ycellwordsp2; }, function(_v) { ycellwordsp2 = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet222'
          _view.textSet222.linkProperty("Text",  function() { return textwordsp2; }, function(_v) { textwordsp2 = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet222'
          _view.textSet222.linkProperty("SizeY",  function() { return cellsizey; }, function(_v) { cellsizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'textSet222'
          _view.textSet222.linkProperty("Font",  function() { return fontsmall; }, function(_v) { fontsmall = _v; } ); // HtmlView Page linking property 'Font' for element 'textSet222'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function racetotwenty_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = racetotwenty_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function racetotwenty_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'singlePlotPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"userdefined", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'userdefined'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"start", _view.userdefined) // EJsS HtmlView.HtmlView Page: declaration of element 'start'
      .setProperty("Text","start =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'start'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"start2", _view.userdefined) // EJsS HtmlView.HtmlView Page: declaration of element 'start2'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'start2'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'start2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"start3", _view.userdefined) // EJsS HtmlView.HtmlView Page: declaration of element 'start3'
      .setProperty("Text","target =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'start3'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"start22", _view.userdefined) // EJsS HtmlView.HtmlView Page: declaration of element 'start22'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'start22'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'start22'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"start32", _view.userdefined) // EJsS HtmlView.HtmlView Page: declaration of element 'start32'
      .setProperty("Text","cards =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'start32'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"start222", _view.userdefined) // EJsS HtmlView.HtmlView Page: declaration of element 'start222'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'start222'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'start222'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",window.innerHeight*0.9) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("Background","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",1) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("MaximumX",14) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-11) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("XTickStep",40) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",40) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"player1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'player1'
      .setProperty("Y",7) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'player1'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"player12", _view.player1) // EJsS HtmlView.HtmlView Page: declaration of element 'player12'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'player12'
      .setProperty("SizeX",0.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'player12'
      .setProperty("Y",-3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'player12'
      .setProperty("Text","Player 1") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'player12'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'player12'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'player12'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"cells3", _view.player1) // EJsS HtmlView.HtmlView Page: declaration of element 'cells3'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'cells3'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'cells3'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cells3'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cells3'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"cells", _view.player1) // EJsS HtmlView.HtmlView Page: declaration of element 'cells'
      .setProperty("FillColor","url(#mygrandient1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'cells'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'cells'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cells'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cells'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"numbers", _view.player1) // EJsS HtmlView.HtmlView Page: declaration of element 'numbers'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'numbers'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"words", _view.player1) // EJsS HtmlView.HtmlView Page: declaration of element 'words'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'words'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'words'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'words'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"commonplay", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'commonplay'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'commonplay'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"cells23", _view.commonplay) // EJsS HtmlView.HtmlView Page: declaration of element 'cells23'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cells23'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"cells2", _view.commonplay) // EJsS HtmlView.HtmlView Page: declaration of element 'cells2'
      .setProperty("FillColor","url(#mygrandient1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'cells2'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cells2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet3", _view.commonplay) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet3'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textSet3'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet3'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet22", _view.commonplay) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet22'
      .setProperty("Y",-2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'textSet22'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"message", _view.commonplay) // EJsS HtmlView.HtmlView Page: declaration of element 'message'
      .setProperty("Font","normal normal 49px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'message'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'message'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"player2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'player2'
      .setProperty("Y",-7) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'player2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"player122", _view.player2) // EJsS HtmlView.HtmlView Page: declaration of element 'player122'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'player122'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'player122'
      .setProperty("Text","Player 2") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'player122'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"cells222", _view.player2) // EJsS HtmlView.HtmlView Page: declaration of element 'cells222'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'cells222'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'cells222'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cells222'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cells222'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"cells22", _view.player2) // EJsS HtmlView.HtmlView Page: declaration of element 'cells22'
      .setProperty("FillColor","url(#mygrandient1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'cells22'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'cells22'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cells22'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cells22'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet32", _view.player2) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet32'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet32'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet222", _view.player2) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet222'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet222'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'textSet222'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"audio", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'audio'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Add to Twenty Game<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_racetotwenty/racetotwenty/Screen Shot 2017-12-14 at 1.11.32 PM.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_racetotwenty/1authorlookangphoto5050.png" />
 lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, lookang.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new racetotwenty("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/dawn/ejss_src_racetotwenty/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
