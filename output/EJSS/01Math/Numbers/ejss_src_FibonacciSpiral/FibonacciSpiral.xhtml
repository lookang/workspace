<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Fibonancci Spiral</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function FibonacciSpiral(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var nmax; // EjsS Model.Variables.Drawing Variables.nmax
  var n; // EjsS Model.Variables.Drawing Variables.n
  var R; // EjsS Model.Variables.Drawing Variables.R
  var a; // EjsS Model.Variables.Drawing Variables.a
  var gAngle; // EjsS Model.Variables.Drawing Variables.gAngle
  var points; // EjsS Model.Variables.Drawing Variables.points
  var point; // EjsS Model.Variables.Drawing Variables.point
  var colors; // EjsS Model.Variables.Drawing Variables.colors
  var text; // EjsS Model.Variables.Drawing Variables.text
  var t; // EjsS Model.Variables.Drawing Variables.t
  var mode3D; // EjsS Model.Variables.Drawing Variables.mode3D
  var solid; // EjsS Model.Variables.Drawing Variables.solid
  var size; // EjsS Model.Variables.Drawing Variables.size
  var numbers; // EjsS Model.Variables.Drawing Variables.numbers
  var table; // EjsS Model.Variables.Drawing Variables.table

  var font; // EjsS Model.Variables.VariableWC.font

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      nmax : nmax,
      n : n,
      R : R,
      a : a,
      gAngle : gAngle,
      points : points,
      point : point,
      colors : colors,
      text : text,
      t : t,
      mode3D : mode3D,
      solid : solid,
      size : size,
      numbers : numbers,
      table : table,
      font : font
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.nmax != "undefined") nmax = json.nmax;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.gAngle != "undefined") gAngle = json.gAngle;
    if(typeof json.points != "undefined") points = json.points;
    if(typeof json.point != "undefined") point = json.point;
    if(typeof json.colors != "undefined") colors = json.colors;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.mode3D != "undefined") mode3D = json.mode3D;
    if(typeof json.solid != "undefined") solid = json.solid;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.numbers != "undefined") numbers = json.numbers;
    if(typeof json.table != "undefined") table = json.table;
    if(typeof json.font != "undefined") font = json.font;
  };

  _model._inputAndPublicParameters = ["nmax",  "n",  "R",  "a",  "gAngle",  "points",  "point",  "colors",  "text",  "t",  "mode3D",  "solid",  "size",  "numbers",  "table",  "font"]; 

  _model._outputAndPublicParameters = ["nmax",  "n",  "R",  "a",  "gAngle",  "points",  "point",  "colors",  "text",  "t",  "mode3D",  "solid",  "size",  "numbers",  "table",  "font"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    nmax = 1000; // EjsS Model.Variables.Drawing Variables.nmax
    n = 200; // EjsS Model.Variables.Drawing Variables.n
    R = 1.0; // EjsS Model.Variables.Drawing Variables.R
    a = R/50; // EjsS Model.Variables.Drawing Variables.a
    gAngle = Math.PI*(3-Math.sqrt(5)); // EjsS Model.Variables.Drawing Variables.gAngle
    points = new Array(nmax); // EjsS Model.Variables.Drawing Variables.points
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.points
        points[_i0] = [];
        for (_i1=0; _i1<3; _i1+=1) {  // EjsS Model.Variables.Drawing Variables.points
          points[_i0][_i1] = 0;  // EjsS Model.Variables.Drawing Variables.points
        }
      }
    }());
    point = new Array(3); // EjsS Model.Variables.Drawing Variables.point
    (function () {
      var _i0;
      for (_i0=0; _i0<3; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.point
        point[_i0] = 0;  // EjsS Model.Variables.Drawing Variables.point
      }
    }());
    colors = new Array(nmax); // EjsS Model.Variables.Drawing Variables.colors
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.colors
        colors[_i0] = "";  // EjsS Model.Variables.Drawing Variables.colors
      }
    }());
    text = new Array(nmax); // EjsS Model.Variables.Drawing Variables.text
    (function () {
      var _i0;
      for (_i0=0; _i0<nmax; _i0+=1) {  // EjsS Model.Variables.Drawing Variables.text
        text[_i0] = "0";  // EjsS Model.Variables.Drawing Variables.text
      }
    }());
    t = -0.02; // EjsS Model.Variables.Drawing Variables.t
    mode3D = 0; // EjsS Model.Variables.Drawing Variables.mode3D
    solid = false; // EjsS Model.Variables.Drawing Variables.solid
    size = 20; // EjsS Model.Variables.Drawing Variables.size
  });

  _model.addToReset(function() {
    font = "normal normal 1.5vw"; // EjsS Model.Variables.VariableWC.font
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function initSphere () {  // > CustomCode.Initialize Sphere:1
    var r = R*Math.sqrt(1/n);  // > CustomCode.Initialize Sphere:2
   // for (var i=1; i<=n; i++) {  // > CustomCode.Initialize Sphere:3
       for (var i=1; i<=n; i++) {  // > CustomCode.Initialize Sphere:4
      var theta = gAngle*i;  // > CustomCode.Initialize Sphere:5
      point = points[i-1];  // > CustomCode.Initialize Sphere:6
      text[i]=""+i;  // > CustomCode.Initialize Sphere:7
      point[0] = r*Math.cos(theta+t);  // > CustomCode.Initialize Sphere:8
      point[1] = r*Math.sin(theta+t);  // > CustomCode.Initialize Sphere:9
      point[2] = ""+i;  // > CustomCode.Initialize Sphere:10
     //  point[1] = r*Math.cos(theta+t);  // > CustomCode.Initialize Sphere:11
     // point[2] = r*Math.sin(theta+t);  // > CustomCode.Initialize Sphere:12
     // point[0] = ""+i;  // > CustomCode.Initialize Sphere:13
      colors[i-1] = "rgb("+(1-(i/255))*255+", "+(i/255)*255+", "+(i/255)*255+")";  // > CustomCode.Initialize Sphere:14
      r = R*Math.sqrt(i/n);  // > CustomCode.Initialize Sphere:15
    }  // > CustomCode.Initialize Sphere:16
  }  // > CustomCode.Initialize Sphere:17

  function changeN () {  // > CustomCode.Change n:1
   //var n =[];  // > CustomCode.Change n:2
   n = Math.max(1,n);  // > CustomCode.Change n:3
    n = Math.min(nmax,n);  // > CustomCode.Change n:4
   var points = [n][3];  // > CustomCode.Change n:5
    //colors = [n];  // > CustomCode.Change n:6
    initSphere();  // > CustomCode.Change n:7
  }  // > CustomCode.Change n:8
  // Can't get changeN to work ~WC  // > CustomCode.Change n:9

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    initSphere();  // > Initialization.Init Page:1
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    t += 0.01;  // > Evolution.Evol Page:1
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    initSphere();  // > FixedRelations.FixRel Page:1
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "Simulation View", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new FibonacciSpiral_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.controlPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'controlPanel'
          _view.number.linkProperty("Checked",  function() { return numbers; }, function(_v) { numbers = _v; } ); // Simulation View linking property 'Checked' for element 'number'
          _view.number.setAction("OnCheckOff", function(_data,_info) {
  numbers=false;

}); // Simulation View setting action 'OnCheckOff' for element 'number'
          _view.number.setAction("OnCheckOn", function(_data,_info) {
  numbers=true;

}); // Simulation View setting action 'OnCheckOn' for element 'number'
          _view.table.linkProperty("Checked",  function() { return table; }, function(_v) { table = _v; } ); // Simulation View linking property 'Checked' for element 'table'
          _view.table.setAction("OnCheckOff", function(_data,_info) {
  table=false;

}); // Simulation View setting action 'OnCheckOff' for element 'table'
          _view.table.setAction("OnCheckOn", function(_data,_info) {
  table=true;

}); // Simulation View setting action 'OnCheckOn' for element 'table'
          _view.slider.linkProperty("Value",  function() { return n; }, function(_v) { n = _v; } ); // Simulation View linking property 'Value' for element 'slider'
          _view.slider.setAction("OnChange", function(_data,_info) {
  changeN ();

}); // Simulation View setting action 'OnChange' for element 'slider'
          _view.slider.linkProperty("Disabled",  function() { return _isPlaying; } ); // Simulation View linking property 'Disabled' for element 'slider'
          _view.field.linkProperty("Value",  function() { return n; }, function(_v) { n = _v; } ); // Simulation View linking property 'Value' for element 'field'
          _view.field.setAction("OnChange", function(_data,_info) {
  changeN ();

}); // Simulation View setting action 'OnChange' for element 'field'
          _view.slider2.linkProperty("Value",  function() { return size; }, function(_v) { size = _v; } ); // Simulation View linking property 'Value' for element 'slider2'
          _view.slider2.setAction("OnChange", function(_data,_info) {
  changeN ();

}); // Simulation View setting action 'OnChange' for element 'slider2'
          _view.slider2.linkProperty("Disabled",  function() { return _isPlaying; } ); // Simulation View linking property 'Disabled' for element 'slider2'
          _view.field2.linkProperty("Value",  function() { return size; }, function(_v) { size = _v; } ); // Simulation View linking property 'Value' for element 'field2'
          _view.field2.setAction("OnChange", function(_data,_info) {
  changeN ();

}); // Simulation View setting action 'OnChange' for element 'field2'
          _view.playPauseButton.setAction("OffClick", _pause); // Simulation View setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // Simulation View linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // Simulation View setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'playPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // Simulation View setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'resetButton'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  if (_model.isPlaying()) {
    _pause();
  } else if (_model.isPaused()) {
    _play();
  }

}); // Simulation View setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.points.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // Simulation View linking property 'NumberOfElements' for element 'points'
          _view.points.linkProperty("FillColor",  function() { return colors; }, function(_v) { colors = _v; } ); // Simulation View linking property 'FillColor' for element 'points'
          _view.points.linkProperty("SizeX",  function() { return size; }, function(_v) { size = _v; } ); // Simulation View linking property 'SizeX' for element 'points'
          _view.points.linkProperty("Position",  function() { return points; }, function(_v) { points = _v; } ); // Simulation View linking property 'Position' for element 'points'
          _view.points.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // Simulation View linking property 'SizeY' for element 'points'
          _view.textSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // Simulation View linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("Position",  function() { return points; }, function(_v) { points = _v; } ); // Simulation View linking property 'Position' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return text; }, function(_v) { text = _v; } ); // Simulation View linking property 'Text' for element 'textSet'
          _view.textSet.linkProperty("Visibility",  function() { return numbers; }, function(_v) { numbers = _v; } ); // Simulation View linking property 'Visibility' for element 'textSet'
          _view.arrayPanel2.linkProperty("ColumnsWidth",  function() { return ["33%","33%","33%"]; } ); // Simulation View linking property 'ColumnsWidth' for element 'arrayPanel2'
          _view.arrayPanel2.linkProperty("HeadersText",  function() { return ["x","y","i"]; } ); // Simulation View linking property 'HeadersText' for element 'arrayPanel2'
          _view.arrayPanel2.linkProperty("CellsFormat",  function() { return ["0.00","0.00","0"]; } ); // Simulation View linking property 'CellsFormat' for element 'arrayPanel2'
          _view.arrayPanel2.linkProperty("DataArray",  function() { return points; }, function(_v) { points = _v; } ); // Simulation View linking property 'DataArray' for element 'arrayPanel2'
          _view.arrayPanel2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // Simulation View linking property 'Font' for element 'arrayPanel2'
          _view.arrayPanel2.linkProperty("Display",  function() { return table?"inline-block":"none"; } ); // Simulation View linking property 'Display' for element 'arrayPanel2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function FibonacciSpiral_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = FibonacciSpiral_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Fibonacci Spiral','./FibonacciSpiral_Intro_1.html');

  return _view;
} // end of main function

function FibonacciSpiral_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"number", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'number'
      .setProperty("Text","number") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'number'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"table", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'table'
      .setProperty("Text","table") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'table'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"n", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'n'
      .setProperty("Tooltip","number of points") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'n'
      .setProperty("Text","n =") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'n'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'slider'
      .setProperty("Minimum",1) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'slider'
      .setProperty("Maximum",1000) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'slider'
      .setProperty("Step",1) // EJsS HtmlView.Simulation View: setting property 'Step' for element 'slider'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'field'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'field'
      .setProperty("Format","0") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'field'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"size", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'size'
      .setProperty("Tooltip","size of points in pixels") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'size'
      .setProperty("Text","size =") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'size'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'slider2'
      .setProperty("Minimum",5) // EJsS HtmlView.Simulation View: setting property 'Minimum' for element 'slider2'
      .setProperty("Maximum",100) // EJsS HtmlView.Simulation View: setting property 'Maximum' for element 'slider2'
      .setProperty("Step",1) // EJsS HtmlView.Simulation View: setting property 'Step' for element 'slider2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field2", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'field2'
      .setProperty("Width","5vw") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'field2'
      .setProperty("Format","0") // EJsS HtmlView.Simulation View: setting property 'Format' for element 'field2'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.Simulation View: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.Simulation View: setting property 'TextOff' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause the simulation") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.controlPanel) // EJsS HtmlView.Simulation View: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset the simulation") // EJsS HtmlView.Simulation View: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.Simulation View: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'plottingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.Simulation View: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.Simulation View: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.Simulation View: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.Simulation View: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.Simulation View: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.Simulation View: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.Simulation View: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.Simulation View: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",1) // EJsS HtmlView.Simulation View: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.Simulation View: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("TRMessage","Fibonacci Spiral") // EJsS HtmlView.Simulation View: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.Simulation View: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-1) // EJsS HtmlView.Simulation View: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.Simulation View: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("MinimumY",-1) // EJsS HtmlView.Simulation View: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.Simulation View: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.Simulation View: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.Simulation View: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"points", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'points'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.Simulation View: setting property 'ShapeType' for element 'points'
      .setProperty("PixelSize",true) // EJsS HtmlView.Simulation View: setting property 'PixelSize' for element 'points'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'textSet'
      ;

    _view._addElement(EJSS_INTERFACE.arrayPanel,"arrayPanel2", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'arrayPanel2'
      .setProperty("Width","100%") // EJsS HtmlView.Simulation View: setting property 'Width' for element 'arrayPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"html", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'html'
      .setProperty("Html","<h1>Fibonancci Spiral</h1> The Fibonacci Spiral Model draws a geometric spiral whose growth is regulated by the Fibonacci series. Its growth parallels the rapid growth of the series itself. The golden spiral gets wider (or further from its origin) by a factor of φ for every quarter turn it makes.  To produce a uniform distribution in the plane of the spiral, points are separated by the golden angle.<br/> The Fibonacci Spiral Model was developed by Wolfgang Christian using the Easy Java Simulations (EJS) version 4.3.7 authoring and modeling tool. <br/>   You can examine and modify a compiled EJSS.  You must, of course, have EJS installed on your computer.  Information about Ejs is available at: <a href=\"http://www.um.es/fem/Ejs\">http://www.um.es/fem/Ejs</a>  and in the OSP comPADRE collection <a href=\"http://www.compadre.org/OSP\">http://www.compadre.org/OSP</a> . <br/>") // EJsS HtmlView.Simulation View: setting property 'Html' for element 'html'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Fibonancci Spiral<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/Numbers/ejss_src_FibonacciSpiral/Fibonacci2D/FibonacciSpiralWCthumb.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/Numbers/ejss_src_FibonacciSpiral/01authorwc_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01Math/Numbers/ejss_src_FibonacciSpiral/01authorlookang50x50.png" />
 Wolfgang Christian - Davidson College; Tan Wei Chiong; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Wolfgang Christian - Davidson College; Tan Wei Chiong; Loo Kang Wee.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new FibonacciSpiral("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/01Math/Numbers/ejss_src_FibonacciSpiral/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
