<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Wave Handson </title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function wavehandson(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var inputdropmenu; // EjsS Model.Variables.Var Table.inputdropmenu
  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var t; // EjsS Model.Variables.Var Table.t
  var t2; // EjsS Model.Variables.Var Table.t2
  var t3; // EjsS Model.Variables.Var Table.t3
  var t4; // EjsS Model.Variables.Var Table.t4
  var dt; // EjsS Model.Variables.Var Table.dt
  var dt2; // EjsS Model.Variables.Var Table.dt2
  var dt3; // EjsS Model.Variables.Var Table.dt3
  var dt4; // EjsS Model.Variables.Var Table.dt4

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var x; // EjsS Model.Variables.variable.x
  var y; // EjsS Model.Variables.variable.y
  var theta; // EjsS Model.Variables.variable.theta
  var xleft; // EjsS Model.Variables.variable.xleft
  var yleft; // EjsS Model.Variables.variable.yleft
  var thetaleft; // EjsS Model.Variables.variable.thetaleft
  var xright; // EjsS Model.Variables.variable.xright
  var yright; // EjsS Model.Variables.variable.yright
  var thetaright; // EjsS Model.Variables.variable.thetaright
  var showdot1; // EjsS Model.Variables.variable.showdot1
  var showdot2; // EjsS Model.Variables.variable.showdot2
  var showdot3; // EjsS Model.Variables.variable.showdot3
  var showdot4; // EjsS Model.Variables.variable.showdot4
  var x3; // EjsS Model.Variables.variable.x3
  var y3; // EjsS Model.Variables.variable.y3
  var theta3; // EjsS Model.Variables.variable.theta3

  var selectedmodel; // EjsS Model.Variables.model.selectedmodel
  var functionY; // EjsS Model.Variables.model.functionY
  var xmodel; // EjsS Model.Variables.model.xmodel
  var xmodelstepforward; // EjsS Model.Variables.model.xmodelstepforward
  var xmodelvelocity; // EjsS Model.Variables.model.xmodelvelocity
  var vxmodel; // EjsS Model.Variables.model.vxmodel
  var showmodel; // EjsS Model.Variables.model.showmodel
  var xmodel2; // EjsS Model.Variables.model.xmodel2
  var xmodelstepforward2; // EjsS Model.Variables.model.xmodelstepforward2
  var xmodelvelocity2; // EjsS Model.Variables.model.xmodelvelocity2
  var xmodel3; // EjsS Model.Variables.model.xmodel3
  var xmodelstepforward3; // EjsS Model.Variables.model.xmodelstepforward3
  var xmodelvelocity3; // EjsS Model.Variables.model.xmodelvelocity3
  var xmodel4; // EjsS Model.Variables.model.xmodel4
  var xmodelstepforward4; // EjsS Model.Variables.model.xmodelstepforward4
  var xmodelvelocity4; // EjsS Model.Variables.model.xmodelvelocity4
  var centre; // EjsS Model.Variables.model.centre

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];
  var _ODEi_evolution2;
  var userEvents2=[];
  var _ODEi_evolution3;
  var userEvents3=[];
  var _ODEi_evolution4;
  var userEvents4=[];

  _model.getOdes = function() { return [_ODEi_evolution1,_ODEi_evolution2,_ODEi_evolution3,_ODEi_evolution4]; };

  _model.removeEvents = function(){
    userEvents1=[];
    userEvents2=[];
    userEvents3=[];
    userEvents4=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      inputdropmenu : inputdropmenu,
      print : print,
      fontb : fontb,
      font : font,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      t : t,
      t2 : t2,
      t3 : t3,
      t4 : t4,
      dt : dt,
      dt2 : dt2,
      dt3 : dt3,
      dt4 : dt4,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      world : world,
      graph : graph,
      disabledworld : disabledworld,
      disabled : disabled,
      x : x,
      y : y,
      theta : theta,
      xleft : xleft,
      yleft : yleft,
      thetaleft : thetaleft,
      xright : xright,
      yright : yright,
      thetaright : thetaright,
      showdot1 : showdot1,
      showdot2 : showdot2,
      showdot3 : showdot3,
      showdot4 : showdot4,
      x3 : x3,
      y3 : y3,
      theta3 : theta3,
      selectedmodel : selectedmodel,
      functionY : functionY,
      xmodel : xmodel,
      xmodelstepforward : xmodelstepforward,
      xmodelvelocity : xmodelvelocity,
      vxmodel : vxmodel,
      showmodel : showmodel,
      xmodel2 : xmodel2,
      xmodelstepforward2 : xmodelstepforward2,
      xmodelvelocity2 : xmodelvelocity2,
      xmodel3 : xmodel3,
      xmodelstepforward3 : xmodelstepforward3,
      xmodelvelocity3 : xmodelvelocity3,
      xmodel4 : xmodel4,
      xmodelstepforward4 : xmodelstepforward4,
      xmodelvelocity4 : xmodelvelocity4,
      centre : centre
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.inputdropmenu != "undefined") inputdropmenu = json.inputdropmenu;
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.t2 != "undefined") t2 = json.t2;
    if(typeof json.t3 != "undefined") t3 = json.t3;
    if(typeof json.t4 != "undefined") t4 = json.t4;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.dt2 != "undefined") dt2 = json.dt2;
    if(typeof json.dt3 != "undefined") dt3 = json.dt3;
    if(typeof json.dt4 != "undefined") dt4 = json.dt4;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.xleft != "undefined") xleft = json.xleft;
    if(typeof json.yleft != "undefined") yleft = json.yleft;
    if(typeof json.thetaleft != "undefined") thetaleft = json.thetaleft;
    if(typeof json.xright != "undefined") xright = json.xright;
    if(typeof json.yright != "undefined") yright = json.yright;
    if(typeof json.thetaright != "undefined") thetaright = json.thetaright;
    if(typeof json.showdot1 != "undefined") showdot1 = json.showdot1;
    if(typeof json.showdot2 != "undefined") showdot2 = json.showdot2;
    if(typeof json.showdot3 != "undefined") showdot3 = json.showdot3;
    if(typeof json.showdot4 != "undefined") showdot4 = json.showdot4;
    if(typeof json.x3 != "undefined") x3 = json.x3;
    if(typeof json.y3 != "undefined") y3 = json.y3;
    if(typeof json.theta3 != "undefined") theta3 = json.theta3;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.xmodelstepforward != "undefined") xmodelstepforward = json.xmodelstepforward;
    if(typeof json.xmodelvelocity != "undefined") xmodelvelocity = json.xmodelvelocity;
    if(typeof json.vxmodel != "undefined") vxmodel = json.vxmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.xmodel2 != "undefined") xmodel2 = json.xmodel2;
    if(typeof json.xmodelstepforward2 != "undefined") xmodelstepforward2 = json.xmodelstepforward2;
    if(typeof json.xmodelvelocity2 != "undefined") xmodelvelocity2 = json.xmodelvelocity2;
    if(typeof json.xmodel3 != "undefined") xmodel3 = json.xmodel3;
    if(typeof json.xmodelstepforward3 != "undefined") xmodelstepforward3 = json.xmodelstepforward3;
    if(typeof json.xmodelvelocity3 != "undefined") xmodelvelocity3 = json.xmodelvelocity3;
    if(typeof json.xmodel4 != "undefined") xmodel4 = json.xmodel4;
    if(typeof json.xmodelstepforward4 != "undefined") xmodelstepforward4 = json.xmodelstepforward4;
    if(typeof json.xmodelvelocity4 != "undefined") xmodelvelocity4 = json.xmodelvelocity4;
    if(typeof json.centre != "undefined") centre = json.centre;
  };

  _model._inputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "t",  "t2",  "t3",  "t4",  "dt",  "dt2",  "dt3",  "dt4",  "isAndroid",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "x",  "y",  "theta",  "xleft",  "yleft",  "thetaleft",  "xright",  "yright",  "thetaright",  "showdot1",  "showdot2",  "showdot3",  "showdot4",  "x3",  "y3",  "theta3",  "selectedmodel",  "functionY",  "xmodel",  "xmodelstepforward",  "xmodelvelocity",  "vxmodel",  "showmodel",  "xmodel2",  "xmodelstepforward2",  "xmodelvelocity2",  "xmodel3",  "xmodelstepforward3",  "xmodelvelocity3",  "xmodel4",  "xmodelstepforward4",  "xmodelvelocity4",  "centre"]; 

  _model._outputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "t",  "t2",  "t3",  "t4",  "dt",  "dt2",  "dt3",  "dt4",  "isAndroid",  "Width",  "Height",  "Width1",  "Width2",  "world",  "graph",  "disabledworld",  "disabled",  "x",  "y",  "theta",  "xleft",  "yleft",  "thetaleft",  "xright",  "yright",  "thetaright",  "showdot1",  "showdot2",  "showdot3",  "showdot4",  "x3",  "y3",  "theta3",  "selectedmodel",  "functionY",  "xmodel",  "xmodelstepforward",  "xmodelvelocity",  "vxmodel",  "showmodel",  "xmodel2",  "xmodelstepforward2",  "xmodelvelocity2",  "xmodel3",  "xmodelstepforward3",  "xmodelvelocity3",  "xmodel4",  "xmodelstepforward4",  "xmodelvelocity4",  "centre"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["rightnleft"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Evol Page 2"] = true;
    __pagesEnabled["Evol Page 2 2"] = true;
    __pagesEnabled["Evol Page 2 2 2"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    inputdropmenu = true; // EjsS Model.Variables.Var Table.inputdropmenu
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 1vw "; // EjsS Model.Variables.Var Table.font
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    xmax = 5; // EjsS Model.Variables.Var Table.xmax
    ymin = -0.5; // EjsS Model.Variables.Var Table.ymin
    ymax = 0.5; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "shm_with_xo=0,vo=2";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "select dropdown menu and click play"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    t = 0; // EjsS Model.Variables.Var Table.t
    t2 = 0; // EjsS Model.Variables.Var Table.t2
    t3 = 0; // EjsS Model.Variables.Var Table.t3
    t4 = 0; // EjsS Model.Variables.Var Table.t4
    dt = 0; // EjsS Model.Variables.Var Table.dt
    dt2 = 0; // EjsS Model.Variables.Var Table.dt2
    dt3 = 0; // EjsS Model.Variables.Var Table.dt3
    dt4 = 0; // EjsS Model.Variables.Var Table.dt4
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "50%"; // EjsS Model.Variables.layout.Width2
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    x = -0; // EjsS Model.Variables.variable.x
    y = 0; // EjsS Model.Variables.variable.y
    theta = 0; // EjsS Model.Variables.variable.theta
    xleft = 0; // EjsS Model.Variables.variable.xleft
    yleft = 0; // EjsS Model.Variables.variable.yleft
    thetaleft = 0; // EjsS Model.Variables.variable.thetaleft
    xright = 0; // EjsS Model.Variables.variable.xright
    yright = 0; // EjsS Model.Variables.variable.yright
    thetaright = 0; // EjsS Model.Variables.variable.thetaright
    showdot1 = true; // EjsS Model.Variables.variable.showdot1
    x3 = -0; // EjsS Model.Variables.variable.x3
    y3 = 0; // EjsS Model.Variables.variable.y3
    theta3 = 0; // EjsS Model.Variables.variable.theta3
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.model.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.model.selectedmodel
        selectedmodel[_i0] = "12*sin(t)";  // EjsS Model.Variables.model.selectedmodel
      }
    }());
    functionY = selectedmodel+""; // EjsS Model.Variables.model.functionY
    xmodel = 0; // EjsS Model.Variables.model.xmodel
    xmodelstepforward = 0; // EjsS Model.Variables.model.xmodelstepforward
    xmodelvelocity = 0; // EjsS Model.Variables.model.xmodelvelocity
    vxmodel = 0; // EjsS Model.Variables.model.vxmodel
    xmodel2 = 0; // EjsS Model.Variables.model.xmodel2
    xmodelstepforward2 = 0; // EjsS Model.Variables.model.xmodelstepforward2
    xmodelvelocity2 = 0; // EjsS Model.Variables.model.xmodelvelocity2
    xmodel3 = 0; // EjsS Model.Variables.model.xmodel3
    xmodelstepforward3 = 0; // EjsS Model.Variables.model.xmodelstepforward3
    xmodelvelocity3 = 0; // EjsS Model.Variables.model.xmodelvelocity3
    xmodel4 = 0; // EjsS Model.Variables.model.xmodel4
    xmodelstepforward4 = 0; // EjsS Model.Variables.model.xmodelstepforward4
    xmodelvelocity4 = 0; // EjsS Model.Variables.model.xmodelvelocity4
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
    _ODEi_evolution2 = _ODE_evolution2();
    _privateOdesList.push(_ODEi_evolution2);
    _ODEi_evolution3 = _ODE_evolution3();
    _privateOdesList.push(_ODEi_evolution3);
    _ODEi_evolution4 = _ODE_evolution4();
    _privateOdesList.push(_ODEi_evolution4);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function changeOrientation() {  // > CustomCode.changeorientation:1
     // > CustomCode.changeorientation:2
  var k =0.91 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeorientation:3
  var kepub =0.91 ;  // > CustomCode.changeorientation:4
  // check platform for Apps  // > CustomCode.changeorientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeorientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeorientation:7
     // > CustomCode.changeorientation:8
  // check platform for web browsers  // > CustomCode.changeorientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeorientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeorientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeorientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeorientation:13
     // > CustomCode.changeorientation:14
     // > CustomCode.changeorientation:15
  switch (window.orientation) {  // > CustomCode.changeorientation:16
    case 0:  // > CustomCode.changeorientation:17
    case 180:  // > CustomCode.changeorientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeorientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeorientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeorientation:21
        return window.screen.height*0.98;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeorientation:22
        // return window.screen.height;  // > CustomCode.changeorientation:23
        //  return window.innerHeight;  // > CustomCode.changeorientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeorientation:25
      }  // > CustomCode.changeorientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeorientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeorientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeorientation:29
        // return window.screen.height;  // > CustomCode.changeorientation:30
        //  return window.innerHeight;  // > CustomCode.changeorientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeorientation:32
      }  // > CustomCode.changeorientation:33
      else {  // > CustomCode.changeorientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeorientation:35
        return window.innerHeight*k;  // > CustomCode.changeorientation:36
      }  // > CustomCode.changeorientation:37
      break;  // > CustomCode.changeorientation:38
    case 90:  // > CustomCode.changeorientation:39
    case -90:  // > CustomCode.changeorientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeorientation:41
     // > CustomCode.changeorientation:42
      if (iOSapp){ // App  // > CustomCode.changeorientation:43
        return window.screen.width*0.98;    // > CustomCode.changeorientation:44
        // return window.screen.height;  // > CustomCode.changeorientation:45
        //  return window.innerHeight;  // > CustomCode.changeorientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeorientation:47
      }  // > CustomCode.changeorientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeorientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeorientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeorientation:51
        // return window.screen.height;  // > CustomCode.changeorientation:52
        //  return window.innerHeight;  // > CustomCode.changeorientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeorientation:54
      }  // > CustomCode.changeorientation:55
      else { // browser Android and PC  // > CustomCode.changeorientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeorientation:57
        // alert("browser Android and PC");  // > CustomCode.changeorientation:58
        return window.innerHeight*k;  // > CustomCode.changeorientation:59
      }  // > CustomCode.changeorientation:60
      break;  // > CustomCode.changeorientation:61
    default:  // > CustomCode.changeorientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeorientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeorientation:64
      return window.innerHeight*k;  // > CustomCode.changeorientation:65
  }  // > CustomCode.changeorientation:66
     // > CustomCode.changeorientation:67
  }  // > CustomCode.changeorientation:68
     // > CustomCode.changeorientation:69

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    _update();  // > Initialization.Init Page:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    //_view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    //_view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    _view.plottingPanel.getTitleY().setPosition([0.5,0.98]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (showmodel==undefined){  // > Initialization.undefined:1
      showmodel=true;  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
    if (showdot2==undefined){  // > Initialization.undefined:4
      showdot2=true;  // > Initialization.undefined:5
      }  // > Initialization.undefined:6
    if (showdot3==undefined){  // > Initialization.undefined:7
      showdot3=true;  // > Initialization.undefined:8
      }  // > Initialization.undefined:9
      if (showdot4==undefined){  // > Initialization.undefined:10
      showdot4=true;  // > Initialization.undefined:11
      }  // > Initialization.undefined:12
      if (centre==undefined){  // > Initialization.undefined:13
        centre=false;  // > Initialization.undefined:14
        }  // > Initialization.undefined:15
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="90%" fx="90%" fy="10%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:1" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(50,50,255);stop-opacity:1" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient)"  // > Initialization.svg:10
    var container = document.createElement('div');  // > Initialization.svg:11
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:12
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="90%" fx="50%" fy="50%">'+  // > Initialization.svg:13
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:1" />'+  // > Initialization.svg:14
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.svg:15
      '  </radialGradient>'+  // > Initialization.svg:16
      '</defs></svg>';  // > Initialization.svg:17
    container.innerHTML = svggradient;  // > Initialization.svg:18
    document.body.appendChild(container);  // > Initialization.svg:19
    //"url(#mygrandient1)"  // > Initialization.svg:20
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["rightnleft"]) return;
    xright=_view.plottingPanel.getRealWorldXMax()-2;  // > Initialization.rightnleft:1
    xleft=_view.plottingPanel.getRealWorldXMin()+2;  // > Initialization.rightnleft:2
    if (centre)x=0;  // > Initialization.rightnleft:3
    else x=(-_view.plottingPanel.getRealWorldXMax()-2)/3;  // > Initialization.rightnleft:4
     x3=(_view.plottingPanel.getRealWorldXMax()-2)/3;  // > Initialization.rightnleft:5
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page 2"]) return;
    _ODEi_evolution2.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page 2 2"]) return;
    _ODEi_evolution3.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page 2 2 2"]) return;
    _ODEi_evolution4.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    xmodel=_view.fField.evaluate({ t : t, y : xmodel });   // > FixedRelations.FixRel Page:1
    xmodelstepforward=_view.fField.evaluate({ t : t+dt, y : xmodel });   // > FixedRelations.FixRel Page:2
    xmodelvelocity = (xmodelstepforward-xmodel)/dt;  // > FixedRelations.FixRel Page:3
    xmodel2=_view.fField.evaluate({ t : t2, y : xmodel2 });   // > FixedRelations.FixRel Page:4
    xmodelstepforward2=_view.fField.evaluate({ t : t2+dt2, y : xmodel2 });   // > FixedRelations.FixRel Page:5
    xmodelvelocity2 = (xmodelstepforward2-xmodel2)/dt2;  // > FixedRelations.FixRel Page:6
    xmodel3=_view.fField.evaluate({ t : t3, y : xmodel3 });   // > FixedRelations.FixRel Page:7
    xmodelstepforward3=_view.fField.evaluate({ t : t3+dt3, y : xmodel3 });   // > FixedRelations.FixRel Page:8
    xmodelvelocity3 = (xmodelstepforward3-xmodel3)/dt3;  // > FixedRelations.FixRel Page:9
    xmodel4=_view.fField.evaluate({ t : t4, y : xmodel4 });   // > FixedRelations.FixRel Page:10
    xmodelstepforward4=_view.fField.evaluate({ t : t4+dt4, y : xmodel4 });   // > FixedRelations.FixRel Page:11
    xmodelvelocity4 = (xmodelstepforward4-xmodel4)/dt4;  // > FixedRelations.FixRel Page:12
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    if (_odeName=="Evol Page 2") return _ODEi_evolution2;
    if (_odeName=="Evol Page 2 2") return _ODEi_evolution3;
    if (_odeName=="Evol Page 2 2 2") return _ODEi_evolution4;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _ODE_evolution2() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t2"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt2);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents2){__eventSolver.addEvent(userEvents2[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t2) __mustReinitialize = true;
        __state[__cIn++] = t2;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt2===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt2);
      __eventSolver.setInternalStepSize(dt2);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t2 = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t2 = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t2 = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t2 = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t2;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents2.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _ODE_evolution3() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t3"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt3);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents3){__eventSolver.addEvent(userEvents3[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t3) __mustReinitialize = true;
        __state[__cIn++] = t3;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt3===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt3);
      __eventSolver.setInternalStepSize(dt3);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t3 = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t3 = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t3 = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t3 = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t3;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents3.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _ODE_evolution4() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t4"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt4);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents4){__eventSolver.addEvent(userEvents4[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t4) __mustReinitialize = true;
        __state[__cIn++] = t4;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt4===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt4);
      __eventSolver.setInternalStepSize(dt4);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t4 = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t4 = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t4 = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t4 = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t4;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents4.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new wavehandson_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.controlPanel.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'controlPanel'
          _view.controlPanel.linkProperty("Display",  function() { return !print?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'controlPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["","1 dot","3 dots","4 dots","show model","hide model"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //_initialize();
  //"challenge 1","challenge 2","challenge 3","challenge 4"
  if (  option=="1 dot"){
    showdot1=true;
    showdot2=false;
    showdot3=false;
     showdot4=false; // add to complete
    centre=true; // for control starting x
    x=0;
    }
    else if (  option=="3 dots"){
    showdot1=true;
    showdot2=true;
    showdot3=true;
    showdot4=false; // add to complete
      x=0;
     x3=50;// far away
    }
    else if (  option=="4 dots"){
    showdot1=true;
    showdot2=true;
    showdot3=true;
    showdot4=true;
    centre=false;
    x=-(_view.plottingPanel.getRealWorldXMax()-2)/3;
     x3=(_view.plottingPanel.getRealWorldXMax()-2)/3;
    }
   //"show model","hide model"
     else if (  option=="show model"){
       showmodel=true;
       text="select dropdown menu and click play";
       }
       else if (  option=="hide model"){
       showmodel=false;
       text="drag the yellow dots to represent the wave yourself";
       }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.playPauseButton22.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton22'
          _view.playPauseButton22.linkProperty("Disabled",  function() { return !showmodel&&showdot1==false; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton22'
          _view.playPauseButton22.setAction("OnClick", function(_data,_info) {
  _play();
  dt=2*pi/12/5;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton22'
          _view.playPauseButton22.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton22'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Disabled",  function() { return !showmodel||showdot2==false; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  dt2=2*pi/12/5;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.playPauseButton23.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton23'
          _view.playPauseButton23.linkProperty("Disabled",  function() { return !showmodel||showdot3==false; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton23'
          _view.playPauseButton23.setAction("OnClick", function(_data,_info) {
  _play();
  dt3=2*pi/12/5;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton23'
          _view.playPauseButton23.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton23'
          _view.playPauseButton232.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton232'
          _view.playPauseButton232.linkProperty("Disabled",  function() { return !showmodel||showdot4==false; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButton232'
          _view.playPauseButton232.setAction("OnClick", function(_data,_info) {
  _play();
  dt4=2*pi/12/5;
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton232'
          _view.playPauseButton232.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton232'
          _view.playPauseButtonALL.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButtonALL'
          _view.playPauseButtonALL.linkProperty("Disabled",  function() { return !showmodel; } ); // HtmlView Page linking property 'Disabled' for element 'playPauseButtonALL'
          _view.playPauseButtonALL.setAction("OnClick", function(_data,_info) {
  _play();
  dt=2*pi/12/5;
  dt2=2*pi/12/5;//for 2nd particle
  dt3=2*pi/12/5;//3rd
  dt4=2*pi/12/5;//4th
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButtonALL'
          _view.playPauseButtonALL.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButtonALL'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.print.linkProperty("Checked",  function() { return print; }, function(_v) { print = _v; } ); // HtmlView Page linking property 'Checked' for element 'print'
          _view.print.linkProperty("Visibility",  function() { return !print; } ); // HtmlView Page linking property 'Visibility' for element 'print'
          _view.print.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'print'
          _view.panel2.linkProperty("Display",  function() { return !print?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'panel2'
          _view.model3.setAction("OnCheckOff", function(_data,_info) {
  showmodel=false;

}); // HtmlView Page setting action 'OnCheckOff' for element 'model3'
          _view.model3.linkProperty("Checked",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Checked' for element 'model3'
          _view.model3.setAction("OnCheckOn", function(_data,_info) {
  showmodel=true;

}); // HtmlView Page setting action 'OnCheckOn' for element 'model3'
          _view.model.setAction("OnClick", function(_data,_info) {
  if (inputdropmenu == true){
    inputdropmenu = false;
    }
  else if (inputdropmenu == false){
    inputdropmenu = true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'model'
          _view.model.linkProperty("Display",  function() { return showmodel?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'model'
          _view.models.linkProperty("Options",  function() { return ["12*sin(t)"]; } ); // HtmlView Page linking property 'Options' for element 'models'
          _view.models.setAction("OnChange", function(_data,_info) {
  showmodel=true;
  functionY=selectedmodel+"";
  if (selectedmodel[0]==="show me"){
  //functionY= +_view._format(Acalculated,"0.0")+"*sin(" +_view._format(w,"0.00")+"*t+("+_view._format(phi,"0.00")+"))";  
    }
  xmodel=_view.fField.evaluate({ t : t, x : xmodel }); 
  _update(); //force redraw of bars;

}); // HtmlView Page setting action 'OnChange' for element 'models'
          _view.models.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'models'
          _view.models.linkProperty("SelectedOptions",  function() { return selectedmodel; }, function(_v) { selectedmodel = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'models'
          _view.models.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'models'
          _view.models.linkProperty("Display",  function() { return inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.setAction("OnChange", function(_data,_info) {
  showmodel=true;
  xmodel=_view.fField.evaluate({ t : t, y : xmodel });

}); // HtmlView Page setting action 'OnChange' for element 'fField'
          _view.fField.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.fField.linkProperty("Display",  function() { return !inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'fField'
          _view.plottingPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  if (_model.isPlaying())_pause();
  else if (_model.isPaused())_play();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("XTickStep",  function() { return _view.plottingPanel.getRealWorldXMax()-2; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return print?"":text; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnZoom", function(_data,_info) {
  //_view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());
  //_view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());
  //_view.plottingPanel.setProperty("MinimumX",Math.max(_view.plottingPanel.getProperty("MinimumX"),-80));
  //_view.plottingPanel.setProperty("MaximumX",Math.min(_view.plottingPanel.getProperty("MaximumX"),80));
  //_view.plottingPanel.setProperty("MinimumY",Math.max(_view.plottingPanel.getProperty("MinimumY"),-1.6));
  //_view.plottingPanel.setProperty("MaximumY",Math.min(_view.plottingPanel.getProperty("MaximumY"),1.6));
  _view.plottingPanel.setZoomLimits([4,30]);

}); // HtmlView Page setting action 'OnZoom' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return print?"":" t = "+_view._format(t,"0.00")+ " s "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.one3.linkProperty("SizeX",  function() { return _view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin(); } ); // HtmlView Page linking property 'SizeX' for element 'one3'
          _view.one3.linkProperty("Y",  function() { return _view.fField.evaluate({ t : 3*2*pi/12, y : xmodel }); } ); // HtmlView Page linking property 'Y' for element 'one3'
          _view.one2.linkProperty("SizeX",  function() { return _view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin(); } ); // HtmlView Page linking property 'SizeX' for element 'one2'
          _view.one2.linkProperty("Y",  function() { return _view.fField.evaluate({ t : 2*2*pi/12, y : xmodel }); } ); // HtmlView Page linking property 'Y' for element 'one2'
          _view.one.linkProperty("SizeX",  function() { return _view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin(); } ); // HtmlView Page linking property 'SizeX' for element 'one'
          _view.one.linkProperty("Y",  function() { return _view.fField.evaluate({ t : 2*pi/12, y : xmodel }); } ); // HtmlView Page linking property 'Y' for element 'one'
          _view.equlibriumposition.linkProperty("SizeX",  function() { return _view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin(); } ); // HtmlView Page linking property 'SizeX' for element 'equlibriumposition'
          _view.equlibriumpositionbar.linkProperty("SizeX",  function() { return xmax-xmin; } ); // HtmlView Page linking property 'SizeX' for element 'equlibriumpositionbar'
          _view.bottom.linkProperty("SizeX",  function() { return _view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin(); } ); // HtmlView Page linking property 'SizeX' for element 'bottom'
          _view.bottom.linkProperty("Y",  function() { return _view.fField.evaluate({ t : 7*2*pi/12, y : xmodel }); } ); // HtmlView Page linking property 'Y' for element 'bottom'
          _view.bottom2.linkProperty("SizeX",  function() { return _view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin(); } ); // HtmlView Page linking property 'SizeX' for element 'bottom2'
          _view.bottom2.linkProperty("Y",  function() { return _view.fField.evaluate({ t : 8*2*pi/12, y : xmodel }); } ); // HtmlView Page linking property 'Y' for element 'bottom2'
          _view.bottom3.linkProperty("SizeX",  function() { return _view.plottingPanel.getRealWorldXMax()-_view.plottingPanel.getRealWorldXMin(); } ); // HtmlView Page linking property 'SizeX' for element 'bottom3'
          _view.bottom3.linkProperty("Y",  function() { return _view.fField.evaluate({ t : 9*2*pi/12, y : xmodel }); } ); // HtmlView Page linking property 'Y' for element 'bottom3'
          _view.modelLEFT.linkProperty("Visibility",  function() { return showmodel&&showdot3; } ); // HtmlView Page linking property 'Visibility' for element 'modelLEFT'
          _view.model23.linkProperty("X",  function() { return xleft; }, function(_v) { xleft = _v; } ); // HtmlView Page linking property 'X' for element 'model23'
          _view.model23.linkProperty("Y",  function() { return xmodel; }, function(_v) { xmodel = _v; } ); // HtmlView Page linking property 'Y' for element 'model23'
          _view.model23.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model23'
          _view.model23.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model23'
          _view.arrow3.linkProperty("X",  function() { return xleft; }, function(_v) { xleft = _v; } ); // HtmlView Page linking property 'X' for element 'arrow3'
          _view.arrow3.linkProperty("Y",  function() { return xmodel; }, function(_v) { xmodel = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow3'
          _view.arrow3.linkProperty("SizeY",  function() { return xmodelvelocity/3; } ); // HtmlView Page linking property 'SizeY' for element 'arrow3'
          _view.group2.linkProperty("X",  function() { return xleft; }, function(_v) { xleft = _v; } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.group2.linkProperty("Y",  function() { return xmodel+xmodelvelocity/3; } ); // HtmlView Page linking property 'Y' for element 'group2'
          _view.model22.linkProperty("Visibility",  function() { return showmodel&&showdot1; } ); // HtmlView Page linking property 'Visibility' for element 'model22'
          _view.model2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'model2'
          _view.model2.linkProperty("Y",  function() { return xmodel2; }, function(_v) { xmodel2 = _v; } ); // HtmlView Page linking property 'Y' for element 'model2'
          _view.model2.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model2'
          _view.model2.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model2'
          _view.arrow.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'arrow'
          _view.arrow.linkProperty("Y",  function() { return xmodel2; }, function(_v) { xmodel2 = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow'
          _view.arrow.linkProperty("SizeY",  function() { return xmodelvelocity2/3; } ); // HtmlView Page linking property 'SizeY' for element 'arrow'
          _view.group.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return xmodel2+xmodelvelocity2/3; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.model32.linkProperty("Visibility",  function() { return showmodel&&showdot3; } ); // HtmlView Page linking property 'Visibility' for element 'model32'
          _view.model2322.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'model2322'
          _view.model2322.linkProperty("Y",  function() { return xmodel3; }, function(_v) { xmodel3 = _v; } ); // HtmlView Page linking property 'Y' for element 'model2322'
          _view.model2322.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model2322'
          _view.model2322.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model2322'
          _view.arrow322.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'arrow322'
          _view.arrow322.linkProperty("Y",  function() { return xmodel3; }, function(_v) { xmodel3 = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow322'
          _view.arrow322.linkProperty("SizeY",  function() { return xmodelvelocity3/3; } ); // HtmlView Page linking property 'SizeY' for element 'arrow322'
          _view.group222.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'group222'
          _view.group222.linkProperty("Y",  function() { return xmodel3+xmodelvelocity3/3; } ); // HtmlView Page linking property 'Y' for element 'group222'
          _view.modelRIGHT.linkProperty("Visibility",  function() { return showmodel&&showdot2; } ); // HtmlView Page linking property 'Visibility' for element 'modelRIGHT'
          _view.model232.linkProperty("X",  function() { return xright; }, function(_v) { xright = _v; } ); // HtmlView Page linking property 'X' for element 'model232'
          _view.model232.linkProperty("Y",  function() { return xmodel4; }, function(_v) { xmodel4 = _v; } ); // HtmlView Page linking property 'Y' for element 'model232'
          _view.model232.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model232'
          _view.model232.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model232'
          _view.arrow32.linkProperty("X",  function() { return xright; }, function(_v) { xright = _v; } ); // HtmlView Page linking property 'X' for element 'arrow32'
          _view.arrow32.linkProperty("Y",  function() { return xmodel4; }, function(_v) { xmodel4 = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow32'
          _view.arrow32.linkProperty("SizeY",  function() { return xmodelvelocity4/3; } ); // HtmlView Page linking property 'SizeY' for element 'arrow32'
          _view.group22.linkProperty("X",  function() { return xright; }, function(_v) { xright = _v; } ); // HtmlView Page linking property 'X' for element 'group22'
          _view.group22.linkProperty("Y",  function() { return xmodel4+xmodelvelocity4/3; } ); // HtmlView Page linking property 'Y' for element 'group22'
          _view.handson.linkProperty("Visibility",  function() { return !showmodel; } ); // HtmlView Page linking property 'Visibility' for element 'handson'
          _view.LEFTdrag01.linkProperty("Visibility",  function() { return showdot3; }, function(_v) { showdot3 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'LEFTdrag01'
          _view.draggable22.setAction("OnDrag", function(_data,_info) {
  //y=Math.round(_info.point[1]*2*pi/12)/(2*pi/12);
  yleft=Math.min(yleft,12);
  yleft=Math.max(yleft,-12);

}); // HtmlView Page setting action 'OnDrag' for element 'draggable22'
          _view.draggable22.linkProperty("X",  function() { return xleft; }, function(_v) { xleft = _v; } ); // HtmlView Page linking property 'X' for element 'draggable22'
          _view.draggable22.linkProperty("Y",  function() { return yleft; }, function(_v) { yleft = _v; } ); // HtmlView Page linking property 'Y' for element 'draggable22'
          _view.arrow222.linkProperty("Transformation",  function() { return thetaleft; }, function(_v) { thetaleft = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrow222'
          _view.arrow222.linkProperty("X",  function() { return xleft; }, function(_v) { xleft = _v; } ); // HtmlView Page linking property 'X' for element 'arrow222'
          _view.arrow222.linkProperty("Y",  function() { return yleft; }, function(_v) { yleft = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow222'
          _view.arrow222.setAction("OnPress", function(_data,_info) {
  thetaleft=thetaleft+pi;

}); // HtmlView Page setting action 'OnPress' for element 'arrow222'
          _view.centredrag02.linkProperty("Visibility",  function() { return showdot1; }, function(_v) { showdot1 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'centredrag02'
          _view.draggable3.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'draggable3'
          _view.draggable3.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'draggable3'
          _view.draggable3.setAction("OnDrag", function(_data,_info) {
  //y=Math.round(_info.point[1]*2*pi/12)/(2*pi/12);
  y=Math.min(y,12);
  y=Math.max(y,-12);

}); // HtmlView Page setting action 'OnDrag' for element 'draggable3'
          _view.arrow23.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrow23'
          _view.arrow23.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'arrow23'
          _view.arrow23.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow23'
          _view.arrow23.setAction("OnPress", function(_data,_info) {
  theta=theta+pi;

}); // HtmlView Page setting action 'OnPress' for element 'arrow23'
          _view.centredrag03.linkProperty("Visibility",  function() { return showdot3; }, function(_v) { showdot3 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'centredrag03'
          _view.draggable.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'draggable'
          _view.draggable.linkProperty("Y",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'Y' for element 'draggable'
          _view.draggable.setAction("OnDrag", function(_data,_info) {
  //y=Math.round(_info.point[1]*2*pi/12)/(2*pi/12);
  y3=Math.min(y3,12);
  y3=Math.max(y3,-12);

}); // HtmlView Page setting action 'OnDrag' for element 'draggable'
          _view.arrow2.linkProperty("Transformation",  function() { return theta3; }, function(_v) { theta3 = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrow2'
          _view.arrow2.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'arrow2'
          _view.arrow2.linkProperty("Y",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow2'
          _view.arrow2.setAction("OnPress", function(_data,_info) {
  theta3=theta3+pi;

}); // HtmlView Page setting action 'OnPress' for element 'arrow2'
          _view.RIGHTdrag04.linkProperty("Visibility",  function() { return showdot2; }, function(_v) { showdot2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'RIGHTdrag04'
          _view.draggable2.setAction("OnDrag", function(_data,_info) {
  //y=Math.round(_info.point[1]*2*pi/12)/(2*pi/12);
  yright=Math.min(yright,12);
  yright=Math.max(yright,-12);

}); // HtmlView Page setting action 'OnDrag' for element 'draggable2'
          _view.draggable2.linkProperty("X",  function() { return xright; }, function(_v) { xright = _v; } ); // HtmlView Page linking property 'X' for element 'draggable2'
          _view.draggable2.linkProperty("Y",  function() { return yright; }, function(_v) { yright = _v; } ); // HtmlView Page linking property 'Y' for element 'draggable2'
          _view.arrow22.linkProperty("Transformation",  function() { return thetaright; }, function(_v) { thetaright = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrow22'
          _view.arrow22.linkProperty("X",  function() { return xright; }, function(_v) { xright = _v; } ); // HtmlView Page linking property 'X' for element 'arrow22'
          _view.arrow22.linkProperty("Y",  function() { return yright; }, function(_v) { yright = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow22'
          _view.arrow22.setAction("OnPress", function(_data,_info) {
  thetaright=thetaright+pi;

}); // HtmlView Page setting action 'OnPress' for element 'arrow22'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function wavehandson_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = wavehandson_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function wavehandson_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton22", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton22'
      .setProperty("TextOn","1►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton22'
      .setProperty("Tooltip","Play/Pause only when model show is true") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton22'
      .setProperty("TextOff","1❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton22'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","2►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause only when model show is true") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","2❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton23", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton23'
      .setProperty("TextOn","3►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton23'
      .setProperty("Tooltip","Play/Pause only when model show is true") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton23'
      .setProperty("TextOff","3❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton23'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton232", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton232'
      .setProperty("TextOn","4►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton232'
      .setProperty("Tooltip","Play/Pause only when model show is true") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton232'
      .setProperty("TextOff","4❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton232'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButtonALL", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButtonALL'
      .setProperty("TextOn","ALL►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButtonALL'
      .setProperty("Tooltip","Play/Pause only when model show is true") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButtonALL'
      .setProperty("TextOff","ALL❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButtonALL'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"print", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'print'
      .setProperty("Text","Print") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'print'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'print'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"model3", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'model3'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model3'
      .setProperty("Tooltip","show model") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model3'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'model3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"model", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'model'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model'
      .setProperty("Tooltip","key in expression like 2*sin(1*t)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model'
      .setProperty("Text","your model, Y ?=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'model'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'models'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","20vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","model input field") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("EnabledZooming",false) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("XTicks",0) // EJsS HtmlView.HtmlView Page: setting property 'XTicks' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("AxisYFont","normal normal 1.5vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YTickStep",2) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Background","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",15) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",15) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-15) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-15) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"one3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'one3'
      .setProperty("FillColor","rgba(0,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'one3'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'one3'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'one3'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'one3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"one2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'one2'
      .setProperty("FillColor","rgba(0,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'one2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'one2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'one2'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'one2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"one", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'one'
      .setProperty("FillColor","rgba(0,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'one'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'one'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'one'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'one'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"equlibriumposition", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'equlibriumposition'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'equlibriumposition'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'equlibriumposition'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'equlibriumposition'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'equlibriumposition'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'equlibriumposition'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"equlibriumpositionbar", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'equlibriumpositionbar'
      .setProperty("FillColor","rgba(0,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'equlibriumpositionbar'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'equlibriumpositionbar'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'equlibriumpositionbar'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'equlibriumpositionbar'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'equlibriumpositionbar'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"eq", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'eq'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'eq'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'eq'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'eq'
      .setProperty("Text","Equilibrium Position") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'eq'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"bottom", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottom'
      .setProperty("FillColor","rgba(0,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bottom'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'bottom'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'bottom'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'bottom'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"bottom2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottom2'
      .setProperty("FillColor","rgba(0,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bottom2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'bottom2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'bottom2'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'bottom2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"bottom3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottom3'
      .setProperty("FillColor","rgba(0,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'bottom3'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'bottom3'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'bottom3'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'bottom3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"modelLEFT", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'modelLEFT'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model23", _view.modelLEFT) // EJsS HtmlView.HtmlView Page: declaration of element 'model23'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model23'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'model23'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model23'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model23'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model23'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model23'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow3", _view.modelLEFT) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow3'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow3'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow3'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow3'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.modelLEFT) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'text2'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'text2'
      .setProperty("Text","v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"model22", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'model22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model2", _view.model22) // EJsS HtmlView.HtmlView Page: declaration of element 'model2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'model2'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model2'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.model22) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.model22) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'text'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'text'
      .setProperty("Text","v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"model32", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'model32'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model2322", _view.model32) // EJsS HtmlView.HtmlView Page: declaration of element 'model2322'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model2322'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'model2322'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model2322'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model2322'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model2322'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model2322'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow322", _view.model32) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow322'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow322'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow322'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow322'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow322'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group222", _view.model32) // EJsS HtmlView.HtmlView Page: declaration of element 'group222'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text222", _view.group222) // EJsS HtmlView.HtmlView Page: declaration of element 'text222'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'text222'
      .setProperty("Text","v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text222'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text222'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"modelRIGHT", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'modelRIGHT'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model232", _view.modelRIGHT) // EJsS HtmlView.HtmlView Page: declaration of element 'model232'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model232'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'model232'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model232'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model232'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model232'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model232'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow32", _view.modelRIGHT) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow32'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow32'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow32'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow32'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow32'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group22", _view.modelRIGHT) // EJsS HtmlView.HtmlView Page: declaration of element 'group22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text22", _view.group22) // EJsS HtmlView.HtmlView Page: declaration of element 'text22'
      .setProperty("X",0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'text22'
      .setProperty("Text","v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'text22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"handson", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'handson'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"LEFTdrag01", _view.handson) // EJsS HtmlView.HtmlView Page: declaration of element 'LEFTdrag01'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"draggable22", _view.LEFTdrag01) // EJsS HtmlView.HtmlView Page: declaration of element 'draggable22'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'draggable22'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'draggable22'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'draggable22'
      .setProperty("Sensitivity",80) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'draggable22'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'draggable22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'draggable22'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'draggable22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'draggable22'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'draggable22'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'draggable22'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"rightpixel302", _view.LEFTdrag01) // EJsS HtmlView.HtmlView Page: declaration of element 'rightpixel302'
      .setProperty("PixelPosition",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelPosition' for element 'rightpixel302'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'rightpixel302'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'rightpixel302'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow222", _view.rightpixel302) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow222'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'arrow222'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'arrow222'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow222'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow222'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'arrow222'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow222'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow222'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow222'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow222'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow222'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"centredrag02", _view.handson) // EJsS HtmlView.HtmlView Page: declaration of element 'centredrag02'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"draggable3", _view.centredrag02) // EJsS HtmlView.HtmlView Page: declaration of element 'draggable3'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'draggable3'
      .setProperty("Sensitivity",80) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'draggable3'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'draggable3'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'draggable3'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'draggable3'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'draggable3'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'draggable3'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'draggable3'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'draggable3'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow23", _view.centredrag02) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow23'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'arrow23'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'arrow23'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow23'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow23'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'arrow23'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow23'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow23'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow23'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow23'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow23'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow23'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"centredrag03", _view.handson) // EJsS HtmlView.HtmlView Page: declaration of element 'centredrag03'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"draggable", _view.centredrag03) // EJsS HtmlView.HtmlView Page: declaration of element 'draggable'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'draggable'
      .setProperty("Sensitivity",80) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'draggable'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'draggable'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'draggable'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'draggable'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'draggable'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'draggable'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'draggable'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'draggable'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow2", _view.centredrag03) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'arrow2'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'arrow2'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow2'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'arrow2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow2'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow2'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow2'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"RIGHTdrag04", _view.handson) // EJsS HtmlView.HtmlView Page: declaration of element 'RIGHTdrag04'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"draggable2", _view.RIGHTdrag04) // EJsS HtmlView.HtmlView Page: declaration of element 'draggable2'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'draggable2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'draggable2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'draggable2'
      .setProperty("Sensitivity",80) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'draggable2'
      .setProperty("SizeX",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'draggable2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'draggable2'
      .setProperty("SizeY",60) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'draggable2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'draggable2'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'draggable2'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'draggable2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"rightpixel30", _view.RIGHTdrag04) // EJsS HtmlView.HtmlView Page: declaration of element 'rightpixel30'
      .setProperty("PixelPosition",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelPosition' for element 'rightpixel30'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'rightpixel30'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'rightpixel30'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow22", _view.rightpixel30) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow22'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'arrow22'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'arrow22'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow22'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow22'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'arrow22'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow22'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow22'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow22'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow22'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Wave Handson <br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_12generalwaves/ejss_src_wavehandson/wavehandson/Screen Shot 2017-09-28 at 4.39.38 PM.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_12generalwaves/ejss_src_wavehandson/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_12generalwaves/ejss_src_wavehandson/01authorPacoEsquembre2011.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_12generalwaves/ejss_src_wavehandson/01authorFelix_J_Garcia_Clemente.png" />
 weelookang@gmail.com; Francisco Esquembre; Boon Chien Yap; Felix J. Garcia Clemente
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com; Francisco Esquembre; Boon Chien Yap; Felix J. Garcia Clemente.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new wavehandson("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_12generalwaves/ejss_src_wavehandson/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
