<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Lattice Elasticity, the Vibrating String, and Nonlinearity</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PICUP_string_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var N; // EjsS Model.Variables.Main.N
  var modenumber; // EjsS Model.Variables.Main.modenumber
  var dt; // EjsS Model.Variables.Main.dt
  var amplitude; // EjsS Model.Variables.Main.amplitude
  var stiffness; // EjsS Model.Variables.Main.stiffness
  var density; // EjsS Model.Variables.Main.density
  var length; // EjsS Model.Variables.Main.length
  var tension; // EjsS Model.Variables.Main.tension

  var t; // EjsS Model.Variables.Variables.t
  var k; // EjsS Model.Variables.Variables.k
  var m; // EjsS Model.Variables.Variables.m
  var r0; // EjsS Model.Variables.Variables.r0
  var Ls; // EjsS Model.Variables.Variables.Ls
  var E; // EjsS Model.Variables.Variables.E
  var T; // EjsS Model.Variables.Variables.T
  var U; // EjsS Model.Variables.Variables.U

  var density_stretched; // EjsS Model.Variables.Prediction.density_stretched
  var wavespeed; // EjsS Model.Variables.Prediction.wavespeed
  var period_predict; // EjsS Model.Variables.Prediction.period_predict
  var vym_last; // EjsS Model.Variables.Prediction.vym_last
  var monitornode; // EjsS Model.Variables.Prediction.monitornode
  var nperiods; // EjsS Model.Variables.Prediction.nperiods

  var x; // EjsS Model.Variables.Arrays.x
  var y; // EjsS Model.Variables.Arrays.y
  var vx; // EjsS Model.Variables.Arrays.vx
  var vy; // EjsS Model.Variables.Arrays.vy
  var Fx; // EjsS Model.Variables.Arrays.Fx
  var Fy; // EjsS Model.Variables.Arrays.Fy
  var y2; // EjsS Model.Variables.Arrays.y2
  var y3; // EjsS Model.Variables.Arrays.y3

  var textA; // EjsS Model.Variables.Graph and Display.textA
  var textB; // EjsS Model.Variables.Graph and Display.textB
  var font; // EjsS Model.Variables.Graph and Display.font
  var fontb; // EjsS Model.Variables.Graph and Display.fontb
  var fonta; // EjsS Model.Variables.Graph and Display.fonta
  var box; // EjsS Model.Variables.Graph and Display.box

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      N : N,
      modenumber : modenumber,
      dt : dt,
      amplitude : amplitude,
      stiffness : stiffness,
      density : density,
      length : length,
      tension : tension,
      t : t,
      k : k,
      m : m,
      r0 : r0,
      Ls : Ls,
      E : E,
      T : T,
      U : U,
      density_stretched : density_stretched,
      wavespeed : wavespeed,
      period_predict : period_predict,
      vym_last : vym_last,
      monitornode : monitornode,
      nperiods : nperiods,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      Fx : Fx,
      Fy : Fy,
      y2 : y2,
      y3 : y3,
      textA : textA,
      textB : textB,
      font : font,
      fontb : fontb,
      fonta : fonta,
      box : box
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.N != "undefined") N = json.N;
    if(typeof json.modenumber != "undefined") modenumber = json.modenumber;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.amplitude != "undefined") amplitude = json.amplitude;
    if(typeof json.stiffness != "undefined") stiffness = json.stiffness;
    if(typeof json.density != "undefined") density = json.density;
    if(typeof json.length != "undefined") length = json.length;
    if(typeof json.tension != "undefined") tension = json.tension;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.r0 != "undefined") r0 = json.r0;
    if(typeof json.Ls != "undefined") Ls = json.Ls;
    if(typeof json.E != "undefined") E = json.E;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.U != "undefined") U = json.U;
    if(typeof json.density_stretched != "undefined") density_stretched = json.density_stretched;
    if(typeof json.wavespeed != "undefined") wavespeed = json.wavespeed;
    if(typeof json.period_predict != "undefined") period_predict = json.period_predict;
    if(typeof json.vym_last != "undefined") vym_last = json.vym_last;
    if(typeof json.monitornode != "undefined") monitornode = json.monitornode;
    if(typeof json.nperiods != "undefined") nperiods = json.nperiods;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.Fx != "undefined") Fx = json.Fx;
    if(typeof json.Fy != "undefined") Fy = json.Fy;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.y3 != "undefined") y3 = json.y3;
    if(typeof json.textA != "undefined") textA = json.textA;
    if(typeof json.textB != "undefined") textB = json.textB;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.box != "undefined") box = json.box;
  };

  _model._inputAndPublicParameters = ["N",  "modenumber",  "dt",  "amplitude",  "stiffness",  "density",  "length",  "tension",  "t",  "k",  "m",  "r0",  "Ls",  "E",  "T",  "U",  "density_stretched",  "wavespeed",  "period_predict",  "vym_last",  "monitornode",  "nperiods",  "x",  "y",  "vx",  "vy",  "Fx",  "Fy",  "y2",  "y3",  "textA",  "textB",  "font",  "fontb",  "fonta",  "box"]; 

  _model._outputAndPublicParameters = ["N",  "modenumber",  "dt",  "amplitude",  "stiffness",  "density",  "length",  "tension",  "t",  "k",  "m",  "r0",  "Ls",  "E",  "T",  "U",  "density_stretched",  "wavespeed",  "period_predict",  "vym_last",  "monitornode",  "nperiods",  "x",  "y",  "vx",  "vy",  "Fx",  "Fy",  "y2",  "y3",  "textA",  "textB",  "font",  "fontb",  "fonta",  "box"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Predictions"] = true;
    __pagesEnabled["Array Fill"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["Loop"] = true;
    __pagesEnabled["Vibration"] = true;
    __pagesEnabled["Text"] = true;
  });

  _model.addToReset(function() {
    N = 80; // EjsS Model.Variables.Main.N
    modenumber = 3; // EjsS Model.Variables.Main.modenumber
    dt = 2e-3; // EjsS Model.Variables.Main.dt
    amplitude = 0.1; // EjsS Model.Variables.Main.amplitude
    stiffness = 10; // EjsS Model.Variables.Main.stiffness
    density = 1; // EjsS Model.Variables.Main.density
    length = 1; // EjsS Model.Variables.Main.length
    tension = 1; // EjsS Model.Variables.Main.tension
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.Variables.t
    k = 0; // EjsS Model.Variables.Variables.k
    m = 0; // EjsS Model.Variables.Variables.m
    r0 = 0; // EjsS Model.Variables.Variables.r0
    Ls = 0; // EjsS Model.Variables.Variables.Ls
    E = 0; // EjsS Model.Variables.Variables.E
    T = 0; // EjsS Model.Variables.Variables.T
    U = 0; // EjsS Model.Variables.Variables.U
  });

  _model.addToReset(function() {
    density_stretched = 0; // EjsS Model.Variables.Prediction.density_stretched
    wavespeed = 0; // EjsS Model.Variables.Prediction.wavespeed
    period_predict = 0; // EjsS Model.Variables.Prediction.period_predict
    vym_last = 0; // EjsS Model.Variables.Prediction.vym_last
    monitornode = 3; // EjsS Model.Variables.Prediction.monitornode
    nperiods = 0; // EjsS Model.Variables.Prediction.nperiods
  });

  _model.addToReset(function() {
    x = 0; // EjsS Model.Variables.Arrays.x
    y = 0; // EjsS Model.Variables.Arrays.y
    vx = 0; // EjsS Model.Variables.Arrays.vx
    vy = 0; // EjsS Model.Variables.Arrays.vy
    Fx = 0; // EjsS Model.Variables.Arrays.Fx
    Fy = 0; // EjsS Model.Variables.Arrays.Fy
    y2 = 0; // EjsS Model.Variables.Arrays.y2
    y3 = 0; // EjsS Model.Variables.Arrays.y3
  });

  _model.addToReset(function() {
    textA = ""; // EjsS Model.Variables.Graph and Display.textA
    textB = ""; // EjsS Model.Variables.Graph and Display.textB
    font = "normal normal 1.4vw"; // EjsS Model.Variables.Graph and Display.font
    fontb = "normal bold 1.4vw"; // EjsS Model.Variables.Graph and Display.fontb
    fonta = "normal normal 1vw"; // EjsS Model.Variables.Graph and Display.fonta
    box = 2; // EjsS Model.Variables.Graph and Display.box
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  // #define ONE_PERIOD_ONLY // uncomment this to do only one period, then print stats and exit.   // > CustomCode.get_forces:1
  function get_forces(x, y, Fx, Fy, N, k, r0) // pointers here are array parameters  // > CustomCode.get_forces:2
  {  // > CustomCode.get_forces:3
    var r;  // > CustomCode.get_forces:4
    Fx[0]=Fy[0]=Fx[N]=Fy[N]=0; // have to set the end forces properly to avoid possible uninitialized memory shenanigans  // > CustomCode.get_forces:5
    var U=0,E=0,T=0;  // > CustomCode.get_forces:6
     // > CustomCode.get_forces:7
    for (var i=1;i<N+1;i++) //N+1 by lookang  // > CustomCode.get_forces:8
    {  // > CustomCode.get_forces:9
      // left force  // > CustomCode.get_forces:10
      r = Math.hypot(x[i]-x[i-1],y[i]-y[i-1]);  // > CustomCode.get_forces:11
      Fx[i] = -(x[i]-x[i-1]) * k * (r-r0)/r;  // > CustomCode.get_forces:12
      Fy[i] = -(y[i]-y[i-1]) * k * (r-r0)/r;  // > CustomCode.get_forces:13
      // right force  // > CustomCode.get_forces:14
      r = Math.hypot(x[i]-x[i+1],y[i]-y[i+1]);  // > CustomCode.get_forces:15
      Fx[i] += -(x[i]-x[i+1]) * k * (r-r0)/r;  // > CustomCode.get_forces:16
      Fy[i] += -(y[i]-y[i+1]) * k * (r-r0)/r;  // > CustomCode.get_forces:17
    }  // > CustomCode.get_forces:18
  }  // > CustomCode.get_forces:19

  function evolve_euler(x, y, vx, vy, N, k, m, r0, dt)   // > CustomCode.evolve_euler:1
  {  // > CustomCode.evolve_euler:2
     Fx,Fy=[]; // this could be made faster by mallocing this once, but we leave it this way for students  // > CustomCode.evolve_euler:3
                            // to avoid having to deal with malloc(). In any case memory allocation is faster than a bunch  // > CustomCode.evolve_euler:4
                            // of square root calls in hypot().  // > CustomCode.evolve_euler:5
    get_forces(x,y,Fx,Fy,N,k,r0);  // > CustomCode.evolve_euler:6
    for (var i=1;i<N+1;i++)//N+1 by lookang  // > CustomCode.evolve_euler:7
    {  // > CustomCode.evolve_euler:8
      x[i] += vx[i]*dt;  // > CustomCode.evolve_euler:9
      y[i] += vy[i]*dt;  // > CustomCode.evolve_euler:10
      vx[i] += Fx[i]/m*dt;  // > CustomCode.evolve_euler:11
      vy[i] += Fy[i]/m*dt;  // > CustomCode.evolve_euler:12
    }  // > CustomCode.evolve_euler:13
  }  // > CustomCode.evolve_euler:14

  // this function is around to go from Euler-Cromer to leapfrog, if we want second-order precision  // > CustomCode.evolve_velocity_half:1
  function evolve_velocity_half(x, y, vx, vy, N, k, m, r0, dt)  // > CustomCode.evolve_velocity_half:2
  {  // > CustomCode.evolve_velocity_half:3
    Fx,Fy = []; // this could be made faster by mallocing this once, but we leave it this way for students  // > CustomCode.evolve_velocity_half:4
      // > CustomCode.evolve_velocity_half:5
    get_forces(x,y,Fx,Fy,N,k,r0);  // > CustomCode.evolve_velocity_half:6
      // > CustomCode.evolve_velocity_half:7
    for (var i=1;i<N+1;i++)//N+1 by lookang  // > CustomCode.evolve_velocity_half:8
    {  // > CustomCode.evolve_velocity_half:9
      vx[i] += Fx[i]/m*dt/2;  // > CustomCode.evolve_velocity_half:10
      vy[i] += Fy[i]/m*dt/2;  // > CustomCode.evolve_velocity_half:11
    }  // > CustomCode.evolve_velocity_half:12
  }  // > CustomCode.evolve_velocity_half:13

  // Students might not be familiar with pass-by-reference as a trick for returning multiple values yet.   // > CustomCode.get_energy:1
  // Ideally they should be coding this anyway, and there are a number of workarounds, in particular   // > CustomCode.get_energy:2
  // just not using a function for this.  // > CustomCode.get_energy:3
  function get_energy(x, y, vx, vy, N, k, m, r0, E, T, U)  // > CustomCode.get_energy:4
  {  // > CustomCode.get_energy:5
    T=U=0;  // > CustomCode.get_energy:6
    var r;  // > CustomCode.get_energy:7
    for (var i=0;i<N+1;i++)//N+1 by lookang  // > CustomCode.get_energy:8
    {  // > CustomCode.get_energy:9
      T+=0.5*m*(vx[i]*vx[i] + vy[i]*vy[i]);  // > CustomCode.get_energy:10
      r = Math.hypot(x[i]-x[i+1],y[i]-y[i+1]);  // > CustomCode.get_energy:11
      U+=0.5*k*(r-r0)*(r-r0);  // > CustomCode.get_energy:12
    }  // > CustomCode.get_energy:13
    E=T+U;  // > CustomCode.get_energy:14
  }  // > CustomCode.get_energy:15

  // does what it says on the tin  // > CustomCode.evolve_euler_cromer:1
  function evolve_euler_cromer(x, y, vx, vy, N, k, m, r0, dt)  // > CustomCode.evolve_euler_cromer:2
  {  // > CustomCode.evolve_euler_cromer:3
    Fx,Fy = []; // this could be made faster by mallocing this once, but we leave it this way for students  // > CustomCode.evolve_euler_cromer:4
    for (var i=1;i<N+1;i++)//N+1 by lookang  // > CustomCode.evolve_euler_cromer:5
    {  // > CustomCode.evolve_euler_cromer:6
      x[i] += vx[i]*dt;  // > CustomCode.evolve_euler_cromer:7
      y[i] += vy[i]*dt;  // > CustomCode.evolve_euler_cromer:8
    }  // > CustomCode.evolve_euler_cromer:9
      // > CustomCode.evolve_euler_cromer:10
    get_forces(x,y,Fx,Fy,N,k,r0);  // > CustomCode.evolve_euler_cromer:11
      // > CustomCode.evolve_euler_cromer:12
    for (var i=1;i<N+1;i++)//N+1 by lookang  // > CustomCode.evolve_euler_cromer:13
    {  // > CustomCode.evolve_euler_cromer:14
      vx[i] += Fx[i]/m*dt;  // > CustomCode.evolve_euler_cromer:15
      vy[i] += Fy[i]/m*dt;  // > CustomCode.evolve_euler_cromer:16
    }  // > CustomCode.evolve_euler_cromer:17
  }  // > CustomCode.evolve_euler_cromer:18

  // does what it says on the tin  // > CustomCode.evolve_rk2:1
  function evolve_rk2(x, y, vx, vy, N, k, m, r0, dt)  // > CustomCode.evolve_rk2:2
  {  // > CustomCode.evolve_rk2:3
    Fx,Fy = []; // this could be made faster by mallocing this once, but we leave it this way for students  // > CustomCode.evolve_rk2:4
    var xh, yh, vxh, vyh =[];  // > CustomCode.evolve_rk2:5
    vxh[0]=vyh[0]=vxh[N]=vyh[N]=0;  // > CustomCode.evolve_rk2:6
    get_forces(x,y,Fx,Fy,N,k,r0);  // > CustomCode.evolve_rk2:7
    for (var i=0;i<=N;i++)  // > CustomCode.evolve_rk2:8
    {  // > CustomCode.evolve_rk2:9
      xh[i] = x[i] + vx[i]*dt/2;  // > CustomCode.evolve_rk2:10
      yh[i] = y[i] + vy[i]*dt/2;  // > CustomCode.evolve_rk2:11
      vxh[i] = vx[i] + Fx[i]/m*dt/2;  // > CustomCode.evolve_rk2:12
      vyh[i] = vy[i] + Fy[i]/m*dt/2;  // > CustomCode.evolve_rk2:13
    }  // > CustomCode.evolve_rk2:14
      // > CustomCode.evolve_rk2:15
    get_forces(xh,yh,Fx,Fy,N,k,r0);  // > CustomCode.evolve_rk2:16
      // > CustomCode.evolve_rk2:17
    for (var i=0;i<=N;i++) // need two for loops -- can't interleave halfstep/fullstep updates (students have trouble with this sometimes!)  // > CustomCode.evolve_rk2:18
    {  // > CustomCode.evolve_rk2:19
      x[i] = x[i] + vx[i]*dt;  // > CustomCode.evolve_rk2:20
      y[i] = y[i] + vy[i]*dt;  // > CustomCode.evolve_rk2:21
      vx[i] = vx[i] + Fx[i]/m*dt;  // > CustomCode.evolve_rk2:22
      vy[i] = vy[i] + Fy[i]/m*dt;  // > CustomCode.evolve_rk2:23
    }  // > CustomCode.evolve_rk2:24
      // > CustomCode.evolve_rk2:25
  }  // > CustomCode.evolve_rk2:26

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.toggleFullScreen:1
  // does not work for iOS   // > CustomCode.toggleFullScreen:2
  /*jslint browser:true */  // > CustomCode.toggleFullScreen:3
  function toggleFullScreen() {  // > CustomCode.toggleFullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.toggleFullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.toggleFullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.toggleFullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.toggleFullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.toggleFullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.toggleFullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.toggleFullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.toggleFullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.toggleFullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.toggleFullScreen:14
      }  // > CustomCode.toggleFullScreen:15
    } else {  // > CustomCode.toggleFullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.toggleFullScreen:17
        document.exitFullscreen();  // > CustomCode.toggleFullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.toggleFullScreen:19
        document.msExitFullscreen();  // > CustomCode.toggleFullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.toggleFullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.toggleFullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.toggleFullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.toggleFullScreen:24
      }  // > CustomCode.toggleFullScreen:25
    }  // > CustomCode.toggleFullScreen:26
  }  // > CustomCode.toggleFullScreen:27

  document.addEventListener('keydown', function(event) {  // > CustomCode.KeyIsPressed:1
    if(event.keyCode == 39) {  // > CustomCode.KeyIsPressed:2
         // alert('This is Right arrow');  // > CustomCode.KeyIsPressed:3
         if (monitornode<N-1){  // > CustomCode.KeyIsPressed:4
         monitornode = monitornode + 1;}  // > CustomCode.KeyIsPressed:5
    }  // > CustomCode.KeyIsPressed:6
    else if (event.keyCode == 37) {  // > CustomCode.KeyIsPressed:7
         // alert('This is Left arrow');   // > CustomCode.KeyIsPressed:8
         if (monitornode>0){  // > CustomCode.KeyIsPressed:9
         monitornode =monitornode - 1;  // > CustomCode.KeyIsPressed:10
         }  // > CustomCode.KeyIsPressed:11
    }  // > CustomCode.KeyIsPressed:12
    });  // > CustomCode.KeyIsPressed:13
  document.addEventListener('keyup', function() {  // > CustomCode.KeyIsPressed:14
      //alert('key was released');  // > CustomCode.KeyIsPressed:15
  });  // > CustomCode.KeyIsPressed:16

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    x = [];y = [];vx = [];vy = [];  // > Initialization.Init Page:1
    E= T =U =0;  // > Initialization.Init Page:2
    t=0;  // > Initialization.Init Page:3
    Fx = [];Fy = [];  // > Initialization.Init Page:4
    // compute microscopic properties from macroscopic ones   // > Initialization.Init Page:5
      r0=length/N;  // > Initialization.Init Page:6
      m=density*length/N;  // > Initialization.Init Page:7
      k=stiffness*N/length;  // > Initialization.Init Page:8
    // figure out stretched length  // > Initialization.Init Page:9
      Ls=length + tension * length / stiffness;  // > Initialization.Init Page:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Predictions"]) return;
    // make predictions based on what our freshman mechanics class taught us  // > Initialization.Predictions:1
      density_stretched = density * length / Ls;  // > Initialization.Predictions:2
      wavespeed = Math.sqrt(tension/density_stretched);  // > Initialization.Predictions:3
      period_predict = 2 * Ls / wavespeed / modenumber;  // > Initialization.Predictions:4
      vym_last=0;  // > Initialization.Predictions:5
        // > Initialization.Predictions:6
      // this is the node that we'll be watching to see when a period has elapsed.  // > Initialization.Predictions:7
      //monitornode = N/modenumber/2;   // > Initialization.Predictions:8
      nperiods=0;  // > Initialization.Predictions:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Array Fill"]) return;
      for (var i=0;i<=N+1;i++) // remember, we have N+1 of these  // > Initialization.Array Fill:1
      {  // > Initialization.Array Fill:2
        x[i] = Ls*i/N;  // > Initialization.Array Fill:3
        y[i] = amplitude*Math.sin(modenumber * Math.PI * x[i] / Ls);  // > Initialization.Array Fill:4
        vx[i]=0;  // > Initialization.Array Fill:5
        vy[i]=0;  // > Initialization.Array Fill:6
      }  // > Initialization.Array Fill:7
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    //_view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    //_view.plottingPanel.getTitleY().setPosition([0.5,0.98]);  // > Initialization.axes:4
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Loop"]) return;
    // now, loop over time forever...  // > Evolution.Loop:1
        t+=dt;  // > Evolution.Loop:2
          // > Evolution.Loop:3
        vym_last=vy[monitornode];  // > Evolution.Loop:4
    //selecting choices  // > Evolution.Loop:5
    if (box==1){  // > Evolution.Loop:6
        evolve_euler(x,y,vx,vy,N,k,m,r0,dt);}  // > Evolution.Loop:7
    else if (box==3){  // > Evolution.Loop:8
        evolve_velocity_half(x,y,vx,vy,N,k,m,r0,dt);}  // > Evolution.Loop:9
    else if (box==4){  // > Evolution.Loop:10
        evolve_rk2(x,y,vx,vy,N,k,m,r0,dt);}  // > Evolution.Loop:11
    else{  // > Evolution.Loop:12
        evolve_euler_cromer(x,y,vx,vy,N,k,m,r0,dt);}  // > Evolution.Loop:13
        // "if we were going up, but now we're going down, then a period is complete"  // > Evolution.Loop:14
        // this is crude and will fail if it has enough "wobble", but it's sufficient for this project.  // > Evolution.Loop:15
          // > Evolution.Loop:16
    if (vym_last > 0 && vy[monitornode] < 0)  // > Evolution.Loop:17
        {  // > Evolution.Loop:18
          nperiods++;  // > Evolution.Loop:19
            // > Evolution.Loop:20
        if (nperiods==1){  // > Evolution.Loop:21
          _pause(); // kill anim before we die ourselves        // > Evolution.Loop:22
        }  // > Evolution.Loop:23
        }  // > Evolution.Loop:24
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Vibration"]) return;
    y2 = [];  // > Evolution.Vibration:1
    y3 = [];  // > Evolution.Vibration:2
     for (var i=0;i<=N+1;i++)// change to N+1 by lookang  // > Evolution.Vibration:3
     {  // > Evolution.Vibration:4
       y2[i]=y[i]/amplitude*0.25;  // > Evolution.Vibration:5
       y3[i]=y[i]/amplitude*0.25;  // > Evolution.Vibration:6
       }  // > Evolution.Vibration:7
    get_energy(x, y, vx, vy, N, k, m, r0, E, T, U);  // > Evolution.Vibration:8
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["Text"]) return;
    textA="N = "+N.toFixed(0)+  // > FixedRelations.Text:1
      "\nMode = "+modenumber.toFixed(0)+  // > FixedRelations.Text:2
      "\nGamma = "+stiffness.toFixed(2)+  // > FixedRelations.Text:3
      "\nL = "+length.toFixed(2)+  // > FixedRelations.Text:4
      "\nAmplitude = "+amplitude.toFixed(4)+  // > FixedRelations.Text:5
      "\nDensity = "+density.toFixed(1)+  // > FixedRelations.Text:6
      "\nTension = "+tension.toFixed(1)+  // > FixedRelations.Text:7
      "\nT_Predict = "+(period_predict*nperiods).toFixed(4)+  // > FixedRelations.Text:8
      "\nDelta = "+(1-t/period_predict/nperiods).toFixed(4)+  // > FixedRelations.Text:9
      "\nFrequency(Hz) = "+(nperiods/t).toFixed(4)  // > FixedRelations.Text:10
    ;  // > FixedRelations.Text:11
    textB = "Time = "+t.toFixed(4)+  // > FixedRelations.Text:12
      "\nEnergy = "+T+" + "+U+" = "+E;  // > FixedRelations.Text:13
    ;  // > FixedRelations.Text:14
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PICUP_string_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["Euler Cromer","Euler","Euler Velocity Half","rk2"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Euler Cromer","Euler","Euler Velocity Half","rk2"]
  if (option == "Euler Cromer"){box =2;}
  else if (option == "Euler"){box = 1;}
  else if (option == "Euler Velocity Half"){box = 3;}
  //else if (option == "rk2"){box = 4;}
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.fieldN.linkProperty("Value",  function() { return N; }, function(_v) { N = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldN'
          _view.fieldN.setAction("OnChange", function(_data,_info) {
  if (N<10){N=10;}
  N = Math.round(N);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'fieldN'
          _view.fieldN.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldN'
          _view.mn.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'mn'
          _view.fieldmode.linkProperty("Value",  function() { return modenumber; }, function(_v) { modenumber = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldmode'
          _view.fieldmode.setAction("OnChange", function(_data,_info) {
  if (modenumber<1){modenumber=1;}
  modenumber = Math.round(modenumber);
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'fieldmode'
          _view.fieldmode.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldmode'
          _view.deltatime.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'deltatime'
          _view.fielddt.linkProperty("Value",  function() { return dt; }, function(_v) { dt = _v; } ); // HtmlView Page linking property 'Value' for element 'fielddt'
          _view.fielddt.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'fielddt'
          _view.fielddt.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fielddt'
          _view.Amp.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Amp'
          _view.fieldA.linkProperty("Value",  function() { return amplitude; }, function(_v) { amplitude = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldA'
          _view.fieldA.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'fieldA'
          _view.fieldA.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldA'
          _view.Stiffness.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Stiffness'
          _view.fieldS.linkProperty("Value",  function() { return stiffness; }, function(_v) { stiffness = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldS'
          _view.fieldS.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'fieldS'
          _view.fieldS.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldS'
          _view.density.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'density'
          _view.fieldD.linkProperty("Value",  function() { return density; }, function(_v) { density = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldD'
          _view.fieldD.setAction("OnChange", function(_data,_info) {
  if (density<1){density=1;}
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'fieldD'
          _view.fieldD.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldD'
          _view.length.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'length'
          _view.fieldL.linkProperty("Value",  function() { return length; }, function(_v) { length = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldL'
          _view.fieldL.setAction("OnChange", function(_data,_info) {
  if (length<0.5){length=0.5;}
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'fieldL'
          _view.fieldL.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldL'
          _view.tension.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'tension'
          _view.fieldTension.linkProperty("Value",  function() { return tension; }, function(_v) { tension = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldTension'
          _view.fieldTension.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fieldTension'
          _view.fieldTension.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldTension'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.plottingPanel.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return textA; }, function(_v) { textA = _v; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return x[N]; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return textB; }, function(_v) { textB = _v; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.VibrationRed.linkProperty("NumberOfElements",  function() { return N+1; } ); // HtmlView Page linking property 'NumberOfElements' for element 'VibrationRed'
          _view.VibrationRed.linkProperty("SizeX",  function() { return length/N/3; } ); // HtmlView Page linking property 'SizeX' for element 'VibrationRed'
          _view.VibrationRed.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'VibrationRed'
          _view.VibrationRed.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'VibrationRed'
          _view.VibrationBlue.linkProperty("NumberOfElements",  function() { return N+1; } ); // HtmlView Page linking property 'NumberOfElements' for element 'VibrationBlue'
          _view.VibrationBlue.linkProperty("SizeX",  function() { return length/N/3; } ); // HtmlView Page linking property 'SizeX' for element 'VibrationBlue'
          _view.VibrationBlue.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'VibrationBlue'
          _view.VibrationBlue.linkProperty("SizeY",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'VibrationBlue'
          _view.Monitor.linkProperty("SizeX",  function() { return length/N; } ); // HtmlView Page linking property 'SizeX' for element 'Monitor'
          _view.Monitor.linkProperty("X",  function() { return x[monitornode]; } ); // HtmlView Page linking property 'X' for element 'Monitor'
          _view.Monitor.linkProperty("Y",  function() { return y[monitornode]; } ); // HtmlView Page linking property 'Y' for element 'Monitor'
          _view.Monitor.linkProperty("SizeY",  function() { return length/N; } ); // HtmlView Page linking property 'SizeY' for element 'Monitor'
          _view.String.linkProperty("NumberOfElements",  function() { return N+1; } ); // HtmlView Page linking property 'NumberOfElements' for element 'String'
          _view.String.linkProperty("SizeX",  function() { return length/N/3; } ); // HtmlView Page linking property 'SizeX' for element 'String'
          _view.String.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'String'
          _view.String.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'String'
          _view.String.linkProperty("SizeY",  function() { return length/N/3; } ); // HtmlView Page linking property 'SizeY' for element 'String'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PICUP_string_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PICUP_string_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./PICUP_string_frem_Intro_1.html');
  _view._addDescriptionPage('string.c','./PICUP_string_frem_Intro_2.html');
  _view._addDescriptionPage('Part 1','./PICUP_string_frem_Intro_3.html');
  _view._addDescriptionPage('Part 2','./PICUP_string_frem_Intro_4.html');
  _view._addDescriptionPage('Part 3','./PICUP_string_frem_Intro_5.html');
  _view._addDescriptionPage('Part 4','./PICUP_string_frem_Intro_6.html');
  _view._addDescriptionPage('Part 5','./PICUP_string_frem_Intro_7.html');
  _view._addDescriptionPage('Part 6','./PICUP_string_frem_Intro_8.html');

  return _view;
} // end of main function

function PICUP_string_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"N", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'N'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'N'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'N'
      .setProperty("Text","N") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'N'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldN", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldN'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldN'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldN'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldN'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"mn", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mn'
      .setProperty("Background","Pink") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'mn'
      .setProperty("Tooltip","Mode Number") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'mn'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'mn'
      .setProperty("Text","Mode") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'mn'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldmode", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldmode'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldmode'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldmode'
      .setProperty("Foreground","pink") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldmode'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"deltatime", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'deltatime'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'deltatime'
      .setProperty("Tooltip","dt") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'deltatime'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'deltatime'
      .setProperty("Text","dt") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'deltatime'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'deltatime'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fielddt", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fielddt'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fielddt'
      .setProperty("Format","0e0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fielddt'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fielddt'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'fielddt'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Amp", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Amp'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Amp'
      .setProperty("Tooltip","Amplituide") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Amp'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Amp'
      .setProperty("Text","A") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Amp'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldA", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldA'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldA'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldA'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Stiffness", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Stiffness'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Stiffness'
      .setProperty("Tooltip","Stiffness") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Stiffness'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Stiffness'
      .setProperty("Text","Stiffness") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Stiffness'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldS", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldS'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldS'
      .setProperty("Format","0.000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldS'
      .setProperty("Foreground","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldS'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"density", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'density'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'density'
      .setProperty("Tooltip","Density") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'density'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'density'
      .setProperty("Text","Density") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'density'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldD", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldD'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldD'
      .setProperty("Foreground","gray") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldD'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"length", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'length'
      .setProperty("Background","cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'length'
      .setProperty("Tooltip","Length") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'length'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'length'
      .setProperty("Text","L") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'length'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldL", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldL'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldL'
      .setProperty("Foreground","cyan") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldL'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"tension", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tension'
      .setProperty("Background","Black") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'tension'
      .setProperty("Tooltip","Tension") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'tension'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'tension'
      .setProperty("Text","Tension") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'tension'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldTension", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldTension'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldTension'
      .setProperty("Foreground","black") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldTension'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",0.1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",0.1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"VibrationRed", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'VibrationRed'
      .setProperty("FillColor","rgba(255,0,0,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'VibrationRed'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'VibrationRed'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"VibrationBlue", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'VibrationBlue'
      .setProperty("FillColor","rgba(0,0,255,0.2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'VibrationBlue'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'VibrationBlue'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Monitor", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Monitor'
      .setProperty("FillColor","rgba(0,255,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Monitor'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Monitor'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"String", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'String'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'String'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'String'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Lattice Elasticity, the Vibrating String, and Nonlinearity<br />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_12generalwaves/1authorlookangphoto5050.png" />
 Fremont Teng; Loo Kang Wee; based on codes by W. Freeman
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng; Loo Kang Wee; based on codes by W. Freeman.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PICUP_string_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_12generalwaves/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
