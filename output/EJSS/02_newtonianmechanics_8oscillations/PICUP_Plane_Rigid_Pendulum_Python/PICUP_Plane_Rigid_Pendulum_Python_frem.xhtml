<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Plane Rigid Pendulum</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function PICUP_Plane_Rigid_Pendulum_Python_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var g; // EjsS Model.Variables.Parameters.g
  var m; // EjsS Model.Variables.Parameters.m
  var l; // EjsS Model.Variables.Parameters.l
  var b; // EjsS Model.Variables.Parameters.b
  var omega; // EjsS Model.Variables.Parameters.omega
  var tau_d; // EjsS Model.Variables.Parameters.tau_d
  var dt; // EjsS Model.Variables.Parameters.dt
  var t_steps; // EjsS Model.Variables.Parameters.t_steps
  var theta_i; // EjsS Model.Variables.Parameters.theta_i
  var theta_dot_i; // EjsS Model.Variables.Parameters.theta_dot_i

  var time; // EjsS Model.Variables.Arrays.time
  var theta; // EjsS Model.Variables.Arrays.theta
  var theta_dot; // EjsS Model.Variables.Arrays.theta_dot
  var alpha; // EjsS Model.Variables.Arrays.alpha
  var theta_sa; // EjsS Model.Variables.Arrays.theta_sa

  var xmin; // EjsS Model.Variables.Graph.xmin
  var xmax; // EjsS Model.Variables.Graph.xmax
  var ymin; // EjsS Model.Variables.Graph.ymin
  var ymax; // EjsS Model.Variables.Graph.ymax

  var font; // EjsS Model.Variables.Display.font
  var fontb; // EjsS Model.Variables.Display.fontb
  var fonta; // EjsS Model.Variables.Display.fonta
  var box; // EjsS Model.Variables.Display.box

  var t; // EjsS Model.Variables.lookang.t
  var dtODE; // EjsS Model.Variables.lookang.dtODE
  var thetaODE; // EjsS Model.Variables.lookang.thetaODE
  var theta_dotODE; // EjsS Model.Variables.lookang.theta_dotODE
  var alphaODE; // EjsS Model.Variables.lookang.alphaODE
  var pi; // EjsS Model.Variables.lookang.pi
  var theta_saODE; // EjsS Model.Variables.lookang.theta_saODE
  var memorycolory; // EjsS Model.Variables.lookang.memorycolory
  var xlegend; // EjsS Model.Variables.lookang.xlegend
  var ylegend; // EjsS Model.Variables.lookang.ylegend
  var ylegendgroup; // EjsS Model.Variables.lookang.ylegendgroup
  var dtODEtext; // EjsS Model.Variables.lookang.dtODEtext
  var Width1; // EjsS Model.Variables.lookang.Width1
  var Width2; // EjsS Model.Variables.lookang.Width2
  var Width3; // EjsS Model.Variables.lookang.Width3
  var thetavst; // EjsS Model.Variables.lookang.thetavst
  var thetadotvst; // EjsS Model.Variables.lookang.thetadotvst
  var thetadotvstheta; // EjsS Model.Variables.lookang.thetadotvstheta
  var theta_sashow; // EjsS Model.Variables.lookang.theta_sashow

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      g : g,
      m : m,
      l : l,
      b : b,
      omega : omega,
      tau_d : tau_d,
      dt : dt,
      t_steps : t_steps,
      theta_i : theta_i,
      theta_dot_i : theta_dot_i,
      time : time,
      theta : theta,
      theta_dot : theta_dot,
      alpha : alpha,
      theta_sa : theta_sa,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      font : font,
      fontb : fontb,
      fonta : fonta,
      box : box,
      t : t,
      dtODE : dtODE,
      thetaODE : thetaODE,
      theta_dotODE : theta_dotODE,
      alphaODE : alphaODE,
      pi : pi,
      theta_saODE : theta_saODE,
      memorycolory : memorycolory,
      xlegend : xlegend,
      ylegend : ylegend,
      ylegendgroup : ylegendgroup,
      dtODEtext : dtODEtext,
      Width1 : Width1,
      Width2 : Width2,
      Width3 : Width3,
      thetavst : thetavst,
      thetadotvst : thetadotvst,
      thetadotvstheta : thetadotvstheta,
      theta_sashow : theta_sashow
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.tau_d != "undefined") tau_d = json.tau_d;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.t_steps != "undefined") t_steps = json.t_steps;
    if(typeof json.theta_i != "undefined") theta_i = json.theta_i;
    if(typeof json.theta_dot_i != "undefined") theta_dot_i = json.theta_dot_i;
    if(typeof json.time != "undefined") time = json.time;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.theta_dot != "undefined") theta_dot = json.theta_dot;
    if(typeof json.alpha != "undefined") alpha = json.alpha;
    if(typeof json.theta_sa != "undefined") theta_sa = json.theta_sa;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.box != "undefined") box = json.box;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dtODE != "undefined") dtODE = json.dtODE;
    if(typeof json.thetaODE != "undefined") thetaODE = json.thetaODE;
    if(typeof json.theta_dotODE != "undefined") theta_dotODE = json.theta_dotODE;
    if(typeof json.alphaODE != "undefined") alphaODE = json.alphaODE;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.theta_saODE != "undefined") theta_saODE = json.theta_saODE;
    if(typeof json.memorycolory != "undefined") memorycolory = json.memorycolory;
    if(typeof json.xlegend != "undefined") xlegend = json.xlegend;
    if(typeof json.ylegend != "undefined") ylegend = json.ylegend;
    if(typeof json.ylegendgroup != "undefined") ylegendgroup = json.ylegendgroup;
    if(typeof json.dtODEtext != "undefined") dtODEtext = json.dtODEtext;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Width3 != "undefined") Width3 = json.Width3;
    if(typeof json.thetavst != "undefined") thetavst = json.thetavst;
    if(typeof json.thetadotvst != "undefined") thetadotvst = json.thetadotvst;
    if(typeof json.thetadotvstheta != "undefined") thetadotvstheta = json.thetadotvstheta;
    if(typeof json.theta_sashow != "undefined") theta_sashow = json.theta_sashow;
  };

  _model._inputAndPublicParameters = ["g",  "m",  "l",  "b",  "omega",  "tau_d",  "dt",  "t_steps",  "theta_i",  "theta_dot_i",  "time",  "theta",  "theta_dot",  "alpha",  "theta_sa",  "xmin",  "xmax",  "ymin",  "ymax",  "font",  "fontb",  "fonta",  "box",  "t",  "dtODE",  "thetaODE",  "theta_dotODE",  "alphaODE",  "pi",  "theta_saODE",  "memorycolory",  "xlegend",  "ylegend",  "ylegendgroup",  "dtODEtext",  "Width1",  "Width2",  "Width3",  "thetavst",  "thetadotvst",  "thetadotvstheta",  "theta_sashow"]; 

  _model._outputAndPublicParameters = ["g",  "m",  "l",  "b",  "omega",  "tau_d",  "dt",  "t_steps",  "theta_i",  "theta_dot_i",  "time",  "theta",  "theta_dot",  "alpha",  "theta_sa",  "xmin",  "xmax",  "ymin",  "ymax",  "font",  "fontb",  "fonta",  "box",  "t",  "dtODE",  "thetaODE",  "theta_dotODE",  "alphaODE",  "pi",  "theta_saODE",  "memorycolory",  "xlegend",  "ylegend",  "ylegendgroup",  "dtODEtext",  "Width1",  "Width2",  "Width3",  "thetavst",  "thetadotvst",  "thetadotvstheta",  "theta_sashow"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["Initial"] = true;
    __pagesEnabled["Loop"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = false;
    __pagesEnabled["pause"] = true;
  });

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
    time = 0; // EjsS Model.Variables.Arrays.time
    theta = 0; // EjsS Model.Variables.Arrays.theta
    theta_dot = 0; // EjsS Model.Variables.Arrays.theta_dot
    alpha = 0; // EjsS Model.Variables.Arrays.alpha
    theta_sa = 0; // EjsS Model.Variables.Arrays.theta_sa
  });

  _model.addToReset(function() {
    xmin = 0; // EjsS Model.Variables.Graph.xmin
    xmax = 20; // EjsS Model.Variables.Graph.xmax
    ymin = -3; // EjsS Model.Variables.Graph.ymin
    ymax = 3; // EjsS Model.Variables.Graph.ymax
  });

  _model.addToReset(function() {
    font = "normal normal 1vw"; // EjsS Model.Variables.Display.font
    fontb = "normal bold 2vw"; // EjsS Model.Variables.Display.fontb
    fonta = "normal normal 1vw"; // EjsS Model.Variables.Display.fonta
    box = 1; // EjsS Model.Variables.Display.box
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.lookang.t
    dtODE = 0.05; // EjsS Model.Variables.lookang.dtODE
    thetaODE = theta_i; // EjsS Model.Variables.lookang.thetaODE
    theta_dotODE = 0; // EjsS Model.Variables.lookang.theta_dotODE
    alphaODE = 0; // EjsS Model.Variables.lookang.alphaODE
    pi = Math.PI; // EjsS Model.Variables.lookang.pi
    theta_saODE = theta_i; // EjsS Model.Variables.lookang.theta_saODE
    memorycolory = 0; // EjsS Model.Variables.lookang.memorycolory
    xlegend = 17; // EjsS Model.Variables.lookang.xlegend
    ylegend = 3; // EjsS Model.Variables.lookang.ylegend
    ylegendgroup = [0,-0.25,-0.5,-0.75]; // EjsS Model.Variables.lookang.ylegendgroup
    dtODEtext = ["dt="+dtODE]; // EjsS Model.Variables.lookang.dtODEtext
    Width1 = "100%"; // EjsS Model.Variables.lookang.Width1
    Width2 = "100%"; // EjsS Model.Variables.lookang.Width2
    Width3 = "100%"; // EjsS Model.Variables.lookang.Width3
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //Sets Full Screen  // > CustomCode.fullscreen:1
  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:2
  // does not work for iOS   // > CustomCode.fullscreen:3
  /*jslint browser:true */  // > CustomCode.fullscreen:4
  function toggleFullScreen() {  // > CustomCode.fullscreen:5
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:6
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:7
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:8
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:9
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:10
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:11
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:12
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:13
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:14
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:15
      }  // > CustomCode.fullscreen:16
    } else {  // > CustomCode.fullscreen:17
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:18
        document.exitFullscreen();  // > CustomCode.fullscreen:19
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:20
        document.msExitFullscreen();  // > CustomCode.fullscreen:21
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:22
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:23
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:24
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:25
      }  // > CustomCode.fullscreen:26
    }  // > CustomCode.fullscreen:27
  }  // > CustomCode.fullscreen:28

  function mainloop () {  // > CustomCode.mainloop:1
  // Main loop: Euler algorithm, euler-Cromer, and evaluation of exact solutions for v and y  // > CustomCode.mainloop:2
  for (var i =2; i<t_steps; i++){  // > CustomCode.mainloop:3
      time[i] = time[i-1] + dt;  // > CustomCode.mainloop:4
      if (time[i] >xmax ) { break; }//frem: break if time>xmax  // > CustomCode.mainloop:5
      // Euler-Cromer  // > CustomCode.mainloop:6
      theta_dot[i]=theta_dot[i-1]+alpha[i-1]*dt; //angular velocity  // > CustomCode.mainloop:7
      theta[i]=theta[i-1]+theta_dot[i]*dt; //angular displacement  // > CustomCode.mainloop:8
      alpha[i]=-2*g*Math.sin(theta[i])/l-4*b*theta_dot[i]/(m*l*l)+4*tau_d*Math.cos(omega*time[i])/(m*l*l);// angular acceleration  // > CustomCode.mainloop:9
      // small angle approximation  // > CustomCode.mainloop:10
     // theta_sa[i]=theta_i*Math.cos(Math.sqrt(2*g/l)*time[i]);   //error in original code  // > CustomCode.mainloop:11
      theta_sa[i]=theta_i*Math.cos(Math.sqrt(2*g/l)*time[i]);     // > CustomCode.mainloop:12
      // constrain theta between -pi and +pi       // > CustomCode.mainloop:13
      if (theta[i] > 3.14159265){  // > CustomCode.mainloop:14
           theta[i]=theta[i]-2*3.14159265;  // > CustomCode.mainloop:15
           }  // > CustomCode.mainloop:16
      else if (theta[i] < -3.14159265){  // > CustomCode.mainloop:17
           theta[i]=theta[i]+2*3.14159265;  // > CustomCode.mainloop:18
           }  // > CustomCode.mainloop:19
      else{  // > CustomCode.mainloop:20
           theta[i]=theta[i];  // > CustomCode.mainloop:21
           }  // > CustomCode.mainloop:22
           }  // > CustomCode.mainloop:23
  }  // > CustomCode.mainloop:24

  function initialvalues () {  // > CustomCode.initialvalues:1
  //Input parameters for model  // > CustomCode.initialvalues:2
  //see  Variables -Parameters page  // > CustomCode.initialvalues:3
  /* Defines the 1D arrays to be used in the computation and  // > CustomCode.initialvalues:4
   sets all values in the arrays to zero*/  // > CustomCode.initialvalues:5
  // time = np.zeros(t_steps)  // > CustomCode.initialvalues:6
  //theta = np.zeros(t_steps)  // > CustomCode.initialvalues:7
  //theta_dot = np.zeros(t_steps)  // > CustomCode.initialvalues:8
  //alpha = np.zeros(t_steps)  // > CustomCode.initialvalues:9
  //theta_sa = np.zeros(t_steps)  // > CustomCode.initialvalues:10
  time = new Array(t_steps).fill(0);  // > CustomCode.initialvalues:11
  theta = new Array(t_steps).fill(0);  // > CustomCode.initialvalues:12
  theta_dot = new Array(t_steps).fill(0);  // > CustomCode.initialvalues:13
  alpha = new Array(t_steps).fill(0);  // > CustomCode.initialvalues:14
  theta_sa = new Array(t_steps).fill(0);  // > CustomCode.initialvalues:15
  // Initial conditions  // > CustomCode.initialvalues:16
  //time[1] = 0  // > CustomCode.initialvalues:17
  //theta[1] = theta_i  // > CustomCode.initialvalues:18
  //theta_dot[1] = theta_dot_i  // > CustomCode.initialvalues:19
  //theta_sa[1] = theta_i*np.cos(np.sqrt(2*g/l)*time[1])  // > CustomCode.initialvalues:20
  //alpha[1] = -2*g*np.sin(theta[1])/l-4*b*theta_dot[1]/(m*l*l)+4*tau_d*np.cos(omega*time[1])/(m*l*l)  // > CustomCode.initialvalues:21
  time[1] = 0;  // > CustomCode.initialvalues:22
  theta[1] = theta_i;  // > CustomCode.initialvalues:23
  thetaODE = theta_i; // for ODE  // > CustomCode.initialvalues:24
  theta_dot[1] = theta_dot_i;  // > CustomCode.initialvalues:25
  theta_dotODE = theta_dot_i; // for ODE  // > CustomCode.initialvalues:26
  theta_sa[1] = theta_i*Math.cos(Math.sqrt(2*g/l)*time[1]);  // > CustomCode.initialvalues:27
  alpha[1] = -2*g*Math.sin(theta[1])/l-4*b*theta_dot[1]/(m*l*l)+4*tau_d*Math.cos(omega*time[1])/(m*l*l);  // > CustomCode.initialvalues:28
  }  // > CustomCode.initialvalues:29

  function storedata () {  // > CustomCode.storedata:1
    _view.trail.newSegment();  // > CustomCode.storedata:2
     _view.trail2.newSegment();  // > CustomCode.storedata:3
      _view.trail3.newSegment();  // > CustomCode.storedata:4
    memorycolory=memorycolory+1;  // > CustomCode.storedata:5
    t=0;  // > CustomCode.storedata:6
    thetaODE=theta_i;  // > CustomCode.storedata:7
    theta_dotODE=theta_dot_i;  // > CustomCode.storedata:8
    dtODEtext[memorycolory]= "dt="+dtODE;  // > CustomCode.storedata:9
  }  // > CustomCode.storedata:10

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (g==undefined){ g=9.8;} // make input field remember values after reset  // > Initialization.undefined:1
    if (m==undefined){ m=1;}  // > Initialization.undefined:2
    if (l==undefined){ l=1;}  // > Initialization.undefined:3
    if (b==undefined){ b=0;}  // > Initialization.undefined:4
    if (omega==undefined){ omega=0;}  // > Initialization.undefined:5
    if (tau_d==undefined){ tau_d=0;}  // > Initialization.undefined:6
    if (dt==undefined){ dt=0.05;}  // > Initialization.undefined:7
    if (t_steps==undefined){ t_steps=2000;}  // > Initialization.undefined:8
    if (theta_i==undefined){ theta_i=120*3.14159/180;}  // > Initialization.undefined:9
    if (theta_dot_i==undefined){ theta_dot_i=0;}  // > Initialization.undefined:10
    if (theta_sashow==undefined){ theta_sashow=false;}  // > Initialization.undefined:11
    //undefined ODE stuff  // > Initialization.undefined:12
    // graph stuff  // > Initialization.undefined:13
    if (thetavst==undefined){ thetavst=true;}  // > Initialization.undefined:14
    if (thetadotvst==undefined){ thetadotvst=true;}  // > Initialization.undefined:15
    if (thetadotvstheta==undefined){ thetadotvstheta=true;}  // > Initialization.undefined:16
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Initial"]) return;
    initialvalues ();  // > Initialization.Initial:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Loop"]) return;
    mainloop ();  // > Initialization.Loop:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    //_view.plottingPanel.getAxisY().setPosition([0.045,0]);  // > Initialization.axes:3
    //_view.plottingPanel.getTitleY().setPosition([0.130,0.85]);  // > Initialization.axes:4
    _view.plottingPanel2.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:5
    _view.plottingPanel2.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:6
    _view.plottingPanel3.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:7
    _view.plottingPanel3.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:8
    _view.plottingPanel3.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:9
    _view.plottingPanel3.getTitleY().setPosition([0.50,0.85]);  // > Initialization.axes:10
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    if (thetaODE > 3.14159265){ //keep between pi and -pi  // > FixedRelations.FixRel Page:1
             thetaODE=thetaODE-2*3.14159265;  // > FixedRelations.FixRel Page:2
             }  // > FixedRelations.FixRel Page:3
        else if (thetaODE < -3.14159265){  // > FixedRelations.FixRel Page:4
             thetaODE=thetaODE+2*3.14159265;  // > FixedRelations.FixRel Page:5
             }  // > FixedRelations.FixRel Page:6
               // > FixedRelations.FixRel Page:7
               // > FixedRelations.FixRel Page:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["pause"]) return;
    if (t>=20)_pause();  // > FixedRelations.pause:1
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.eulerRichardson;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["thetaODE","theta_dotODE","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dtODE);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=thetaODE) __mustReinitialize = true;
        __state[__cIn++] = thetaODE;
        if (__state[__cIn]!=theta_dotODE) __mustReinitialize = true;
        __state[__cIn++] = theta_dotODE;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dtODE===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dtODE);
      __eventSolver.setInternalStepSize(dtODE);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        thetaODE = __state[__cOut++];
        theta_dotODE = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var thetaODE = _aState[__cOut++];
        var theta_dotODE = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = theta_dotODE; // Rate for ODE: Evol Page:thetaODE
        _aRate[__cRate++] = -2*g*Math.sin(thetaODE)/l-4*b*theta_dotODE/(m*l*l)+4*tau_d*Math.cos(omega*t)/(m*l*l); // Rate for ODE: Evol Page:theta_dotODE
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var thetaODE = _aState[__cOut++];
        var theta_dotODE = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        thetaODE = __state[__cOut++];
        theta_dotODE = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = thetaODE;
        __state[__cIn++] = theta_dotODE;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_thetaODE(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_theta_dotODE(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new PICUP_Plane_Rigid_Pendulum_Python_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["Pendulum","Others","","","show ≈ solution","hide ≈ solution","Position Time","Velocity Time","Phase Space","both","both2"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Pendulum","Time","Others"]
  if (option == "Pendulum"){box =1;}
  else if (option == "Time"){box = 2;}
  else if (option == "Others"){box = 3;}
  //"show ≈ solution","hide ≈ solution"
  else if(option == "show ≈ solution"){
    theta_sashow=true;
    }
    else if(option == "hide ≈ solution"){
    theta_sashow=false;
    }
  else if(option == "Position Time"){
    Width1="100%";
    thetavst=true;
    thetadotvstheta=false;
    thetadotvstheta=false;
    }
    //"Velocity Time"
    else if(option == "Velocity Time"){
    Width2="100%";
    thetavst=false;
    thetadotvst=true;
    thetadotvstheta=false;
    }
    else if(option == "Phase Space"){
    Width3="100%";
    thetavst=false;
    thetadotvst=false;
      thetadotvstheta=true;
    }
  else if(option == "both"){
    Width1="50%";
    Width2="50%";
    thetavst=true;
    thetadotvst=true;
      thetadotvstheta=false;
      
    }
    else if(option == "both2"){
    Width1="50%";
    Width3="50%";
    thetavst=true;
     thetadotvst=false;
      thetadotvstheta=true;
    }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.Mass.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Mass'
          _view.Massfield.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'Massfield'
          _view.Massfield.setAction("OnChange", function(_data,_info) {
  if (m<0.1){m=0.1;}
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'Massfield'
          _view.Massfield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Massfield'
          _view.Massfield.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Massfield'
          _view.Length.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'Length'
          _view.lengthfield.linkProperty("Value",  function() { return l; }, function(_v) { l = _v; } ); // HtmlView Page linking property 'Value' for element 'lengthfield'
          _view.lengthfield.setAction("OnChange", function(_data,_info) {
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'lengthfield'
          _view.lengthfield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'lengthfield'
          _view.lengthfield.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'lengthfield'
          _view.blabel.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'blabel'
          _view.fieldb.linkProperty("Value",  function() { return b; }, function(_v) { b = _v; } ); // HtmlView Page linking property 'Value' for element 'fieldb'
          _view.fieldb.setAction("OnChange", function(_data,_info) {
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'fieldb'
          _view.fieldb.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fieldb'
          _view.fieldb.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'fieldb'
          _view.timelabel.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'timelabel'
          _view.dtfield.linkProperty("Value",  function() { return dt; }, function(_v) { dt = _v; } ); // HtmlView Page linking property 'Value' for element 'dtfield'
          _view.dtfield.setAction("OnChange", function(_data,_info) {
  dtODE=dt; //sync ODE with original line
  //_initialize();
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'dtfield'
          _view.dtfield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'dtfield'
          _view.dtfield.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'dtfield'
          _view.tstepsfield.linkProperty("Value",  function() { return t_steps; }, function(_v) { t_steps = _v; } ); // HtmlView Page linking property 'Value' for element 'tstepsfield'
          _view.tstepsfield.setAction("OnChange", function(_data,_info) {
  if (t_steps<2){t_steps=2;}
  if (t_steps>20000){t_steps=20000;}
  t_steps= Math.round(t_steps);
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'tstepsfield'
          _view.tstepsfield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'tstepsfield'
          _view.glabel.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'glabel'
          _view.gfield.linkProperty("Value",  function() { return g; }, function(_v) { g = _v; } ); // HtmlView Page linking property 'Value' for element 'gfield'
          _view.gfield.setAction("OnChange", function(_data,_info) {
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'gfield'
          _view.gfield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'gfield'
          _view.gfield.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'gfield'
          _view.theta4.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'theta4'
          _view.theta4.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'theta4'
          _view.thetafield2.linkProperty("Value",  function() { return theta_i; }, function(_v) { theta_i = _v; } ); // HtmlView Page linking property 'Value' for element 'thetafield2'
          _view.thetafield2.setAction("OnChange", function(_data,_info) {
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'thetafield2'
          _view.thetafield2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'thetafield2'
          _view.thetafield2.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'thetafield2'
          _view.omega.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'omega'
          _view.omega.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'omega'
          _view.omegafield.linkProperty("Value",  function() { return theta_dot_i; }, function(_v) { theta_dot_i = _v; } ); // HtmlView Page linking property 'Value' for element 'omegafield'
          _view.omegafield.setAction("OnChange", function(_data,_info) {
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'omegafield'
          _view.omegafield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'omegafield'
          _view.omegafield.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'omegafield'
          _view.torque.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'torque'
          _view.torque.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'torque'
          _view.torquefield.linkProperty("Value",  function() { return tau_d; }, function(_v) { tau_d = _v; } ); // HtmlView Page linking property 'Value' for element 'torquefield'
          _view.torquefield.setAction("OnChange", function(_data,_info) {
  mainloop ();
  storedata();

}); // HtmlView Page setting action 'OnChange' for element 'torquefield'
          _view.torquefield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'torquefield'
          _view.torquefield.linkProperty("Display",  function() { return box==1?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'torquefield'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.initialize.setAction("OnClick", function(_data,_info) {
  storedata();

}); // HtmlView Page setting action 'OnClick' for element 'initialize'
          _view.initialize.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'initialize'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("YTickStep",  function() { return pi/6; } ); // HtmlView Page linking property 'YTickStep' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "dtODE="+dtODE; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return "t="+t.toExponential(2)+"s"; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Display",  function() { return thetavst?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanel'
          _view.theta_sa.linkProperty("Maximum",  function() { return t_steps; }, function(_v) { t_steps = _v; } ); // HtmlView Page linking property 'Maximum' for element 'theta_sa'
          _view.theta_sa.linkProperty("InputX",  function() { return time; }, function(_v) { time = _v; } ); // HtmlView Page linking property 'InputX' for element 'theta_sa'
          _view.theta_sa.linkProperty("Visibility",  function() { return theta_sashow; }, function(_v) { theta_sashow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theta_sa'
          _view.theta_sa.linkProperty("InputY",  function() { return theta_sa; }, function(_v) { theta_sa = _v; } ); // HtmlView Page linking property 'InputY' for element 'theta_sa'
          _view.analyticCurvesmallangleapproximation.linkProperty("FunctionY",  function() { return theta_i+"*cos(sqrt(2*"+g+"/"+l+")*t)"; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurvesmallangleapproximation'
          _view.analyticCurvesmallangleapproximation.linkProperty("Visibility",  function() { return theta_sashow; }, function(_v) { theta_sashow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'analyticCurvesmallangleapproximation'
          _view.theta.linkProperty("Maximum",  function() { return t_steps; }, function(_v) { t_steps = _v; } ); // HtmlView Page linking property 'Maximum' for element 'theta'
          _view.theta.linkProperty("Active",  function() { return t>=0; } ); // HtmlView Page linking property 'Active' for element 'theta'
          _view.theta.linkProperty("InputX",  function() { return time; }, function(_v) { time = _v; } ); // HtmlView Page linking property 'InputX' for element 'theta'
          _view.theta.linkProperty("InputY",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'InputY' for element 'theta'
          _view.trace.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trace'
          _view.trace.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return thetaODE; }, function(_v) { thetaODE = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace'
          _view.trail.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return t>0&&thetaODE<pi&&thetaODE>-pi; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("LineColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return thetaODE; }, function(_v) { thetaODE = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.shapeODE.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'shapeODE'
          _view.shapeODE.linkProperty("Y",  function() { return thetaODE; }, function(_v) { thetaODE = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeODE'
          _view.group.linkProperty("X",  function() { return xlegend; }, function(_v) { xlegend = _v; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return ylegend; }, function(_v) { ylegend = _v; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.legend.linkProperty("Y",  function() { return ylegendgroup; }, function(_v) { ylegendgroup = _v; } ); // HtmlView Page linking property 'Y' for element 'legend'
          _view.textSet.linkProperty("Y",  function() { return ylegendgroup; }, function(_v) { ylegendgroup = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return dtODEtext; }, function(_v) { dtODEtext = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.plottingPanel2.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel2'
          _view.plottingPanel2.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("YTickStep",  function() { return pi/6; } ); // HtmlView Page linking property 'YTickStep' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("BRMessage",  function() { return "t="+t.toExponential(2)+"s"; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("Display",  function() { return thetadotvst?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanel2'
          _view.theta_sa3.linkProperty("Maximum",  function() { return t_steps; }, function(_v) { t_steps = _v; } ); // HtmlView Page linking property 'Maximum' for element 'theta_sa3'
          _view.theta_sa3.linkProperty("InputX",  function() { return time; }, function(_v) { time = _v; } ); // HtmlView Page linking property 'InputX' for element 'theta_sa3'
          _view.theta_sa3.linkProperty("Visibility",  function() { return theta_sashow; }, function(_v) { theta_sashow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theta_sa3'
          _view.theta_sa3.linkProperty("InputY",  function() { return theta_sa; }, function(_v) { theta_sa = _v; } ); // HtmlView Page linking property 'InputY' for element 'theta_sa3'
          _view.analyticCurvesmallangleapproximation2.linkProperty("FunctionY",  function() { return theta_i+"*cos(sqrt("+g+"/"+l+")*t)"; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurvesmallangleapproximation2'
          _view.analyticCurvesmallangleapproximation2.linkProperty("Visibility",  function() { return theta_sashow; }, function(_v) { theta_sashow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'analyticCurvesmallangleapproximation2'
          _view.theta2.linkProperty("Maximum",  function() { return t_steps-1; } ); // HtmlView Page linking property 'Maximum' for element 'theta2'
          _view.theta2.linkProperty("Active",  function() { return t>0&&t<20; } ); // HtmlView Page linking property 'Active' for element 'theta2'
          _view.theta2.linkProperty("Connected",  function() { return t>0&&t<19; } ); // HtmlView Page linking property 'Connected' for element 'theta2'
          _view.theta2.linkProperty("InputX",  function() { return time; }, function(_v) { time = _v; } ); // HtmlView Page linking property 'InputX' for element 'theta2'
          _view.theta2.linkProperty("InputY",  function() { return theta_dot; }, function(_v) { theta_dot = _v; } ); // HtmlView Page linking property 'InputY' for element 'theta2'
          _view.trace2.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trace2'
          _view.trace2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace2'
          _view.trace2.linkProperty("InputY",  function() { return theta_dotODE; }, function(_v) { theta_dotODE = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace2'
          _view.trail2.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail2'
          _view.trail2.linkProperty("Connected",  function() { return t>0&&thetaODE<pi&&thetaODE>-pi; } ); // HtmlView Page linking property 'Connected' for element 'trail2'
          _view.trail2.linkProperty("LineColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail2'
          _view.trail2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail2'
          _view.trail2.linkProperty("InputY",  function() { return theta_dotODE; }, function(_v) { theta_dotODE = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail2'
          _view.shapeODE2.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'shapeODE2'
          _view.shapeODE2.linkProperty("Y",  function() { return theta_dotODE; }, function(_v) { theta_dotODE = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeODE2'
          _view.group2.linkProperty("X",  function() { return xlegend; }, function(_v) { xlegend = _v; } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.group2.linkProperty("Y",  function() { return ylegend; }, function(_v) { ylegend = _v; } ); // HtmlView Page linking property 'Y' for element 'group2'
          _view.legend2.linkProperty("Y",  function() { return ylegendgroup; }, function(_v) { ylegendgroup = _v; } ); // HtmlView Page linking property 'Y' for element 'legend2'
          _view.textSet2.linkProperty("Y",  function() { return ylegendgroup; }, function(_v) { ylegendgroup = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet2'
          _view.textSet2.linkProperty("Text",  function() { return dtODEtext; }, function(_v) { dtODEtext = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet2'
          _view.plottingPanel3.linkProperty("Width",  function() { return Width3; }, function(_v) { Width3 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel3'
          _view.plottingPanel3.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel3'
          _view.plottingPanel3.linkProperty("XTickStep",  function() { return pi/2; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanel3'
          _view.plottingPanel3.linkProperty("YTickStep",  function() { return pi/2; } ); // HtmlView Page linking property 'YTickStep' for element 'plottingPanel3'
          _view.plottingPanel3.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'plottingPanel3'
          _view.plottingPanel3.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel3'
          _view.plottingPanel3.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'plottingPanel3'
          _view.plottingPanel3.linkProperty("BRMessage",  function() { return "t="+t.toExponential(2)+"s"; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel3'
          _view.plottingPanel3.linkProperty("Display",  function() { return thetadotvstheta?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanel3'
          _view.theta_sa23.linkProperty("Maximum",  function() { return t_steps; }, function(_v) { t_steps = _v; } ); // HtmlView Page linking property 'Maximum' for element 'theta_sa23'
          _view.theta_sa23.linkProperty("InputX",  function() { return theta_dot; }, function(_v) { theta_dot = _v; } ); // HtmlView Page linking property 'InputX' for element 'theta_sa23'
          _view.theta_sa23.linkProperty("Visibility",  function() { return theta_sashow; }, function(_v) { theta_sashow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theta_sa23'
          _view.theta_sa23.linkProperty("InputY",  function() { return theta_sa; }, function(_v) { theta_sa = _v; } ); // HtmlView Page linking property 'InputY' for element 'theta_sa23'
          _view.theta23.linkProperty("Maximum",  function() { return t_steps-1; } ); // HtmlView Page linking property 'Maximum' for element 'theta23'
          _view.theta23.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'theta23'
          _view.theta23.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'theta23'
          _view.theta23.linkProperty("InputX",  function() { return theta_dot; }, function(_v) { theta_dot = _v; } ); // HtmlView Page linking property 'InputX' for element 'theta23'
          _view.theta23.linkProperty("InputY",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'InputY' for element 'theta23'
          _view.trace23.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trace23'
          _view.trace23.linkProperty("InputX",  function() { return theta_dotODE; }, function(_v) { theta_dotODE = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace23'
          _view.trace23.linkProperty("InputY",  function() { return thetaODE; }, function(_v) { thetaODE = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace23'
          _view.trail3.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail3'
          _view.trail3.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail3'
          _view.trail3.linkProperty("LineColor",  function() { return memorycolory; }, function(_v) { memorycolory = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail3'
          _view.trail3.linkProperty("InputX",  function() { return theta_dotODE; }, function(_v) { theta_dotODE = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail3'
          _view.trail3.linkProperty("InputY",  function() { return thetaODE; }, function(_v) { thetaODE = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail3'
          _view.shapeODE23.linkProperty("X",  function() { return theta_dotODE; }, function(_v) { theta_dotODE = _v; } ); // HtmlView Page linking property 'X' for element 'shapeODE23'
          _view.shapeODE23.linkProperty("Y",  function() { return thetaODE; }, function(_v) { thetaODE = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeODE23'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function PICUP_Plane_Rigid_Pendulum_Python_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = PICUP_Plane_Rigid_Pendulum_Python_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./introduction.html');
  _view._addDescriptionPage('instructorguide','./instructorguide.html');
  _view._addDescriptionPage('theory','./Theory.html');
  _view._addDescriptionPage('exercises','./exercises.html');
  _view._addDescriptionPage('Exercise 1','./PICUP_Plane_Rigid_Pendulum_Python_frem_Intro_5.html');
  _view._addDescriptionPage('Exercise 2','./PICUP_Plane_Rigid_Pendulum_Python_frem_Intro_6.html');
  _view._addDescriptionPage('Exercise 3','./PICUP_Plane_Rigid_Pendulum_Python_frem_Intro_7.html');
  _view._addDescriptionPage('Exercise 4','./PICUP_Plane_Rigid_Pendulum_Python_frem_Intro_8.html');
  _view._addDescriptionPage('Exercise 5','./PICUP_Plane_Rigid_Pendulum_Python_frem_Intro_9.html');
  _view._addDescriptionPage('Plane_Rigid_Pendulum_Python.py','./PICUP_Plane_Rigid_Pendulum_Python_frem_Intro_10.html');
  _view._addDescriptionPage('solutions','./solutions.html');

  return _view;
} // end of main function

function PICUP_Plane_Rigid_Pendulum_Python_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Mass", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Mass'
      .setProperty("Background","blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Mass'
      .setProperty("Tooltip","mass of pendulum in kg") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Mass'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Mass'
      .setProperty("Text","m=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Mass'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Massfield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Massfield'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Massfield'
      .setProperty("Format","0.000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Massfield'
      .setProperty("Tooltip","mass of pendulum in kg") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Massfield'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Massfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Length", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Length'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Length'
      .setProperty("Tooltip","length of pendulum in meters") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Length'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Length'
      .setProperty("Text","l=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Length'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"lengthfield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lengthfield'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'lengthfield'
      .setProperty("Format","0.000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'lengthfield'
      .setProperty("Tooltip","length of pendulum in meters") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'lengthfield'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'lengthfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"blabel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'blabel'
      .setProperty("Background","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'blabel'
      .setProperty("Tooltip","damping strength (kg m²/s)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'blabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'blabel'
      .setProperty("Text","b=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'blabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"fieldb", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldb'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fieldb'
      .setProperty("Format","0.000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'fieldb'
      .setProperty("Tooltip","damping strength (kg m²/s)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fieldb'
      .setProperty("Foreground","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'fieldb'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"timelabel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'timelabel'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'timelabel'
      .setProperty("Tooltip","time step (s)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'timelabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'timelabel'
      .setProperty("Text","dt=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'timelabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"dtfield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dtfield'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'dtfield'
      .setProperty("Tooltip","time step(s)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'dtfield'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'dtfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"tstepslabel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tstepslabel'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'tstepslabel'
      .setProperty("Tooltip","total number of iterations") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'tstepslabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'tstepslabel'
      .setProperty("Text","N=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'tstepslabel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'tstepslabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"tstepsfield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tstepsfield'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'tstepsfield'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'tstepsfield'
      .setProperty("Tooltip","total number of iterations") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'tstepsfield'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'tstepsfield'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'tstepsfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"glabel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'glabel'
      .setProperty("Background","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'glabel'
      .setProperty("Tooltip","Acceleration due to gravity (m/s²)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'glabel'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'glabel'
      .setProperty("Text","g=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'glabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"gfield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gfield'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'gfield'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'gfield'
      .setProperty("Tooltip","accel due to gravity (m/s^2)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'gfield'
      .setProperty("Foreground","magenta") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'gfield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"theta4", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'theta4'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'theta4'
      .setProperty("Tooltip","initial angle in radian") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'theta4'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'theta4'
      .setProperty("Text","θ=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'theta4'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"thetafield2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thetafield2'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'thetafield2'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'thetafield2'
      .setProperty("Tooltip","initial angle") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'thetafield2'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'thetafield2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"omega", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'omega'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'omega'
      .setProperty("Tooltip","driving frequency in rad/sec") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'omega'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'omega'
      .setProperty("Text","ω=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'omega'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"omegafield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'omegafield'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'omegafield'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'omegafield'
      .setProperty("Tooltip","initial angular velocity") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'omegafield'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'omegafield'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"torque", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'torque'
      .setProperty("Background","red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'torque'
      .setProperty("Tooltip","driving torque in Nm") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'torque'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'torque'
      .setProperty("Text","𝜏=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'torque'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"torquefield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'torquefield'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'torquefield'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'torquefield'
      .setProperty("Tooltip","driving torque in Nm") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'torquefield'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'torquefield'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initialize", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initialize'
      .setProperty("Tooltip","Store Data") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initialize'
      .setProperty("Text","▼") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'initialize'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel'
      .setProperty("YScalePrecision",2) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("TRMessage","Plane Rigid Pendulum Angular position vs Time") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","Angular position vs Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("MaximumY",3.14) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("EnabledDragging","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-3.14) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("TitleY","ang. position (rad)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX",'time (s)') // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"approximate", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'approximate'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"theta_sa", _view.approximate) // EJsS HtmlView.HtmlView Page: declaration of element 'theta_sa'
      .setProperty("LineColor","orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta_sa'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'theta_sa'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta_sa'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurvesmallangleapproximation", _view.approximate) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurvesmallangleapproximation'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurvesmallangleapproximation'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurvesmallangleapproximation'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurvesmallangleapproximation'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurvesmallangleapproximation'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"theta", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'theta'
      .setProperty("Connected",true) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'theta'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'theta'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ODE", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ODE'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.ODE) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("MarkSize",[5,5]) // EJsS HtmlView.HtmlView Page: setting property 'MarkSize' for element 'trace'
      .setProperty("Connected",false) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trace'
      .setProperty("LineColor","rgba(192,192,192,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'trace'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.ODE) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapeODE", _view.ODE) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeODE'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeODE'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeODE'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeODE'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeODE'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeODE'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'shape'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape'
      .setProperty("SizeY",1.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"legend", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'legend'
      .setProperty("NumberOfElements",4) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'legend'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'legend'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'legend'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'legend'
      .setProperty("LineColor",[0,1,2,3]) // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'legend'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'legend'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'legend'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'legend'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'legend'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'legend'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("NumberOfElements",4) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'textSet'
      .setProperty("FillColor",[0,1,2,3]) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSet'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'textSet'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'textSet'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textSet'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel2'
      .setProperty("Gutters",[50,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel2'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel2'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel2'
      .setProperty("YScalePrecision",2) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel2'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel2'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel2'
      .setProperty("TRMessage","Plane Rigid Pendulum Angular velocity vs Time") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel2'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel2'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel2'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel2'
      .setProperty("Title","Angular position vs Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel2'
      .setProperty("MaximumY",8) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel2'
      .setProperty("MaximumX",20) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel2'
      .setProperty("EnabledDragging","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel2'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel2'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel2'
      .setProperty("MinimumY",-8) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel2'
      .setProperty("TitleY","ang. position (rad)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("TitleX",'time (s)') // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel2'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel2'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"approximate2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'approximate2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'approximate2'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"theta_sa3", _view.approximate2) // EJsS HtmlView.HtmlView Page: declaration of element 'theta_sa3'
      .setProperty("LineColor","orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta_sa3'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'theta_sa3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta_sa3'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurvesmallangleapproximation2", _view.approximate2) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurvesmallangleapproximation2'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurvesmallangleapproximation2'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurvesmallangleapproximation2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurvesmallangleapproximation2'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"theta2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'theta2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'theta2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"ODE2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'ODE2'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace2", _view.ODE2) // EJsS HtmlView.HtmlView Page: declaration of element 'trace2'
      .setProperty("MarkSize",[5,5]) // EJsS HtmlView.HtmlView Page: setting property 'MarkSize' for element 'trace2'
      .setProperty("Connected",false) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trace2'
      .setProperty("LineColor","rgba(192,192,192,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace2'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'trace2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail2", _view.ODE2) // EJsS HtmlView.HtmlView Page: declaration of element 'trail2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapeODE2", _view.ODE2) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeODE2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeODE2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeODE2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeODE2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeODE2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeODE2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'shape2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'shape2'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape2'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'shape2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape2'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape2'
      .setProperty("SizeY",1.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"legend2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'legend2'
      .setProperty("NumberOfElements",4) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'legend2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'legend2'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'legend2'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'legend2'
      .setProperty("LineColor",[0,1,2,3]) // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'legend2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'legend2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'legend2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'legend2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'legend2'
      .setProperty("Offset","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'legend2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet2'
      .setProperty("NumberOfElements",4) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'textSet2'
      .setProperty("FillColor",[0,1,2,3]) // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSet2'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'textSet2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'textSet2'
      .setProperty("Measured",true) // EJsS HtmlView.HtmlView Page: setting property 'Measured' for element 'textSet2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'textSet2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'textSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel3", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel3'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel3'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel3'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel3'
      .setProperty("EnabledZooming",true) // EJsS HtmlView.HtmlView Page: setting property 'EnabledZooming' for element 'plottingPanel3'
      .setProperty("YScalePrecision",2) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel3'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel3'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel3'
      .setProperty("TRMessage","Plane Rigid Pendulum Angular position vs Time") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel3'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel3'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel3'
      .setProperty("Title","Angular position vs Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel3'
      .setProperty("MaximumY",8) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel3'
      .setProperty("MaximumX",8) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel3'
      .setProperty("EnabledDragging","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledDragging' for element 'plottingPanel3'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel3'
      .setProperty("MinimumX",-8) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel3'
      .setProperty("MinimumY",-8) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel3'
      .setProperty("TitleY","ang. velocity (rad/s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel3'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel3'
      .setProperty("TitleX","ang. position (rad)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel3'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel3'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanel3'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel3'
      .setProperty("XScalePrecision",2) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel3'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"theta_sa23", _view.plottingPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'theta_sa23'
      .setProperty("LineColor","orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta_sa23'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'theta_sa23'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta_sa23'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"theta23", _view.plottingPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'theta23'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta23'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'theta23'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta23'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace23", _view.plottingPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'trace23'
      .setProperty("MarkSize",[5,5]) // EJsS HtmlView.HtmlView Page: setting property 'MarkSize' for element 'trace23'
      .setProperty("Connected",false) // EJsS HtmlView.HtmlView Page: setting property 'Connected' for element 'trace23'
      .setProperty("LineColor","rgba(192,192,192,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace23'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace23'
      .setProperty("MarkType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'trace23'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail3", _view.plottingPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'trail3'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shapeODE23", _view.plottingPanel3) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeODE23'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeODE23'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeODE23'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeODE23'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeODE23'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeODE23'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Plane Rigid Pendulum<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/PICUP_Plane_Rigid_Pendulum_Python/PICUP_Plane_Rigid_Pendulum_Python_frem/Screen Shot 2018-06-11 at 10.21.45 AM (2) copy.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/PICUP_Plane_Rigid_Pendulum_Python/1authorlookangphoto.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/PICUP_Plane_Rigid_Pendulum_Python/1authorlookangphoto.png" />
 Fremont Teng; Loo Kang Wee; based on python codes by K. Roos
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng; Loo Kang Wee; based on python codes by K. Roos.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new PICUP_Plane_Rigid_Pendulum_Python_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/PICUP_Plane_Rigid_Pendulum_Python/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
