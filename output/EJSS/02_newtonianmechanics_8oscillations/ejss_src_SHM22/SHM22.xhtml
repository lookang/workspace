<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Angular Damping Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function SHM22(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var inputdropmenu; // EjsS Model.Variables.Var Table.inputdropmenu
  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var g; // EjsS Model.Variables.Var Table.g
  var vvst; // EjsS Model.Variables.Var Table.vvst
  var avst; // EjsS Model.Variables.Var Table.avst

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var selectedview; // EjsS Model.Variables.layout.selectedview
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Width; // EjsS Model.Variables.layout.Width
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var Height; // EjsS Model.Variables.layout.Height
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var world; // EjsS Model.Variables.layout.world
  var disabled; // EjsS Model.Variables.layout.disabled

  var theta; // EjsS Model.Variables.pendulum.theta
  var thetas; // EjsS Model.Variables.pendulum.thetas
  var thetadegrees; // EjsS Model.Variables.pendulum.thetadegrees
  var piminustheta; // EjsS Model.Variables.pendulum.piminustheta
  var piminusthetas; // EjsS Model.Variables.pendulum.piminusthetas
  var piminusthetadegrees; // EjsS Model.Variables.pendulum.piminusthetadegrees
  var piminusthetadegreestore; // EjsS Model.Variables.pendulum.piminusthetadegreestore
  var thetao; // EjsS Model.Variables.pendulum.thetao
  var thetaodegrees; // EjsS Model.Variables.pendulum.thetaodegrees
  var piminusthetaodegrees; // EjsS Model.Variables.pendulum.piminusthetaodegrees
  var omega; // EjsS Model.Variables.pendulum.omega
  var omegastored; // EjsS Model.Variables.pendulum.omegastored
  var omegas; // EjsS Model.Variables.pendulum.omegas
  var omegao; // EjsS Model.Variables.pendulum.omegao
  var alpha; // EjsS Model.Variables.pendulum.alpha
  var alphas; // EjsS Model.Variables.pendulum.alphas
  var L; // EjsS Model.Variables.pendulum.L
  var xs; // EjsS Model.Variables.pendulum.xs
  var ys; // EjsS Model.Variables.pendulum.ys
  var vxs; // EjsS Model.Variables.pendulum.vxs
  var vys; // EjsS Model.Variables.pendulum.vys
  var shm; // EjsS Model.Variables.pendulum.shm

  var m; // EjsS Model.Variables.simplespring.m
  var k; // EjsS Model.Variables.simplespring.k
  var l; // EjsS Model.Variables.simplespring.l
  var x; // EjsS Model.Variables.simplespring.x
  var xo; // EjsS Model.Variables.simplespring.xo
  var y; // EjsS Model.Variables.simplespring.y
  var yo; // EjsS Model.Variables.simplespring.yo
  var ye; // EjsS Model.Variables.simplespring.ye
  var vx; // EjsS Model.Variables.simplespring.vx
  var vy; // EjsS Model.Variables.simplespring.vy
  var v; // EjsS Model.Variables.simplespring.v
  var t; // EjsS Model.Variables.simplespring.t
  var tcst; // EjsS Model.Variables.simplespring.tcst
  var X; // EjsS Model.Variables.simplespring.X
  var T; // EjsS Model.Variables.simplespring.T
  var dt; // EjsS Model.Variables.simplespring.dt
  var w; // EjsS Model.Variables.simplespring.w
  var a; // EjsS Model.Variables.simplespring.a
  var f; // EjsS Model.Variables.simplespring.f
  var pointA; // EjsS Model.Variables.simplespring.pointA
  var pointB; // EjsS Model.Variables.simplespring.pointB
  var tpointA; // EjsS Model.Variables.simplespring.tpointA
  var tpointB; // EjsS Model.Variables.simplespring.tpointB

  var b; // EjsS Model.Variables.advancedspring.b
  var amplitude; // EjsS Model.Variables.advancedspring.amplitude
  var frequency; // EjsS Model.Variables.advancedspring.frequency
  var potentialEnergy; // EjsS Model.Variables.advancedspring.potentialEnergy
  var kineticEnergy; // EjsS Model.Variables.advancedspring.kineticEnergy
  var totalEnergy; // EjsS Model.Variables.advancedspring.totalEnergy
  var afrequency; // EjsS Model.Variables.advancedspring.afrequency
  var Hertz; // EjsS Model.Variables.advancedspring.Hertz

  var n1; // EjsS Model.Variables.peroid.n1
  var nc; // EjsS Model.Variables.peroid.nc
  var numberofswing; // EjsS Model.Variables.peroid.numberofswing
  var T1; // EjsS Model.Variables.peroid.T1
  var ts; // EjsS Model.Variables.peroid.ts
  var red; // EjsS Model.Variables.peroid.red
  var green; // EjsS Model.Variables.peroid.green
  var blue; // EjsS Model.Variables.peroid.blue
  var color; // EjsS Model.Variables.peroid.color
  var memorycolor; // EjsS Model.Variables.peroid.memorycolor

  var thetamodel; // EjsS Model.Variables.functionY.thetamodel
  var selectedmodel; // EjsS Model.Variables.functionY.selectedmodel
  var xmodel; // EjsS Model.Variables.functionY.xmodel
  var ymodel; // EjsS Model.Variables.functionY.ymodel
  var showmodel; // EjsS Model.Variables.functionY.showmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var phi; // EjsS Model.Variables.functionY.phi
  var Acalculated; // EjsS Model.Variables.functionY.Acalculated
  var solutionY; // EjsS Model.Variables.functionY.solutionY

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      inputdropmenu : inputdropmenu,
      print : print,
      fontb : fontb,
      font : font,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      g : g,
      vvst : vvst,
      avst : avst,
      isAndroid : isAndroid,
      selectedview : selectedview,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Width : Width,
      Width1 : Width1,
      Width2 : Width2,
      Height : Height,
      disabledworld : disabledworld,
      world : world,
      disabled : disabled,
      theta : theta,
      thetas : thetas,
      thetadegrees : thetadegrees,
      piminustheta : piminustheta,
      piminusthetas : piminusthetas,
      piminusthetadegrees : piminusthetadegrees,
      piminusthetadegreestore : piminusthetadegreestore,
      thetao : thetao,
      thetaodegrees : thetaodegrees,
      piminusthetaodegrees : piminusthetaodegrees,
      omega : omega,
      omegastored : omegastored,
      omegas : omegas,
      omegao : omegao,
      alpha : alpha,
      alphas : alphas,
      L : L,
      xs : xs,
      ys : ys,
      vxs : vxs,
      vys : vys,
      shm : shm,
      m : m,
      k : k,
      l : l,
      x : x,
      xo : xo,
      y : y,
      yo : yo,
      ye : ye,
      vx : vx,
      vy : vy,
      v : v,
      t : t,
      tcst : tcst,
      X : X,
      T : T,
      dt : dt,
      w : w,
      a : a,
      f : f,
      pointA : pointA,
      pointB : pointB,
      tpointA : tpointA,
      tpointB : tpointB,
      b : b,
      amplitude : amplitude,
      frequency : frequency,
      potentialEnergy : potentialEnergy,
      kineticEnergy : kineticEnergy,
      totalEnergy : totalEnergy,
      afrequency : afrequency,
      Hertz : Hertz,
      n1 : n1,
      nc : nc,
      numberofswing : numberofswing,
      T1 : T1,
      ts : ts,
      red : red,
      green : green,
      blue : blue,
      color : color,
      memorycolor : memorycolor,
      thetamodel : thetamodel,
      selectedmodel : selectedmodel,
      xmodel : xmodel,
      ymodel : ymodel,
      showmodel : showmodel,
      functionY : functionY,
      phi : phi,
      Acalculated : Acalculated,
      solutionY : solutionY
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.inputdropmenu != "undefined") inputdropmenu = json.inputdropmenu;
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.thetas != "undefined") thetas = json.thetas;
    if(typeof json.thetadegrees != "undefined") thetadegrees = json.thetadegrees;
    if(typeof json.piminustheta != "undefined") piminustheta = json.piminustheta;
    if(typeof json.piminusthetas != "undefined") piminusthetas = json.piminusthetas;
    if(typeof json.piminusthetadegrees != "undefined") piminusthetadegrees = json.piminusthetadegrees;
    if(typeof json.piminusthetadegreestore != "undefined") piminusthetadegreestore = json.piminusthetadegreestore;
    if(typeof json.thetao != "undefined") thetao = json.thetao;
    if(typeof json.thetaodegrees != "undefined") thetaodegrees = json.thetaodegrees;
    if(typeof json.piminusthetaodegrees != "undefined") piminusthetaodegrees = json.piminusthetaodegrees;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.omegastored != "undefined") omegastored = json.omegastored;
    if(typeof json.omegas != "undefined") omegas = json.omegas;
    if(typeof json.omegao != "undefined") omegao = json.omegao;
    if(typeof json.alpha != "undefined") alpha = json.alpha;
    if(typeof json.alphas != "undefined") alphas = json.alphas;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.vxs != "undefined") vxs = json.vxs;
    if(typeof json.vys != "undefined") vys = json.vys;
    if(typeof json.shm != "undefined") shm = json.shm;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xo != "undefined") xo = json.xo;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.yo != "undefined") yo = json.yo;
    if(typeof json.ye != "undefined") ye = json.ye;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.tcst != "undefined") tcst = json.tcst;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.pointA != "undefined") pointA = json.pointA;
    if(typeof json.pointB != "undefined") pointB = json.pointB;
    if(typeof json.tpointA != "undefined") tpointA = json.tpointA;
    if(typeof json.tpointB != "undefined") tpointB = json.tpointB;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.amplitude != "undefined") amplitude = json.amplitude;
    if(typeof json.frequency != "undefined") frequency = json.frequency;
    if(typeof json.potentialEnergy != "undefined") potentialEnergy = json.potentialEnergy;
    if(typeof json.kineticEnergy != "undefined") kineticEnergy = json.kineticEnergy;
    if(typeof json.totalEnergy != "undefined") totalEnergy = json.totalEnergy;
    if(typeof json.afrequency != "undefined") afrequency = json.afrequency;
    if(typeof json.Hertz != "undefined") Hertz = json.Hertz;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.nc != "undefined") nc = json.nc;
    if(typeof json.numberofswing != "undefined") numberofswing = json.numberofswing;
    if(typeof json.T1 != "undefined") T1 = json.T1;
    if(typeof json.ts != "undefined") ts = json.ts;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.memorycolor != "undefined") memorycolor = json.memorycolor;
    if(typeof json.thetamodel != "undefined") thetamodel = json.thetamodel;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.ymodel != "undefined") ymodel = json.ymodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.phi != "undefined") phi = json.phi;
    if(typeof json.Acalculated != "undefined") Acalculated = json.Acalculated;
    if(typeof json.solutionY != "undefined") solutionY = json.solutionY;
  };

  _model._inputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "g",  "vvst",  "avst",  "isAndroid",  "selectedview",  "iOS",  "iPad",  "iPhone",  "Width",  "Width1",  "Width2",  "Height",  "disabledworld",  "world",  "disabled",  "theta",  "thetas",  "thetadegrees",  "piminustheta",  "piminusthetas",  "piminusthetadegrees",  "piminusthetadegreestore",  "thetao",  "thetaodegrees",  "piminusthetaodegrees",  "omega",  "omegastored",  "omegas",  "omegao",  "alpha",  "alphas",  "L",  "xs",  "ys",  "vxs",  "vys",  "shm",  "m",  "k",  "l",  "x",  "xo",  "y",  "yo",  "ye",  "vx",  "vy",  "v",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "pointA",  "pointB",  "tpointA",  "tpointB",  "b",  "amplitude",  "frequency",  "potentialEnergy",  "kineticEnergy",  "totalEnergy",  "afrequency",  "Hertz",  "n1",  "nc",  "numberofswing",  "T1",  "ts",  "red",  "green",  "blue",  "color",  "memorycolor",  "thetamodel",  "selectedmodel",  "xmodel",  "ymodel",  "showmodel",  "functionY",  "phi",  "Acalculated",  "solutionY"]; 

  _model._outputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "g",  "vvst",  "avst",  "isAndroid",  "selectedview",  "iOS",  "iPad",  "iPhone",  "Width",  "Width1",  "Width2",  "Height",  "disabledworld",  "world",  "disabled",  "theta",  "thetas",  "thetadegrees",  "piminustheta",  "piminusthetas",  "piminusthetadegrees",  "piminusthetadegreestore",  "thetao",  "thetaodegrees",  "piminusthetaodegrees",  "omega",  "omegastored",  "omegas",  "omegao",  "alpha",  "alphas",  "L",  "xs",  "ys",  "vxs",  "vys",  "shm",  "m",  "k",  "l",  "x",  "xo",  "y",  "yo",  "ye",  "vx",  "vy",  "v",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "pointA",  "pointB",  "tpointA",  "tpointB",  "b",  "amplitude",  "frequency",  "potentialEnergy",  "kineticEnergy",  "totalEnergy",  "afrequency",  "Hertz",  "n1",  "nc",  "numberofswing",  "T1",  "ts",  "red",  "green",  "blue",  "color",  "memorycolor",  "thetamodel",  "selectedmodel",  "xmodel",  "ymodel",  "showmodel",  "functionY",  "phi",  "Acalculated",  "solutionY"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["functionY"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["FixRel Page 2"] = true;
    __pagesEnabled["axes"] = true;
  });

  _model.addToReset(function() {
    inputdropmenu = true; // EjsS Model.Variables.Var Table.inputdropmenu
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 1vw "; // EjsS Model.Variables.Var Table.font
    xmin = -1; // EjsS Model.Variables.Var Table.xmin
    xmax = 1; // EjsS Model.Variables.Var Table.xmax
    ymin = 0; // EjsS Model.Variables.Var Table.ymin
    ymax = 1; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "no_damping,b=0.0";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "select dropdown menu and click play"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    g = 9.81; // EjsS Model.Variables.Var Table.g
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    selectedview = new Array(1); // EjsS Model.Variables.layout.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview
        selectedview[_i0] = "both";  // EjsS Model.Variables.layout.selectedview
      }
    }());
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    world = true; // EjsS Model.Variables.layout.world
  });

  _model.addToReset(function() {
    theta = -pi/180*52; // EjsS Model.Variables.pendulum.theta
    thetas = theta; // EjsS Model.Variables.pendulum.thetas
    thetadegrees = theta*180/pi; // EjsS Model.Variables.pendulum.thetadegrees
    piminustheta = 0; // EjsS Model.Variables.pendulum.piminustheta
    piminusthetas = 0; // EjsS Model.Variables.pendulum.piminusthetas
    piminusthetadegrees = -52; // EjsS Model.Variables.pendulum.piminusthetadegrees
    piminusthetadegreestore = piminusthetadegrees; // EjsS Model.Variables.pendulum.piminusthetadegreestore
    thetao = 0; // EjsS Model.Variables.pendulum.thetao
    thetaodegrees = thetao*180/pi; // EjsS Model.Variables.pendulum.thetaodegrees
    piminusthetaodegrees = 0; // EjsS Model.Variables.pendulum.piminusthetaodegrees
    omega = 0; // EjsS Model.Variables.pendulum.omega
    omegastored = 0; // EjsS Model.Variables.pendulum.omegastored
    omegas = 0; // EjsS Model.Variables.pendulum.omegas
    omegao = 0; // EjsS Model.Variables.pendulum.omegao
    alpha = 0; // EjsS Model.Variables.pendulum.alpha
    alphas = 0; // EjsS Model.Variables.pendulum.alphas
    L = 1; // EjsS Model.Variables.pendulum.L
    xs = 0; // EjsS Model.Variables.pendulum.xs
    ys = 0; // EjsS Model.Variables.pendulum.ys
    vxs = 0; // EjsS Model.Variables.pendulum.vxs
    vys = 0; // EjsS Model.Variables.pendulum.vys
  });

  _model.addToReset(function() {
    m = 1; // EjsS Model.Variables.simplespring.m
    k = 1; // EjsS Model.Variables.simplespring.k
    l = 0; // EjsS Model.Variables.simplespring.l
    x = L*Math.sin(theta); // EjsS Model.Variables.simplespring.x
    xo = 0; // EjsS Model.Variables.simplespring.xo
    y = L*Math.cos(theta); // EjsS Model.Variables.simplespring.y
    yo = 0; // EjsS Model.Variables.simplespring.yo
    ye = -g*m/k; // EjsS Model.Variables.simplespring.ye
    vx = 0; // EjsS Model.Variables.simplespring.vx
    vy = 0; // EjsS Model.Variables.simplespring.vy
    v = 0; // EjsS Model.Variables.simplespring.v
    t = 0; // EjsS Model.Variables.simplespring.t
    X = x-l; // EjsS Model.Variables.simplespring.X
    T = 2*pi*Math.sqrt(m/k); // EjsS Model.Variables.simplespring.T
    dt = T/100; // EjsS Model.Variables.simplespring.dt
    w = 2*pi/T; // EjsS Model.Variables.simplespring.w
    a = -w^2*x; // EjsS Model.Variables.simplespring.a
    pointA = 0; // EjsS Model.Variables.simplespring.pointA
    pointB = 0; // EjsS Model.Variables.simplespring.pointB
    tpointA = 0; // EjsS Model.Variables.simplespring.tpointA
    tpointB = 0; // EjsS Model.Variables.simplespring.tpointB
  });

  _model.addToReset(function() {
    b = 0.0; // EjsS Model.Variables.advancedspring.b
    amplitude = 0.5; // EjsS Model.Variables.advancedspring.amplitude
    frequency = 0; // EjsS Model.Variables.advancedspring.frequency
    potentialEnergy = 0; // EjsS Model.Variables.advancedspring.potentialEnergy
    kineticEnergy = 0; // EjsS Model.Variables.advancedspring.kineticEnergy
    totalEnergy = 0; // EjsS Model.Variables.advancedspring.totalEnergy
    afrequency = 0; // EjsS Model.Variables.advancedspring.afrequency
    Hertz = 0; // EjsS Model.Variables.advancedspring.Hertz
  });

  _model.addToReset(function() {
    n1 = 0; // EjsS Model.Variables.peroid.n1
    nc = 0; // EjsS Model.Variables.peroid.nc
    numberofswing = 0; // EjsS Model.Variables.peroid.numberofswing
    T1 = new Array(100); // EjsS Model.Variables.peroid.T1
    (function () {
      var _i0;
      for (_i0=0; _i0<100; _i0+=1) {  // EjsS Model.Variables.peroid.T1
        T1[_i0] = 0;  // EjsS Model.Variables.peroid.T1
      }
    }());
    ts = 0; // EjsS Model.Variables.peroid.ts
    red = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.peroid.red
    green = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.peroid.green
    blue = Math.floor((Math.random()*255)+1); // EjsS Model.Variables.peroid.blue
    color = "rgba(%red%,%green%,%blue%,255)"; // EjsS Model.Variables.peroid.color
    memorycolor = 0; // EjsS Model.Variables.peroid.memorycolor
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.functionY.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.functionY.selectedmodel
        selectedmodel[_i0] = "0";  // EjsS Model.Variables.functionY.selectedmodel
      }
    }());
    xmodel = 0; // EjsS Model.Variables.functionY.xmodel
    ymodel = 0; // EjsS Model.Variables.functionY.ymodel
    functionY = "0"; // EjsS Model.Variables.functionY.functionY
    phi = Math.atan(-(w*y)/vys); // EjsS Model.Variables.functionY.phi
    Acalculated = Math.sqrt(ys*ys+vys/(w)*vys/(w)); // EjsS Model.Variables.functionY.Acalculated
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function externalForce (time) {  // > CustomCode.Lib Page:1
  return amplitude * Math.sin(2*pi*Hertz *time);  // > CustomCode.Lib Page:2
  }  // > CustomCode.Lib Page:3

  function newPositiono () {  // > CustomCode.newPositiono:1
    //lentgh is constant  // > CustomCode.newPositiono:2
    if ( L<0.5 ) {  // > CustomCode.newPositiono:3
    L=0.5;  // > CustomCode.newPositiono:4
  }  // > CustomCode.newPositiono:5
    thetao=Math.atan2(xo,yo);  // > CustomCode.newPositiono:6
  //  x1=x;  // > CustomCode.newPositiono:7
  // omega=0.0;  // > CustomCode.newPositiono:8
  //  vx=0.0;  // > CustomCode.newPositiono:9
   // vy=0.0;  // > CustomCode.newPositiono:10
  //  t=0.0;  // > CustomCode.newPositiono:11
   // scale=g*(y+L)/2+2;  // > CustomCode.newPositiono:12
    //_view.resetTraces();  // > CustomCode.newPositiono:13
  }  // > CustomCode.newPositiono:14

  function newPosition () {  // > CustomCode.newPosition:1
    //lentgh is constant  // > CustomCode.newPosition:2
    if ( L<0.5 ) {  // > CustomCode.newPosition:3
    L=0.5;  // > CustomCode.newPosition:4
  }  // > CustomCode.newPosition:5
    theta=Math.atan2(x,y);  // > CustomCode.newPosition:6
  //  x1=x;  // > CustomCode.newPosition:7
    omega=0.0;  // > CustomCode.newPosition:8
  //  vx=0.0;  // > CustomCode.newPosition:9
   // vy=0.0;  // > CustomCode.newPosition:10
    t=0.0;  // > CustomCode.newPosition:11
   // scale=g*(y+L)/2+2;  // > CustomCode.newPosition:12
    //_view.resetTraces();  // > CustomCode.newPosition:13
  }  // > CustomCode.newPosition:14

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.98 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  var kepub =0.9 ;  // > CustomCode.changeOrientation:4
  // check platform for Apps  // > CustomCode.changeOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:7
     // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
     // > CustomCode.changeOrientation:15
  switch (window.orientation) {  // > CustomCode.changeOrientation:16
    case 0:  // > CustomCode.changeOrientation:17
    case 180:  // > CustomCode.changeOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:21
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:22
        // return window.screen.height;  // > CustomCode.changeOrientation:23
        //  return window.innerHeight;  // > CustomCode.changeOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
      }  // > CustomCode.changeOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:29
        // return window.screen.height;  // > CustomCode.changeOrientation:30
        //  return window.innerHeight;  // > CustomCode.changeOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:32
      }  // > CustomCode.changeOrientation:33
      else {  // > CustomCode.changeOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:35
        return window.innerHeight*k;  // > CustomCode.changeOrientation:36
      }  // > CustomCode.changeOrientation:37
      break;  // > CustomCode.changeOrientation:38
    case 90:  // > CustomCode.changeOrientation:39
    case -90:  // > CustomCode.changeOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:41
     // > CustomCode.changeOrientation:42
      if (iOSapp){ // App  // > CustomCode.changeOrientation:43
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:44
        // return window.screen.height;  // > CustomCode.changeOrientation:45
        //  return window.innerHeight;  // > CustomCode.changeOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:47
      }  // > CustomCode.changeOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:51
        // return window.screen.height;  // > CustomCode.changeOrientation:52
        //  return window.innerHeight;  // > CustomCode.changeOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:54
      }  // > CustomCode.changeOrientation:55
      else { // browser Android and PC  // > CustomCode.changeOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:57
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:58
        return window.innerHeight*k;  // > CustomCode.changeOrientation:59
      }  // > CustomCode.changeOrientation:60
      break;  // > CustomCode.changeOrientation:61
    default:  // > CustomCode.changeOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:64
      return window.innerHeight*k;  // > CustomCode.changeOrientation:65
  }  // > CustomCode.changeOrientation:66
     // > CustomCode.changeOrientation:67
  }  // > CustomCode.changeOrientation:68
     // > CustomCode.changeOrientation:69

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    t=0;  // > Initialization.Init Page:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["functionY"]) return;
    phi=Math.atan((w*theta)/omegas); // unverified to be correct  // > Initialization.functionY:1
    Acalculated =Math.sqrt(thetas*thetas+omegas/(w)*omegas/(w));  // > Initialization.functionY:2
    /*  // > Initialization.functionY:3
    "hint: X = "+_view._format(Acalculated,"0.0")+"*sin(" +_view._format(w,"0.00")+"*t+("+_view._format(phi,"0.00")+"))"  // > Initialization.functionY:4
    "hint: V = ("+_view._format(Acalculated,"0.0")+")*("+_view._format(w,"0.00")+")*cos(" +_view._format(w,"0.00")+"*t+("+_view._format(phi,"0.00")+"))"  // > Initialization.functionY:5
    "hint: A = -("+_view._format(Acalculated,"0.0")+")*("+_view._format(w,"0.00")+")*("+_view._format(w,"0.00")+")*sin(" +_view._format(w,"0.00")+"*t+("+_view._format(phi,"0.00")+"))"  // > Initialization.functionY:6
    "KE = 0.5*m*xo^2*ω^2*cos(w*t)*cos(w*t)"  // > Initialization.functionY:7
    "PE = 0.5*m*xo^2*ω^2*sin(w*t)*sin(w*t)"  // > Initialization.functionY:8
    "TE = 0.5*m*xo^2*ω^2"  // > Initialization.functionY:9
    "hint V = sqrt("+_view._format(Acalculated,"0.0")+"^2 -  x^2) "  // > Initialization.functionY:10
    "hint V = -sqrt("+_view._format(Acalculated,"0.0")+"^2 -  x^2) "  // > Initialization.functionY:11
    "hint: A = -"+_view._format(w,"0.00")+"*x"  // > Initialization.functionY:12
    */  // > Initialization.functionY:13
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanelxvst.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.plottingPanelxvst.getTitleX().setPosition([0.8,0.5]);  // > Initialization.axes:2
    _view.plottingPanelxvst.getAxisY().setPosition([0.083,0]);  // > Initialization.axes:3
    _view.plottingPanelxvst.getTitleY().setPosition([0.15,0.85]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (Width1==undefined){   // > Initialization.undefined:1
      Width1="100%";  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
      if (Width2==undefined){   // > Initialization.undefined:4
      Width2="0%";  // > Initialization.undefined:5
      }  // > Initialization.undefined:6
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(0,255,255); stop-opacity:1" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient)"  // > Initialization.svg:10
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    x= L*Math.sin(theta);  // > FixedRelations.FixRel Page:1
    y = L*Math.cos(theta);  // > FixedRelations.FixRel Page:2
    vx = omega*L*Math.cos(theta);  // > FixedRelations.FixRel Page:3
    vy = -omega*L*Math.sin(theta);  // > FixedRelations.FixRel Page:4
    v = Math.sqrt(vx*vx+vy*vy);  // > FixedRelations.FixRel Page:5
    xo= L*Math.sin(thetao);  // > FixedRelations.FixRel Page:6
    yo = L*Math.cos(thetao);  // > FixedRelations.FixRel Page:7
    // convert deg  // > FixedRelations.FixRel Page:8
    thetadegrees = theta*180/pi;  // > FixedRelations.FixRel Page:9
    thetaodegrees = thetao*180/pi;  // > FixedRelations.FixRel Page:10
    T= 2*pi*Math.sqrt(m/k);  // > FixedRelations.FixRel Page:11
    f = 1/T;  // > FixedRelations.FixRel Page:12
    w = 2*pi/T;  // > FixedRelations.FixRel Page:13
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page 2"]) return;
    if(omega*omegastored<0&&omega<0){  // > FixedRelations.FixRel Page 2:1
     pointA = Math.max(pointA,Math.abs(theta-0));  // > FixedRelations.FixRel Page 2:2
      tpointA = t;  // > FixedRelations.FixRel Page 2:3
     // counterA = counterA+1;  // > FixedRelations.FixRel Page 2:4
     // tarraypointA[counterA] = t;  // > FixedRelations.FixRel Page 2:5
     // arraypointA[counterA]=pointA;  // > FixedRelations.FixRel Page 2:6
     // textA[counterA] = "A";  // > FixedRelations.FixRel Page 2:7
    //    textA[counterA] = "A"+counterA ;  // > FixedRelations.FixRel Page 2:8
    }  // > FixedRelations.FixRel Page 2:9
    else if(omega*omegastored<0&&omega>0){  // > FixedRelations.FixRel Page 2:10
     pointB =-Math.max(pointA,Math.abs(theta-0));   // > FixedRelations.FixRel Page 2:11
     tpointB = t;  // > FixedRelations.FixRel Page 2:12
     // counterB = counterB+1;  // > FixedRelations.FixRel Page 2:13
     // tarraypointB[counterB] = t;  // > FixedRelations.FixRel Page 2:14
     // arraypointB[counterB]=pointB;  // > FixedRelations.FixRel Page 2:15
     // textB[counterB] = "B"+counterB ;  // > FixedRelations.FixRel Page 2:16
    // textB[counterB] = "B";  // > FixedRelations.FixRel Page 2:17
    }  // > FixedRelations.FixRel Page 2:18
    omegastored = omega; // to store value of omega  // > FixedRelations.FixRel Page 2:19
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axes"]) return;
    if (_model.isPlaying()===true) { //NEED this for conflict with initialize page values  // > FixedRelations.axes:1
    _view.plottingPanelxvst.getAxisX().setAbsoluteY(_view.plottingPanelxvst.getGrid().getFixedTickY());  // > FixedRelations.axes:2
    _view.plottingPanelxvst.getAxisY().setAbsoluteX(_view.plottingPanelxvst.getGrid().getFixedTickX());  // > FixedRelations.axes:3
    }  // > FixedRelations.axes:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["theta","omega","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=theta) __mustReinitialize = true;
        __state[__cIn++] = theta;
        if (__state[__cIn]!=omega) __mustReinitialize = true;
        __state[__cIn++] = omega;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = omega; // Rate for ODE: Evol Page:theta
        _aRate[__cRate++] = -k*(theta-thetao)/m-b*(omega)/m; // Rate for ODE: Evol Page:omega
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = theta;
        __state[__cIn++] = omega;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var t = _aState[__cOut++];
        return t-3*T;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = theta;
        __state[__cIn++] = omega;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        text = "paused";  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_theta(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_omega(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new SHM22_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return print?"":"Circular Meter Model m = 1 kg and k = 1 N/m  \ntop view"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return world===true; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return print?"":text; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return print?"":"θmax="+_view._format(pointA,"0.00") + "m," +" \nT="+_view._format(T,"0.00")+ "s,"+" f="+_view._format(f,"0.00")+ "1/s"+", ω="+_view._format(w,"0.00")+ "rad/s ,"   +"\nt = "+_view._format(t,"0.00") + " s "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.image.linkProperty("SizeX",  function() { return rangex*1.2; } ); // HtmlView Page linking property 'SizeX' for element 'image'
          _view.image.linkProperty("SizeY",  function() { return rangey*2.2; } ); // HtmlView Page linking property 'SizeY' for element 'image'
          _view.shape3.linkProperty("X",  function() { return xo; }, function(_v) { xo = _v; } ); // HtmlView Page linking property 'X' for element 'shape3'
          _view.shape3.linkProperty("Y",  function() { return yo; }, function(_v) { yo = _v; } ); // HtmlView Page linking property 'Y' for element 'shape3'
          _view.shape3.setAction("OnDrag", function(_data,_info) {
  newPositiono ();
  selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'shape3'
          _view.thetao.linkProperty("SizeX",  function() { return xo; }, function(_v) { xo = _v; } ); // HtmlView Page linking property 'SizeX' for element 'thetao'
          _view.thetao.linkProperty("SizeY",  function() { return yo; }, function(_v) { yo = _v; } ); // HtmlView Page linking property 'SizeY' for element 'thetao'
          _view.theta.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'theta'
          _view.theta.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'theta'
          _view.shape2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'shape2'
          _view.shape2.setAction("OnDrag", function(_data,_info) {
  newPosition ();
  selected[0]="user_defined";

}); // HtmlView Page setting action 'OnDrag' for element 'shape2'
          _view.plottingPanelxvst.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("TRMessage",  function() { return print?"":"eq angle="+_view._format(thetaodegrees,"0.00")+ "° & A="+_view._format(pointA,"00.00") + "m & T="+_view._format(T,"0.00")+ "s & f="+_view._format(f,"0.00")+"Hz & w="+_view._format(w,"0.00")+"rad/s" +"\nb = "+_view._format(b,"0.00") + " s "; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("XTickStep",  function() { return T/4; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("YTickStep",  function() { return pi/10; } ); // HtmlView Page linking property 'YTickStep' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MaximumY",  function() { return pi/2; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MaximumX",  function() { return 3*T; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MinimumY",  function() { return -pi/2; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("BRMessage",  function() { return print?"":"θ = "+_view._format(thetadegrees,"0.00") + " ° or "+_view._format(theta,"0.00") +" rad ,"+"\nt = "+_view._format(t,"0.00") + " s "; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanelxvst'
          _view.analyticCurve.linkProperty("FunctionY",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurve'
          _view.analyticCurve.linkProperty("Maximum",  function() { return Math.max(t,3*T); } ); // HtmlView Page linking property 'Maximum' for element 'analyticCurve'
          _view.analyticCurve.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'analyticCurve'
          _view.trail.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("LineColor",  function() { return memorycolor; }, function(_v) { memorycolor = _v; } ); // HtmlView Page linking property 'LineColor' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.trailDot22.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot22'
          _view.trailDot22.linkProperty("Y",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot22'
          _view.trail222.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail222'
          _view.trail222.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail222'
          _view.trail222.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail222'
          _view.trail222.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail222'
          _view.trail222.linkProperty("InputY",  function() { return omega; }, function(_v) { omega = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail222'
          _view.trailDot2222.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot2222'
          _view.trailDot2222.linkProperty("Y",  function() { return omega; }, function(_v) { omega = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot2222'
          _view.trailDot2222.linkProperty("Visibility",  function() { return vvst; }, function(_v) { vvst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot2222'
          _view.alpha.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'alpha'
          _view.alpha.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'alpha'
          _view.alpha.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'alpha'
          _view.alpha.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'alpha'
          _view.alpha.linkProperty("InputY",  function() { return alpha; }, function(_v) { alpha = _v; } ); // HtmlView Page linking property 'InputY' for element 'alpha'
          _view.trailDot2232.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot2232'
          _view.trailDot2232.linkProperty("Y",  function() { return alpha; }, function(_v) { alpha = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot2232'
          _view.trailDot2232.linkProperty("Visibility",  function() { return avst; }, function(_v) { avst = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot2232'
          _view.equilibrium.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'equilibrium'
          _view.equilibrium.linkProperty("InputY",  function() { return thetao; }, function(_v) { thetao = _v; } ); // HtmlView Page linking property 'InputY' for element 'equilibrium'
          _view.yaxislabel2.linkProperty("Y",  function() { return pi/2; } ); // HtmlView Page linking property 'Y' for element 'yaxislabel2'
          _view.xaxislabel.linkProperty("X",  function() { return 3*T; } ); // HtmlView Page linking property 'X' for element 'xaxislabel'
          _view.axes.linkProperty("SizeX",  function() { return Math.max(3*T,t); } ); // HtmlView Page linking property 'SizeX' for element 'axes'
          _view.model2.linkProperty("Display",  function() { return !print?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'model2'
          _view.comboBox.linkProperty("Options",  function() { return ["no damping","very light damping","light damping","moderate damping","critical damping","heavy damping","user defined","θ =-52°","θ =-25°","θ =0°","θ =24°","θ =50°","θo =-52°","θo =-25°","θo =0°","θo =24°","θo =50°","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="user defined"){
    
    }
  //printing begins
  else if (option == "print"){
    print = true;
    }
  //printing ends
    else if ( option=="no damping"){
    b=0;
  _view.trail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  theta = thetas;
  omega=0;
  alpha=0;
  _initialize();
    }
    else if ( option=="very light damping"){
    b=0.1;
  _view.trail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  theta = thetas;
  omega=0;
  alpha=0;
  _initialize();
    }
    else if ( option=="light damping"){
    b=0.3;
  _view.trail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  theta = thetas;
  omega=0;
  alpha=0;
  _initialize();
    }
    else if ( option=="moderate damping"){
    b=0.6;
  _view.trail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  theta = thetas;
  omega=0;
  alpha=0;
  _initialize();
    }
    else if ( option=="critical damping"){
    b=2.0;
  _view.trail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  theta = thetas;
  omega=0;
  alpha=0;
  _initialize();
    }
  else if ( option=="heavy damping"){
    b=5.0;
  _view.trail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  theta = thetas;
  omega=0;
  alpha=0;
  _initialize();
    }
    else if ( option=="θ =-52°"){
  thetadegrees = -52;
  theta=thetadegrees*pi/180;
    }
    else if ( option=="θ =-25°"){
  thetadegrees = -25;
  theta=thetadegrees*pi/180;
    }
    else if ( option=="θ =0°"){
  thetadegrees = 0;
  theta=thetadegrees*pi/180;
    }
    else if ( option=="θ =24°"){
  thetadegrees = 24;
  theta=thetadegrees*pi/180;
    }
    else if ( option=="θ =50°"){
  thetadegrees = 50;
  theta=thetadegrees*pi/180;
    }
    else if ( option=="θo =-52°"){
  thetaodegrees = -52;
  thetao=thetaodegrees*pi/180;
    }
    else if ( option=="θo =-25°"){
  thetaodegrees = -25;
  thetao=thetaodegrees*pi/180;
    }
    else if ( option=="θo =0°"){
  thetaodegrees = 0;
  thetao=thetaodegrees*pi/180;
    }
    else if ( option=="θo =24°"){
  thetaodegrees = 24;
  thetao=thetaodegrees*pi/180;
    }
    else if ( option=="θo =50°"){
  thetaodegrees = 50;
  thetao=thetaodegrees*pi/180;
    }
    if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.worldgraph.linkProperty("Options",  function() { return ["world","graph only","both","show model","hide model","","print"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  //var option = _view.worldgraph.getProperty("SelectedOptions");
  var opts = _view.worldgraph.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="world"){
    world=true;
  Width1 = "100%";
  Width2 = "0%";
    }
  //printing begins
  else if (option == "print"){
    print = true;
    }
  //printing ends
    else if ( option=="graph only"){
    world=false;
    graph=true;
  Width1 = "0%";
  Width2 = "100%";
    }
   
  else if ( option=="both"){
  world=true;
  graph=true;
  Width1 = "50%";
  Width2 = "50%";
  }
  else if ( option=="x vs t"){
  xvst=true;
  //disabledworld=false;
  }
  else if ( option=="v vs t"){
  graph=true;
  vvst=true;
  //disabledworld=false;
  }
  else if ( option=="a vs t"){
  graph=true;
  avst=true;
  //disabledworld=false;
  }
  else if ( option=="x vs t off"){
  xvst=false;
  //disabledworld=false;
  }
  else if ( option=="v vs t off"){
  vvst=false;
  //disabledworld=false;
  }
  else if ( option=="a vs t off"){
  avst=false;;
  //disabledworld=false;
  }
  else if ( option=="show model"){
  showmodel=true;
  }
  else if ( option=="hide model"){
  showmodel=false;
  }
    if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.worldgraph.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'worldgraph'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.initialize.setAction("OnClick", function(_data,_info) {
  _view.trail.newSegment();
  //_view.trail.newSegment() ==_view.trail2.newSegment() ;
  memorycolor=memorycolor+1;
  t=0;
  theta = thetas;
  omega=0;
  alpha=0;
  _initialize();

}); // HtmlView Page setting action 'OnClick' for element 'initialize'
          _view.initialize.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'initialize'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.model.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'model'
          _view.model.setAction("OnClick", function(_data,_info) {
  if (inputdropmenu == true){
    inputdropmenu = false;
    }
  else if (inputdropmenu == false){
    inputdropmenu = true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'model'
          _view.model.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'model'
          _view.models.linkProperty("Options",  function() { return ["0","2*sin(t)","2*cos(t)","0","-2*cos(t)","-1*cos(t)","1*sin(t+1.57)","1.41*sin(t+0.5236)","2*sin(3*t)","0.5*sin(1.05*t)","3*sin(1.57*t)","-0.91*cos(1*t)"]; } ); // HtmlView Page linking property 'Options' for element 'models'
          _view.models.setAction("OnChange", function(_data,_info) {
  //var option = _view.models.getProperty("SelectedOptions");
  var opts = _view.models.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  showmodel=true;
  functionY=option+"";
  _view._update();
    if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'models'
          _view.models.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'models'
          _view.models.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models'
          _view.models.linkProperty("Display",  function() { return inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.setAction("OnChange", function(_data,_info) {
  showmodel=true;
  _view._update();

}); // HtmlView Page setting action 'OnChange' for element 'fField'
          _view.fField.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.fField.linkProperty("Display",  function() { return !inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'fField'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function SHM22_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = SHM22_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('SHM23','./SHM22.xhtml');

  return _view;
} // end of main function

function SHM22_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Title","Circular Meter Model m = 1 kg and k = 1 N/m") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("XTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'image'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'image'
      .setProperty("ImageUrl","./SHMcoil/Ampere-o-meter-vintage-HDR-0h320x320.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape3'
      .setProperty("FillColor","rgba(0,255,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape3'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape3'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape3'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"thetao", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'thetao'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'thetao'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'thetao'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'thetao'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'thetao'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'thetao'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"theta", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'theta'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'theta'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theta'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theta'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'theta'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'theta'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'theta'
      .setProperty("DrawFill",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'theta'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'theta'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanelxvst'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst'
      .setProperty("YScalePrecision",3) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst'
      .setProperty("AxisYFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanelxvst'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst'
      .setProperty("Title","Angular Displacement vs. Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst'
      .setProperty("TitleY","Angular Displacement  (rad)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst'
      .setProperty("AxisXFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanelxvst'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst'
      .setProperty("MarginX",20) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanelxvst'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanelxvst'
      .setProperty("XScalePrecision",2) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurve'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'analyticCurve'
      .setProperty("NumPoints",100) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'analyticCurve'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurve'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurve'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot22", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot22'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot22'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot22'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot22'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail222", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trail222'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail222'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail222'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot2222", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot2222'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot2222'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot2222'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot2222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot2222'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot2222'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"alpha", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'alpha'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'alpha'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'alpha'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot2232", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot2232'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot2232'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot2232'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot2232'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot2232'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot2232'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"equilibrium", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'equilibrium'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'equilibrium'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'equilibrium'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"yaxislabel2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'yaxislabel2'
      .setProperty("RelativePosition","NORTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'yaxislabel2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yaxislabel2'
      .setProperty("Text","angular position (rad)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'yaxislabel2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'yaxislabel2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"xaxislabel", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'xaxislabel'
      .setProperty("RelativePosition","NORTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'xaxislabel'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xaxislabel'
      .setProperty("Text","t (s)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'xaxislabel'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'xaxislabel'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axesy", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'axesy'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axesy'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axesy'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axesy'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axesy'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axesy'
      .setProperty("SizeY",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axesy'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axesy'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axesy'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axes", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'axes'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axes'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axes'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axes'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axes'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axes'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axes'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"model2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'model2'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "30px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'model2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined to select different b") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initialize", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'initialize'
      .setProperty("Tooltip","store data") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initialize'
      .setProperty("Text","▼ ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'initialize'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"model", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'model'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model'
      .setProperty("Tooltip","key in expression like  -0.91*cos(1*t)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model'
      .setProperty("Text","?your model, θ =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'model'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'models'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.model2) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","30vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","green function") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Angular Damping Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM22/SHMcoil/2016-01-25_1231s.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM22/1authorlookangphoto5050.png" />
 weelookang@gmail.com
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, creative commons attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new SHM22("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM22/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
