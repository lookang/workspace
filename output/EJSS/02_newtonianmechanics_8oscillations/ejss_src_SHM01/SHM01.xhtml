<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Pendulum Toy</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
var EJSS_HARDWARE = EJSS_HARDWARE || {};

EJSS_HARDWARE.orientationTools = function () {
	var self = {};
	var mIOSkind = (getMobileOperatingSystem()!=="Android");
	var mOrientation = 0;

	self.getOrientation = function() { return mOrientation; }
	
	function readOrientation() {
		var orientation;
		if (mIOSkind) { // Android does it otherwise
			if (window.orientation=="90") orientation = 90;
			else if (window.orientation=="0") orientation = 0;
			else if (window.orientation=="-90") orientation = -90;
			else orientation = 180;
		}
		else { // iOS behaviour
			if (window.orientation=="90") orientation = -90;
			else if (window.orientation=="0") orientation = 180;
			else if (window.orientation=="-90") orientation = 90;
			else orientation = 0;
		}
		return orientation;
	}
	
	function getMobileOperatingSystem() {
		var userAgent = navigator.userAgent || navigator.vendor || window.opera;
		if( userAgent.match( /iPad/i ) || userAgent.match( /iPhone/i ) || 
				userAgent.match( /iPod/i ) ) return 'iOS';
		if( userAgent.match( /Android/i ) ) return 'Android';
		return 'unknown';
	};

	window.addEventListener("orientationchange", function() {
		mOrientation  = readOrientation();
  	  }, false);

	mOrientation = readOrientation();

	//alert ("is IOSKind = "+mIOSkind+"\n orientation = "+mOrientation);
	
	return self;
};

EJSS_HARDWARE.accelerometer = function () {
	var self = {};
	var mListeners = [];
	var mOrientationTools = EJSS_HARDWARE.orientationTools();
	var mAverageTime = 0;
	var mIsRunning = false;

	var mData = { x : 0, y:0, z:0, interval:0 , alpha: 0, beta: 0, gamma: 0};
	var mHistory = []; // Stores data taken, most recent data goes to [0] 

	function copyData(acceleration,rotation,data) {
		data.x = acceleration.x;
		data.y = acceleration.y;
		data.z = acceleration.z;
	    data.alpha = rotation.alpha;
	    data.beta  = rotation.beta;
        data.gamma = rotation.gamma;
        data.millisAgo = 0;
        return data;
	};
	
	function deviceMotionHandler(eventData) {
		// Grab the acceleration from the results
		//var acceleration = eventData.acceleration;
		var acceleration = eventData.accelerationIncludingGravity;
	    var rotation = eventData.rotationRate;
		var interval = eventData.interval;
		if (mAverageTime>0) {
	    	for (var j=0, numData=mHistory.length; j<numData; j++) {
	    		var data = mHistory[j];
	    		data.millisAgo += interval;
	    		if (data.millisAgo>mAverageTime) {
	    			mHistory.length = j;
	    			break;
	    		}
	    	}
	    	mHistory.unshift(copyData(acceleration,rotation,{}));
		}

		copyData(acceleration,rotation,mData);

		for (var i=0, n=mListeners.length; i<n; i++) {
			mListeners[i](mData);
		}
	};

	self.isPresent = function() { return (typeof window.DeviceMotionEvent != "undefined"); };

	self.start = function() {
		if (self.isPresent()) {
			window.addEventListener('devicemotion', deviceMotionHandler, false);
			mIsRunning = true;
		}
	};

	self.stop = function() {
		if (self.isPresent()) window.removeEventListener('devicemotion', deviceMotionHandler);
		mHistory = [];
		mData = { x : 0, y:0, z:0, interval:0 , alpha: 0, beta: 0, gamma: 0};
		mIsRunning = false;
	};

	self.isRunning = function() { return mIsRunning; };

	self.setAverageInterval = function (seconds) {
		mAverageTime = seconds;
		if (mAverageTime<=0) mHistory = [];
	};
	
	function averageData() {
		var data = { x : 0, y:0, z:0, interval:0 , alpha: 0, beta: 0, gamma: 0};
	    data.alpha = mData.alpha;
	    data.beta  = mData.beta;
        data.gamma = mData.gamma;
        var n = mHistory.length;
    	for (var i=0; i<n; i++) {
    		var historicalData = mHistory[i];
    		data.x += historicalData.x;
    		data.y += historicalData.y;
    		data.z += historicalData.z;
    	}
    	data.x /= n;
    	data.y /= n;
    	data.z /= n;
    	return data;
	};
	
	self.getDeviceData = function() { return (mAverageTime>0) ? averageData() : mData; };
	
	self.getViewData = function () {
		var data = (mAverageTime>0) ? averageData() : mData;
		switch (mOrientationTools.getOrientation()) {
		  case   0 : return { x: data.x, y: data.y, z: data.z, alpha: data.alpha, beta: data.beta, gamma: data.gamma }; break;
		  case  90 : return { x:-data.y, y: data.x, z: data.z, alpha: data.alpha, beta: data.beta, gamma: data.gamma }; break;
		  case -90 : return { x: data.y, y:-data.x, z: data.z, alpha: data.alpha, beta: data.beta, gamma: data.gamma }; break;
		  default  : return { x:-data.x, y:-data.y, z: data.z, alpha: data.alpha, beta: data.beta, gamma: data.gamma }; break;
	    }
	};

	self.addListener = function(listener) { mListeners.push(listener); };

	self.removeListener = function(listener) {
		var index = mListeners.indexOf(listener);
		if (index>-1) mListeners = mListeners.splice(index,1); 
	};

	return self;

};

EJSS_HARDWARE.SensorTag = {
		ACCELEROMETER : 0,
		GYROSCOPE : 1,
		AMBIENT_TEMPERATURE : 2,
		INFRARED_TEMPERATURE : 3,
		HUMIDITY : 4,
		BAROMETER : 5,
		MAGNETOMETER : 6
};


EJSS_HARDWARE.sensorTag = function () {
	var SensorTag = EJSS_HARDWARE.SensorTag;
	var self = {};

	self.isSupported = function() {
		return window.sensors && window.sensors.isSupportedSensorTag();
	};

	self.start = function(accelerometerPeriod, magnetometerPeriod) {
		if (typeof accelerometerPeriod === "undefined") accelerometerPeriod = 20;
		if (typeof magnetometerPeriod === "undefined") magnetometerPeriod = 20;
		window.sensors.runSensorTag(""+accelerometerPeriod,""+magnetometerPeriod);
	};

	self.stop = function() {
		window.sensors.stopSensorTag();
	};

	self.readData = function(sensor) {
		if (typeof sensor === "undefined") sensor = SensorTag.ACCELEROMETER;
		switch (sensor) {
		default :
		case SensorTag.ACCELEROMETER : return window.sensors.getSensorTagAccelerometer(); break;
		case SensorTag.GYROSCOPE : return window.sensors.getSensorTagGyroscope(); break;
		case SensorTag.AMBIENT_TEMPERATURE : return window.sensors.getSensorTagTempAmb(); break;
		case SensorTag.INFRARED_TEMPERATURE : return window.sensors.getSensorTagTempIR(); break;
		case SensorTag.HUMIDITY : return window.sensors.getSensorTagHumidity();break;
		case SensorTag.BAROMETER : return window.sensors.getSensorTagPressure();break;
		case SensorTag.MAGNETOMETER : return window.sensors.getSensorTagMagnetometer();break;
		}
	};

	return self;

};

EJSS_HARDWARE.linearAccelerometer = function () {
	var self = {};

	self.isPresent = function() {
		return window.sensors && window.sensors.isLinearAcceleration();
	};

	self.start = function() {
		if (self.isPresent()) window.sensors.runLinearAcceleration();
	};

	self.stop = function() {
		if (self.isPresent()) window.sensors.stopLinearAcceleration();
	};

	self.readData = function() {
		if (self.isPresent()) return eval(window.sensors.getLinearAcceleration());
		else return {x:0, y:0, z:0};
	};

	return self;

};

EJSS_HARDWARE.gyroscope = function () {
	var self = {};

	self.isPresent = function() {
		return window.sensors && window.sensors.isGyroscope();
	};

	self.start = function() {
		if (self.isPresent()) window.sensors.runGyroscope();
	};

	self.stop = function() {
		if (self.isPresent()) window.sensors.stopGyroscope();
	};

	self.readData = function() {
		if (self.isPresent()) return eval(window.sensors.getGyroscope());
		else return {x:0, y:0, z:0};
	};

	return self;

};
//--><!]]></script>

<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function SHM01(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

var accelerometer = EJSS_HARDWARE.accelerometer();
  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var y1; // EjsS Model.Variables.Var Table.y1
  var ysize; // EjsS Model.Variables.Var Table.ysize
  var g; // EjsS Model.Variables.Var Table.g
  var vvst; // EjsS Model.Variables.Var Table.vvst
  var avst; // EjsS Model.Variables.Var Table.avst

  var polarshow; // EjsS Model.Variables.polarcooridnates.polarshow
  var maxR; // EjsS Model.Variables.polarcooridnates.maxR
  var ns; // EjsS Model.Variables.polarcooridnates.ns
  var nr; // EjsS Model.Variables.polarcooridnates.nr
  var dxSpoke; // EjsS Model.Variables.polarcooridnates.dxSpoke
  var dySpoke; // EjsS Model.Variables.polarcooridnates.dySpoke
  var radii; // EjsS Model.Variables.polarcooridnates.radii

  var theta; // EjsS Model.Variables.pendulum.theta
  var thetas; // EjsS Model.Variables.pendulum.thetas
  var thetadegrees; // EjsS Model.Variables.pendulum.thetadegrees
  var omega; // EjsS Model.Variables.pendulum.omega
  var omegas; // EjsS Model.Variables.pendulum.omegas
  var alpha; // EjsS Model.Variables.pendulum.alpha
  var alphas; // EjsS Model.Variables.pendulum.alphas
  var L; // EjsS Model.Variables.pendulum.L
  var xs; // EjsS Model.Variables.pendulum.xs
  var ys; // EjsS Model.Variables.pendulum.ys
  var vxs; // EjsS Model.Variables.pendulum.vxs
  var vys; // EjsS Model.Variables.pendulum.vys
  var shm; // EjsS Model.Variables.pendulum.shm

  var m; // EjsS Model.Variables.simplespring.m
  var k; // EjsS Model.Variables.simplespring.k
  var l; // EjsS Model.Variables.simplespring.l
  var x; // EjsS Model.Variables.simplespring.x
  var y; // EjsS Model.Variables.simplespring.y
  var ye; // EjsS Model.Variables.simplespring.ye
  var vx; // EjsS Model.Variables.simplespring.vx
  var vy; // EjsS Model.Variables.simplespring.vy
  var v; // EjsS Model.Variables.simplespring.v
  var t; // EjsS Model.Variables.simplespring.t
  var tcst; // EjsS Model.Variables.simplespring.tcst
  var X; // EjsS Model.Variables.simplespring.X
  var T; // EjsS Model.Variables.simplespring.T
  var dt; // EjsS Model.Variables.simplespring.dt
  var w; // EjsS Model.Variables.simplespring.w
  var a; // EjsS Model.Variables.simplespring.a
  var f; // EjsS Model.Variables.simplespring.f

  var b; // EjsS Model.Variables.advancedspring.b
  var amplitude; // EjsS Model.Variables.advancedspring.amplitude
  var frequency; // EjsS Model.Variables.advancedspring.frequency
  var potentialEnergy; // EjsS Model.Variables.advancedspring.potentialEnergy
  var kineticEnergy; // EjsS Model.Variables.advancedspring.kineticEnergy
  var totalEnergy; // EjsS Model.Variables.advancedspring.totalEnergy
  var afrequency; // EjsS Model.Variables.advancedspring.afrequency
  var Hertz; // EjsS Model.Variables.advancedspring.Hertz

  var xmaxs; // EjsS Model.Variables.max.xmaxs
  var vmaxs; // EjsS Model.Variables.max.vmaxs
  var amaxs; // EjsS Model.Variables.max.amaxs
  var Emaxs; // EjsS Model.Variables.max.Emaxs

  var n1; // EjsS Model.Variables.period.n1
  var nc; // EjsS Model.Variables.period.nc
  var numberofswing; // EjsS Model.Variables.period.numberofswing
  var omegastored; // EjsS Model.Variables.period.omegastored
  var T1; // EjsS Model.Variables.period.T1
  var ts; // EjsS Model.Variables.period.ts

  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Height1; // EjsS Model.Variables.layout.Height1
  var Height2; // EjsS Model.Variables.layout.Height2
  var Height3; // EjsS Model.Variables.layout.Height3
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var isAndroid; // EjsS Model.Variables.layout.isAndroid

  var g0; // EjsS Model.Variables.accelerometer.g0
  var phi; // EjsS Model.Variables.accelerometer.phi
  var accX; // EjsS Model.Variables.accelerometer.accX
  var accY; // EjsS Model.Variables.accelerometer.accY
  var accZ; // EjsS Model.Variables.accelerometer.accZ
  var msg; // EjsS Model.Variables.accelerometer.msg
  var accelPresent; // EjsS Model.Variables.accelerometer.accelPresent
  var accelRunning; // EjsS Model.Variables.accelerometer.accelRunning

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      print : print,
      fontb : fontb,
      font : font,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      y1 : y1,
      ysize : ysize,
      g : g,
      vvst : vvst,
      avst : avst,
      polarshow : polarshow,
      maxR : maxR,
      ns : ns,
      nr : nr,
      dxSpoke : dxSpoke,
      dySpoke : dySpoke,
      radii : radii,
      theta : theta,
      thetas : thetas,
      thetadegrees : thetadegrees,
      omega : omega,
      omegas : omegas,
      alpha : alpha,
      alphas : alphas,
      L : L,
      xs : xs,
      ys : ys,
      vxs : vxs,
      vys : vys,
      shm : shm,
      m : m,
      k : k,
      l : l,
      x : x,
      y : y,
      ye : ye,
      vx : vx,
      vy : vy,
      v : v,
      t : t,
      tcst : tcst,
      X : X,
      T : T,
      dt : dt,
      w : w,
      a : a,
      f : f,
      b : b,
      amplitude : amplitude,
      frequency : frequency,
      potentialEnergy : potentialEnergy,
      kineticEnergy : kineticEnergy,
      totalEnergy : totalEnergy,
      afrequency : afrequency,
      Hertz : Hertz,
      xmaxs : xmaxs,
      vmaxs : vmaxs,
      amaxs : amaxs,
      Emaxs : Emaxs,
      n1 : n1,
      nc : nc,
      numberofswing : numberofswing,
      omegastored : omegastored,
      T1 : T1,
      ts : ts,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Height1 : Height1,
      Height2 : Height2,
      Height3 : Height3,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      isAndroid : isAndroid,
      g0 : g0,
      phi : phi,
      accX : accX,
      accY : accY,
      accZ : accZ,
      msg : msg,
      accelPresent : accelPresent,
      accelRunning : accelRunning
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ysize != "undefined") ysize = json.ysize;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.polarshow != "undefined") polarshow = json.polarshow;
    if(typeof json.maxR != "undefined") maxR = json.maxR;
    if(typeof json.ns != "undefined") ns = json.ns;
    if(typeof json.nr != "undefined") nr = json.nr;
    if(typeof json.dxSpoke != "undefined") dxSpoke = json.dxSpoke;
    if(typeof json.dySpoke != "undefined") dySpoke = json.dySpoke;
    if(typeof json.radii != "undefined") radii = json.radii;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.thetas != "undefined") thetas = json.thetas;
    if(typeof json.thetadegrees != "undefined") thetadegrees = json.thetadegrees;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.omegas != "undefined") omegas = json.omegas;
    if(typeof json.alpha != "undefined") alpha = json.alpha;
    if(typeof json.alphas != "undefined") alphas = json.alphas;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.vxs != "undefined") vxs = json.vxs;
    if(typeof json.vys != "undefined") vys = json.vys;
    if(typeof json.shm != "undefined") shm = json.shm;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.ye != "undefined") ye = json.ye;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.tcst != "undefined") tcst = json.tcst;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.amplitude != "undefined") amplitude = json.amplitude;
    if(typeof json.frequency != "undefined") frequency = json.frequency;
    if(typeof json.potentialEnergy != "undefined") potentialEnergy = json.potentialEnergy;
    if(typeof json.kineticEnergy != "undefined") kineticEnergy = json.kineticEnergy;
    if(typeof json.totalEnergy != "undefined") totalEnergy = json.totalEnergy;
    if(typeof json.afrequency != "undefined") afrequency = json.afrequency;
    if(typeof json.Hertz != "undefined") Hertz = json.Hertz;
    if(typeof json.xmaxs != "undefined") xmaxs = json.xmaxs;
    if(typeof json.vmaxs != "undefined") vmaxs = json.vmaxs;
    if(typeof json.amaxs != "undefined") amaxs = json.amaxs;
    if(typeof json.Emaxs != "undefined") Emaxs = json.Emaxs;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.nc != "undefined") nc = json.nc;
    if(typeof json.numberofswing != "undefined") numberofswing = json.numberofswing;
    if(typeof json.omegastored != "undefined") omegastored = json.omegastored;
    if(typeof json.T1 != "undefined") T1 = json.T1;
    if(typeof json.ts != "undefined") ts = json.ts;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Height1 != "undefined") Height1 = json.Height1;
    if(typeof json.Height2 != "undefined") Height2 = json.Height2;
    if(typeof json.Height3 != "undefined") Height3 = json.Height3;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.g0 != "undefined") g0 = json.g0;
    if(typeof json.phi != "undefined") phi = json.phi;
    if(typeof json.accX != "undefined") accX = json.accX;
    if(typeof json.accY != "undefined") accY = json.accY;
    if(typeof json.accZ != "undefined") accZ = json.accZ;
    if(typeof json.msg != "undefined") msg = json.msg;
    if(typeof json.accelPresent != "undefined") accelPresent = json.accelPresent;
    if(typeof json.accelRunning != "undefined") accelRunning = json.accelRunning;
  };

  _model._inputAndPublicParameters = ["print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "g",  "vvst",  "avst",  "polarshow",  "maxR",  "ns",  "nr",  "dxSpoke",  "dySpoke",  "radii",  "theta",  "thetas",  "thetadegrees",  "omega",  "omegas",  "alpha",  "alphas",  "L",  "xs",  "ys",  "vxs",  "vys",  "shm",  "m",  "k",  "l",  "x",  "y",  "ye",  "vx",  "vy",  "v",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "b",  "amplitude",  "frequency",  "potentialEnergy",  "kineticEnergy",  "totalEnergy",  "afrequency",  "Hertz",  "xmaxs",  "vmaxs",  "amaxs",  "Emaxs",  "n1",  "nc",  "numberofswing",  "omegastored",  "T1",  "ts",  "Width",  "Height",  "Width1",  "Height1",  "Height2",  "Height3",  "iOS",  "iPad",  "iPhone",  "isAndroid",  "g0",  "phi",  "accX",  "accY",  "accZ",  "msg",  "accelPresent",  "accelRunning"]; 

  _model._outputAndPublicParameters = ["print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "y1",  "ysize",  "g",  "vvst",  "avst",  "polarshow",  "maxR",  "ns",  "nr",  "dxSpoke",  "dySpoke",  "radii",  "theta",  "thetas",  "thetadegrees",  "omega",  "omegas",  "alpha",  "alphas",  "L",  "xs",  "ys",  "vxs",  "vys",  "shm",  "m",  "k",  "l",  "x",  "y",  "ye",  "vx",  "vy",  "v",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "b",  "amplitude",  "frequency",  "potentialEnergy",  "kineticEnergy",  "totalEnergy",  "afrequency",  "Hertz",  "xmaxs",  "vmaxs",  "amaxs",  "Emaxs",  "n1",  "nc",  "numberofswing",  "omegastored",  "T1",  "ts",  "Width",  "Height",  "Width1",  "Height1",  "Height2",  "Height3",  "iOS",  "iPad",  "iPhone",  "isAndroid",  "g0",  "phi",  "accX",  "accY",  "accZ",  "msg",  "accelPresent",  "accelRunning"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["PolarCoordinates"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["plot"] = false;
    __pagesEnabled["radial"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["MathJax"] = true;
    __pagesEnabled["accelerometer"] = true;
    __pagesEnabled["acceleromoter"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["acceleromotermaxtime"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["period"] = true;
    __pagesEnabled["polar"] = true;
    __pagesEnabled["axes"] = true;
  });

  _model.addToReset(function() {
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.Var Table.font
    xmin = -1.2; // EjsS Model.Variables.Var Table.xmin
    xmax = 1.2; // EjsS Model.Variables.Var Table.xmax
    ymin = -1.2; // EjsS Model.Variables.Var Table.ymin
    ymax = 1.2; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "show SHM off";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "drag the mass or \nselect/change θ and \nclick play"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    y1 = sizey*5/2; // EjsS Model.Variables.Var Table.y1
    ysize = 0.2; // EjsS Model.Variables.Var Table.ysize
    g = 9.81; // EjsS Model.Variables.Var Table.g
  });

  _model.addToReset(function() {
    polarshow = false; // EjsS Model.Variables.polarcooridnates.polarshow
    maxR = 1; // EjsS Model.Variables.polarcooridnates.maxR
    ns = 16; // EjsS Model.Variables.polarcooridnates.ns
    nr = ns; // EjsS Model.Variables.polarcooridnates.nr
    dxSpoke = new Array(ns); // EjsS Model.Variables.polarcooridnates.dxSpoke
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.polarcooridnates.dxSpoke
        dxSpoke[_i0] = 0;  // EjsS Model.Variables.polarcooridnates.dxSpoke
      }
    }());
    dySpoke = new Array(ns); // EjsS Model.Variables.polarcooridnates.dySpoke
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.polarcooridnates.dySpoke
        dySpoke[_i0] = 0;  // EjsS Model.Variables.polarcooridnates.dySpoke
      }
    }());
    radii = new Array(nr); // EjsS Model.Variables.polarcooridnates.radii
    (function () {
      var _i0;
      for (_i0=0; _i0<nr; _i0+=1) {  // EjsS Model.Variables.polarcooridnates.radii
        radii[_i0] = 0;  // EjsS Model.Variables.polarcooridnates.radii
      }
    }());
  });

  _model.addToReset(function() {
    theta = (Math.random()-0.5)*pi; // EjsS Model.Variables.pendulum.theta
    thetas = theta; // EjsS Model.Variables.pendulum.thetas
    omega = 0; // EjsS Model.Variables.pendulum.omega
    omegas = 0; // EjsS Model.Variables.pendulum.omegas
    alpha = 0; // EjsS Model.Variables.pendulum.alpha
    alphas = 0; // EjsS Model.Variables.pendulum.alphas
    L = 1; // EjsS Model.Variables.pendulum.L
    xs = 0; // EjsS Model.Variables.pendulum.xs
    ys = 0; // EjsS Model.Variables.pendulum.ys
    vxs = 0; // EjsS Model.Variables.pendulum.vxs
    vys = 0; // EjsS Model.Variables.pendulum.vys
  });

  _model.addToReset(function() {
    m = 1; // EjsS Model.Variables.simplespring.m
    k = 1; // EjsS Model.Variables.simplespring.k
    l = 0; // EjsS Model.Variables.simplespring.l
    x = 0; // EjsS Model.Variables.simplespring.x
    y = 0; // EjsS Model.Variables.simplespring.y
    ye = -g*m/k; // EjsS Model.Variables.simplespring.ye
    vx = 0; // EjsS Model.Variables.simplespring.vx
    vy = 0; // EjsS Model.Variables.simplespring.vy
    v = 0; // EjsS Model.Variables.simplespring.v
    t = 0; // EjsS Model.Variables.simplespring.t
    X = x-l; // EjsS Model.Variables.simplespring.X
    T = 2*pi*Math.sqrt(L/g); // EjsS Model.Variables.simplespring.T
    dt = 0.01; // EjsS Model.Variables.simplespring.dt
    w = 2*pi/T; // EjsS Model.Variables.simplespring.w
    a = -w^2*x; // EjsS Model.Variables.simplespring.a
  });

  _model.addToReset(function() {
    b = 0; // EjsS Model.Variables.advancedspring.b
    amplitude = 0.5; // EjsS Model.Variables.advancedspring.amplitude
    frequency = 0; // EjsS Model.Variables.advancedspring.frequency
    potentialEnergy = 0; // EjsS Model.Variables.advancedspring.potentialEnergy
    kineticEnergy = 0; // EjsS Model.Variables.advancedspring.kineticEnergy
    totalEnergy = 0; // EjsS Model.Variables.advancedspring.totalEnergy
    afrequency = 0; // EjsS Model.Variables.advancedspring.afrequency
    Hertz = 0; // EjsS Model.Variables.advancedspring.Hertz
  });

  _model.addToReset(function() {
    xmaxs = 3; // EjsS Model.Variables.max.xmaxs
    vmaxs = 2; // EjsS Model.Variables.max.vmaxs
    amaxs = 2; // EjsS Model.Variables.max.amaxs
    Emaxs = 2; // EjsS Model.Variables.max.Emaxs
  });

  _model.addToReset(function() {
    n1 = 0; // EjsS Model.Variables.period.n1
    nc = 0; // EjsS Model.Variables.period.nc
    numberofswing = 0; // EjsS Model.Variables.period.numberofswing
    omegastored = 0; // EjsS Model.Variables.period.omegastored
    T1 = new Array(100); // EjsS Model.Variables.period.T1
    (function () {
      var _i0;
      for (_i0=0; _i0<100; _i0+=1) {  // EjsS Model.Variables.period.T1
        T1[_i0] = 0;  // EjsS Model.Variables.period.T1
      }
    }());
    ts = 0; // EjsS Model.Variables.period.ts
  });

  _model.addToReset(function() {
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Height1 = "100%"; // EjsS Model.Variables.layout.Height1
    Height2 = "100%"; // EjsS Model.Variables.layout.Height2
    Height3 = "10%"; // EjsS Model.Variables.layout.Height3
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
  });

  _model.addToReset(function() {
    g0 = 9.8; // EjsS Model.Variables.accelerometer.g0
    phi = 0; // EjsS Model.Variables.accelerometer.phi
    accX = 0; // EjsS Model.Variables.accelerometer.accX
    accY = -g; // EjsS Model.Variables.accelerometer.accY
    accZ = 0; // EjsS Model.Variables.accelerometer.accZ
    msg = "message"; // EjsS Model.Variables.accelerometer.msg
    accelPresent = false; // EjsS Model.Variables.accelerometer.accelPresent
    accelRunning = false; // EjsS Model.Variables.accelerometer.accelRunning
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(5);
  });

  function externalForce (time) {  // > CustomCode.Lib Page:1
  return amplitude * Math.sin(2*pi*Hertz *time);  // > CustomCode.Lib Page:2
  }  // > CustomCode.Lib Page:3
  /*  // > CustomCode.Lib Page:4
  public double externalForce (double time) {  // > CustomCode.Lib Page:5
  return amplitude * Math.sin(frequency*time);  // > CustomCode.Lib Page:6
  }  // > CustomCode.Lib Page:7
  */  // > CustomCode.Lib Page:8
  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.Lib Page:9
  // does not work for iOS   // > CustomCode.Lib Page:10
  /*jslint browser:true */  // > CustomCode.Lib Page:11
  function toggleFullScreen() {  // > CustomCode.Lib Page:12
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.Lib Page:13
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.Lib Page:14
      if (document.documentElement.requestFullscreen) {  // > CustomCode.Lib Page:15
        document.documentElement.requestFullscreen();  // > CustomCode.Lib Page:16
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.Lib Page:17
        document.documentElement.msRequestFullscreen();  // > CustomCode.Lib Page:18
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.Lib Page:19
        document.documentElement.mozRequestFullScreen();  // > CustomCode.Lib Page:20
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.Lib Page:21
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.Lib Page:22
      }  // > CustomCode.Lib Page:23
    } else {  // > CustomCode.Lib Page:24
      if (document.exitFullscreen) {  // > CustomCode.Lib Page:25
        document.exitFullscreen();  // > CustomCode.Lib Page:26
      } else if (document.msExitFullscreen) {  // > CustomCode.Lib Page:27
        document.msExitFullscreen();  // > CustomCode.Lib Page:28
      } else if (document.mozCancelFullScreen) {  // > CustomCode.Lib Page:29
        document.mozCancelFullScreen();  // > CustomCode.Lib Page:30
      } else if (document.webkitExitFullscreen) {  // > CustomCode.Lib Page:31
        document.webkitExitFullscreen();  // > CustomCode.Lib Page:32
      }  // > CustomCode.Lib Page:33
    }  // > CustomCode.Lib Page:34
  }  // > CustomCode.Lib Page:35

  function newPosition () {  // > CustomCode.newposition:1
    //lentgh is constant  // > CustomCode.newposition:2
    if ( L<0.5 ) {  // > CustomCode.newposition:3
    L=0.5;  // > CustomCode.newposition:4
  }  // > CustomCode.newposition:5
    theta=Math.atan2(x,-y);  // > CustomCode.newposition:6
    thetas=theta;  // > CustomCode.newposition:7
  x= L*Math.sin(theta);  // > CustomCode.newposition:8
  y = -L*Math.cos(theta);  // > CustomCode.newposition:9
  //  x1=x;  // > CustomCode.newposition:10
    omega=0.0;  // > CustomCode.newposition:11
    vx=0.0;  // > CustomCode.newposition:12
    vy=0.0;  // > CustomCode.newposition:13
    t=0.0;  // > CustomCode.newposition:14
   // scale=g*(y+L)/2+2;  // > CustomCode.newposition:15
    //_view.resetTraces();  // > CustomCode.newposition:16
  }  // > CustomCode.newposition:17

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) { //Standard  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) { //Internet Explorer 11  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) { //Gecko (Firefox)  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) { //Safari (WebKit)  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function changeOrientation() {  // > CustomCode.changeOrientation:1
  var k =1;  // > CustomCode.changeOrientation:2
  var kapple=0.95;  // > CustomCode.changeOrientation:3
  // check platform for Apps  // > CustomCode.changeOrientation:4
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:5
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:6
  // check platform for web browsers  // > CustomCode.changeOrientation:7
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:8
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:9
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:11
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.changeOrientation:12
  switch (window.orientation) {  // > CustomCode.changeOrientation:13
    case 0:  // > CustomCode.changeOrientation:14
    case 180:  // > CustomCode.changeOrientation:15
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:16
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:17
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:18
        return window.screen.height*kapple;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:19
        // return window.screen.height;  // > CustomCode.changeOrientation:20
        //  return window.innerHeight;  // > CustomCode.changeOrientation:21
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:22
      }  // > CustomCode.changeOrientation:23
        // > CustomCode.changeOrientation:24
      else {  // > CustomCode.changeOrientation:25
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:26
        return window.innerHeight*k;  // > CustomCode.changeOrientation:27
      }  // > CustomCode.changeOrientation:28
      break;  // > CustomCode.changeOrientation:29
    case 90:  // > CustomCode.changeOrientation:30
    case -90:  // > CustomCode.changeOrientation:31
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:32
      if (iOSapp){ // App  // > CustomCode.changeOrientation:33
        return window.screen.width*kapple;    // > CustomCode.changeOrientation:34
        // return window.screen.height;  // > CustomCode.changeOrientation:35
        //  return window.innerHeight;  // > CustomCode.changeOrientation:36
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:37
      }  // > CustomCode.changeOrientation:38
        // > CustomCode.changeOrientation:39
      else { // browser Android and PC  // > CustomCode.changeOrientation:40
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:41
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:42
        return window.innerHeight*k;  // > CustomCode.changeOrientation:43
      }  // > CustomCode.changeOrientation:44
      break;  // > CustomCode.changeOrientation:45
    default:  // > CustomCode.changeOrientation:46
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:47
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:48
      return "100vh";  // > CustomCode.changeOrientation:49
  }  // > CustomCode.changeOrientation:50
  }  // > CustomCode.changeOrientation:51

  function startAccelerometer () {  // > CustomCode.startAccelerometer:1
   // msg="";  // > CustomCode.startAccelerometer:2
   // displaySlider="none";  // > CustomCode.startAccelerometer:3
    theta=0; // slider not used  // > CustomCode.startAccelerometer:4
  //  xCursor=xPivot=0;  // > CustomCode.startAccelerometer:5
    accelerometer.start();  // > CustomCode.startAccelerometer:6
    accelerometer.setAverageInterval(0.1);  // > CustomCode.startAccelerometer:7
    accelRunning=true;  // > CustomCode.startAccelerometer:8
   // updateAccValues();  // > CustomCode.startAccelerometer:9
  }  // > CustomCode.startAccelerometer:10

  function readAccelerometer () {  // > CustomCode.readAcceleromoter:1
    var viewData = accelerometer.getViewData();  // > CustomCode.readAcceleromoter:2
    accX = viewData.x;  // > CustomCode.readAcceleromoter:3
    accY = viewData.y;  // > CustomCode.readAcceleromoter:4
    accZ = viewData.z;  // > CustomCode.readAcceleromoter:5
    //Assume sensor is not present if all componets are zero  // > CustomCode.readAcceleromoter:6
    var hasData=viewData.x||viewData.y||viewData.z;  // > CustomCode.readAcceleromoter:7
    msg=hasData?"":"Accelerometer not detected. Use slider to simulate acceleration.";  // > CustomCode.readAcceleromoter:8
    //phi=hasData?Math.atan2(accX,-accY):0;  // > CustomCode.readAcceleromoter:9
    if(hasData){  // > CustomCode.readAcceleromoter:10
      phi=-Math.atan2(accX,-accY);   //tilt angle  // > CustomCode.readAcceleromoter:11
   //   xCursor=xPivot=0;              // center the pivor  // > CustomCode.readAcceleromoter:12
      g=Math.sqrt(accX*accX+accY*accY);  // > CustomCode.readAcceleromoter:13
    }else{  // fake data  // > CustomCode.readAcceleromoter:14
      phi=0; // no tilt  // > CustomCode.readAcceleromoter:15
      g=g0;  // > CustomCode.readAcceleromoter:16
      accX=0;  // > CustomCode.readAcceleromoter:17
      accY=-g; // from g  // > CustomCode.readAcceleromoter:18
    }  // > CustomCode.readAcceleromoter:19
  }  // > CustomCode.readAcceleromoter:20

  function stopAccelerometer () {  // > CustomCode.stopAcceleromoeter:1
    accelerometer.stop();  // > CustomCode.stopAcceleromoeter:2
   // msg="Use slider to simulate acceleration."  // > CustomCode.stopAcceleromoeter:3
  //  phi=0; // acceleromter angle not used  // > CustomCode.stopAcceleromoeter:4
    accX=0;  // > CustomCode.stopAcceleromoeter:5
    accY=g;  // > CustomCode.stopAcceleromoeter:6
    accZ=0;  // > CustomCode.stopAcceleromoeter:7
   // displaySlider="block";  // > CustomCode.stopAcceleromoeter:8
   // accelRunning=false;  // > CustomCode.stopAcceleromoeter:9
  }  // > CustomCode.stopAcceleromoeter:10

  function updateAccValues() {  // > CustomCode.updateAccValues:1
    if(accelRunning){  // > CustomCode.updateAccValues:2
      if(_isPaused ){  // > CustomCode.updateAccValues:3
        readAccelerometer();  // > CustomCode.updateAccValues:4
        _model.update();  // > CustomCode.updateAccValues:5
        _view._update();  // > CustomCode.updateAccValues:6
        _view._render();  // > CustomCode.updateAccValues:7
       }  // > CustomCode.updateAccValues:8
      window.setTimeout(updateAccValues, 100);// read accelerometer every 1/10 sec  // > CustomCode.updateAccValues:9
    }  // > CustomCode.updateAccValues:10
  }  // > CustomCode.updateAccValues:11

  _model.addToInitialization(function() {
    if (!__pagesEnabled["PolarCoordinates"]) return;
    var theta=0;   // > Initialization.PolarCoordinates:1
    var dtheta=2*Math.PI/ns;  // > Initialization.PolarCoordinates:2
    for(var i=0; i<ns; i++){  // > Initialization.PolarCoordinates:3
      dxSpoke[i]=2*maxR*Math.sin(theta);  // > Initialization.PolarCoordinates:4
      dySpoke[i]=2*maxR*Math.cos(theta);  // > Initialization.PolarCoordinates:5
      theta+=dtheta;  // > Initialization.PolarCoordinates:6
    }  // > Initialization.PolarCoordinates:7
    var dr=0.5;  // > Initialization.PolarCoordinates:8
    var r=dr;  // > Initialization.PolarCoordinates:9
    for(var i=0; i<nr; i++){  // > Initialization.PolarCoordinates:10
      radii[i]=2*r;  // > Initialization.PolarCoordinates:11
      r+=dr;  // > Initialization.PolarCoordinates:12
    }  // > Initialization.PolarCoordinates:13
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandientglint" cx="50%" cy="50%" r="90%" fx="90%" fy="10%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:0.5" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandientglint)"  // > Initialization.svg:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    //INITIALVALUESMANUALLY assumming know where to put the values  // > Initialization.axes:1
    _view.plottingPanel.getAxisX().setPosition([0,1]);  // > Initialization.axes:2
    //_view.plottingPanel.getTitleX().setPosition([0.5,0.1]);  // > Initialization.axes:3
    _view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:4
    //_view.plottingPanel.getTitleY().setPosition([0.5,0.05]);  // > Initialization.axes:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["plot"]) return;
    /*  // > Initialization.plot:1
    _view.plottingPanel.getAxisX().setPosition([0,1]);  // > Initialization.plot:2
    _view.plottingPanel.getTitleX().setPosition([0.5,0.1]);  // > Initialization.plot:3
    _view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.plot:4
    _view.plottingPanel.getTitleY().setPosition([0.5,0.05]);  // > Initialization.plot:5
    */  // > Initialization.plot:6
    var getRealWorldYMin = _view.plottingPanel.getRealWorldYMin();  // > Initialization.plot:7
    var getRealWorldYMax = _view.plottingPanel.getRealWorldYMax();  // > Initialization.plot:8
    _view.plottingPanel.getAxisX().setAbsoluteY(+getRealWorldYMin);  // > Initialization.plot:9
    _view.plottingPanel.getTitleX().setAbsolutePosition([0.,-getRealWorldYMin]);  // > Initialization.plot:10
    //alert(_view.plottingPanel.getMessageDecoration("TL").getPosition());  // > Initialization.plot:11
    //_view.plottingPanel.getMessageDecoration("TL").setPosition([-1,-0.05]);  // > Initialization.plot:12
    //_view._update();  // > Initialization.plot:13
    //alert(_view.plottingPanel.getMessageDecoration("TL").getPosition());  // > Initialization.plot:14
    //var xxx = _view.plottingPanel.getRealWorldCoordinates[0];  // > Initialization.plot:15
    //_view.plottingPanel.getMessageDecoration("TL").setPosition([_view._format(xxx,"0.0"),-0.05]);  // > Initialization.plot:16
    //_view._update();  // > Initialization.plot:17
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["radial"]) return;
    var container = document.createElement('div');  // > Initialization.radial:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.radial:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.radial:3
      '    <stop offset="0%" style="stop-color:rgb(0,255,255); stop-opacity:1" />'+  // > Initialization.radial:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />'+  // > Initialization.radial:5
      '  </radialGradient>'+  // > Initialization.radial:6
      '</defs></svg>';  // > Initialization.radial:7
    container.innerHTML = svggradient;  // > Initialization.radial:8
    document.body.appendChild(container);  // > Initialization.radial:9
    var container = document.createElement('div');  // > Initialization.radial:10
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.radial:11
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.radial:12
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.5" />'+  // > Initialization.radial:13
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.radial:14
      '  </radialGradient>'+  // > Initialization.radial:15
      '</defs></svg>';  // > Initialization.radial:16
    container.innerHTML = svggradient;  // > Initialization.radial:17
    document.body.appendChild(container);  // > Initialization.radial:18
    //"url(#mygrandient1)"  // > Initialization.radial:19
    var container = document.createElement('div');  // > Initialization.radial:20
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.radial:21
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="70%" fx="90%" fy="50%">'+  // > Initialization.radial:22
      '    <stop offset="0%" style="stop-color:rgb(0,255,0); stop-opacity:1" />'+  // > Initialization.radial:23
      '    <stop offset="100%" style="stop-color:rgb(255,255,255);stop-opacity:1" />'+  // > Initialization.radial:24
      '  </radialGradient>'+  // > Initialization.radial:25
      '</defs></svg>';  // > Initialization.radial:26
    container.innerHTML = svggradient;  // > Initialization.radial:27
    document.body.appendChild(container);  // > Initialization.radial:28
    //"url(#mygrandient2)"  // > Initialization.radial:29
    // messing with radial gradient 3  // > Initialization.radial:30
    var container = document.createElement('div');  // > Initialization.radial:31
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.radial:32
      '  <radialGradient id="mygrandient3" cx="50%" cy="50%" r="50%" fx="50%" fy="10%">'+  // > Initialization.radial:33
      '    <stop offset="0%" style="stop-color:rgb(255,0,0); stop-opacity:1" />'+  // > Initialization.radial:34
      '    <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />'+  // > Initialization.radial:35
      '  </radialGradient>'+  // > Initialization.radial:36
      '</defs></svg>';  // > Initialization.radial:37
    container.innerHTML = svggradient;  // > Initialization.radial:38
    document.body.appendChild(container);  // > Initialization.radial:39
    //"url(#mygrandient3)"  // > Initialization.radial:40
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["MathJax"]) return;
    //MathJax.Hub.Queue(["Typeset",MathJax.Hub]);  // > Initialization.MathJax:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["accelerometer"]) return;
    accelPresent=accelerometer.isPresent();  // for accelerometer; may give false positive  // > Initialization.accelerometer:1
    if (accelPresent) {  // > Initialization.accelerometer:2
      startAccelerometer();  // > Initialization.accelerometer:3
      b=0.5;  // > Initialization.accelerometer:4
    }else{  // > Initialization.accelerometer:5
      stopAccelerometer();  // > Initialization.accelerometer:6
    //b=0;  // > Initialization.accelerometer:7
    }  // > Initialization.accelerometer:8
    //resetTime ();  // > Initialization.accelerometer:9
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["acceleromoter"]) return;
    readAccelerometer ();  // > Evolution.acceleromoter:1
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["acceleromotermaxtime"]) return;
    if(t>15*60){  // pause after 15 minutes to save battery  // > Evolution.acceleromotermaxtime:1
      _pause();  // > Evolution.acceleromotermaxtime:2
      stopAccelerometer();  // > Evolution.acceleromotermaxtime:3
      msg="Saving battery. Reselect Sensor and press run to continue.";  // > Evolution.acceleromotermaxtime:4
      t=0;  // > Evolution.acceleromotermaxtime:5
    }  // > Evolution.acceleromotermaxtime:6
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    x= L*Math.sin(theta);  // > FixedRelations.FixRel Page:1
    y = -L*Math.cos(theta);  // > FixedRelations.FixRel Page:2
    vx = omega*L*Math.cos(theta);  // > FixedRelations.FixRel Page:3
    vy = omega*L*Math.sin(theta);  // > FixedRelations.FixRel Page:4
    v = Math.sqrt(vx*vx+vy*vy);  // > FixedRelations.FixRel Page:5
    alpha=-(g/L)*Math.sin(theta);  // > FixedRelations.FixRel Page:6
    // convert deg  // > FixedRelations.FixRel Page:7
    thetadegrees = theta*180/pi;  // > FixedRelations.FixRel Page:8
    xs= L*Math.sin(thetas);  // > FixedRelations.FixRel Page:9
    ys = -L*Math.cos(thetas);  // > FixedRelations.FixRel Page:10
    vxs = omega*L*Math.cos(thetas);  // > FixedRelations.FixRel Page:11
    vys = omega*L*Math.sin(thetas);  // > FixedRelations.FixRel Page:12
    //vs = Math.sqrt(vx*vx+vy*vy);  // > FixedRelations.FixRel Page:13
    alphas=-(g/L)*thetas;  // > FixedRelations.FixRel Page:14
    //xmin = -L;  // > FixedRelations.FixRel Page:15
    //xmax = L;  // > FixedRelations.FixRel Page:16
    //ymin = -L*1.2;  // > FixedRelations.FixRel Page:17
    //ymax = 0;  // > FixedRelations.FixRel Page:18
    //T= 2*pi*Math.sqrt(m/k);  // > FixedRelations.FixRel Page:19
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["period"]) return;
    T = 2*pi*Math.sqrt(L/g);  // > FixedRelations.period:1
    numberofswing = Math.floor(n1/2);  // > FixedRelations.period:2
    if (numberofswing>=20) _pause(); // to prevent error in T1[100] array  // > FixedRelations.period:3
    if(omega*omegastored<0){  // > FixedRelations.period:4
      n1++;  // > FixedRelations.period:5
       // > FixedRelations.period:6
      if(n1%2===0){  // > FixedRelations.period:7
        T1[nc]=t-ts;  // > FixedRelations.period:8
        ts= t;  // > FixedRelations.period:9
      }  // > FixedRelations.period:10
    // else T1[nc]=t*2.;// first half period  // > FixedRelations.period:11
    }  // > FixedRelations.period:12
    omegastored = omega; // to store value of omega  // > FixedRelations.period:13
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["polar"]) return;
    if (polarshow==false) {  // > FixedRelations.polar:1
      _view.plottingPanel.setProperty("TitleX","x");  // > FixedRelations.polar:2
      _view.plottingPanel.setProperty("TitleY","y");  // > FixedRelations.polar:3
      _view.plottingPanel.setProperty("GridXShow",true);  // > FixedRelations.polar:4
    // _view.drawingPanel3D.setProperty("DecorationType","NONE");  // > FixedRelations.polar:5
     }  // > FixedRelations.polar:6
     if (polarshow==true) {  // > FixedRelations.polar:7
      _view.plottingPanel.setProperty("TitleX"," ");  // > FixedRelations.polar:8
      _view.plottingPanel.setProperty("TitleY"," ");  // > FixedRelations.polar:9
      _view.plottingPanel.setProperty("GridXShow",false);  // > FixedRelations.polar:10
    // _view.drawingPanel3D.setProperty("DecorationType","NONE");  // > FixedRelations.polar:11
     }  // > FixedRelations.polar:12
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axes"]) return;
    if (_model.isPlaying()===true) { //NEED this for conflict with initialize page values  // > FixedRelations.axes:1
    //var getRealWorldYMin = _view.plottingPanel.getRealWorldYMin();  // > FixedRelations.axes:2
    //var getRealWorldYMax = _view.plottingPanel.getRealWorldYMax();  // > FixedRelations.axes:3
    //_view.plottingPanel.getAxisX().setAbsoluteY(getRealWorldYMax);  // > FixedRelations.axes:4
    //_view.plottingPanel.getAxisX().setAbsoluteY(_view.mass.getY());  // > FixedRelations.axes:5
    //_view.plottingPanel.getAxisY().setAbsoluteX(_view.mass.getX());  // > FixedRelations.axes:6
      _view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());  // > FixedRelations.axes:7
      _view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());  // > FixedRelations.axes:8
    //_view.plottingPanel.getTitleX().setPosition([0,_view.plottingPanel.getGrid().getFixedTickY()*0.9]);  // > FixedRelations.axes:9
    //_view.plottingPanel.getTitleY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());  // > FixedRelations.axes:10
    //_view.plottingPanel.getTitleX().setPosition([0.95,0.95]);  // > FixedRelations.axes:11
    //_view.plottingPanelxvst.getAxisX().setPosition([0,-_view.plottingPanelxvst.getRealWorldYMin()/(_view.plottingPanelxvst.getRealWorldYMax()-_view.plottingPanelxvst.getRealWorldYMin())]);  // > FixedRelations.axes:12
    //_view.plottingPanelxvst.getTitleX().setPosition([0.95,-_view.plottingPanelxvst.getRealWorldYMin()/(_view.plottingPanelxvst.getRealWorldYMax()-_view.plottingPanelxvst.getRealWorldYMin())]);  // > FixedRelations.axes:13
    }  // > FixedRelations.axes:14
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["theta","omega","thetas","omegas","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=theta) __mustReinitialize = true;
        __state[__cIn++] = theta;
        if (__state[__cIn]!=omega) __mustReinitialize = true;
        __state[__cIn++] = omega;
        if (__state[__cIn]!=thetas) __mustReinitialize = true;
        __state[__cIn++] = thetas;
        if (__state[__cIn]!=omegas) __mustReinitialize = true;
        __state[__cIn++] = omegas;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        thetas = __state[__cOut++];
        omegas = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var thetas = _aState[__cOut++];
        var omegas = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        //-(g/L)*Math.sin(theta) old code replace by alpha  // > Preliminary code for ODE.Evol Page:1
        var alpha=0;  // > Preliminary code for ODE.Evol Page:2
        if(accelRunning){ // use sensor and proper acceleration  // > Preliminary code for ODE.Evol Page:3
          alpha=-(g/L)*Math.sin(theta+phi)-b*L*omega;   // > Preliminary code for ODE.Evol Page:4
        }else{  // use slider and ignore sensor  // > Preliminary code for ODE.Evol Page:5
         // var ax=-0.1*k*(xPivot-xCursor); // scaled acceleration of pivot  // > Preliminary code for ODE.Evol Page:6
        //  alpha = -ax*Math.cos(theta)/L-g0*Math.sin(theta)/L-b*L*omega;  // > Preliminary code for ODE.Evol Page:7
           alpha = -g0*Math.sin(theta)/L-b*L*omega;  // > Preliminary code for ODE.Evol Page:8
        }  // > Preliminary code for ODE.Evol Page:9
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = omega; // Rate for ODE: Evol Page:theta
        _aRate[__cRate++] = alpha; // Rate for ODE: Evol Page:omega
        _aRate[__cRate++] = omegas; // Rate for ODE: Evol Page:thetas
        _aRate[__cRate++] = -(g/L)*(thetas); // Rate for ODE: Evol Page:omegas
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var thetas = _aState[__cOut++];
        var omegas = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        thetas = __state[__cOut++];
        omegas = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = theta;
        __state[__cIn++] = omega;
        __state[__cIn++] = thetas;
        __state[__cIn++] = omegas;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var theta = _aState[__cOut++];
        var omega = _aState[__cOut++];
        var thetas = _aState[__cOut++];
        var omegas = _aState[__cOut++];
        var t = _aState[__cOut++];
        if (accelRunning==false){  // > Event zero-condition for page Evol Page:1
        return numberofswing-1;  // > Event zero-condition for page Evol Page:2
        }  // > Event zero-condition for page Evol Page:3
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        theta = __state[__cOut++];
        omega = __state[__cOut++];
        thetas = __state[__cOut++];
        omegas = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = theta;
        __state[__cIn++] = omega;
        __state[__cIn++] = thetas;
        __state[__cIn++] = omegas;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        t = t-dt;  // > Event action for page Evol Page:1
        _pause();  // > Event action for page Evol Page:2
        text= "paused";  // > Event action for page Evol Page:3
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_theta(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_omega(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_thetas(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_omegas(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new SHM01_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.Full.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'Full'
          _view.Full.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'Full'
          _view.plottingPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisXShow",  function() { return !polarshow; } ); // HtmlView Page linking property 'AxisXShow' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("GridXShow",  function() { return !polarshow; } ); // HtmlView Page linking property 'GridXShow' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return !print?text:""; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDrag", function(_data,_info) {
  _view.plottingPanel.getAxisX().setAbsoluteY(_view.plottingPanel.getGrid().getFixedTickY());
    _view.plottingPanel.getAxisY().setAbsoluteX(_view.plottingPanel.getGrid().getFixedTickX());

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("GridYShow",  function() { return !polarshow; } ); // HtmlView Page linking property 'GridYShow' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisYShow",  function() { return !polarshow; } ); // HtmlView Page linking property 'AxisYShow' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Visibility",  function() { return !polarshow; } ); // HtmlView Page linking property 'Visibility' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BLMessage",  function() { return !print?"accelPresent="+accelPresent+"\naccX ="+accX.toFixed(2)+"\naccY ="+accY.toFixed(2)+"\naccZ ="+accZ.toFixed(2):""; } ); // HtmlView Page linking property 'BLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return !print?"T simple-real = "+_view._format(T1,"0.000") + " s & \nT shm =" + _view._format(T,"0.000") + " s "+"\nt = "+_view._format(t,"0.000") + " s ,\n"+ "numberofswing ="+_view._format(numberofswing,"00")+"\nb="+b.toFixed(1)+" 1/sm":""; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.polar.linkProperty("Visibility",  function() { return polarshow; }, function(_v) { polarshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'polar'
          _view.radiiSet.linkProperty("NumberOfElements",  function() { return nr; }, function(_v) { nr = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'radiiSet'
          _view.radiiSet.linkProperty("SizeX",  function() { return radii; }, function(_v) { radii = _v; } ); // HtmlView Page linking property 'SizeX' for element 'radiiSet'
          _view.radiiSet.linkProperty("SizeY",  function() { return radii; }, function(_v) { radii = _v; } ); // HtmlView Page linking property 'SizeY' for element 'radiiSet'
          _view.spokeSet.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'spokeSet'
          _view.spokeSet.linkProperty("SizeX",  function() { return dxSpoke; }, function(_v) { dxSpoke = _v; } ); // HtmlView Page linking property 'SizeX' for element 'spokeSet'
          _view.spokeSet.linkProperty("SizeY",  function() { return dySpoke; }, function(_v) { dySpoke = _v; } ); // HtmlView Page linking property 'SizeY' for element 'spokeSet'
          _view.segment.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segment'
          _view.segment.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segment'
          _view.shmdrivenmasspostion.linkProperty("X",  function() { return xs; }, function(_v) { xs = _v; } ); // HtmlView Page linking property 'X' for element 'shmdrivenmasspostion'
          _view.shmdrivenmasspostion.linkProperty("Y",  function() { return ys; }, function(_v) { ys = _v; } ); // HtmlView Page linking property 'Y' for element 'shmdrivenmasspostion'
          _view.shmdrivenmasspostion.linkProperty("Visibility",  function() { return shm; }, function(_v) { shm = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shmdrivenmasspostion'
          _view.group.linkProperty("X",  function() { return xs; }, function(_v) { xs = _v; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return ys; }, function(_v) { ys = _v; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.group.linkProperty("Visibility",  function() { return shm; }, function(_v) { shm = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group'
          _view.shm.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'shm'
          _view.group2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.group2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'group2'
          _view.shm2.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'shm2'
          _view.mass.linkProperty("Transformation",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Transformation' for element 'mass'
          _view.mass.setAction("OnDrag", function(_data,_info) {
  newPosition();
  _view.comboBox.setSelectedOptions(["user defined"]);

}); // HtmlView Page setting action 'OnDrag' for element 'mass'
          _view.mass.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mass'
          _view.mass.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'mass'
          _view.controlPanel.linkProperty("Visibility",  function() { return !print; } ); // HtmlView Page linking property 'Visibility' for element 'controlPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["show SHM off","show SHM","polar coordinates show","polar coordinates hide","ϑ =0°","ϑ =1°","ϑ =2°","ϑ =3°","ϑ =4°","ϑ =5°","ϑ =6°","ϑ =7°","ϑ =8°","ϑ =9°","ϑ =10°","ϑ =20°","ϑ =30°","ϑ =40°","ϑ =50°","ϑ =60°","ϑ =70°","ϑ =80°","ϑ =90°","L =1","L =2","L =3","L =4","L =5","L =6","L =7","Drag=0.0","Drag=0.5","Drag=1.0","Drag=1.5","Drag=2.0","Drag=5.0","user defined","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  //var option = _view.comboBox.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="user defined"){
    
    }
  //printing starts here
  else if (option == "print"){
    print = true;
    }
  //printing ends here
    else if ( option=="show SHM"){
  shm=true;
    }
    else if ( option=="show SHM off"){
  shm=false;
    }
    
  //"polar coordinates show","polar coordinates hide"
  else if ( option=="polar coordinates show"){
  polarshow=true;
    }
    else if ( option=="polar coordinates hide"){
  polarshow=false;
    }
  else if ( option=="ϑ =0°"){
  thetadegrees = 0;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =1°"){
  thetadegrees = 1;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =2°"){
  thetadegrees = 2;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =3°"){
  thetadegrees = 3;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =4°"){
  thetadegrees = 4;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =5°"){
  thetadegrees = 5;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =6°"){
  thetadegrees = 6;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =7°"){
  thetadegrees = 7;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =8°"){
  thetadegrees = 8;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =9°"){
  thetadegrees = 9;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =10°"){
  thetadegrees = 10;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =20°"){
  thetadegrees = 20;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =30°"){
  thetadegrees = 30;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =40°"){
  thetadegrees = 40;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =50°"){
  thetadegrees = 50;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =60°"){
  thetadegrees = 60;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =70°"){
  thetadegrees = 70;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =80°"){
  thetadegrees = 80;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
    else if ( option=="ϑ =90°"){
  thetadegrees = 90;
  theta = thetadegrees/180*pi;
  thetas = thetadegrees/180*pi;
    }
     else if ( option=="L =1"){
  L = 1;
    }
    else if ( option=="L =2"){
  L = 2;
    }
    else if ( option=="L =3"){
  L = 3;
    }
    else if ( option=="L =4"){
  L = 4;
    }
    else if ( option=="L =5"){
  L = 5;
    }
    else if ( option=="L =6"){
  L = 6;
    }
    else if ( option=="L =7"){
  L = 7;
    }
    //"b=0.0","b=0.5","b=1.0","b=1.5","b=2.0","b=5.0",
    else if ( option=="Drag=0.0"){
  b=0.0;
    }
    else if ( option=="Drag=0.5"){
  b=0.5;
    }
    else if ( option=="Drag=1.0"){
  b=1.0;
    }
    else if ( option=="Drag=1.5"){
  b=1.5;
    }
    else if ( option=="Drag=2.0"){
  b=2.0;
    }
    else if ( option=="Drag=5.0"){
  b=5.0;
    }
    
    
    
    
  if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    //var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(5);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function SHM01_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = SHM01_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('SHM01','./SHM01.xhtml');

  return _view;
} // end of main function

function SHM01_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"Full", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'Full'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.Full) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel2'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",0.5) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AllowScalingDragging",true) // EJsS HtmlView.HtmlView Page: setting property 'AllowScalingDragging' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Background","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Title","Pendulum Model m = 1 kg and g = 9.81 m/s^2") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",1.2) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-1.2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-1.2) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"polar", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'polar'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.polar) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("SizeX",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shape'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'shape'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shape'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"radiiSet", _view.polar) // EJsS HtmlView.HtmlView Page: declaration of element 'radiiSet'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'radiiSet'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'radiiSet'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'radiiSet'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'radiiSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'radiiSet'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'radiiSet'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"spokeSet", _view.polar) // EJsS HtmlView.HtmlView Page: declaration of element 'spokeSet'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'spokeSet'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'spokeSet'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'spokeSet'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'spokeSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'spokeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"segment", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segment'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'segment'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'segment'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segment'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shmdrivenmasspostion", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shmdrivenmasspostion'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shmdrivenmasspostion'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shmdrivenmasspostion'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shmdrivenmasspostion'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shmdrivenmasspostion'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shmdrivenmasspostion'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shmdrivenmasspostion'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shmdrivenmasspostion'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"shm", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'shm'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shm'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shm'
      .setProperty("Y",-0.05) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shm'
      .setProperty("Text","SHM") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'shm'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shm'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"shm2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'shm2'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shm2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'shm2'
      .setProperty("Y",-0.05) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'shm2'
      .setProperty("Text","Pendulum") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'shm2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shm2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mass", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mass'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mass'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mass'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mass'
      .setProperty("SizeX",40) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'mass'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mass'
      .setProperty("SizeY",40) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'mass'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'mass'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mass'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mass'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.Full) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "30px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Pendulum Toy<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM01/images/thumb.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM01/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM01/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM01/01authorPacoEsquembre2011.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM01/01authorwc_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM01/01authorFelix_J_Garcia_Clemente.png" />
 weelookang@gmail.com; Fu-Kwun Hwang; Francisco Esquembre; Wolfgang Christian; Félix J. García
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, creative commons attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new SHM01("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM01/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
