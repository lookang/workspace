<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Circular Motion Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function SHM045(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var inputdropmenu; // EjsS Model.Variables.Var Table.inputdropmenu
  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi
  var vvst; // EjsS Model.Variables.Var Table.vvst
  var avst; // EjsS Model.Variables.Var Table.avst

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var iOS; // EjsS Model.Variables.layout.iOS
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var selectedview; // EjsS Model.Variables.layout.selectedview
  var world; // EjsS Model.Variables.layout.world
  var graph; // EjsS Model.Variables.layout.graph
  var Width2; // EjsS Model.Variables.layout.Width2
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var cta; // EjsS Model.Variables.simplespring.cta
  var ctas; // EjsS Model.Variables.simplespring.ctas
  var cta2; // EjsS Model.Variables.simplespring.cta2
  var cta2s; // EjsS Model.Variables.simplespring.cta2s
  var ctadeg; // EjsS Model.Variables.simplespring.ctadeg
  var cta2deg; // EjsS Model.Variables.simplespring.cta2deg
  var phi; // EjsS Model.Variables.simplespring.phi
  var phideg; // EjsS Model.Variables.simplespring.phideg
  var omega; // EjsS Model.Variables.simplespring.omega
  var omega2; // EjsS Model.Variables.simplespring.omega2
  var sign; // EjsS Model.Variables.simplespring.sign
  var sign2; // EjsS Model.Variables.simplespring.sign2
  var A; // EjsS Model.Variables.simplespring.A
  var A2; // EjsS Model.Variables.simplespring.A2
  var m; // EjsS Model.Variables.simplespring.m
  var k; // EjsS Model.Variables.simplespring.k
  var l; // EjsS Model.Variables.simplespring.l
  var x; // EjsS Model.Variables.simplespring.x
  var y; // EjsS Model.Variables.simplespring.y
  var x2; // EjsS Model.Variables.simplespring.x2
  var y2; // EjsS Model.Variables.simplespring.y2
  var vx; // EjsS Model.Variables.simplespring.vx
  var vy; // EjsS Model.Variables.simplespring.vy
  var t; // EjsS Model.Variables.simplespring.t
  var tcst; // EjsS Model.Variables.simplespring.tcst
  var X; // EjsS Model.Variables.simplespring.X
  var T; // EjsS Model.Variables.simplespring.T
  var dt; // EjsS Model.Variables.simplespring.dt
  var w; // EjsS Model.Variables.simplespring.w
  var a; // EjsS Model.Variables.simplespring.a
  var f; // EjsS Model.Variables.simplespring.f
  var fStr; // EjsS Model.Variables.simplespring.fStr
  var gStr; // EjsS Model.Variables.simplespring.gStr
  var showobject2; // EjsS Model.Variables.simplespring.showobject2

  var dcangle; // EjsS Model.Variables.angle.dcangle
  var nangle; // EjsS Model.Variables.angle.nangle
  var px; // EjsS Model.Variables.angle.px
  var py; // EjsS Model.Variables.angle.py
  var c; // EjsS Model.Variables.angle.c
  var counter; // EjsS Model.Variables.angle.counter
  var polPts; // EjsS Model.Variables.angle.polPts
  var pxnew; // EjsS Model.Variables.angle.pxnew
  var pynew; // EjsS Model.Variables.angle.pynew
  var polPtsnew; // EjsS Model.Variables.angle.polPtsnew
  var dcanglenew; // EjsS Model.Variables.angle.dcanglenew

  var selectedmodel; // EjsS Model.Variables.functionY.selectedmodel
  var xmodel; // EjsS Model.Variables.functionY.xmodel
  var showmodel; // EjsS Model.Variables.functionY.showmodel
  var functionY; // EjsS Model.Variables.functionY.functionY
  var solutionY; // EjsS Model.Variables.functionY.solutionY

  var tpointA; // EjsS Model.Variables.phasedifferencedraw.tpointA
  var pointA; // EjsS Model.Variables.phasedifferencedraw.pointA
  var tpointA2; // EjsS Model.Variables.phasedifferencedraw.tpointA2
  var pointA2; // EjsS Model.Variables.phasedifferencedraw.pointA2

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      inputdropmenu : inputdropmenu,
      print : print,
      fontb : fontb,
      font : font,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      vvst : vvst,
      avst : avst,
      isAndroid : isAndroid,
      iPad : iPad,
      iPhone : iPhone,
      iOS : iOS,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      selectedview : selectedview,
      world : world,
      graph : graph,
      Width2 : Width2,
      disabledworld : disabledworld,
      disabled : disabled,
      cta : cta,
      ctas : ctas,
      cta2 : cta2,
      cta2s : cta2s,
      ctadeg : ctadeg,
      cta2deg : cta2deg,
      phi : phi,
      phideg : phideg,
      omega : omega,
      omega2 : omega2,
      sign : sign,
      sign2 : sign2,
      A : A,
      A2 : A2,
      m : m,
      k : k,
      l : l,
      x : x,
      y : y,
      x2 : x2,
      y2 : y2,
      vx : vx,
      vy : vy,
      t : t,
      tcst : tcst,
      X : X,
      T : T,
      dt : dt,
      w : w,
      a : a,
      f : f,
      fStr : fStr,
      gStr : gStr,
      showobject2 : showobject2,
      dcangle : dcangle,
      nangle : nangle,
      px : px,
      py : py,
      c : c,
      counter : counter,
      polPts : polPts,
      pxnew : pxnew,
      pynew : pynew,
      polPtsnew : polPtsnew,
      dcanglenew : dcanglenew,
      selectedmodel : selectedmodel,
      xmodel : xmodel,
      showmodel : showmodel,
      functionY : functionY,
      solutionY : solutionY,
      tpointA : tpointA,
      pointA : pointA,
      tpointA2 : tpointA2,
      pointA2 : pointA2
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.inputdropmenu != "undefined") inputdropmenu = json.inputdropmenu;
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.graph != "undefined") graph = json.graph;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.ctas != "undefined") ctas = json.ctas;
    if(typeof json.cta2 != "undefined") cta2 = json.cta2;
    if(typeof json.cta2s != "undefined") cta2s = json.cta2s;
    if(typeof json.ctadeg != "undefined") ctadeg = json.ctadeg;
    if(typeof json.cta2deg != "undefined") cta2deg = json.cta2deg;
    if(typeof json.phi != "undefined") phi = json.phi;
    if(typeof json.phideg != "undefined") phideg = json.phideg;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.omega2 != "undefined") omega2 = json.omega2;
    if(typeof json.sign != "undefined") sign = json.sign;
    if(typeof json.sign2 != "undefined") sign2 = json.sign2;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.A2 != "undefined") A2 = json.A2;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.tcst != "undefined") tcst = json.tcst;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.fStr != "undefined") fStr = json.fStr;
    if(typeof json.gStr != "undefined") gStr = json.gStr;
    if(typeof json.showobject2 != "undefined") showobject2 = json.showobject2;
    if(typeof json.dcangle != "undefined") dcangle = json.dcangle;
    if(typeof json.nangle != "undefined") nangle = json.nangle;
    if(typeof json.px != "undefined") px = json.px;
    if(typeof json.py != "undefined") py = json.py;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.polPts != "undefined") polPts = json.polPts;
    if(typeof json.pxnew != "undefined") pxnew = json.pxnew;
    if(typeof json.pynew != "undefined") pynew = json.pynew;
    if(typeof json.polPtsnew != "undefined") polPtsnew = json.polPtsnew;
    if(typeof json.dcanglenew != "undefined") dcanglenew = json.dcanglenew;
    if(typeof json.selectedmodel != "undefined") selectedmodel = json.selectedmodel;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.solutionY != "undefined") solutionY = json.solutionY;
    if(typeof json.tpointA != "undefined") tpointA = json.tpointA;
    if(typeof json.pointA != "undefined") pointA = json.pointA;
    if(typeof json.tpointA2 != "undefined") tpointA2 = json.tpointA2;
    if(typeof json.pointA2 != "undefined") pointA2 = json.pointA2;
  };

  _model._inputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "vvst",  "avst",  "isAndroid",  "iPad",  "iPhone",  "iOS",  "Width",  "Height",  "Width1",  "selectedview",  "world",  "graph",  "Width2",  "disabledworld",  "disabled",  "cta",  "ctas",  "cta2",  "cta2s",  "ctadeg",  "cta2deg",  "phi",  "phideg",  "omega",  "omega2",  "sign",  "sign2",  "A",  "A2",  "m",  "k",  "l",  "x",  "y",  "x2",  "y2",  "vx",  "vy",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "fStr",  "gStr",  "showobject2",  "dcangle",  "nangle",  "px",  "py",  "c",  "counter",  "polPts",  "pxnew",  "pynew",  "polPtsnew",  "dcanglenew",  "selectedmodel",  "xmodel",  "showmodel",  "functionY",  "solutionY",  "tpointA",  "pointA",  "tpointA2",  "pointA2"]; 

  _model._outputAndPublicParameters = ["inputdropmenu",  "print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "vvst",  "avst",  "isAndroid",  "iPad",  "iPhone",  "iOS",  "Width",  "Height",  "Width1",  "selectedview",  "world",  "graph",  "Width2",  "disabledworld",  "disabled",  "cta",  "ctas",  "cta2",  "cta2s",  "ctadeg",  "cta2deg",  "phi",  "phideg",  "omega",  "omega2",  "sign",  "sign2",  "A",  "A2",  "m",  "k",  "l",  "x",  "y",  "x2",  "y2",  "vx",  "vy",  "t",  "tcst",  "X",  "T",  "dt",  "w",  "a",  "f",  "fStr",  "gStr",  "showobject2",  "dcangle",  "nangle",  "px",  "py",  "c",  "counter",  "polPts",  "pxnew",  "pynew",  "polPtsnew",  "dcanglenew",  "selectedmodel",  "xmodel",  "showmodel",  "functionY",  "solutionY",  "tpointA",  "pointA",  "tpointA2",  "pointA2"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["SVG"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["FixRel Page 2"] = true;
    __pagesEnabled["angle"] = false;
    __pagesEnabled["newwaytodrawangle"] = true;
    __pagesEnabled["determinemaximumtodrawphasediff"] = true;
    __pagesEnabled["axes"] = true;
  });

  _model.addToReset(function() {
    inputdropmenu = true; // EjsS Model.Variables.Var Table.inputdropmenu
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.Var Table.font
    xmin = -0.8; // EjsS Model.Variables.Var Table.xmin
    xmax = 0.8; // EjsS Model.Variables.Var Table.xmax
    ymin = -1; // EjsS Model.Variables.Var Table.ymin
    ymax = 1; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "user_defined";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "select/change θ₁ & θ₂ and \n click play"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"600":"100%"; // EjsS Model.Variables.layout.Height
    selectedview = new Array(1); // EjsS Model.Variables.layout.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview
        selectedview[_i0] = "both";  // EjsS Model.Variables.layout.selectedview
      }
    }());
    world = true; // EjsS Model.Variables.layout.world
    graph = true; // EjsS Model.Variables.layout.graph
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
  });

  _model.addToReset(function() {
    cta = pi/2; // EjsS Model.Variables.simplespring.cta
    ctas = cta; // EjsS Model.Variables.simplespring.ctas
    cta2 = pi; // EjsS Model.Variables.simplespring.cta2
    cta2s = cta2; // EjsS Model.Variables.simplespring.cta2s
    ctadeg = cta*180/pi; // EjsS Model.Variables.simplespring.ctadeg
    cta2deg = cta2*180/pi; // EjsS Model.Variables.simplespring.cta2deg
    phi = cta2-cta; // EjsS Model.Variables.simplespring.phi
    phideg = cta2deg-ctadeg; // EjsS Model.Variables.simplespring.phideg
    omega = 1; // EjsS Model.Variables.simplespring.omega
    omega2 = 1; // EjsS Model.Variables.simplespring.omega2
    sign = -1; // EjsS Model.Variables.simplespring.sign
    sign2 = -1; // EjsS Model.Variables.simplespring.sign2
    A = Math.min(Math.max(Math.random(),0.5),0.9); // EjsS Model.Variables.simplespring.A
    A2 = Math.min(Math.max(Math.random(),0.5),0.9); // EjsS Model.Variables.simplespring.A2
    m = 1; // EjsS Model.Variables.simplespring.m
    k = 1; // EjsS Model.Variables.simplespring.k
    l = 0; // EjsS Model.Variables.simplespring.l
    x = A*Math.sin(cta); // EjsS Model.Variables.simplespring.x
    y = A*Math.cos(cta); // EjsS Model.Variables.simplespring.y
    x2 = A2*Math.sin(cta2); // EjsS Model.Variables.simplespring.x2
    y2 = A2*Math.cos(cta2); // EjsS Model.Variables.simplespring.y2
    vx = 0; // EjsS Model.Variables.simplespring.vx
    vy = 0; // EjsS Model.Variables.simplespring.vy
    t = 0; // EjsS Model.Variables.simplespring.t
    X = x-l; // EjsS Model.Variables.simplespring.X
    T = 2*pi*Math.sqrt(m/k); // EjsS Model.Variables.simplespring.T
    dt = T/100; // EjsS Model.Variables.simplespring.dt
    w = 2*pi/T; // EjsS Model.Variables.simplespring.w
    a = -w^2*x; // EjsS Model.Variables.simplespring.a
    fStr = "A*sin(omega*t)"; // EjsS Model.Variables.simplespring.fStr
    gStr = "A2*sin(omega2*t)"; // EjsS Model.Variables.simplespring.gStr
  });

  _model.addToReset(function() {
    nangle = 19; // EjsS Model.Variables.angle.nangle
    px = new Array(nangle); // EjsS Model.Variables.angle.px
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.angle.px
        px[_i0] = 0;  // EjsS Model.Variables.angle.px
      }
    }());
    py = new Array(nangle); // EjsS Model.Variables.angle.py
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.angle.py
        py[_i0] = 0;  // EjsS Model.Variables.angle.py
      }
    }());
    c = 0; // EjsS Model.Variables.angle.c
    polPts = new Array(nangle); // EjsS Model.Variables.angle.polPts
    pxnew = new Array(nangle); // EjsS Model.Variables.angle.pxnew
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.angle.pxnew
        pxnew[_i0] = 0;  // EjsS Model.Variables.angle.pxnew
      }
    }());
    pynew = new Array(nangle); // EjsS Model.Variables.angle.pynew
    (function () {
      var _i0;
      for (_i0=0; _i0<nangle; _i0+=1) {  // EjsS Model.Variables.angle.pynew
        pynew[_i0] = 0;  // EjsS Model.Variables.angle.pynew
      }
    }());
    polPtsnew = new Array(nangle); // EjsS Model.Variables.angle.polPtsnew
    dcanglenew = 0; // EjsS Model.Variables.angle.dcanglenew
  });

  _model.addToReset(function() {
    selectedmodel = new Array(1); // EjsS Model.Variables.functionY.selectedmodel
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.functionY.selectedmodel
        selectedmodel[_i0] = "0";  // EjsS Model.Variables.functionY.selectedmodel
      }
    }());
    xmodel = 0; // EjsS Model.Variables.functionY.xmodel
    functionY = "0"; // EjsS Model.Variables.functionY.functionY
  });

  _model.addToReset(function() {
    tpointA = 0; // EjsS Model.Variables.phasedifferencedraw.tpointA
    pointA = 0; // EjsS Model.Variables.phasedifferencedraw.pointA
    tpointA2 = 0; // EjsS Model.Variables.phasedifferencedraw.tpointA2
    pointA2 = 0; // EjsS Model.Variables.phasedifferencedraw.pointA2
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(24);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.Lib Page:1
  // does not work for iOS   // > CustomCode.Lib Page:2
  /*jslint browser:true */  // > CustomCode.Lib Page:3
  function toggleFullScreen() {  // > CustomCode.Lib Page:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.Lib Page:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.Lib Page:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.Lib Page:7
        document.documentElement.requestFullscreen();  // > CustomCode.Lib Page:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.Lib Page:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.Lib Page:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.Lib Page:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.Lib Page:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.Lib Page:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.Lib Page:14
      }  // > CustomCode.Lib Page:15
    } else {  // > CustomCode.Lib Page:16
      if (document.exitFullscreen) {  // > CustomCode.Lib Page:17
        document.exitFullscreen();  // > CustomCode.Lib Page:18
      } else if (document.msExitFullscreen) {  // > CustomCode.Lib Page:19
        document.msExitFullscreen();  // > CustomCode.Lib Page:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.Lib Page:21
        document.mozCancelFullScreen();  // > CustomCode.Lib Page:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.Lib Page:23
        document.webkitExitFullscreen();  // > CustomCode.Lib Page:24
      }  // > CustomCode.Lib Page:25
    }  // > CustomCode.Lib Page:26
  }  // > CustomCode.Lib Page:27

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.98 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  var kepub =0.9 ;  // > CustomCode.changeOrientation:4
  // check platform for Apps  // > CustomCode.changeOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:7
     // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
     // > CustomCode.changeOrientation:15
  switch (window.orientation) {  // > CustomCode.changeOrientation:16
    case 0:  // > CustomCode.changeOrientation:17
    case 180:  // > CustomCode.changeOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:21
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:22
        // return window.screen.height;  // > CustomCode.changeOrientation:23
        //  return window.innerHeight;  // > CustomCode.changeOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
      }  // > CustomCode.changeOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:29
        // return window.screen.height;  // > CustomCode.changeOrientation:30
        //  return window.innerHeight;  // > CustomCode.changeOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:32
      }  // > CustomCode.changeOrientation:33
      else {  // > CustomCode.changeOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:35
        return window.innerHeight*k;  // > CustomCode.changeOrientation:36
      }  // > CustomCode.changeOrientation:37
      break;  // > CustomCode.changeOrientation:38
    case 90:  // > CustomCode.changeOrientation:39
    case -90:  // > CustomCode.changeOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:41
     // > CustomCode.changeOrientation:42
      if (iOSapp){ // App  // > CustomCode.changeOrientation:43
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:44
        // return window.screen.height;  // > CustomCode.changeOrientation:45
        //  return window.innerHeight;  // > CustomCode.changeOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:47
      }  // > CustomCode.changeOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:51
        // return window.screen.height;  // > CustomCode.changeOrientation:52
        //  return window.innerHeight;  // > CustomCode.changeOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:54
      }  // > CustomCode.changeOrientation:55
      else { // browser Android and PC  // > CustomCode.changeOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:57
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:58
        return window.innerHeight*k;  // > CustomCode.changeOrientation:59
      }  // > CustomCode.changeOrientation:60
      break;  // > CustomCode.changeOrientation:61
    default:  // > CustomCode.changeOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:64
      return window.innerHeight*k;  // > CustomCode.changeOrientation:65
  }  // > CustomCode.changeOrientation:66
     // > CustomCode.changeOrientation:67
  }  // > CustomCode.changeOrientation:68
     // > CustomCode.changeOrientation:69

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullScreen:1
  // does not work for iOS   // > CustomCode.fullScreen:2
  /*jslint browser:true */  // > CustomCode.fullScreen:3
  function toggleFullScreen() {  // > CustomCode.fullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullScreen:14
      }  // > CustomCode.fullScreen:15
    } else {  // > CustomCode.fullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullScreen:17
        document.exitFullscreen();  // > CustomCode.fullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullScreen:19
        document.msExitFullscreen();  // > CustomCode.fullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullScreen:24
      }  // > CustomCode.fullScreen:25
    }  // > CustomCode.fullScreen:26
  }  // > CustomCode.fullScreen:27

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  //http://stackoverflow.com/questions/11381673/detecting-a-mobile-browser  // > CustomCode.mobilebrowser:1
  function detectmob() {  // > CustomCode.mobilebrowser:2
   if( navigator.userAgent.match(/Android/i)  // > CustomCode.mobilebrowser:3
   || navigator.userAgent.match(/webOS/i)  // > CustomCode.mobilebrowser:4
  // || navigator.userAgent.match(/iPhone/i)  // > CustomCode.mobilebrowser:5
  // || navigator.userAgent.match(/iPad/i)  // > CustomCode.mobilebrowser:6
  // || navigator.userAgent.match(/iPod/i)  // > CustomCode.mobilebrowser:7
   || navigator.userAgent.match(/BlackBerry/i)  // > CustomCode.mobilebrowser:8
   || navigator.userAgent.match(/Windows Phone/i)  // > CustomCode.mobilebrowser:9
   ){  // > CustomCode.mobilebrowser:10
      return true;  // > CustomCode.mobilebrowser:11
    }  // > CustomCode.mobilebrowser:12
   else {  // > CustomCode.mobilebrowser:13
      return false;  // > CustomCode.mobilebrowser:14
    }  // > CustomCode.mobilebrowser:15
  }  // > CustomCode.mobilebrowser:16

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    /*  // > Initialization.Init Page:1
    "hint: Xred = "+_view._format(A,"0.0")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(cta,"0.00")+"))"  // > Initialization.Init Page:2
    "hint: Xmagenta = "+_view._format(A2,"0.0")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(cta2,"0.00")+"))"  // > Initialization.Init Page:3
    */  // > Initialization.Init Page:4
    x = A*Math.sin(cta);  // > Initialization.Init Page:5
    y = A*Math.cos(cta);  // > Initialization.Init Page:6
    x2 = A2*Math.sin(cta2);  // > Initialization.Init Page:7
    y2 = A2*Math.cos(cta2);  // > Initialization.Init Page:8
    _view.plottingPanelxvst.getAxisX().setPosition([0,0.5]);  // > Initialization.Init Page:9
    _view.plottingPanelxvst.getTitleX().setPosition([0.95,0.5]);  // > Initialization.Init Page:10
    _view.plottingPanelxvst.getAxisY().setPosition([0.5,0]);  // > Initialization.Init Page:11
    _view.plottingPanelxvst.getTitleY().setPosition([0.5,0.98]);  // > Initialization.Init Page:12
    _view.plottingPanelxvst2.getAxisX().setPosition([0,0.5]);  // > Initialization.Init Page:13
    _view.plottingPanelxvst2.getTitleX().setPosition([0.95,0.5]);  // > Initialization.Init Page:14
    _view.plottingPanelxvst2.getAxisY().setPosition([0.045,0]);  // > Initialization.Init Page:15
    _view.plottingPanelxvst2.getTitleY().setPosition([0.055,0.9]);  // > Initialization.Init Page:16
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (Width1==undefined){   // > Initialization.undefined:1
      Width1="100%";  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
      if (Width2==undefined){   // > Initialization.undefined:4
      Width2="0%";  // > Initialization.undefined:5
      }  // > Initialization.undefined:6
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["SVG"]) return;
    var container = document.createElement('div');  // > Initialization.SVG:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.SVG:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="20%" fy="20%">'+  // > Initialization.SVG:3
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:1" />'+  // > Initialization.SVG:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.SVG:5
      '  </radialGradient>'+  // > Initialization.SVG:6
      '</defs></svg>';  // > Initialization.SVG:7
    container.innerHTML = svggradient;  // > Initialization.SVG:8
    document.body.appendChild(container);  // > Initialization.SVG:9
    //"url(#mygrandient)"  // > Initialization.SVG:10
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    x = A*Math.sin(cta);  // > FixedRelations.FixRel Page:1
    y = A*Math.cos(cta);  // > FixedRelations.FixRel Page:2
    x2 = A2*Math.sin(cta2);  // > FixedRelations.FixRel Page:3
    y2 = A2*Math.cos(cta2);  // > FixedRelations.FixRel Page:4
    //ctadeg = Math.toDegrees(cta)%360;  // > FixedRelations.FixRel Page:5
    //cta2deg = Math.toDegrees(cta2)%360;  // > FixedRelations.FixRel Page:6
    //ctadeg = -(2*pi+cta*180/pi)%360.0;  // > FixedRelations.FixRel Page:7
    //cta2deg = -(2*pi+cta2*180/pi)%360.0;  // > FixedRelations.FixRel Page:8
    ctadeg = (360.0-cta*180/pi)%360.0;  // > FixedRelations.FixRel Page:9
    cta2deg = (360.0-cta2*180/pi)%360.0;  // > FixedRelations.FixRel Page:10
    if (sign===-1){  // > FixedRelations.FixRel Page:11
    phideg = (360.0-(cta2deg-ctadeg))%360.0;  // > FixedRelations.FixRel Page:12
    }  // > FixedRelations.FixRel Page:13
    else if (sign===1) {  // > FixedRelations.FixRel Page:14
      phideg = (360.0-(ctadeg-cta2deg))%360.0;  // > FixedRelations.FixRel Page:15
      }  // > FixedRelations.FixRel Page:16
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page 2"]) return;
    xmodel=_view.fField.evaluate({ t : t, x : xmodel });   // > FixedRelations.FixRel Page 2:1
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["angle"]) return;
    px[0]=0; // for drawing angle polygon  // > FixedRelations.angle:1
    py[0]=0; //  // > FixedRelations.angle:2
    // if statement to draw polygon angle  // > FixedRelations.angle:3
    for( counter=1;counter<nangle;counter++){  // > FixedRelations.angle:4
    //  c=Math.atan2(y,x)-(i-1)*dcangle;  // modify to work drawing from black line  // > FixedRelations.angle:5
    //  c=(Math.atan2(y,x))-(i-1)*dcangle;  // > FixedRelations.angle:6
    if (sign===1){ //rotate clockwise  // > FixedRelations.angle:7
      dcangle = (2*pi+cta-cta2)/(nangle-2);  // > FixedRelations.angle:8
      c = (2*pi+cta-cta2)-(counter-1)*dcangle;  // > FixedRelations.angle:9
      px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta+c+pi/2); // complementary  // > FixedRelations.angle:10
    py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta+c+pi/2); //  // > FixedRelations.angle:11
    // px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta+c); // complementary  // > FixedRelations.angle:12
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta+c); //  // > FixedRelations.angle:13
      // c = (cta2-cta)-(counter-1)*dcangle;  // > FixedRelations.angle:14
     //  px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta-c+pi/2); //  // > FixedRelations.angle:15
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta-c+pi/2); //  // > FixedRelations.angle:16
    // px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta2+c+pi/2); // complementary  // > FixedRelations.angle:17
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta2+c+pi/2); //  // > FixedRelations.angle:18
    }  // > FixedRelations.angle:19
    else if (sign===-1){ //anticlock  // > FixedRelations.angle:20
      if (cta<2*pi)cta=cta+2*pi;  // > FixedRelations.angle:21
      if (cta2<2*pi)cta2=cta2+2*pi;  // > FixedRelations.angle:22
      if ((cta2-cta)>pi)dcangle = 2*pi-(cta-cta2)/(nangle-2); //special move  // > FixedRelations.angle:23
      if ((cta2-cta)<pi)dcangle = (cta2-cta)/(nangle-2);  // > FixedRelations.angle:24
     c = (cta2-cta)-(counter-1)*dcangle;  // > FixedRelations.angle:25
    // if ((Math.abs(cta2-cta)<pi)&&(Math.abs(cta2-cta)>0)) {  // > FixedRelations.angle:26
      px[counter]=0+Math.min(A,A2)/2*Math.cos(-cta-c+pi/2); //  // > FixedRelations.angle:27
    py[counter]=0+Math.min(A,A2)/2*Math.sin(-cta-c+pi/2); //  // > FixedRelations.angle:28
    //}  // > FixedRelations.angle:29
     // px[counter]=0+Math.min(A,A2)/2*Math.sin(-cta-c-pi/2); //  // > FixedRelations.angle:30
    //py[counter]=0+Math.min(A,A2)/2*Math.cos(-cta-c-pi/2); //  // > FixedRelations.angle:31
     //c = (cta-cta2)-(counter-1)*dcangle;  // > FixedRelations.angle:32
      // px[counter]=0+Math.min(A,A2)/2*Math.cos(c-cta-pi/4); //  // > FixedRelations.angle:33
    //py[counter]=0+Math.min(A,A2)/2*Math.sin(c-cta-pi/4); //  // > FixedRelations.angle:34
      }  // > FixedRelations.angle:35
    // if(c>pi)c-=2*pi; // to overcome pi to -pi problem  // > FixedRelations.angle:36
     // if(c<-pi)c+=2*pi;  // > FixedRelations.angle:37
     // else if (c>pi) c-=2*pi;  // > FixedRelations.angle:38
    }  // > FixedRelations.angle:39
    // polPts = [[0,0],[x,y],px[],py[]],[x2,y2]];  // > FixedRelations.angle:40
    polPts = [[px[0],py[0]],[px[1],py[1]],[px[2],py[2]],[px[3],py[3]],[px[4],py[4]],[px[5],py[5]],[px[6],py[6]],[px[7],py[7]],[px[8],py[8]],[px[9],py[9]],[px[10],py[10]],[px[11],py[11]],[px[12],py[12]],[px[13],py[13]],[px[14],py[14]],[px[15],py[15]],[px[16],py[16]],[px[17],py[17]],[px[18],py[18]],[px[19],py[19]]];  // > FixedRelations.angle:41
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["newwaytodrawangle"]) return;
    pxnew[0]=0; // for drawing angle polygon  // > FixedRelations.newwaytodrawangle:1
    pynew[0]=0; //  // > FixedRelations.newwaytodrawangle:2
    for( counter=1;counter<nangle;counter++){  // > FixedRelations.newwaytodrawangle:3
        // > FixedRelations.newwaytodrawangle:4
       // > FixedRelations.newwaytodrawangle:5
      if (phideg<180){  // > FixedRelations.newwaytodrawangle:6
        if  (sign===-1){  // > FixedRelations.newwaytodrawangle:7
     dcanglenew = (phideg*pi/180)/(nangle-2);  // > FixedRelations.newwaytodrawangle:8
     }  // > FixedRelations.newwaytodrawangle:9
     else if  (sign===1){  // > FixedRelations.newwaytodrawangle:10
     dcanglenew = -(phideg*pi/180)/(nangle-2);  // > FixedRelations.newwaytodrawangle:11
     }  // > FixedRelations.newwaytodrawangle:12
     c = (cta2-cta)-(counter-1)*dcanglenew;  // > FixedRelations.newwaytodrawangle:13
      pxnew[counter]=0+Math.min(A,A2)/2*Math.cos(-cta-c); //  // > FixedRelations.newwaytodrawangle:14
    pynew[counter]=0+Math.min(A,A2)/2*Math.sin(-cta-c); //  // > FixedRelations.newwaytodrawangle:15
     }  // > FixedRelations.newwaytodrawangle:16
     else if(phideg>180){  // > FixedRelations.newwaytodrawangle:17
        if  (sign===-1){  // > FixedRelations.newwaytodrawangle:18
          dcanglenew = -(2*pi-phideg*pi/180)/(nangle-2);  // > FixedRelations.newwaytodrawangle:19
          }  // > FixedRelations.newwaytodrawangle:20
         else if  (sign===1){  // > FixedRelations.newwaytodrawangle:21
          dcanglenew =(2*pi-phideg*pi/180)/(nangle-2);  // > FixedRelations.newwaytodrawangle:22
          }  // > FixedRelations.newwaytodrawangle:23
            // > FixedRelations.newwaytodrawangle:24
     c = (cta2-cta)-(counter-1)*dcanglenew;  // > FixedRelations.newwaytodrawangle:25
     // if ((Math.abs(cta2-cta)<pi)&&(Math.abs(cta2-cta)>0)) {  // > FixedRelations.newwaytodrawangle:26
      pxnew[counter]=0+Math.min(A,A2)/2*Math.cos(-cta2+c); //  // > FixedRelations.newwaytodrawangle:27
    pynew[counter]=0+Math.min(A,A2)/2*Math.sin(-cta2+c); //  // > FixedRelations.newwaytodrawangle:28
       }  // > FixedRelations.newwaytodrawangle:29
      }  // > FixedRelations.newwaytodrawangle:30
        // > FixedRelations.newwaytodrawangle:31
        // > FixedRelations.newwaytodrawangle:32
        // > FixedRelations.newwaytodrawangle:33
        // > FixedRelations.newwaytodrawangle:34
        // > FixedRelations.newwaytodrawangle:35
      polPtsnew = [[pxnew[0],pynew[0]],[pxnew[1],pynew[1]],[pxnew[2],pynew[2]],[pxnew[3],pynew[3]],[pxnew[4],pynew[4]],[pxnew[5],pynew[5]],[pxnew[6],pynew[6]],[pxnew[7],pynew[7]],[pxnew[8],pynew[8]],[pxnew[9],pynew[9]],[pxnew[10],pynew[10]],[pxnew[11],pynew[11]],[pxnew[12],pynew[12]],[pxnew[13],pynew[13]],[pxnew[14],pynew[14]],[pxnew[15],pynew[15]],[pxnew[16],pynew[16]],[pxnew[17],pynew[17]],[pxnew[18],pynew[18]],[pxnew[19],pynew[19]]];  // > FixedRelations.newwaytodrawangle:36
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["determinemaximumtodrawphasediff"]) return;
     if (pointA<y){ //finding maximum point in y  // > FixedRelations.determinemaximumtodrawphasediff:1
     pointA = Math.max(y,pointA);  // > FixedRelations.determinemaximumtodrawphasediff:2
     tpointA = t;  // > FixedRelations.determinemaximumtodrawphasediff:3
     }  // > FixedRelations.determinemaximumtodrawphasediff:4
     if (pointA2<y2){ //finding maximum point in y2  // > FixedRelations.determinemaximumtodrawphasediff:5
     pointA2 = Math.max(y2,pointA2);  // > FixedRelations.determinemaximumtodrawphasediff:6
     tpointA2 = t;  // > FixedRelations.determinemaximumtodrawphasediff:7
     }  // > FixedRelations.determinemaximumtodrawphasediff:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["axes"]) return;
    if (_model.isPlaying()===true) { //NEED this for conflict with initialize page values  // > FixedRelations.axes:1
    _view.plottingPanelxvst2.getAxisX().setAbsoluteY(_view.plottingPanelxvst2.getGrid().getFixedTickY());  // > FixedRelations.axes:2
    _view.plottingPanelxvst2.getAxisY().setAbsoluteX(_view.plottingPanelxvst2.getGrid().getFixedTickX());  // > FixedRelations.axes:3
    }  // > FixedRelations.axes:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["cta","cta2","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=cta) __mustReinitialize = true;
        __state[__cIn++] = cta;
        if (__state[__cIn]!=cta2) __mustReinitialize = true;
        __state[__cIn++] = cta2;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        cta2 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var cta2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = sign*omega; // Rate for ODE: Evol Page:cta
        _aRate[__cRate++] = sign2*omega2; // Rate for ODE: Evol Page:cta2
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var cta2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        cta2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = cta2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var cta = _aState[__cOut++];
        var cta2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        return t-T;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        cta = __state[__cOut++];
        cta2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = cta;
        __state[__cIn++] = cta2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _pause();  // > Event action for page Evol Page:1
        text = "paused";  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_cta(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_cta2(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new SHM045_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'fullscreen'
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.plottingPanelxvst.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("TRMessage",  function() { return print?"":"Circular Motion Model \n top view"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("TLMessage",  function() { return !print?text:""; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("BRMessage",  function() { return !print?"A blue = " +_view._format(A,"0.00") + " m "+"\n "+"A magenta = " +_view._format(A2,"0.00") + " m ":""; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanelxvst'
          _view.plottingPanelxvst.linkProperty("Display",  function() { return world?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanelxvst'
          _view.image.linkProperty("Transformation",  function() { return -cta; } ); // HtmlView Page linking property 'Transformation' for element 'image'
          _view.image.linkProperty("SizeX",  function() { return 2*Math.max(A,A2); } ); // HtmlView Page linking property 'SizeX' for element 'image'
          _view.image.linkProperty("SizeY",  function() { return 2*Math.max(A,A2); } ); // HtmlView Page linking property 'SizeY' for element 'image'
          _view.circleturntable.linkProperty("Transformation",  function() { return -cta; } ); // HtmlView Page linking property 'Transformation' for element 'circleturntable'
          _view.circleturntable.linkProperty("SizeX",  function() { return 2*Math.max(A,A2); } ); // HtmlView Page linking property 'SizeX' for element 'circleturntable'
          _view.circleturntable.linkProperty("SizeY",  function() { return 2*Math.max(A,A2); } ); // HtmlView Page linking property 'SizeY' for element 'circleturntable'
          _view.polygon2.linkProperty("Points",  function() { return polPts; }, function(_v) { polPts = _v; } ); // HtmlView Page linking property 'Points' for element 'polygon2'
          _view.polygon3.linkProperty("Points",  function() { return polPtsnew; }, function(_v) { polPtsnew = _v; } ); // HtmlView Page linking property 'Points' for element 'polygon3'
          _view.polygon3.linkProperty("Visibility",  function() { return phideg<180&&showobject2; } ); // HtmlView Page linking property 'Visibility' for element 'polygon3'
          _view.polygon.linkProperty("Points",  function() { return polPtsnew; }, function(_v) { polPtsnew = _v; } ); // HtmlView Page linking property 'Points' for element 'polygon'
          _view.polygon.linkProperty("Visibility",  function() { return phideg>180&&showobject2; } ); // HtmlView Page linking property 'Visibility' for element 'polygon'
          _view.arrow.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrow'
          _view.arrow.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrow'
          _view.trail.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.trailDot25.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot25'
          _view.trailDot25.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot25'
          _view.trailDot25.setAction("OnDrag", function(_data,_info) {
  cta = Math.atan2(x,y);
  ctas=cta;

}); // HtmlView Page setting action 'OnDrag' for element 'trailDot25'
          _view.trail22.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail22'
          _view.trail22.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail22'
          _view.trail22.linkProperty("InputX",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail22'
          _view.trail22.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail22'
          _view.trail22.linkProperty("InputY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail22'
          _view.trailDot222.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot222'
          _view.trailDot222.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot222'
          _view.trailDot222.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot222'
          _view.trailDot222.setAction("OnDrag", function(_data,_info) {
  cta2 = Math.atan2(x2,y2);
  cta2s=cta2;

}); // HtmlView Page setting action 'OnDrag' for element 'trailDot222'
          _view.arrow2.linkProperty("SizeX",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrow2'
          _view.arrow2.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'arrow2'
          _view.arrow2.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrow2'
          _view.guideslines.linkProperty("SizeX",  function() { return -x+2; } ); // HtmlView Page linking property 'SizeX' for element 'guideslines'
          _view.guideslines.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'guideslines'
          _view.guideslines.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'guideslines'
          _view.guidelines.linkProperty("SizeX",  function() { return -x2+2; } ); // HtmlView Page linking property 'SizeX' for element 'guidelines'
          _view.guidelines.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'guidelines'
          _view.guidelines.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'guidelines'
          _view.guidelines.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'guidelines'
          _view.model2.linkProperty("Y",  function() { return xmodel; }, function(_v) { xmodel = _v; } ); // HtmlView Page linking property 'Y' for element 'model2'
          _view.model2.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model2'
          _view.model2.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model2'
          _view.trailDot223.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot223'
          _view.trailDot2223.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot2223'
          _view.trailDot2223.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot2223'
          _view.trailDot23.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot23'
          _view.trailDot2222.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot2222'
          _view.trailDot2222.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot2222'
          _view.lead.linkProperty("X",  function() { return rangex/5; } ); // HtmlView Page linking property 'X' for element 'lead'
          _view.lead.linkProperty("Y",  function() { return -rangey/6.5; } ); // HtmlView Page linking property 'Y' for element 'lead'
          _view.lead.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'lead'
          _view.blueLeadsMagenta.linkProperty("Visibility",  function() { return phideg<=180; } ); // HtmlView Page linking property 'Visibility' for element 'blueLeadsMagenta'
          _view.blueLeadsMagentaText.linkProperty("Text",  function() { return "blue leads magenta \n by "+_view._format(phideg,"000")+ " degrees"; } ); // HtmlView Page linking property 'Text' for element 'blueLeadsMagentaText'
          _view.magentaLeadsBlue.linkProperty("Visibility",  function() { return phideg>180; } ); // HtmlView Page linking property 'Visibility' for element 'magentaLeadsBlue'
          _view.magentaLeadsBlueText.linkProperty("Text",  function() { return "magenta leads blue \n by "+_view._format(360 - phideg,"000")+ " degrees"; } ); // HtmlView Page linking property 'Text' for element 'magentaLeadsBlueText'
          _view.plottingPanelxvst2.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("Width",  function() { return Width2; }, function(_v) { Width2 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("TRMessage",  function() { return !print?"Xblue = ("+_view._format(-sign,"0") +")*"   +_view._format(A,"0.00")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(ctas-pi/2,"0.00")+"))"+"\nXmagenta = ("+_view._format(-sign2,"0")+")* " +_view._format(A2,"0.00")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(cta2s+pi/2,"0.00")+"))":""; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("XTickStep",  function() { return pi/2; } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("MaximumX",  function() { return T; }, function(_v) { T = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("BRMessage",  function() { return !print?"t = " +_view._format(t,"0.00") + " s ":""; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanelxvst2'
          _view.plottingPanelxvst2.linkProperty("Display",  function() { return graph?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'plottingPanelxvst2'
          _view.analyticCurve.linkProperty("FunctionY",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurve'
          _view.analyticCurve.linkProperty("Maximum",  function() { return Math.max(t,T); } ); // HtmlView Page linking property 'Maximum' for element 'analyticCurve'
          _view.analyticCurve.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'analyticCurve'
          _view.trailDot22242.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot22242'
          _view.trailDot22242.linkProperty("Y",  function() { return xmodel; }, function(_v) { xmodel = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot22242'
          _view.trailDot22242.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot22242'
          _view.trail2.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail2'
          _view.trail2.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail2'
          _view.trail2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail2'
          _view.trail2.linkProperty("InputY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail2'
          _view.segment3.linkProperty("SizeX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segment3'
          _view.segment3.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'segment3'
          _view.trailDot24.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot24'
          _view.trailDot24.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot24'
          _view.trail222.linkProperty("Active",  function() { return t>0; } ); // HtmlView Page linking property 'Active' for element 'trail222'
          _view.trail222.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail222'
          _view.trail222.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail222'
          _view.trail222.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trail222'
          _view.trail222.linkProperty("InputY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail222'
          _view.segment22.linkProperty("SizeX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segment22'
          _view.segment22.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'segment22'
          _view.segment22.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'segment22'
          _view.trailDot2224.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'trailDot2224'
          _view.trailDot2224.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'trailDot2224'
          _view.trailDot2224.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'trailDot2224'
          _view.axes.linkProperty("SizeX",  function() { return Math.max(T, t); } ); // HtmlView Page linking property 'SizeX' for element 'axes'
          _view.xaxislabel.linkProperty("X",  function() { return T; }, function(_v) { T = _v; } ); // HtmlView Page linking property 'X' for element 'xaxislabel'
          _view.group.linkProperty("Visibility",  function() { return t>=T-0.1&&(showobject2); } ); // HtmlView Page linking property 'Visibility' for element 'group'
          _view.arrow3.linkProperty("SizeX",  function() { return tpointA2-tpointA; } ); // HtmlView Page linking property 'SizeX' for element 'arrow3'
          _view.arrow3.linkProperty("X",  function() { return tpointA; }, function(_v) { tpointA = _v; } ); // HtmlView Page linking property 'X' for element 'arrow3'
          _view.arrow3.linkProperty("Y",  function() { return (pointA+pointA2)/2; } ); // HtmlView Page linking property 'Y' for element 'arrow3'
          _view.deltat.linkProperty("X",  function() { return tpointA+(tpointA2-tpointA)/2; } ); // HtmlView Page linking property 'X' for element 'deltat'
          _view.deltat.linkProperty("Y",  function() { return (pointA+pointA2)/2; } ); // HtmlView Page linking property 'Y' for element 'deltat'
          _view.deltat.linkProperty("Text",  function() { return !print?"Δt = "+_view._format(Math.abs(tpointA-tpointA2),"0.00"):""; } ); // HtmlView Page linking property 'Text' for element 'deltat'
          _view.maxofy2.linkProperty("X",  function() { return tpointA; }, function(_v) { tpointA = _v; } ); // HtmlView Page linking property 'X' for element 'maxofy2'
          _view.maxofy2.linkProperty("Y",  function() { return pointA; }, function(_v) { pointA = _v; } ); // HtmlView Page linking property 'Y' for element 'maxofy2'
          _view.maxofy.linkProperty("X",  function() { return tpointA2; }, function(_v) { tpointA2 = _v; } ); // HtmlView Page linking property 'X' for element 'maxofy'
          _view.maxofy.linkProperty("Y",  function() { return pointA2; }, function(_v) { pointA2 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxofy'
          _view.maxofy.linkProperty("Visibility",  function() { return showobject2; }, function(_v) { showobject2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxofy'
          _view.peroidT.linkProperty("X",  function() { return T/2; } ); // HtmlView Page linking property 'X' for element 'peroidT'
          _view.peroidT.linkProperty("Text",  function() { return !print?"period T = "+_view._format(T,"0.00"):""; } ); // HtmlView Page linking property 'Text' for element 'peroidT'
          _view.arrow32.linkProperty("SizeX",  function() { return T; }, function(_v) { T = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrow32'
          _view.printGroup.linkProperty("X",  function() { return T/2; } ); // HtmlView Page linking property 'X' for element 'printGroup'
          _view.printGroup.linkProperty("Visibility",  function() { return print; }, function(_v) { print = _v; } ); // HtmlView Page linking property 'Visibility' for element 'printGroup'
          _view.model4.linkProperty("Visibility",  function() { return !print; } ); // HtmlView Page linking property 'Visibility' for element 'model4'
          _view.worldgraph.linkProperty("Options",  function() { return ["world","y vs t","both","","clockwise","anti-clockwise","second object show","second object off","","show model","hide model","","print"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  var option = _view.worldgraph.getProperty("SelectedOptions");
  //alert(option);
  if ( option=="world"){
    world=true;
    graph=false;
  Width1 = "100%";
  Width2 = "100%"; //use world to display none
  //disabled=false;
    }
  //"second object show","second object off"
  //printing begins now
  else if (option == "print"){
    print = true;
    }
  //prints end here
  else if ( option=="second object show"){
  showobject2 = true;
  }
  else if ( option=="second object off"){
  showobject2 = false;
  }
  else if ( option=="y vs t"){
  graph=true;
  world=false;
  Width1 = "100%";
  Width2 = "100%";
  //disabledworld=false;
  }
  else if ( option=="both"){
  world=true;
  graph=true;
  Width1 = "50%";
  Width2 = "50%";
  //disabledworld=false;
  }
  else if ( option=="clockwise"){
  sign=1;
  sign2=sign;
  }
  else if ( option=="anti-clockwise"){
  sign=-1;
  sign2=sign;
  }
  else if ( option=="show model"){
  showmodel=true;
  }
  else if ( option=="hide model"){
  showmodel=false;
  }

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.worldgraph.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'worldgraph'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.stepButton2.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepButton2'
          _view.stepButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'stepButton2'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.model.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'model'
          _view.model.setAction("OnClick", function(_data,_info) {
  if (inputdropmenu == true){
    inputdropmenu = false;
    }
  else if (inputdropmenu == false){
    inputdropmenu = true;
    }

}); // HtmlView Page setting action 'OnClick' for element 'model'
          _view.model.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'model'
          _view.models.linkProperty("Options",  function() { return ["1*sin(t)","0.25*cos(t)","0","-0.5*cos(t)","-1*cos(t)","1*sin(t+1.57)","1.41*sin(t+0.5236)","show me blue","show me magenta"]; } ); // HtmlView Page linking property 'Options' for element 'models'
          _view.models.setAction("OnChange", function(_data,_info) {
  var option = _view.models.getProperty("SelectedOptions");
  showmodel=true;
  //functionY=selectedmodel+"";
  functionY=option+"";
  //if (selectedmodel[0]==="show me blue"){
   if (option=="show me blue"){
     //"hint: Xblue = ("+_view._format(-sign,"0") +")*"   +_view._format(A,"0.00")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(ctas-pi/2,"0.00")+"))"+"  ,hint: Xmagenta = ("+_view._format(-sign2,"0")+")* " +_view._format(A2,"0.00")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(cta2s+pi/2,"0.00")+"))"
    functionY= "("+_view._format(-sign,"0") +")*"   +_view._format(A,"0.00")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(-ctas+pi/2,"0.00")+"))";  
    }
   // else if (selectedmodel[0]==="show me magenta"){
    else if (option=="show me magenta"){
      functionY= "("+_view._format(-sign2,"0")+")* " +_view._format(A2,"0.00")+"*sin(" +_view._format(omega,"0.00")+"*t+("+_view._format(-cta2s+pi/2,"0.00")+"))";
    }
  xmodel=_view.fField.evaluate({ t : t, x : xmodel }); 
  _view._update();

}); // HtmlView Page setting action 'OnChange' for element 'models'
          _view.models.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'models'
          _view.models.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'models'
          _view.models.linkProperty("Display",  function() { return inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'models'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.setAction("OnChange", function(_data,_info) {
  showmodel=true;
  xmodel=_view.fField.evaluate({ t : t, x : xmodel }); 
  _view._update(); //force update to draw model at new position;

}); // HtmlView Page setting action 'OnChange' for element 'fField'
          _view.fField.linkProperty("Visibility",  function() { return showmodel && !print; } ); // HtmlView Page linking property 'Visibility' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.fField.linkProperty("Display",  function() { return !inputdropmenu?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'fField'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(24);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function SHM045_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = SHM045_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('SHM03','./SHM03.xhtml');

  return _view;
} // end of main function

function SHM045_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst'
      .setProperty("YScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst'
      .setProperty("AxisYFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanelxvst'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst'
      .setProperty("XTickStep",0.2) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanelxvst'
      .setProperty("YTickStep",0.2) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanelxvst'
      .setProperty("ShapeRendering","crispEdges") // EJsS HtmlView.HtmlView Page: setting property 'ShapeRendering' for element 'plottingPanelxvst'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst'
      .setProperty("Title","Circular Motion Model ") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanelxvst'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst'
      .setProperty("TitleY","y  (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst'
      .setProperty("AxisXFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanelxvst'
      .setProperty("TitleX","x (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst'
      .setProperty("XScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'image'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'image'
      .setProperty("ImageUrl","./SHMcircle/vinyl-883199_960_720.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"circleturntable", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'circleturntable'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'circleturntable'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'circleturntable'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'circleturntable'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'circleturntable'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon3", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon3'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon3'
      .setProperty("Transformation",1.57) // EJsS HtmlView.HtmlView Page: setting property 'Transformation' for element 'polygon3'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"polygon", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'polygon'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'polygon'
      .setProperty("Transformation",1.57) // EJsS HtmlView.HtmlView Page: setting property 'Transformation' for element 'polygon'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrow'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot25", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot25'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot25'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot25'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'trailDot25'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot25'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot25'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot25'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trailDot25'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'trailDot25'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail22", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trail22'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail22'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot222", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot222'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot222'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot222'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'trailDot222'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot222'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot222'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trailDot222'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'trailDot222'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrow2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrow2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"guideslines", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'guideslines'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'guideslines'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'guideslines'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'guideslines'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'guideslines'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'guideslines'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"guidelines", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'guidelines'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'guidelines'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'guidelines'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'guidelines'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'guidelines'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'guidelines'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"vertical", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical'
      .setProperty("X",0.9) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'vertical'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model2", _view.vertical) // EJsS HtmlView.HtmlView Page: declaration of element 'model2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model2'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'model2'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model2'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'model2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot223", _view.vertical) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot223'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot223'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot223'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot223'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'trailDot223'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot223'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot223'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot2223", _view.vertical) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot2223'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot2223'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot2223'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot2223'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'trailDot2223'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot2223'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot2223'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"horizontal2", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'horizontal2'
      .setProperty("Y",-1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'horizontal2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'horizontal2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot23", _view.horizontal2) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot23'
      .setProperty("FillColor","rgba(0,150,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot23'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot23'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot23'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'trailDot23'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot23'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot23'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot2222", _view.horizontal2) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot2222'
      .setProperty("FillColor","rgba(150,0,150,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot2222'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot2222'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot2222'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'trailDot2222'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot2222'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot2222'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"lead", _view.plottingPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'lead'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"blueLeadsMagenta", _view.lead) // EJsS HtmlView.HtmlView Page: declaration of element 'blueLeadsMagenta'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"blueLeadsMagentaText", _view.blueLeadsMagenta) // EJsS HtmlView.HtmlView Page: declaration of element 'blueLeadsMagentaText'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'blueLeadsMagentaText'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'blueLeadsMagentaText'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'blueLeadsMagentaText'
      .setProperty("Font","normal normal 13px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'blueLeadsMagentaText'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"magentaLeadsBlue", _view.lead) // EJsS HtmlView.HtmlView Page: declaration of element 'magentaLeadsBlue'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"magentaLeadsBlueText", _view.magentaLeadsBlue) // EJsS HtmlView.HtmlView Page: declaration of element 'magentaLeadsBlueText'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'magentaLeadsBlueText'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'magentaLeadsBlueText'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'magentaLeadsBlueText'
      .setProperty("Font","normal normal 13px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'magentaLeadsBlueText'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanelxvst2", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanelxvst2'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanelxvst2'
      .setProperty("YScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanelxvst2'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanelxvst2'
      .setProperty("AxisYFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanelxvst2'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanelxvst2'
      .setProperty("AxisXShapeRendering","ARROW") // EJsS HtmlView.HtmlView Page: setting property 'AxisXShapeRendering' for element 'plottingPanelxvst2'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanelxvst2'
      .setProperty("Title","y vs. Time") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanelxvst2'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanelxvst2'
      .setProperty("YTicks",21) // EJsS HtmlView.HtmlView Page: setting property 'YTicks' for element 'plottingPanelxvst2'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanelxvst2'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanelxvst2'
      .setProperty("TitleY","y (m)") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanelxvst2'
      .setProperty("AxisXFont","normal normal 1vw ") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanelxvst2'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanelxvst2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanelxvst2'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanelxvst2'
      .setProperty("MarginX",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanelxvst2'
      .setProperty("XScalePrecision",2) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanelxvst2'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'analyticCurve'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'analyticCurve'
      .setProperty("NumPoints",100) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'analyticCurve'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurve'
      .setProperty("LineWidth",4) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurve'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot22242", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot22242'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot22242'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot22242'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot22242'
      .setProperty("SizeY",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot22242'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot22242'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail2", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'trail2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail2'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"segment3", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'segment3'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'segment3'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'segment3'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segment3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'segment3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segment3'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'segment3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot24", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot24'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot24'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot24'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot24'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot24'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot24'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail222", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'trail222'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail222'
      .setProperty("LineWidth",1.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail222'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"segment22", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'segment22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'segment22'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'segment22'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segment22'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'segment22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segment22'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'segment22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"trailDot2224", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'trailDot2224'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'trailDot2224'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'trailDot2224'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailDot2224'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'trailDot2224'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'trailDot2224'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axesy", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'axesy'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axesy'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'axesy'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axesy'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axesy'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axesy'
      .setProperty("SizeY",1.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axesy'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axesy'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axesy'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"axes", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'axes'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'axes'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'axes'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'axes'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'axes'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'axes'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'axes'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'axes'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"yaxislabel2", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'yaxislabel2'
      .setProperty("RelativePosition","NORTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'yaxislabel2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yaxislabel2'
      .setProperty("Y",0.95) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'yaxislabel2'
      .setProperty("Text","y (m)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'yaxislabel2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'yaxislabel2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"xaxislabel", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'xaxislabel'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'xaxislabel'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xaxislabel'
      .setProperty("Text","t (s)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'xaxislabel'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'xaxislabel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow3", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow3'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow3'
      .setProperty("LineColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow3'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'arrow3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow3'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow3'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"deltat", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'deltat'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'deltat'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'deltat'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"maxofy2", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'maxofy2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxofy2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxofy2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxofy2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxofy2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"maxofy", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'maxofy'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxofy'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxofy'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxofy'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxofy'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxofy'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"peroidT", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'peroidT'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'peroidT'
      .setProperty("Y",0.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'peroidT'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'peroidT'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow32", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow32'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow32'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'arrow32'
      .setProperty("LineColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow32'
      .setProperty("Y",0.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'arrow32'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'arrow32'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow32'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow32'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'arrow32'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow32'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"printGroup", _view.plottingPanelxvst2) // EJsS HtmlView.HtmlView Page: declaration of element 'printGroup'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"printPeriodT", _view.printGroup) // EJsS HtmlView.HtmlView Page: declaration of element 'printPeriodT'
      .setProperty("FillColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'printPeriodT'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'printPeriodT'
      .setProperty("Y",0.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'printPeriodT'
      .setProperty("Text","period T") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'printPeriodT'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'printPeriodT'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"printDeltat", _view.printGroup) // EJsS HtmlView.HtmlView Page: declaration of element 'printDeltat'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'printDeltat'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'printDeltat'
      .setProperty("Y",0.8) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'printDeltat'
      .setProperty("Text","Δt") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'printDeltat'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'printDeltat'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"model4", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'model4'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'model4'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "30px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'model4'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'model4'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton2", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton2'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton2'
      .setProperty("Text","❚►") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"model", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'model'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model'
      .setProperty("Tooltip","key in expression like 2*sin(1*t)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model'
      .setProperty("Text","?your model, Y =") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'model'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"models", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'models'
      .setProperty("Tooltip","select suggested models") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'models'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Width","20vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","model input field") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Circular Motion Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM045/SHMcircle/2016-01-05_1400s.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM045/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM045/01authorfu-kwun.hwang.png" />
 weelookang@gmail.com; Fu-Kwun Hwang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Creative Commons Attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new SHM045("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM045/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
