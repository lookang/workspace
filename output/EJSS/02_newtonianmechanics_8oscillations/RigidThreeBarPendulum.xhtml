<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function RigidThreeBarPendulum(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var time_lo; // EjsS Model.Variables.Define Function and Plot.time_lo
  var time_hi; // EjsS Model.Variables.Define Function and Plot.time_hi
  var npts; // EjsS Model.Variables.Define Function and Plot.npts
  var time; // EjsS Model.Variables.Define Function and Plot.time
  var displacement; // EjsS Model.Variables.Define Function and Plot.displacement
  var xmin; // EjsS Model.Variables.Define Function and Plot.xmin
  var xmax; // EjsS Model.Variables.Define Function and Plot.xmax
  var ymin; // EjsS Model.Variables.Define Function and Plot.ymin
  var ymax; // EjsS Model.Variables.Define Function and Plot.ymax

  var max_x; // EjsS Model.Variables.Plot Filled Contour.max_x
  var min_x; // EjsS Model.Variables.Plot Filled Contour.min_x
  var max_y; // EjsS Model.Variables.Plot Filled Contour.max_y
  var min_y; // EjsS Model.Variables.Plot Filled Contour.min_y
  var Npts; // EjsS Model.Variables.Plot Filled Contour.Npts
  var X; // EjsS Model.Variables.Plot Filled Contour.X
  var Y; // EjsS Model.Variables.Plot Filled Contour.Y
  var f_x; // EjsS Model.Variables.Plot Filled Contour.f_x
  var f_y; // EjsS Model.Variables.Plot Filled Contour.f_y
  var function_values; // EjsS Model.Variables.Plot Filled Contour.function_values

  var m; // EjsS Model.Variables.Numerical Integration.m
  var k; // EjsS Model.Variables.Numerical Integration.k
  var b; // EjsS Model.Variables.Numerical Integration.b
  var y0; // EjsS Model.Variables.Numerical Integration.y0
  var dydt0; // EjsS Model.Variables.Numerical Integration.dydt0
  var Nperiods; // EjsS Model.Variables.Numerical Integration.Nperiods
  var omega0; // EjsS Model.Variables.Numerical Integration.omega0
  var period; // EjsS Model.Variables.Numerical Integration.period
  var u1; // EjsS Model.Variables.Numerical Integration.u1
  var u2; // EjsS Model.Variables.Numerical Integration.u2
  var N; // EjsS Model.Variables.Numerical Integration.N
  var delu; // EjsS Model.Variables.Numerical Integration.delu
  var y; // EjsS Model.Variables.Numerical Integration.y
  var dydu; // EjsS Model.Variables.Numerical Integration.dydu
  var d2ydu2; // EjsS Model.Variables.Numerical Integration.d2ydu2
  var scaled_tpoints; // EjsS Model.Variables.Numerical Integration.scaled_tpoints
  var real_tpoints; // EjsS Model.Variables.Numerical Integration.real_tpoints
  var velocity; // EjsS Model.Variables.Numerical Integration.velocity

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      time_lo : time_lo,
      time_hi : time_hi,
      npts : npts,
      time : time,
      displacement : displacement,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      max_x : max_x,
      min_x : min_x,
      max_y : max_y,
      min_y : min_y,
      Npts : Npts,
      X : X,
      Y : Y,
      f_x : f_x,
      f_y : f_y,
      function_values : function_values,
      m : m,
      k : k,
      b : b,
      y0 : y0,
      dydt0 : dydt0,
      Nperiods : Nperiods,
      omega0 : omega0,
      period : period,
      u1 : u1,
      u2 : u2,
      N : N,
      delu : delu,
      y : y,
      dydu : dydu,
      d2ydu2 : d2ydu2,
      scaled_tpoints : scaled_tpoints,
      real_tpoints : real_tpoints,
      velocity : velocity
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.time_lo != "undefined") time_lo = json.time_lo;
    if(typeof json.time_hi != "undefined") time_hi = json.time_hi;
    if(typeof json.npts != "undefined") npts = json.npts;
    if(typeof json.time != "undefined") time = json.time;
    if(typeof json.displacement != "undefined") displacement = json.displacement;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.max_x != "undefined") max_x = json.max_x;
    if(typeof json.min_x != "undefined") min_x = json.min_x;
    if(typeof json.max_y != "undefined") max_y = json.max_y;
    if(typeof json.min_y != "undefined") min_y = json.min_y;
    if(typeof json.Npts != "undefined") Npts = json.Npts;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.Y != "undefined") Y = json.Y;
    if(typeof json.f_x != "undefined") f_x = json.f_x;
    if(typeof json.f_y != "undefined") f_y = json.f_y;
    if(typeof json.function_values != "undefined") function_values = json.function_values;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.y0 != "undefined") y0 = json.y0;
    if(typeof json.dydt0 != "undefined") dydt0 = json.dydt0;
    if(typeof json.Nperiods != "undefined") Nperiods = json.Nperiods;
    if(typeof json.omega0 != "undefined") omega0 = json.omega0;
    if(typeof json.period != "undefined") period = json.period;
    if(typeof json.u1 != "undefined") u1 = json.u1;
    if(typeof json.u2 != "undefined") u2 = json.u2;
    if(typeof json.N != "undefined") N = json.N;
    if(typeof json.delu != "undefined") delu = json.delu;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.dydu != "undefined") dydu = json.dydu;
    if(typeof json.d2ydu2 != "undefined") d2ydu2 = json.d2ydu2;
    if(typeof json.scaled_tpoints != "undefined") scaled_tpoints = json.scaled_tpoints;
    if(typeof json.real_tpoints != "undefined") real_tpoints = json.real_tpoints;
    if(typeof json.velocity != "undefined") velocity = json.velocity;
  };

  _model._inputAndPublicParameters = ["time_lo",  "time_hi",  "npts",  "time",  "displacement",  "xmin",  "xmax",  "ymin",  "ymax",  "max_x",  "min_x",  "max_y",  "min_y",  "Npts",  "X",  "Y",  "f_x",  "f_y",  "function_values",  "m",  "k",  "b",  "y0",  "dydt0",  "Nperiods",  "omega0",  "period",  "u1",  "u2",  "N",  "delu",  "y",  "dydu",  "d2ydu2",  "scaled_tpoints",  "real_tpoints",  "velocity"]; 

  _model._outputAndPublicParameters = ["time_lo",  "time_hi",  "npts",  "time",  "displacement",  "xmin",  "xmax",  "ymin",  "ymax",  "max_x",  "min_x",  "max_y",  "min_y",  "Npts",  "X",  "Y",  "f_x",  "f_y",  "function_values",  "m",  "k",  "b",  "y0",  "dydt0",  "Nperiods",  "omega0",  "period",  "u1",  "u2",  "N",  "delu",  "y",  "dydu",  "d2ydu2",  "scaled_tpoints",  "real_tpoints",  "velocity"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
  });

  _model.addToReset(function() {
    time_lo = 0.0; // EjsS Model.Variables.Define Function and Plot.time_lo
    time_hi = 3.0; // EjsS Model.Variables.Define Function and Plot.time_hi
    npts = 301; // EjsS Model.Variables.Define Function and Plot.npts
    time = new Array(npts); // EjsS Model.Variables.Define Function and Plot.time
    (function () {
      var _i0;
      for (_i0=0; _i0<npts; _i0+=1) {  // EjsS Model.Variables.Define Function and Plot.time
        time[_i0] = 0;  // EjsS Model.Variables.Define Function and Plot.time
      }
    }());
    displacement = new Array(npts); // EjsS Model.Variables.Define Function and Plot.displacement
    (function () {
      var _i0;
      for (_i0=0; _i0<npts; _i0+=1) {  // EjsS Model.Variables.Define Function and Plot.displacement
        displacement[_i0] = 0;  // EjsS Model.Variables.Define Function and Plot.displacement
      }
    }());
    xmin = time_lo; // EjsS Model.Variables.Define Function and Plot.xmin
    xmax = time_hi; // EjsS Model.Variables.Define Function and Plot.xmax
    ymin = -1.0; // EjsS Model.Variables.Define Function and Plot.ymin
    ymax = 1.0; // EjsS Model.Variables.Define Function and Plot.ymax
  });

  _model.addToReset(function() {
    max_x = 1.0; // EjsS Model.Variables.Plot Filled Contour.max_x
    min_x = -1.0; // EjsS Model.Variables.Plot Filled Contour.min_x
    max_y = max_x; // EjsS Model.Variables.Plot Filled Contour.max_y
    min_y = min_x; // EjsS Model.Variables.Plot Filled Contour.min_y
    Npts = 10; // EjsS Model.Variables.Plot Filled Contour.Npts
    X = new Array(Npts); // EjsS Model.Variables.Plot Filled Contour.X
    (function () {
      var _i0;
      for (_i0=0; _i0<Npts; _i0+=1) {  // EjsS Model.Variables.Plot Filled Contour.X
        X[_i0] = 0;  // EjsS Model.Variables.Plot Filled Contour.X
      }
    }());
    Y = new Array(Npts); // EjsS Model.Variables.Plot Filled Contour.Y
    (function () {
      var _i0;
      for (_i0=0; _i0<Npts; _i0+=1) {  // EjsS Model.Variables.Plot Filled Contour.Y
        Y[_i0] = 0;  // EjsS Model.Variables.Plot Filled Contour.Y
      }
    }());
    f_x = 1.0; // EjsS Model.Variables.Plot Filled Contour.f_x
    f_y = 1.0; // EjsS Model.Variables.Plot Filled Contour.f_y
    function_values = new Array(Npts); // EjsS Model.Variables.Plot Filled Contour.function_values
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<Npts; _i0+=1) {  // EjsS Model.Variables.Plot Filled Contour.function_values
        function_values[_i0] = [];
        for (_i1=0; _i1<Npts; _i1+=1) {  // EjsS Model.Variables.Plot Filled Contour.function_values
          function_values[_i0][_i1] = 0;  // EjsS Model.Variables.Plot Filled Contour.function_values
        }
      }
    }());
  });

  _model.addToReset(function() {
    m = 0.1; // EjsS Model.Variables.Numerical Integration.m
    k = 1.0; // EjsS Model.Variables.Numerical Integration.k
    b = 0.07; // EjsS Model.Variables.Numerical Integration.b
    y0 = 0.05; // EjsS Model.Variables.Numerical Integration.y0
    dydt0 = 0.0; // EjsS Model.Variables.Numerical Integration.dydt0
    Nperiods = 10; // EjsS Model.Variables.Numerical Integration.Nperiods
    omega0 = Math.sqrt(k/m); // EjsS Model.Variables.Numerical Integration.omega0
    period = 2.0*Math.PI/omega0; // EjsS Model.Variables.Numerical Integration.period
    u1 = 0.0; // EjsS Model.Variables.Numerical Integration.u1
    u2 = 1.0*Nperiods; // EjsS Model.Variables.Numerical Integration.u2
    N = 2000; // EjsS Model.Variables.Numerical Integration.N
    delu = (u2-u1)/N; // EjsS Model.Variables.Numerical Integration.delu
    y = new Array(N+1); // EjsS Model.Variables.Numerical Integration.y
    (function () {
      var _i0;
      for (_i0=0; _i0<N+1; _i0+=1) {  // EjsS Model.Variables.Numerical Integration.y
        y[_i0] = 0;  // EjsS Model.Variables.Numerical Integration.y
      }
    }());
    dydu = new Array(N+1); // EjsS Model.Variables.Numerical Integration.dydu
    (function () {
      var _i0;
      for (_i0=0; _i0<N+1; _i0+=1) {  // EjsS Model.Variables.Numerical Integration.dydu
        dydu[_i0] = 0;  // EjsS Model.Variables.Numerical Integration.dydu
      }
    }());
    d2ydu2 = new Array(N+1); // EjsS Model.Variables.Numerical Integration.d2ydu2
    (function () {
      var _i0;
      for (_i0=0; _i0<N+1; _i0+=1) {  // EjsS Model.Variables.Numerical Integration.d2ydu2
        d2ydu2[_i0] = 0;  // EjsS Model.Variables.Numerical Integration.d2ydu2
      }
    }());
    scaled_tpoints = new Array(N+1); // EjsS Model.Variables.Numerical Integration.scaled_tpoints
    (function () {
      var _i0;
      for (_i0=0; _i0<N+1; _i0+=1) {  // EjsS Model.Variables.Numerical Integration.scaled_tpoints
        scaled_tpoints[_i0] = 0;  // EjsS Model.Variables.Numerical Integration.scaled_tpoints
      }
    }());
    real_tpoints = new Array(N+1); // EjsS Model.Variables.Numerical Integration.real_tpoints
    (function () {
      var _i0;
      for (_i0=0; _i0<N+1; _i0+=1) {  // EjsS Model.Variables.Numerical Integration.real_tpoints
        real_tpoints[_i0] = 0;  // EjsS Model.Variables.Numerical Integration.real_tpoints
      }
    }());
    velocity = new Array(N+1); // EjsS Model.Variables.Numerical Integration.velocity
    (function () {
      var _i0;
      for (_i0=0; _i0<N+1; _i0+=1) {  // EjsS Model.Variables.Numerical Integration.velocity
        velocity[_i0] = 0;  // EjsS Model.Variables.Numerical Integration.velocity
      }
    }());
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  // function generating the values for the decaying oscillation  // > CustomCode.Decaying Oscillation:1
  var d;  // > CustomCode.Decaying Oscillation:2
  function decaying_oscillation (t) {  // > CustomCode.Decaying Oscillation:3
    d = Math.exp(-t)*Math.cos(2.0*Math.PI*t);  // > CustomCode.Decaying Oscillation:4
    return d;  // > CustomCode.Decaying Oscillation:5
  }  // > CustomCode.Decaying Oscillation:6

  function halfEuler () {  // > CustomCode.Improved Euler Method:1
    // setting the initial values of the arrays  // > CustomCode.Improved Euler Method:2
    y[0] = y0;  // > CustomCode.Improved Euler Method:3
    dydu[0] = period*dydt0;  // > CustomCode.Improved Euler Method:4
    d2ydu2[0] = -(b*period/m)*dydu[0] - Math.pow((omega0*period),2)*y[0];  // > CustomCode.Improved Euler Method:5
    scaled_tpoints[0] = u1;  // > CustomCode.Improved Euler Method:6
    real_tpoints[0] = period*scaled_tpoints[0];  // > CustomCode.Improved Euler Method:7
    velocity[0] = dydt0;  // > CustomCode.Improved Euler Method:8
      // > CustomCode.Improved Euler Method:9
    for (var i=1; i<N+1; i++) {  // > CustomCode.Improved Euler Method:10
      // generating the array of time points for half-step approximation  // > CustomCode.Improved Euler Method:11
      scaled_tpoints[i] = scaled_tpoints[i-1] + (u2 - u1)/(N+1);  // > CustomCode.Improved Euler Method:12
      real_tpoints[i] = period*scaled_tpoints[i];  // > CustomCode.Improved Euler Method:13
      if (i==1) {  // > CustomCode.Improved Euler Method:14
        // if this is the first interval  // > CustomCode.Improved Euler Method:15
        // calculate the derivative at the center of the first interval  // > CustomCode.Improved Euler Method:16
        dydu[i] = dydu[0] + 0.5*delu*d2ydu2[0];  // > CustomCode.Improved Euler Method:17
        // calculate the position at the end of the first interval  // > CustomCode.Improved Euler Method:18
        y[i] = y[0] + delu*dydu[i];  // > CustomCode.Improved Euler Method:19
        // calculate the second derivative at the end of the first interval  // > CustomCode.Improved Euler Method:20
        d2ydu2[i] = -(b*period/m)*dydu[i] - Math.pow((omega0*period),2)*y[i];  // > CustomCode.Improved Euler Method:21
      } else {  // > CustomCode.Improved Euler Method:22
        // calculate the derivative at the center of the ith interval  // > CustomCode.Improved Euler Method:23
        dydu[i] = dydu[i-1] + delu*d2ydu2[i-1];  // > CustomCode.Improved Euler Method:24
        // calculate the position at the end of the ith interval  // > CustomCode.Improved Euler Method:25
        y[i] = y[i-1] + delu*dydu[i];  // > CustomCode.Improved Euler Method:26
        // calculate the second derivative at the end of the ith interval  // > CustomCode.Improved Euler Method:27
        d2ydu2[i] = -(b*period/m)*dydu[i] - Math.pow((omega0*period),2)*y[i];  // > CustomCode.Improved Euler Method:28
      }  // > CustomCode.Improved Euler Method:29
      // calculate the velocity (m/s)  // > CustomCode.Improved Euler Method:30
      velocity[i] = dydu[i]/period;  // > CustomCode.Improved Euler Method:31
    }  // > CustomCode.Improved Euler Method:32
  }  // > CustomCode.Improved Euler Method:33

  function calcDisplacement () {  // > CustomCode.Displacement:1
    time[0] = 0;  // > CustomCode.Displacement:2
    displacement[0] = 1;  // > CustomCode.Displacement:3
    // generating the time and displacement arrays  // > CustomCode.Displacement:4
    // for displacement-time graph  // > CustomCode.Displacement:5
    for (var i=1; i<npts; i++) {  // > CustomCode.Displacement:6
      time[i] = time[i-1] + (time_hi - time_lo)/npts;   // > CustomCode.Displacement:7
      displacement[i] = decaying_oscillation(time[i]);  // > CustomCode.Displacement:8
    }  // > CustomCode.Displacement:9
  }  // > CustomCode.Displacement:10

  function contourPlot () {  // > CustomCode.Contour Plot:1
    X[0] = min_x;  // > CustomCode.Contour Plot:2
    Y[0] = min_y;  // > CustomCode.Contour Plot:3
      // > CustomCode.Contour Plot:4
    for (var i=0; i<Npts; i++) {  // > CustomCode.Contour Plot:5
      // linspace(min_x, max_x, Npts)  // > CustomCode.Contour Plot:6
      if (i==0) {  // > CustomCode.Contour Plot:7
        X[i] = (max_x - min_x)/Npts;  // > CustomCode.Contour Plot:8
      } else {  // > CustomCode.Contour Plot:9
        X[i] = X[i-1] + (max_x - min_x)/Npts;  // > CustomCode.Contour Plot:10
      }  // > CustomCode.Contour Plot:11
      for (var j=0; j<Npts; j++) {  // > CustomCode.Contour Plot:12
        // linspace(min_y, max_y, Npts)  // > CustomCode.Contour Plot:13
        if (j==0) {  // > CustomCode.Contour Plot:14
          Y[j] = (max_y - min_y)/Npts;  // > CustomCode.Contour Plot:15
        } else {  // > CustomCode.Contour Plot:16
          Y[j] = Y[j-1] + (max_y - min_y)/Npts;  // > CustomCode.Contour Plot:17
        }  // > CustomCode.Contour Plot:18
        // calculating the values of the function  // > CustomCode.Contour Plot:19
        // f(x,y) = cos(2π*f_x*X)cos(2π*f_y*Y)  // > CustomCode.Contour Plot:20
        // as a double array  // > CustomCode.Contour Plot:21
     //   function_values[i][j] = 255*Math.cos(2.0*Math.PI*f_x*X[i])*Math.cos(2.0*Math.PI*f_y*Y[j]);  // > CustomCode.Contour Plot:22
          function_values[i][j] = -255;  // > CustomCode.Contour Plot:23
          // values are multiplied by 255 to generate a range [-255,255]  // > CustomCode.Contour Plot:24
        // original range of the function is [-1,1]  // > CustomCode.Contour Plot:25
      }  // > CustomCode.Contour Plot:26
    }  // > CustomCode.Contour Plot:27
  }  // > CustomCode.Contour Plot:28

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    calcDisplacement();  // > Initialization.Init Page:1
    halfEuler();  // > Initialization.Init Page:2
    contourPlot();  // > Initialization.Init Page:3
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "Simulation View", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new RigidThreeBarPendulum_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.displacementGraph.linkProperty("Maximum",  function() { return npts; }, function(_v) { npts = _v; } ); // Simulation View linking property 'Maximum' for element 'displacementGraph'
          _view.displacementGraph.linkProperty("InputX",  function() { return time; }, function(_v) { time = _v; } ); // Simulation View linking property 'InputX' for element 'displacementGraph'
          _view.displacementGraph.linkProperty("InputY",  function() { return displacement; }, function(_v) { displacement = _v; } ); // Simulation View linking property 'InputY' for element 'displacementGraph'
          _view.velocityTime.linkProperty("MinimumX",  function() { return period*u1; } ); // Simulation View linking property 'MinimumX' for element 'velocityTime'
          _view.velocityTime.linkProperty("MinimumY",  function() { return Math.min(velocity); } ); // Simulation View linking property 'MinimumY' for element 'velocityTime'
          _view.velocityTime.linkProperty("MaximumY",  function() { return Math.max(velocity); } ); // Simulation View linking property 'MaximumY' for element 'velocityTime'
          _view.velocityTime.linkProperty("MaximumX",  function() { return period*u2; } ); // Simulation View linking property 'MaximumX' for element 'velocityTime'
          _view.velocityTimeGraph.linkProperty("InputX",  function() { return real_tpoints; }, function(_v) { real_tpoints = _v; } ); // Simulation View linking property 'InputX' for element 'velocityTimeGraph'
          _view.velocityTimeGraph.linkProperty("InputY",  function() { return velocity; }, function(_v) { velocity = _v; } ); // Simulation View linking property 'InputY' for element 'velocityTimeGraph'
          _view.velocityPositionGraph.linkProperty("InputX",  function() { return y; }, function(_v) { y = _v; } ); // Simulation View linking property 'InputX' for element 'velocityPositionGraph'
          _view.velocityPositionGraph.linkProperty("InputY",  function() { return velocity; }, function(_v) { velocity = _v; } ); // Simulation View linking property 'InputY' for element 'velocityPositionGraph'
          _view.contourPlot.linkProperty("MinimumX",  function() { return min_x; }, function(_v) { min_x = _v; } ); // Simulation View linking property 'MinimumX' for element 'contourPlot'
          _view.contourPlot.linkProperty("MinimumY",  function() { return min_y; }, function(_v) { min_y = _v; } ); // Simulation View linking property 'MinimumY' for element 'contourPlot'
          _view.contourPlot.linkProperty("MaximumY",  function() { return max_y; }, function(_v) { max_y = _v; } ); // Simulation View linking property 'MaximumY' for element 'contourPlot'
          _view.contourPlot.linkProperty("MaximumX",  function() { return max_x; }, function(_v) { max_x = _v; } ); // Simulation View linking property 'MaximumX' for element 'contourPlot'
          _view.byteRaster.linkProperty("SizeX",  function() { return max_x - min_x; } ); // Simulation View linking property 'SizeX' for element 'byteRaster'
          _view.byteRaster.linkProperty("X",  function() { return min_x; }, function(_v) { min_x = _v; } ); // Simulation View linking property 'X' for element 'byteRaster'
          _view.byteRaster.linkProperty("Y",  function() { return min_y; }, function(_v) { min_y = _v; } ); // Simulation View linking property 'Y' for element 'byteRaster'
          _view.byteRaster.linkProperty("Data",  function() { return function_values; }, function(_v) { function_values = _v; } ); // Simulation View linking property 'Data' for element 'byteRaster'
          _view.byteRaster.linkProperty("SizeY",  function() { return max_y - min_y; } ); // Simulation View linking property 'SizeY' for element 'byteRaster'
          _view.arrayPanel.linkProperty("DataArray",  function() { return function_values; }, function(_v) { function_values = _v; } ); // Simulation View linking property 'DataArray' for element 'arrayPanel'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function RigidThreeBarPendulum_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = RigidThreeBarPendulum_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Three-bar Pendulum Exercise 1','./RigidThreeBarPendulum_Intro_1.html');
  _view._addDescriptionPage('Three-bar Pendulum Exercise 2','./RigidThreeBarPendulum_Intro_2.html');
  _view._addDescriptionPage('Three-bar Pendulum Exercise 4a','./RigidThreeBarPendulum_Intro_3.html');
  _view._addDescriptionPage('Three-bar Pendulum Exercise 4b','./RigidThreeBarPendulum_Intro_4.html');
  _view._addDescriptionPage('Three-bar Pendulum Exercise 4c','./RigidThreeBarPendulum_Intro_5.html');
  _view._addDescriptionPage('Three-bar Pendulum Exercise 5','./RigidThreeBarPendulum_Intro_6.html');

  return _view;
} // end of main function

function RigidThreeBarPendulum_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'plottingPanel'
      .setProperty("TitleY","Displacement (m)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("Title","Displacement-time graph") // EJsS HtmlView.Simulation View: setting property 'Title' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"displacementGraph", _view.plottingPanel) // EJsS HtmlView.Simulation View: declaration of element 'displacementGraph'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'displacementGraph'
      .setProperty("LineColor","blue") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'displacementGraph'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'displacementGraph'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'displacementGraph'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.Simulation View: setting property 'ClearAtInput' for element 'displacementGraph'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"velocityTime", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'velocityTime'
      .setProperty("TitleY","Velocity (m/s)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'velocityTime'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'velocityTime'
      .setProperty("TitleX","Time (s)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'velocityTime'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'velocityTime'
      .setProperty("Title","Velocity-time graph") // EJsS HtmlView.Simulation View: setting property 'Title' for element 'velocityTime'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"velocityTimeGraph", _view.velocityTime) // EJsS HtmlView.Simulation View: declaration of element 'velocityTimeGraph'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'velocityTimeGraph'
      .setProperty("LineColor","blue") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'velocityTimeGraph'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'velocityTimeGraph'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'velocityTimeGraph'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.Simulation View: setting property 'ClearAtInput' for element 'velocityTimeGraph'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'plottingPanel2'
      .setProperty("TitleY","Velocity (m/s)") // EJsS HtmlView.Simulation View: setting property 'TitleY' for element 'plottingPanel2'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("TitleX","Position (m)") // EJsS HtmlView.Simulation View: setting property 'TitleX' for element 'plottingPanel2'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'plottingPanel2'
      .setProperty("Title","Velocity-position graph") // EJsS HtmlView.Simulation View: setting property 'Title' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"velocityPositionGraph", _view.plottingPanel2) // EJsS HtmlView.Simulation View: declaration of element 'velocityPositionGraph'
      .setProperty("Connected",true) // EJsS HtmlView.Simulation View: setting property 'Connected' for element 'velocityPositionGraph'
      .setProperty("LineColor","red") // EJsS HtmlView.Simulation View: setting property 'LineColor' for element 'velocityPositionGraph'
      .setProperty("NoRepeat",true) // EJsS HtmlView.Simulation View: setting property 'NoRepeat' for element 'velocityPositionGraph'
      .setProperty("LineWidth",2) // EJsS HtmlView.Simulation View: setting property 'LineWidth' for element 'velocityPositionGraph'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.Simulation View: setting property 'ClearAtInput' for element 'velocityPositionGraph'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"contourPlot", _view.panel) // EJsS HtmlView.Simulation View: declaration of element 'contourPlot'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleY' for element 'contourPlot'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Simulation View: setting property 'AutoScaleX' for element 'contourPlot'
      .setProperty("Title","f(x,y) = cos(2𝜋*f_x*X)cos(2𝜋*f_y*Y)") // EJsS HtmlView.Simulation View: setting property 'Title' for element 'contourPlot'
      ;

    _view._addElement(EJSS_DRAWING2D.byteRaster,"byteRaster", _view.contourPlot) // EJsS HtmlView.Simulation View: declaration of element 'byteRaster'
      .setProperty("Palette","SPECTRUM") // EJsS HtmlView.Simulation View: setting property 'Palette' for element 'byteRaster'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.Simulation View: setting property 'RelativePosition' for element 'byteRaster'
      ;

    _view._addElement(EJSS_DRAWING2D.mesh,"mesh2D", _view.contourPlot) // EJsS HtmlView.Simulation View: declaration of element 'mesh2D'
      .setProperty("DataType","SCALAR_2D_FIELD") // EJsS HtmlView.Simulation View: setting property 'DataType' for element 'mesh2D'
      .setProperty("Visibility",false) // EJsS HtmlView.Simulation View: setting property 'Visibility' for element 'mesh2D'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view._topFrame) // EJsS HtmlView.Simulation View: declaration of element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.arrayPanel,"arrayPanel", _view.panel2) // EJsS HtmlView.Simulation View: declaration of element 'arrayPanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Author name
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Author name.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new RigidThreeBarPendulum("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
