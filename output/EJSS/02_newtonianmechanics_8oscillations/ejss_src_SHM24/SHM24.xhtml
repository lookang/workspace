<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Resonance Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function SHM24(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
_stringProperties.TranslatorURL = "";
_stringProperties.TranslatorName = "";
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var rangex; // EjsS Model.Variables.Var Table.rangex
  var rangey; // EjsS Model.Variables.Var Table.rangey
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var selected; // EjsS Model.Variables.Var Table.selected
  var text; // EjsS Model.Variables.Var Table.text
  var pi; // EjsS Model.Variables.Var Table.pi

  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var selectedview; // EjsS Model.Variables.layout.selectedview
  var Width; // EjsS Model.Variables.layout.Width
  var Width1; // EjsS Model.Variables.layout.Width1
  var Height; // EjsS Model.Variables.layout.Height

  var m; // EjsS Model.Variables.simplespring.m
  var k; // EjsS Model.Variables.simplespring.k
  var l; // EjsS Model.Variables.simplespring.l
  var ntheory; // EjsS Model.Variables.simplespring.ntheory
  var n; // EjsS Model.Variables.simplespring.n
  var x; // EjsS Model.Variables.simplespring.x
  var xideal; // EjsS Model.Variables.simplespring.xideal
  var xideal0; // EjsS Model.Variables.simplespring.xideal0
  var xideal1; // EjsS Model.Variables.simplespring.xideal1
  var xideal2; // EjsS Model.Variables.simplespring.xideal2
  var xideal3; // EjsS Model.Variables.simplespring.xideal3
  var y; // EjsS Model.Variables.simplespring.y
  var vx; // EjsS Model.Variables.simplespring.vx
  var vxideal; // EjsS Model.Variables.simplespring.vxideal
  var t; // EjsS Model.Variables.simplespring.t
  var X; // EjsS Model.Variables.simplespring.X
  var T; // EjsS Model.Variables.simplespring.T
  var dt; // EjsS Model.Variables.simplespring.dt
  var w; // EjsS Model.Variables.simplespring.w
  var a; // EjsS Model.Variables.simplespring.a
  var fo; // EjsS Model.Variables.simplespring.fo
  var fonew; // EjsS Model.Variables.simplespring.fonew

  var b; // EjsS Model.Variables.advancedspring.b
  var amplitude; // EjsS Model.Variables.advancedspring.amplitude
  var frequency; // EjsS Model.Variables.advancedspring.frequency
  var Hertz; // EjsS Model.Variables.advancedspring.Hertz
  var Hertzover; // EjsS Model.Variables.advancedspring.Hertzover
  var Hertztheory; // EjsS Model.Variables.advancedspring.Hertztheory
  var Hertzovertheory; // EjsS Model.Variables.advancedspring.Hertzovertheory
  var W; // EjsS Model.Variables.advancedspring.W
  var omega; // EjsS Model.Variables.advancedspring.omega
  var factor; // EjsS Model.Variables.advancedspring.factor
  var factor0; // EjsS Model.Variables.advancedspring.factor0
  var factor1; // EjsS Model.Variables.advancedspring.factor1
  var factor2; // EjsS Model.Variables.advancedspring.factor2
  var factor3; // EjsS Model.Variables.advancedspring.factor3
  var phi; // EjsS Model.Variables.advancedspring.phi
  var phi0; // EjsS Model.Variables.advancedspring.phi0
  var phi1; // EjsS Model.Variables.advancedspring.phi1
  var phi2; // EjsS Model.Variables.advancedspring.phi2
  var phi3; // EjsS Model.Variables.advancedspring.phi3

  var maxX; // EjsS Model.Variables.resonance.maxX
  var maxXs; // EjsS Model.Variables.resonance.maxXs
  var maxXideal; // EjsS Model.Variables.resonance.maxXideal
  var maxXideal0; // EjsS Model.Variables.resonance.maxXideal0
  var maxXideal1; // EjsS Model.Variables.resonance.maxXideal1
  var maxXideal2; // EjsS Model.Variables.resonance.maxXideal2
  var maxXideal3; // EjsS Model.Variables.resonance.maxXideal3
  var maxXsideal; // EjsS Model.Variables.resonance.maxXsideal
  var maxXsideal0; // EjsS Model.Variables.resonance.maxXsideal0
  var maxXsideal1; // EjsS Model.Variables.resonance.maxXsideal1
  var maxXsideal2; // EjsS Model.Variables.resonance.maxXsideal2
  var maxXsideal3; // EjsS Model.Variables.resonance.maxXsideal3
  var maxXsarray; // EjsS Model.Variables.resonance.maxXsarray
  var maxXsarrayideal; // EjsS Model.Variables.resonance.maxXsarrayideal
  var maxXsarray1; // EjsS Model.Variables.resonance.maxXsarray1
  var maxXsarray1ideal; // EjsS Model.Variables.resonance.maxXsarray1ideal
  var maxXsarray2; // EjsS Model.Variables.resonance.maxXsarray2
  var maxXsarray2ideal; // EjsS Model.Variables.resonance.maxXsarray2ideal
  var maxXsarray3; // EjsS Model.Variables.resonance.maxXsarray3
  var maxXsarray3ideal; // EjsS Model.Variables.resonance.maxXsarray3ideal
  var maxXsarray4; // EjsS Model.Variables.resonance.maxXsarray4
  var maxXsarray4ideal; // EjsS Model.Variables.resonance.maxXsarray4ideal
  var maxXsarray5; // EjsS Model.Variables.resonance.maxXsarray5
  var maxXsarray5ideal; // EjsS Model.Variables.resonance.maxXsarray5ideal
  var maxXsarray6; // EjsS Model.Variables.resonance.maxXsarray6
  var maxXsarray6ideal; // EjsS Model.Variables.resonance.maxXsarray6ideal
  var maxXsarray7; // EjsS Model.Variables.resonance.maxXsarray7
  var maxXsarray7ideal; // EjsS Model.Variables.resonance.maxXsarray7ideal
  var counter; // EjsS Model.Variables.resonance.counter
  var counter1; // EjsS Model.Variables.resonance.counter1
  var xshow; // EjsS Model.Variables.resonance.xshow
  var xshowforce; // EjsS Model.Variables.resonance.xshowforce
  var xshowspring; // EjsS Model.Variables.resonance.xshowspring
  var showA; // EjsS Model.Variables.resonance.showA
  var fshow; // EjsS Model.Variables.resonance.fshow
  var sizeyforce; // EjsS Model.Variables.resonance.sizeyforce
  var store; // EjsS Model.Variables.resonance.store
  var store1; // EjsS Model.Variables.resonance.store1
  var store2; // EjsS Model.Variables.resonance.store2
  var store3; // EjsS Model.Variables.resonance.store3
  var store4; // EjsS Model.Variables.resonance.store4
  var store5; // EjsS Model.Variables.resonance.store5
  var store6; // EjsS Model.Variables.resonance.store6
  var store7; // EjsS Model.Variables.resonance.store7
  var autoscaley; // EjsS Model.Variables.resonance.autoscaley
  var auto; // EjsS Model.Variables.resonance.auto
  var theoryshow; // EjsS Model.Variables.resonance.theoryshow
  var theoryshow0; // EjsS Model.Variables.resonance.theoryshow0
  var theoryshow1; // EjsS Model.Variables.resonance.theoryshow1
  var theoryshow2; // EjsS Model.Variables.resonance.theoryshow2
  var theoryshow3; // EjsS Model.Variables.resonance.theoryshow3
  var timerstart; // EjsS Model.Variables.resonance.timerstart

  var elementinteracted; // EjsS Model.Variables.simplfy.elementinteracted
  var singleshow; // EjsS Model.Variables.simplfy.singleshow

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      print : print,
      fontb : fontb,
      font : font,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      rangex : rangex,
      rangey : rangey,
      sizex : sizex,
      sizey : sizey,
      selected : selected,
      text : text,
      pi : pi,
      isAndroid : isAndroid,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      selectedview : selectedview,
      Width : Width,
      Width1 : Width1,
      Height : Height,
      m : m,
      k : k,
      l : l,
      ntheory : ntheory,
      n : n,
      x : x,
      xideal : xideal,
      xideal0 : xideal0,
      xideal1 : xideal1,
      xideal2 : xideal2,
      xideal3 : xideal3,
      y : y,
      vx : vx,
      vxideal : vxideal,
      t : t,
      X : X,
      T : T,
      dt : dt,
      w : w,
      a : a,
      fo : fo,
      fonew : fonew,
      b : b,
      amplitude : amplitude,
      frequency : frequency,
      Hertz : Hertz,
      Hertzover : Hertzover,
      Hertztheory : Hertztheory,
      Hertzovertheory : Hertzovertheory,
      W : W,
      omega : omega,
      factor : factor,
      factor0 : factor0,
      factor1 : factor1,
      factor2 : factor2,
      factor3 : factor3,
      phi : phi,
      phi0 : phi0,
      phi1 : phi1,
      phi2 : phi2,
      phi3 : phi3,
      maxX : maxX,
      maxXs : maxXs,
      maxXideal : maxXideal,
      maxXideal0 : maxXideal0,
      maxXideal1 : maxXideal1,
      maxXideal2 : maxXideal2,
      maxXideal3 : maxXideal3,
      maxXsideal : maxXsideal,
      maxXsideal0 : maxXsideal0,
      maxXsideal1 : maxXsideal1,
      maxXsideal2 : maxXsideal2,
      maxXsideal3 : maxXsideal3,
      maxXsarray : maxXsarray,
      maxXsarrayideal : maxXsarrayideal,
      maxXsarray1 : maxXsarray1,
      maxXsarray1ideal : maxXsarray1ideal,
      maxXsarray2 : maxXsarray2,
      maxXsarray2ideal : maxXsarray2ideal,
      maxXsarray3 : maxXsarray3,
      maxXsarray3ideal : maxXsarray3ideal,
      maxXsarray4 : maxXsarray4,
      maxXsarray4ideal : maxXsarray4ideal,
      maxXsarray5 : maxXsarray5,
      maxXsarray5ideal : maxXsarray5ideal,
      maxXsarray6 : maxXsarray6,
      maxXsarray6ideal : maxXsarray6ideal,
      maxXsarray7 : maxXsarray7,
      maxXsarray7ideal : maxXsarray7ideal,
      counter : counter,
      counter1 : counter1,
      xshow : xshow,
      xshowforce : xshowforce,
      xshowspring : xshowspring,
      showA : showA,
      fshow : fshow,
      sizeyforce : sizeyforce,
      store : store,
      store1 : store1,
      store2 : store2,
      store3 : store3,
      store4 : store4,
      store5 : store5,
      store6 : store6,
      store7 : store7,
      autoscaley : autoscaley,
      auto : auto,
      theoryshow : theoryshow,
      theoryshow0 : theoryshow0,
      theoryshow1 : theoryshow1,
      theoryshow2 : theoryshow2,
      theoryshow3 : theoryshow3,
      timerstart : timerstart,
      elementinteracted : elementinteracted,
      singleshow : singleshow
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.rangex != "undefined") rangex = json.rangex;
    if(typeof json.rangey != "undefined") rangey = json.rangey;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.selectedview != "undefined") selectedview = json.selectedview;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.l != "undefined") l = json.l;
    if(typeof json.ntheory != "undefined") ntheory = json.ntheory;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xideal != "undefined") xideal = json.xideal;
    if(typeof json.xideal0 != "undefined") xideal0 = json.xideal0;
    if(typeof json.xideal1 != "undefined") xideal1 = json.xideal1;
    if(typeof json.xideal2 != "undefined") xideal2 = json.xideal2;
    if(typeof json.xideal3 != "undefined") xideal3 = json.xideal3;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vxideal != "undefined") vxideal = json.vxideal;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.X != "undefined") X = json.X;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.fo != "undefined") fo = json.fo;
    if(typeof json.fonew != "undefined") fonew = json.fonew;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.amplitude != "undefined") amplitude = json.amplitude;
    if(typeof json.frequency != "undefined") frequency = json.frequency;
    if(typeof json.Hertz != "undefined") Hertz = json.Hertz;
    if(typeof json.Hertzover != "undefined") Hertzover = json.Hertzover;
    if(typeof json.Hertztheory != "undefined") Hertztheory = json.Hertztheory;
    if(typeof json.Hertzovertheory != "undefined") Hertzovertheory = json.Hertzovertheory;
    if(typeof json.W != "undefined") W = json.W;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.factor != "undefined") factor = json.factor;
    if(typeof json.factor0 != "undefined") factor0 = json.factor0;
    if(typeof json.factor1 != "undefined") factor1 = json.factor1;
    if(typeof json.factor2 != "undefined") factor2 = json.factor2;
    if(typeof json.factor3 != "undefined") factor3 = json.factor3;
    if(typeof json.phi != "undefined") phi = json.phi;
    if(typeof json.phi0 != "undefined") phi0 = json.phi0;
    if(typeof json.phi1 != "undefined") phi1 = json.phi1;
    if(typeof json.phi2 != "undefined") phi2 = json.phi2;
    if(typeof json.phi3 != "undefined") phi3 = json.phi3;
    if(typeof json.maxX != "undefined") maxX = json.maxX;
    if(typeof json.maxXs != "undefined") maxXs = json.maxXs;
    if(typeof json.maxXideal != "undefined") maxXideal = json.maxXideal;
    if(typeof json.maxXideal0 != "undefined") maxXideal0 = json.maxXideal0;
    if(typeof json.maxXideal1 != "undefined") maxXideal1 = json.maxXideal1;
    if(typeof json.maxXideal2 != "undefined") maxXideal2 = json.maxXideal2;
    if(typeof json.maxXideal3 != "undefined") maxXideal3 = json.maxXideal3;
    if(typeof json.maxXsideal != "undefined") maxXsideal = json.maxXsideal;
    if(typeof json.maxXsideal0 != "undefined") maxXsideal0 = json.maxXsideal0;
    if(typeof json.maxXsideal1 != "undefined") maxXsideal1 = json.maxXsideal1;
    if(typeof json.maxXsideal2 != "undefined") maxXsideal2 = json.maxXsideal2;
    if(typeof json.maxXsideal3 != "undefined") maxXsideal3 = json.maxXsideal3;
    if(typeof json.maxXsarray != "undefined") maxXsarray = json.maxXsarray;
    if(typeof json.maxXsarrayideal != "undefined") maxXsarrayideal = json.maxXsarrayideal;
    if(typeof json.maxXsarray1 != "undefined") maxXsarray1 = json.maxXsarray1;
    if(typeof json.maxXsarray1ideal != "undefined") maxXsarray1ideal = json.maxXsarray1ideal;
    if(typeof json.maxXsarray2 != "undefined") maxXsarray2 = json.maxXsarray2;
    if(typeof json.maxXsarray2ideal != "undefined") maxXsarray2ideal = json.maxXsarray2ideal;
    if(typeof json.maxXsarray3 != "undefined") maxXsarray3 = json.maxXsarray3;
    if(typeof json.maxXsarray3ideal != "undefined") maxXsarray3ideal = json.maxXsarray3ideal;
    if(typeof json.maxXsarray4 != "undefined") maxXsarray4 = json.maxXsarray4;
    if(typeof json.maxXsarray4ideal != "undefined") maxXsarray4ideal = json.maxXsarray4ideal;
    if(typeof json.maxXsarray5 != "undefined") maxXsarray5 = json.maxXsarray5;
    if(typeof json.maxXsarray5ideal != "undefined") maxXsarray5ideal = json.maxXsarray5ideal;
    if(typeof json.maxXsarray6 != "undefined") maxXsarray6 = json.maxXsarray6;
    if(typeof json.maxXsarray6ideal != "undefined") maxXsarray6ideal = json.maxXsarray6ideal;
    if(typeof json.maxXsarray7 != "undefined") maxXsarray7 = json.maxXsarray7;
    if(typeof json.maxXsarray7ideal != "undefined") maxXsarray7ideal = json.maxXsarray7ideal;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.counter1 != "undefined") counter1 = json.counter1;
    if(typeof json.xshow != "undefined") xshow = json.xshow;
    if(typeof json.xshowforce != "undefined") xshowforce = json.xshowforce;
    if(typeof json.xshowspring != "undefined") xshowspring = json.xshowspring;
    if(typeof json.showA != "undefined") showA = json.showA;
    if(typeof json.fshow != "undefined") fshow = json.fshow;
    if(typeof json.sizeyforce != "undefined") sizeyforce = json.sizeyforce;
    if(typeof json.store != "undefined") store = json.store;
    if(typeof json.store1 != "undefined") store1 = json.store1;
    if(typeof json.store2 != "undefined") store2 = json.store2;
    if(typeof json.store3 != "undefined") store3 = json.store3;
    if(typeof json.store4 != "undefined") store4 = json.store4;
    if(typeof json.store5 != "undefined") store5 = json.store5;
    if(typeof json.store6 != "undefined") store6 = json.store6;
    if(typeof json.store7 != "undefined") store7 = json.store7;
    if(typeof json.autoscaley != "undefined") autoscaley = json.autoscaley;
    if(typeof json.auto != "undefined") auto = json.auto;
    if(typeof json.theoryshow != "undefined") theoryshow = json.theoryshow;
    if(typeof json.theoryshow0 != "undefined") theoryshow0 = json.theoryshow0;
    if(typeof json.theoryshow1 != "undefined") theoryshow1 = json.theoryshow1;
    if(typeof json.theoryshow2 != "undefined") theoryshow2 = json.theoryshow2;
    if(typeof json.theoryshow3 != "undefined") theoryshow3 = json.theoryshow3;
    if(typeof json.timerstart != "undefined") timerstart = json.timerstart;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.singleshow != "undefined") singleshow = json.singleshow;
  };

  _model._inputAndPublicParameters = ["print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "selectedview",  "Width",  "Width1",  "Height",  "m",  "k",  "l",  "ntheory",  "n",  "x",  "xideal",  "xideal0",  "xideal1",  "xideal2",  "xideal3",  "y",  "vx",  "vxideal",  "t",  "X",  "T",  "dt",  "w",  "a",  "fo",  "fonew",  "b",  "amplitude",  "frequency",  "Hertz",  "Hertzover",  "Hertztheory",  "Hertzovertheory",  "W",  "omega",  "factor",  "factor0",  "factor1",  "factor2",  "factor3",  "phi",  "phi0",  "phi1",  "phi2",  "phi3",  "maxX",  "maxXs",  "maxXideal",  "maxXideal0",  "maxXideal1",  "maxXideal2",  "maxXideal3",  "maxXsideal",  "maxXsideal0",  "maxXsideal1",  "maxXsideal2",  "maxXsideal3",  "maxXsarray",  "maxXsarrayideal",  "maxXsarray1",  "maxXsarray1ideal",  "maxXsarray2",  "maxXsarray2ideal",  "maxXsarray3",  "maxXsarray3ideal",  "maxXsarray4",  "maxXsarray4ideal",  "maxXsarray5",  "maxXsarray5ideal",  "maxXsarray6",  "maxXsarray6ideal",  "maxXsarray7",  "maxXsarray7ideal",  "counter",  "counter1",  "xshow",  "xshowforce",  "xshowspring",  "showA",  "fshow",  "sizeyforce",  "store",  "store1",  "store2",  "store3",  "store4",  "store5",  "store6",  "store7",  "autoscaley",  "auto",  "theoryshow",  "theoryshow0",  "theoryshow1",  "theoryshow2",  "theoryshow3",  "timerstart",  "elementinteracted",  "singleshow"]; 

  _model._outputAndPublicParameters = ["print",  "fontb",  "font",  "xmin",  "xmax",  "ymin",  "ymax",  "rangex",  "rangey",  "sizex",  "sizey",  "selected",  "text",  "pi",  "isAndroid",  "iOS",  "iPad",  "iPhone",  "selectedview",  "Width",  "Width1",  "Height",  "m",  "k",  "l",  "ntheory",  "n",  "x",  "xideal",  "xideal0",  "xideal1",  "xideal2",  "xideal3",  "y",  "vx",  "vxideal",  "t",  "X",  "T",  "dt",  "w",  "a",  "fo",  "fonew",  "b",  "amplitude",  "frequency",  "Hertz",  "Hertzover",  "Hertztheory",  "Hertzovertheory",  "W",  "omega",  "factor",  "factor0",  "factor1",  "factor2",  "factor3",  "phi",  "phi0",  "phi1",  "phi2",  "phi3",  "maxX",  "maxXs",  "maxXideal",  "maxXideal0",  "maxXideal1",  "maxXideal2",  "maxXideal3",  "maxXsideal",  "maxXsideal0",  "maxXsideal1",  "maxXsideal2",  "maxXsideal3",  "maxXsarray",  "maxXsarrayideal",  "maxXsarray1",  "maxXsarray1ideal",  "maxXsarray2",  "maxXsarray2ideal",  "maxXsarray3",  "maxXsarray3ideal",  "maxXsarray4",  "maxXsarray4ideal",  "maxXsarray5",  "maxXsarray5ideal",  "maxXsarray6",  "maxXsarray6ideal",  "maxXsarray7",  "maxXsarray7ideal",  "counter",  "counter1",  "xshow",  "xshowforce",  "xshowspring",  "showA",  "fshow",  "sizeyforce",  "store",  "store1",  "store2",  "store3",  "store4",  "store5",  "store6",  "store7",  "autoscaley",  "auto",  "theoryshow",  "theoryshow0",  "theoryshow1",  "theoryshow2",  "theoryshow3",  "timerstart",  "elementinteracted",  "singleshow"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["dropdownmenu"] = true;
    __pagesEnabled["physical mass"] = true;
    __pagesEnabled["theory initial"] = true;
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["maximum amplitude"] = true;
    __pagesEnabled["drvingforce"] = true;
    __pagesEnabled["theory"] = true;
    __pagesEnabled["screen"] = true;
  });

  _model.addToReset(function() {
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.Var Table.font
    xmin = -2.5; // EjsS Model.Variables.Var Table.xmin
    xmax = 2.5; // EjsS Model.Variables.Var Table.xmax
    ymin = 0; // EjsS Model.Variables.Var Table.ymin
    ymax = 10; // EjsS Model.Variables.Var Table.ymax
    rangex = xmax-xmin; // EjsS Model.Variables.Var Table.rangex
    rangey = ymax-ymin; // EjsS Model.Variables.Var Table.rangey
    sizex = rangex/20; // EjsS Model.Variables.Var Table.sizex
    sizey = rangey/20; // EjsS Model.Variables.Var Table.sizey
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "critical_damping,b=2.0";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    text = "select dropdown menu and click play"; // EjsS Model.Variables.Var Table.text
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
  });

  _model.addToReset(function() {
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    selectedview = new Array(1); // EjsS Model.Variables.layout.selectedview
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.layout.selectedview
        selectedview[_i0] = "dt = 0.25";  // EjsS Model.Variables.layout.selectedview
      }
    }());
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Width1 = (_isEPub)?"200":"50%"; // EjsS Model.Variables.layout.Width1
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
  });

  _model.addToReset(function() {
    m = 1; // EjsS Model.Variables.simplespring.m
    k = 1; // EjsS Model.Variables.simplespring.k
    l = 0; // EjsS Model.Variables.simplespring.l
    ntheory = 200; // EjsS Model.Variables.simplespring.ntheory
    n = 40; // EjsS Model.Variables.simplespring.n
    x = new Array(n); // EjsS Model.Variables.simplespring.x
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.x
        x[_i0] = 0;  // EjsS Model.Variables.simplespring.x
      }
    }());
    xideal = new Array(n); // EjsS Model.Variables.simplespring.xideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.xideal
        xideal[_i0] = 0;  // EjsS Model.Variables.simplespring.xideal
      }
    }());
    xideal0 = new Array(n); // EjsS Model.Variables.simplespring.xideal0
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.xideal0
        xideal0[_i0] = 0;  // EjsS Model.Variables.simplespring.xideal0
      }
    }());
    xideal1 = new Array(n); // EjsS Model.Variables.simplespring.xideal1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.xideal1
        xideal1[_i0] = 0;  // EjsS Model.Variables.simplespring.xideal1
      }
    }());
    xideal2 = new Array(n); // EjsS Model.Variables.simplespring.xideal2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.xideal2
        xideal2[_i0] = 0;  // EjsS Model.Variables.simplespring.xideal2
      }
    }());
    xideal3 = new Array(n); // EjsS Model.Variables.simplespring.xideal3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.xideal3
        xideal3[_i0] = 0;  // EjsS Model.Variables.simplespring.xideal3
      }
    }());
    y = new Array(n); // EjsS Model.Variables.simplespring.y
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.y
        y[_i0] = 0;  // EjsS Model.Variables.simplespring.y
      }
    }());
    vx = new Array(n); // EjsS Model.Variables.simplespring.vx
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.vx
        vx[_i0] = 0;  // EjsS Model.Variables.simplespring.vx
      }
    }());
    vxideal = new Array(n); // EjsS Model.Variables.simplespring.vxideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.simplespring.vxideal
        vxideal[_i0] = 0;  // EjsS Model.Variables.simplespring.vxideal
      }
    }());
    t = 0; // EjsS Model.Variables.simplespring.t
    X = x-l; // EjsS Model.Variables.simplespring.X
    T = 2*pi*Math.sqrt(m/k); // EjsS Model.Variables.simplespring.T
    dt = 0.25; // EjsS Model.Variables.simplespring.dt
    w = 2*pi/T; // EjsS Model.Variables.simplespring.w
    a = -w^2*x; // EjsS Model.Variables.simplespring.a
    fo = 1/(2*pi)*Math.sqrt(k/m); // EjsS Model.Variables.simplespring.fo
  });

  _model.addToReset(function() {
    b = 0; // EjsS Model.Variables.advancedspring.b
    amplitude = 1; // EjsS Model.Variables.advancedspring.amplitude
    frequency = 0; // EjsS Model.Variables.advancedspring.frequency
    Hertz = new Array(n); // EjsS Model.Variables.advancedspring.Hertz
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.Hertz
        Hertz[_i0] = 0;  // EjsS Model.Variables.advancedspring.Hertz
      }
    }());
    Hertzover = new Array(n); // EjsS Model.Variables.advancedspring.Hertzover
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.Hertzover
        Hertzover[_i0] = Hertz/fo;  // EjsS Model.Variables.advancedspring.Hertzover
      }
    }());
    Hertztheory = new Array(n); // EjsS Model.Variables.advancedspring.Hertztheory
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.Hertztheory
        Hertztheory[_i0] = 0;  // EjsS Model.Variables.advancedspring.Hertztheory
      }
    }());
    Hertzovertheory = new Array(n); // EjsS Model.Variables.advancedspring.Hertzovertheory
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.Hertzovertheory
        Hertzovertheory[_i0] = Hertztheory/fo;  // EjsS Model.Variables.advancedspring.Hertzovertheory
      }
    }());
    W = new Array(n); // EjsS Model.Variables.advancedspring.W
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.W
        W[_i0] = 0;  // EjsS Model.Variables.advancedspring.W
      }
    }());
    omega = new Array(n); // EjsS Model.Variables.advancedspring.omega
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.omega
        omega[_i0] = 0;  // EjsS Model.Variables.advancedspring.omega
      }
    }());
    factor = new Array(n); // EjsS Model.Variables.advancedspring.factor
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.factor
        factor[_i0] = 0;  // EjsS Model.Variables.advancedspring.factor
      }
    }());
    factor0 = new Array(n); // EjsS Model.Variables.advancedspring.factor0
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.factor0
        factor0[_i0] = 0;  // EjsS Model.Variables.advancedspring.factor0
      }
    }());
    factor1 = new Array(n); // EjsS Model.Variables.advancedspring.factor1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.factor1
        factor1[_i0] = 0;  // EjsS Model.Variables.advancedspring.factor1
      }
    }());
    factor2 = new Array(n); // EjsS Model.Variables.advancedspring.factor2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.factor2
        factor2[_i0] = 0;  // EjsS Model.Variables.advancedspring.factor2
      }
    }());
    factor3 = new Array(n); // EjsS Model.Variables.advancedspring.factor3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.factor3
        factor3[_i0] = 0;  // EjsS Model.Variables.advancedspring.factor3
      }
    }());
    phi = new Array(n); // EjsS Model.Variables.advancedspring.phi
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.phi
        phi[_i0] = 0;  // EjsS Model.Variables.advancedspring.phi
      }
    }());
    phi0 = new Array(n); // EjsS Model.Variables.advancedspring.phi0
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.phi0
        phi0[_i0] = 0;  // EjsS Model.Variables.advancedspring.phi0
      }
    }());
    phi1 = new Array(n); // EjsS Model.Variables.advancedspring.phi1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.phi1
        phi1[_i0] = 0;  // EjsS Model.Variables.advancedspring.phi1
      }
    }());
    phi2 = new Array(n); // EjsS Model.Variables.advancedspring.phi2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.phi2
        phi2[_i0] = 0;  // EjsS Model.Variables.advancedspring.phi2
      }
    }());
    phi3 = new Array(n); // EjsS Model.Variables.advancedspring.phi3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.advancedspring.phi3
        phi3[_i0] = 0;  // EjsS Model.Variables.advancedspring.phi3
      }
    }());
  });

  _model.addToReset(function() {
    maxX = new Array(n); // EjsS Model.Variables.resonance.maxX
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxX
        maxX[_i0] = 0;  // EjsS Model.Variables.resonance.maxX
      }
    }());
    maxXs = new Array(n); // EjsS Model.Variables.resonance.maxXs
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXs
        maxXs[_i0] = 0;  // EjsS Model.Variables.resonance.maxXs
      }
    }());
    maxXideal = new Array(n); // EjsS Model.Variables.resonance.maxXideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXideal
        maxXideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXideal
      }
    }());
    maxXideal0 = new Array(n); // EjsS Model.Variables.resonance.maxXideal0
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXideal0
        maxXideal0[_i0] = 0;  // EjsS Model.Variables.resonance.maxXideal0
      }
    }());
    maxXideal1 = new Array(n); // EjsS Model.Variables.resonance.maxXideal1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXideal1
        maxXideal1[_i0] = 0;  // EjsS Model.Variables.resonance.maxXideal1
      }
    }());
    maxXideal2 = new Array(n); // EjsS Model.Variables.resonance.maxXideal2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXideal2
        maxXideal2[_i0] = 0;  // EjsS Model.Variables.resonance.maxXideal2
      }
    }());
    maxXideal3 = new Array(n); // EjsS Model.Variables.resonance.maxXideal3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXideal3
        maxXideal3[_i0] = 0;  // EjsS Model.Variables.resonance.maxXideal3
      }
    }());
    maxXsideal = new Array(n); // EjsS Model.Variables.resonance.maxXsideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsideal
        maxXsideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsideal
      }
    }());
    maxXsideal0 = new Array(n); // EjsS Model.Variables.resonance.maxXsideal0
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsideal0
        maxXsideal0[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsideal0
      }
    }());
    maxXsideal1 = new Array(n); // EjsS Model.Variables.resonance.maxXsideal1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsideal1
        maxXsideal1[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsideal1
      }
    }());
    maxXsideal2 = new Array(n); // EjsS Model.Variables.resonance.maxXsideal2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsideal2
        maxXsideal2[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsideal2
      }
    }());
    maxXsideal3 = new Array(n); // EjsS Model.Variables.resonance.maxXsideal3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsideal3
        maxXsideal3[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsideal3
      }
    }());
    maxXsarray = new Array(n); // EjsS Model.Variables.resonance.maxXsarray
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray
        maxXsarray[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray
      }
    }());
    maxXsarrayideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarrayideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarrayideal
        maxXsarrayideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarrayideal
      }
    }());
    maxXsarray1 = new Array(n); // EjsS Model.Variables.resonance.maxXsarray1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray1
        maxXsarray1[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray1
      }
    }());
    maxXsarray1ideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarray1ideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray1ideal
        maxXsarray1ideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray1ideal
      }
    }());
    maxXsarray2 = new Array(n); // EjsS Model.Variables.resonance.maxXsarray2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray2
        maxXsarray2[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray2
      }
    }());
    maxXsarray2ideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarray2ideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray2ideal
        maxXsarray2ideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray2ideal
      }
    }());
    maxXsarray3 = new Array(n); // EjsS Model.Variables.resonance.maxXsarray3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray3
        maxXsarray3[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray3
      }
    }());
    maxXsarray3ideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarray3ideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray3ideal
        maxXsarray3ideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray3ideal
      }
    }());
    maxXsarray4 = new Array(n); // EjsS Model.Variables.resonance.maxXsarray4
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray4
        maxXsarray4[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray4
      }
    }());
    maxXsarray4ideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarray4ideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray4ideal
        maxXsarray4ideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray4ideal
      }
    }());
    maxXsarray5 = new Array(n); // EjsS Model.Variables.resonance.maxXsarray5
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray5
        maxXsarray5[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray5
      }
    }());
    maxXsarray5ideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarray5ideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray5ideal
        maxXsarray5ideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray5ideal
      }
    }());
    maxXsarray6 = new Array(n); // EjsS Model.Variables.resonance.maxXsarray6
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray6
        maxXsarray6[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray6
      }
    }());
    maxXsarray6ideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarray6ideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray6ideal
        maxXsarray6ideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray6ideal
      }
    }());
    maxXsarray7 = new Array(n); // EjsS Model.Variables.resonance.maxXsarray7
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray7
        maxXsarray7[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray7
      }
    }());
    maxXsarray7ideal = new Array(n); // EjsS Model.Variables.resonance.maxXsarray7ideal
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.maxXsarray7ideal
        maxXsarray7ideal[_i0] = 0;  // EjsS Model.Variables.resonance.maxXsarray7ideal
      }
    }());
    counter = 0; // EjsS Model.Variables.resonance.counter
    counter1 = 0; // EjsS Model.Variables.resonance.counter1
    xshowforce = false; // EjsS Model.Variables.resonance.xshowforce
    showA = false; // EjsS Model.Variables.resonance.showA
    fshow = true; // EjsS Model.Variables.resonance.fshow
    sizeyforce = new Array(n); // EjsS Model.Variables.resonance.sizeyforce
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.resonance.sizeyforce
        sizeyforce[_i0] = 0;  // EjsS Model.Variables.resonance.sizeyforce
      }
    }());
    store = false; // EjsS Model.Variables.resonance.store
    store1 = false; // EjsS Model.Variables.resonance.store1
    store2 = false; // EjsS Model.Variables.resonance.store2
    store3 = false; // EjsS Model.Variables.resonance.store3
    store4 = false; // EjsS Model.Variables.resonance.store4
    store5 = false; // EjsS Model.Variables.resonance.store5
    store6 = false; // EjsS Model.Variables.resonance.store6
    store7 = false; // EjsS Model.Variables.resonance.store7
    auto = false; // EjsS Model.Variables.resonance.auto
    timerstart = T/b; // EjsS Model.Variables.resonance.timerstart
  });

  _model.addToReset(function() {
    elementinteracted = -1; // EjsS Model.Variables.simplfy.elementinteracted
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function resetparticle () {  // > CustomCode.resetparticle:1
  for ( var counter=0; counter<n /* Iterations */ ; counter++) {  // > CustomCode.resetparticle:2
      // > CustomCode.resetparticle:3
  x[counter] =0;  // > CustomCode.resetparticle:4
  vx[counter] = 0;  // > CustomCode.resetparticle:5
  }  // > CustomCode.resetparticle:6
  }  // > CustomCode.resetparticle:7

  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
  var k =0.98 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.changeOrientation:3
  var kepub =0.9 ;  // > CustomCode.changeOrientation:4
  // check platform for Apps  // > CustomCode.changeOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:7
     // > CustomCode.changeOrientation:8
  // check platform for web browsers  // > CustomCode.changeOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
     // > CustomCode.changeOrientation:15
  switch (window.orientation) {  // > CustomCode.changeOrientation:16
    case 0:  // > CustomCode.changeOrientation:17
    case 180:  // > CustomCode.changeOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:21
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:22
        // return window.screen.height;  // > CustomCode.changeOrientation:23
        //  return window.innerHeight;  // > CustomCode.changeOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:25
      }  // > CustomCode.changeOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:29
        // return window.screen.height;  // > CustomCode.changeOrientation:30
        //  return window.innerHeight;  // > CustomCode.changeOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:32
      }  // > CustomCode.changeOrientation:33
      else {  // > CustomCode.changeOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:35
        return window.innerHeight*k;  // > CustomCode.changeOrientation:36
      }  // > CustomCode.changeOrientation:37
      break;  // > CustomCode.changeOrientation:38
    case 90:  // > CustomCode.changeOrientation:39
    case -90:  // > CustomCode.changeOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:41
     // > CustomCode.changeOrientation:42
      if (iOSapp){ // App  // > CustomCode.changeOrientation:43
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:44
        // return window.screen.height;  // > CustomCode.changeOrientation:45
        //  return window.innerHeight;  // > CustomCode.changeOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:47
      }  // > CustomCode.changeOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.changeOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:51
        // return window.screen.height;  // > CustomCode.changeOrientation:52
        //  return window.innerHeight;  // > CustomCode.changeOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:54
      }  // > CustomCode.changeOrientation:55
      else { // browser Android and PC  // > CustomCode.changeOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:57
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:58
        return window.innerHeight*k;  // > CustomCode.changeOrientation:59
      }  // > CustomCode.changeOrientation:60
      break;  // > CustomCode.changeOrientation:61
    default:  // > CustomCode.changeOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:64
      return window.innerHeight*k;  // > CustomCode.changeOrientation:65
  }  // > CustomCode.changeOrientation:66
     // > CustomCode.changeOrientation:67
  }  // > CustomCode.changeOrientation:68
     // > CustomCode.changeOrientation:69

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  _model.addToInitialization(function() {
    if (!__pagesEnabled["dropdownmenu"]) return;
    t=0;  // > Initialization.dropdownmenu:1
    m=1;  // > Initialization.dropdownmenu:2
    k=1;  // > Initialization.dropdownmenu:3
    //for ( counter=0; counter<n /* Iterations */ ; counter++) {xideal[counter]=Math.abs(amplitude*Math.sin(omega[counter]*0+phi[counter])/m/factor[counter]);}  // > Initialization.dropdownmenu:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["physical mass"]) return;
    //reset position of particles  // > Initialization.physical mass:1
    for ( var counter=0; counter<n /* Iterations */ ; counter++) {  // > Initialization.physical mass:2
      Hertz[counter] = Hertz[0] + counter/n*(2*fo);  // > Initialization.physical mass:3
        // > Initialization.physical mass:4
      Hertzover[counter]=Hertz[counter]/fo;  // > Initialization.physical mass:5
    // from LTL  // > Initialization.physical mass:6
    omega[counter] = 2*pi*Hertz[counter];  // > Initialization.physical mass:7
    // phi[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/b/omega[counter]);  // > Initialization.physical mass:8
    //phi[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/(b*omega[counter]/m));  // > Initialization.physical mass:9
    //factor[counter]=Math.sqrt(b*b*omega[counter]*omega[counter]/m/m+((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.physical mass:10
    //factor[counter]=Math.sqrt(k*b*b/(m*m*m)+1/(omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.physical mass:11
    //from LTL  // > Initialization.physical mass:12
    x[counter] =0;  // > Initialization.physical mass:13
    //xideal[counter] =0; // need to set value of ideal back to zero to recount  // > Initialization.physical mass:14
    //x[counter] =(amplitude/m)/Math.sqrt((w^2-(2*pi*Hertz[counter])^2)+b^2*(2*pi*Hertz[counter])^2/m^2)*Math.sin(2*pi*Hertz[counter]*t+Math.tan2((w^2-(2*pi*Hertz[counter])^2)/(b*(2*pi*Hertz[counter]));  // > Initialization.physical mass:15
    W[counter] = 2*pi*Hertz[counter];  // > Initialization.physical mass:16
    //x[counter] =(amplitude/m)/Math.sqrt((w^2-W[counter]^2)+b^2*W[counter]^2/m^2)*Math.sin(W*t+Math.atan((w^2-W[counter]^2)/(b*W[counter])));  // > Initialization.physical mass:17
    vx[counter] = 0;  // > Initialization.physical mass:18
    //vx[counter] = 1*w*Math.cos(w*T);  // > Initialization.physical mass:19
    maxX[counter]=0;  // > Initialization.physical mass:20
    maxXs[counter]=0;  // > Initialization.physical mass:21
    maxXideal[counter]=0; // need to set value of ideal back to zero to recount  // > Initialization.physical mass:22
    maxXsideal[counter]=0;  // > Initialization.physical mass:23
    }  // > Initialization.physical mass:24
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["theory initial"]) return;
    for ( var counter=0; counter<ntheory /* Iterations */ ; counter++) {  // > Initialization.theory initial:1
      Hertztheory[counter] = Hertz[0] + counter/ntheory*(2*fo);  // > Initialization.theory initial:2
      Hertzovertheory[counter]=Hertztheory[counter]/fo;  // > Initialization.theory initial:3
    // from LTL  // > Initialization.theory initial:4
    omega[counter] = 2*pi*Hertztheory[counter];  // > Initialization.theory initial:5
    // phi[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/b/omega[counter]);  // > Initialization.theory initial:6
    phi[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/(b*omega[counter]/m));  // > Initialization.theory initial:7
    //trying to make 4 theory line no damp, light, critical and heavy, 0,0.3,2,5 used  // > Initialization.theory initial:8
    phi0[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/(0*omega[counter]/m));  // > Initialization.theory initial:9
    phi1[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/(0.3*omega[counter]/m));  // > Initialization.theory initial:10
    phi2[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/(2*omega[counter]/m));  // > Initialization.theory initial:11
    phi3[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/(5*omega[counter]/m));  // > Initialization.theory initial:12
    //factor[counter]=Math.sqrt(b*b*omega[counter]*omega[counter]/m/m+((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.theory initial:13
    factor[counter]=Math.sqrt(k*b*b/(m*m*m)+1/(omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.theory initial:14
    //trying to make 4 theory line no damp, light, critical and heavy, 0,0.3,2,5 used  // > Initialization.theory initial:15
    factor0[counter]=Math.sqrt(k*0*0/(m*m*m)+1/(omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.theory initial:16
    factor1[counter]=Math.sqrt(k*0.3*0.3/(m*m*m)+1/(omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.theory initial:17
    factor2[counter]=Math.sqrt(k*2*2/(m*m*m)+1/(omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.theory initial:18
    factor3[counter]=Math.sqrt(k*5*5/(m*m*m)+1/(omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));  // > Initialization.theory initial:19
    //from LTL  // > Initialization.theory initial:20
    x[counter] =0;  // > Initialization.theory initial:21
    xideal[counter] =0; // need to set value of ideal back to zero to recount  // > Initialization.theory initial:22
    //x[counter] =(amplitude/m)/Math.sqrt((w^2-(2*pi*Hertz[counter])^2)+b^2*(2*pi*Hertz[counter])^2/m^2)*Math.sin(2*pi*Hertz[counter]*t+Math.tan2((w^2-(2*pi*Hertz[counter])^2)/(b*(2*pi*Hertz[counter]));  // > Initialization.theory initial:23
    W[counter] = 2*pi*Hertztheory[counter];  // > Initialization.theory initial:24
    //x[counter] =(amplitude/m)/Math.sqrt((w^2-W[counter]^2)+b^2*W[counter]^2/m^2)*Math.sin(W*t+Math.atan((w^2-W[counter]^2)/(b*W[counter])));  // > Initialization.theory initial:25
    vx[counter] = 0;  // > Initialization.theory initial:26
    //vx[counter] = 1*w*Math.cos(w*T);  // > Initialization.theory initial:27
    maxX[counter]=0;  // > Initialization.theory initial:28
    maxXs[counter]=0;  // > Initialization.theory initial:29
    maxXideal[counter]=0; // need to set value of ideal back to zero to recount  // > Initialization.theory initial:30
    //trying to make 4 theory line no damp, light, critical and heavy, 0,0.3,2,5 used  // > Initialization.theory initial:31
    maxXideal0[counter]=0;   // > Initialization.theory initial:32
    maxXideal1[counter]=0;   // > Initialization.theory initial:33
    maxXideal2[counter]=0;   // > Initialization.theory initial:34
    maxXideal3[counter]=0;   // > Initialization.theory initial:35
    maxXsideal[counter]=0;  // > Initialization.theory initial:36
    maxXsideal0[counter]=0;  // > Initialization.theory initial:37
    maxXsideal1[counter]=0;  // > Initialization.theory initial:38
    maxXsideal2[counter]=0;  // > Initialization.theory initial:39
    maxXsideal3[counter]=0;  // > Initialization.theory initial:40
    }  // > Initialization.theory initial:41
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (theoryshow==undefined){  // > Initialization.undefined:1
      theoryshow=false;  // > Initialization.undefined:2
      }  // > Initialization.undefined:3
        // > Initialization.undefined:4
      if (theoryshow0==undefined){  // > Initialization.undefined:5
      theoryshow0=false;  // > Initialization.undefined:6
      }  // > Initialization.undefined:7
      if (theoryshow1==undefined){  // > Initialization.undefined:8
      theoryshow1=false;  // > Initialization.undefined:9
      }  // > Initialization.undefined:10
    if (theoryshow2==undefined){  // > Initialization.undefined:11
      theoryshow2=false;  // > Initialization.undefined:12
      }  // > Initialization.undefined:13
    if (theoryshow3==undefined){  // > Initialization.undefined:14
      theoryshow3=false;  // > Initialization.undefined:15
      }  // > Initialization.undefined:16
    if (singleshow==undefined){  // > Initialization.undefined:17
      singleshow=true;  // > Initialization.undefined:18
      }  // > Initialization.undefined:19
      if (xshow==undefined){  // > Initialization.undefined:20
      xshow=false;  // > Initialization.undefined:21
      }  // > Initialization.undefined:22
      if (elementinteracted==undefined){  // > Initialization.undefined:23
      elementinteracted=n/2;  // > Initialization.undefined:24
      }  // > Initialization.undefined:25
    //xshowspring  // > Initialization.undefined:26
     if (xshowspring==undefined){  // > Initialization.undefined:27
      xshowspring=true;  // > Initialization.undefined:28
      }  // > Initialization.undefined:29
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(0,255,255); stop-opacity:1" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient)"  // > Initialization.svg:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.045]);  // > Initialization.axes:1
    //_view.plottingPanel.getTitleX().setPosition([0.5,0.06]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.0,0]);  // > Initialization.axes:3
    //_view.plottingPanel.getTitleY().setPosition([0.05,0.8]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["maximum amplitude"]) return;
    fonew=1/(2*pi)*Math.sqrt(k/m);  // > FixedRelations.maximum amplitude:1
    T=2*pi*Math.sqrt(m/k);  // > FixedRelations.maximum amplitude:2
    timerstart =Math.max(3*T/b,30);  // > FixedRelations.maximum amplitude:3
    if ( t > Math.max(3*T/b,30)){ // assume transient has died out after T/b to get steady state   // > FixedRelations.maximum amplitude:4
    //text = "measuring maximum amplitudes";  // > FixedRelations.maximum amplitude:5
    for ( counter=0; counter<n /* Iterations */ ; counter++) {  // > FixedRelations.maximum amplitude:6
      maxX[counter] = Math.max(x[counter],maxXs[counter]);  // > FixedRelations.maximum amplitude:7
      maxXs[counter]=Math.abs(maxX[counter]);  // > FixedRelations.maximum amplitude:8
        // > FixedRelations.maximum amplitude:9
      }  // > FixedRelations.maximum amplitude:10
      }  // > FixedRelations.maximum amplitude:11
       // > FixedRelations.maximum amplitude:12
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["drvingforce"]) return;
    for ( var counter=0; counter<n /* Iterations */ ; counter++) {  // > FixedRelations.drvingforce:1
         //ideal  // > FixedRelations.drvingforce:2
         maxXideal[counter] = Math.max(xideal[counter],maxXsideal[counter]);  // > FixedRelations.drvingforce:3
      maxXsideal[counter]=Math.abs(maxXideal[counter]);  // > FixedRelations.drvingforce:4
       sizeyforce[counter] = amplitude*Math.sin(2*pi*Hertz[counter]*t);  // > FixedRelations.drvingforce:5
       }  // > FixedRelations.drvingforce:6
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["theory"]) return;
    for ( var counter=0; counter<ntheory ; counter++)   // > FixedRelations.theory:1
    {  // > FixedRelations.theory:2
    //ideal  // > FixedRelations.theory:3
      //   maxXideal[counter] = Math.max(xideal[counter],maxXsideal[counter]);  // > FixedRelations.theory:4
     // maxXsideal[counter]=Math.abs(maxXideal[counter]); //theory  // > FixedRelations.theory:5
         //trying to make 4 theory line no damp, light, critical and heavy, 0,0.3,2,5 used  // > FixedRelations.theory:6
      //   formula for resonance  // > FixedRelations.theory:7
       xideal[counter]=(amplitude/m/factor[counter]/omega[counter]*Math.sin(omega[counter]*t+phi[counter])); //user select  // > FixedRelations.theory:8
       xideal0[counter]=(amplitude/m/factor0[counter]/omega[counter]*Math.sin(omega[counter]*t+phi0[counter])); //no damp  // > FixedRelations.theory:9
       xideal1[counter]=(amplitude/m/factor1[counter]/omega[counter]*Math.sin(omega[counter]*t+phi1[counter])); //light damp  // > FixedRelations.theory:10
       xideal2[counter]=(amplitude/m/factor2[counter]/omega[counter]*Math.sin(omega[counter]*t+phi2[counter])); //critical  // > FixedRelations.theory:11
       xideal3[counter]=(amplitude/m/factor3[counter]/omega[counter]*Math.sin(omega[counter]*t+phi3[counter])); //heavy damp  // > FixedRelations.theory:12
    //ideal  // > FixedRelations.theory:13
    //  // > FixedRelations.theory:14
         maxXideal[counter] = Math.max(xideal[counter],maxXsideal[counter]);  // > FixedRelations.theory:15
         //trying to make 4 theory line no damp, light, critical and heavy, 0,0.3,2,5 used  // > FixedRelations.theory:16
         maxXideal0[counter] = Math.max(xideal0[counter],maxXsideal0[counter]);  // > FixedRelations.theory:17
         maxXideal1[counter] = Math.max(xideal1[counter],maxXsideal1[counter]);  // > FixedRelations.theory:18
         maxXideal2[counter] = Math.max(xideal2[counter],maxXsideal2[counter]);  // > FixedRelations.theory:19
         maxXideal3[counter] = Math.max(xideal3[counter],maxXsideal3[counter]);  // > FixedRelations.theory:20
       //trying to make 4 theory line no damp, light, critical and heavy, 0,0.3,2,5 used     // > FixedRelations.theory:21
      maxXsideal[counter]=Math.abs(maxXideal[counter]); //theory  // > FixedRelations.theory:22
      maxXsideal0[counter]=Math.abs(maxXideal0[counter]); //theory  // > FixedRelations.theory:23
      maxXsideal1[counter]=Math.abs(maxXideal1[counter]); //theory  // > FixedRelations.theory:24
      maxXsideal2[counter]=Math.abs(maxXideal2[counter]); //theory  // > FixedRelations.theory:25
      maxXsideal3[counter]=Math.abs(maxXideal3[counter]); //theory  // > FixedRelations.theory:26
    }  // > FixedRelations.theory:27
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["screen"]) return;
    for ( counter=0; counter<n /* Iterations */ ; counter++) {  // > FixedRelations.screen:1
        // > FixedRelations.screen:2
      if (auto===true&&ymin>x[counter]){  // > FixedRelations.screen:3
      ymin=(ymin-1);  // > FixedRelations.screen:4
     }  // > FixedRelations.screen:5
      if (auto===true&&ymax<maxX[counter]){  // > FixedRelations.screen:6
      ymax=(ymax+1);  // > FixedRelations.screen:7
    //   ymin=ymax;  // > FixedRelations.screen:8
      }  // > FixedRelations.screen:9
      if (auto===false){  // > FixedRelations.screen:10
        ymin = 0;  // > FixedRelations.screen:11
        ymax= 10;  // > FixedRelations.screen:12
        }  // > FixedRelations.screen:13
         }  // > FixedRelations.screen:14
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _xLength;
    var _vxLength;

    __odeSelf._getOdeVars = function (){ return["x","vx","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _xLength = x.length;
      _vxLength = vx.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xLength; __j++)
          if (__state[__n++]!=x[__j] || __state[__n++]!=vx[__j]) { __mustReinitialize = true; break; }
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_xLength != x.length) return true;
      if (_vxLength != vx.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_xLength;i++) { // These two alternate in the state
          _aRate[__cRate++] = Array.isArray(vx[i]) ? vx[i][i] : vx[i]; // Rate for ODE: Evol Page:x
          _aRate[__cRate++] = Array.isArray(-k/m*(x[i]-l) - b*vx[i]/m + amplitude*Math.sin(2*pi*Hertz[i]*t)/m) ? -k/m*(x[i]-l) - b*vx[i]/m + amplitude*Math.sin(2*pi*Hertz[i]*t)/m[i] : -k/m*(x[i]-l) - b*vx[i]/m + amplitude*Math.sin(2*pi*Hertz[i]*t)/m; // Rate for ODE: Evol Page:vx
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        var vx = [];
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = _aState[__cOut++];
          vx[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0; __i<_xLength; __i++) { // These two alternate in the state
          x[__i] = __state[__cOut++];
          vx[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      for (__j=0; __j<_xLength; __j++) { // These two alternate in the state
         __state[__cIn++] = x[__j];
         __state[__cIn++] = vx[__j];
      }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(x.length),__beginIndex,x.ength);
  }

  function _historic_vx(__time) {
    var __beginIndex = 0 + x.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(vx.length),__beginIndex,vx.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new SHM24_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.fullscreen.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'fullscreen'
          _view.bottomPanel2.linkProperty("Display",  function() { return !print?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'bottomPanel2'
          _view.comboBox.linkProperty("Options",  function() { return ["select","show only one mass at F/fo=1","show only one mass at F/fo=0.5","show only one mass at F/fo=1.5","no damping","very light damping","light damping","moderate damping","critical damping","heavy damping","m=2kg","k=2N/m","user defined","","autoscale y axis","autoscale off","show mass","show mass off","show spring","show spring off","show force","show force off","show amplitudes","show amplitudes off","show theoretical","show theoretical off","dt = 0.25","dt = 1.00","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  //var option = _view.comboBox.getProperty("SelectedOptions");
  //alert(option);
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="user defined"){
    
    }
    //"show only one mass at F/fo=1","show only one mass at F/fo=0.5","show only one mass at F/fo=1.5"
  //printing begins
  else if (option == "print"){
    print = true;
    }
  //printing ends
  else if ( option=="show only one mass at F/fo=1"){
   singleshow=true;
   xshow=false;
   elementinteracted=n/2; //50;
    }
    else if ( option=="show only one mass at F/fo=0.5"){
   singleshow=true;
   xshow=false;
   elementinteracted=n/4;
    }
    else if ( option=="show only one mass at F/fo=1.5"){
   singleshow=true;
   xshow=false;
   elementinteracted=n/4*3;
    }
    //"show all mass springs"
    else if ( option=="show all mass springs"){
   
   xshow=true;
    }
    else if ( option=="no damping"){
    b=0;
  theoryshow0=true;
    }
    else if ( option=="very light damping"){
    b=0.05;
    }
    else if ( option=="light damping"){
    b=0.1;
  theoryshow1=true;
    }
    else if ( option=="moderate damping"){
    b=0.6;
    }
    else if ( option=="critical damping"){
    b=2.0;
  theoryshow2=true;
    }
  else if ( option=="heavy damping"){
    b=5.0;
  theoryshow3=true;
    }
    else if ( option=="m=2kg"){
   m=2.0;
    }
  else if ( option=="k=2N/m"){
   k=2.0;
    }
    
    else if ( option=="autoscale y axis"){
  auto=true;
    }
    else if ( option=="autoscale off"){
  auto=false;
    }
    else if ( option=="show mass"){
   
  xshow=true;
    }
    else if ( option=="show mass off"){
   
  xshow=false;
    }
    else if ( option=="show spring"){
   
    xshowspring=true;
    }
    else if ( option=="show spring off"){
   
    xshowspring=false;
    }
    else if ( option=="show force"){
   
    xshowforce=true;
    }
    else if ( option =="show force off"){
   
    xshowforce=false;
    }
    else if ( option=="show amplitudes"){
   
   showA=true;
    }
   else  if ( option=="show amplitudes off"){
   
   showA=false;
    }
  else if ( option=="show theoretical"){
   
  theoryshow=true;
    }
  else  if ( option=="show theoretical off"){
   
  theoryshow=false;
    }
   else  if ( option=="dt = 0.25"){
   
  dt = 0.25;
    }
    else if ( option=="dt = 1.00"){
   
  dt = 1.00;
    }
    
   // _initialize();
   // resetparticle();
  for ( var counter=0; counter<n /* Iterations */ ; counter++) {
   // Hertz[counter] = Hertz[0] + counter/n*(2*fo); //lay position
   // Hertzover[counter]=Hertz[counter]/fo;
  // from LTL
  //omega[counter] = 2*pi*Hertz[counter];
  // phi[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/b/omega[counter]);
  //phi[counter]=Math.atan(((k/m)-omega[counter]*omega[counter])/(b*omega[counter]/m));
  //factor[counter]=Math.sqrt(b*b*omega[counter]*omega[counter]/m/m+((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));
  //factor[counter]=Math.sqrt(k*b*b/(m*m*m)+1/(omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter])*((k/m)-omega[counter]*omega[counter]));
  //from LTL
  x[counter] =0;
  //xideal[counter] =0; // need to set value of ideal back to zero to recount
  //x[counter] =(amplitude/m)/Math.sqrt((w^2-(2*pi*Hertz[counter])^2)+b^2*(2*pi*Hertz[counter])^2/m^2)*Math.sin(2*pi*Hertz[counter]*t+Math.tan2((w^2-(2*pi*Hertz[counter])^2)/(b*(2*pi*Hertz[counter]));
  //W[counter] = 2*pi*Hertz[counter];
  //x[counter] =(amplitude/m)/Math.sqrt((w^2-W[counter]^2)+b^2*W[counter]^2/m^2)*Math.sin(W*t+Math.atan((w^2-W[counter]^2)/(b*W[counter])));
  vx[counter] = 0;
  //vx[counter] = 1*w*Math.cos(w*T);
  //maxX[counter]=0;
  //maxXs[counter]=0;
  //maxXideal[counter]=0; // need to set value of ideal back to zero to recount
  //maxXsideal[counter]=0;
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.worldgraph.linkProperty("Options",  function() { return ["autoscale y axe","autoscale off","show mass","show mass off","show spring","show spring off","show force","show force off","show amplitudes","show amplitudes off","show theoretical","show theoretical off","dt = 0.25","dt = 1.00"]; } ); // HtmlView Page linking property 'Options' for element 'worldgraph'
          _view.worldgraph.setAction("OnChange", function(_data,_info) {
  var opts = _view.worldgraph.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //var option = _view.worldgraph.getProperty("SelectedOptions");
  //alert(option);
  if ( option=="autoscale y axe"){
  auto=true;
    }
    if ( option=="autoscale off"){
  auto=false;
    }
    if ( option=="show mass"){
   
  xshow=true;
    }
    if ( option=="show mass off"){
   
  xshow=false;
    }
    if ( option=="show spring"){
   
    xshowspring=true;
    }
    if ( option=="show spring off"){
   
    xshowspring=false;
    }
    if ( option=="show force"){
   
    xshowforce=true;
    }
    if ( option=="show force off"){
   
    xshowforce=false;
    }
    if ( option=="show amplitudes"){
   
   showA=true;
    }
     if ( option=="show amplitudes off"){
   
   showA=false;
    }
  if ( option=="show theoretical"){
   
  theoryshow=true;
    }
    if ( option=="show theoretical off"){
   
  theoryshow=false;
    }
     if ( option=="dt = 0.25"){
   
  dt = 0.25;
    }
     if ( option=="dt = 1.00"){
   
  dt = 1.00;
    }
    if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
   // var msg = new SpeechSynthesisUtterance(option);
  //window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'worldgraph'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.init.setAction("OnClick", function(_data,_info) {
  if ( selected[0]==="user_defined"){
    for ( counter1=0; counter1<n /* Iterations */ ; counter1++) {
    maxXsarray[counter1]= maxXs[counter1];
    maxXsarrayideal[counter1]= maxXsideal[counter1];
   
  }
  store1=true;
    }
    else if ( selected[0]==="no_damping,b=0.0"){
    b=0;
  for ( counter1=0; counter1<n /* Iterations */ ; counter1++) {
    maxXsarray2[counter1]= maxXs[counter1]=maxXsideal[counter1];
  }
  store2=true;
    }
    else if ( selected[0]==="very_light_damping,b=0.1"){
    b=0.1;
  for ( counter1=0; counter1<n /* Iterations */ ; counter1++) {
    maxXsarray3[counter1]= maxXs[counter1];
    maxXsarray3ideal[counter1]= maxXsideal[counter1];
    
  }
  store3=true;
    }
    else if ( selected[0]==="light_damping,b=0.3"){
    b=0.3;
  for ( counter1=0; counter1<n /* Iterations */ ; counter1++) {
    maxXsarray4[counter1]= maxXs[counter1];
    maxXsarray4ideal[counter1]= maxXsideal[counter1];
    
  }
  store4=true;
    }
    else if ( selected[0]==="moderate_damping,b=0.6"){
    b=1.0;
  for ( counter1=0; counter1<n /* Iterations */ ; counter1++) {
    maxXsarray5[counter1]= maxXs[counter1];
    maxXsarray5ideal[counter1]= maxXsideal[counter1];
    
  }
  store5=true;
    }
    else if ( selected[0]==="critical_damping,b=2.0"){
    b=2.0;
  for ( counter1=0; counter1<n /* Iterations */ ; counter1++) {
    maxXsarray6[counter1]= maxXs[counter1];
    maxXsarray6ideal[counter1]= maxXsideal[counter1];
    
  }
  store6=true;
    }
  else if ( selected[0]==="heavy_damping,b=5.0"){
    b=5.0;
  for ( counter1=0; counter1<n /* Iterations */ ; counter1++) {
    maxXsarray7[counter1]= maxXs[counter1];
    maxXsarray7ideal[counter1]= maxXsideal[counter1];
    
  }
  store7=true;
    }
  _pause();  
  _initialize();

}); // HtmlView Page setting action 'OnClick' for element 'init'
          _view.init.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'init'
          _view.resetButton22.setAction("OnClick", function(_data,_info) {
  resetparticle();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton22'
          _view.resetButton22.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton22'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return print?"":"40 Spring (GREY) Mass (BLUE) Systems \nwith k=1N/m and m= 1kg "+", b="+b.toFixed(1)+"\nt = "+_view._format(t,"0.00")+"s"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return _isPlaying?"":"move cursor to any position to visual mass at any fD/fo"; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return 2*fo/fo; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.theory0no2.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory0no2'
          _view.theory0no2.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory0no2'
          _view.theory0no2.linkProperty("Y",  function() { return maxXsideal0; }, function(_v) { maxXsideal0 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory0no2'
          _view.theory0no2.linkProperty("Visibility",  function() { return theoryshow0; }, function(_v) { theoryshow0 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory0no2'
          _view.group.linkProperty("X",  function() { return Hertzovertheory[105]; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return maxXsideal0[105]; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.group.linkProperty("Visibility",  function() { return theoryshow0; }, function(_v) { theoryshow0 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group'
          _view.theory1light2.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory1light2'
          _view.theory1light2.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory1light2'
          _view.theory1light2.linkProperty("Y",  function() { return maxXsideal1; }, function(_v) { maxXsideal1 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory1light2'
          _view.theory1light2.linkProperty("Visibility",  function() { return theoryshow1; }, function(_v) { theoryshow1 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory1light2'
          _view.group2.linkProperty("X",  function() { return Hertzovertheory[101]; } ); // HtmlView Page linking property 'X' for element 'group2'
          _view.group2.linkProperty("Y",  function() { return maxXsideal1[101]; } ); // HtmlView Page linking property 'Y' for element 'group2'
          _view.group2.linkProperty("Visibility",  function() { return theoryshow1; }, function(_v) { theoryshow1 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group2'
          _view.theory2critical2.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory2critical2'
          _view.theory2critical2.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory2critical2'
          _view.theory2critical2.linkProperty("Y",  function() { return maxXsideal2; }, function(_v) { maxXsideal2 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory2critical2'
          _view.theory2critical2.linkProperty("Visibility",  function() { return theoryshow2; }, function(_v) { theoryshow2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory2critical2'
          _view.group22.linkProperty("X",  function() { return Hertzovertheory[101]; } ); // HtmlView Page linking property 'X' for element 'group22'
          _view.group22.linkProperty("Y",  function() { return maxXsideal2[101]; } ); // HtmlView Page linking property 'Y' for element 'group22'
          _view.group22.linkProperty("Visibility",  function() { return theoryshow2; }, function(_v) { theoryshow2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group22'
          _view.theory3heavy2.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory3heavy2'
          _view.theory3heavy2.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory3heavy2'
          _view.theory3heavy2.linkProperty("Y",  function() { return maxXsideal3; }, function(_v) { maxXsideal3 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory3heavy2'
          _view.theory3heavy2.linkProperty("Visibility",  function() { return theoryshow3; }, function(_v) { theoryshow3 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory3heavy2'
          _view.group222.linkProperty("X",  function() { return Hertzovertheory[101]; } ); // HtmlView Page linking property 'X' for element 'group222'
          _view.group222.linkProperty("Y",  function() { return maxXsideal3[101]; } ); // HtmlView Page linking property 'Y' for element 'group222'
          _view.group222.linkProperty("Visibility",  function() { return theoryshow3; }, function(_v) { theoryshow3 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'group222'
          _view.theory0no.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory0no'
          _view.theory0no.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory0no'
          _view.theory0no.linkProperty("Y",  function() { return maxXsideal0; }, function(_v) { maxXsideal0 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory0no'
          _view.theory0no.linkProperty("Visibility",  function() { return theoryshow0; }, function(_v) { theoryshow0 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory0no'
          _view.theory1light.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory1light'
          _view.theory1light.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory1light'
          _view.theory1light.linkProperty("Y",  function() { return maxXsideal1; }, function(_v) { maxXsideal1 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory1light'
          _view.theory1light.linkProperty("Visibility",  function() { return theoryshow1; }, function(_v) { theoryshow1 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory1light'
          _view.theory2critical.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory2critical'
          _view.theory2critical.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory2critical'
          _view.theory2critical.linkProperty("Y",  function() { return maxXsideal2; }, function(_v) { maxXsideal2 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory2critical'
          _view.theory2critical.linkProperty("Visibility",  function() { return theoryshow2; }, function(_v) { theoryshow2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory2critical'
          _view.theory3heavy.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory3heavy'
          _view.theory3heavy.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory3heavy'
          _view.theory3heavy.linkProperty("Y",  function() { return maxXsideal3; }, function(_v) { maxXsideal3 = _v; } ); // HtmlView Page linking property 'Y' for element 'theory3heavy'
          _view.theory3heavy.linkProperty("Visibility",  function() { return theoryshow3; }, function(_v) { theoryshow3 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory3heavy'
          _view.theory.linkProperty("NumberOfElements",  function() { return ntheory; }, function(_v) { ntheory = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'theory'
          _view.theory.linkProperty("X",  function() { return Hertzovertheory; }, function(_v) { Hertzovertheory = _v; } ); // HtmlView Page linking property 'X' for element 'theory'
          _view.theory.linkProperty("Y",  function() { return maxXsideal; }, function(_v) { maxXsideal = _v; } ); // HtmlView Page linking property 'Y' for element 'theory'
          _view.theory.linkProperty("Visibility",  function() { return theoryshow; }, function(_v) { theoryshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'theory'
          _view.F_fo_0_5.linkProperty("Visibility",  function() { return singleshow; }, function(_v) { singleshow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'F_fo_0_5'
          _view.shape.linkProperty("X",  function() { return Hertzover[elementinteracted]; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return x[elementinteracted]; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.spring.linkProperty("X",  function() { return Hertzover[elementinteracted]; } ); // HtmlView Page linking property 'X' for element 'spring'
          _view.spring.linkProperty("SizeY",  function() { return x[elementinteracted]; } ); // HtmlView Page linking property 'SizeY' for element 'spring'
          _view.arrow.linkProperty("X",  function() { return Hertzover[elementinteracted]; } ); // HtmlView Page linking property 'X' for element 'arrow'
          _view.arrow.linkProperty("Y",  function() { return x[elementinteracted]; } ); // HtmlView Page linking property 'Y' for element 'arrow'
          _view.arrow.linkProperty("SizeY",  function() { return sizeyforce[elementinteracted]; } ); // HtmlView Page linking property 'SizeY' for element 'arrow'
          _view.x.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'x'
          _view.x.linkProperty("FillColor",  function() { return xshow?"rgba(0,0,255,1)":"rgba(0,0,255,0.0)"; } ); // HtmlView Page linking property 'FillColor' for element 'x'
          _view.x.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'x'
          _view.x.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'x'
          _view.x.linkProperty("LineColor",  function() { return xshow?"rgba(0,0,255,1)":"rgba(0,0,255,0.0)"; } ); // HtmlView Page linking property 'LineColor' for element 'x'
          _view.x.setAction("OnEnter", function(_data,_info) {
  xshow=false;
  xshowspring=false;
  xshowforce=false;
  singleshow=true;

}); // HtmlView Page setting action 'OnEnter' for element 'x'
          _view.x.linkProperty("Y",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'Y' for element 'x'
          _view.springSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'springSet'
          _view.springSet.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'springSet'
          _view.springSet.linkProperty("Visibility",  function() { return xshowspring; }, function(_v) { xshowspring = _v; } ); // HtmlView Page linking property 'Visibility' for element 'springSet'
          _view.springSet.linkProperty("SizeY",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeY' for element 'springSet'
          _view.fo222.linkProperty("X",  function() { return fonew/fo; } ); // HtmlView Page linking property 'X' for element 'fo222'
          _view.fo222.linkProperty("SizeY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'SizeY' for element 'fo222'
          _view.f2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'f2'
          _view.f2.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'f2'
          _view.f2.linkProperty("Y",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'Y' for element 'f2'
          _view.f2.linkProperty("Visibility",  function() { return xshowforce; }, function(_v) { xshowforce = _v; } ); // HtmlView Page linking property 'Visibility' for element 'f2'
          _view.f2.linkProperty("SizeY",  function() { return sizeyforce; }, function(_v) { sizeyforce = _v; } ); // HtmlView Page linking property 'SizeY' for element 'f2'
          _view.f.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'f'
          _view.f.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'f'
          _view.f.linkProperty("Y",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'Y' for element 'f'
          _view.f.linkProperty("SizeY",  function() { return sizeyforce; }, function(_v) { sizeyforce = _v; } ); // HtmlView Page linking property 'SizeY' for element 'f'
          _view.maxXs.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXs'
          _view.maxXs.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXs'
          _view.maxXs.linkProperty("Y",  function() { return maxXs; }, function(_v) { maxXs = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXs'
          _view.maxXs.linkProperty("Visibility",  function() { return showA; }, function(_v) { showA = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXs'
          _view.maxXsarray.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray'
          _view.maxXsarray.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray'
          _view.maxXsarray.linkProperty("Y",  function() { return maxXsarray; }, function(_v) { maxXsarray = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray'
          _view.maxXsarray.linkProperty("Visibility",  function() { return store; }, function(_v) { store = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray'
          _view.maxXsarray1.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray1'
          _view.maxXsarray1.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray1'
          _view.maxXsarray1.linkProperty("Y",  function() { return maxXsarray1; }, function(_v) { maxXsarray1 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray1'
          _view.maxXsarray1.linkProperty("Visibility",  function() { return store1; }, function(_v) { store1 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray1'
          _view.maxXsarray2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray2'
          _view.maxXsarray2.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray2'
          _view.maxXsarray2.linkProperty("Y",  function() { return maxXsarray2; }, function(_v) { maxXsarray2 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray2'
          _view.maxXsarray2.linkProperty("Visibility",  function() { return store2; }, function(_v) { store2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray2'
          _view.maxXsarray3.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray3'
          _view.maxXsarray3.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray3'
          _view.maxXsarray3.linkProperty("Y",  function() { return maxXsarray3; }, function(_v) { maxXsarray3 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray3'
          _view.maxXsarray3.linkProperty("Visibility",  function() { return store3; }, function(_v) { store3 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray3'
          _view.maxXsarray4.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray4'
          _view.maxXsarray4.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray4'
          _view.maxXsarray4.linkProperty("Y",  function() { return maxXsarray4; }, function(_v) { maxXsarray4 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray4'
          _view.maxXsarray4.linkProperty("Visibility",  function() { return store4; }, function(_v) { store4 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray4'
          _view.maxXsarray5.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray5'
          _view.maxXsarray5.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray5'
          _view.maxXsarray5.linkProperty("Y",  function() { return maxXsarray5; }, function(_v) { maxXsarray5 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray5'
          _view.maxXsarray5.linkProperty("Visibility",  function() { return store5; }, function(_v) { store5 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray5'
          _view.maxXsarray6.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray6'
          _view.maxXsarray6.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray6'
          _view.maxXsarray6.linkProperty("Y",  function() { return maxXsarray6; }, function(_v) { maxXsarray6 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray6'
          _view.maxXsarray6.linkProperty("Visibility",  function() { return store6; }, function(_v) { store6 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray6'
          _view.maxXsarray7.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'maxXsarray7'
          _view.maxXsarray7.linkProperty("X",  function() { return Hertzover; }, function(_v) { Hertzover = _v; } ); // HtmlView Page linking property 'X' for element 'maxXsarray7'
          _view.maxXsarray7.linkProperty("Y",  function() { return maxXsarray7; }, function(_v) { maxXsarray7 = _v; } ); // HtmlView Page linking property 'Y' for element 'maxXsarray7'
          _view.maxXsarray7.linkProperty("Visibility",  function() { return store7; }, function(_v) { store7 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'maxXsarray7'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function SHM24_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = SHM24_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('SHM25','./SHM24.xhtml');

  return _view;
} // end of main function

function SHM24_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"fullscreen", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'fullscreen'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'fullscreen'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomPanel2", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomPanel2'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'bottomPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"worldgraph", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'worldgraph'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'worldgraph'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'worldgraph'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"init", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'init'
      .setProperty("Tooltip","initialize simulation allowing for different damping points to be shown") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'init'
      .setProperty("Text","▼") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'init'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'init'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton22", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton22'
      .setProperty("Tooltip","reset particles to default 0 position") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton22'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton22'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.bottomPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","reset simulation to default values") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"centerPanelxvst", _view.fullscreen) // EJsS HtmlView.HtmlView Page: declaration of element 'centerPanelxvst'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'centerPanelxvst'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'centerPanelxvst'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.centerPanelxvst) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","90vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowCoordinates",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowCoordinates' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("AxisYFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",0.1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","40 Spring Mass Systems with m= 1kg and k=1N/m") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("TitleY","Displacement (m) ") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AxisXFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanel'
      .setProperty("TitleX","Driving Frequency, fD / Natural Frequency, fo") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"theorycurve2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'theorycurve2'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory0no2", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'theory0no2'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory0no2'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory0no2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory0no2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory0no2'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory0no2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory0no2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"nodamp", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'nodamp'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'nodamp'
      .setProperty("OutlineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'OutlineColor' for element 'nodamp'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'nodamp'
      .setProperty("X",0.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'nodamp'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'nodamp'
      .setProperty("Text","No Damping") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'nodamp'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'nodamp'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory1light2", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'theory1light2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory1light2'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory1light2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory1light2'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory1light2'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory1light2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory1light2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group2", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'group2'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"lightdamp2", _view.group2) // EJsS HtmlView.HtmlView Page: declaration of element 'lightdamp2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'lightdamp2'
      .setProperty("OutlineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'OutlineColor' for element 'lightdamp2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'lightdamp2'
      .setProperty("X",0.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'lightdamp2'
      .setProperty("Y",1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'lightdamp2'
      .setProperty("Text","Light Damping") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lightdamp2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'lightdamp2'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory2critical2", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'theory2critical2'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory2critical2'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory2critical2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory2critical2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory2critical2'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory2critical2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory2critical2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group22", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'group22'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"critical", _view.group22) // EJsS HtmlView.HtmlView Page: declaration of element 'critical'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'critical'
      .setProperty("OutlineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'OutlineColor' for element 'critical'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'critical'
      .setProperty("X",0.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'critical'
      .setProperty("Y",1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'critical'
      .setProperty("Text","Critical Damping") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'critical'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'critical'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory3heavy2", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'theory3heavy2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory3heavy2'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory3heavy2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory3heavy2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory3heavy2'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory3heavy2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory3heavy2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group222", _view.theorycurve2) // EJsS HtmlView.HtmlView Page: declaration of element 'group222'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"lightdamp222", _view.group222) // EJsS HtmlView.HtmlView Page: declaration of element 'lightdamp222'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'lightdamp222'
      .setProperty("OutlineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'OutlineColor' for element 'lightdamp222'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'lightdamp222'
      .setProperty("X",0.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'lightdamp222'
      .setProperty("Y",-1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'lightdamp222'
      .setProperty("Text","Heavy Damping") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'lightdamp222'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'lightdamp222'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"theorycurve", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'theorycurve'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory0no", _view.theorycurve) // EJsS HtmlView.HtmlView Page: declaration of element 'theory0no'
      .setProperty("FillColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory0no'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory0no'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory0no'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory0no'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory0no'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory0no'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory1light", _view.theorycurve) // EJsS HtmlView.HtmlView Page: declaration of element 'theory1light'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory1light'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory1light'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory1light'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory1light'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory1light'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory1light'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory2critical", _view.theorycurve) // EJsS HtmlView.HtmlView Page: declaration of element 'theory2critical'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory2critical'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory2critical'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory2critical'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory2critical'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory2critical'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory2critical'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory3heavy", _view.theorycurve) // EJsS HtmlView.HtmlView Page: declaration of element 'theory3heavy'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory3heavy'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory3heavy'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory3heavy'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory3heavy'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory3heavy'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory3heavy'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"theory", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'theory'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'theory'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'theory'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'theory'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'theory'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'theory'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'theory'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"F_fo_0_5", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'F_fo_0_5'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.F_fo_0_5) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.spring,"spring", _view.F_fo_0_5) // EJsS HtmlView.HtmlView Page: declaration of element 'spring'
      .setProperty("Radius",0.005) // EJsS HtmlView.HtmlView Page: setting property 'Radius' for element 'spring'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'spring'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'spring'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'spring'
      .setProperty("PointsPerLoop",50) // EJsS HtmlView.HtmlView Page: setting property 'PointsPerLoop' for element 'spring'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'spring'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.F_fo_0_5) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"x", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'x'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'x'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'x'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'x'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'x'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'x'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'x'
      ;

    _view._addElement(EJSS_DRAWING2D.springSet,"springSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'springSet'
      .setProperty("Radius",0.005) // EJsS HtmlView.HtmlView Page: setting property 'Radius' for element 'springSet'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'springSet'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'springSet'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'springSet'
      .setProperty("PointsPerLoop",50) // EJsS HtmlView.HtmlView Page: setting property 'PointsPerLoop' for element 'springSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'springSet'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"fo222", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fo222'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'fo222'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'fo222'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'fo222'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'fo222'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'fo222'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'fo222'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"f2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'f2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'f2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'f2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'f2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"f", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'f'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'f'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'f'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'f'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXs", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXs'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXs'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXs'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXs'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'maxXs'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXs'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXs'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray1'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray1'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray1'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray1'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray1'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray1'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray2'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray2'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray2'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray3'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray3'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray3'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray3'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray3'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray3'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray4", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray4'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray4'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray4'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray4'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray4'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray4'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray5", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray5'
      .setProperty("FillColor","Pink") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray5'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray5'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray5'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray5'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray5'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray6", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray6'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray6'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray6'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray6'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray6'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray6'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"maxXsarray7", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'maxXsarray7'
      .setProperty("FillColor","rgba(200,220,208,255)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'maxXsarray7'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'maxXsarray7'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'maxXsarray7'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'maxXsarray7'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'maxXsarray7'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Resonance Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM24/SHMresonance/b=5.0_2014-03-24_1154small.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM24/1authorlookangphoto5050.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM24/01authorleetatleong.png" />
 weelookang@gmail.com; leetatleong
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, weelookang@gmail.com; leetatleong.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new SHM24("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/02_newtonianmechanics_8oscillations/ejss_src_SHM24/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
