<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function dataLogger(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var lum; // EjsS Model.Variables.Var Table.lum
  var r; // EjsS Model.Variables.Var Table.r
  var g; // EjsS Model.Variables.Var Table.g
  var b; // EjsS Model.Variables.Var Table.b
  var yline; // EjsS Model.Variables.Var Table.yline
  var drawingHeight; // EjsS Model.Variables.Var Table.drawingHeight
  var drawingWidth; // EjsS Model.Variables.Var Table.drawingWidth
  var findLight; // EjsS Model.Variables.Var Table.findLight
  var findRed; // EjsS Model.Variables.Var Table.findRed
  var xwhite; // EjsS Model.Variables.Var Table.xwhite
  var xred; // EjsS Model.Variables.Var Table.xred
  var sourceCamera; // EjsS Model.Variables.Var Table.sourceCamera
  var distStart; // EjsS Model.Variables.Var Table.distStart
  var distSize; // EjsS Model.Variables.Var Table.distSize
  var showDistance; // EjsS Model.Variables.Var Table.showDistance
  var distance; // EjsS Model.Variables.Var Table.distance

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      lum : lum,
      r : r,
      g : g,
      b : b,
      yline : yline,
      drawingHeight : drawingHeight,
      drawingWidth : drawingWidth,
      findLight : findLight,
      findRed : findRed,
      xwhite : xwhite,
      xred : xred,
      sourceCamera : sourceCamera,
      distStart : distStart,
      distSize : distSize,
      showDistance : showDistance,
      distance : distance
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      lum : lum,
      r : r,
      g : g,
      b : b,
      yline : yline,
      drawingHeight : drawingHeight,
      drawingWidth : drawingWidth,
      findLight : findLight,
      findRed : findRed,
      xwhite : xwhite,
      xred : xred,
      sourceCamera : sourceCamera,
      distStart : distStart,
      distSize : distSize,
      showDistance : showDistance,
      distance : distance
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.lum != "undefined") lum = json.lum;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.yline != "undefined") yline = json.yline;
    if(typeof json.drawingHeight != "undefined") drawingHeight = json.drawingHeight;
    if(typeof json.drawingWidth != "undefined") drawingWidth = json.drawingWidth;
    if(typeof json.findLight != "undefined") findLight = json.findLight;
    if(typeof json.findRed != "undefined") findRed = json.findRed;
    if(typeof json.xwhite != "undefined") xwhite = json.xwhite;
    if(typeof json.xred != "undefined") xred = json.xred;
    if(typeof json.sourceCamera != "undefined") sourceCamera = json.sourceCamera;
    if(typeof json.distStart != "undefined") distStart = json.distStart;
    if(typeof json.distSize != "undefined") distSize = json.distSize;
    if(typeof json.showDistance != "undefined") showDistance = json.showDistance;
    if(typeof json.distance != "undefined") distance = json.distance;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.lum != "undefined") lum = json.lum;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.yline != "undefined") yline = json.yline;
    if(typeof json.drawingHeight != "undefined") drawingHeight = json.drawingHeight;
    if(typeof json.drawingWidth != "undefined") drawingWidth = json.drawingWidth;
    if(typeof json.findLight != "undefined") findLight = json.findLight;
    if(typeof json.findRed != "undefined") findRed = json.findRed;
    if(typeof json.xwhite != "undefined") xwhite = json.xwhite;
    if(typeof json.xred != "undefined") xred = json.xred;
    if(typeof json.sourceCamera != "undefined") sourceCamera = json.sourceCamera;
    if(typeof json.distStart != "undefined") distStart = json.distStart;
    if(typeof json.distSize != "undefined") distSize = json.distSize;
    if(typeof json.showDistance != "undefined") showDistance = json.showDistance;
    if(typeof json.distance != "undefined") distance = json.distance;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
  });

  _model.addToReset(function() {
    lum = []; // EjsS Model.Variables.Var Table.lum
    r = []; // EjsS Model.Variables.Var Table.r
    g = []; // EjsS Model.Variables.Var Table.g
    b = []; // EjsS Model.Variables.Var Table.b
    yline = 0; // EjsS Model.Variables.Var Table.yline
    drawingHeight = 900 / 4; // EjsS Model.Variables.Var Table.drawingHeight
    drawingWidth = 1600 / 4; // EjsS Model.Variables.Var Table.drawingWidth
    findLight = false; // EjsS Model.Variables.Var Table.findLight
    findRed = false; // EjsS Model.Variables.Var Table.findRed
    xwhite = 0; // EjsS Model.Variables.Var Table.xwhite
    xred = 0; // EjsS Model.Variables.Var Table.xred
    sourceCamera = true; // EjsS Model.Variables.Var Table.sourceCamera
    distStart = [0,0]; // EjsS Model.Variables.Var Table.distStart
    distSize = [0,0.5]; // EjsS Model.Variables.Var Table.distSize
    showDistance = false; // EjsS Model.Variables.Var Table.showDistance
    distance = 0; // EjsS Model.Variables.Var Table.distance
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function standard_luminance(r,g,b) {  // > CustomCode.luminance:1
     return (0.2126*r + 0.7152*g + 0.0722*b);  // > CustomCode.luminance:2
  }  // > CustomCode.luminance:3
  function perceived1_luminance(r,g,b) {  // > CustomCode.luminance:4
     return (0.299*r + 0.587*g + 0.114*b);  // > CustomCode.luminance:5
  }  // > CustomCode.luminance:6
  function perceived2_luminance(r,g,b) {  // > CustomCode.luminance:7
     return (sqrt( 0.299*r^2 + 0.587*g^2 + 0.114*b^2 ));  // > CustomCode.luminance:8
  }  // > CustomCode.luminance:9
  function hsl_luminance(r,g,b) {  // > CustomCode.luminance:10
    r /= 255, g /= 255, b /= 255;  // > CustomCode.luminance:11
    var max = Math.max(r, g, b), min = Math.min(r, g, b);  // > CustomCode.luminance:12
    var h, s, l = (max + min) / 2;  // > CustomCode.luminance:13
    if (max == min) {  // > CustomCode.luminance:14
      h = s = 0; // achromatic  // > CustomCode.luminance:15
    } else {  // > CustomCode.luminance:16
      var d = max - min;  // > CustomCode.luminance:17
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);  // > CustomCode.luminance:18
      switch (max) {  // > CustomCode.luminance:19
          case r:  // > CustomCode.luminance:20
              h = (g - b) / d + (g < b ? 6 : 0);  // > CustomCode.luminance:21
              break;  // > CustomCode.luminance:22
          case g:  // > CustomCode.luminance:23
              h = (b - r) / d + 2;  // > CustomCode.luminance:24
              break;  // > CustomCode.luminance:25
          case b:  // > CustomCode.luminance:26
              h = (r - g) / d + 4;  // > CustomCode.luminance:27
              break;  // > CustomCode.luminance:28
      }  // > CustomCode.luminance:29
      h /= 6;  // > CustomCode.luminance:30
    }  // > CustomCode.luminance:31
    return l * 255;  // > CustomCode.luminance:32
  }  // > CustomCode.luminance:33
  function initData(width) {  // > CustomCode.luminance:34
    var data = [];  // > CustomCode.luminance:35
    for (col = 0; col < width; col++){  // > CustomCode.luminance:36
        data.push([col,0]);  // > CustomCode.luminance:37
    }    // > CustomCode.luminance:38
    return data;  // > CustomCode.luminance:39
  }  // > CustomCode.luminance:40
  function brightness(imgData, function_luminance, startLine, sizeLine, lumData, rData, gData, bData) {  // > CustomCode.luminance:41
    // distance  // > CustomCode.luminance:42
    var dist = Math.round(Math.sqrt(sizeLine[0]*sizeLine[0] + sizeLine[1]*sizeLine[1]));  // > CustomCode.luminance:43
    var incx = sizeLine[0]/dist;  // > CustomCode.luminance:44
    var incy = sizeLine[1]/dist;  // > CustomCode.luminance:45
    // calculate  // > CustomCode.luminance:46
    var row = Math.floor(startLine[1]);  // > CustomCode.luminance:47
    var col = Math.floor(startLine[0]);  // > CustomCode.luminance:48
    for (var i = 0; i < dist; i++){  // > CustomCode.luminance:49
      var index = ( ( Math.round(i*incx) + col ) +   // > CustomCode.luminance:50
          ( (Math.round(i*incy) + row) * imgData.width ) ) * 4;  // > CustomCode.luminance:51
      var r = imgData.data[index];  // > CustomCode.luminance:52
      var g = imgData.data[index + 1];  // > CustomCode.luminance:53
      var b = imgData.data[index + 2];  // > CustomCode.luminance:54
      // var a = imgData.data[index + 3];  // > CustomCode.luminance:55
      var brightness = function_luminance(r,g,b);  // > CustomCode.luminance:56
      lumData[i][1] = brightness;  // > CustomCode.luminance:57
      rData[i][1] = r;  // > CustomCode.luminance:58
      gData[i][1] = g;  // > CustomCode.luminance:59
      bData[i][1] = b;  // > CustomCode.luminance:60
      lumData[i][0] = i;  // > CustomCode.luminance:61
      rData[i][0] = i;  // > CustomCode.luminance:62
      gData[i][0] = i;  // > CustomCode.luminance:63
      bData[i][0] = i;  // > CustomCode.luminance:64
    }  // > CustomCode.luminance:65
    // rest of points  // > CustomCode.luminance:66
    for (var j = dist; j < drawingWidth*2; j++) {  // > CustomCode.luminance:67
      lumData[j][0] = lumData[dist-1][0];  // > CustomCode.luminance:68
      lumData[j][1] = 0;  // > CustomCode.luminance:69
      rData[j][0] = rData[dist-1][0];  // > CustomCode.luminance:70
      rData[j][1] = 0;  // > CustomCode.luminance:71
      gData[j][0] = gData[dist-1][0];  // > CustomCode.luminance:72
      gData[j][1] = 0;  // > CustomCode.luminance:73
      bData[j][0] = bData[dist-1][0];  // > CustomCode.luminance:74
      bData[j][1] = 0;    // > CustomCode.luminance:75
    }  // > CustomCode.luminance:76
  }  // > CustomCode.luminance:77

  function findLightest(imgData, row, callback) {  // > CustomCode.lights:1
    var lightest_pixel_lightness = 0;  // > CustomCode.lights:2
    var lightest_pixel_location = 0;  // > CustomCode.lights:3
    var ipos = (row * imgData.width) * 4;  // > CustomCode.lights:4
    for (var i = 0; i < imgData.width; i++) {  // > CustomCode.lights:5
      var pos = ipos + i*4;  // > CustomCode.lights:6
      var red = imgData.data[pos + 0];  // > CustomCode.lights:7
      var green = imgData.data[pos + 1];  // > CustomCode.lights:8
      var blue = imgData.data[pos + 2];  // > CustomCode.lights:9
      var alpha = imgData.data[pos + 3];  // > CustomCode.lights:10
      var lightness = hsl_luminance(red, green, blue);  // > CustomCode.lights:11
      if (lightness > lightest_pixel_lightness) {  // > CustomCode.lights:12
        lightest_pixel_lightness = lightness;  // > CustomCode.lights:13
        lightest_pixel_location = i;  // > CustomCode.lights:14
      }  // > CustomCode.lights:15
    }  // > CustomCode.lights:16
    callback(lightest_pixel_location,lightest_pixel_lightness);  // > CustomCode.lights:17
  }  // > CustomCode.lights:18

  function findRedest(imgData, row, callback) {  // > CustomCode.reds:1
    var redest_pixel_redness = 0;  // > CustomCode.reds:2
    var redest_pixel_location = 0;  // > CustomCode.reds:3
    var ipos = (row * imgData.width) * 4;  // > CustomCode.reds:4
    for (var i = 0; i < imgData.width; i++) {  // > CustomCode.reds:5
      var pos = ipos + i*4;  // > CustomCode.reds:6
      var red = imgData.data[pos + 0];  // > CustomCode.reds:7
      var green = imgData.data[pos + 1];  // > CustomCode.reds:8
      var blue = imgData.data[pos + 2];  // > CustomCode.reds:9
      var alpha = imgData.data[pos + 3];  // > CustomCode.reds:10
      var redness = (2*red - green - blue);  // > CustomCode.reds:11
      if (redness > redest_pixel_redness) {  // > CustomCode.reds:12
        redest_pixel_redness = redness;  // > CustomCode.reds:13
        redest_pixel_location = i;  // > CustomCode.reds:14
      }  // > CustomCode.reds:15
    }  // > CustomCode.reds:16
    callback(redest_pixel_location,redest_pixel_redness);  // > CustomCode.reds:17
  }  // > CustomCode.reds:18

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    yline = 0;  // > Initialization.Init Page:1
    lum = initData(2*drawingWidth);  // > Initialization.Init Page:2
    r = initData(2*drawingWidth);  // > Initialization.Init Page:3
    g = initData(2*drawingWidth);  // > Initialization.Init Page:4
    b = initData(2*drawingWidth);  // > Initialization.Init Page:5
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    // image source  // > Evolution.Evol Page:1
    var imgData;  // > Evolution.Evol Page:2
    if (sourceCamera)  // > Evolution.Evol Page:3
      imgData = _view.camera.getSnapshot();  // > Evolution.Evol Page:4
    else   // > Evolution.Evol Page:5
      imgData = _view.image.getImageData();  // > Evolution.Evol Page:6
        // > Evolution.Evol Page:7
    if (showDistance) {  // > Evolution.Evol Page:8
      var startLine = _view.drawingPanel.toPixelPosition(distStart);   // > Evolution.Evol Page:9
      var sizeLine = _view.drawingPanel.toPixelMod(distSize);   // > Evolution.Evol Page:10
      brightness(imgData,hsl_luminance,startLine,sizeLine,lum,r,g,b);  // > Evolution.Evol Page:11
    } else {  // > Evolution.Evol Page:12
      var startLine = _view.drawingPanel.toPixelPosition([-1,yline]);   // > Evolution.Evol Page:13
      var sizeLine = _view.drawingPanel.toPixelMod([2,0]);  // > Evolution.Evol Page:14
      brightness(imgData,hsl_luminance,startLine,sizeLine,lum,r,g,b);  // > Evolution.Evol Page:15
      var row = Math.round(startLine[1]);  // > Evolution.Evol Page:16
      if(findLight) {  // > Evolution.Evol Page:17
        findLightest(imgData, row, function(x,light) {   // > Evolution.Evol Page:18
          xwhite = 2 * (x / drawingWidth) - 1;  // > Evolution.Evol Page:19
        });  // > Evolution.Evol Page:20
      }  // > Evolution.Evol Page:21
      if(findRed) {  // > Evolution.Evol Page:22
        findRedest(imgData, row, function(x,red) {   // > Evolution.Evol Page:23
          xred = 2 * (x / drawingWidth) - 1;  // > Evolution.Evol Page:24
          distance = Math.abs(_view.drawingPanel.toPixelMod([xwhite-xred,0])[0]);  // > Evolution.Evol Page:25
        });  // > Evolution.Evol Page:26
      }  // > Evolution.Evol Page:27
    }  // > Evolution.Evol Page:28
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new dataLogger_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.sourceCamera.linkProperty("Checked",  function() { return sourceCamera; }, function(_v) { sourceCamera = _v; } ); // HtmlView Page linking property 'Checked' for element 'sourceCamera'
          _view.fileUpload.setAction("OnChange", function(_data,_info) {
  var target = _view.fileUpload.getTarget();
  _view.image.forceImageUrl(target.files[0]);

}); // HtmlView Page setting action 'OnChange' for element 'fileUpload'
          _view.fileUpload.linkProperty("Visibility",  function() { return !sourceCamera; } ); // HtmlView Page linking property 'Visibility' for element 'fileUpload'
          _view.camera.linkProperty("Height",  function() { return drawingHeight; }, function(_v) { drawingHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'camera'
          _view.camera.linkProperty("Visibility",  function() { return sourceCamera; }, function(_v) { sourceCamera = _v; } ); // HtmlView Page linking property 'Visibility' for element 'camera'
          _view.camera.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'camera'
          _view.drawingPanel.linkProperty("Height",  function() { return drawingHeight; }, function(_v) { drawingHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'drawingPanel'
          _view.image.linkProperty("Visibility",  function() { return !sourceCamera; } ); // HtmlView Page linking property 'Visibility' for element 'image'
          _view.line.linkProperty("Y",  function() { return yline; }, function(_v) { yline = _v; } ); // HtmlView Page linking property 'Y' for element 'line'
          _view.line.linkProperty("Visibility",  function() { return !showDistance; } ); // HtmlView Page linking property 'Visibility' for element 'line'
          _view.cursor.linkProperty("Y",  function() { return yline; }, function(_v) { yline = _v; } ); // HtmlView Page linking property 'Y' for element 'cursor'
          _view.cursor.linkProperty("Visibility",  function() { return !showDistance; } ); // HtmlView Page linking property 'Visibility' for element 'cursor'
          _view.red.linkProperty("X",  function() { return xred; }, function(_v) { xred = _v; } ); // HtmlView Page linking property 'X' for element 'red'
          _view.red.linkProperty("Y",  function() { return yline; }, function(_v) { yline = _v; } ); // HtmlView Page linking property 'Y' for element 'red'
          _view.red.linkProperty("Visibility",  function() { return !showDistance; } ); // HtmlView Page linking property 'Visibility' for element 'red'
          _view.white.linkProperty("X",  function() { return xwhite; }, function(_v) { xwhite = _v; } ); // HtmlView Page linking property 'X' for element 'white'
          _view.white.linkProperty("Y",  function() { return yline; }, function(_v) { yline = _v; } ); // HtmlView Page linking property 'Y' for element 'white'
          _view.distance.linkProperty("Position",  function() { return distStart; }, function(_v) { distStart = _v; } ); // HtmlView Page linking property 'Position' for element 'distance'
          _view.distance.linkProperty("Size",  function() { return distSize; }, function(_v) { distSize = _v; } ); // HtmlView Page linking property 'Size' for element 'distance'
          _view.distance.linkProperty("Visibility",  function() { return showDistance; }, function(_v) { showDistance = _v; } ); // HtmlView Page linking property 'Visibility' for element 'distance'
          _view.distance.setAction("OnDrag", function(_data,_info) {
  var size = _view.distance.getPixelSizes();
  distance = Math.sqrt(size[0] * size[0] + size[1] * size[1]);

}); // HtmlView Page setting action 'OnDrag' for element 'distance'
          _view.findLight.linkProperty("Checked",  function() { return findLight; }, function(_v) { findLight = _v; } ); // HtmlView Page linking property 'Checked' for element 'findLight'
          _view.findLight.linkProperty("Visibility",  function() { return !showDistance; } ); // HtmlView Page linking property 'Visibility' for element 'findLight'
          _view.findRed.linkProperty("Checked",  function() { return findRed; }, function(_v) { findRed = _v; } ); // HtmlView Page linking property 'Checked' for element 'findRed'
          _view.findRed.linkProperty("Visibility",  function() { return !showDistance; } ); // HtmlView Page linking property 'Visibility' for element 'findRed'
          _view.showDistance.linkProperty("Checked",  function() { return showDistance; }, function(_v) { showDistance = _v; } ); // HtmlView Page linking property 'Checked' for element 'showDistance'
          _view.DistField.linkProperty("Value",  function() { return distance; }, function(_v) { distance = _v; } ); // HtmlView Page linking property 'Value' for element 'DistField'
          _view.lum.linkProperty("Input",  function() { return lum; }, function(_v) { lum = _v; } ); // HtmlView Page linking property 'Input' for element 'lum'
          _view.r.linkProperty("Input",  function() { return r; }, function(_v) { r = _v; } ); // HtmlView Page linking property 'Input' for element 'r'
          _view.g.linkProperty("Input",  function() { return g; }, function(_v) { g = _v; } ); // HtmlView Page linking property 'Input' for element 'g'
          _view.b.linkProperty("Input",  function() { return b; }, function(_v) { b = _v; } ); // HtmlView Page linking property 'Input' for element 'b'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function dataLogger_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = dataLogger_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function dataLogger_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singleDrawingPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawingPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Data Logger:</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"sourceCamera", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sourceCamera'
      .setProperty("Text","Camera") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'sourceCamera'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"sourceImage", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sourceImage'
      .setProperty("Text","Image") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'sourceImage'
      ;

    _view._addElement(EJSS_INTERFACE.fileUpload,"fileUpload", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fileUpload'
      .setProperty("Multiple",false) // EJsS HtmlView.HtmlView Page: setting property 'Multiple' for element 'fileUpload'
      .setProperty("Accept","image/*") // EJsS HtmlView.HtmlView Page: setting property 'Accept' for element 'fileUpload'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"cameraPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cameraPanel'
      ;

    _view._addElement(EJSS_INTERFACE.motionJPEG,"camera", _view.cameraPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'camera'
      .setProperty("On",true) // EJsS HtmlView.HtmlView Page: setting property 'On' for element 'camera'
      .setProperty("AsBackground",true) // EJsS HtmlView.HtmlView Page: setting property 'AsBackground' for element 'camera'
      .setProperty("UseWebCam",true) // EJsS HtmlView.HtmlView Page: setting property 'UseWebCam' for element 'camera'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'camera'
      .setProperty("Flip",true) // EJsS HtmlView.HtmlView Page: setting property 'Flip' for element 'camera'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.cameraPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'drawingPanel'
      .setProperty("Background","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image'
      .setProperty("SizeY",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"line", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'line'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'line'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'line'
      .setProperty("X",-1) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'line'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'line'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'line'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'line'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"cursor", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cursor'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'cursor'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'cursor'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cursor'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"red", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'red'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'red'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'red'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'red'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"white", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'white'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'white'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'white'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'white'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"distance", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'distance'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'distance'
      .setProperty("EnabledSize","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'distance'
      .setProperty("InteractionPosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'InteractionPosition' for element 'distance'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'distance'
      .setProperty("MarkStart","LINE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'distance'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'distance'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'distance'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"findLight", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'findLight'
      .setProperty("Text","Find Light") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'findLight'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"findRed", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'findRed'
      .setProperty("Text","Find Red") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'findRed'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"showDistance", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'showDistance'
      .setProperty("Text","Distance") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showDistance'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"info", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'info'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Distance", _view.info) // EJsS HtmlView.HtmlView Page: declaration of element 'Distance'
      .setProperty("Text","Distance (px)") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Distance'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"DistField", _view.info) // EJsS HtmlView.HtmlView Page: declaration of element 'DistField'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",150) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width",500) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[50,25,50,25]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowCoordinates",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowCoordinates' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("GuttersLineColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'GuttersLineColor' for element 'plottingPanel'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'plottingPanel'
      .setProperty("GuttersLineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'GuttersLineWidth' for element 'plottingPanel'
      .setProperty("MaximumY",255) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("GridYLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridYLineColor' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("YTickStep",50) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("TitleY","") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("GridXLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridXLineColor' for element 'plottingPanel'
      .setProperty("GuttersColor","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'GuttersColor' for element 'plottingPanel'
      .setProperty("GridYLineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'GridYLineWidth' for element 'plottingPanel'
      .setProperty("GridXLineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'GridXLineWidth' for element 'plottingPanel'
      .setProperty("LineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"lum", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lum'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'lum'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'lum'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'lum'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"r", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'r'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'r'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'r'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'r'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"g", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'g'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'g'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'g'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'g'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"b", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'b'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'b'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'b'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'b'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Author name
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Author name. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new dataLogger("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_13electromagneticspectrum/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
