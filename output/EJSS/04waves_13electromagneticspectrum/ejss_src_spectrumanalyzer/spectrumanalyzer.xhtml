<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Spectrum Analyzer (Light Intensity App)</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function spectrumanalyzer(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var lumData; // EjsS Model.Variables.Var Table.lumData
  var rData; // EjsS Model.Variables.Var Table.rData
  var gData; // EjsS Model.Variables.Var Table.gData
  var bData; // EjsS Model.Variables.Var Table.bData
  var specData; // EjsS Model.Variables.Var Table.specData
  var drawingWidth; // EjsS Model.Variables.Var Table.drawingWidth
  var drawingHeight; // EjsS Model.Variables.Var Table.drawingHeight
  var frontCamera; // EjsS Model.Variables.Var Table.frontCamera
  var backCamera; // EjsS Model.Variables.Var Table.backCamera
  var pauseCamera; // EjsS Model.Variables.Var Table.pauseCamera

  var calibrated; // EjsS Model.Variables.Calibrated.calibrated
  var calibreSize; // EjsS Model.Variables.Calibrated.calibreSize
  var cal1Pos; // EjsS Model.Variables.Calibrated.cal1Pos
  var cal2Pos; // EjsS Model.Variables.Calibrated.cal2Pos
  var calWavelength; // EjsS Model.Variables.Calibrated.calWavelength
  var calFreq; // EjsS Model.Variables.Calibrated.calFreq
  var calFreqCount; // EjsS Model.Variables.Calibrated.calFreqCount
  var calMinDist; // EjsS Model.Variables.Calibrated.calMinDist

  var firstPos; // EjsS Model.Variables.Free.firstPos
  var endPos; // EjsS Model.Variables.Free.endPos
  var selectorSize; // EjsS Model.Variables.Free.selectorSize
  var minX; // EjsS Model.Variables.Free.minX
  var maxX; // EjsS Model.Variables.Free.maxX

  var red; // EjsS Model.Variables.Graph.red
  var green; // EjsS Model.Variables.Graph.green
  var blue; // EjsS Model.Variables.Graph.blue
  var lum; // EjsS Model.Variables.Graph.lum
  var spec; // EjsS Model.Variables.Graph.spec
  var styleList; // EjsS Model.Variables.Graph.styleList

  var fonttop; // EjsS Model.Variables.lookang.fonttop
  var font; // EjsS Model.Variables.lookang.font
  var fontaxis; // EjsS Model.Variables.lookang.fontaxis
  var findLight; // EjsS Model.Variables.lookang.findLight
  var ver; // EjsS Model.Variables.lookang.ver
  var Android; // EjsS Model.Variables.lookang.Android
  var iOS; // EjsS Model.Variables.lookang.iOS
  var iosVis; // EjsS Model.Variables.lookang.iosVis
  var iosStr; // EjsS Model.Variables.lookang.iosStr

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      lumData : lumData,
      rData : rData,
      gData : gData,
      bData : bData,
      specData : specData,
      drawingWidth : drawingWidth,
      drawingHeight : drawingHeight,
      frontCamera : frontCamera,
      backCamera : backCamera,
      pauseCamera : pauseCamera,
      calibrated : calibrated,
      calibreSize : calibreSize,
      cal1Pos : cal1Pos,
      cal2Pos : cal2Pos,
      calWavelength : calWavelength,
      calFreq : calFreq,
      calFreqCount : calFreqCount,
      calMinDist : calMinDist,
      firstPos : firstPos,
      endPos : endPos,
      selectorSize : selectorSize,
      minX : minX,
      maxX : maxX,
      red : red,
      green : green,
      blue : blue,
      lum : lum,
      spec : spec,
      styleList : styleList,
      fonttop : fonttop,
      font : font,
      fontaxis : fontaxis,
      findLight : findLight,
      ver : ver,
      Android : Android,
      iOS : iOS,
      iosVis : iosVis,
      iosStr : iosStr
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      lumData : lumData,
      rData : rData,
      gData : gData,
      bData : bData,
      specData : specData,
      drawingWidth : drawingWidth,
      drawingHeight : drawingHeight,
      frontCamera : frontCamera,
      backCamera : backCamera,
      pauseCamera : pauseCamera,
      calibrated : calibrated,
      calibreSize : calibreSize,
      cal1Pos : cal1Pos,
      cal2Pos : cal2Pos,
      calWavelength : calWavelength,
      calFreq : calFreq,
      calFreqCount : calFreqCount,
      calMinDist : calMinDist,
      firstPos : firstPos,
      endPos : endPos,
      selectorSize : selectorSize,
      minX : minX,
      maxX : maxX,
      red : red,
      green : green,
      blue : blue,
      lum : lum,
      spec : spec,
      styleList : styleList,
      fonttop : fonttop,
      font : font,
      fontaxis : fontaxis,
      findLight : findLight,
      ver : ver,
      Android : Android,
      iOS : iOS,
      iosVis : iosVis,
      iosStr : iosStr
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.lumData != "undefined") lumData = json.lumData;
    if(typeof json.rData != "undefined") rData = json.rData;
    if(typeof json.gData != "undefined") gData = json.gData;
    if(typeof json.bData != "undefined") bData = json.bData;
    if(typeof json.specData != "undefined") specData = json.specData;
    if(typeof json.drawingWidth != "undefined") drawingWidth = json.drawingWidth;
    if(typeof json.drawingHeight != "undefined") drawingHeight = json.drawingHeight;
    if(typeof json.frontCamera != "undefined") frontCamera = json.frontCamera;
    if(typeof json.backCamera != "undefined") backCamera = json.backCamera;
    if(typeof json.pauseCamera != "undefined") pauseCamera = json.pauseCamera;
    if(typeof json.calibrated != "undefined") calibrated = json.calibrated;
    if(typeof json.calibreSize != "undefined") calibreSize = json.calibreSize;
    if(typeof json.cal1Pos != "undefined") cal1Pos = json.cal1Pos;
    if(typeof json.cal2Pos != "undefined") cal2Pos = json.cal2Pos;
    if(typeof json.calWavelength != "undefined") calWavelength = json.calWavelength;
    if(typeof json.calFreq != "undefined") calFreq = json.calFreq;
    if(typeof json.calFreqCount != "undefined") calFreqCount = json.calFreqCount;
    if(typeof json.calMinDist != "undefined") calMinDist = json.calMinDist;
    if(typeof json.firstPos != "undefined") firstPos = json.firstPos;
    if(typeof json.endPos != "undefined") endPos = json.endPos;
    if(typeof json.selectorSize != "undefined") selectorSize = json.selectorSize;
    if(typeof json.minX != "undefined") minX = json.minX;
    if(typeof json.maxX != "undefined") maxX = json.maxX;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.lum != "undefined") lum = json.lum;
    if(typeof json.spec != "undefined") spec = json.spec;
    if(typeof json.styleList != "undefined") styleList = json.styleList;
    if(typeof json.fonttop != "undefined") fonttop = json.fonttop;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontaxis != "undefined") fontaxis = json.fontaxis;
    if(typeof json.findLight != "undefined") findLight = json.findLight;
    if(typeof json.ver != "undefined") ver = json.ver;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iosVis != "undefined") iosVis = json.iosVis;
    if(typeof json.iosStr != "undefined") iosStr = json.iosStr;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.lumData != "undefined") lumData = json.lumData;
    if(typeof json.rData != "undefined") rData = json.rData;
    if(typeof json.gData != "undefined") gData = json.gData;
    if(typeof json.bData != "undefined") bData = json.bData;
    if(typeof json.specData != "undefined") specData = json.specData;
    if(typeof json.drawingWidth != "undefined") drawingWidth = json.drawingWidth;
    if(typeof json.drawingHeight != "undefined") drawingHeight = json.drawingHeight;
    if(typeof json.frontCamera != "undefined") frontCamera = json.frontCamera;
    if(typeof json.backCamera != "undefined") backCamera = json.backCamera;
    if(typeof json.pauseCamera != "undefined") pauseCamera = json.pauseCamera;
    if(typeof json.calibrated != "undefined") calibrated = json.calibrated;
    if(typeof json.calibreSize != "undefined") calibreSize = json.calibreSize;
    if(typeof json.cal1Pos != "undefined") cal1Pos = json.cal1Pos;
    if(typeof json.cal2Pos != "undefined") cal2Pos = json.cal2Pos;
    if(typeof json.calWavelength != "undefined") calWavelength = json.calWavelength;
    if(typeof json.calFreq != "undefined") calFreq = json.calFreq;
    if(typeof json.calFreqCount != "undefined") calFreqCount = json.calFreqCount;
    if(typeof json.calMinDist != "undefined") calMinDist = json.calMinDist;
    if(typeof json.firstPos != "undefined") firstPos = json.firstPos;
    if(typeof json.endPos != "undefined") endPos = json.endPos;
    if(typeof json.selectorSize != "undefined") selectorSize = json.selectorSize;
    if(typeof json.minX != "undefined") minX = json.minX;
    if(typeof json.maxX != "undefined") maxX = json.maxX;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.lum != "undefined") lum = json.lum;
    if(typeof json.spec != "undefined") spec = json.spec;
    if(typeof json.styleList != "undefined") styleList = json.styleList;
    if(typeof json.fonttop != "undefined") fonttop = json.fonttop;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontaxis != "undefined") fontaxis = json.fontaxis;
    if(typeof json.findLight != "undefined") findLight = json.findLight;
    if(typeof json.ver != "undefined") ver = json.ver;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iosVis != "undefined") iosVis = json.iosVis;
    if(typeof json.iosStr != "undefined") iosStr = json.iosStr;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["dialogbox"] = true;
    __pagesEnabled["privilege"] = true;
    __pagesEnabled["Evol Page"] = true;
  });

  _model.addToReset(function() {
    lumData = []; // EjsS Model.Variables.Var Table.lumData
    rData = []; // EjsS Model.Variables.Var Table.rData
    gData = []; // EjsS Model.Variables.Var Table.gData
    bData = []; // EjsS Model.Variables.Var Table.bData
    specData = []; // EjsS Model.Variables.Var Table.specData
    drawingWidth = window.innerWidth*0.95; // EjsS Model.Variables.Var Table.drawingWidth
    drawingHeight = window.innerHeight*0.45; // EjsS Model.Variables.Var Table.drawingHeight
    frontCamera = true; // EjsS Model.Variables.Var Table.frontCamera
    backCamera = false; // EjsS Model.Variables.Var Table.backCamera
    pauseCamera = false; // EjsS Model.Variables.Var Table.pauseCamera
  });

  _model.addToReset(function() {
    calibrated = true; // EjsS Model.Variables.Calibrated.calibrated
    calibreSize = [0,0]; // EjsS Model.Variables.Calibrated.calibreSize
    cal1Pos = [-0.5,0]; // EjsS Model.Variables.Calibrated.cal1Pos
    cal2Pos = [-0.5,0]; // EjsS Model.Variables.Calibrated.cal2Pos
    calWavelength = 650; // EjsS Model.Variables.Calibrated.calWavelength
    calFreq = 1; // EjsS Model.Variables.Calibrated.calFreq
    calFreqCount = 0; // EjsS Model.Variables.Calibrated.calFreqCount
    calMinDist = 250; // EjsS Model.Variables.Calibrated.calMinDist
  });

  _model.addToReset(function() {
    firstPos = [-0.5,-0.5]; // EjsS Model.Variables.Free.firstPos
    endPos = [-0.5,-0.5]; // EjsS Model.Variables.Free.endPos
    selectorSize = [0,0]; // EjsS Model.Variables.Free.selectorSize
    minX = 400; // EjsS Model.Variables.Free.minX
    maxX = 700; // EjsS Model.Variables.Free.maxX
  });

  _model.addToReset(function() {
    red = false; // EjsS Model.Variables.Graph.red
    green = false; // EjsS Model.Variables.Graph.green
    blue = false; // EjsS Model.Variables.Graph.blue
    lum = false; // EjsS Model.Variables.Graph.lum
    spec = true; // EjsS Model.Variables.Graph.spec
    styleList = []; // EjsS Model.Variables.Graph.styleList
  });

  _model.addToReset(function() {
    fonttop = "normal normal 1.5vw "; // EjsS Model.Variables.lookang.fonttop
    font = "normal normal 2vw "; // EjsS Model.Variables.lookang.font
    fontaxis = "normal normal 1.5vw "; // EjsS Model.Variables.lookang.fontaxis
    findLight = false; // EjsS Model.Variables.lookang.findLight
    ver = iOSversion(); // EjsS Model.Variables.lookang.ver
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.lookang.Android
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.lookang.iOS
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function colors(imgData, function_luminance) {  // > CustomCode.colors:1
    var startLine = _view.first.getPixelPosition();  // > CustomCode.colors:2
    var sizeLine = _view.drawingPanel.toPixelMod(selectorSize);   // > CustomCode.colors:3
    // init arrays  // > CustomCode.colors:4
    lumData = [];  // > CustomCode.colors:5
    rData = [];  // > CustomCode.colors:6
    gData = [];  // > CustomCode.colors:7
    bData = [];  // > CustomCode.colors:8
    // distance  // > CustomCode.colors:9
    var dist = Math.round(Math.sqrt(sizeLine[0]*sizeLine[0] + sizeLine[1]*sizeLine[1]));  // > CustomCode.colors:10
    var incx = sizeLine[0]/dist;  // > CustomCode.colors:11
    var incy = sizeLine[1]/dist;  // > CustomCode.colors:12
    // calculate  // > CustomCode.colors:13
    var row = Math.floor(startLine[1]);  // > CustomCode.colors:14
    var col = Math.floor(startLine[0]);  // > CustomCode.colors:15
    for (var i = 0; i < dist; i++){  // > CustomCode.colors:16
      var index = ( ( Math.round(i*incx) + col ) +   // > CustomCode.colors:17
          ( (Math.round(i*incy) + row) * imgData.width ) ) * 4;  // > CustomCode.colors:18
      var r = imgData.data[index];  // > CustomCode.colors:19
      var g = imgData.data[index + 1];  // > CustomCode.colors:20
      var b = imgData.data[index + 2];  // > CustomCode.colors:21
      // var a = imgData.data[index + 3];  // > CustomCode.colors:22
      var brightness = function_luminance(r,g,b);  // > CustomCode.colors:23
      var pos = minX + (i / Math.max(1,dist-1)) * (maxX-minX);  // > CustomCode.colors:24
      lumData.push([pos,brightness]);  // > CustomCode.colors:25
      rData.push([pos,r/255]);  // > CustomCode.colors:26
      gData.push([pos,g/255]);  // > CustomCode.colors:27
      bData.push([pos,b/255]);  // > CustomCode.colors:28
    }  // > CustomCode.colors:29
  }  // > CustomCode.colors:30

  function hsl_luminance(r,g,b) {  // > CustomCode.luminance:1
    r /= 255, g /= 255, b /= 255;  // > CustomCode.luminance:2
    var max = Math.max(r, g, b), min = Math.min(r, g, b);  // > CustomCode.luminance:3
    var h, s, l = (max + min) / 2;  // > CustomCode.luminance:4
    if (max == min) {  // > CustomCode.luminance:5
      h = s = 0; // achromatic  // > CustomCode.luminance:6
    } else {  // > CustomCode.luminance:7
      var d = max - min;  // > CustomCode.luminance:8
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);  // > CustomCode.luminance:9
      switch (max) {  // > CustomCode.luminance:10
          case r:  // > CustomCode.luminance:11
              h = (g - b) / d + (g < b ? 6 : 0);  // > CustomCode.luminance:12
              break;  // > CustomCode.luminance:13
          case g:  // > CustomCode.luminance:14
              h = (b - r) / d + 2;  // > CustomCode.luminance:15
              break;  // > CustomCode.luminance:16
          case b:  // > CustomCode.luminance:17
              h = (r - g) / d + 4;  // > CustomCode.luminance:18
              break;  // > CustomCode.luminance:19
      }  // > CustomCode.luminance:20
      h /= 6;  // > CustomCode.luminance:21
    }  // > CustomCode.luminance:22
    return l;  // > CustomCode.luminance:23
  }  // > CustomCode.luminance:24
  // other alternatives of intensity  // > CustomCode.luminance:25
  function standard_luminance(r,g,b) {  // > CustomCode.luminance:26
     return (0.2126*r + 0.7152*g + 0.0722*b)/255;  // > CustomCode.luminance:27
  }  // > CustomCode.luminance:28
  function perceived1_luminance(r,g,b) {  // > CustomCode.luminance:29
     return (0.299*r + 0.587*g + 0.114*b)/255;  // > CustomCode.luminance:30
  }  // > CustomCode.luminance:31
  function perceived2_luminance(r,g,b) {  // > CustomCode.luminance:32
     return (Math.sqrt( 0.299*r^2 + 0.587*g^2 + 0.114*b^2 ))/255;  // > CustomCode.luminance:33
  }  // > CustomCode.luminance:34

  function spectrum (imgData,luminance) {  // > CustomCode.spectrum:1
    var startLine = _view.first.getPixelPosition();  // > CustomCode.spectrum:2
    var sizeLine = _view.drawingPanel.toPixelMod(selectorSize);   // > CustomCode.spectrum:3
    // init arrays  // > CustomCode.spectrum:4
    specData = [];  // > CustomCode.spectrum:5
    styleList = [];  // > CustomCode.spectrum:6
    // distance  // > CustomCode.spectrum:7
    var dist = Math.round(Math.sqrt(sizeLine[0]*sizeLine[0] + sizeLine[1]*sizeLine[1]));  // > CustomCode.spectrum:8
    var incx = sizeLine[0]/dist;  // > CustomCode.spectrum:9
    var incy = sizeLine[1]/dist;  // > CustomCode.spectrum:10
    // calculate  // > CustomCode.spectrum:11
    var row = Math.floor(startLine[1]);  // > CustomCode.spectrum:12
    var col = Math.floor(startLine[0]);  // > CustomCode.spectrum:13
    for (var i = 0; i < dist; i++){  // > CustomCode.spectrum:14
      var index = ( ( Math.round(i*incx) + col ) +   // > CustomCode.spectrum:15
          ( (Math.round(i*incy) + row) * imgData.width ) ) * 4;  // > CustomCode.spectrum:16
      var r = imgData.data[index];  // > CustomCode.spectrum:17
      var g = imgData.data[index + 1];  // > CustomCode.spectrum:18
      var b = imgData.data[index + 2];  // > CustomCode.spectrum:19
      // var a = imgData.data[index + 3];  // > CustomCode.spectrum:20
      var brightness = luminance(r,g,b);  // > CustomCode.spectrum:21
      var pos = minX + (i / Math.max(1,dist-1)) * (maxX-minX);  // > CustomCode.spectrum:22
      specData.push([pos,brightness]);  // > CustomCode.spectrum:23
      // style  // > CustomCode.spectrum:24
      var style = EJSS_DRAWING2D.style("mystyl"+i);  // > CustomCode.spectrum:25
      style.setFillColor("rgb("+r+","+g+","+b+")");  // > CustomCode.spectrum:26
      style.setLineColor("rgb("+r+","+g+","+b+")");  // > CustomCode.spectrum:27
      style.setLineWidth(1.5);  // > CustomCode.spectrum:28
      styleList.push(style);  // > CustomCode.spectrum:29
    }  // > CustomCode.spectrum:30
  }  // > CustomCode.spectrum:31

  function findLightest(imgData, wData, hData, callback) {  // > CustomCode.findLightest:1
    var first = [0,0,0]; // [x,y,luminance]  // > CustomCode.findLightest:2
    var second = [0,0,0]; // [x,y,luminance]  // > CustomCode.findLightest:3
    var matrix = 3; // get lightness 3x3  // > CustomCode.findLightest:4
    for (var i = 0; i < hData-matrix*matrix; i++){  // > CustomCode.findLightest:5
      for (var j = 0; j < wData-matrix*matrix; j++){  // > CustomCode.findLightest:6
        var index = ( i*wData + j ) * 4;  // > CustomCode.findLightest:7
          // > CustomCode.findLightest:8
        var lightness = 0;  // > CustomCode.findLightest:9
        for (var k1 = 0; k1<matrix; k1++) {  // > CustomCode.findLightest:10
          for (var k2 = 0; k2<matrix; k2++) {  // > CustomCode.findLightest:11
            var pos = (index + (k2 * 4)) + (wData * k1 * 4);  // > CustomCode.findLightest:12
            var r = imgData.data[pos];  // > CustomCode.findLightest:13
            var g = imgData.data[pos + 1];  // > CustomCode.findLightest:14
            var b = imgData.data[pos + 2];  // > CustomCode.findLightest:15
            lightness += hsl_luminance(r, g, b);  // > CustomCode.findLightest:16
          }  // > CustomCode.findLightest:17
        }  // > CustomCode.findLightest:18
          // > CustomCode.findLightest:19
        if (lightness > first[2]) {  // > CustomCode.findLightest:20
          var x = (index / 4) % wData;  // > CustomCode.findLightest:21
          var y = Math.floor((index / 4) / wData);  // > CustomCode.findLightest:22
          first[0] = x;  // > CustomCode.findLightest:23
          first[1] = y;  // > CustomCode.findLightest:24
          first[2] = lightness;  // > CustomCode.findLightest:25
        } else if (lightness > second[2]) {  // > CustomCode.findLightest:26
          var x = (index / 4) % wData;  // > CustomCode.findLightest:27
          var y = Math.floor((index / 4) / wData);  // > CustomCode.findLightest:28
          // ignoring if second is too close to first  // > CustomCode.findLightest:29
            // > CustomCode.findLightest:30
          var calMinDist = window.innerWidth*0.5; // new  // > CustomCode.findLightest:31
          if (Math.sqrt((first[0]-x)*(first[0]-x) + (first[1]-y)*(first[1]-y)) > calMinDist) {  // > CustomCode.findLightest:32
            second[0] = x;  // > CustomCode.findLightest:33
            second[1] = y;  // > CustomCode.findLightest:34
            second[2] = lightness;  // > CustomCode.findLightest:35
          }  // > CustomCode.findLightest:36
        }        // > CustomCode.findLightest:37
      }  // > CustomCode.findLightest:38
    }  // > CustomCode.findLightest:39
    callback(first, second);  // > CustomCode.findLightest:40
  }  // > CustomCode.findLightest:41

  function changeOrientation() {  // > CustomCode.iOSOrientation:1
     // > CustomCode.iOSOrientation:2
  var k =0.9/2 ; // k control height 1 is for full screen, 0.9 shorten etc  // > CustomCode.iOSOrientation:3
  var kepub =0.8/2 ;  // > CustomCode.iOSOrientation:4
  // check platform for Apps  // > CustomCode.iOSOrientation:5
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.iOSOrientation:6
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.iOSOrientation:7
     // > CustomCode.iOSOrientation:8
  // check platform for web browsers  // > CustomCode.iOSOrientation:9
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.iOSOrientation:10
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.iOSOrientation:11
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.iOSOrientation:12
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.iOSOrientation:13
     // > CustomCode.iOSOrientation:14
     // > CustomCode.iOSOrientation:15
  switch (window.orientation) {  // > CustomCode.iOSOrientation:16
    case 0:  // > CustomCode.iOSOrientation:17
    case 180:  // > CustomCode.iOSOrientation:18
      this.screenOrientation = 'portrait';  // > CustomCode.iOSOrientation:19
      if (iOSapp){ // does not seems to work  // > CustomCode.iOSOrientation:20
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.iOSOrientation:21
        return window.screen.height*k;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.iOSOrientation:22
        // return window.screen.height;  // > CustomCode.iOSOrientation:23
        //  return window.innerHeight;  // > CustomCode.iOSOrientation:24
        // return document.documentElement.clientHeight;  // > CustomCode.iOSOrientation:25
      }  // > CustomCode.iOSOrientation:26
      else if (_isEPub){ // does not seems to work  // > CustomCode.iOSOrientation:27
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.iOSOrientation:28
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.iOSOrientation:29
        // return window.screen.height;  // > CustomCode.iOSOrientation:30
        //  return window.innerHeight;  // > CustomCode.iOSOrientation:31
        // return document.documentElement.clientHeight;  // > CustomCode.iOSOrientation:32
      }  // > CustomCode.iOSOrientation:33
      else {  // > CustomCode.iOSOrientation:34
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.iOSOrientation:35
        return window.innerHeight*k;  // > CustomCode.iOSOrientation:36
      }  // > CustomCode.iOSOrientation:37
      break;  // > CustomCode.iOSOrientation:38
    case 90:  // > CustomCode.iOSOrientation:39
    case -90:  // > CustomCode.iOSOrientation:40
      this.screenOrientation = 'landscape';  // > CustomCode.iOSOrientation:41
     // > CustomCode.iOSOrientation:42
      if (iOSapp){ // App  // > CustomCode.iOSOrientation:43
        return window.screen.width*k;    // > CustomCode.iOSOrientation:44
        // return window.screen.height;  // > CustomCode.iOSOrientation:45
        //  return window.innerHeight;  // > CustomCode.iOSOrientation:46
        //  return document.documentElement.clientHeight;  // > CustomCode.iOSOrientation:47
      }  // > CustomCode.iOSOrientation:48
      else if (_isEPub){ // does not seems to work  // > CustomCode.iOSOrientation:49
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.iOSOrientation:50
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.iOSOrientation:51
        // return window.screen.height;  // > CustomCode.iOSOrientation:52
        //  return window.innerHeight;  // > CustomCode.iOSOrientation:53
        // return document.documentElement.clientHeight;  // > CustomCode.iOSOrientation:54
      }  // > CustomCode.iOSOrientation:55
      else { // browser Android and PC  // > CustomCode.iOSOrientation:56
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.iOSOrientation:57
        // alert("browser Android and PC");  // > CustomCode.iOSOrientation:58
        return window.innerHeight*k;  // > CustomCode.iOSOrientation:59
      }  // > CustomCode.iOSOrientation:60
      break;  // > CustomCode.iOSOrientation:61
    default:  // > CustomCode.iOSOrientation:62
      this.screenOrientation = 'unknown';  // > CustomCode.iOSOrientation:63
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.iOSOrientation:64
      return window.innerHeight*k;  // > CustomCode.iOSOrientation:65
  }  // > CustomCode.iOSOrientation:66
     // > CustomCode.iOSOrientation:67
  }  // > CustomCode.iOSOrientation:68
     // > CustomCode.iOSOrientation:69

  function iOSversion() {  // > CustomCode.iOSversion:1
    if (/iP(hone|od|ad)/.test(navigator.platform)) {  // > CustomCode.iOSversion:2
      // supports iOS 2.0 and later: <http://bit.ly/TJjs1V>  // > CustomCode.iOSversion:3
     var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);  // > CustomCode.iOSversion:4
      // var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);  // > CustomCode.iOSversion:5
     // return [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];  // > CustomCode.iOSversion:6
      return parseInt(v[1], 10);  // > CustomCode.iOSversion:7
    }  // > CustomCode.iOSversion:8
  }  // > CustomCode.iOSversion:9

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
      lumData = [];  // > Initialization.Init Page:1
      rData = [];  // > Initialization.Init Page:2
      gData = [];  // > Initialization.Init Page:3
      bData = [];  // > Initialization.Init Page:4
      specData = [];  // > Initialization.Init Page:5
      styleList = [];  // > Initialization.Init Page:6
        // > Initialization.Init Page:7
      iosVis = !iOS?true:(iOSversion()>=11)?true:false;  // > Initialization.Init Page:8
      iosStr = iOS?iOSversion():"";  // > Initialization.Init Page:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["dialogbox"]) return;
    //_tools.showOkDialog("ttts");  // > Initialization.dialogbox:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["privilege"]) return;
    //androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.CAMERA, this.androidPermissions.PERMISSION.GET_ACCOUNTS]);  // > Initialization.privilege:1
    // only for app  // > Initialization.privilege:2
    if (typeof cordova != 'undefined' &&   // > Initialization.privilege:3
        typeof cordova.plugins != 'undefined' &&  // > Initialization.privilege:4
        typeof cordova.plugins.diagnostic != 'undefined') {  // > Initialization.privilege:5
      var cpd = cordova.plugins.diagnostic;  // > Initialization.privilege:6
      function success(status) {  // > Initialization.privilege:7
        if (cpd.permissionStatus.GRANTED !== status) {  // > Initialization.privilege:8
            alert('Allow the requested permission');  // > Initialization.privilege:9
        }   // > Initialization.privilege:10
      }  // > Initialization.privilege:11
      function failure(error) {  // > Initialization.privilege:12
        alert('Something was wrong with your camera');  // > Initialization.privilege:13
      }  // > Initialization.privilege:14
     // cpd.requestRuntimePermission(success, failure, cpd.permission.READ_EXTERNAL_STORAGE);  // > Initialization.privilege:15
      alert("success1");  // > Initialization.privilege:16
      cpd.requestCameraAuthorization(success, failure, true);  // > Initialization.privilege:17
      alert("success2");  // > Initialization.privilege:18
    }  // > Initialization.privilege:19
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    // image source  // > Evolution.Evol Page:1
    var imgData;  // > Evolution.Evol Page:2
    var wData;  // > Evolution.Evol Page:3
    var hData;  // > Evolution.Evol Page:4
    if (frontCamera || backCamera) {  // > Evolution.Evol Page:5
      imgData = _view.camera.getSnapshot();  // > Evolution.Evol Page:6
      wData = Math.floor(_view.camera.getWidth());  // > Evolution.Evol Page:7
      hData = Math.floor(_view.camera.getHeight());  // > Evolution.Evol Page:8
    } else {   // > Evolution.Evol Page:9
      imgData = _view.image.getImageData();  // > Evolution.Evol Page:10
      var size = _view.image.getPixelSizes();  // > Evolution.Evol Page:11
      wData = Math.floor(Math.abs(size[0]+1));  // > Evolution.Evol Page:12
      hData = Math.floor(Math.abs(size[1]+1));  // > Evolution.Evol Page:13
    }  // > Evolution.Evol Page:14
    // colors(imgData,perceived1_luminance);  // > Evolution.Evol Page:15
    colors(imgData,hsl_luminance);  // > Evolution.Evol Page:16
    spectrum(imgData,hsl_luminance);  // > Evolution.Evol Page:17
    _view.spec.setMarkStyleList(styleList);  // > Evolution.Evol Page:18
    //find whitestLight  // > Evolution.Evol Page:19
    if(findLight) {  // > Evolution.Evol Page:20
        calFreqCount = (calFreqCount + 1) % (_model.getFPS() / calFreq);  // > Evolution.Evol Page:21
        if (calFreqCount == 0) {  // > Evolution.Evol Page:22
          findLightest(imgData, wData, hData, function(first,second) {  // > Evolution.Evol Page:23
            cal1Pos = _view.drawingPanel.toPanelPosition(first);  // > Evolution.Evol Page:24
            cal2Pos = _view.drawingPanel.toPanelPosition(second);  // > Evolution.Evol Page:25
              // > Evolution.Evol Page:26
            calibreSize = [cal2Pos[0]-cal1Pos[0],cal2Pos[1]-cal1Pos[1]];  // > Evolution.Evol Page:27
            var scale = (maxX-minX) / calWavelength;  // > Evolution.Evol Page:28
            selectorSize = [calibreSize[0] * scale, calibreSize[1] * scale];  // > Evolution.Evol Page:29
            endPos = [firstPos[0]+selectorSize[0],firstPos[1]+selectorSize[1]];          // > Evolution.Evol Page:30
          });  // > Evolution.Evol Page:31
        }  // > Evolution.Evol Page:32
    }  // > Evolution.Evol Page:33
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new spectrumanalyzer_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.sourcePanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'sourcePanel'
          _view.topLabel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'topLabel'
          _view.frontCamera.linkProperty("Checked",  function() { return frontCamera; }, function(_v) { frontCamera = _v; } ); // HtmlView Page linking property 'Checked' for element 'frontCamera'
          _view.frontCamera.setAction("OnCheckOn", function(_data,_info) {
  _view.camera.setFrontCam(true);

}); // HtmlView Page setting action 'OnCheckOn' for element 'frontCamera'
          _view.frontCamera.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'frontCamera'
          _view.FrontBackCamera.setAction("OffClick", function(_data,_info) {
  backCamera=true;
  _view.camera.setFrontCam(false);
  _view.fileUpload.setValue('');

}); // HtmlView Page setting action 'OffClick' for element 'FrontBackCamera'
          _view.FrontBackCamera.linkProperty("Visibility",  function() { return iosVis; }, function(_v) { iosVis = _v; } ); // HtmlView Page linking property 'Visibility' for element 'FrontBackCamera'
          _view.FrontBackCamera.setAction("OnClick", function(_data,_info) {
  frontCamera=true;
  _view.camera.setFrontCam(true);
  _view.fileUpload.setValue('');

}); // HtmlView Page setting action 'OnClick' for element 'FrontBackCamera'
          _view.FrontBackCamera.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'FrontBackCamera'
          _view.backCamera.linkProperty("Checked",  function() { return backCamera; }, function(_v) { backCamera = _v; } ); // HtmlView Page linking property 'Checked' for element 'backCamera'
          _view.backCamera.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'backCamera'
          _view.backCamera.setAction("OnCheckOn", function(_data,_info) {
  _view.camera.setFrontCam(false);

}); // HtmlView Page setting action 'OnCheckOn' for element 'backCamera'
          _view.fileUpload.setAction("OnChange", function(_data,_info) {
  var target = _view.fileUpload.getTarget();
  _view.image.forceImageUrl(target.files[0]);
  frontCamera = false;
  backCamera = false;

}); // HtmlView Page setting action 'OnChange' for element 'fileUpload'
          _view.fileUpload.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'fileUpload'
          _view.comboBox.linkProperty("Options",  function() { return ["Calibrate","Analyse"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if(option=="Calibrate") {
  calibrated=true;
  }
  else if(option=="Analyse") {
  calibrated=false;
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.equal.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'equal'
          _view.wvInput2.linkProperty("Value",  function() { return calWavelength; }, function(_v) { calWavelength = _v; } ); // HtmlView Page linking property 'Value' for element 'wvInput2'
          _view.nm.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'nm'
          _view.findLight.linkProperty("Checked",  function() { return findLight; }, function(_v) { findLight = _v; } ); // HtmlView Page linking property 'Checked' for element 'findLight'
          _view.executionPanel.linkProperty("Visibility",  function() { return (frontCamera||backCamera); } ); // HtmlView Page linking property 'Visibility' for element 'executionPanel'
          _view.runPauseButton.setAction("OffClick", function(_data,_info) {
  _view.camera.pause(true);

}); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return pauseCamera; }, function(_v) { pauseCamera = _v; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", function(_data,_info) {
  _view.camera.play();

}); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'runPauseButton'
          _view.camera.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'camera'
          _view.camera.linkProperty("Visibility",  function() { return (frontCamera||backCamera); } ); // HtmlView Page linking property 'Visibility' for element 'camera'
          _view.camera.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'camera'
          _view.drawingPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnDoubleClick", function(_data,_info) {
  if (pauseCamera==true){
   _view.camera.pause(true); 
  }
  else if (pauseCamera==false){
   _view.camera.play();
    }

}); // HtmlView Page setting action 'OnDoubleClick' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnOrientationChange", function(_data,_info) {
  drawingWidth=window.innerWidth*0.95;//to make sure to redraw
  drawingHeight=window.innerHeight*0.45;

}); // HtmlView Page setting action 'OnOrientationChange' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnResize", function(_data,_info) {
  drawingWidth=window.innerWidth*0.95;//to make sure to redraw
  drawingHeight=window.innerHeight*0.45;

}); // HtmlView Page setting action 'OnResize' for element 'drawingPanel'
          _view.image.linkProperty("Visibility",  function() { return !(frontCamera||backCamera); } ); // HtmlView Page linking property 'Visibility' for element 'image'
          _view.first.linkProperty("Position",  function() { return firstPos; }, function(_v) { firstPos = _v; } ); // HtmlView Page linking property 'Position' for element 'first'
          _view.first.setAction("OnDrag", function(_data,_info) {
  if (!calibrated) {
    selectorSize = [endPos[0]-firstPos[0],endPos[1]-firstPos[1]];
  } else {
    endPos = [firstPos[0]+selectorSize[0],firstPos[1]+selectorSize[1]];
  }

}); // HtmlView Page setting action 'OnDrag' for element 'first'
          _view.end.linkProperty("Position",  function() { return endPos; }, function(_v) { endPos = _v; } ); // HtmlView Page linking property 'Position' for element 'end'
          _view.end.setAction("OnDrag", function(_data,_info) {
  if (!calibrated) {
    selectorSize = [endPos[0]-firstPos[0],endPos[1]-firstPos[1]];
  } else {
    
    firstPos = [endPos[0]-selectorSize[0],endPos[1]-selectorSize[1]];
    //alert("firstPos"+firstPos);
  }

}); // HtmlView Page setting action 'OnDrag' for element 'end'
          _view.arrow.linkProperty("Position",  function() { return firstPos; }, function(_v) { firstPos = _v; } ); // HtmlView Page linking property 'Position' for element 'arrow'
          _view.arrow.linkProperty("Size",  function() { return selectorSize; }, function(_v) { selectorSize = _v; } ); // HtmlView Page linking property 'Size' for element 'arrow'
          _view.selLine.linkProperty("Position",  function() { return firstPos; }, function(_v) { firstPos = _v; } ); // HtmlView Page linking property 'Position' for element 'selLine'
          _view.selLine.linkProperty("Size",  function() { return selectorSize; }, function(_v) { selectorSize = _v; } ); // HtmlView Page linking property 'Size' for element 'selLine'
          _view.calibre.linkProperty("Visibility",  function() { return calibrated; }, function(_v) { calibrated = _v; } ); // HtmlView Page linking property 'Visibility' for element 'calibre'
          _view.cal1.linkProperty("Position",  function() { return cal1Pos; }, function(_v) { cal1Pos = _v; } ); // HtmlView Page linking property 'Position' for element 'cal1'
          _view.cal1.setAction("OnDrag", function(_data,_info) {
  calibreSize = [cal2Pos[0]-cal1Pos[0],cal2Pos[1]-cal1Pos[1]];
  var scale = (maxX-minX) / calWavelength;
  selectorSize = [calibreSize[0] * scale, calibreSize[1] * scale];
  endPos = [firstPos[0]+selectorSize[0],firstPos[1]+selectorSize[1]];

}); // HtmlView Page setting action 'OnDrag' for element 'cal1'
          _view.cal2.linkProperty("Position",  function() { return cal2Pos; }, function(_v) { cal2Pos = _v; } ); // HtmlView Page linking property 'Position' for element 'cal2'
          _view.cal2.setAction("OnDrag", function(_data,_info) {
  calibreSize = [cal2Pos[0]-cal1Pos[0],cal2Pos[1]-cal1Pos[1]];
  var scale = (maxX-minX) / calWavelength;
  selectorSize = [calibreSize[0] * scale, calibreSize[1] * scale];
  endPos = [firstPos[0]+selectorSize[0],firstPos[1]+selectorSize[1]];

}); // HtmlView Page setting action 'OnDrag' for element 'cal2'
          _view.arrow2.linkProperty("Position",  function() { return cal1Pos; }, function(_v) { cal1Pos = _v; } ); // HtmlView Page linking property 'Position' for element 'arrow2'
          _view.arrow2.linkProperty("Size",  function() { return calibreSize; }, function(_v) { calibreSize = _v; } ); // HtmlView Page linking property 'Size' for element 'arrow2'
          _view.calLine.linkProperty("Position",  function() { return cal1Pos; }, function(_v) { cal1Pos = _v; } ); // HtmlView Page linking property 'Position' for element 'calLine'
          _view.calLine.linkProperty("Size",  function() { return calibreSize; }, function(_v) { calibreSize = _v; } ); // HtmlView Page linking property 'Size' for element 'calLine'
          _view.tools.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'tools'
          _view.calibrated.linkProperty("Checked",  function() { return calibrated; }, function(_v) { calibrated = _v; } ); // HtmlView Page linking property 'Checked' for element 'calibrated'
          _view.wvInput.linkProperty("Value",  function() { return calWavelength; }, function(_v) { calWavelength = _v; } ); // HtmlView Page linking property 'Value' for element 'wvInput'
          _view.wvInput.linkProperty("Display",  function() { return calibrated?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'wvInput'
          _view.free.setAction("OnCheckOff", function(_data,_info) {
  calibrated=true;

}); // HtmlView Page setting action 'OnCheckOff' for element 'free'
          _view.free.setAction("OnCheckOn", function(_data,_info) {
  calibrated=false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'free'
          _view.panel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'panel'
          _view.spectrum.linkProperty("Checked",  function() { return spec; }, function(_v) { spec = _v; } ); // HtmlView Page linking property 'Checked' for element 'spectrum'
          _view.spectrum.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'spectrum'
          _view.red.linkProperty("Checked",  function() { return red; }, function(_v) { red = _v; } ); // HtmlView Page linking property 'Checked' for element 'red'
          _view.green.linkProperty("Checked",  function() { return green; }, function(_v) { green = _v; } ); // HtmlView Page linking property 'Checked' for element 'green'
          _view.blue.linkProperty("Checked",  function() { return blue; }, function(_v) { blue = _v; } ); // HtmlView Page linking property 'Checked' for element 'blue'
          _view.intensity.linkProperty("Checked",  function() { return lum; }, function(_v) { lum = _v; } ); // HtmlView Page linking property 'Checked' for element 'intensity'
          _view.intensity.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'intensity'
          _view.plottingPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  if (pauseCamera==true){
   _view.camera.pause(true); 
   
  }
  else if (pauseCamera==false){
   _view.camera.play();
    }

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDrag", function(_data,_info) {
  if (pauseCamera==true){
   _view.camera.pause(true); 
   
  }
  else if (pauseCamera==false){
   _view.camera.play();
    }

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return maxX; }, function(_v) { maxX = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return minX; }, function(_v) { minX = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'plottingPanel'
          _view.spec.linkProperty("Input",  function() { return specData; }, function(_v) { specData = _v; } ); // HtmlView Page linking property 'Input' for element 'spec'
          _view.spec.linkProperty("Visibility",  function() { return spec; }, function(_v) { spec = _v; } ); // HtmlView Page linking property 'Visibility' for element 'spec'
          _view.lum.linkProperty("Input",  function() { return lumData; }, function(_v) { lumData = _v; } ); // HtmlView Page linking property 'Input' for element 'lum'
          _view.lum.linkProperty("Visibility",  function() { return lum; }, function(_v) { lum = _v; } ); // HtmlView Page linking property 'Visibility' for element 'lum'
          _view.r.linkProperty("Input",  function() { return rData; }, function(_v) { rData = _v; } ); // HtmlView Page linking property 'Input' for element 'r'
          _view.r.linkProperty("Visibility",  function() { return red; }, function(_v) { red = _v; } ); // HtmlView Page linking property 'Visibility' for element 'r'
          _view.g.linkProperty("Input",  function() { return gData; }, function(_v) { gData = _v; } ); // HtmlView Page linking property 'Input' for element 'g'
          _view.g.linkProperty("Visibility",  function() { return green; }, function(_v) { green = _v; } ); // HtmlView Page linking property 'Visibility' for element 'g'
          _view.b.linkProperty("Input",  function() { return bData; }, function(_v) { bData = _v; } ); // HtmlView Page linking property 'Input' for element 'b'
          _view.b.linkProperty("Visibility",  function() { return blue; }, function(_v) { blue = _v; } ); // HtmlView Page linking property 'Visibility' for element 'b'
          _view.html.linkProperty("Visibility",  function() { return iOSversion()==undefined; } ); // HtmlView Page linking property 'Visibility' for element 'html'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function spectrumanalyzer_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = spectrumanalyzer_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./spectrumanalyzer.html');

  return _view;
} // end of main function

function spectrumanalyzer_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singleDrawingPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawingPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"sourcePanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sourcePanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Data Logger:</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"frontCamera", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'frontCamera'
      .setProperty("Tooltip","front camera") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'frontCamera'
      .setProperty("Text"," 📱") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'frontCamera'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'frontCamera'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"FrontBackCamera", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'FrontBackCamera'
      .setProperty("CSS",{"border-style":"none"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'FrontBackCamera'
      .setProperty("Tooltip","Front/Back Camera") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'FrontBackCamera'
      .setProperty("ImageOnUrl","./datalogger/camera-swtich-drawnby-leongster.jpeg") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'FrontBackCamera'
      .setProperty("ImageOffUrl","./datalogger/camera-swtich-drawnby-leongster.jpeg") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'FrontBackCamera'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"backCamera", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'backCamera'
      .setProperty("Tooltip","back camera") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'backCamera'
      .setProperty("Text"," 📷") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'backCamera'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'backCamera'
      ;

    _view._addElement(EJSS_INTERFACE.fileUpload,"fileUpload", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fileUpload'
      .setProperty("Height","50px") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'fileUpload'
      .setProperty("CSS",{"border-style":"none"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'fileUpload'
      .setProperty("Multiple",false) // EJsS HtmlView.HtmlView Page: setting property 'Multiple' for element 'fileUpload'
      .setProperty("Accept","image/*") // EJsS HtmlView.HtmlView Page: setting property 'Accept' for element 'fileUpload'
      .setProperty("Tooltip","File Manager") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fileUpload'
      .setProperty("ImageUrl","./datalogger/filemanagerbyleongster.jpeg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'fileUpload'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Background","White") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"equal", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'equal'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'equal'
      .setProperty("Tooltip","equal") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'equal'
      .setProperty("Text","=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'equal'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'equal'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"wvInput2", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wvInput2'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'wvInput2'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wvInput2'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wvInput2'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'wvInput2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"nm", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nm'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'nm'
      .setProperty("Tooltip","nanometre") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'nm'
      .setProperty("Text","nm") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'nm'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'nm'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"findLight", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'findLight'
      .setProperty("Text","Find Light") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'findLight'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("CSS",{"border-style":"none"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'runPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"cameraPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cameraPanel'
      ;

    _view._addElement(EJSS_INTERFACE.motionJPEG,"camera", _view.cameraPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'camera'
      .setProperty("On",true) // EJsS HtmlView.HtmlView Page: setting property 'On' for element 'camera'
      .setProperty("AsBackground",true) // EJsS HtmlView.HtmlView Page: setting property 'AsBackground' for element 'camera'
      .setProperty("UseWebCam",true) // EJsS HtmlView.HtmlView Page: setting property 'UseWebCam' for element 'camera'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'camera'
      .setProperty("Flip",true) // EJsS HtmlView.HtmlView Page: setting property 'Flip' for element 'camera'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.cameraPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("TRMessage","Spectrum Analyzer") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'drawingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'drawingPanel'
      .setProperty("Background","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image'
      .setProperty("SizeY",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"selector", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'selector'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"first", _view.selector) // EJsS HtmlView.HtmlView Page: declaration of element 'first'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'first'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'first'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'first'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'first'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'first'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'first'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'first'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'first'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"end", _view.selector) // EJsS HtmlView.HtmlView Page: declaration of element 'end'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'end'
      .setProperty("ShapeType","NONE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'end'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'end'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'end'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'end'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'end'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'end'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'end'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.selector) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow'
      .setProperty("MarkStart","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'arrow'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"selLine", _view.selector) // EJsS HtmlView.HtmlView Page: declaration of element 'selLine'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'selLine'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'selLine'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"calibre", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'calibre'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"cal1", _view.calibre) // EJsS HtmlView.HtmlView Page: declaration of element 'cal1'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'cal1'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cal1'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'cal1'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'cal1'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'cal1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'cal1'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'cal1'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cal1'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"cal2", _view.calibre) // EJsS HtmlView.HtmlView Page: declaration of element 'cal2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'cal2'
      .setProperty("ShapeType","NONE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'cal2'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'cal2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'cal2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'cal2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'cal2'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'cal2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'cal2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow2", _view.calibre) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow2'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrow2'
      .setProperty("MarkStart","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'arrow2'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"calLine", _view.calibre) // EJsS HtmlView.HtmlView Page: declaration of element 'calLine'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'calLine'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'calLine'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"inline-block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"tools", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tools'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'tools'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"calibrated", _view.tools) // EJsS HtmlView.HtmlView Page: declaration of element 'calibrated'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'calibrated'
      .setProperty("Text","calibrated=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'calibrated'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"wvInput", _view.tools) // EJsS HtmlView.HtmlView Page: declaration of element 'wvInput'
      .setProperty("Width","7vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'wvInput'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'wvInput'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wvInput'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"free", _view.tools) // EJsS HtmlView.HtmlView Page: declaration of element 'free'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'free'
      .setProperty("Text","free") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'free'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"spectrum", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'spectrum'
      .setProperty("Text"," ‎️‍🌈") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'spectrum'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"red", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'red'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'red'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'red'
      .setProperty("Text","red") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'red'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"green", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'green'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'green'
      .setProperty("Text","green") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'green'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"blue", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'blue'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'blue'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'blue'
      .setProperty("Text","blue") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'blue'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"intensity", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'intensity'
      .setProperty("Tooltip","intensity") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'intensity'
      .setProperty("Text","🔅") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'intensity'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",400) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("GuttersLineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'GuttersLineWidth' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",50) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",0.2) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("GridXLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridXLineColor' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXLineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'GridXLineWidth' for element 'plottingPanel'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("GridYLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridYLineColor' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("TitleY","🔅luma") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","λ (nm)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginX",5) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      .setProperty("GridYLineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'GridYLineWidth' for element 'plottingPanel'
      .setProperty("LineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"spec", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'spec'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'spec'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'spec'
      .setProperty("MarkType","AREA") // EJsS HtmlView.HtmlView Page: setting property 'MarkType' for element 'spec'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"lum", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'lum'
      .setProperty("LineColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'lum'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'lum'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'lum'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'lum'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"r", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'r'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'r'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'r'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'r'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'r'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"g", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'g'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'g'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'g'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'g'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'g'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"b", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'b'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'b'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'b'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'b'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'b'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"html", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'html'
      .setProperty("Html","<h1>Spectrum Analyzer</h1>     <h2>3 deployments</h2>     <ol>       <ol>         <li>Android App, will need to give permission to allow the App to have           permission to use your camera in the permission App setting</li>         <li>iOS App, will need to give permission to allow the App to have           permission to use your camera and file system when prompted</li>         <li>Web App, the https for secured connection and must be used instead           of http.</li>       </ol>     </ol>     <h2>Physical Apparatus</h2>     <ol>       <li>A diffraction grating to be place in front of the camera</li>       <li>Light source such as a multi propose laser pointer</li>       <li>Hand phone with App/Chrome Browser or a laptop with camera</li>     </ol>     <h2>Use</h2>     <ol>       <ol>       </ol>       <li>Select one of the three sources of image</li>       <ul>         <li>Front Camera /Back Camera </li>         <li>File Manager </li>       </ul>       <li>If the calibrated length between 2 points on the image is to be used,         for example, distance between zero order length and the first order         diffraction pattern of the red wavelength is approximately 650 nm, then         select the radio button calibrated to input a known length. Move the         square start end to re position the start of known calibrated start         point and drag the arrow head to the end of the known length.</li>       <li>Similarly, re position the start and end of the free line spectrum to         analyze the pixel perceived brightness where the start is BLUE =400 and         end is RED =700 nm</li>       <li>The play/pause button will start or stop the calculation of the         free line pixel perceived brightness along the line.</li>     </ol>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'html'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Spectrum Analyzer (Light Intensity App)<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13electromagneticspectrum/ejss_src_spectrumanalyzer/datalogger/Screen Shot 2017-10-13 at 4.26.48 PM.png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13electromagneticspectrum/ejss_src_spectrumanalyzer/01authorFelix_J_Garcia_Clemente.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13electromagneticspectrum/ejss_src_spectrumanalyzer/01authorleongtzekwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13electromagneticspectrum/ejss_src_spectrumanalyzer/1authorlookangphoto5050.png" />
 Félix J. García Clemente; Tze Kwang Leong; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Félix J. García Clemente; Tze Kwang Leong; Loo Kang Wee. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new spectrumanalyzer("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_13electromagneticspectrum/ejss_src_spectrumanalyzer/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
