<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Laser Beam Profile EXERCISE 2: THE TEM00 MODE: A CONTOUR PLOT</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function Beam_Profile_Exercise_2_frem(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var cdict1; // EjsS Model.Variables.Inputs.cdict1
  var w0; // EjsS Model.Variables.Inputs.w0
  var P_0; // EjsS Model.Variables.Inputs.P_0
  var I_0; // EjsS Model.Variables.Inputs.I_0
  var red; // EjsS Model.Variables.Inputs.red
  var blue; // EjsS Model.Variables.Inputs.blue
  var green; // EjsS Model.Variables.Inputs.green

  var min_x; // EjsS Model.Variables.Graph and Display.min_x
  var max_x; // EjsS Model.Variables.Graph and Display.max_x
  var min_y; // EjsS Model.Variables.Graph and Display.min_y
  var max_y; // EjsS Model.Variables.Graph and Display.max_y
  var font; // EjsS Model.Variables.Graph and Display.font
  var fonta; // EjsS Model.Variables.Graph and Display.fonta
  var fontb; // EjsS Model.Variables.Graph and Display.fontb
  var black; // EjsS Model.Variables.Graph and Display.black
  var beamcolor; // EjsS Model.Variables.Graph and Display.beamcolor
  var radscale; // EjsS Model.Variables.Graph and Display.radscale
  var scaled; // EjsS Model.Variables.Graph and Display.scaled
  var container; // EjsS Model.Variables.Graph and Display.container
  var svggradient; // EjsS Model.Variables.Graph and Display.svggradient

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      cdict1 : cdict1,
      w0 : w0,
      P_0 : P_0,
      I_0 : I_0,
      red : red,
      blue : blue,
      green : green,
      min_x : min_x,
      max_x : max_x,
      min_y : min_y,
      max_y : max_y,
      font : font,
      fonta : fonta,
      fontb : fontb,
      black : black,
      beamcolor : beamcolor,
      radscale : radscale,
      scaled : scaled,
      container : container,
      svggradient : svggradient
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      cdict1 : cdict1,
      w0 : w0,
      P_0 : P_0,
      I_0 : I_0,
      red : red,
      blue : blue,
      green : green,
      min_x : min_x,
      max_x : max_x,
      min_y : min_y,
      max_y : max_y,
      font : font,
      fonta : fonta,
      fontb : fontb,
      black : black,
      beamcolor : beamcolor,
      radscale : radscale,
      scaled : scaled,
      container : container,
      svggradient : svggradient
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.cdict1 != "undefined") cdict1 = json.cdict1;
    if(typeof json.w0 != "undefined") w0 = json.w0;
    if(typeof json.P_0 != "undefined") P_0 = json.P_0;
    if(typeof json.I_0 != "undefined") I_0 = json.I_0;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.min_x != "undefined") min_x = json.min_x;
    if(typeof json.max_x != "undefined") max_x = json.max_x;
    if(typeof json.min_y != "undefined") min_y = json.min_y;
    if(typeof json.max_y != "undefined") max_y = json.max_y;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.black != "undefined") black = json.black;
    if(typeof json.beamcolor != "undefined") beamcolor = json.beamcolor;
    if(typeof json.radscale != "undefined") radscale = json.radscale;
    if(typeof json.scaled != "undefined") scaled = json.scaled;
    if(typeof json.container != "undefined") container = json.container;
    if(typeof json.svggradient != "undefined") svggradient = json.svggradient;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.cdict1 != "undefined") cdict1 = json.cdict1;
    if(typeof json.w0 != "undefined") w0 = json.w0;
    if(typeof json.P_0 != "undefined") P_0 = json.P_0;
    if(typeof json.I_0 != "undefined") I_0 = json.I_0;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.min_x != "undefined") min_x = json.min_x;
    if(typeof json.max_x != "undefined") max_x = json.max_x;
    if(typeof json.min_y != "undefined") min_y = json.min_y;
    if(typeof json.max_y != "undefined") max_y = json.max_y;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fonta != "undefined") fonta = json.fonta;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.black != "undefined") black = json.black;
    if(typeof json.beamcolor != "undefined") beamcolor = json.beamcolor;
    if(typeof json.radscale != "undefined") radscale = json.radscale;
    if(typeof json.scaled != "undefined") scaled = json.scaled;
    if(typeof json.container != "undefined") container = json.container;
    if(typeof json.svggradient != "undefined") svggradient = json.svggradient;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Colormaps"] = true;
    __pagesEnabled["Other Inputs"] = true;
    __pagesEnabled["svg Radial"] = true;
    __pagesEnabled["svg Linear"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    cdict1 = 0; // EjsS Model.Variables.Inputs.cdict1
    w0 = 0.5; // EjsS Model.Variables.Inputs.w0
    P_0 = 1.00; // EjsS Model.Variables.Inputs.P_0
    I_0 = 0; // EjsS Model.Variables.Inputs.I_0
    red = 255; // EjsS Model.Variables.Inputs.red
    blue = 0; // EjsS Model.Variables.Inputs.blue
    green = 0; // EjsS Model.Variables.Inputs.green
  });

  _model.addToReset(function() {
    min_x = -2; // EjsS Model.Variables.Graph and Display.min_x
    max_x = 2; // EjsS Model.Variables.Graph and Display.max_x
    min_y = min_x; // EjsS Model.Variables.Graph and Display.min_y
    max_y = max_x; // EjsS Model.Variables.Graph and Display.max_y
    font = "normal normal 2vw"; // EjsS Model.Variables.Graph and Display.font
    fonta = "normal normal 1vw"; // EjsS Model.Variables.Graph and Display.fonta
    fontb = "normal bold 2vw"; // EjsS Model.Variables.Graph and Display.fontb
    black = true; // EjsS Model.Variables.Graph and Display.black
    beamcolor = ""; // EjsS Model.Variables.Graph and Display.beamcolor
    radscale = 0; // EjsS Model.Variables.Graph and Display.radscale
    scaled = true; // EjsS Model.Variables.Graph and Display.scaled
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    /* Define the colormaps for these contour plots.  // > Initialization.Init Page:1
    # For a HeNe laser beam profile, we might want red to be bright  // > Initialization.Init Page:2
    # and black to be dark.  This is the color map labeled  // > Initialization.Init Page:3
    # black_red1.  // > Initialization.Init Page:4
    #  // > Initialization.Init Page:5
    # If instead we want white to be dark,   // > Initialization.Init Page:6
    # then we use the color map labeled white_red1.  // > Initialization.Init Page:7
    #  // > Initialization.Init Page:8
    # The first digit in each 3-tuple is the scaled intensity  // > Initialization.Init Page:9
    # (0 for lowest value, 1 for highest value).  // > Initialization.Init Page:10
    # The second two digits are identical and represent the  // > Initialization.Init Page:11
    # R-, G-, or B-value at that scaled intensity.  Here,the   // > Initialization.Init Page:12
    # R-value increases linearly with intensity while the   // > Initialization.Init Page:13
    # G- and B-values are always zero.*/  // > Initialization.Init Page:14
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Colormaps"]) return;
    cdict1 = [[0,red],//red  // > Initialization.Colormaps:1
              [0,green],//green  // > Initialization.Colormaps:2
              [0,blue]//blue  // > Initialization.Colormaps:3
          ];  // > Initialization.Colormaps:4
    cdict2 = [[255,red],//red  // > Initialization.Colormaps:5
              [255,green],//green  // > Initialization.Colormaps:6
              [255,blue]//blue  // > Initialization.Colormaps:7
          ];  // > Initialization.Colormaps:8
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Other Inputs"]) return;
    I_0 = 2.00*P_0/(Math.PI*w0*w0);//maximum irradiance [mW/mm2]  // > Initialization.Other Inputs:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg Radial"]) return;
     try{document.body.removeChild(container);}   // > Initialization.svg Radial:1
     catch(err){}  // > Initialization.svg Radial:2
     container = document.createElement('div');  // > Initialization.svg Radial:3
     svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg Radial:4
      '  <radialGradient id="black_red1" cx="50%" cy="50%" r="25%" fx="50%" fy="50%">'+  // > Initialization.svg Radial:5
      '    <stop offset="0%" style="stop-color:rgb('+cdict1[0][1]+','+cdict1[1][1]+','+cdict1[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Radial:6
      '    <stop offset="100%" style="stop-color:rgb('+cdict1[0][0]+','+cdict1[1][0]+','+cdict1[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Radial:7
      '  </radialGradient>'+  // > Initialization.svg Radial:8
      '  <radialGradient id="scaledblack_red1" cx="50%" cy="50%" r="'+I_0/5+'" fx="50%" fy="50%">'+  // > Initialization.svg Radial:9
      '    <stop offset="0%" style="stop-color:rgb('+cdict1[0][1]+','+cdict1[1][1]+','+cdict1[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Radial:10
      '    <stop offset="100%" style="stop-color:rgb('+cdict1[0][0]+','+cdict1[1][0]+','+cdict1[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Radial:11
      '  </radialGradient>'+  // > Initialization.svg Radial:12
      '  <radialGradient id="black_red2" cx="50%" cy="20%" r="50%" fx="50%" fy="10%">'+  // > Initialization.svg Radial:13
      '    <stop offset="0%" style="stop-color:rgb('+cdict1[0][1]+','+cdict1[1][1]+','+cdict1[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Radial:14
      '    <stop offset="100%" style="stop-color:rgb('+cdict1[0][0]+','+cdict1[1][0]+','+cdict1[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Radial:15
      '  </radialGradient>'+  // > Initialization.svg Radial:16
      '  <radialGradient id="white_red1" cx="50%" cy="50%" r="25%" fx="50%" fy="50%">'+  // > Initialization.svg Radial:17
      '    <stop offset="0%" style="stop-color:rgb('+cdict2[0][1]+','+cdict2[1][1]+','+cdict2[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Radial:18
      '    <stop offset="100%" style="stop-color:rgb('+cdict2[0][0]+','+cdict2[1][0]+','+cdict2[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Radial:19
      '  </radialGradient>'+  // > Initialization.svg Radial:20
      '  <radialGradient id="white_red2" cx="50%" cy="20%" r="50%" fx="50%" fy="10%">'+  // > Initialization.svg Radial:21
      '    <stop offset="0%" style="stop-color:rgb('+cdict2[0][1]+','+cdict2[1][1]+','+cdict2[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Radial:22
      '    <stop offset="100%" style="stop-color:rgb('+cdict2[0][0]+','+cdict2[1][0]+','+cdict2[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Radial:23
      '  </radialGradient>'+  // > Initialization.svg Radial:24
      '  <radialGradient id="scaledwhite_red1" cx="50%" cy="50%" r="'+I_0/5+'" fx="50%" fy="50%">'+  // > Initialization.svg Radial:25
      '    <stop offset="0%" style="stop-color:rgb('+cdict2[0][1]+','+cdict2[1][1]+','+cdict2[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Radial:26
      '    <stop offset="100%" style="stop-color:rgb('+cdict2[0][0]+','+cdict2[1][0]+','+cdict2[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Radial:27
      '  </radialGradient>'+  // > Initialization.svg Radial:28
      '</defs></svg>';  // > Initialization.svg Radial:29
    container.innerHTML = svggradient;  // > Initialization.svg Radial:30
    document.body.appendChild(container);  // > Initialization.svg Radial:31
    //"url(#black_red1)"  // > Initialization.svg Radial:32
    //"url(#white_red1)"  // > Initialization.svg Radial:33
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg Linear"]) return;
     try{document.body.removeChild(container2);}   // > Initialization.svg Linear:1
     catch(err){}  // > Initialization.svg Linear:2
     container2 = document.createElement('div');  // > Initialization.svg Linear:3
     svggradient2 = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg Linear:4
      '  <linearGradient id="black_red1Linear" x1="0%" y1="0%" x2="0%" y2="100%">'+  // > Initialization.svg Linear:5
      '    <stop offset="0%" style="stop-color:rgb('+cdict1[0][1]+','+cdict1[1][1]+','+cdict1[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Linear:6
      '    <stop offset="100%" style="stop-color:rgb('+cdict1[0][0]+','+cdict1[1][0]+','+cdict1[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Linear:7
      '  </linearGradient>'+  // > Initialization.svg Linear:8
      '  <linearGradient id="scaledblack_red1Linear" x1="0%" y1="0%" x2="0%" y2="100%">'+  // > Initialization.svg Linear:9
      '    <stop offset="0%" style="stop-color:rgb('+cdict1[0][1]+','+cdict1[1][1]+','+cdict1[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Linear:10
      '    <stop offset="100%" style="stop-color:rgb('+cdict1[0][0]+','+cdict1[1][0]+','+cdict1[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Linear:11
      '  </linearGradient>'+  // > Initialization.svg Linear:12
      '  <linearGradient id="black_red2Linear" x1="0%" y1="0%" x2="0%" y2="100%">'+  // > Initialization.svg Linear:13
      '    <stop offset="0%" style="stop-color:rgb('+cdict1[0][1]+','+cdict1[1][1]+','+cdict1[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Linear:14
      '    <stop offset="100%" style="stop-color:rgb('+cdict1[0][0]+','+cdict1[1][0]+','+cdict1[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Linear:15
      '  </linearGradient>'+  // > Initialization.svg Linear:16
      '  <linearGradient id="white_red1Linear" x1="0%" y1="0%" x2="0%" y2="100%">'+  // > Initialization.svg Linear:17
      '    <stop offset="0%" style="stop-color:rgb('+cdict2[0][1]+','+cdict2[1][1]+','+cdict2[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Linear:18
      '    <stop offset="100%" style="stop-color:rgb('+cdict2[0][0]+','+cdict2[1][0]+','+cdict2[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Linear:19
      '  </linearGradient>'+  // > Initialization.svg Linear:20
      '  <linearGradient id="white_red2Linear" x1="0%" y1="0%" x2="0%" y2="100%">'+  // > Initialization.svg Linear:21
      '    <stop offset="0%" style="stop-color:rgb('+cdict2[0][1]+','+cdict2[1][1]+','+cdict2[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Linear:22
      '    <stop offset="100%" style="stop-color:rgb('+cdict2[0][0]+','+cdict2[1][0]+','+cdict2[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Linear:23
      '  </linearGradient>'+  // > Initialization.svg Linear:24
      '  <linearGradient id="scaledwhite_red1Linear" x1="0%" y1="0%" x2="0%" y2="100%">'+  // > Initialization.svg Linear:25
      '    <stop offset="0%" style="stop-color:rgb('+cdict2[0][1]+','+cdict2[1][1]+','+cdict2[2][1]+'); stop-opacity:1" />'+  // > Initialization.svg Linear:26
      '    <stop offset="100%" style="stop-color:rgb('+cdict2[0][0]+','+cdict2[1][0]+','+cdict2[2][0]+');stop-opacity:1" />'+  // > Initialization.svg Linear:27
      '  </linearGradient>'+  // > Initialization.svg Linear:28
      '</defs></svg>';  // > Initialization.svg Linear:29
    container2.innerHTML = svggradient2;  // > Initialization.svg Linear:30
    document.body.appendChild(container2);  // > Initialization.svg Linear:31
    //"url(#black_red1)"  // > Initialization.svg Linear:32
    //"url(#white_red1)"  // > Initialization.svg Linear:33
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    cdict1 = [[0,255],//red  // > FixedRelations.FixRel Page:1
              [0,0],//green  // > FixedRelations.FixRel Page:2
              [0,0]//blue  // > FixedRelations.FixRel Page:3
          ];  // > FixedRelations.FixRel Page:4
    beamcolor = "rgb("+cdict1[0][1]+","+cdict1[1][1]+","+cdict1[2][1]+")";  // > FixedRelations.FixRel Page:5
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new Beam_Profile_Exercise_2_frem_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.whiteorblack.linkProperty("Background",  function() { return black?"black":"white"; } ); // HtmlView Page linking property 'Background' for element 'whiteorblack'
          _view.whiteorblack.linkProperty("State",  function() { return black; }, function(_v) { black = _v; } ); // HtmlView Page linking property 'State' for element 'whiteorblack'
          _view.whiteorblack.linkProperty("Foreground",  function() { return black?"white":"black"; } ); // HtmlView Page linking property 'Foreground' for element 'whiteorblack'
          _view.whiteorblack.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'whiteorblack'
          _view.BeamWidth.linkProperty("Background",  function() { return beamcolor; }, function(_v) { beamcolor = _v; } ); // HtmlView Page linking property 'Background' for element 'BeamWidth'
          _view.w0.linkProperty("Value",  function() { return w0; }, function(_v) { w0 = _v; } ); // HtmlView Page linking property 'Value' for element 'w0'
          _view.w0.linkProperty("Foreground",  function() { return beamcolor; }, function(_v) { beamcolor = _v; } ); // HtmlView Page linking property 'Foreground' for element 'w0'
          _view.w0.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'w0'
          _view.w0.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'w0'
          _view.p0.linkProperty("Value",  function() { return P_0; }, function(_v) { P_0 = _v; } ); // HtmlView Page linking property 'Value' for element 'p0'
          _view.p0.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'p0'
          _view.p0.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'p0'
          _view.red.linkProperty("Value",  function() { return red; }, function(_v) { red = _v; } ); // HtmlView Page linking property 'Value' for element 'red'
          _view.red.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'red'
          _view.red.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'red'
          _view.Green.linkProperty("Value",  function() { return green; }, function(_v) { green = _v; } ); // HtmlView Page linking property 'Value' for element 'Green'
          _view.Green.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'Green'
          _view.Green.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Green'
          _view.Blue.linkProperty("Value",  function() { return blue; }, function(_v) { blue = _v; } ); // HtmlView Page linking property 'Value' for element 'Blue'
          _view.Blue.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'Blue'
          _view.Blue.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'Blue'
          _view.scaled.linkProperty("Checked",  function() { return scaled; }, function(_v) { scaled = _v; } ); // HtmlView Page linking property 'Checked' for element 'scaled'
          _view.scaled.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'scaled'
          _view.scaled.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'scaled'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.MainPlot.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'MainPlot'
          _view.MainPlot.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'MainPlot'
          _view.MainPlot.linkProperty("Background",  function() { return scaled?(black?"url(#scaledblack_red1)":"url(#scaledwhite_red1)"):(black?"url(#black_red1)":"url(#white_red1)"); } ); // HtmlView Page linking property 'Background' for element 'MainPlot'
          _view.MainPlot.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'MainPlot'
          _view.MainPlot.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'MainPlot'
          _view.MainPlot.linkProperty("Title",  function() { return "w0 = "+w0.toFixed(1)+"mm, p0 = "+P_0.toFixed(1)+"mW"; } ); // HtmlView Page linking property 'Title' for element 'MainPlot'
          _view.MainPlot.linkProperty("MaximumY",  function() { return max_y; }, function(_v) { max_y = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'MainPlot'
          _view.MainPlot.linkProperty("MaximumX",  function() { return max_x; }, function(_v) { max_x = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'MainPlot'
          _view.MainPlot.linkProperty("MinimumX",  function() { return min_x; }, function(_v) { min_x = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'MainPlot'
          _view.MainPlot.linkProperty("MinimumY",  function() { return min_y; }, function(_v) { min_y = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'MainPlot'
          _view.MainPlot.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'MainPlot'
          _view.MainPlot.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'MainPlot'
          _view.SideBar.linkProperty("AxisYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'SideBar'
          _view.SideBar.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'SideBar'
          _view.SideBar.linkProperty("Background",  function() { return black?"url(#black_red2Linear)":"url(#white_red2Linear)"; } ); // HtmlView Page linking property 'Background' for element 'SideBar'
          _view.SideBar.linkProperty("TitleYFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'SideBar'
          _view.SideBar.linkProperty("TitleXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'TitleXFont' for element 'SideBar'
          _view.SideBar.linkProperty("MaximumY",  function() { return scaled?I_0*w0:I_0; } ); // HtmlView Page linking property 'MaximumY' for element 'SideBar'
          _view.SideBar.linkProperty("AxisXFont",  function() { return fonta; }, function(_v) { fonta = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'SideBar'
          _view.SideBar.linkProperty("TitleFont",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'SideBar'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function Beam_Profile_Exercise_2_frem_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = Beam_Profile_Exercise_2_frem_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./Beam_Profile_Exercise_2_frem_Intro_1.html');
  _view._addDescriptionPage('Beam_Profile_Exercise_2.py','./Beam_Profile_Exercise_2_frem_Intro_2.html');
  _view._addDescriptionPage('Exercise 2','./Beam_Profile_Exercise_2_frem_Intro_3.html');

  return _view;
} // end of main function

function Beam_Profile_Exercise_2_frem_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{"float" : "left"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"whiteorblack", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'whiteorblack'
      .setProperty("TextOn","Black") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'whiteorblack'
      .setProperty("TextOff","White") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'whiteorblack'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"BeamWidth", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'BeamWidth'
      .setProperty("Tooltip","Beam Width [mm]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'BeamWidth'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'BeamWidth'
      .setProperty("Text","Beam Width") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'BeamWidth'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"w0", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'w0'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'w0'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'w0'
      .setProperty("Tooltip","beam width w0 [mm]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'w0'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'w0'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"LasterPower", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'LasterPower'
      .setProperty("Background","green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'LasterPower'
      .setProperty("Tooltip","laser power [mW]") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'LasterPower'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'LasterPower'
      .setProperty("Text","Laser Power") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'LasterPower'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"p0", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'p0'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'p0'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'p0'
      .setProperty("Tooltip"," # laser power [mW] ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'p0'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'p0'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'p0'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"Rgb", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Rgb'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'Rgb'
      .setProperty("Tooltip","Sets color for RGB") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Rgb'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Rgb'
      .setProperty("Text","RGB") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Rgb'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"red", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'red'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'red'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'red'
      .setProperty("Tooltip","RED") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'red'
      .setProperty("Foreground","red") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'red'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'red'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Green", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Green'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Green'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Green'
      .setProperty("Tooltip","GREEN") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Green'
      .setProperty("Foreground","green") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Green'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Green'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"Blue", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Blue'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'Blue'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'Blue'
      .setProperty("Tooltip","BLUE") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'Blue'
      .setProperty("Foreground","blue") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'Blue'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'Blue'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"scaled", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'scaled'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'scaled'
      .setProperty("Tooltip","scaled irradiance") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'scaled'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'scaled'
      .setProperty("Text","Scale?") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'scaled'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'panel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"MainPlot", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'MainPlot'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'MainPlot'
      .setProperty("Width","80%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'MainPlot'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'MainPlot'
      .setProperty("GuttersLineColor","white") // EJsS HtmlView.HtmlView Page: setting property 'GuttersLineColor' for element 'MainPlot'
      .setProperty("GuttersLineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'GuttersLineWidth' for element 'MainPlot'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'MainPlot'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'MainPlot'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'MainPlot'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'MainPlot'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'MainPlot'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'MainPlot'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'MainPlot'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'MainPlot'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'MainPlot'
      .setProperty("TitleY","y [mm]") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'MainPlot'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'MainPlot'
      .setProperty("TitleX","x [mm]") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'MainPlot'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'MainPlot'
      .setProperty("GuttersColor","white") // EJsS HtmlView.HtmlView Page: setting property 'GuttersColor' for element 'MainPlot'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"SideBar", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'SideBar'
      .setProperty("Height","88vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'SideBar'
      .setProperty("Width","20%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'SideBar'
      .setProperty("Gutters",[50,50,50,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'SideBar'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'SideBar'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'SideBar'
      .setProperty("TRMessage","Irradiance [mW/mm²]") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'SideBar'
      .setProperty("XTickStep",2) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'SideBar'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'SideBar'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'SideBar'
      .setProperty("Title","Irradiance [mW/mm²]") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'SideBar'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'SideBar'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'SideBar'
      .setProperty("YAutoTicks",true) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'SideBar'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'SideBar'
      .setProperty("TitleY","y [mm]") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'SideBar'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'SideBar'
      .setProperty("TitleX"," ") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'SideBar'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'SideBar'
      .setProperty("GuttersColor","white") // EJsS HtmlView.HtmlView Page: setting property 'GuttersColor' for element 'SideBar'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Laser Beam Profile EXERCISE 2: THE TEM00 MODE: A CONTOUR PLOT<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_19lasersandsemiconductors/PICUPbeamProfile/Beam_Profile_Exercise_2/Screen Shot 2018-06-26 at 3.34.26 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_19lasersandsemiconductors/PICUPbeamProfile/1authorlookangphoto.png" />
 Fremont Teng; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fremont Teng; Loo Kang Wee. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new Beam_Profile_Exercise_2_frem("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/06QuantumPhysics_19lasersandsemiconductors/PICUPbeamProfile/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
