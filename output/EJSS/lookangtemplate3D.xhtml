<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function lookangtemplate3D(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var mode; // EjsS Model.Variables.Var Table.mode
  var selected; // EjsS Model.Variables.Var Table.selected
  var pi; // EjsS Model.Variables.Var Table.pi
  var blue; // EjsS Model.Variables.Var Table.blue
  var green; // EjsS Model.Variables.Var Table.green
  var green2; // EjsS Model.Variables.Var Table.green2
  var yellow; // EjsS Model.Variables.Var Table.yellow
  var clr; // EjsS Model.Variables.Var Table.clr
  var clr2; // EjsS Model.Variables.Var Table.clr2
  var clabel; // EjsS Model.Variables.Var Table.clabel
  var npt; // EjsS Model.Variables.Var Table.npt

  var x; // EjsS Model.Variables.Var Table 2.x
  var y; // EjsS Model.Variables.Var Table 2.y
  var z; // EjsS Model.Variables.Var Table 2.z
  var vx; // EjsS Model.Variables.Var Table 2.vx
  var vxinit; // EjsS Model.Variables.Var Table 2.vxinit
  var vy; // EjsS Model.Variables.Var Table 2.vy
  var vyinit; // EjsS Model.Variables.Var Table 2.vyinit
  var vz; // EjsS Model.Variables.Var Table 2.vz
  var vzinit; // EjsS Model.Variables.Var Table 2.vzinit
  var m; // EjsS Model.Variables.Var Table 2.m
  var q; // EjsS Model.Variables.Var Table 2.q
  var Ex; // EjsS Model.Variables.Var Table 2.Ex
  var Ey; // EjsS Model.Variables.Var Table 2.Ey
  var Ez; // EjsS Model.Variables.Var Table 2.Ez
  var Bx; // EjsS Model.Variables.Var Table 2.Bx
  var By; // EjsS Model.Variables.Var Table 2.By
  var Bz; // EjsS Model.Variables.Var Table 2.Bz
  var windowMax; // EjsS Model.Variables.Var Table 2.windowMax
  var range; // EjsS Model.Variables.Var Table 2.range
  var xmin; // EjsS Model.Variables.Var Table 2.xmin
  var xmax; // EjsS Model.Variables.Var Table 2.xmax
  var ymin; // EjsS Model.Variables.Var Table 2.ymin
  var ymax; // EjsS Model.Variables.Var Table 2.ymax
  var zmin; // EjsS Model.Variables.Var Table 2.zmin
  var zmax; // EjsS Model.Variables.Var Table 2.zmax
  var stroke; // EjsS Model.Variables.Var Table 2.stroke
  var helpLabel; // EjsS Model.Variables.Var Table 2.helpLabel
  var helpFlag; // EjsS Model.Variables.Var Table 2.helpFlag
  var showForce; // EjsS Model.Variables.Var Table 2.showForce
  var showForceB; // EjsS Model.Variables.Var Table 2.showForceB
  var showForceE; // EjsS Model.Variables.Var Table 2.showForceE
  var t; // EjsS Model.Variables.Var Table 2.t
  var dt; // EjsS Model.Variables.Var Table 2.dt
  var t0; // EjsS Model.Variables.Var Table 2.t0
  var xf; // EjsS Model.Variables.Var Table 2.xf
  var yf; // EjsS Model.Variables.Var Table 2.yf
  var zf; // EjsS Model.Variables.Var Table 2.zf

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      mode : mode,
      selected : selected,
      pi : pi,
      blue : blue,
      green : green,
      green2 : green2,
      yellow : yellow,
      clr : clr,
      clr2 : clr2,
      clabel : clabel,
      npt : npt,
      x : x,
      y : y,
      z : z,
      vx : vx,
      vxinit : vxinit,
      vy : vy,
      vyinit : vyinit,
      vz : vz,
      vzinit : vzinit,
      m : m,
      q : q,
      Ex : Ex,
      Ey : Ey,
      Ez : Ez,
      Bx : Bx,
      By : By,
      Bz : Bz,
      windowMax : windowMax,
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      zmin : zmin,
      zmax : zmax,
      stroke : stroke,
      helpLabel : helpLabel,
      helpFlag : helpFlag,
      showForce : showForce,
      showForceB : showForceB,
      showForceE : showForceE,
      t : t,
      dt : dt,
      t0 : t0,
      xf : xf,
      yf : yf,
      zf : zf
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.mode != "undefined") mode = json.mode;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.green2 != "undefined") green2 = json.green2;
    if(typeof json.yellow != "undefined") yellow = json.yellow;
    if(typeof json.clr != "undefined") clr = json.clr;
    if(typeof json.clr2 != "undefined") clr2 = json.clr2;
    if(typeof json.clabel != "undefined") clabel = json.clabel;
    if(typeof json.npt != "undefined") npt = json.npt;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.z != "undefined") z = json.z;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vxinit != "undefined") vxinit = json.vxinit;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.vyinit != "undefined") vyinit = json.vyinit;
    if(typeof json.vz != "undefined") vz = json.vz;
    if(typeof json.vzinit != "undefined") vzinit = json.vzinit;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.Ex != "undefined") Ex = json.Ex;
    if(typeof json.Ey != "undefined") Ey = json.Ey;
    if(typeof json.Ez != "undefined") Ez = json.Ez;
    if(typeof json.Bx != "undefined") Bx = json.Bx;
    if(typeof json.By != "undefined") By = json.By;
    if(typeof json.Bz != "undefined") Bz = json.Bz;
    if(typeof json.windowMax != "undefined") windowMax = json.windowMax;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.zmin != "undefined") zmin = json.zmin;
    if(typeof json.zmax != "undefined") zmax = json.zmax;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.helpLabel != "undefined") helpLabel = json.helpLabel;
    if(typeof json.helpFlag != "undefined") helpFlag = json.helpFlag;
    if(typeof json.showForce != "undefined") showForce = json.showForce;
    if(typeof json.showForceB != "undefined") showForceB = json.showForceB;
    if(typeof json.showForceE != "undefined") showForceE = json.showForceE;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.t0 != "undefined") t0 = json.t0;
    if(typeof json.xf != "undefined") xf = json.xf;
    if(typeof json.yf != "undefined") yf = json.yf;
    if(typeof json.zf != "undefined") zf = json.zf;
  };

  _model._inputAndPublicParameters = ["mode",  "selected",  "pi",  "blue",  "green",  "green2",  "yellow",  "clr",  "clr2",  "clabel",  "npt",  "x",  "y",  "z",  "vx",  "vxinit",  "vy",  "vyinit",  "vz",  "vzinit",  "m",  "q",  "Ex",  "Ey",  "Ez",  "Bx",  "By",  "Bz",  "windowMax",  "range",  "xmin",  "xmax",  "ymin",  "ymax",  "zmin",  "zmax",  "stroke",  "helpLabel",  "helpFlag",  "showForce",  "showForceB",  "showForceE",  "t",  "dt",  "t0",  "xf",  "yf",  "zf"]; 

  _model._outputAndPublicParameters = ["mode",  "selected",  "pi",  "blue",  "green",  "green2",  "yellow",  "clr",  "clr2",  "clabel",  "npt",  "x",  "y",  "z",  "vx",  "vxinit",  "vy",  "vyinit",  "vz",  "vzinit",  "m",  "q",  "Ex",  "Ey",  "Ez",  "Bx",  "By",  "Bz",  "windowMax",  "range",  "xmin",  "xmax",  "ymin",  "ymax",  "zmin",  "zmax",  "stroke",  "helpLabel",  "helpFlag",  "showForce",  "showForceB",  "showForceE",  "t",  "dt",  "t0",  "xf",  "yf",  "zf"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
    mode = 0; // EjsS Model.Variables.Var Table.mode
    selected = new Array(1); // EjsS Model.Variables.Var Table.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Var Table.selected
        selected[_i0] = "M₁=2,M₂=1,circular_orbit";  // EjsS Model.Variables.Var Table.selected
      }
    }());
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    blue = "rgb(0,0,255)"; // EjsS Model.Variables.Var Table.blue
    green = "rgb(0,255,0)"; // EjsS Model.Variables.Var Table.green
    green2 = "rgb(0,255,0)"; // EjsS Model.Variables.Var Table.green2
    yellow = "rgb(255,255,0)"; // EjsS Model.Variables.Var Table.yellow
    clr = "yellow"; // EjsS Model.Variables.Var Table.clr
    clr2 = "yellow"; // EjsS Model.Variables.Var Table.clr2
    clabel = "current flow"; // EjsS Model.Variables.Var Table.clabel
    npt = 500; // EjsS Model.Variables.Var Table.npt
  });

  _model.addToReset(function() {
    x = 0.0; // EjsS Model.Variables.Var Table 2.x
    y = 0.0; // EjsS Model.Variables.Var Table 2.y
    z = 0.0; // EjsS Model.Variables.Var Table 2.z
    vx = 1.0; // EjsS Model.Variables.Var Table 2.vx
    vxinit = 1.0; // EjsS Model.Variables.Var Table 2.vxinit
    vy = 0.0; // EjsS Model.Variables.Var Table 2.vy
    vyinit = 0.0; // EjsS Model.Variables.Var Table 2.vyinit
    vz = 0.0; // EjsS Model.Variables.Var Table 2.vz
    vzinit = 0.0; // EjsS Model.Variables.Var Table 2.vzinit
    m = 1; // EjsS Model.Variables.Var Table 2.m
    q = 1; // EjsS Model.Variables.Var Table 2.q
    Ex = 0.0; // EjsS Model.Variables.Var Table 2.Ex
    Ey = 0.0; // EjsS Model.Variables.Var Table 2.Ey
    Ez = 0.0; // EjsS Model.Variables.Var Table 2.Ez
    Bx = 0.0; // EjsS Model.Variables.Var Table 2.Bx
    By = 0.0; // EjsS Model.Variables.Var Table 2.By
    Bz = 0.0; // EjsS Model.Variables.Var Table 2.Bz
    windowMax = 1.0; // EjsS Model.Variables.Var Table 2.windowMax
    range = windowMax; // EjsS Model.Variables.Var Table 2.range
    xmin = -range; // EjsS Model.Variables.Var Table 2.xmin
    xmax = range; // EjsS Model.Variables.Var Table 2.xmax
    ymin = -range; // EjsS Model.Variables.Var Table 2.ymin
    ymax = range; // EjsS Model.Variables.Var Table 2.ymax
    zmin = -range; // EjsS Model.Variables.Var Table 2.zmin
    zmax = range; // EjsS Model.Variables.Var Table 2.zmax
    stroke = 2; // EjsS Model.Variables.Var Table 2.stroke
    helpLabel = "Show Help"; // EjsS Model.Variables.Var Table 2.helpLabel
    helpFlag = false; // EjsS Model.Variables.Var Table 2.helpFlag
    showForce = true; // EjsS Model.Variables.Var Table 2.showForce
    showForceB = true; // EjsS Model.Variables.Var Table 2.showForceB
    showForceE = true; // EjsS Model.Variables.Var Table 2.showForceE
    t = 0.0; // EjsS Model.Variables.Var Table 2.t
    dt = 0.01; // EjsS Model.Variables.Var Table 2.dt
    t0 = t; // EjsS Model.Variables.Var Table 2.t0
    xf = xmin; // EjsS Model.Variables.Var Table 2.xf
    yf = ymin; // EjsS Model.Variables.Var Table 2.yf
    zf = zmin; // EjsS Model.Variables.Var Table 2.zf
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function changeOrientation() {  // > CustomCode.ChangeOrientation:1
  //if(typeof parent.device != 'undefined')  // > CustomCode.ChangeOrientation:2
  //  _view.mytext.setText(parent.device.platform)  // > CustomCode.ChangeOrientation:3
  //else  // > CustomCode.ChangeOrientation:4
  //  _view.mytext.setText("nada:");  // > CustomCode.ChangeOrientation:5
  var k =0.98;  // > CustomCode.ChangeOrientation:6
  var k1=0.9;  // > CustomCode.ChangeOrientation:7
  var kepub=0.9;  // > CustomCode.ChangeOrientation:8
  // check platform for Apps  // > CustomCode.ChangeOrientation:9
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.ChangeOrientation:10
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.ChangeOrientation:11
  // check platform for web browsers  // > CustomCode.ChangeOrientation:12
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.ChangeOrientation:13
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.ChangeOrientation:14
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.ChangeOrientation:15
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.ChangeOrientation:16
  //_view.mytext.setText(_view.mytext.getText() + "-orient:" + window.orientation + "-" + iOSapp + "-" + Androidapp);  // > CustomCode.ChangeOrientation:17
  switch (window.orientation) {  // > CustomCode.ChangeOrientation:18
    case 0:  // > CustomCode.ChangeOrientation:19
    case 180:  // > CustomCode.ChangeOrientation:20
      this.screenOrientation = 'portrait';  // > CustomCode.ChangeOrientation:21
      if (iOSapp){ // does not seems to work  // > CustomCode.ChangeOrientation:22
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.ChangeOrientation:23
        return window.screen.height*k1;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.ChangeOrientation:24
        // return window.screen.height;  // > CustomCode.ChangeOrientation:25
        //  return window.innerHeight;  // > CustomCode.ChangeOrientation:26
        // return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:27
      }  // > CustomCode.ChangeOrientation:28
      else if (_isEPub){ // does not seems to work  // > CustomCode.ChangeOrientation:29
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.ChangeOrientation:30
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.ChangeOrientation:31
        // return window.screen.height;  // > CustomCode.ChangeOrientation:32
        //  return window.innerHeight;  // > CustomCode.ChangeOrientation:33
        // return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:34
      }  // > CustomCode.ChangeOrientation:35
        // > CustomCode.ChangeOrientation:36
      else {  // > CustomCode.ChangeOrientation:37
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.ChangeOrientation:38
        return window.innerHeight*k;  // > CustomCode.ChangeOrientation:39
      }  // > CustomCode.ChangeOrientation:40
      break;  // > CustomCode.ChangeOrientation:41
    case 90:  // > CustomCode.ChangeOrientation:42
    case -90:  // > CustomCode.ChangeOrientation:43
      this.screenOrientation = 'landscape';  // > CustomCode.ChangeOrientation:44
      if (iOSapp){ // App  // > CustomCode.ChangeOrientation:45
        return window.screen.width*k1;    // > CustomCode.ChangeOrientation:46
        // return window.screen.height;  // > CustomCode.ChangeOrientation:47
        //  return window.innerHeight;  // > CustomCode.ChangeOrientation:48
        //  return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:49
      }  // > CustomCode.ChangeOrientation:50
      else if (_isEPub){ // does not seems to work  // > CustomCode.ChangeOrientation:51
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.ChangeOrientation:52
        return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.ChangeOrientation:53
        // return window.screen.height;  // > CustomCode.ChangeOrientation:54
        //  return window.innerHeight;  // > CustomCode.ChangeOrientation:55
        // return document.documentElement.clientHeight;  // > CustomCode.ChangeOrientation:56
      }  // > CustomCode.ChangeOrientation:57
      else { // browser Android and PC  // > CustomCode.ChangeOrientation:58
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.ChangeOrientation:59
        // alert("browser Android and PC");  // > CustomCode.ChangeOrientation:60
        return window.innerHeight*k;  // > CustomCode.ChangeOrientation:61
      }  // > CustomCode.ChangeOrientation:62
      break;  // > CustomCode.ChangeOrientation:63
    default:  // > CustomCode.ChangeOrientation:64
      this.screenOrientation = 'unknown';  // > CustomCode.ChangeOrientation:65
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.ChangeOrientation:66
      return window.innerHeight*k;  // > CustomCode.ChangeOrientation:67
  }  // > CustomCode.ChangeOrientation:68
  }  // > CustomCode.ChangeOrientation:69

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new lookangtemplate3D_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.comboBox.linkProperty("Options",  function() { return ["","3 sided pyramid","4 sided pyramid","5 sided pyramid","6 sided pyramid","7 sided pyramid","8 sided pyramid","","Question1","Question2","Question3","Question4","Question5","","PERSPECTIVE_OFF","PERSPECTIVE_ON","Front View","Side View","Top View"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if ( option=="Question1"){
    }
    else if ( option=="Question2"){
    }
    
    
  else if ( option=="PERSPECTIVE_OFF"){
  _view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  //_view.drawingPanel3D.setCamAltitude(14);
  //_view._reset();
  }
  //"PERSPECTIVE_ON"
  else if ( option=="PERSPECTIVE_ON"){
  _view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_ON");
  //_view.drawingPanel3D.setCamAltitude(14);
  //_view._reset();
  }
  else if ( option=="Front View"){
  _view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  //_view.drawingPanel3D.setCamLocX(3.66);
  //_view.drawingPanel3D.setCamLocY(0);
  //_view.drawingPanel3D.setCamLocY(0);
  _view.drawingPanel3D.setCamTilt(0);
  //_view.drawingPanel3D.setCamAltitude(0);
  //_view.drawingPanel3D.setCamAltitude(14);
  _view.drawingPanel3D.setCamAzimuth(0);
  }
  else if ( option=="Side View"){
  //_view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  //_view.drawingPanel3D.setCamLocX(3.66);
  //_view.drawingPanel3D.setCamLocY(0);
  //_view.drawingPanel3D.setCamLocY(0);
  _view.drawingPanel3D.setCamTilt(0);
  //_view.drawingPanel3D.setCamAltitude(0);
  //_view.drawingPanel3D.setCamAltitude(14);
  _view.drawingPanel3D.setCamAzimuth(90);
  //rotationangle=0; //release the rotationangle
  }
  else if ( option=="Top View"){
  //_view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  _view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  //_view.drawingPanel3D.setCamLocX(3.66);
  //_view.drawingPanel3D.setCamLocY(0);
  //_view.drawingPanel3D.setCamLocY(0);
  _view.drawingPanel3D.setCamTilt(0);
  //_view.drawingPanel3D.setCamAltitude(90);
  _view.drawingPanel3D.setCamAltitude(90);
  _view.drawingPanel3D.setCamAzimuth(0);
  //rotationangle=0; //release the rotationangle
  }
  //"PLANAR_XY","PLANAR_XZ","PLANAR_YZ"
  else if ( option=="PLANAR_XY"){
  _view.drawingPanel3D.setProperty("Projection","PERSPECTIVE_OFF");
  //_view.drawingPanel3D.serProperty("CameraY","5");
  //_view._reset();
  }
  else if ( option=="PLANAR_XZ"){
  _view.drawingPanel3D.setProperty("Projection","PLANAR_XZ");
  //_view._reset();
  }
  else if ( option=="PLANAR_YZ"){
  _view.drawingPanel3D.setProperty("Projection","PLANAR_YZ");
  //_view._reset();
  }
   
   if(parent.cordova) { // check it is running in Android
  //var option1 = _view.comboBox.getProperty("SelectedOptions");
         parent.TTS.speak(option, function () {
              // success
          }, function (reason) {
              // error
          });
      }
      else {
    var msg = new SpeechSynthesisUtterance(option);
  window.speechSynthesis.speak(msg);
  }

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.force22.linkProperty("Display",  function() { return _isMobile?"none":"inline-block"; } ); // HtmlView Page linking property 'Display' for element 'force22'
          _view.force2.linkProperty("Display",  function() { return _isMobile?"none":"inline-block"; } ); // HtmlView Page linking property 'Display' for element 'force2'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  //text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  //text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.resetButton3.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton3'
          _view.timeField.linkProperty("Value",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'Value' for element 'timeField'
          _view.drawingPanel3D.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumZ",  function() { return zmin; }, function(_v) { zmin = _v; } ); // HtmlView Page linking property 'MinimumZ' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumZ",  function() { return zmax; }, function(_v) { zmax = _v; } ); // HtmlView Page linking property 'MaximumZ' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel3D'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function lookangtemplate3D_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = lookangtemplate3D_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function lookangtemplate3D_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displayPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'displayPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label32", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label32'
      .setProperty("Background","rgba(0,192,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'label32'
      .setProperty("Text","L=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label32'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"force22", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'force22'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'force22'
      .setProperty("Background","rgba(0,192,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'force22'
      .setProperty("Disabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Disabled' for element 'force22'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'field'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field'
      .setProperty("Format","000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label3", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label3'
      .setProperty("Background","rgba(0,192,255,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'label3'
      .setProperty("Text","°") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label3'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"force2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'force2'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'force2'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'force2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'force2'
      .setProperty("Disabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Disabled' for element 'force2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"field4", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'field4'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'field4'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'field4'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'field4'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"N4", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'N4'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'N4'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'N4'
      .setProperty("Text","N") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'N4'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      .setProperty("Font","normal normal 3.6vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton3", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton3'
      .setProperty("CSS",{   "transform":"scaleY(-1)"   }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'resetButton3'
      .setProperty("Text","↩") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton3'
      .setProperty("Font","normal normal 3.5vw ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'resetButton3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"timeLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'timeLabel'
      .setProperty("Text","t=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'timeLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"timeField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'timeField'
      .setProperty("Width","50px") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'timeField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'timeField'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'timeField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"messagesLabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'messagesLabel'
      .setProperty("Text","s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'messagesLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view.displayPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      ;

    _view._addElement(EJSS_DRAWING3D.drawingPanel,"drawingPanel3D", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel3D'
      .setProperty("Height",window.innerHeight*0.85) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel3D'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel3D'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel3D'
      .setProperty("Projection","PERSPECTIVE_ON") // EJsS HtmlView.HtmlView Page: setting property 'Projection' for element 'drawingPanel3D'
      .setProperty("DecorationType","CENTERED_AXES") // EJsS HtmlView.HtmlView Page: setting property 'DecorationType' for element 'drawingPanel3D'
      ;

    _view._addElement(EJSS_DRAWING3D.box,"box3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'box3D'
      .setProperty("ClosedBottom",false) // EJsS HtmlView.HtmlView Page: setting property 'ClosedBottom' for element 'box3D'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'box3D'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'box3D'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'box3D'
      .setProperty("SizeZ",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'box3D'
      .setProperty("Z",0) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'box3D'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'box3D'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'box3D'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'box3D'
      ;

    _view._addElement(EJSS_DRAWING3D.segment,"segment3D", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'segment3D'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'segment3D'
      .setProperty("X",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'segment3D'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segment3D'
      .setProperty("Y",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'segment3D'
      .setProperty("Z",-0.5) // EJsS HtmlView.HtmlView Page: setting property 'Z' for element 'segment3D'
      .setProperty("SizeZ",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'segment3D'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'segment3D'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segment3D'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/01authorlookang50x50.png" />
 Fu-Kwun Hwang - Dept. of Physics, National Taiwan Normal Univ.; lookang (weelookang@gmail.com)
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Creative Commons Attribution.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new lookangtemplate3D("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
