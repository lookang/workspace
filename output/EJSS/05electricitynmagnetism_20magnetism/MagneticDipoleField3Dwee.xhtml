<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Magnetic Dipole Field Vector and Field Lines Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function MagneticDipoleField3Dwee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var pActive; // EjsS Model.Variables.Fieldline vars.pActive
  var nActive; // EjsS Model.Variables.Fieldline vars.nActive
  var handle; // EjsS Model.Variables.Fieldline vars.handle
  var xp; // EjsS Model.Variables.Fieldline vars.xp
  var yp; // EjsS Model.Variables.Fieldline vars.yp
  var zp; // EjsS Model.Variables.Fieldline vars.zp
  var tp; // EjsS Model.Variables.Fieldline vars.tp
  var xn; // EjsS Model.Variables.Fieldline vars.xn
  var yn; // EjsS Model.Variables.Fieldline vars.yn
  var zn; // EjsS Model.Variables.Fieldline vars.zn
  var tn; // EjsS Model.Variables.Fieldline vars.tn
  var tol; // EjsS Model.Variables.Fieldline vars.tol
  var ds; // EjsS Model.Variables.Fieldline vars.ds

  var showLines; // EjsS Model.Variables.Drawing vars.showLines
  var showField; // EjsS Model.Variables.Drawing vars.showField
  var magnetSize; // EjsS Model.Variables.Drawing vars.magnetSize
  var nb; // EjsS Model.Variables.Drawing vars.nb
  var xBField; // EjsS Model.Variables.Drawing vars.xBField
  var yBField; // EjsS Model.Variables.Drawing vars.yBField
  var zBField; // EjsS Model.Variables.Drawing vars.zBField
  var mColor; // EjsS Model.Variables.Drawing vars.mColor
  var range; // EjsS Model.Variables.Drawing vars.range
  var scale; // EjsS Model.Variables.Drawing vars.scale
  var moment; // EjsS Model.Variables.Drawing vars.moment
  var theta; // EjsS Model.Variables.Drawing vars.theta

  var handlesliderx; // EjsS Model.Variables.lookang.handlesliderx
  var handleslidery; // EjsS Model.Variables.lookang.handleslidery
  var handlesliderz; // EjsS Model.Variables.lookang.handlesliderz

  var color; // EjsS Model.Variables.vafrem.color
  var font; // EjsS Model.Variables.vafrem.font
  var box; // EjsS Model.Variables.vafrem.box
  var fontb; // EjsS Model.Variables.vafrem.fontb
  var mag; // EjsS Model.Variables.vafrem.mag
  var B; // EjsS Model.Variables.vafrem.B
  var xpos; // EjsS Model.Variables.vafrem.xpos
  var ypos; // EjsS Model.Variables.vafrem.ypos
  var vectorIndex; // EjsS Model.Variables.vafrem.vectorIndex
  var textpos; // EjsS Model.Variables.vafrem.textpos
  var xBFieldlookang; // EjsS Model.Variables.vafrem.xBFieldlookang
  var yBFieldlookang; // EjsS Model.Variables.vafrem.yBFieldlookang
  var zBFieldlookang; // EjsS Model.Variables.vafrem.zBFieldlookang

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];
  var _ODEi_evolution2;
  var userEvents2=[];

  _model.getOdes = function() { return [_ODEi_evolution1,_ODEi_evolution2]; };

  _model.removeEvents = function(){
    userEvents1=[];
    userEvents2=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      pActive : pActive,
      nActive : nActive,
      handle : handle,
      xp : xp,
      yp : yp,
      zp : zp,
      tp : tp,
      xn : xn,
      yn : yn,
      zn : zn,
      tn : tn,
      tol : tol,
      ds : ds,
      showLines : showLines,
      showField : showField,
      magnetSize : magnetSize,
      nb : nb,
      xBField : xBField,
      yBField : yBField,
      zBField : zBField,
      mColor : mColor,
      range : range,
      scale : scale,
      moment : moment,
      theta : theta,
      handlesliderx : handlesliderx,
      handleslidery : handleslidery,
      handlesliderz : handlesliderz,
      color : color,
      font : font,
      box : box,
      fontb : fontb,
      mag : mag,
      B : B,
      xpos : xpos,
      ypos : ypos,
      vectorIndex : vectorIndex,
      textpos : textpos,
      xBFieldlookang : xBFieldlookang,
      yBFieldlookang : yBFieldlookang,
      zBFieldlookang : zBFieldlookang
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.pActive != "undefined") pActive = json.pActive;
    if(typeof json.nActive != "undefined") nActive = json.nActive;
    if(typeof json.handle != "undefined") handle = json.handle;
    if(typeof json.xp != "undefined") xp = json.xp;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.zp != "undefined") zp = json.zp;
    if(typeof json.tp != "undefined") tp = json.tp;
    if(typeof json.xn != "undefined") xn = json.xn;
    if(typeof json.yn != "undefined") yn = json.yn;
    if(typeof json.zn != "undefined") zn = json.zn;
    if(typeof json.tn != "undefined") tn = json.tn;
    if(typeof json.tol != "undefined") tol = json.tol;
    if(typeof json.ds != "undefined") ds = json.ds;
    if(typeof json.showLines != "undefined") showLines = json.showLines;
    if(typeof json.showField != "undefined") showField = json.showField;
    if(typeof json.magnetSize != "undefined") magnetSize = json.magnetSize;
    if(typeof json.nb != "undefined") nb = json.nb;
    if(typeof json.xBField != "undefined") xBField = json.xBField;
    if(typeof json.yBField != "undefined") yBField = json.yBField;
    if(typeof json.zBField != "undefined") zBField = json.zBField;
    if(typeof json.mColor != "undefined") mColor = json.mColor;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.scale != "undefined") scale = json.scale;
    if(typeof json.moment != "undefined") moment = json.moment;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.handlesliderx != "undefined") handlesliderx = json.handlesliderx;
    if(typeof json.handleslidery != "undefined") handleslidery = json.handleslidery;
    if(typeof json.handlesliderz != "undefined") handlesliderz = json.handlesliderz;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.box != "undefined") box = json.box;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.mag != "undefined") mag = json.mag;
    if(typeof json.B != "undefined") B = json.B;
    if(typeof json.xpos != "undefined") xpos = json.xpos;
    if(typeof json.ypos != "undefined") ypos = json.ypos;
    if(typeof json.vectorIndex != "undefined") vectorIndex = json.vectorIndex;
    if(typeof json.textpos != "undefined") textpos = json.textpos;
    if(typeof json.xBFieldlookang != "undefined") xBFieldlookang = json.xBFieldlookang;
    if(typeof json.yBFieldlookang != "undefined") yBFieldlookang = json.yBFieldlookang;
    if(typeof json.zBFieldlookang != "undefined") zBFieldlookang = json.zBFieldlookang;
  };

  _model._inputAndPublicParameters = ["pActive",  "nActive",  "handle",  "xp",  "yp",  "zp",  "tp",  "xn",  "yn",  "zn",  "tn",  "tol",  "ds",  "showLines",  "showField",  "magnetSize",  "nb",  "xBField",  "yBField",  "zBField",  "mColor",  "range",  "scale",  "moment",  "theta",  "handlesliderx",  "handleslidery",  "handlesliderz",  "color",  "font",  "box",  "fontb",  "mag",  "B",  "xpos",  "ypos",  "vectorIndex",  "textpos",  "xBFieldlookang",  "yBFieldlookang",  "zBFieldlookang"]; 

  _model._outputAndPublicParameters = ["pActive",  "nActive",  "handle",  "xp",  "yp",  "zp",  "tp",  "xn",  "yn",  "zn",  "tn",  "tol",  "ds",  "showLines",  "showField",  "magnetSize",  "nb",  "xBField",  "yBField",  "zBField",  "mColor",  "range",  "scale",  "moment",  "theta",  "handlesliderx",  "handleslidery",  "handlesliderz",  "color",  "font",  "box",  "fontb",  "mag",  "B",  "xpos",  "ypos",  "vectorIndex",  "textpos",  "xBFieldlookang",  "yBFieldlookang",  "zBFieldlookang"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["layout"] = false;
    __pagesEnabled["PositiveFieldLine"] = true;
    __pagesEnabled["NegativeFieldLine"] = true;
    __pagesEnabled["On Error page"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    pActive = true; // EjsS Model.Variables.Fieldline vars.pActive
    nActive = true; // EjsS Model.Variables.Fieldline vars.nActive
    handle = [.5,0,0]; // EjsS Model.Variables.Fieldline vars.handle
    xp = .5; // EjsS Model.Variables.Fieldline vars.xp
    yp = 0; // EjsS Model.Variables.Fieldline vars.yp
    zp = 0; // EjsS Model.Variables.Fieldline vars.zp
    tp = 0; // EjsS Model.Variables.Fieldline vars.tp
    xn = .5; // EjsS Model.Variables.Fieldline vars.xn
    yn = 0; // EjsS Model.Variables.Fieldline vars.yn
    zn = 0; // EjsS Model.Variables.Fieldline vars.zn
    tn = 0; // EjsS Model.Variables.Fieldline vars.tn
    tol = 1.0E-7; // EjsS Model.Variables.Fieldline vars.tol
    ds = 0.01; // EjsS Model.Variables.Fieldline vars.ds
  });

  _model.addToReset(function() {
    showLines = true; // EjsS Model.Variables.Drawing vars.showLines
    showField = true; // EjsS Model.Variables.Drawing vars.showField
    magnetSize = 0.1; // EjsS Model.Variables.Drawing vars.magnetSize
    nb = 10; // EjsS Model.Variables.Drawing vars.nb
    xBField = new Array(1); // EjsS Model.Variables.Drawing vars.xBField
    (function () {
      var _i0,_i1,_i2;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Drawing vars.xBField
        xBField[_i0] = [];
        for (_i1=0; _i1<nb; _i1+=1) {  // EjsS Model.Variables.Drawing vars.xBField
          xBField[_i0][_i1] = [];
          for (_i2=0; _i2<nb; _i2+=1) {  // EjsS Model.Variables.Drawing vars.xBField
            xBField[_i0][_i1][_i2] = 0;  // EjsS Model.Variables.Drawing vars.xBField
          }
        }
      }
    }());
    yBField = new Array(1); // EjsS Model.Variables.Drawing vars.yBField
    (function () {
      var _i0,_i1,_i2;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Drawing vars.yBField
        yBField[_i0] = [];
        for (_i1=0; _i1<nb; _i1+=1) {  // EjsS Model.Variables.Drawing vars.yBField
          yBField[_i0][_i1] = [];
          for (_i2=0; _i2<nb; _i2+=1) {  // EjsS Model.Variables.Drawing vars.yBField
            yBField[_i0][_i1][_i2] = 0;  // EjsS Model.Variables.Drawing vars.yBField
          }
        }
      }
    }());
    zBField = new Array(1); // EjsS Model.Variables.Drawing vars.zBField
    (function () {
      var _i0,_i1,_i2;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Drawing vars.zBField
        zBField[_i0] = [];
        for (_i1=0; _i1<nb; _i1+=1) {  // EjsS Model.Variables.Drawing vars.zBField
          zBField[_i0][_i1] = [];
          for (_i2=0; _i2<nb; _i2+=1) {  // EjsS Model.Variables.Drawing vars.zBField
            zBField[_i0][_i1][_i2] = 0;  // EjsS Model.Variables.Drawing vars.zBField
          }
        }
      }
    }());
    mColor = new Array(1); // EjsS Model.Variables.Drawing vars.mColor
    (function () {
      var _i0,_i1,_i2;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.Drawing vars.mColor
        mColor[_i0] = [];
        for (_i1=0; _i1<nb; _i1+=1) {  // EjsS Model.Variables.Drawing vars.mColor
          mColor[_i0][_i1] = [];
          for (_i2=0; _i2<nb; _i2+=1) {  // EjsS Model.Variables.Drawing vars.mColor
            mColor[_i0][_i1][_i2] = 0;  // EjsS Model.Variables.Drawing vars.mColor
          }
        }
      }
    }());
    range = 2.0; // EjsS Model.Variables.Drawing vars.range
    scale = 1.4; // EjsS Model.Variables.Drawing vars.scale
    moment = 1.0; // EjsS Model.Variables.Drawing vars.moment
    theta = 0; // EjsS Model.Variables.Drawing vars.theta
  });

  _model.addToReset(function() {
    handlesliderx = 0.5; // EjsS Model.Variables.lookang.handlesliderx
    handleslidery = 0; // EjsS Model.Variables.lookang.handleslidery
    handlesliderz = 0; // EjsS Model.Variables.lookang.handlesliderz
  });

  _model.addToReset(function() {
    color = "pink"; // EjsS Model.Variables.vafrem.color
    font = "normal normal 2vw"; // EjsS Model.Variables.vafrem.font
    box = 1; // EjsS Model.Variables.vafrem.box
    fontb = "normal bold 2vw"; // EjsS Model.Variables.vafrem.fontb
    mag = 0; // EjsS Model.Variables.vafrem.mag
    B = 0; // EjsS Model.Variables.vafrem.B
    xpos = new Array(nb*nb); // EjsS Model.Variables.vafrem.xpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nb*nb; _i0+=1) {  // EjsS Model.Variables.vafrem.xpos
        xpos[_i0] = -scale*range/2;  // EjsS Model.Variables.vafrem.xpos
      }
    }());
    ypos = new Array(nb*nb); // EjsS Model.Variables.vafrem.ypos
    (function () {
      var _i0;
      for (_i0=0; _i0<nb*nb; _i0+=1) {  // EjsS Model.Variables.vafrem.ypos
        ypos[_i0] = -scale*range/2;  // EjsS Model.Variables.vafrem.ypos
      }
    }());
    vectorIndex = 0; // EjsS Model.Variables.vafrem.vectorIndex
    textpos = new Array(nb*nb); // EjsS Model.Variables.vafrem.textpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nb*nb; _i0+=1) {  // EjsS Model.Variables.vafrem.textpos
        textpos[_i0] = "";  // EjsS Model.Variables.vafrem.textpos
      }
    }());
    xBFieldlookang = new Array(nb*nb); // EjsS Model.Variables.vafrem.xBFieldlookang
    (function () {
      var _i0;
      for (_i0=0; _i0<nb*nb; _i0+=1) {  // EjsS Model.Variables.vafrem.xBFieldlookang
        xBFieldlookang[_i0] = 0;  // EjsS Model.Variables.vafrem.xBFieldlookang
      }
    }());
    yBFieldlookang = new Array(nb*nb); // EjsS Model.Variables.vafrem.yBFieldlookang
    (function () {
      var _i0;
      for (_i0=0; _i0<nb*nb; _i0+=1) {  // EjsS Model.Variables.vafrem.yBFieldlookang
        yBFieldlookang[_i0] = 0;  // EjsS Model.Variables.vafrem.yBFieldlookang
      }
    }());
    zBFieldlookang = new Array(nb*nb); // EjsS Model.Variables.vafrem.zBFieldlookang
    (function () {
      var _i0;
      for (_i0=0; _i0<nb*nb; _i0+=1) {  // EjsS Model.Variables.vafrem.zBFieldlookang
        zBFieldlookang[_i0] = 0;  // EjsS Model.Variables.vafrem.zBFieldlookang
      }
    }());
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
    _ODEi_evolution2 = _ODE_evolution2();
    _privateOdesList.push(_ODEi_evolution2);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(12);
    _model.setStepsPerDisplay(1);
  });

  function computeDipoleField (x, y, z) {  // > CustomCode.computeDipoleField:1
    var rsquared = (x*x+y*y+z*z);// radius squared  // > CustomCode.computeDipoleField:2
    var r=Math.sqrt(rsquared);   // radius  // > CustomCode.computeDipoleField:3
    if(r<magnetSize){return [0,0,0];}  // > CustomCode.computeDipoleField:4
    var pdotr=Math.sin(theta)*x/r+Math.cos(theta)*z/r;  // > CustomCode.computeDipoleField:5
    var r3=r*rsquared;           // radius cubed  // > CustomCode.computeDipoleField:6
    var Fx = (3*pdotr*x/r-Math.sin(theta))/r3;          // > CustomCode.computeDipoleField:7
  //  var Fx = 0.1;  // > CustomCode.computeDipoleField:8
  //    var Fy = 0.1;  // > CustomCode.computeDipoleField:9
    var Fy = 3*pdotr*y/r;  // > CustomCode.computeDipoleField:10
    var Fz = (3*pdotr*z/r-Math.cos(theta))/r3;   // > CustomCode.computeDipoleField:11
   // return [Fx,Fy,Fz];        // > CustomCode.computeDipoleField:12
    return [x,y,z];    // not sure why this work     // > CustomCode.computeDipoleField:13
  }  // > CustomCode.computeDipoleField:14

  function normalize(a){  // > CustomCode.normalize:1
    var n= Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);  // > CustomCode.normalize:2
    if(n==0)return 0;  // > CustomCode.normalize:3
    a[0]/=n;  // > CustomCode.normalize:4
    a[1]/=n;  // > CustomCode.normalize:5
    a[2]/=n;  // > CustomCode.normalize:6
    return n;  // > CustomCode.normalize:7
  }  // > CustomCode.normalize:8

  function calFieldVectors() {  // > CustomCode.calFieldVectors:1
    if(!showField)return;  // > CustomCode.calFieldVectors:2
    var delta=scale*range/(nb-1);  // > CustomCode.calFieldVectors:3
    var min=-range/2;  // > CustomCode.calFieldVectors:4
    var x=scale*min;  // > CustomCode.calFieldVectors:5
    for(var i=0;i<nb;i++) {  // > CustomCode.calFieldVectors:6
     // x[i+nb*j]=scale*min;  // > CustomCode.calFieldVectors:7
      var y=scale*min;  // > CustomCode.calFieldVectors:8
     // ypos[i+nb*j] = y;  // store position y  // > CustomCode.calFieldVectors:9
      for(var j=0;j<nb;j++) {  // > CustomCode.calFieldVectors:10
        xpos[i+nb*j]=scale*min+delta*i;  // > CustomCode.calFieldVectors:11
        ypos[i+nb*j]=scale*min+delta*j;  // > CustomCode.calFieldVectors:12
        textpos[i+nb*j]=i+nb*j+"";  // > CustomCode.calFieldVectors:13
        var B=computeDipoleField( x, y, 0);  // > CustomCode.calFieldVectors:14
        var mag=normalize(B);  // > CustomCode.calFieldVectors:15
        mColor[0][i][j]=normalize(B);   // normalize B but save magnitude  // > CustomCode.calFieldVectors:16
                                                 // > CustomCode.calFieldVectors:17
        var vSize=Math.log10(1+0.1*mag); // lookang for bigger vector size  // > CustomCode.calFieldVectors:18
        //double vSize=Math.log10(1.05+0.005*mag);  // log-scale for length  // > CustomCode.calFieldVectors:19
        vSize=moment*Math.min(vSize,1*delta)*20;  // lookang for uniform length  // > CustomCode.calFieldVectors:20
        //vSize=moment*Math.min(vSize,2*delta);  // limit size  // > CustomCode.calFieldVectors:21
        if (mag==0) { // lookang for http://www.cafeaulait.org/course/week2/43.html  // > CustomCode.calFieldVectors:22
          xBField[0][i][j]=0;//reaaranged frem  // > CustomCode.calFieldVectors:23
         xBFieldlookang[i+nb*j] = 0;  // > CustomCode.calFieldVectors:24
         }  // > CustomCode.calFieldVectors:25
          else {  // > CustomCode.calFieldVectors:26
            xBField[0][i][j]=vSize*B[0];//reaaranged frem  // > CustomCode.calFieldVectors:27
            xBFieldlookang[i+nb*j] = vSize*B[0];  // > CustomCode.calFieldVectors:28
            }  // > CustomCode.calFieldVectors:29
        //xBField[i][j][0]=mag==0?0:vSize*B[0];  // > CustomCode.calFieldVectors:30
        if (mag==0) {  // > CustomCode.calFieldVectors:31
          yBField[0][i][j]=0;//reaaranged frem  // > CustomCode.calFieldVectors:32
          yBFieldlookang[i+nb*j] =0;  // > CustomCode.calFieldVectors:33
          }  // > CustomCode.calFieldVectors:34
          else {  // > CustomCode.calFieldVectors:35
            yBField[0][i][j]=vSize*B[1];//reaaranged frem  // > CustomCode.calFieldVectors:36
            yBFieldlookang[i+nb*j] =vSize*B[1];  // > CustomCode.calFieldVectors:37
            }  // > CustomCode.calFieldVectors:38
              // > CustomCode.calFieldVectors:39
       // yBField[i][j][0]=mag==0?0:vSize*B[1];  // > CustomCode.calFieldVectors:40
          if (mag==0) {  // > CustomCode.calFieldVectors:41
          zBField[0][i][j]=0;//reaaranged frem  // > CustomCode.calFieldVectors:42
          zBFieldlookang[i+nb*j] = 0;  // > CustomCode.calFieldVectors:43
          }  // > CustomCode.calFieldVectors:44
          else {  // > CustomCode.calFieldVectors:45
            zBField[0][i][j]=vSize*B[2];//reaaranged frem  // > CustomCode.calFieldVectors:46
             zBFieldlookang[i+nb*j] = vSize*B[2];  // > CustomCode.calFieldVectors:47
            }  // > CustomCode.calFieldVectors:48
        //zBField[i][j][0]=mag==0?0:vSize*B[2];  // > CustomCode.calFieldVectors:49
        y+=delta;  // > CustomCode.calFieldVectors:50
      //  ypos[i+nb*j] = y;// store new positon  // > CustomCode.calFieldVectors:51
      }  // > CustomCode.calFieldVectors:52
      x+=delta;   // > CustomCode.calFieldVectors:53
     // xpos[i+nb*j] = x;  // > CustomCode.calFieldVectors:54
    }  // > CustomCode.calFieldVectors:55
  }  // > CustomCode.calFieldVectors:56

  function computeFieldline(play) {  // > CustomCode.computeFieldline:1
    _pause();  // > CustomCode.computeFieldline:2
    tp=tn=0;  // > CustomCode.computeFieldline:3
    xp=handle[0];  // > CustomCode.computeFieldline:4
    yp=handle[1];  // > CustomCode.computeFieldline:5
    zp=handle[2];  // > CustomCode.computeFieldline:6
    xn=handle[0];  // > CustomCode.computeFieldline:7
    yn=handle[1];  // > CustomCode.computeFieldline:8
    zn=handle[2];  // > CustomCode.computeFieldline:9
    _view.positiveFieldlineTrail.moveToPoint(handle[0],handle[1],handle[2]);  // > CustomCode.computeFieldline:10
    _view.negativeFieldlineTrail.moveToPoint(handle[0],handle[1],handle[2]);  // > CustomCode.computeFieldline:11
    pActive=nActive=true;  // > CustomCode.computeFieldline:12
    if(play)_play();  // > CustomCode.computeFieldline:13
  }  // > CustomCode.computeFieldline:14

  function changeN () { // for vectors lookang  // > CustomCode.Change N:1
    xBField =  [1][nb][nb]; //reaaranged frem  // > CustomCode.Change N:2
    yBField =  [1][nb][nb];  // > CustomCode.Change N:3
    zBField =  [1][nb][nb];  // > CustomCode.Change N:4
    mColor =  [1][nb][nb];  // > CustomCode.Change N:5
  // var xBField =  new Array xBField[1][nb][nb]; //reaaranged frem  // > CustomCode.Change N:6
   // var yBField =  [1][nb][nb];  // > CustomCode.Change N:7
   // var zBField =  [1][nb][nb];  // > CustomCode.Change N:8
   // var mColor =  [1][nb][nb];  // > CustomCode.Change N:9
    calFieldVectors();  // > CustomCode.Change N:10
  }  // > CustomCode.Change N:11

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    calFieldVectors();  // > Initialization.Init Page:1
    if(!showLines && !showField){  // select something at start  // > Initialization.Init Page:2
      showLines=true;  // > Initialization.Init Page:3
      computeFieldline(true);  // > Initialization.Init Page:4
    }  // > Initialization.Init Page:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["layout"]) return;
     var delta=scale*range/(nb-1);  // > Initialization.layout:1
     var min=-range/2;  // > Initialization.layout:2
    for(var i=0;i<nb;i++) {  // > Initialization.layout:3
     // var y=scale*min;  // > Initialization.layout:4
    for(var j=0;j<nb;j++) {  // > Initialization.layout:5
      vectorIndex = i+nb*j;  // > Initialization.layout:6
    x[vectorIndex]=scale*min-2*delta;  // > Initialization.layout:7
    y[vectorIndex]=scale*min-2*delta;  // > Initialization.layout:8
    }  // > Initialization.layout:9
    }  // > Initialization.layout:10
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["PositiveFieldLine"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["NegativeFieldLine"]) return;
    _ODEi_evolution2.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    if(!pActive && !nActive){  // stop computation if field lines are not active  // > FixedRelations.FixRel Page:1
      _pause();  // > FixedRelations.FixRel Page:2
      computeFieldline(false);  // > FixedRelations.FixRel Page:3
    }  // > FixedRelations.FixRel Page:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="PositiveFieldLine") return _ODEi_evolution1;
    if (_odeName=="NegativeFieldLine") return _ODEi_evolution2;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["xp","yp","zp","tp"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(ds);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(tol,tol);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=xp) __mustReinitialize = true;
        __state[__cIn++] = xp;
        if (__state[__cIn]!=yp) __mustReinitialize = true;
        __state[__cIn++] = yp;
        if (__state[__cIn]!=zp) __mustReinitialize = true;
        __state[__cIn++] = zp;
        if (__state[__cIn]!=tp) __mustReinitialize = true;
        __state[__cIn++] = tp;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (ds===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(ds);
      __eventSolver.setInternalStepSize(ds);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(tol,tol);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xp = __state[__cOut++];
        yp = __state[__cOut++];
        zp = __state[__cOut++];
        tp = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xp = _aState[__cOut++];
        var yp = _aState[__cOut++];
        var zp = _aState[__cOut++];
        var tp = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        var rsquared = (xp*xp+yp*yp+zp*zp);// radius squared  // > Preliminary code for ODE.PositiveFieldLine:1
        var r=Math.sqrt(rsquared);  // > Preliminary code for ODE.PositiveFieldLine:2
        if(r<magnetSize/2 || r>5*range){  // > Preliminary code for ODE.PositiveFieldLine:3
          pActive=false;  // > Preliminary code for ODE.PositiveFieldLine:4
          return;  // > Preliminary code for ODE.PositiveFieldLine:5
        }  // > Preliminary code for ODE.PositiveFieldLine:6
        var r3=r*rsquared;                // radius cubed  // > Preliminary code for ODE.PositiveFieldLine:7
        var r5 = r3*rsquared;             // radius^5  // > Preliminary code for ODE.PositiveFieldLine:8
        var Bx = 3*xp*zp/r5;              //3 x z /r^5  // > Preliminary code for ODE.PositiveFieldLine:9
        var By = 3*yp*zp/r5;              //3 y z /r^5  // > Preliminary code for ODE.PositiveFieldLine:10
        var Bz = 3*zp*zp/r5-1/r3;         //3 z z /r^5 -1/r^3  // > Preliminary code for ODE.PositiveFieldLine:11
        var n= Math.sqrt(Bx*Bx+By*By+Bz*Bz);  // > Preliminary code for ODE.PositiveFieldLine:12
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = Bx/n; // Rate for ODE: PositiveFieldLine:xp
        _aRate[__cRate++] = By/n; // Rate for ODE: PositiveFieldLine:yp
        _aRate[__cRate++] = Bz/n; // Rate for ODE: PositiveFieldLine:zp
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xp = _aState[__cOut++];
        var yp = _aState[__cOut++];
        var zp = _aState[__cOut++];
        var tp = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xp = __state[__cOut++];
        yp = __state[__cOut++];
        zp = __state[__cOut++];
        tp = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xp;
        __state[__cIn++] = yp;
        __state[__cIn++] = zp;
        __state[__cIn++] = tp;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_xp(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_yp(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_zp(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _ODE_evolution2() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["xn","yn","zn","tn"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(ds);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents2){__eventSolver.addEvent(userEvents2[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(tol,tol);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=xn) __mustReinitialize = true;
        __state[__cIn++] = xn;
        if (__state[__cIn]!=yn) __mustReinitialize = true;
        __state[__cIn++] = yn;
        if (__state[__cIn]!=zn) __mustReinitialize = true;
        __state[__cIn++] = zn;
        if (__state[__cIn]!=tn) __mustReinitialize = true;
        __state[__cIn++] = tn;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
      var _errorCode = __eventSolver.getErrorCode();
      if (__pagesEnabled["On Error page"]) {
        { // For any error: 
          xn=yn=zn=0;  // > ErrorHandler for NegativeFieldLine : On Error page:1
          nActive=false;  // > ErrorHandler for NegativeFieldLine : On Error page:2
        }
      }
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (ds===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(ds);
      __eventSolver.setInternalStepSize(ds);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(tol,tol);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xn = __state[__cOut++];
        yn = __state[__cOut++];
        zn = __state[__cOut++];
        tn = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xn = _aState[__cOut++];
        var yn = _aState[__cOut++];
        var zn = _aState[__cOut++];
        var tn = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        var rsquared = (xn*xn+yn*yn+zn*zn);// radius squared  // > Preliminary code for ODE.NegativeFieldLine:1
        var r=Math.sqrt(rsquared);  // > Preliminary code for ODE.NegativeFieldLine:2
        if(r<magnetSize/2 || r>5*range){  // > Preliminary code for ODE.NegativeFieldLine:3
          nActive=false;  // > Preliminary code for ODE.NegativeFieldLine:4
          return;  // > Preliminary code for ODE.NegativeFieldLine:5
        }  // > Preliminary code for ODE.NegativeFieldLine:6
        var r3=r*rsquared;                // radius cubed  // > Preliminary code for ODE.NegativeFieldLine:7
        var r5 = r3*rsquared;             // radius^5  // > Preliminary code for ODE.NegativeFieldLine:8
        var Bx = 3*xn*zn/r5;              //3 x z /r^5  // > Preliminary code for ODE.NegativeFieldLine:9
        var By = 3*yn*zn/r5;              //3 y z /r^5  // > Preliminary code for ODE.NegativeFieldLine:10
        var Bz = 3*zn*zn/r5-1/r3;         //3 z z /r^5 -1/r^3  // > Preliminary code for ODE.NegativeFieldLine:11
        var n= Math.sqrt(Bx*Bx+By*By+Bz*Bz);  // > Preliminary code for ODE.NegativeFieldLine:12
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = -Bx/n; // Rate for ODE: NegativeFieldLine:xn
        _aRate[__cRate++] = -By/n; // Rate for ODE: NegativeFieldLine:yn
        _aRate[__cRate++] = -Bz/n; // Rate for ODE: NegativeFieldLine:zn
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xn = _aState[__cOut++];
        var yn = _aState[__cOut++];
        var zn = _aState[__cOut++];
        var tn = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xn = __state[__cOut++];
        yn = __state[__cOut++];
        zn = __state[__cOut++];
        tn = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xn;
        __state[__cIn++] = yn;
        __state[__cIn++] = zn;
        __state[__cIn++] = tn;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents2.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_xn(__time) {
    var __index = 0;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_yn(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_zn(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new MagneticDipoleField3Dwee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.executionPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'executionPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["Field Vector","Field Lines"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["Field Vector","|m|","Field Lines"]
  if (option == "Field Vector"){box =1;color="pink";showField=true;
  calFieldVectors();
  }
  else if (option == "|m|"){box = 2;color="red";}
  else if (option == "Field Lines"){box = 3;color="magenta";showField=false;}

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.FieldVectorCheck.linkProperty("Checked",  function() { return showField; }, function(_v) { showField = _v; } ); // HtmlView Page linking property 'Checked' for element 'FieldVectorCheck'
          _view.FieldVectorCheck.setAction("OnCheckOn", function(_data,_info) {
  calFieldVectors();

}); // HtmlView Page setting action 'OnCheckOn' for element 'FieldVectorCheck'
          _view.sliderNb_couldnotgetittowork.linkProperty("Value",  function() { return nb; }, function(_v) { nb = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderNb_couldnotgetittowork'
          _view.sliderNb_couldnotgetittowork.setAction("OnChange", function(_data,_info) {
  //nb=Math.max(nb,2);
  //nb=Math.min(nb,10);
  changeN();

}); // HtmlView Page setting action 'OnChange' for element 'sliderNb_couldnotgetittowork'
          _view.xlabel2.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'xlabel2'
          _view.dipolefield.linkProperty("Value",  function() { return moment; }, function(_v) { moment = _v; } ); // HtmlView Page linking property 'Value' for element 'dipolefield'
          _view.dipolefield.linkProperty("Foreground",  function() { return color; }, function(_v) { color = _v; } ); // HtmlView Page linking property 'Foreground' for element 'dipolefield'
          _view.dipolefield.setAction("OnChange", function(_data,_info) {
  moment=Math.max(moment,0.01);
  moment=Math.min(moment,10);
  calFieldVectors();

}); // HtmlView Page setting action 'OnChange' for element 'dipolefield'
          _view.dipolefield.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'dipolefield'
          _view.dipolefield.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'dipolefield'
          _view.showLinesCheck.linkProperty("Checked",  function() { return showLines; }, function(_v) { showLines = _v; } ); // HtmlView Page linking property 'Checked' for element 'showLinesCheck'
          _view.showLinesCheck.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'showLinesCheck'
          _view.showLinesCheck.linkProperty("Display",  function() { return (box==3)?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'showLinesCheck'
          _view.xlabel.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'xlabel'
          _view.sliderx.setAction("OnRelease", function(_data,_info) {
  computeFieldline(true);

}); // HtmlView Page setting action 'OnRelease' for element 'sliderx'
          _view.sliderx.linkProperty("Minimum",  function() { return -range/2; } ); // HtmlView Page linking property 'Minimum' for element 'sliderx'
          _view.sliderx.linkProperty("Maximum",  function() { return range/2; } ); // HtmlView Page linking property 'Maximum' for element 'sliderx'
          _view.sliderx.linkProperty("Value",  function() { return handlesliderx; }, function(_v) { handlesliderx = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderx'
          _view.sliderx.setAction("OnChange", function(_data,_info) {
  handle[0]=handlesliderx;

}); // HtmlView Page setting action 'OnChange' for element 'sliderx'
          _view.sliderx.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'sliderx'
          _view.ylabel.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'ylabel'
          _view.slidery.setAction("OnRelease", function(_data,_info) {
  computeFieldline(true);

}); // HtmlView Page setting action 'OnRelease' for element 'slidery'
          _view.slidery.linkProperty("Minimum",  function() { return -range/2; } ); // HtmlView Page linking property 'Minimum' for element 'slidery'
          _view.slidery.linkProperty("Maximum",  function() { return range/2; } ); // HtmlView Page linking property 'Maximum' for element 'slidery'
          _view.slidery.linkProperty("Value",  function() { return handleslidery; }, function(_v) { handleslidery = _v; } ); // HtmlView Page linking property 'Value' for element 'slidery'
          _view.slidery.setAction("OnChange", function(_data,_info) {
  handle[1]=handleslidery;

}); // HtmlView Page setting action 'OnChange' for element 'slidery'
          _view.slidery.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'slidery'
          _view.zlabel.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'zlabel'
          _view.sliderz.setAction("OnRelease", function(_data,_info) {
  computeFieldline(true);

}); // HtmlView Page setting action 'OnRelease' for element 'sliderz'
          _view.sliderz.linkProperty("Minimum",  function() { return -range/2; } ); // HtmlView Page linking property 'Minimum' for element 'sliderz'
          _view.sliderz.linkProperty("Maximum",  function() { return range/2; } ); // HtmlView Page linking property 'Maximum' for element 'sliderz'
          _view.sliderz.linkProperty("Value",  function() { return handlesliderz; }, function(_v) { handlesliderz = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderz'
          _view.sliderz.setAction("OnChange", function(_data,_info) {
  handle[2]=handlesliderz;

}); // HtmlView Page setting action 'OnChange' for element 'sliderz'
          _view.sliderz.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'sliderz'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Display",  function() { return (box==3)?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'playPauseButton'
          _view.erasebutton.setAction("OnRelease", function(_data,_info) {
  _view.positiveFieldlineTrail.clear();
  _view.negativeFieldlineTrail.clear();

}); // HtmlView Page setting action 'OnRelease' for element 'erasebutton'
          _view.erasebutton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'erasebutton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.drawingPanel3D.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumZ",  function() { return range/2; } ); // HtmlView Page linking property 'MaximumZ' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumY",  function() { return range/2; } ); // HtmlView Page linking property 'MaximumY' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MaximumX",  function() { return range/2; } ); // HtmlView Page linking property 'MaximumX' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumX",  function() { return -range/2; } ); // HtmlView Page linking property 'MinimumX' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumY",  function() { return -range/2; } ); // HtmlView Page linking property 'MinimumY' for element 'drawingPanel3D'
          _view.drawingPanel3D.linkProperty("MinimumZ",  function() { return -range/2; } ); // HtmlView Page linking property 'MinimumZ' for element 'drawingPanel3D'
          _view.northPole.linkProperty("SizeX",  function() { return magnetSize; }, function(_v) { magnetSize = _v; } ); // HtmlView Page linking property 'SizeX' for element 'northPole'
          _view.northPole.linkProperty("Z",  function() { return -magnetSize/2; } ); // HtmlView Page linking property 'Z' for element 'northPole'
          _view.northPole.linkProperty("SizeZ",  function() { return magnetSize; }, function(_v) { magnetSize = _v; } ); // HtmlView Page linking property 'SizeZ' for element 'northPole'
          _view.northPole.linkProperty("SizeY",  function() { return magnetSize; }, function(_v) { magnetSize = _v; } ); // HtmlView Page linking property 'SizeY' for element 'northPole'
          _view.southPole.linkProperty("SizeX",  function() { return magnetSize; }, function(_v) { magnetSize = _v; } ); // HtmlView Page linking property 'SizeX' for element 'southPole'
          _view.southPole.linkProperty("Z",  function() { return magnetSize/2; } ); // HtmlView Page linking property 'Z' for element 'southPole'
          _view.southPole.linkProperty("SizeZ",  function() { return magnetSize; }, function(_v) { magnetSize = _v; } ); // HtmlView Page linking property 'SizeZ' for element 'southPole'
          _view.southPole.linkProperty("SizeY",  function() { return magnetSize; }, function(_v) { magnetSize = _v; } ); // HtmlView Page linking property 'SizeY' for element 'southPole'
          _view.fieldlinesgroup.linkProperty("Visibility",  function() { return showLines; }, function(_v) { showLines = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fieldlinesgroup'
          _view.fieldlinehandlemarker.setAction("OnRelease", function(_data,_info) {
  computeFieldline(true);

}); // HtmlView Page setting action 'OnRelease' for element 'fieldlinehandlemarker'
          _view.fieldlinehandlemarker.linkProperty("Position",  function() { return handle; }, function(_v) { handle = _v; } ); // HtmlView Page linking property 'Position' for element 'fieldlinehandlemarker'
          _view.fieldlinehandlemarker.linkProperty("X",  function() { return handle[0]; } ); // HtmlView Page linking property 'X' for element 'fieldlinehandlemarker'
          _view.fieldlinehandlemarker.linkProperty("Y",  function() { return handle[1]; } ); // HtmlView Page linking property 'Y' for element 'fieldlinehandlemarker'
          _view.fieldlinehandlemarker.linkProperty("Z",  function() { return handle[2]; } ); // HtmlView Page linking property 'Z' for element 'fieldlinehandlemarker'
          _view.positiveFieldlineTrail.linkProperty("Active",  function() { return pActive; }, function(_v) { pActive = _v; } ); // HtmlView Page linking property 'Active' for element 'positiveFieldlineTrail'
          _view.positiveFieldlineTrail.linkProperty("InputZ",  function() { return zp; }, function(_v) { zp = _v; } ); // HtmlView Page linking property 'InputZ' for element 'positiveFieldlineTrail'
          _view.positiveFieldlineTrail.linkProperty("InputX",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'InputX' for element 'positiveFieldlineTrail'
          _view.positiveFieldlineTrail.linkProperty("InputY",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'InputY' for element 'positiveFieldlineTrail'
          _view.negativeFieldlineTrail.linkProperty("Active",  function() { return nActive; }, function(_v) { nActive = _v; } ); // HtmlView Page linking property 'Active' for element 'negativeFieldlineTrail'
          _view.negativeFieldlineTrail.linkProperty("InputZ",  function() { return zn; }, function(_v) { zn = _v; } ); // HtmlView Page linking property 'InputZ' for element 'negativeFieldlineTrail'
          _view.negativeFieldlineTrail.linkProperty("InputX",  function() { return xn; }, function(_v) { xn = _v; } ); // HtmlView Page linking property 'InputX' for element 'negativeFieldlineTrail'
          _view.negativeFieldlineTrail.linkProperty("InputY",  function() { return yn; }, function(_v) { yn = _v; } ); // HtmlView Page linking property 'InputY' for element 'negativeFieldlineTrail'
          _view.fieldgroup.linkProperty("Visibility",  function() { return showField; }, function(_v) { showField = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fieldgroup'
          _view.textSet3D.linkProperty("NumberOfElements",  function() { return nb*nb; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet3D'
          _view.textSet3D.linkProperty("X",  function() { return xBFieldlookang; }, function(_v) { xBFieldlookang = _v; } ); // HtmlView Page linking property 'X' for element 'textSet3D'
          _view.textSet3D.linkProperty("Y",  function() { return yBFieldlookang; }, function(_v) { yBFieldlookang = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet3D'
          _view.textSet3D.linkProperty("Text",  function() { return textpos; }, function(_v) { textpos = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet3D'
          _view.textSet3D.linkProperty("Z",  function() { return zBFieldlookang/moment; } ); // HtmlView Page linking property 'Z' for element 'textSet3D'
          _view.momentscaling.linkProperty("SizeX",  function() { return 1/moment; } ); // HtmlView Page linking property 'SizeX' for element 'momentscaling'
          _view.momentscaling.linkProperty("SizeY",  function() { return 1/moment; } ); // HtmlView Page linking property 'SizeY' for element 'momentscaling'
          _view.arrowSet3D12unifiedlookang.linkProperty("X",  function() { return xBFieldlookang; }, function(_v) { xBFieldlookang = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D12unifiedlookang'
          _view.arrowSet3D12unifiedlookang.linkProperty("Y",  function() { return yBFieldlookang; }, function(_v) { yBFieldlookang = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D12unifiedlookang'
          _view.arrowSet3D12unifiedlookang.linkProperty("SizeZ",  function() { return moment/10; } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D12unifiedlookang'
          _view.arrowSet3D12unifiedlookang.linkProperty("Z",  function() { return zBFieldlookang; }, function(_v) { zBFieldlookang = _v; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D12unifiedlookang'
          _view.sphereSet3D.linkProperty("X",  function() { return xBFieldlookang; }, function(_v) { xBFieldlookang = _v; } ); // HtmlView Page linking property 'X' for element 'sphereSet3D'
          _view.sphereSet3D.linkProperty("Y",  function() { return yBFieldlookang; }, function(_v) { yBFieldlookang = _v; } ); // HtmlView Page linking property 'Y' for element 'sphereSet3D'
          _view.sphereSet3D.linkProperty("Z",  function() { return zBFieldlookang; }, function(_v) { zBFieldlookang = _v; } ); // HtmlView Page linking property 'Z' for element 'sphereSet3D'
          _view.arrow3D.linkProperty("X",  function() { return 10*xBField[0][1]; } ); // HtmlView Page linking property 'X' for element 'arrow3D'
          _view.arrow3D.linkProperty("Y",  function() { return 10*yBField[0][1]; } ); // HtmlView Page linking property 'Y' for element 'arrow3D'
          _view.arrow3D.linkProperty("Z",  function() { return zBField[0][1]*10; } ); // HtmlView Page linking property 'Z' for element 'arrow3D'
          _view.arrowSet3D.linkProperty("X",  function() { return xBField[0][0]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D'
          _view.arrowSet3D.linkProperty("Y",  function() { return yBField[0][0]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D'
          _view.arrowSet3D.linkProperty("Z",  function() { return zBField[0][0]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D'
          _view.arrowSet3D.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D'
          _view.arrowSet3D2.linkProperty("X",  function() { return xBField[0][1]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D2'
          _view.arrowSet3D2.linkProperty("Y",  function() { return yBField[0][1]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D2'
          _view.arrowSet3D2.linkProperty("Z",  function() { return zBField[0][1]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D2'
          _view.arrowSet3D2.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D2'
          _view.arrowSet3D3.linkProperty("X",  function() { return xBField[0][2]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D3'
          _view.arrowSet3D3.linkProperty("Y",  function() { return yBField[0][2]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D3'
          _view.arrowSet3D3.linkProperty("Z",  function() { return zBField[0][2]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D3'
          _view.arrowSet3D3.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D3'
          _view.arrowSet3D4.linkProperty("X",  function() { return xBField[0][3]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D4'
          _view.arrowSet3D4.linkProperty("Y",  function() { return yBField[0][3]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D4'
          _view.arrowSet3D4.linkProperty("Z",  function() { return zBField[0][3]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D4'
          _view.arrowSet3D4.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D4'
          _view.arrowSet3D5.linkProperty("X",  function() { return xBField[0][4]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D5'
          _view.arrowSet3D5.linkProperty("Y",  function() { return yBField[0][4]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D5'
          _view.arrowSet3D5.linkProperty("Z",  function() { return zBField[0][4]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D5'
          _view.arrowSet3D5.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D5'
          _view.arrowSet3D52.linkProperty("X",  function() { return xBField[0][5]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D52'
          _view.arrowSet3D52.linkProperty("Y",  function() { return yBField[0][5]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D52'
          _view.arrowSet3D52.linkProperty("Z",  function() { return zBField[0][5]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D52'
          _view.arrowSet3D52.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D52'
          _view.arrowSet3D6.linkProperty("X",  function() { return xBField[0][6]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D6'
          _view.arrowSet3D6.linkProperty("Y",  function() { return yBField[0][6]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D6'
          _view.arrowSet3D6.linkProperty("Z",  function() { return zBField[0][6]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D6'
          _view.arrowSet3D6.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D6'
          _view.arrowSet3D7.linkProperty("X",  function() { return xBField[0][7]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D7'
          _view.arrowSet3D7.linkProperty("Y",  function() { return yBField[0][7]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D7'
          _view.arrowSet3D7.linkProperty("Z",  function() { return zBField[0][7]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D7'
          _view.arrowSet3D7.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D7'
          _view.arrowSet3D8.linkProperty("X",  function() { return xBField[0][8]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D8'
          _view.arrowSet3D8.linkProperty("Y",  function() { return yBField[0][8]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D8'
          _view.arrowSet3D8.linkProperty("Z",  function() { return zBField[0][8]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D8'
          _view.arrowSet3D8.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D8'
          _view.arrowSet3D9.linkProperty("X",  function() { return xBField[0][9]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D9'
          _view.arrowSet3D9.linkProperty("Y",  function() { return yBField[0][9]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D9'
          _view.arrowSet3D9.linkProperty("Z",  function() { return zBField[0][9]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D9'
          _view.arrowSet3D9.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D9'
          _view.arrowSet3D10.linkProperty("X",  function() { return xBField[0][10]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D10'
          _view.arrowSet3D10.linkProperty("Y",  function() { return yBField[0][10]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D10'
          _view.arrowSet3D10.linkProperty("Z",  function() { return zBField[0][10]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D10'
          _view.arrowSet3D10.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D10'
          _view.arrowSet3D11.linkProperty("X",  function() { return xBField[0][11]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D11'
          _view.arrowSet3D11.linkProperty("Y",  function() { return yBField[0][11]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D11'
          _view.arrowSet3D11.linkProperty("Z",  function() { return zBField[0][11]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D11'
          _view.arrowSet3D11.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D11'
          _view.arrowset12.linkProperty("X",  function() { return xBField[0][12]; } ); // HtmlView Page linking property 'X' for element 'arrowset12'
          _view.arrowset12.linkProperty("Y",  function() { return yBField[0][12]; } ); // HtmlView Page linking property 'Y' for element 'arrowset12'
          _view.arrowset12.linkProperty("Z",  function() { return zBField[0][12]; } ); // HtmlView Page linking property 'Z' for element 'arrowset12'
          _view.arrowset12.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowset12'
          _view.arrowSet3D13.linkProperty("X",  function() { return xBField[0][13]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D13'
          _view.arrowSet3D13.linkProperty("Y",  function() { return yBField[0][13]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D13'
          _view.arrowSet3D13.linkProperty("Z",  function() { return zBField[0][13]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D13'
          _view.arrowSet3D13.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D13'
          _view.arrowSet3D14.linkProperty("X",  function() { return xBField[0][14]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D14'
          _view.arrowSet3D14.linkProperty("Y",  function() { return yBField[0][14]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D14'
          _view.arrowSet3D14.linkProperty("Z",  function() { return zBField[0][14]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D14'
          _view.arrowSet3D14.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D14'
          _view.arrowSet3D15.linkProperty("X",  function() { return xBField[0][15]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D15'
          _view.arrowSet3D15.linkProperty("Y",  function() { return yBField[0][15]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D15'
          _view.arrowSet3D15.linkProperty("Z",  function() { return zBField[0][15]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D15'
          _view.arrowSet3D15.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D15'
          _view.arrowSet3D16.linkProperty("X",  function() { return xBField[0][16]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D16'
          _view.arrowSet3D16.linkProperty("Y",  function() { return yBField[0][16]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D16'
          _view.arrowSet3D16.linkProperty("Z",  function() { return zBField[0][16]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D16'
          _view.arrowSet3D16.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D16'
          _view.arrowSet3D17.linkProperty("X",  function() { return xBField[0][17]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D17'
          _view.arrowSet3D17.linkProperty("Y",  function() { return yBField[0][17]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D17'
          _view.arrowSet3D17.linkProperty("Z",  function() { return zBField[0][17]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D17'
          _view.arrowSet3D17.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D17'
          _view.arrowSet3D18.linkProperty("X",  function() { return xBField[0][18]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D18'
          _view.arrowSet3D18.linkProperty("Y",  function() { return yBField[0][18]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D18'
          _view.arrowSet3D18.linkProperty("Z",  function() { return zBField[0][18]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D18'
          _view.arrowSet3D18.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D18'
          _view.arrowSet3D19.linkProperty("X",  function() { return xBField[0][19]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D19'
          _view.arrowSet3D19.linkProperty("Y",  function() { return yBField[0][19]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D19'
          _view.arrowSet3D19.linkProperty("Z",  function() { return zBField[0][19]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D19'
          _view.arrowSet3D19.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D19'
          _view.arrowSet3D20.linkProperty("X",  function() { return xBField[0][20]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D20'
          _view.arrowSet3D20.linkProperty("Y",  function() { return yBField[0][20]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D20'
          _view.arrowSet3D20.linkProperty("Z",  function() { return zBField[0][20]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D20'
          _view.arrowSet3D20.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D20'
          _view.arrowSet3D112.linkProperty("X",  function() { return xBField[0][21]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D112'
          _view.arrowSet3D112.linkProperty("Y",  function() { return yBField[0][21]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D112'
          _view.arrowSet3D112.linkProperty("Z",  function() { return zBField[0][21]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D112'
          _view.arrowSet3D112.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D112'
          _view.arrowset122.linkProperty("X",  function() { return xBField[0][22]; } ); // HtmlView Page linking property 'X' for element 'arrowset122'
          _view.arrowset122.linkProperty("Y",  function() { return yBField[0][22]; } ); // HtmlView Page linking property 'Y' for element 'arrowset122'
          _view.arrowset122.linkProperty("Z",  function() { return zBField[0][22]; } ); // HtmlView Page linking property 'Z' for element 'arrowset122'
          _view.arrowset122.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowset122'
          _view.arrowSet3D132.linkProperty("X",  function() { return xBField[0][23]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D132'
          _view.arrowSet3D132.linkProperty("Y",  function() { return yBField[0][23]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D132'
          _view.arrowSet3D132.linkProperty("Z",  function() { return zBField[0][23]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D132'
          _view.arrowSet3D132.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D132'
          _view.arrowSet3D142.linkProperty("X",  function() { return xBField[0][24]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D142'
          _view.arrowSet3D142.linkProperty("Y",  function() { return yBField[0][24]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D142'
          _view.arrowSet3D142.linkProperty("Z",  function() { return zBField[0][24]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D142'
          _view.arrowSet3D142.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D142'
          _view.arrowSet3D152.linkProperty("X",  function() { return xBField[0][25]; } ); // HtmlView Page linking property 'X' for element 'arrowSet3D152'
          _view.arrowSet3D152.linkProperty("Y",  function() { return yBField[0][25]; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3D152'
          _view.arrowSet3D152.linkProperty("Z",  function() { return zBField[0][25]; } ); // HtmlView Page linking property 'Z' for element 'arrowSet3D152'
          _view.arrowSet3D152.linkProperty("SizeZ",  function() { return 2*Math.log10(1+0.1*normalize(computeDipoleField( scale*-range/2, scale*-range/2, 0))); } ); // HtmlView Page linking property 'SizeZ' for element 'arrowSet3D152'
          _view.plane3D.linkProperty("SizeX",  function() { return range*scale; } ); // HtmlView Page linking property 'SizeX' for element 'plane3D'
          _view.plane3D.linkProperty("SizeY",  function() { return range*scale; } ); // HtmlView Page linking property 'SizeY' for element 'plane3D'
          _view.rotationY3D.linkProperty("Angle",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Angle' for element 'rotationY3D'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(12);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function MagneticDipoleField3Dwee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = MagneticDipoleField3Dwee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./MagneticDipoleField3Dwee_Intro_1.html');

  return _view;
} // end of main function

function MagneticDipoleField3Dwee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"FieldVectorCheck", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'FieldVectorCheck'
      .setProperty("Tooltip","Show the field vectors") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'FieldVectorCheck'
      .setProperty("Text","Field Vector") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'FieldVectorCheck'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'FieldVectorCheck'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"labelN", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelN'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'labelN'
      .setProperty("Text","N = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'labelN'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'labelN'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderNb_couldnotgetittowork", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderNb_couldnotgetittowork'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderNb_couldnotgetittowork'
      .setProperty("Minimum",2) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'sliderNb_couldnotgetittowork'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'sliderNb_couldnotgetittowork'
      .setProperty("Format","0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderNb_couldnotgetittowork'
      .setProperty("Tooltip","B field grid size") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'sliderNb_couldnotgetittowork'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'sliderNb_couldnotgetittowork'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"xlabel2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xlabel2'
      .setProperty("Text","|m| = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'xlabel2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"dipolefield", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dipolefield'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'dipolefield'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'dipolefield'
      .setProperty("Tooltip","dipole moment") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'dipolefield'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"showLinesCheck", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'showLinesCheck'
      .setProperty("Tooltip","Show the field lines") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'showLinesCheck'
      .setProperty("Foreground","white") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'showLinesCheck'
      .setProperty("Text","") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showLinesCheck'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"xlabel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xlabel'
      .setProperty("Text","x = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'xlabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderx", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderx'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderx'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderx'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"ylabel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ylabel'
      .setProperty("Text","y = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ylabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slidery", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'slidery'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slidery'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'slidery'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"zlabel", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'zlabel'
      .setProperty("Text","z = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'zlabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderz", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderz'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderz'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderz'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"erasebutton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'erasebutton'
      .setProperty("Text","⌫") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'erasebutton'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'erasebutton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING3D.drawingPanel,"drawingPanel3D", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel3D'
      .setProperty("Height",window.innerHeight*0.8) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel3D'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel3D'
      .setProperty("CameraAltitude",0.8716205573315761) // EJsS HtmlView.HtmlView Page: setting property 'CameraAltitude' for element 'drawingPanel3D'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel3D'
      .setProperty("Projection","PERSPECTIVE_ON") // EJsS HtmlView.HtmlView Page: setting property 'Projection' for element 'drawingPanel3D'
      .setProperty("CameraAzimuth",1.0200000000000002) // EJsS HtmlView.HtmlView Page: setting property 'CameraAzimuth' for element 'drawingPanel3D'
      .setProperty("DecorationType","CENTERED_AXES") // EJsS HtmlView.HtmlView Page: setting property 'DecorationType' for element 'drawingPanel3D'
      ;

    _view._addElement(EJSS_DRAWING3D.cylinder,"northPole", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'northPole'
      .setProperty("FillColor","red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'northPole'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'northPole'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'northPole'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'northPole'
      ;

    _view._addElement(EJSS_DRAWING3D.cylinder,"southPole", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'southPole'
      .setProperty("FillColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'southPole'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'southPole'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'southPole'
      .setProperty("DrawLines",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'southPole'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"fieldlinesgroup", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldlinesgroup'
      ;

    _view._addElement(EJSS_DRAWING3D.sphere,"fieldlinehandlemarker", _view.fieldlinesgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldlinehandlemarker'
      .setProperty("Radius",0.05) // EJsS HtmlView.HtmlView Page: setting property 'Radius' for element 'fieldlinehandlemarker'
      .setProperty("FillColor","ORANGE") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'fieldlinehandlemarker'
      .setProperty("MovesGroup",true) // EJsS HtmlView.HtmlView Page: setting property 'MovesGroup' for element 'fieldlinehandlemarker'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'fieldlinehandlemarker'
      ;

    _view._addElement(EJSS_DRAWING3D.trail,"positiveFieldlineTrail", _view.fieldlinesgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'positiveFieldlineTrail'
      .setProperty("LineColor","magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'positiveFieldlineTrail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'positiveFieldlineTrail'
      ;

    _view._addElement(EJSS_DRAWING3D.trail,"negativeFieldlineTrail", _view.fieldlinesgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'negativeFieldlineTrail'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'negativeFieldlineTrail'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'negativeFieldlineTrail'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"fieldgroup", _view.drawingPanel3D) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldgroup'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"vectorlookang", _view.fieldgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'vectorlookang'
      ;

    _view._addElement(EJSS_DRAWING3D.textSet,"textSet3D", _view.vectorlookang) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet3D'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"momentscaling", _view.vectorlookang) // EJsS HtmlView.HtmlView Page: declaration of element 'momentscaling'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D12unifiedlookang", _view.momentscaling) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D12unifiedlookang'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D12unifiedlookang'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D12unifiedlookang'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D12unifiedlookang'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D12unifiedlookang'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D12unifiedlookang'
      ;

    _view._addElement(EJSS_DRAWING3D.sphereSet,"sphereSet3D", _view.momentscaling) // EJsS HtmlView.HtmlView Page: declaration of element 'sphereSet3D'
      .setProperty("NumberOfElements",100) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'sphereSet3D'
      .setProperty("Radius",0.02) // EJsS HtmlView.HtmlView Page: setting property 'Radius' for element 'sphereSet3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrow,"arrow3D", _view.fieldgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow3D'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrow3D'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow3D'
      .setProperty("SizeZ",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeZ' for element 'arrow3D'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow3D'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrow3D'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"vectorfrem", _view.fieldgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'vectorfrem'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'vectorfrem'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D2", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D2'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D3", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D3'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D3'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D3'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D3'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D4", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D4'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D4'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D4'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D4'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D4'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D4'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D5", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D5'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D5'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D5'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D5'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D5'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D5'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D52", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D52'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D52'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D52'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D52'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D52'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D52'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D6", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D6'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D6'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D6'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D6'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D6'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D6'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D7", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D7'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D7'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D7'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D7'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D7'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D7'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D8", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D8'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D8'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D8'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D8'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D8'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D8'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D9", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D9'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D9'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D9'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D9'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D9'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D9'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D10", _view.vectorfrem) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D10'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D10'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D10'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D10'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D10'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D10'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"vectorfrem2", _view.fieldgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'vectorfrem2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'vectorfrem2'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D11", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D11'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D11'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D11'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D11'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D11'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D11'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowset12", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowset12'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowset12'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowset12'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowset12'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowset12'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowset12'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D13", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D13'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D13'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D13'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D13'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D13'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D13'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D14", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D14'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D14'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D14'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D14'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D14'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D14'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D15", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D15'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D15'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D15'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D15'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D15'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D15'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D16", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D16'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D16'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D16'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D16'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D16'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D16'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D17", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D17'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D17'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D17'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D17'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D17'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D17'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D18", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D18'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D18'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D18'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D18'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D18'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D18'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D19", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D19'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D19'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D19'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D19'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D19'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D19'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D20", _view.vectorfrem2) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D20'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D20'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D20'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D20'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D20'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D20'
      ;

    _view._addElement(EJSS_DRAWING3D.group,"vectorfrem22", _view.fieldgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'vectorfrem22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'vectorfrem22'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D112", _view.vectorfrem22) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D112'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D112'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D112'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D112'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D112'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D112'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowset122", _view.vectorfrem22) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowset122'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowset122'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowset122'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowset122'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowset122'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowset122'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D132", _view.vectorfrem22) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D132'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D132'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D132'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D132'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D132'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D132'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D142", _view.vectorfrem22) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D142'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D142'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D142'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D142'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D142'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D142'
      ;

    _view._addElement(EJSS_DRAWING3D.arrowSet,"arrowSet3D152", _view.vectorfrem22) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3D152'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet3D152'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3D152'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet3D152'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3D152'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet3D152'
      ;

    _view._addElement(EJSS_DRAWING3D.plane,"plane3D", _view.fieldgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'plane3D'
      .setProperty("FillColor","rgb(255,175,175)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'plane3D'
      .setProperty("Transparency",64) // EJsS HtmlView.HtmlView Page: setting property 'Transparency' for element 'plane3D'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'plane3D'
      ;

    _view._addElement(EJSS_DRAWING3D.rotationY,"rotationY3D", _view.fieldgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'rotationY3D'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Magnetic Dipole Field Vector and Field Lines Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/MagneticDipoleField3Dwee/Screen Shot 2018-04-11 at 1.42.45 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/01authorwc_icon.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/01authorlookang50x50.png" />
 Wolfgang Christian; Wee Loo Kang; Fremont Teng
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Wolfgang Christian; Wee Loo Kang; Fremont Teng.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new MagneticDipoleField3Dwee("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
