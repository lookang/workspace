<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Bar Magnet Field Line Simulator</title>
<style type="text/css">
.metadata { display: none; }
</style>    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function magnetbar(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var range; // EjsS Model.Variables.coordinate.range
  var xmin; // EjsS Model.Variables.coordinate.xmin
  var xmax; // EjsS Model.Variables.coordinate.xmax
  var ymin; // EjsS Model.Variables.coordinate.ymin
  var ymax; // EjsS Model.Variables.coordinate.ymax
  var t; // EjsS Model.Variables.coordinate.t
  var dt; // EjsS Model.Variables.coordinate.dt
  var size; // EjsS Model.Variables.coordinate.size
  var size2; // EjsS Model.Variables.coordinate.size2
  var stroke; // EjsS Model.Variables.coordinate.stroke
  var w; // EjsS Model.Variables.coordinate.w
  var pi; // EjsS Model.Variables.coordinate.pi
  var nt; // EjsS Model.Variables.coordinate.nt

  var tset; // EjsS Model.Variables.SetFieldlines.tset
  var tset2; // EjsS Model.Variables.SetFieldlines.tset2
  var dtset; // EjsS Model.Variables.SetFieldlines.dtset
  var dtset2; // EjsS Model.Variables.SetFieldlines.dtset2
  var ns; // EjsS Model.Variables.SetFieldlines.ns
  var n; // EjsS Model.Variables.SetFieldlines.n
  var xpset; // EjsS Model.Variables.SetFieldlines.xpset
  var ypset; // EjsS Model.Variables.SetFieldlines.ypset
  var xpsets; // EjsS Model.Variables.SetFieldlines.xpsets
  var ypsets; // EjsS Model.Variables.SetFieldlines.ypsets
  var fxset; // EjsS Model.Variables.SetFieldlines.fxset
  var fyset; // EjsS Model.Variables.SetFieldlines.fyset
  var cstset; // EjsS Model.Variables.SetFieldlines.cstset
  var xp2set; // EjsS Model.Variables.SetFieldlines.xp2set
  var yp2set; // EjsS Model.Variables.SetFieldlines.yp2set
  var fx2set; // EjsS Model.Variables.SetFieldlines.fx2set
  var fy2set; // EjsS Model.Variables.SetFieldlines.fy2set
  var cst2set; // EjsS Model.Variables.SetFieldlines.cst2set
  var angle; // EjsS Model.Variables.SetFieldlines.angle
  var angle2; // EjsS Model.Variables.SetFieldlines.angle2
  var xpsetfreeze; // EjsS Model.Variables.SetFieldlines.xpsetfreeze
  var ypsetfreeze; // EjsS Model.Variables.SetFieldlines.ypsetfreeze
  var anglefreeze; // EjsS Model.Variables.SetFieldlines.anglefreeze
  var xp2setfreeze; // EjsS Model.Variables.SetFieldlines.xp2setfreeze
  var yp2setfreeze; // EjsS Model.Variables.SetFieldlines.yp2setfreeze
  var angle2freeze; // EjsS Model.Variables.SetFieldlines.angle2freeze

  var tsetinit; // EjsS Model.Variables.SetFieldlines 2notused.tsetinit
  var nsinit; // EjsS Model.Variables.SetFieldlines 2notused.nsinit
  var ninit; // EjsS Model.Variables.SetFieldlines 2notused.ninit
  var totalpoints; // EjsS Model.Variables.SetFieldlines 2notused.totalpoints
  var xpsetinit; // EjsS Model.Variables.SetFieldlines 2notused.xpsetinit
  var ypsetinit; // EjsS Model.Variables.SetFieldlines 2notused.ypsetinit
  var fxsetinit; // EjsS Model.Variables.SetFieldlines 2notused.fxsetinit
  var fysetinit; // EjsS Model.Variables.SetFieldlines 2notused.fysetinit
  var cstsetinit; // EjsS Model.Variables.SetFieldlines 2notused.cstsetinit
  var xp2setinit; // EjsS Model.Variables.SetFieldlines 2notused.xp2setinit
  var yp2setinit; // EjsS Model.Variables.SetFieldlines 2notused.yp2setinit
  var fx2setinit; // EjsS Model.Variables.SetFieldlines 2notused.fx2setinit
  var fy2setinit; // EjsS Model.Variables.SetFieldlines 2notused.fy2setinit
  var cst2setinit; // EjsS Model.Variables.SetFieldlines 2notused.cst2setinit

  var x; // EjsS Model.Variables.basic.x
  var y; // EjsS Model.Variables.basic.y
  var y2; // EjsS Model.Variables.basic.y2
  var xs; // EjsS Model.Variables.basic.xs
  var ys; // EjsS Model.Variables.basic.ys
  var y2s; // EjsS Model.Variables.basic.y2s
  var cta; // EjsS Model.Variables.basic.cta
  var cta2; // EjsS Model.Variables.basic.cta2
  var xp; // EjsS Model.Variables.basic.xp
  var yp; // EjsS Model.Variables.basic.yp
  var xp2; // EjsS Model.Variables.basic.xp2
  var yp2; // EjsS Model.Variables.basic.yp2
  var xp0; // EjsS Model.Variables.basic.xp0
  var yp0; // EjsS Model.Variables.basic.yp0
  var xp20; // EjsS Model.Variables.basic.xp20
  var yp20; // EjsS Model.Variables.basic.yp20
  var theta; // EjsS Model.Variables.basic.theta
  var theta2; // EjsS Model.Variables.basic.theta2
  var fx; // EjsS Model.Variables.basic.fx
  var fy; // EjsS Model.Variables.basic.fy
  var fx2; // EjsS Model.Variables.basic.fx2
  var fy2; // EjsS Model.Variables.basic.fy2
  var I; // EjsS Model.Variables.basic.I
  var cst; // EjsS Model.Variables.basic.cst
  var cst2; // EjsS Model.Variables.basic.cst2

  var nc; // EjsS Model.Variables.coil.nc
  var np; // EjsS Model.Variables.coil.np
  var xc; // EjsS Model.Variables.coil.xc
  var yc; // EjsS Model.Variables.coil.yc
  var zc; // EjsS Model.Variables.coil.zc
  var cs; // EjsS Model.Variables.coil.cs
  var sc; // EjsS Model.Variables.coil.sc
  var dc; // EjsS Model.Variables.coil.dc
  var dx; // EjsS Model.Variables.coil.dx

  var l_play; // EjsS Model.Variables.language.l_play
  var l_pause; // EjsS Model.Variables.language.l_pause
  var l_reset; // EjsS Model.Variables.language.l_reset
  var l_init; // EjsS Model.Variables.language.l_init
  var label; // EjsS Model.Variables.language.label
  var l_step; // EjsS Model.Variables.language.l_step

  var xm; // EjsS Model.Variables.varfrem.xm
  var ym; // EjsS Model.Variables.varfrem.ym
  var npt; // EjsS Model.Variables.varfrem.npt
  var clear; // EjsS Model.Variables.varfrem.clear
  var fontb; // EjsS Model.Variables.varfrem.fontb
  var theta; // EjsS Model.Variables.varfrem.theta

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];
  var _ODEi_evolution2;
  var userEvents2=[];
  var _ODEi_evolution3;
  var userEvents3=[];

  _model.getOdes = function() { return [_ODEi_evolution1,_ODEi_evolution2,_ODEi_evolution3]; };

  _model.removeEvents = function(){
    userEvents1=[];
    userEvents2=[];
    userEvents3=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      t : t,
      dt : dt,
      size : size,
      size2 : size2,
      stroke : stroke,
      w : w,
      pi : pi,
      nt : nt,
      tset : tset,
      tset2 : tset2,
      dtset : dtset,
      dtset2 : dtset2,
      ns : ns,
      n : n,
      xpset : xpset,
      ypset : ypset,
      xpsets : xpsets,
      ypsets : ypsets,
      fxset : fxset,
      fyset : fyset,
      cstset : cstset,
      xp2set : xp2set,
      yp2set : yp2set,
      fx2set : fx2set,
      fy2set : fy2set,
      cst2set : cst2set,
      angle : angle,
      angle2 : angle2,
      xpsetfreeze : xpsetfreeze,
      ypsetfreeze : ypsetfreeze,
      anglefreeze : anglefreeze,
      xp2setfreeze : xp2setfreeze,
      yp2setfreeze : yp2setfreeze,
      angle2freeze : angle2freeze,
      tsetinit : tsetinit,
      nsinit : nsinit,
      ninit : ninit,
      totalpoints : totalpoints,
      xpsetinit : xpsetinit,
      ypsetinit : ypsetinit,
      fxsetinit : fxsetinit,
      fysetinit : fysetinit,
      cstsetinit : cstsetinit,
      xp2setinit : xp2setinit,
      yp2setinit : yp2setinit,
      fx2setinit : fx2setinit,
      fy2setinit : fy2setinit,
      cst2setinit : cst2setinit,
      x : x,
      y : y,
      y2 : y2,
      xs : xs,
      ys : ys,
      y2s : y2s,
      cta : cta,
      cta2 : cta2,
      xp : xp,
      yp : yp,
      xp2 : xp2,
      yp2 : yp2,
      xp0 : xp0,
      yp0 : yp0,
      xp20 : xp20,
      yp20 : yp20,
      theta : theta,
      theta2 : theta2,
      fx : fx,
      fy : fy,
      fx2 : fx2,
      fy2 : fy2,
      I : I,
      cst : cst,
      cst2 : cst2,
      nc : nc,
      np : np,
      xc : xc,
      yc : yc,
      zc : zc,
      cs : cs,
      sc : sc,
      dc : dc,
      dx : dx,
      l_play : l_play,
      l_pause : l_pause,
      l_reset : l_reset,
      l_init : l_init,
      label : label,
      l_step : l_step,
      xm : xm,
      ym : ym,
      npt : npt,
      clear : clear,
      fontb : fontb,
      theta : theta
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      t : t,
      dt : dt,
      size : size,
      size2 : size2,
      stroke : stroke,
      w : w,
      pi : pi,
      nt : nt,
      tset : tset,
      tset2 : tset2,
      dtset : dtset,
      dtset2 : dtset2,
      ns : ns,
      n : n,
      xpset : xpset,
      ypset : ypset,
      xpsets : xpsets,
      ypsets : ypsets,
      fxset : fxset,
      fyset : fyset,
      cstset : cstset,
      xp2set : xp2set,
      yp2set : yp2set,
      fx2set : fx2set,
      fy2set : fy2set,
      cst2set : cst2set,
      angle : angle,
      angle2 : angle2,
      xpsetfreeze : xpsetfreeze,
      ypsetfreeze : ypsetfreeze,
      anglefreeze : anglefreeze,
      xp2setfreeze : xp2setfreeze,
      yp2setfreeze : yp2setfreeze,
      angle2freeze : angle2freeze,
      tsetinit : tsetinit,
      nsinit : nsinit,
      ninit : ninit,
      totalpoints : totalpoints,
      xpsetinit : xpsetinit,
      ypsetinit : ypsetinit,
      fxsetinit : fxsetinit,
      fysetinit : fysetinit,
      cstsetinit : cstsetinit,
      xp2setinit : xp2setinit,
      yp2setinit : yp2setinit,
      fx2setinit : fx2setinit,
      fy2setinit : fy2setinit,
      cst2setinit : cst2setinit,
      x : x,
      y : y,
      y2 : y2,
      xs : xs,
      ys : ys,
      y2s : y2s,
      cta : cta,
      cta2 : cta2,
      xp : xp,
      yp : yp,
      xp2 : xp2,
      yp2 : yp2,
      xp0 : xp0,
      yp0 : yp0,
      xp20 : xp20,
      yp20 : yp20,
      theta : theta,
      theta2 : theta2,
      fx : fx,
      fy : fy,
      fx2 : fx2,
      fy2 : fy2,
      I : I,
      cst : cst,
      cst2 : cst2,
      nc : nc,
      np : np,
      xc : xc,
      yc : yc,
      zc : zc,
      cs : cs,
      sc : sc,
      dc : dc,
      dx : dx,
      l_play : l_play,
      l_pause : l_pause,
      l_reset : l_reset,
      l_init : l_init,
      label : label,
      l_step : l_step,
      xm : xm,
      ym : ym,
      npt : npt,
      clear : clear,
      fontb : fontb,
      theta : theta
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.size2 != "undefined") size2 = json.size2;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.nt != "undefined") nt = json.nt;
    if(typeof json.tset != "undefined") tset = json.tset;
    if(typeof json.tset2 != "undefined") tset2 = json.tset2;
    if(typeof json.dtset != "undefined") dtset = json.dtset;
    if(typeof json.dtset2 != "undefined") dtset2 = json.dtset2;
    if(typeof json.ns != "undefined") ns = json.ns;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.xpset != "undefined") xpset = json.xpset;
    if(typeof json.ypset != "undefined") ypset = json.ypset;
    if(typeof json.xpsets != "undefined") xpsets = json.xpsets;
    if(typeof json.ypsets != "undefined") ypsets = json.ypsets;
    if(typeof json.fxset != "undefined") fxset = json.fxset;
    if(typeof json.fyset != "undefined") fyset = json.fyset;
    if(typeof json.cstset != "undefined") cstset = json.cstset;
    if(typeof json.xp2set != "undefined") xp2set = json.xp2set;
    if(typeof json.yp2set != "undefined") yp2set = json.yp2set;
    if(typeof json.fx2set != "undefined") fx2set = json.fx2set;
    if(typeof json.fy2set != "undefined") fy2set = json.fy2set;
    if(typeof json.cst2set != "undefined") cst2set = json.cst2set;
    if(typeof json.angle != "undefined") angle = json.angle;
    if(typeof json.angle2 != "undefined") angle2 = json.angle2;
    if(typeof json.xpsetfreeze != "undefined") xpsetfreeze = json.xpsetfreeze;
    if(typeof json.ypsetfreeze != "undefined") ypsetfreeze = json.ypsetfreeze;
    if(typeof json.anglefreeze != "undefined") anglefreeze = json.anglefreeze;
    if(typeof json.xp2setfreeze != "undefined") xp2setfreeze = json.xp2setfreeze;
    if(typeof json.yp2setfreeze != "undefined") yp2setfreeze = json.yp2setfreeze;
    if(typeof json.angle2freeze != "undefined") angle2freeze = json.angle2freeze;
    if(typeof json.tsetinit != "undefined") tsetinit = json.tsetinit;
    if(typeof json.nsinit != "undefined") nsinit = json.nsinit;
    if(typeof json.ninit != "undefined") ninit = json.ninit;
    if(typeof json.totalpoints != "undefined") totalpoints = json.totalpoints;
    if(typeof json.xpsetinit != "undefined") xpsetinit = json.xpsetinit;
    if(typeof json.ypsetinit != "undefined") ypsetinit = json.ypsetinit;
    if(typeof json.fxsetinit != "undefined") fxsetinit = json.fxsetinit;
    if(typeof json.fysetinit != "undefined") fysetinit = json.fysetinit;
    if(typeof json.cstsetinit != "undefined") cstsetinit = json.cstsetinit;
    if(typeof json.xp2setinit != "undefined") xp2setinit = json.xp2setinit;
    if(typeof json.yp2setinit != "undefined") yp2setinit = json.yp2setinit;
    if(typeof json.fx2setinit != "undefined") fx2setinit = json.fx2setinit;
    if(typeof json.fy2setinit != "undefined") fy2setinit = json.fy2setinit;
    if(typeof json.cst2setinit != "undefined") cst2setinit = json.cst2setinit;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.y2s != "undefined") y2s = json.y2s;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.cta2 != "undefined") cta2 = json.cta2;
    if(typeof json.xp != "undefined") xp = json.xp;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.xp2 != "undefined") xp2 = json.xp2;
    if(typeof json.yp2 != "undefined") yp2 = json.yp2;
    if(typeof json.xp0 != "undefined") xp0 = json.xp0;
    if(typeof json.yp0 != "undefined") yp0 = json.yp0;
    if(typeof json.xp20 != "undefined") xp20 = json.xp20;
    if(typeof json.yp20 != "undefined") yp20 = json.yp20;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.theta2 != "undefined") theta2 = json.theta2;
    if(typeof json.fx != "undefined") fx = json.fx;
    if(typeof json.fy != "undefined") fy = json.fy;
    if(typeof json.fx2 != "undefined") fx2 = json.fx2;
    if(typeof json.fy2 != "undefined") fy2 = json.fy2;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.cst != "undefined") cst = json.cst;
    if(typeof json.cst2 != "undefined") cst2 = json.cst2;
    if(typeof json.nc != "undefined") nc = json.nc;
    if(typeof json.np != "undefined") np = json.np;
    if(typeof json.xc != "undefined") xc = json.xc;
    if(typeof json.yc != "undefined") yc = json.yc;
    if(typeof json.zc != "undefined") zc = json.zc;
    if(typeof json.cs != "undefined") cs = json.cs;
    if(typeof json.sc != "undefined") sc = json.sc;
    if(typeof json.dc != "undefined") dc = json.dc;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.l_play != "undefined") l_play = json.l_play;
    if(typeof json.l_pause != "undefined") l_pause = json.l_pause;
    if(typeof json.l_reset != "undefined") l_reset = json.l_reset;
    if(typeof json.l_init != "undefined") l_init = json.l_init;
    if(typeof json.label != "undefined") label = json.label;
    if(typeof json.l_step != "undefined") l_step = json.l_step;
    if(typeof json.xm != "undefined") xm = json.xm;
    if(typeof json.ym != "undefined") ym = json.ym;
    if(typeof json.npt != "undefined") npt = json.npt;
    if(typeof json.clear != "undefined") clear = json.clear;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.theta != "undefined") theta = json.theta;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.size2 != "undefined") size2 = json.size2;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.nt != "undefined") nt = json.nt;
    if(typeof json.tset != "undefined") tset = json.tset;
    if(typeof json.tset2 != "undefined") tset2 = json.tset2;
    if(typeof json.dtset != "undefined") dtset = json.dtset;
    if(typeof json.dtset2 != "undefined") dtset2 = json.dtset2;
    if(typeof json.ns != "undefined") ns = json.ns;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.xpset != "undefined") xpset = json.xpset;
    if(typeof json.ypset != "undefined") ypset = json.ypset;
    if(typeof json.xpsets != "undefined") xpsets = json.xpsets;
    if(typeof json.ypsets != "undefined") ypsets = json.ypsets;
    if(typeof json.fxset != "undefined") fxset = json.fxset;
    if(typeof json.fyset != "undefined") fyset = json.fyset;
    if(typeof json.cstset != "undefined") cstset = json.cstset;
    if(typeof json.xp2set != "undefined") xp2set = json.xp2set;
    if(typeof json.yp2set != "undefined") yp2set = json.yp2set;
    if(typeof json.fx2set != "undefined") fx2set = json.fx2set;
    if(typeof json.fy2set != "undefined") fy2set = json.fy2set;
    if(typeof json.cst2set != "undefined") cst2set = json.cst2set;
    if(typeof json.angle != "undefined") angle = json.angle;
    if(typeof json.angle2 != "undefined") angle2 = json.angle2;
    if(typeof json.xpsetfreeze != "undefined") xpsetfreeze = json.xpsetfreeze;
    if(typeof json.ypsetfreeze != "undefined") ypsetfreeze = json.ypsetfreeze;
    if(typeof json.anglefreeze != "undefined") anglefreeze = json.anglefreeze;
    if(typeof json.xp2setfreeze != "undefined") xp2setfreeze = json.xp2setfreeze;
    if(typeof json.yp2setfreeze != "undefined") yp2setfreeze = json.yp2setfreeze;
    if(typeof json.angle2freeze != "undefined") angle2freeze = json.angle2freeze;
    if(typeof json.tsetinit != "undefined") tsetinit = json.tsetinit;
    if(typeof json.nsinit != "undefined") nsinit = json.nsinit;
    if(typeof json.ninit != "undefined") ninit = json.ninit;
    if(typeof json.totalpoints != "undefined") totalpoints = json.totalpoints;
    if(typeof json.xpsetinit != "undefined") xpsetinit = json.xpsetinit;
    if(typeof json.ypsetinit != "undefined") ypsetinit = json.ypsetinit;
    if(typeof json.fxsetinit != "undefined") fxsetinit = json.fxsetinit;
    if(typeof json.fysetinit != "undefined") fysetinit = json.fysetinit;
    if(typeof json.cstsetinit != "undefined") cstsetinit = json.cstsetinit;
    if(typeof json.xp2setinit != "undefined") xp2setinit = json.xp2setinit;
    if(typeof json.yp2setinit != "undefined") yp2setinit = json.yp2setinit;
    if(typeof json.fx2setinit != "undefined") fx2setinit = json.fx2setinit;
    if(typeof json.fy2setinit != "undefined") fy2setinit = json.fy2setinit;
    if(typeof json.cst2setinit != "undefined") cst2setinit = json.cst2setinit;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.xs != "undefined") xs = json.xs;
    if(typeof json.ys != "undefined") ys = json.ys;
    if(typeof json.y2s != "undefined") y2s = json.y2s;
    if(typeof json.cta != "undefined") cta = json.cta;
    if(typeof json.cta2 != "undefined") cta2 = json.cta2;
    if(typeof json.xp != "undefined") xp = json.xp;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.xp2 != "undefined") xp2 = json.xp2;
    if(typeof json.yp2 != "undefined") yp2 = json.yp2;
    if(typeof json.xp0 != "undefined") xp0 = json.xp0;
    if(typeof json.yp0 != "undefined") yp0 = json.yp0;
    if(typeof json.xp20 != "undefined") xp20 = json.xp20;
    if(typeof json.yp20 != "undefined") yp20 = json.yp20;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.theta2 != "undefined") theta2 = json.theta2;
    if(typeof json.fx != "undefined") fx = json.fx;
    if(typeof json.fy != "undefined") fy = json.fy;
    if(typeof json.fx2 != "undefined") fx2 = json.fx2;
    if(typeof json.fy2 != "undefined") fy2 = json.fy2;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.cst != "undefined") cst = json.cst;
    if(typeof json.cst2 != "undefined") cst2 = json.cst2;
    if(typeof json.nc != "undefined") nc = json.nc;
    if(typeof json.np != "undefined") np = json.np;
    if(typeof json.xc != "undefined") xc = json.xc;
    if(typeof json.yc != "undefined") yc = json.yc;
    if(typeof json.zc != "undefined") zc = json.zc;
    if(typeof json.cs != "undefined") cs = json.cs;
    if(typeof json.sc != "undefined") sc = json.sc;
    if(typeof json.dc != "undefined") dc = json.dc;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.l_play != "undefined") l_play = json.l_play;
    if(typeof json.l_pause != "undefined") l_pause = json.l_pause;
    if(typeof json.l_reset != "undefined") l_reset = json.l_reset;
    if(typeof json.l_init != "undefined") l_init = json.l_init;
    if(typeof json.label != "undefined") label = json.label;
    if(typeof json.l_step != "undefined") l_step = json.l_step;
    if(typeof json.xm != "undefined") xm = json.xm;
    if(typeof json.ym != "undefined") ym = json.ym;
    if(typeof json.npt != "undefined") npt = json.npt;
    if(typeof json.clear != "undefined") clear = json.clear;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.theta != "undefined") theta = json.theta;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["setFieldine"] = true;
    __pagesEnabled["draw Field line first only"] = true;
    __pagesEnabled["setFieldine 2"] = false;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Evol Page SetLinespostivedirection"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["Evol Page SetLines 2negativedirection"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["FixRel Page 2"] = true;
    __pagesEnabled["anglexpyp"] = true;
    __pagesEnabled["angleofset"] = true;
  });

  _model.addToReset(function() {
    range = 20; // EjsS Model.Variables.coordinate.range
    xmin = -range; // EjsS Model.Variables.coordinate.xmin
    xmax = range; // EjsS Model.Variables.coordinate.xmax
    ymin = -range/2; // EjsS Model.Variables.coordinate.ymin
    ymax = range/2; // EjsS Model.Variables.coordinate.ymax
    t = 0.0; // EjsS Model.Variables.coordinate.t
    dt = 0.1; // EjsS Model.Variables.coordinate.dt
    size = range/20; // EjsS Model.Variables.coordinate.size
    size2 = size/2; // EjsS Model.Variables.coordinate.size2
    stroke = 2.0; // EjsS Model.Variables.coordinate.stroke
    w = size*1.5; // EjsS Model.Variables.coordinate.w
    pi = Math.PI; // EjsS Model.Variables.coordinate.pi
    nt = 10; // EjsS Model.Variables.coordinate.nt
  });

  _model.addToReset(function() {
    tset = t; // EjsS Model.Variables.SetFieldlines.tset
    tset2 = 1; // EjsS Model.Variables.SetFieldlines.tset2
    dtset = dt; // EjsS Model.Variables.SetFieldlines.dtset
    dtset2 = dt; // EjsS Model.Variables.SetFieldlines.dtset2
    ns = 5; // EjsS Model.Variables.SetFieldlines.ns
    n = ns; // EjsS Model.Variables.SetFieldlines.n
    xpset = new Array(ns); // EjsS Model.Variables.SetFieldlines.xpset
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.xpset
        xpset[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.xpset
      }
    }());
    ypset = new Array(ns); // EjsS Model.Variables.SetFieldlines.ypset
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.ypset
        ypset[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.ypset
      }
    }());
    xpsets = new Array(ns); // EjsS Model.Variables.SetFieldlines.xpsets
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.xpsets
        xpsets[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.xpsets
      }
    }());
    ypsets = new Array(ns); // EjsS Model.Variables.SetFieldlines.ypsets
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.ypsets
        ypsets[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.ypsets
      }
    }());
    fxset = new Array(ns); // EjsS Model.Variables.SetFieldlines.fxset
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.fxset
        fxset[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.fxset
      }
    }());
    fyset = new Array(ns); // EjsS Model.Variables.SetFieldlines.fyset
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.fyset
        fyset[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.fyset
      }
    }());
    cstset = new Array(ns); // EjsS Model.Variables.SetFieldlines.cstset
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.cstset
        cstset[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.cstset
      }
    }());
    xp2set = new Array(ns); // EjsS Model.Variables.SetFieldlines.xp2set
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.xp2set
        xp2set[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.xp2set
      }
    }());
    yp2set = new Array(ns); // EjsS Model.Variables.SetFieldlines.yp2set
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.yp2set
        yp2set[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.yp2set
      }
    }());
    fx2set = new Array(ns); // EjsS Model.Variables.SetFieldlines.fx2set
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.fx2set
        fx2set[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.fx2set
      }
    }());
    fy2set = new Array(ns); // EjsS Model.Variables.SetFieldlines.fy2set
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.fy2set
        fy2set[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.fy2set
      }
    }());
    cst2set = new Array(ns); // EjsS Model.Variables.SetFieldlines.cst2set
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.cst2set
        cst2set[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.cst2set
      }
    }());
    angle = new Array(ns); // EjsS Model.Variables.SetFieldlines.angle
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.angle
        angle[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.angle
      }
    }());
    angle2 = new Array(ns); // EjsS Model.Variables.SetFieldlines.angle2
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.angle2
        angle2[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.angle2
      }
    }());
    xpsetfreeze = new Array(ns); // EjsS Model.Variables.SetFieldlines.xpsetfreeze
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.xpsetfreeze
        xpsetfreeze[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.xpsetfreeze
      }
    }());
    ypsetfreeze = new Array(ns); // EjsS Model.Variables.SetFieldlines.ypsetfreeze
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.ypsetfreeze
        ypsetfreeze[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.ypsetfreeze
      }
    }());
    anglefreeze = new Array(ns); // EjsS Model.Variables.SetFieldlines.anglefreeze
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.anglefreeze
        anglefreeze[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.anglefreeze
      }
    }());
    xp2setfreeze = new Array(ns); // EjsS Model.Variables.SetFieldlines.xp2setfreeze
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.xp2setfreeze
        xp2setfreeze[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.xp2setfreeze
      }
    }());
    yp2setfreeze = new Array(ns); // EjsS Model.Variables.SetFieldlines.yp2setfreeze
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.yp2setfreeze
        yp2setfreeze[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.yp2setfreeze
      }
    }());
    angle2freeze = new Array(ns); // EjsS Model.Variables.SetFieldlines.angle2freeze
    (function () {
      var _i0;
      for (_i0=0; _i0<ns; _i0+=1) {  // EjsS Model.Variables.SetFieldlines.angle2freeze
        angle2freeze[_i0] = 0;  // EjsS Model.Variables.SetFieldlines.angle2freeze
      }
    }());
  });

  _model.addToReset(function() {
    tsetinit = 0; // EjsS Model.Variables.SetFieldlines 2notused.tsetinit
    nsinit = 5; // EjsS Model.Variables.SetFieldlines 2notused.nsinit
    ninit = ns; // EjsS Model.Variables.SetFieldlines 2notused.ninit
    totalpoints = 500; // EjsS Model.Variables.SetFieldlines 2notused.totalpoints
    xpsetinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.xpsetinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.xpsetinit
        xpsetinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.xpsetinit
          xpsetinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.xpsetinit
        }
      }
    }());
    ypsetinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.ypsetinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.ypsetinit
        ypsetinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.ypsetinit
          ypsetinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.ypsetinit
        }
      }
    }());
    fxsetinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.fxsetinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fxsetinit
        fxsetinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fxsetinit
          fxsetinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.fxsetinit
        }
      }
    }());
    fysetinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.fysetinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fysetinit
        fysetinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fysetinit
          fysetinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.fysetinit
        }
      }
    }());
    cstsetinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.cstsetinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.cstsetinit
        cstsetinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.cstsetinit
          cstsetinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.cstsetinit
        }
      }
    }());
    xp2setinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.xp2setinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.xp2setinit
        xp2setinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.xp2setinit
          xp2setinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.xp2setinit
        }
      }
    }());
    yp2setinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.yp2setinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.yp2setinit
        yp2setinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.yp2setinit
          yp2setinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.yp2setinit
        }
      }
    }());
    fx2setinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.fx2setinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fx2setinit
        fx2setinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fx2setinit
          fx2setinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.fx2setinit
        }
      }
    }());
    fy2setinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.fy2setinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fy2setinit
        fy2setinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.fy2setinit
          fy2setinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.fy2setinit
        }
      }
    }());
    cst2setinit = new Array(nsinit); // EjsS Model.Variables.SetFieldlines 2notused.cst2setinit
    (function () {
      var _i0,_i1;
      for (_i0=0; _i0<nsinit; _i0+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.cst2setinit
        cst2setinit[_i0] = [];
        for (_i1=0; _i1<totalpoints; _i1+=1) {  // EjsS Model.Variables.SetFieldlines 2notused.cst2setinit
          cst2setinit[_i0][_i1] = 0;  // EjsS Model.Variables.SetFieldlines 2notused.cst2setinit
        }
      }
    }());
  });

  _model.addToReset(function() {
    x = xmax/2; // EjsS Model.Variables.basic.x
    y = ymax/3; // EjsS Model.Variables.basic.y
    y2 = -y; // EjsS Model.Variables.basic.y2
    xs = xmax/2; // EjsS Model.Variables.basic.xs
    ys = ymax/4; // EjsS Model.Variables.basic.ys
    y2s = -y; // EjsS Model.Variables.basic.y2s
    cta = 0.0; // EjsS Model.Variables.basic.cta
    cta2 = 0.0; // EjsS Model.Variables.basic.cta2
    xp = x; // EjsS Model.Variables.basic.xp
    yp = 0.0; // EjsS Model.Variables.basic.yp
    xp2 = x; // EjsS Model.Variables.basic.xp2
    yp2 = 0.0; // EjsS Model.Variables.basic.yp2
    xp0 = x; // EjsS Model.Variables.basic.xp0
    yp0 = 0.0; // EjsS Model.Variables.basic.yp0
    xp20 = x; // EjsS Model.Variables.basic.xp20
    yp20 = 0.0; // EjsS Model.Variables.basic.yp20
    theta = -160/180*pi; // EjsS Model.Variables.basic.theta
    theta2 = 160/180*pi; // EjsS Model.Variables.basic.theta2
    fx = 0; // EjsS Model.Variables.basic.fx
    fy = 0; // EjsS Model.Variables.basic.fy
    fx2 = 0; // EjsS Model.Variables.basic.fx2
    fy2 = 0; // EjsS Model.Variables.basic.fy2
    I = range/10; // EjsS Model.Variables.basic.I
    cst = -I; // EjsS Model.Variables.basic.cst
    cst2 = I; // EjsS Model.Variables.basic.cst2
  });

  _model.addToReset(function() {
    nc = 11; // EjsS Model.Variables.coil.nc
    np = 20; // EjsS Model.Variables.coil.np
    xc = new Array(nc); // EjsS Model.Variables.coil.xc
    (function () {
      var _i0;
      for (_i0=0; _i0<nc; _i0+=1) {  // EjsS Model.Variables.coil.xc
        xc[_i0] = 0.0;  // EjsS Model.Variables.coil.xc
      }
    }());
    yc = new Array(np); // EjsS Model.Variables.coil.yc
    (function () {
      var _i0;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.coil.yc
        yc[_i0] = 0.0;  // EjsS Model.Variables.coil.yc
      }
    }());
    zc = new Array(np); // EjsS Model.Variables.coil.zc
    (function () {
      var _i0;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.coil.zc
        zc[_i0] = 0.0;  // EjsS Model.Variables.coil.zc
      }
    }());
    cs = new Array(np); // EjsS Model.Variables.coil.cs
    (function () {
      var _i0;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.coil.cs
        cs[_i0] = 0.0;  // EjsS Model.Variables.coil.cs
      }
    }());
    sc = new Array(np); // EjsS Model.Variables.coil.sc
    (function () {
      var _i0;
      for (_i0=0; _i0<np; _i0+=1) {  // EjsS Model.Variables.coil.sc
        sc[_i0] = 0.0;  // EjsS Model.Variables.coil.sc
      }
    }());
    dc = 2*pi/np; // EjsS Model.Variables.coil.dc
    dx = w*2/(nc-1); // EjsS Model.Variables.coil.dx
  });

  _model.addToReset(function() {
    l_play = "play"; // EjsS Model.Variables.language.l_play
    l_pause = "pause"; // EjsS Model.Variables.language.l_pause
    l_reset = "reset"; // EjsS Model.Variables.language.l_reset
    l_init = "initialize"; // EjsS Model.Variables.language.l_init
    label = "pause"; // EjsS Model.Variables.language.label
    l_step = "step"; // EjsS Model.Variables.language.l_step
  });

  _model.addToReset(function() {
    xm = 0; // EjsS Model.Variables.varfrem.xm
    ym = 0; // EjsS Model.Variables.varfrem.ym
    npt = 0; // EjsS Model.Variables.varfrem.npt
    clear = false; // EjsS Model.Variables.varfrem.clear
    fontb = "normal bold 2vw"; // EjsS Model.Variables.varfrem.fontb
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
    _ODEi_evolution2 = _ODE_evolution2();
    _privateOdesList.push(_ODEi_evolution2);
    _ODEi_evolution3 = _ODE_evolution3();
    _privateOdesList.push(_ODEi_evolution3);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(100);
    _model.setStepsPerDisplay(1);
  });

  var r2,r3,f;  // > CustomCode.calFx:1
  // caluclate magnetic field at point xp,yp use Biot-Savart Law Fproportional to dlXr/r^3  // > CustomCode.calFx:2
  function calFx (xp, yp) {  // > CustomCode.calFx:3
   f=0;  // > CustomCode.calFx:4
   for(var i=0;i<np;i++){  // > CustomCode.calFx:5
    for(var j=0;j<nc;j++){  // > CustomCode.calFx:6
     r2=(xp-xc[j])*(xp-xc[j])+(yp-yc[i])*(yp-yc[i])+zc[i]*zc[i];  // > CustomCode.calFx:7
     r3=r2*Math.sqrt(r2);  // > CustomCode.calFx:8
     f-=(yc[i]*(yp-yc[i])-zc[i]*zc[i])/r3;  // > CustomCode.calFx:9
    }  // > CustomCode.calFx:10
   }  // > CustomCode.calFx:11
   return f;  // > CustomCode.calFx:12
  }  // > CustomCode.calFx:13

  var r2,r3,f;  // > CustomCode.calFx Set:1
  // caluclate magnetic field at point xp,yp use Biot-Savart Law Fproportional to dlXr/r^3  // > CustomCode.calFx Set:2
  function calFxset (xpset, ypset) {  // > CustomCode.calFx Set:3
   f=0;  // > CustomCode.calFx Set:4
   for(var i=0;i<np;i++){  // > CustomCode.calFx Set:5
    for(var j=0;j<nc;j++){  // > CustomCode.calFx Set:6
     r2=(xpset-xc[j])*(xpset-xc[j])+(ypset-yc[i])*(ypset-yc[i])+zc[i]*zc[i];  // > CustomCode.calFx Set:7
     r3=r2*Math.sqrt(r2);  // > CustomCode.calFx Set:8
     f-=(yc[i]*(ypset-yc[i])-zc[i]*zc[i])/r3;  // > CustomCode.calFx Set:9
    }  // > CustomCode.calFx Set:10
   }  // > CustomCode.calFx Set:11
   return f;  // > CustomCode.calFx Set:12
  }  // > CustomCode.calFx Set:13

  var r2,r3,f;  // > CustomCode.calFy:1
  function calFy (xp, yp) {  // > CustomCode.calFy:2
   f=0;  // > CustomCode.calFy:3
   for(var i=0;i<np;i++){  // > CustomCode.calFy:4
    for(var j=0;j<nc;j++){  // > CustomCode.calFy:5
     r2=(xp-xc[j])*(xp-xc[j])+(yp-yc[i])*(yp-yc[i])+zc[i]*zc[i];  // > CustomCode.calFy:6
     r3=r2*Math.sqrt(r2);  // > CustomCode.calFy:7
     f+=yc[i]*(xp-xc[j])/r3;  // > CustomCode.calFy:8
    }  // > CustomCode.calFy:9
   }  // > CustomCode.calFy:10
   return f;  // > CustomCode.calFy:11
  }  // > CustomCode.calFy:12

  var r2,r3,f;  // > CustomCode.calFy 2:1
  function calFyset (xpset, ypset) {  // > CustomCode.calFy 2:2
   f=0;  // > CustomCode.calFy 2:3
   for(var i=0;i<np;i++){  // > CustomCode.calFy 2:4
    for(var j=0;j<nc;j++){  // > CustomCode.calFy 2:5
     r2=(xpset-xc[j])*(xpset-xc[j])+(ypset-yc[i])*(ypset-yc[i])+zc[i]*zc[i];  // > CustomCode.calFy 2:6
     r3=r2*Math.sqrt(r2);  // > CustomCode.calFy 2:7
     f+=yc[i]*(xpset-xc[j])/r3;  // > CustomCode.calFy 2:8
    }  // > CustomCode.calFy 2:9
   }  // > CustomCode.calFy 2:10
   return f;  // > CustomCode.calFy 2:11
  }  // > CustomCode.calFy 2:12

  function drag () {  // > CustomCode.drag:1
  // if(x<0)x=0;  // > CustomCode.drag:2
  // if(y<0)y=0;  // > CustomCode.drag:3
  xp=xp2=x;  // > CustomCode.drag:4
  yp=yp2=y;  // > CustomCode.drag:5
  fx2=fx=calFx(x,y);  // > CustomCode.drag:6
  fy2=fy=calFy(x,y);  // > CustomCode.drag:7
  cta=Math.atan2(fy,fx);  // > CustomCode.drag:8
  }  // > CustomCode.drag:9

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    // magnetic bar is simulated with current loops  // > Initialization.Init Page:1
    for(var i=0;i<nc;i++)xc[i]=w-i*dx;  // assume there are nc current loops, xc[i] is the x-coordinate of the coil  // > Initialization.Init Page:2
    for(var i=0;i<np;i++){// here calculate the (y,z) coordinate for each loop, the circle is cut into np segments   // > Initialization.Init Page:3
     yc[i]=size2*Math.cos(i*dc);  // > Initialization.Init Page:4
     zc[i]=size2*Math.sin(i*dc);  // > Initialization.Init Page:5
    }  // > Initialization.Init Page:6
    drag();// calculate magnetic field at magnetic nieedle position  // > Initialization.Init Page:7
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(200,220,208); stop-opacity:1" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(100,200,208);stop-opacity:1" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient)"  // > Initialization.svg:10
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["setFieldine"]) return;
    for (var i=0; i<ns /* Iterations */ ; i++) { // cannot put i<=ns  // > Initialization.setFieldine:1
      //xpset[i] = -w*0.5; //cannot put -w exactly  // > Initialization.setFieldine:2
      xpset[i] = -w*1.1; //cannot put -w exactly  // > Initialization.setFieldine:3
      ypset[i]= -size*0.5+ i*size/(ns-1);  // > Initialization.setFieldine:4
        xpsets[i] = -w*1.1; //cannot put -w exactly // stored values for comparison and detection to pause  // > Initialization.setFieldine:5
      ypsets[i]= -size*0.5+ i*size/(ns-1);  // > Initialization.setFieldine:6
      //zp[i] = dz/2;  // > Initialization.setFieldine:7
       //xp2set[i] = -w*0.5;  // > Initialization.setFieldine:8
       xp2set[i] = -w*1.1;  // > Initialization.setFieldine:9
      yp2set[i]=  -size*0.5 +i*size/(ns-1);  // > Initialization.setFieldine:10
    }  // > Initialization.setFieldine:11
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["draw Field line first only"]) return;
    dtset=0.1;  // > Initialization.draw Field line first only:1
    dt=0;  // > Initialization.draw Field line first only:2
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["setFieldine 2"]) return;
    for (var i=0; i<nsinit /* Iterations */ ; i++) { // cannot put i<=ns  // > Initialization.setFieldine 2:1
      //xpset[i] = -w*0.5; //cannot put -w exactly  // > Initialization.setFieldine 2:2
      xpsetinit[i][0] = -w*1.1; //cannot put -w exactly  // > Initialization.setFieldine 2:3
      ypsetinit[i][0]= -size*0.5+ i*size/(nsinit-1);  // > Initialization.setFieldine 2:4
      //zp[i] = dz/2;  // > Initialization.setFieldine 2:5
       //xp2set[i] = -w*0.5;  // > Initialization.setFieldine 2:6
       xp2setinit[i][0] = -w*1.1;  // > Initialization.setFieldine 2:7
      yp2setinit[i][0]=  -size*0.5 +i*size/(nsinit-1);  // > Initialization.setFieldine 2:8
    }  // > Initialization.setFieldine 2:9
    for (var i=0; i<nsinit /* Iterations */ ; i++) {  // > Initialization.setFieldine 2:10
      for (var j = 1;j<=totalpoints;j++) {  // > Initialization.setFieldine 2:11
     cstsetinit[i][j]= -I/Math.sqrt(fxsetinit[i][j-1]*fxsetinit[i][j-1]+fysetinit[i][j-1]*fysetinit[i][j-1]);  // > Initialization.setFieldine 2:12
     cst2setinit[i][j]= I/Math.sqrt(fx2setinit[i][j-1]*fx2setinit[i][j-1]+fy2setinit[i][j-1]*fy2setinit[i][j-1]);  // > Initialization.setFieldine 2:13
      // Euler-Cromer  // > Initialization.setFieldine 2:14
     fxsetinit[i][j]= fxsetinit[i][j-1]+ calFxset(xpsetinit[i][j],ypsetinit[i][j])*dt;  // > Initialization.setFieldine 2:15
     fysetinit[i][j]= fysetinit[i][j-1] + calFyset(xpsetinit[i][j],ypsetinit[i][j])*dt;  // > Initialization.setFieldine 2:16
    // xpsetinit[i][j] = fxsetinit[i][j]*cstsetinit[i][j];  // > Initialization.setFieldine 2:17
    //ypsetinit[i][j] = fysetinit[i][j]*cstsetinit[i][j];  // > Initialization.setFieldine 2:18
    }  // > Initialization.setFieldine 2:19
    }  // > Initialization.setFieldine 2:20
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page SetLinespostivedirection"]) return;
    _ODEi_evolution2.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page SetLines 2negativedirection"]) return;
    _ODEi_evolution3.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    if(xp>xmax || xp<xmin || yp>ymax || yp<ymin ||Math.sqrt((xp-xs)*(xp-xs)+(yp-ys)*(yp-ys))<0.5&&t>50*dt)cst=0; // hit boundary stop  // > FixedRelations.FixRel Page:1
    // make sure inside Math.sqrt((x-xs)*(x-xs)+(y-ys)*(y-ys))<1 and starting for a long time already t>2*dt  // > FixedRelations.FixRel Page:2
    else cst=-I/Math.sqrt(fx*fx+fy*fy); // try to normalize field value  // > FixedRelations.FixRel Page:3
    if(xp2>xmax || xp2<xmin || yp2>ymax || yp2<ymin||Math.sqrt((xp2-xs)*(xp2-xs)+(yp2-ys)*(yp2-ys))<0.5&&t>50*dt)cst2=0; // hit boundary stop  // > FixedRelations.FixRel Page:4
    else cst2=I/Math.sqrt(fx2*fx2+fy2*fy2);  // > FixedRelations.FixRel Page:5
    if(_isPlaying && cst==0 && cst2==0)_pause();  // > FixedRelations.FixRel Page:6
    cta2=-cta;  // > FixedRelations.FixRel Page:7
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page 2"]) return;
    for (var i=0; i<ns /* Iterations */ ; i++) { // cannot put i<=ns  // > FixedRelations.FixRel Page 2:1
    // case 1 hit right  // > FixedRelations.FixRel Page 2:2
    //case 2 hit left  // > FixedRelations.FixRel Page 2:3
    //case 3 hit top  // > FixedRelations.FixRel Page 2:4
    //case 4 hit bottom  // > FixedRelations.FixRel Page 2:5
    //case 5 reach back original position  // > FixedRelations.FixRel Page 2:6
    if(xpset[i]>xmax || xpset[i]<xmin || ypset[i]>ymax || ypset[i]<ymin ||Math.sqrt((xpset[i]-xpsets[i])*(xpset[i]-xpsets[i])+(ypset[i]-ypsets[i])*(ypset[i]-ypsets[i]))<0.5&&tset>50*dtset)cstset[i]=0; // hit boundary stop  // > FixedRelations.FixRel Page 2:7
    // make sure inside Math.sqrt((x-xs)*(x-xs)+(y-ys)*(y-ys))<1 and starting for a long time already t>2*dt  // > FixedRelations.FixRel Page 2:8
    else cstset[i]=-I/Math.sqrt(fxset[i]*fxset[i]+fyset[i]*fyset[i]); // try to normalize field value  // > FixedRelations.FixRel Page 2:9
    if(xp2set[i]>xmax || xp2set[i]<xmin || yp2set[i]>ymax || yp2set[i]<ymin||Math.sqrt((xp2set[i]-xpsets[i])*(xp2set[i]-xpsets[i])+(yp2set[i]-ypsets[i])*(yp2set[i]-ypsets[i]))<0.5&&t>50*dt)cst2set[i]=0; // hit boundary stop  // > FixedRelations.FixRel Page 2:10
    else cst2set[i]=I/Math.sqrt(fx2set[i]*fx2set[i]+fy2set[i]*fy2set[i]);  // > FixedRelations.FixRel Page 2:11
    if(_isPlaying && cstset[i]==0 && cst2set[i]==0){  // > FixedRelations.FixRel Page 2:12
      dtset=0;  // > FixedRelations.FixRel Page 2:13
      dtset2=0;  // > FixedRelations.FixRel Page 2:14
     // _pause();  // > FixedRelations.FixRel Page 2:15
      }  // > FixedRelations.FixRel Page 2:16
    //cta2=-cta;  // > FixedRelations.FixRel Page 2:17
    }  // > FixedRelations.FixRel Page 2:18
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["anglexpyp"]) return;
    theta = Math.atan2(yp-yp0,xp-xp0);  // > FixedRelations.anglexpyp:1
    //theta2 = Math.atan2(yp2-yp20,xp2-xp20);  // > FixedRelations.anglexpyp:2
    if (_isPaused){  // > FixedRelations.anglexpyp:3
      }  // > FixedRelations.anglexpyp:4
      else {  // > FixedRelations.anglexpyp:5
    xp0=xp; //stored old values for calculating rate  // > FixedRelations.anglexpyp:6
    yp0=yp;  // > FixedRelations.anglexpyp:7
    xp20=xp2; //stored old values for calculating rate  // > FixedRelations.anglexpyp:8
    yp20=yp2;  // > FixedRelations.anglexpyp:9
    }  // > FixedRelations.anglexpyp:10
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["angleofset"]) return;
    for (var i=0;i<=ns /* Iterations */ ; i++) {  // > FixedRelations.angleofset:1
    angle[i]=Math.atan2(-fyset[i],-fxset[i])  // > FixedRelations.angleofset:2
    angle2[i]=Math.atan2(-fy2set[i],-fx2set[i]) //negative set angle  // > FixedRelations.angleofset:3
    }  // > FixedRelations.angleofset:4
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    if (_odeName=="Evol Page SetLinespostivedirection") return _ODEi_evolution2;
    if (_odeName=="Evol Page SetLines 2negativedirection") return _ODEi_evolution3;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["xp","yp","xp2","yp2","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=xp) __mustReinitialize = true;
        __state[__cIn++] = xp;
        if (__state[__cIn]!=yp) __mustReinitialize = true;
        __state[__cIn++] = yp;
        if (__state[__cIn]!=xp2) __mustReinitialize = true;
        __state[__cIn++] = xp2;
        if (__state[__cIn]!=yp2) __mustReinitialize = true;
        __state[__cIn++] = yp2;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xp = __state[__cOut++];
        yp = __state[__cOut++];
        xp2 = __state[__cOut++];
        yp2 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xp = _aState[__cOut++];
        var yp = _aState[__cOut++];
        var xp2 = _aState[__cOut++];
        var yp2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        //clear=false;//introduced by frem to clear screen  // > Preliminary code for ODE.Evol Page:1
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = (fx=calFx(xp,yp))*cst; // Rate for ODE: Evol Page:xp
        _aRate[__cRate++] = (fy=calFy(xp,yp))*cst; // Rate for ODE: Evol Page:yp
        _aRate[__cRate++] = (fx2=calFx(xp2,yp2))*cst2; // Rate for ODE: Evol Page:xp2
        _aRate[__cRate++] = (fy2=calFy(xp2,yp2))*cst2; // Rate for ODE: Evol Page:yp2
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xp = _aState[__cOut++];
        var yp = _aState[__cOut++];
        var xp2 = _aState[__cOut++];
        var yp2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xp = __state[__cOut++];
        yp = __state[__cOut++];
        xp2 = __state[__cOut++];
        yp2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xp;
        __state[__cIn++] = yp;
        __state[__cIn++] = xp2;
        __state[__cIn++] = yp2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_xp(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_yp(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_xp2(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_yp2(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _ODE_evolution2() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var _ODE_evolution2_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _xpsetLength;
    var _ypsetLength;

    __odeSelf._getOdeVars = function (){ return["xpset","ypset","tset"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _xpsetLength = xpset.length;
      _ypsetLength = ypset.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dtset);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution2_Event1());
      for(k in userEvents2){__eventSolver.addEvent(userEvents2[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.000001,0.000001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xpsetLength; __j++)
           if (__state[__n++]!=xpset[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_xpsetLength; __j++) {
          __state[__cIn++] = xpset[__j];
        }
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_ypsetLength; __j++)
           if (__state[__n++]!=ypset[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_ypsetLength; __j++) {
          __state[__cIn++] = ypset[__j];
        }
        if (__state[__cIn]!=tset) __mustReinitialize = true;
        __state[__cIn++] = tset;
    }

    function __arraysChanged () {
      if (_xpsetLength != xpset.length) return true;
      if (_ypsetLength != ypset.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dtset===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dtset);
      __eventSolver.setInternalStepSize(dtset);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.000001,0.000001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xpsetLength; __i++) {
          xpset[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_ypsetLength; __i++) {
          ypset[__i] = __state[__cOut++];
        }
        tset = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xpset = [];
        for (__i=0;__i<_xpsetLength; __i++) {
          xpset[__i] = _aState[__cOut++];
        }
        var ypset = [];
        for (__i=0;__i<_ypsetLength; __i++) {
          ypset[__i] = _aState[__cOut++];
        }
        var tset = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        //for (var i=0; i<ns /* Iterations */ ; i++) {  // > Preliminary code for ODE.Evol Page SetLinespostivedirection:1
         //cstset[i]= -I/Math.sqrt(fxset[i]*fxset[i]+fyset[i]*fyset[i]);  // > Preliminary code for ODE.Evol Page SetLinespostivedirection:2
         //cst2set[i]= +I/Math.sqrt(fx2set[i]*fx2set[i]+fy2set[i]*fy2set[i]);  // > Preliminary code for ODE.Evol Page SetLinespostivedirection:3
        //}  // > Preliminary code for ODE.Evol Page SetLinespostivedirection:4
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_xpsetLength;i++) {
          _aRate[__cRate++] = Array.isArray((fxset[i]=calFxset(xpset[i],ypset[i]))*cstset[i]) ? (fxset[i]=calFxset(xpset[i],ypset[i]))*cstset[i][i] : (fxset[i]=calFxset(xpset[i],ypset[i]))*cstset[i]; // Rate for ODE: Evol Page SetLinespostivedirection:xpset
        }
        for (i=0;i<_ypsetLength;i++) {
          _aRate[__cRate++] = Array.isArray((fyset[i]=calFyset(xpset[i],ypset[i]))*cstset[i]) ? (fyset[i]=calFyset(xpset[i],ypset[i]))*cstset[i][i] : (fyset[i]=calFyset(xpset[i],ypset[i]))*cstset[i]; // Rate for ODE: Evol Page SetLinespostivedirection:ypset
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xpset = [];
        for (__i=0;__i<_xpsetLength; __i++) {
          xpset[__i] = _aState[__cOut++];
        }
        var ypset = [];
        for (__i=0;__i<_ypsetLength; __i++) {
          ypset[__i] = _aState[__cOut++];
        }
        var tset = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xpsetLength; __i++) {
          xpset[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_ypsetLength; __i++) {
          ypset[__i] = __state[__cOut++];
        }
        tset = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xpsetLength; __j++) {
          __state[__cIn++] = xpset[__j];
        }
        for (__j=0;__j<_ypsetLength; __j++) {
          __state[__cIn++] = ypset[__j];
        }
        __state[__cIn++] = tset;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents2.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution2_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xpset = [];
        for (__i=0;__i<_xpsetLength; __i++) {
          xpset[__i] = _aState[__cOut++];
        }
        var ypset = [];
        for (__i=0;__i<_ypsetLength; __i++) {
          ypset[__i] = _aState[__cOut++];
        }
        var tset = _aState[__cOut++];
        //console.log("zero condition " + tset);  // > Event zero-condition for page Evol Page SetLinespostivedirection:1
        return tset-1;  // > Event zero-condition for page Evol Page SetLinespostivedirection:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xpsetLength; __i++) {
          xpset[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_ypsetLength; __i++) {
          ypset[__i] = __state[__cOut++];
        }
        tset = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xpsetLength; __j++) {
          __state[__cIn++] = xpset[__j];
        }
        for (__j=0;__j<_ypsetLength; __j++) {
          __state[__cIn++] = ypset[__j];
        }
        __state[__cIn++] = tset;
        return _returnValue;
      };

      function __userDefinedAction() {
        for (var i=0; i<=ns /* Iterations */ ; i++) {  // > Event action for page Evol Page SetLinespostivedirection:1
        //console.log("zero condition ok");  // > Event action for page Evol Page SetLinespostivedirection:2
        xpsetfreeze[i]=xpset[i];  // > Event action for page Evol Page SetLinespostivedirection:3
        ypsetfreeze[i]=ypset[i];  // > Event action for page Evol Page SetLinespostivedirection:4
        anglefreeze[i]=angle[i];  // > Event action for page Evol Page SetLinespostivedirection:5
        }  // > Event action for page Evol Page SetLinespostivedirection:6
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_xpset(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,new Array(xpset.length),__beginIndex,xpset.ength);
  }

  function _historic_ypset(__time) {
    var __beginIndex = 0 + xpset.length;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,new Array(ypset.length),__beginIndex,ypset.ength);
  }

  function _ODE_evolution3() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var _ODE_evolution3_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _xp2setLength;
    var _yp2setLength;

    __odeSelf._getOdeVars = function (){ return["xp2set","yp2set","tset2"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _xp2setLength = xp2set.length;
      _yp2setLength = yp2set.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dtset2);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution3_Event1());
      for(k in userEvents3){__eventSolver.addEvent(userEvents3[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xp2setLength; __j++)
           if (__state[__n++]!=xp2set[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_xp2setLength; __j++) {
          __state[__cIn++] = xp2set[__j];
        }
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_yp2setLength; __j++)
           if (__state[__n++]!=yp2set[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_yp2setLength; __j++) {
          __state[__cIn++] = yp2set[__j];
        }
        if (__state[__cIn]!=tset2) __mustReinitialize = true;
        __state[__cIn++] = tset2;
    }

    function __arraysChanged () {
      if (_xp2setLength != xp2set.length) return true;
      if (_yp2setLength != yp2set.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dtset2===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dtset2);
      __eventSolver.setInternalStepSize(dtset2);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xp2setLength; __i++) {
          xp2set[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_yp2setLength; __i++) {
          yp2set[__i] = __state[__cOut++];
        }
        tset2 = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xp2set = [];
        for (__i=0;__i<_xp2setLength; __i++) {
          xp2set[__i] = _aState[__cOut++];
        }
        var yp2set = [];
        for (__i=0;__i<_yp2setLength; __i++) {
          yp2set[__i] = _aState[__cOut++];
        }
        var tset2 = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        //for (var i=0; i<ns /* Iterations */ ; i++) {  // > Preliminary code for ODE.Evol Page SetLines 2negativedirection:1
         //cstset[i]= -I/Math.sqrt(fxset[i]*fxset[i]+fyset[i]*fyset[i]);  // > Preliminary code for ODE.Evol Page SetLines 2negativedirection:2
        // cst2set[i]= +I/Math.sqrt(fx2set[i]*fx2set[i]+fy2set[i]*fy2set[i]);  // > Preliminary code for ODE.Evol Page SetLines 2negativedirection:3
        //}  // > Preliminary code for ODE.Evol Page SetLines 2negativedirection:4
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_xp2setLength;i++) {
          _aRate[__cRate++] = Array.isArray((fx2set[i]=calFxset(xp2set[i],yp2set[i]))*cst2set[i]) ? (fx2set[i]=calFxset(xp2set[i],yp2set[i]))*cst2set[i][i] : (fx2set[i]=calFxset(xp2set[i],yp2set[i]))*cst2set[i]; // Rate for ODE: Evol Page SetLines 2negativedirection:xp2set
        }
        for (i=0;i<_yp2setLength;i++) {
          _aRate[__cRate++] = Array.isArray((fy2set[i]=calFyset(xp2set[i],yp2set[i]))*cst2set[i]) ? (fy2set[i]=calFyset(xp2set[i],yp2set[i]))*cst2set[i][i] : (fy2set[i]=calFyset(xp2set[i],yp2set[i]))*cst2set[i]; // Rate for ODE: Evol Page SetLines 2negativedirection:yp2set
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xp2set = [];
        for (__i=0;__i<_xp2setLength; __i++) {
          xp2set[__i] = _aState[__cOut++];
        }
        var yp2set = [];
        for (__i=0;__i<_yp2setLength; __i++) {
          yp2set[__i] = _aState[__cOut++];
        }
        var tset2 = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xp2setLength; __i++) {
          xp2set[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_yp2setLength; __i++) {
          yp2set[__i] = __state[__cOut++];
        }
        tset2 = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xp2setLength; __j++) {
          __state[__cIn++] = xp2set[__j];
        }
        for (__j=0;__j<_yp2setLength; __j++) {
          __state[__cIn++] = yp2set[__j];
        }
        __state[__cIn++] = tset2;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents3.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution3_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 1000; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xp2set = [];
        for (__i=0;__i<_xp2setLength; __i++) {
          xp2set[__i] = _aState[__cOut++];
        }
        var yp2set = [];
        for (__i=0;__i<_yp2setLength; __i++) {
          yp2set[__i] = _aState[__cOut++];
        }
        var tset2 = _aState[__cOut++];
        //console.log("zero condition second one " + tset2);  // > Event zero-condition for page Evol Page SetLines 2negativedirection:1
        return tset2-4.2;  // > Event zero-condition for page Evol Page SetLines 2negativedirection:2
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xp2setLength; __i++) {
          xp2set[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_yp2setLength; __i++) {
          yp2set[__i] = __state[__cOut++];
        }
        tset2 = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xp2setLength; __j++) {
          __state[__cIn++] = xp2set[__j];
        }
        for (__j=0;__j<_yp2setLength; __j++) {
          __state[__cIn++] = yp2set[__j];
        }
        __state[__cIn++] = tset2;
        return _returnValue;
      };

      function __userDefinedAction() {
        for (var i=0; i<=ns /* Iterations */ ; i++) {  // > Event action for page Evol Page SetLines 2negativedirection:1
        //console.log("zero condition second one ok");  // > Event action for page Evol Page SetLines 2negativedirection:2
        xp2setfreeze[i]=xp2set[i];  // > Event action for page Evol Page SetLines 2negativedirection:3
        yp2setfreeze[i]=yp2set[i];  // > Event action for page Evol Page SetLines 2negativedirection:4
        angle2freeze[i]=angle2[i];  // > Event action for page Evol Page SetLines 2negativedirection:5
        }  // > Event action for page Evol Page SetLines 2negativedirection:6
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_xp2set(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution3.getEventSolver().getStateHistory().interpolate(__time,new Array(xp2set.length),__beginIndex,xp2set.ength);
  }

  function _historic_yp2set(__time) {
    var __beginIndex = 0 + xp2set.length;
    return _ODEi_evolution3.getEventSolver().getStateHistory().interpolate(__time,new Array(yp2set.length),__beginIndex,yp2set.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new magnetbar_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.playpause.setAction("OffClick", function(_data,_info) {
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playpause'
          _view.playpause.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playpause'
          _view.playpause.setAction("OnClick", function(_data,_info) {
  _play();

}); // HtmlView Page setting action 'OnClick' for element 'playpause'
          _view.playpause.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playpause'
          _view.resetButton2.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnRelease", function(_data,_info) {
  toggleFullScreen();_play();

}); // HtmlView Page setting action 'OnRelease' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnPress", function(_data,_info) {
  _pause();

}); // HtmlView Page setting action 'OnPress' for element 'plottingPanel'
          _view.arrowdrawnattimet.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'arrowdrawnattimet'
          _view.arrowdrawnattimet.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowdrawnattimet'
          _view.arrowSet2.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet2'
          _view.arrowSet2.linkProperty("Transformation",  function() { return anglefreeze; }, function(_v) { anglefreeze = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrowSet2'
          _view.arrowSet2.linkProperty("X",  function() { return xpsetfreeze; }, function(_v) { xpsetfreeze = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet2'
          _view.arrowSet2.linkProperty("Y",  function() { return ypsetfreeze; }, function(_v) { ypsetfreeze = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet2'
          _view.arrowSet22.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet22'
          _view.arrowSet22.linkProperty("Transformation",  function() { return angle2freeze; }, function(_v) { angle2freeze = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrowSet22'
          _view.arrowSet22.linkProperty("X",  function() { return xp2setfreeze; }, function(_v) { xp2setfreeze = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet22'
          _view.arrowSet22.linkProperty("Y",  function() { return yp2setfreeze; }, function(_v) { yp2setfreeze = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet22'
          _view.mS.linkProperty("SizeX",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'SizeX' for element 'mS'
          _view.mS.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'mS'
          _view.mS.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'mS'
          _view.mS.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'mS'
          _view.mN3.linkProperty("SizeX",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'SizeX' for element 'mN3'
          _view.mN3.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'mN3'
          _view.mN3.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'mN3'
          _view.mN3.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'mN3'
          _view.mgnetdraggable.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'mgnetdraggable'
          _view.mgnetdraggable.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'mgnetdraggable'
          _view.tracetop.linkProperty("Connected",  function() { return _isPlaying&&dt>0; } ); // HtmlView Page linking property 'Connected' for element 'tracetop'
          _view.tracetop.linkProperty("InputX",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'InputX' for element 'tracetop'
          _view.tracetop.linkProperty("InputY",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'InputY' for element 'tracetop'
          _view.tracetop.linkProperty("ClearAtInput",  function() { return clear; }, function(_v) { clear = _v; } ); // HtmlView Page linking property 'ClearAtInput' for element 'tracetop'
          _view.xp.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'xp'
          _view.xp.linkProperty("Y",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'Y' for element 'xp'
          _view.tracetop2.linkProperty("Connected",  function() { return _isPlaying&&dt>0; } ); // HtmlView Page linking property 'Connected' for element 'tracetop2'
          _view.tracetop2.linkProperty("InputX",  function() { return xp2; }, function(_v) { xp2 = _v; } ); // HtmlView Page linking property 'InputX' for element 'tracetop2'
          _view.tracetop2.linkProperty("InputY",  function() { return yp2; }, function(_v) { yp2 = _v; } ); // HtmlView Page linking property 'InputY' for element 'tracetop2'
          _view.tracetop2.linkProperty("ClearAtInput",  function() { return clear; }, function(_v) { clear = _v; } ); // HtmlView Page linking property 'ClearAtInput' for element 'tracetop2'
          _view.xp2.linkProperty("X",  function() { return xp2; }, function(_v) { xp2 = _v; } ); // HtmlView Page linking property 'X' for element 'xp2'
          _view.xp2.linkProperty("Y",  function() { return yp2; }, function(_v) { yp2 = _v; } ); // HtmlView Page linking property 'Y' for element 'xp2'
          _view.tracebottom.linkProperty("Maximum",  function() { return npt; }, function(_v) { npt = _v; } ); // HtmlView Page linking property 'Maximum' for element 'tracebottom'
          _view.tracebottom.linkProperty("Connected",  function() { return _isPlaying&&dt>0; } ); // HtmlView Page linking property 'Connected' for element 'tracebottom'
          _view.tracebottom.linkProperty("InputX",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'InputX' for element 'tracebottom'
          _view.tracebottom.linkProperty("InputY",  function() { return -yp; } ); // HtmlView Page linking property 'InputY' for element 'tracebottom'
          _view.tracebottom.linkProperty("ClearAtInput",  function() { return clear; }, function(_v) { clear = _v; } ); // HtmlView Page linking property 'ClearAtInput' for element 'tracebottom'
          _view.tracebottom2.linkProperty("Maximum",  function() { return npt; }, function(_v) { npt = _v; } ); // HtmlView Page linking property 'Maximum' for element 'tracebottom2'
          _view.tracebottom2.linkProperty("Connected",  function() { return _isPlaying&&dt>0; } ); // HtmlView Page linking property 'Connected' for element 'tracebottom2'
          _view.tracebottom2.linkProperty("InputX",  function() { return xp2; }, function(_v) { xp2 = _v; } ); // HtmlView Page linking property 'InputX' for element 'tracebottom2'
          _view.tracebottom2.linkProperty("InputY",  function() { return -yp2; } ); // HtmlView Page linking property 'InputY' for element 'tracebottom2'
          _view.tracebottom2.linkProperty("ClearAtInput",  function() { return clear; }, function(_v) { clear = _v; } ); // HtmlView Page linking property 'ClearAtInput' for element 'tracebottom2'
          _view.arrow.linkProperty("Rotate",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Rotate' for element 'arrow'
          _view.arrow.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'arrow'
          _view.arrow.linkProperty("Y",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'Y' for element 'arrow'
          _view.arrow.linkProperty("Visibility",  function() { return t>0; } ); // HtmlView Page linking property 'Visibility' for element 'arrow'
          _view.arrow2.linkProperty("Rotate",  function() { return -theta; } ); // HtmlView Page linking property 'Rotate' for element 'arrow2'
          _view.arrow2.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'arrow2'
          _view.arrow2.linkProperty("Y",  function() { return -yp; } ); // HtmlView Page linking property 'Y' for element 'arrow2'
          _view.arrow2.linkProperty("Visibility",  function() { return t>0; } ); // HtmlView Page linking property 'Visibility' for element 'arrow2'
          _view.smallermagnetAcompass.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'smallermagnetAcompass'
          _view.smallermagnetAcompass.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'smallermagnetAcompass'
          _view.triangleN.setAction("OnRelease", function(_data,_info) {
  //store value
  xs = x;
  ys = y;
  t=0; //set t =0
  dt = 0.1; // force compass to work after set is drawn
  dtset=0;
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'triangleN'
          _view.triangleN.linkProperty("Rotate",  function() { return cta+pi/2; } ); // HtmlView Page linking property 'Rotate' for element 'triangleN'
          _view.triangleN.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'triangleN'
          _view.triangleN.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'triangleN'
          _view.triangleN.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  cta2=-cta; // second magnet neddle
  y2=-y;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'triangleN'
          _view.mN2.linkProperty("Rotate",  function() { return cta; }, function(_v) { cta = _v; } ); // HtmlView Page linking property 'Rotate' for element 'mN2'
          _view.mN2.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  cta2=-cta; // second magnet neddle
  y2=-y;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'mN2'
          _view.mN2.setAction("OnRelease", function(_data,_info) {
  //store value
  xs = x;
  ys = y;
  t=0; //set t =0
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'mN2'
          _view.mN2.linkProperty("SizeX",  function() { return w*0.5; } ); // HtmlView Page linking property 'SizeX' for element 'mN2'
          _view.mN2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mN2'
          _view.mN2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'mN2'
          _view.mN2.linkProperty("SizeY",  function() { return size*0.5; } ); // HtmlView Page linking property 'SizeY' for element 'mN2'
          _view.triangles.setAction("OnRelease", function(_data,_info) {
  //store value
  xs = x;
  ys = y;
  t=0; //set t =0
  dt = 0.1; // force compass to work after set is drawn
  dtset=0;
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'triangles'
          _view.triangles.linkProperty("Rotate",  function() { return cta-pi/2; } ); // HtmlView Page linking property 'Rotate' for element 'triangles'
          _view.triangles.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'triangles'
          _view.triangles.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'triangles'
          _view.triangles.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  cta2=-cta; // second magnet neddle
  y2=-y;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'triangles'
          _view.mS2.linkProperty("Rotate",  function() { return cta; }, function(_v) { cta = _v; } ); // HtmlView Page linking property 'Rotate' for element 'mS2'
          _view.mS2.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  cta2=-cta; // second magnet neddle
  y2=-y;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'mS2'
          _view.mS2.setAction("OnRelease", function(_data,_info) {
  //store value
  xs = x;
  ys = y;
  t=0; //set t =0
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'mS2'
          _view.mS2.linkProperty("SizeX",  function() { return w*0.5; } ); // HtmlView Page linking property 'SizeX' for element 'mS2'
          _view.mS2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mS2'
          _view.mS2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'mS2'
          _view.mS2.linkProperty("SizeY",  function() { return size*0.5; } ); // HtmlView Page linking property 'SizeY' for element 'mS2'
          _view.smallermagnetBcompass.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'smallermagnetBcompass'
          _view.smallermagnetBcompass.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'smallermagnetBcompass'
          _view.mN22.linkProperty("Rotate",  function() { return cta2; }, function(_v) { cta2 = _v; } ); // HtmlView Page linking property 'Rotate' for element 'mN22'
          _view.mN22.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  y=-y2;
  cta=-cta2;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'mN22'
          _view.mN22.setAction("OnRelease", function(_data,_info) {
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'mN22'
          _view.mN22.linkProperty("SizeX",  function() { return w*0.5; } ); // HtmlView Page linking property 'SizeX' for element 'mN22'
          _view.mN22.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mN22'
          _view.mN22.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'mN22'
          _view.mN22.linkProperty("SizeY",  function() { return size*0.5; } ); // HtmlView Page linking property 'SizeY' for element 'mN22'
          _view.triangleN2.setAction("OnRelease", function(_data,_info) {
  //store value
  xs = x;
  ys = y;
  t=0; //set t =0
  dt = 0.1; // force compass to work after set is drawn
  dtset=0;
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'triangleN2'
          _view.triangleN2.linkProperty("Rotate",  function() { return cta2+pi/2; } ); // HtmlView Page linking property 'Rotate' for element 'triangleN2'
          _view.triangleN2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'triangleN2'
          _view.triangleN2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'triangleN2'
          _view.triangleN2.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  y=-y2;
  cta=-cta2;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'triangleN2'
          _view.mS22.linkProperty("Rotate",  function() { return cta2; }, function(_v) { cta2 = _v; } ); // HtmlView Page linking property 'Rotate' for element 'mS22'
          _view.mS22.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  y=-y2;
  cta=-cta2;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'mS22'
          _view.mS22.setAction("OnRelease", function(_data,_info) {
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'mS22'
          _view.mS22.linkProperty("SizeX",  function() { return w*0.5; } ); // HtmlView Page linking property 'SizeX' for element 'mS22'
          _view.mS22.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'mS22'
          _view.mS22.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'mS22'
          _view.mS22.linkProperty("SizeY",  function() { return size*0.5; } ); // HtmlView Page linking property 'SizeY' for element 'mS22'
          _view.triangles2.setAction("OnRelease", function(_data,_info) {
  //store value
  xs = x;
  ys = y;
  t=0; //set t =0
  dt = 0.1; // force compass to work after set is drawn
  dtset=0;
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'triangles2'
          _view.triangles2.linkProperty("Rotate",  function() { return cta2-pi/2; } ); // HtmlView Page linking property 'Rotate' for element 'triangles2'
          _view.triangles2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'triangles2'
          _view.triangles2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'triangles2'
          _view.triangles2.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  y=-y2;
  cta=-cta2;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'triangles2'
          _view.topdrag.setAction("OnRelease", function(_data,_info) {
  if(_isPaused)_play();

}); // HtmlView Page setting action 'OnRelease' for element 'topdrag'
          _view.topdrag.linkProperty("SizeX",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'SizeX' for element 'topdrag'
          _view.topdrag.linkProperty("Rotate",  function() { return cta; }, function(_v) { cta = _v; } ); // HtmlView Page linking property 'Rotate' for element 'topdrag'
          _view.topdrag.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'topdrag'
          _view.topdrag.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'topdrag'
          _view.topdrag.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'topdrag'
          _view.topdrag.setAction("OnDrag", function(_data,_info) {
  //clear=true;//introduced by frem to clear screen
  cta2=-cta; // second magnet neddle
  y2=-y;
  drag();

}); // HtmlView Page setting action 'OnDrag' for element 'topdrag'
          _view.setField.linkProperty("X",  function() { return xm; }, function(_v) { xm = _v; } ); // HtmlView Page linking property 'X' for element 'setField'
          _view.setField.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'setField'
          _view.trailSet.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'trailSet'
          _view.trailSet.linkProperty("Connected",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Connected' for element 'trailSet'
          _view.trailSet.linkProperty("InputX",  function() { return xpset; }, function(_v) { xpset = _v; } ); // HtmlView Page linking property 'InputX' for element 'trailSet'
          _view.trailSet.linkProperty("InputY",  function() { return ypset; }, function(_v) { ypset = _v; } ); // HtmlView Page linking property 'InputY' for element 'trailSet'
          _view.trailSet2.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'trailSet2'
          _view.trailSet2.linkProperty("Connected",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Connected' for element 'trailSet2'
          _view.trailSet2.linkProperty("InputX",  function() { return xp2set; }, function(_v) { xp2set = _v; } ); // HtmlView Page linking property 'InputX' for element 'trailSet2'
          _view.trailSet2.linkProperty("InputY",  function() { return yp2set; }, function(_v) { yp2set = _v; } ); // HtmlView Page linking property 'InputY' for element 'trailSet2'
          _view.arrowSet.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet'
          _view.arrowSet.linkProperty("Transformation",  function() { return angle; }, function(_v) { angle = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrowSet'
          _view.arrowSet.linkProperty("X",  function() { return xpset; }, function(_v) { xpset = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet'
          _view.arrowSet.linkProperty("Y",  function() { return ypset; }, function(_v) { ypset = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet'
          _view.arrowSet3.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet3'
          _view.arrowSet3.linkProperty("Transformation",  function() { return angle2; }, function(_v) { angle2 = _v; } ); // HtmlView Page linking property 'Transformation' for element 'arrowSet3'
          _view.arrowSet3.linkProperty("X",  function() { return xp2set; }, function(_v) { xp2set = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet3'
          _view.arrowSet3.linkProperty("Y",  function() { return yp2set; }, function(_v) { yp2set = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet3'
          _view.shapeSet.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSet'
          _view.shapeSet.linkProperty("X",  function() { return xpset; }, function(_v) { xpset = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSet'
          _view.shapeSet.linkProperty("Y",  function() { return ypset; }, function(_v) { ypset = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSet'
          _view.shapeSet.linkProperty("Visibility",  function() { return dtset>0; } ); // HtmlView Page linking property 'Visibility' for element 'shapeSet'
          _view.shapeSet2.linkProperty("NumberOfElements",  function() { return ns; }, function(_v) { ns = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'shapeSet2'
          _view.shapeSet2.linkProperty("X",  function() { return xpsetinit; }, function(_v) { xpsetinit = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSet2'
          _view.shapeSet2.linkProperty("Y",  function() { return ypsetinit; }, function(_v) { ypsetinit = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSet2'
          _view.trailSet3.linkProperty("NumberOfElements",  function() { return totalpoints; }, function(_v) { totalpoints = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'trailSet3'
          _view.trailSet3.linkProperty("InputX",  function() { return xpsetinit; }, function(_v) { xpsetinit = _v; } ); // HtmlView Page linking property 'InputX' for element 'trailSet3'
          _view.trailSet3.linkProperty("InputY",  function() { return ypsetinit; }, function(_v) { ypsetinit = _v; } ); // HtmlView Page linking property 'InputY' for element 'trailSet3'
          _view.N.linkProperty("X",  function() { return xm-w/2; } ); // HtmlView Page linking property 'X' for element 'N'
          _view.N.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'N'
          _view.S.linkProperty("X",  function() { return xm+w/2; } ); // HtmlView Page linking property 'X' for element 'S'
          _view.S.linkProperty("Y",  function() { return ym; }, function(_v) { ym = _v; } ); // HtmlView Page linking property 'Y' for element 'S'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(100);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function magnetbar_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = magnetbar_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./magnetbar_Intro_1.html');

  return _view;
} // end of main function

function magnetbar_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "4%",    "margin-left":"0%",    "left":"3%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playpause", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playpause'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playpause'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playpause'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Text","step") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","95vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("Background","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("TRMessage","Bar Magnet Field Lines") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("XTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"arrowdrawnattimet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowdrawnattimet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet2", _view.arrowdrawnattimet) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet2'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowSet2'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSet2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet2'
      .setProperty("MarkEndHeight",50) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndHeight' for element 'arrowSet2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet2'
      .setProperty("MarkEndStroke",3) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndStroke' for element 'arrowSet2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrowSet2'
      .setProperty("MarkEndWidth",30) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndWidth' for element 'arrowSet2'
      .setProperty("LineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet22", _view.arrowdrawnattimet) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet22'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowSet22'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSet22'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet22'
      .setProperty("MarkEndHeight",50) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndHeight' for element 'arrowSet22'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet22'
      .setProperty("MarkEndStroke",3) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndStroke' for element 'arrowSet22'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet22'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrowSet22'
      .setProperty("MarkEndWidth",30) // EJsS HtmlView.HtmlView Page: setting property 'MarkEndWidth' for element 'arrowSet22'
      .setProperty("LineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet22'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mS", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mS'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mS'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mS'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mS'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mS'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mS'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mS'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mN3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mN3'
      .setProperty("FillColor","red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mN3'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mN3'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mN3'
      .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mN3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mN3'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mN3'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"mgnetdraggable", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'mgnetdraggable'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"tracetop", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'tracetop'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tracetop'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'tracetop'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tracetop'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"xp", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'xp'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xp'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'xp'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xp'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'xp'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"tracetop2", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'tracetop2'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tracetop2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'tracetop2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tracetop2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"xp2", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'xp2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xp2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'xp2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xp2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'xp2'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"tracebottom", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'tracebottom'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tracebottom'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'tracebottom'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tracebottom'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"tracebottom2", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'tracebottom2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'tracebottom2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'tracebottom2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'tracebottom2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"arrow2", _view.mgnetdraggable) // EJsS HtmlView.HtmlView Page: declaration of element 'arrow2'
      .setProperty("MarkEnd","TRIANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrow2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrow2'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrow2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'arrow2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"smallermagnetAcompass", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'smallermagnetAcompass'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"triangleN", _view.smallermagnetAcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'triangleN'
      .setProperty("PointsY",[0,0,1]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'triangleN'
      .setProperty("PointsX",[-0.5,0.5,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'triangleN'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'triangleN'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'triangleN'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'triangleN'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mN2", _view.smallermagnetAcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'mN2'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mN2'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mN2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mN2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mN2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'mN2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mN2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mN2'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"triangles", _view.smallermagnetAcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'triangles'
      .setProperty("PointsY",[0,0,1]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'triangles'
      .setProperty("PointsX",[-0.5,0.5,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'triangles'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'triangles'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'triangles'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'triangles'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mS2", _view.smallermagnetAcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'mS2'
      .setProperty("FillColor","red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mS2'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mS2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mS2'
      .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mS2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'mS2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mS2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mS2'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"smallermagnetBcompass", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'smallermagnetBcompass'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mN22", _view.smallermagnetBcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'mN22'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mN22'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mN22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mN22'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mN22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'mN22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mN22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mN22'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"triangleN2", _view.smallermagnetBcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'triangleN2'
      .setProperty("PointsY",[0,0,1]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'triangleN2'
      .setProperty("PointsX",[-0.5,0.5,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'triangleN2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'triangleN2'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'triangleN2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'triangleN2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"mS22", _view.smallermagnetBcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'mS22'
      .setProperty("FillColor","red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'mS22'
      .setProperty("RelativePosition","EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'mS22'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'mS22'
      .setProperty("LineColor","black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'mS22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'mS22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'mS22'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'mS22'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"triangles2", _view.smallermagnetBcompass) // EJsS HtmlView.HtmlView Page: declaration of element 'triangles2'
      .setProperty("PointsY",[0,0,1]) // EJsS HtmlView.HtmlView Page: setting property 'PointsY' for element 'triangles2'
      .setProperty("PointsX",[-0.5,0.5,0]) // EJsS HtmlView.HtmlView Page: setting property 'PointsX' for element 'triangles2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'triangles2'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'triangles2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'triangles2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"topdrag", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topdrag'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'topdrag'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'topdrag'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'topdrag'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'topdrag'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'topdrag'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"setField", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'setField'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve", _view.setField) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve'
      ;

    _view._addElement(EJSS_DRAWING2D.trailSet,"trailSet", _view.setField) // EJsS HtmlView.HtmlView Page: declaration of element 'trailSet'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailSet'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trailSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trailSet'
      ;

    _view._addElement(EJSS_DRAWING2D.trailSet,"trailSet2", _view.setField) // EJsS HtmlView.HtmlView Page: declaration of element 'trailSet2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trailSet2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trailSet2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trailSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet", _view.setField) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSet'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'arrowSet'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet3", _view.setField) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet3'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'arrowSet3'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'arrowSet3'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'arrowSet3'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'arrowSet3'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet", _view.setField) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSet'
      .setProperty("FillColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSet'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSet'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"initializeFieldline", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initializeFieldline'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'initializeFieldline'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet2", _view.initializeFieldline) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSet2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSet2'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shapeSet2'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shapeSet2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.trailSet,"trailSet3", _view.initializeFieldline) // EJsS HtmlView.HtmlView Page: declaration of element 'trailSet3'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trailSet3'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"N", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'N'
      .setProperty("Text","N") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'N'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"S", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'S'
      .setProperty("Text","S") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'S'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Bar Magnet Field Line Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/magnetbar/Screen Shot 2018-04-09 at 11.27.41 AM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/01authorlookang50x50.png" />
 Fu-Kwun Hwang; Fremont Teng; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fu-Kwun Hwang; Fremont Teng; Loo Kang Wee. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new magnetbar("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/05electricitynmagnetism_20magnetism/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
