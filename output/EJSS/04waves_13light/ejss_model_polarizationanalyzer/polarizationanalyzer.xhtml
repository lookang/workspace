<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Polariser Analyzer (App)</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function polarizationanalyzer(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var drawingWidth; // EjsS Model.Variables.Var Table.drawingWidth
  var drawingHeight; // EjsS Model.Variables.Var Table.drawingHeight
  var frontCamera; // EjsS Model.Variables.Var Table.frontCamera
  var backCamera; // EjsS Model.Variables.Var Table.backCamera
  var pauseCamera; // EjsS Model.Variables.Var Table.pauseCamera

  var alpha; // EjsS Model.Variables.orientation.alpha
  var beta; // EjsS Model.Variables.orientation.beta
  var gamma; // EjsS Model.Variables.orientation.gamma

  var minX; // EjsS Model.Variables.Free.minX
  var maxX; // EjsS Model.Variables.Free.maxX
  var firstPos; // EjsS Model.Variables.Free.firstPos
  var polarData; // EjsS Model.Variables.Free.polarData
  var r; // EjsS Model.Variables.Free.r
  var g; // EjsS Model.Variables.Free.g
  var b; // EjsS Model.Variables.Free.b
  var index; // EjsS Model.Variables.Free.index
  var realData; // EjsS Model.Variables.Free.realData
  var cx; // EjsS Model.Variables.Free.cx
  var cy; // EjsS Model.Variables.Free.cy

  var fonttop; // EjsS Model.Variables.lookang.fonttop
  var font; // EjsS Model.Variables.lookang.font
  var fontaxis; // EjsS Model.Variables.lookang.fontaxis
  var findLight; // EjsS Model.Variables.lookang.findLight

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      drawingWidth : drawingWidth,
      drawingHeight : drawingHeight,
      frontCamera : frontCamera,
      backCamera : backCamera,
      pauseCamera : pauseCamera,
      alpha : alpha,
      beta : beta,
      gamma : gamma,
      minX : minX,
      maxX : maxX,
      firstPos : firstPos,
      polarData : polarData,
      r : r,
      g : g,
      b : b,
      index : index,
      realData : realData,
      cx : cx,
      cy : cy,
      fonttop : fonttop,
      font : font,
      fontaxis : fontaxis,
      findLight : findLight
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      drawingWidth : drawingWidth,
      drawingHeight : drawingHeight,
      frontCamera : frontCamera,
      backCamera : backCamera,
      pauseCamera : pauseCamera,
      alpha : alpha,
      beta : beta,
      gamma : gamma,
      minX : minX,
      maxX : maxX,
      firstPos : firstPos,
      polarData : polarData,
      r : r,
      g : g,
      b : b,
      index : index,
      realData : realData,
      cx : cx,
      cy : cy,
      fonttop : fonttop,
      font : font,
      fontaxis : fontaxis,
      findLight : findLight
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.drawingWidth != "undefined") drawingWidth = json.drawingWidth;
    if(typeof json.drawingHeight != "undefined") drawingHeight = json.drawingHeight;
    if(typeof json.frontCamera != "undefined") frontCamera = json.frontCamera;
    if(typeof json.backCamera != "undefined") backCamera = json.backCamera;
    if(typeof json.pauseCamera != "undefined") pauseCamera = json.pauseCamera;
    if(typeof json.alpha != "undefined") alpha = json.alpha;
    if(typeof json.beta != "undefined") beta = json.beta;
    if(typeof json.gamma != "undefined") gamma = json.gamma;
    if(typeof json.minX != "undefined") minX = json.minX;
    if(typeof json.maxX != "undefined") maxX = json.maxX;
    if(typeof json.firstPos != "undefined") firstPos = json.firstPos;
    if(typeof json.polarData != "undefined") polarData = json.polarData;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.index != "undefined") index = json.index;
    if(typeof json.realData != "undefined") realData = json.realData;
    if(typeof json.cx != "undefined") cx = json.cx;
    if(typeof json.cy != "undefined") cy = json.cy;
    if(typeof json.fonttop != "undefined") fonttop = json.fonttop;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontaxis != "undefined") fontaxis = json.fontaxis;
    if(typeof json.findLight != "undefined") findLight = json.findLight;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.drawingWidth != "undefined") drawingWidth = json.drawingWidth;
    if(typeof json.drawingHeight != "undefined") drawingHeight = json.drawingHeight;
    if(typeof json.frontCamera != "undefined") frontCamera = json.frontCamera;
    if(typeof json.backCamera != "undefined") backCamera = json.backCamera;
    if(typeof json.pauseCamera != "undefined") pauseCamera = json.pauseCamera;
    if(typeof json.alpha != "undefined") alpha = json.alpha;
    if(typeof json.beta != "undefined") beta = json.beta;
    if(typeof json.gamma != "undefined") gamma = json.gamma;
    if(typeof json.minX != "undefined") minX = json.minX;
    if(typeof json.maxX != "undefined") maxX = json.maxX;
    if(typeof json.firstPos != "undefined") firstPos = json.firstPos;
    if(typeof json.polarData != "undefined") polarData = json.polarData;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.index != "undefined") index = json.index;
    if(typeof json.realData != "undefined") realData = json.realData;
    if(typeof json.cx != "undefined") cx = json.cx;
    if(typeof json.cy != "undefined") cy = json.cy;
    if(typeof json.fonttop != "undefined") fonttop = json.fonttop;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.fontaxis != "undefined") fontaxis = json.fontaxis;
    if(typeof json.findLight != "undefined") findLight = json.findLight;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["dialogbox"] = true;
    __pagesEnabled["privilege"] = true;
    __pagesEnabled["Evol Page"] = true;
  });

  _model.addToReset(function() {
    drawingWidth = window.innerWidth*0.95; // EjsS Model.Variables.Var Table.drawingWidth
    drawingHeight = window.innerHeight*0.45; // EjsS Model.Variables.Var Table.drawingHeight
    frontCamera = true; // EjsS Model.Variables.Var Table.frontCamera
    backCamera = false; // EjsS Model.Variables.Var Table.backCamera
    pauseCamera = false; // EjsS Model.Variables.Var Table.pauseCamera
  });

  _model.addToReset(function() {
    alpha = 0; // EjsS Model.Variables.orientation.alpha
    beta = 0; // EjsS Model.Variables.orientation.beta
    gamma = 0; // EjsS Model.Variables.orientation.gamma
  });

  _model.addToReset(function() {
    minX = 0; // EjsS Model.Variables.Free.minX
    maxX = 360; // EjsS Model.Variables.Free.maxX
    firstPos = [0,0]; // EjsS Model.Variables.Free.firstPos
    polarData = []; // EjsS Model.Variables.Free.polarData
    realData = []; // EjsS Model.Variables.Free.realData
    cx = 0; // EjsS Model.Variables.Free.cx
    cy = 0; // EjsS Model.Variables.Free.cy
  });

  _model.addToReset(function() {
    fonttop = "normal normal 1.5vw "; // EjsS Model.Variables.lookang.fonttop
    font = "normal normal 2vw "; // EjsS Model.Variables.lookang.font
    fontaxis = "normal normal 1vw "; // EjsS Model.Variables.lookang.fontaxis
    findLight = false; // EjsS Model.Variables.lookang.findLight
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function polar(imgData, function_luminance) {  // > CustomCode.polar:1
    var selector = _view.first.getPixelPosition();  // > CustomCode.polar:2
    var row = Math.floor(selector[1]);  // > CustomCode.polar:3
    var col = Math.floor(selector[0]);    // > CustomCode.polar:4
    index = Math.floor((col + row * imgData.width) * 4);  // > CustomCode.polar:5
    r = imgData.data[index];  // > CustomCode.polar:6
    g = imgData.data[index + 1];  // > CustomCode.polar:7
    b = imgData.data[index + 2];  // > CustomCode.polar:8
    var brightness = function_luminance(r,g,b);  // > CustomCode.polar:9
    var angle = Math.floor(alpha);  // > CustomCode.polar:10
    polarData[angle] = [angle,brightness];  // > CustomCode.polar:11
    realData[angle] = true;  // > CustomCode.polar:12
      // > CustomCode.polar:13
    cx = angle;  // > CustomCode.polar:14
    cy = brightness;  // > CustomCode.polar:15
  }  // > CustomCode.polar:16

  function estimation () {  // > CustomCode.estimation:1
    var first = 1;  // > CustomCode.estimation:2
    var i = 0;  // > CustomCode.estimation:3
    while(i<polarData.length) {  // > CustomCode.estimation:4
      if (realData[i]) {  // > CustomCode.estimation:5
        first = polarData[i][1]; // first element with real value  // > CustomCode.estimation:6
        i++;  // > CustomCode.estimation:7
      } else {  // > CustomCode.estimation:8
        var j = i+1;  // > CustomCode.estimation:9
        var last = first  // > CustomCode.estimation:10
        while(j<polarData.length && !realData[j]) {  // > CustomCode.estimation:11
          last = polarData[j][1]; // second element with real value        // > CustomCode.estimation:12
          j++;  // > CustomCode.estimation:13
        }  // > CustomCode.estimation:14
        if (j == polarData.length) last = 1;  // > CustomCode.estimation:15
        // estimate values between first and last  // > CustomCode.estimation:16
        for (var k=i; k<j; k++) {0  // > CustomCode.estimation:17
          var part = (last-first)/(j-i+1);  // > CustomCode.estimation:18
          var filter = (k-i)/(j-i);  // > CustomCode.estimation:19
          polarData[k][1] = first + (k-i)*part*(filter*filter*filter);  // > CustomCode.estimation:20
        }  // > CustomCode.estimation:21
        first = last;  // > CustomCode.estimation:22
        i = j+1;  // > CustomCode.estimation:23
      }  // > CustomCode.estimation:24
    }  // > CustomCode.estimation:25
  }  // > CustomCode.estimation:26

  function hsl_luminance(rr,gg,bb) {  // > CustomCode.luminance:1
    r /= 255, g /= 255, b /= 255;  // > CustomCode.luminance:2
    var max = Math.max(r, g, b), min = Math.min(r, g, b);  // > CustomCode.luminance:3
    var h, s, l = (max + min) / 2;  // > CustomCode.luminance:4
    if (max == min) {  // > CustomCode.luminance:5
      h = s = 0; // achromatic  // > CustomCode.luminance:6
    } else {  // > CustomCode.luminance:7
      var d = max - min;  // > CustomCode.luminance:8
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);  // > CustomCode.luminance:9
      switch (max) {  // > CustomCode.luminance:10
          case r:  // > CustomCode.luminance:11
              h = (g - b) / d + (g < b ? 6 : 0);  // > CustomCode.luminance:12
              break;  // > CustomCode.luminance:13
          case g:  // > CustomCode.luminance:14
              h = (b - r) / d + 2;  // > CustomCode.luminance:15
              break;  // > CustomCode.luminance:16
          case b:  // > CustomCode.luminance:17
              h = (r - g) / d + 4;  // > CustomCode.luminance:18
              break;  // > CustomCode.luminance:19
      }  // > CustomCode.luminance:20
      h /= 6;  // > CustomCode.luminance:21
    }  // > CustomCode.luminance:22
    return l;  // > CustomCode.luminance:23
  }  // > CustomCode.luminance:24
  // other alternatives of intensity  // > CustomCode.luminance:25
  function standard_luminance(r,g,b) {  // > CustomCode.luminance:26
     return (0.2126*r + 0.7152*g + 0.0722*b)/255;  // > CustomCode.luminance:27
  }  // > CustomCode.luminance:28
  function perceived1_luminance(r,g,b) {  // > CustomCode.luminance:29
     return (0.299*r + 0.587*g + 0.114*b)/255;  // > CustomCode.luminance:30
  }  // > CustomCode.luminance:31
  function perceived2_luminance(r,g,b) {  // > CustomCode.luminance:32
     return (Math.sqrt( 0.299*r^2 + 0.587*g^2 + 0.114*b^2 ))/255;  // > CustomCode.luminance:33
  }  // > CustomCode.luminance:34

  function handleOrientation(event) {  // > CustomCode.orientation:1
    beta = event.beta || 0;  // In degree in the range [-180,180], x, 'front to back'  // > CustomCode.orientation:2
    gamma = event.gamma || 0; // In degree in the range [-90,90], y, 'left to right'  // > CustomCode.orientation:3
    alpha = event.alpha || 0; // 0-360, z, compass orientation  // > CustomCode.orientation:4
  }  // > CustomCode.orientation:5

  function init () {  // > CustomCode.init:1
    polarData = new Array(360);  // > CustomCode.init:2
    for(var i=0; i<polarData.length; i++) {  // > CustomCode.init:3
      polarData[i] = [i,1];  // > CustomCode.init:4
      realData[i] = false;  // > CustomCode.init:5
    }  // > CustomCode.init:6
    alpha = 0;  // > CustomCode.init:7
  }  // > CustomCode.init:8

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    init();  // > Initialization.Init Page:1
    window.addEventListener('deviceorientation', handleOrientation);  // > Initialization.Init Page:2
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["dialogbox"]) return;
    //_tools.showOkDialog("ttts");  // > Initialization.dialogbox:1
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["privilege"]) return;
    // only for app  // > Initialization.privilege:1
    if (typeof cordova != 'undefined' &&   // > Initialization.privilege:2
        typeof cordova.plugins != 'undefined' &&  // > Initialization.privilege:3
        typeof cordova.plugins.diagnostic != 'undefined') {  // > Initialization.privilege:4
      var cpd = cordova.plugins.diagnostic;  // > Initialization.privilege:5
      function success(status) {  // > Initialization.privilege:6
        if (cpd.permissionStatus.GRANTED !== status) {  // > Initialization.privilege:7
            alert('Allow the requested permission');  // > Initialization.privilege:8
        }   // > Initialization.privilege:9
      }  // > Initialization.privilege:10
      function failure(error) {  // > Initialization.privilege:11
        alert('Something was wrong with your camera');  // > Initialization.privilege:12
      }  // > Initialization.privilege:13
      cpd.requestRuntimePermission(success, failure, cpd.permission.CAMERA);  // > Initialization.privilege:14
    }  // > Initialization.privilege:15
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    // image source  // > Evolution.Evol Page:1
    var imgData;  // > Evolution.Evol Page:2
    var wData;  // > Evolution.Evol Page:3
    var hData;  // > Evolution.Evol Page:4
    imgData = _view.camera.getSnapshot();  // > Evolution.Evol Page:5
    wData = Math.floor(_view.camera.getWidth());  // > Evolution.Evol Page:6
    hData = Math.floor(_view.camera.getHeight());  // > Evolution.Evol Page:7
    polar(imgData,standard_luminance);  // > Evolution.Evol Page:8
    estimation()  // > Evolution.Evol Page:9
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new polarizationanalyzer_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.sourcePanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'sourcePanel'
          _view.topLabel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'topLabel'
          _view.frontCamera.linkProperty("Checked",  function() { return frontCamera; }, function(_v) { frontCamera = _v; } ); // HtmlView Page linking property 'Checked' for element 'frontCamera'
          _view.frontCamera.setAction("OnCheckOn", function(_data,_info) {
  _view.camera.setFrontCam(true);

}); // HtmlView Page setting action 'OnCheckOn' for element 'frontCamera'
          _view.frontCamera.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'frontCamera'
          _view.changeCamera.setAction("OffClick", function(_data,_info) {
  backCamera=true;
  _view.camera.setFrontCam(false);
  init();

}); // HtmlView Page setting action 'OffClick' for element 'changeCamera'
          _view.changeCamera.setAction("OnClick", function(_data,_info) {
  frontCamera=true;
  _view.camera.setFrontCam(true);
  init();

}); // HtmlView Page setting action 'OnClick' for element 'changeCamera'
          _view.changeCamera.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'changeCamera'
          _view.backCamera.linkProperty("Checked",  function() { return backCamera; }, function(_v) { backCamera = _v; } ); // HtmlView Page linking property 'Checked' for element 'backCamera'
          _view.backCamera.linkProperty("Font",  function() { return fonttop; }, function(_v) { fonttop = _v; } ); // HtmlView Page linking property 'Font' for element 'backCamera'
          _view.backCamera.setAction("OnCheckOn", function(_data,_info) {
  _view.camera.setFrontCam(false);

}); // HtmlView Page setting action 'OnCheckOn' for element 'backCamera'
          _view.executionPanel.linkProperty("Visibility",  function() { return (frontCamera||backCamera); } ); // HtmlView Page linking property 'Visibility' for element 'executionPanel'
          _view.runPauseButton.setAction("OffClick", function(_data,_info) {
  _view.camera.pause(true);

}); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return pauseCamera; }, function(_v) { pauseCamera = _v; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", function(_data,_info) {
  _view.camera.play();

}); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'runPauseButton'
          _view.alpha.linkProperty("Text",  function() { return "∠ = " + Math.floor(alpha)+" °"; } ); // HtmlView Page linking property 'Text' for element 'alpha'
          _view.camera.linkProperty("Height",  function() { return drawingHeight; }, function(_v) { drawingHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'camera'
          _view.camera.linkProperty("Visibility",  function() { return (frontCamera||backCamera); } ); // HtmlView Page linking property 'Visibility' for element 'camera'
          _view.camera.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'camera'
          _view.drawingPanel.linkProperty("Height",  function() { return drawingHeight; }, function(_v) { drawingHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnDoubleClick", function(_data,_info) {
  if (pauseCamera==true){
   _view.camera.pause(true); 
  }
  else if (pauseCamera==false){
   _view.camera.play();
    }

}); // HtmlView Page setting action 'OnDoubleClick' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnOrientationChange", function(_data,_info) {
  drawingWidth=window.innerWidth*0.95;//to make sure to redraw
  drawingHeight=window.innerHeight*0.45;

}); // HtmlView Page setting action 'OnOrientationChange' for element 'drawingPanel'
          _view.drawingPanel.setAction("OnResize", function(_data,_info) {
  drawingWidth=window.innerWidth*0.95;//to make sure to redraw
  drawingHeight=window.innerHeight*0.45;

}); // HtmlView Page setting action 'OnResize' for element 'drawingPanel'
          _view.first.linkProperty("Position",  function() { return firstPos; }, function(_v) { firstPos = _v; } ); // HtmlView Page linking property 'Position' for element 'first'
          _view.plottingPanel.linkProperty("Height",  function() { return drawingHeight; }, function(_v) { drawingHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("Width",  function() { return drawingWidth; }, function(_v) { drawingWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisYFont' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  if (pauseCamera==true){
   _view.camera.pause(true); 
   
  }
  else if (pauseCamera==false){
   _view.camera.play();
    }

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleYFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleYFont' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDrag", function(_data,_info) {
  if (pauseCamera==true){
   _view.camera.pause(true); 
   
  }
  else if (pauseCamera==false){
   _view.camera.play();
    }

}); // HtmlView Page setting action 'OnDrag' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return maxX; }, function(_v) { maxX = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return minX; }, function(_v) { minX = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("AxisXFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'AxisXFont' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TitleFont",  function() { return fontaxis; }, function(_v) { fontaxis = _v; } ); // HtmlView Page linking property 'TitleFont' for element 'plottingPanel'
          _view.polar.linkProperty("Input",  function() { return polarData; }, function(_v) { polarData = _v; } ); // HtmlView Page linking property 'Input' for element 'polar'
          _view.current.linkProperty("X",  function() { return cx; }, function(_v) { cx = _v; } ); // HtmlView Page linking property 'X' for element 'current'
          _view.current.linkProperty("Y",  function() { return cy; }, function(_v) { cy = _v; } ); // HtmlView Page linking property 'Y' for element 'current'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function polarizationanalyzer_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = polarizationanalyzer_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./polarizationanalyzer_Intro_1.html');

  return _view;
} // end of main function

function polarizationanalyzer_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singleDrawingPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singleDrawingPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"sourcePanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sourcePanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Data Logger:</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"frontCamera", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'frontCamera'
      .setProperty("Tooltip","front camera") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'frontCamera'
      .setProperty("Text"," 📱") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'frontCamera'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'frontCamera'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"changeCamera", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'changeCamera'
      .setProperty("CSS",{"border-style":"none"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'changeCamera'
      .setProperty("Tooltip","Front/Back Camera") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'changeCamera'
      .setProperty("ImageOnUrl","./datalogger/camera-swtich-drawnby-leongster.jpeg") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'changeCamera'
      .setProperty("ImageOffUrl","./datalogger/camera-swtich-drawnby-leongster.jpeg") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'changeCamera'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"backCamera", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'backCamera'
      .setProperty("Tooltip","back camera") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'backCamera'
      .setProperty("Text"," 📷") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'backCamera'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'backCamera'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.sourcePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("CSS",{"border-style":"none"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'runPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"alpha", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'alpha'
      .setProperty("Font","normal bold 30px Georgia, serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'alpha'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"cameraPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cameraPanel'
      ;

    _view._addElement(EJSS_INTERFACE.motionJPEG,"camera", _view.cameraPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'camera'
      .setProperty("On",true) // EJsS HtmlView.HtmlView Page: setting property 'On' for element 'camera'
      .setProperty("AsBackground",true) // EJsS HtmlView.HtmlView Page: setting property 'AsBackground' for element 'camera'
      .setProperty("UseWebCam",true) // EJsS HtmlView.HtmlView Page: setting property 'UseWebCam' for element 'camera'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'camera'
      .setProperty("Flip",true) // EJsS HtmlView.HtmlView Page: setting property 'Flip' for element 'camera'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.cameraPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("TRMessage","Polarization Analyzer") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'drawingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'drawingPanel'
      .setProperty("Background","rgba(0,0,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"first", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'first'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'first'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'first'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'first'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'first'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'first'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'first'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'first'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'first'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'first'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"inline-block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Gutters",[50,0,0,50]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",1) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("GuttersLineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'GuttersLineWidth' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("XTickStep",10) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",0.2) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("GridXLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridXLineColor' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXLineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'GridXLineWidth' for element 'plottingPanel'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("MaximumY",1) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("GridYLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridYLineColor' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("TitleY","🔅luma") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","∠ angle in °") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("MarginX",5) // EJsS HtmlView.HtmlView Page: setting property 'MarginX' for element 'plottingPanel'
      .setProperty("MarginY",10) // EJsS HtmlView.HtmlView Page: setting property 'MarginY' for element 'plottingPanel'
      .setProperty("GridYLineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'GridYLineWidth' for element 'plottingPanel'
      .setProperty("LineWidth",0) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"polar", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'polar'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'polar'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'polar'
      .setProperty("ClearAtInput",true) // EJsS HtmlView.HtmlView Page: setting property 'ClearAtInput' for element 'polar'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'polar'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"current", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'current'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'current'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'current'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'current'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'current'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'current'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'current'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'current'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"html", _view.singleDrawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'html'
      .setProperty("Html","<p></p>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'html'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Polariser Analyzer (App)<br />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/ejss_model_polarizationanalyzer/01authorFelix_J_Garcia_Clemente.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/ejss_model_polarizationanalyzer/01authorleongtzekwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/ejss_model_polarizationanalyzer/1authorlookangphoto5050.png" />
 Félix J. García Clemente; Tze Kwang Leong; Loo Kang Wee
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Félix J. García Clemente; Tze Kwang Leong; Loo Kang Wee. Compiled with EJS 6.0_beta (180814)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new polarizationanalyzer("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_6.0_beta/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/ejss_model_polarizationanalyzer/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
