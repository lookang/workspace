<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Two Media Speed</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function twomediaspeed(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var range; // EjsS Model.Variables.coordinate.range
  var range2; // EjsS Model.Variables.coordinate.range2
  var xmin; // EjsS Model.Variables.coordinate.xmin
  var xmax; // EjsS Model.Variables.coordinate.xmax
  var ymin; // EjsS Model.Variables.coordinate.ymin
  var ymax; // EjsS Model.Variables.coordinate.ymax
  var t; // EjsS Model.Variables.coordinate.t
  var dt; // EjsS Model.Variables.coordinate.dt
  var size; // EjsS Model.Variables.coordinate.size
  var label; // EjsS Model.Variables.coordinate.label
  var zero; // EjsS Model.Variables.coordinate.zero

  var l_play; // EjsS Model.Variables.language.l_play
  var l_pause; // EjsS Model.Variables.language.l_pause
  var l_reset; // EjsS Model.Variables.language.l_reset
  var l_init; // EjsS Model.Variables.language.l_init
  var l_step; // EjsS Model.Variables.language.l_step
  var l_show; // EjsS Model.Variables.language.l_show
  var l_v; // EjsS Model.Variables.language.l_v
  var l_w; // EjsS Model.Variables.language.l_w
  var l_h; // EjsS Model.Variables.language.l_h

  var n1; // EjsS Model.Variables.basic.n1
  var n2; // EjsS Model.Variables.basic.n2
  var nmax; // EjsS Model.Variables.basic.nmax
  var x1; // EjsS Model.Variables.basic.x1
  var x2; // EjsS Model.Variables.basic.x2
  var y1; // EjsS Model.Variables.basic.y1
  var y2; // EjsS Model.Variables.basic.y2
  var c1; // EjsS Model.Variables.basic.c1
  var c2; // EjsS Model.Variables.basic.c2
  var view2; // EjsS Model.Variables.basic.view2
  var w; // EjsS Model.Variables.basic.w
  var w2; // EjsS Model.Variables.basic.w2
  var dl; // EjsS Model.Variables.basic.dl
  var PX; // EjsS Model.Variables.basic.PX
  var PY; // EjsS Model.Variables.basic.PY
  var x; // EjsS Model.Variables.basic.x
  var y; // EjsS Model.Variables.basic.y
  var c; // EjsS Model.Variables.basic.c
  var vx; // EjsS Model.Variables.basic.vx
  var vy; // EjsS Model.Variables.basic.vy
  var MX; // EjsS Model.Variables.basic.MX
  var MY; // EjsS Model.Variables.basic.MY
  var d; // EjsS Model.Variables.basic.d
  var na; // EjsS Model.Variables.basic.na
  var ax; // EjsS Model.Variables.basic.ax
  var ay; // EjsS Model.Variables.basic.ay
  var avx; // EjsS Model.Variables.basic.avx
  var avy; // EjsS Model.Variables.basic.avy

  var cs1; // EjsS Model.Variables.view.cs1
  var sc1; // EjsS Model.Variables.view.sc1
  var cs2; // EjsS Model.Variables.view.cs2
  var sc2; // EjsS Model.Variables.view.sc2
  var showw; // EjsS Model.Variables.view.showw
  var showh; // EjsS Model.Variables.view.showh
  var R; // EjsS Model.Variables.view.R
  var h1; // EjsS Model.Variables.view.h1
  var h2; // EjsS Model.Variables.view.h2
  var clr; // EjsS Model.Variables.view.clr
  var color; // EjsS Model.Variables.view.color
  var omega; // EjsS Model.Variables.view.omega

  var showArrow; // EjsS Model.Variables.varfrem.showArrow
  var combo; // EjsS Model.Variables.varfrem.combo

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      range : range,
      range2 : range2,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      t : t,
      dt : dt,
      size : size,
      label : label,
      zero : zero,
      l_play : l_play,
      l_pause : l_pause,
      l_reset : l_reset,
      l_init : l_init,
      l_step : l_step,
      l_show : l_show,
      l_v : l_v,
      l_w : l_w,
      l_h : l_h,
      n1 : n1,
      n2 : n2,
      nmax : nmax,
      x1 : x1,
      x2 : x2,
      y1 : y1,
      y2 : y2,
      c1 : c1,
      c2 : c2,
      view2 : view2,
      w : w,
      w2 : w2,
      dl : dl,
      PX : PX,
      PY : PY,
      x : x,
      y : y,
      c : c,
      vx : vx,
      vy : vy,
      MX : MX,
      MY : MY,
      d : d,
      na : na,
      ax : ax,
      ay : ay,
      avx : avx,
      avy : avy,
      cs1 : cs1,
      sc1 : sc1,
      cs2 : cs2,
      sc2 : sc2,
      showw : showw,
      showh : showh,
      R : R,
      h1 : h1,
      h2 : h2,
      clr : clr,
      color : color,
      omega : omega,
      showArrow : showArrow,
      combo : combo
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.range2 != "undefined") range2 = json.range2;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.label != "undefined") label = json.label;
    if(typeof json.zero != "undefined") zero = json.zero;
    if(typeof json.l_play != "undefined") l_play = json.l_play;
    if(typeof json.l_pause != "undefined") l_pause = json.l_pause;
    if(typeof json.l_reset != "undefined") l_reset = json.l_reset;
    if(typeof json.l_init != "undefined") l_init = json.l_init;
    if(typeof json.l_step != "undefined") l_step = json.l_step;
    if(typeof json.l_show != "undefined") l_show = json.l_show;
    if(typeof json.l_v != "undefined") l_v = json.l_v;
    if(typeof json.l_w != "undefined") l_w = json.l_w;
    if(typeof json.l_h != "undefined") l_h = json.l_h;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.n2 != "undefined") n2 = json.n2;
    if(typeof json.nmax != "undefined") nmax = json.nmax;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.c1 != "undefined") c1 = json.c1;
    if(typeof json.c2 != "undefined") c2 = json.c2;
    if(typeof json.view2 != "undefined") view2 = json.view2;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.w2 != "undefined") w2 = json.w2;
    if(typeof json.dl != "undefined") dl = json.dl;
    if(typeof json.PX != "undefined") PX = json.PX;
    if(typeof json.PY != "undefined") PY = json.PY;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.MX != "undefined") MX = json.MX;
    if(typeof json.MY != "undefined") MY = json.MY;
    if(typeof json.d != "undefined") d = json.d;
    if(typeof json.na != "undefined") na = json.na;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.ay != "undefined") ay = json.ay;
    if(typeof json.avx != "undefined") avx = json.avx;
    if(typeof json.avy != "undefined") avy = json.avy;
    if(typeof json.cs1 != "undefined") cs1 = json.cs1;
    if(typeof json.sc1 != "undefined") sc1 = json.sc1;
    if(typeof json.cs2 != "undefined") cs2 = json.cs2;
    if(typeof json.sc2 != "undefined") sc2 = json.sc2;
    if(typeof json.showw != "undefined") showw = json.showw;
    if(typeof json.showh != "undefined") showh = json.showh;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.h1 != "undefined") h1 = json.h1;
    if(typeof json.h2 != "undefined") h2 = json.h2;
    if(typeof json.clr != "undefined") clr = json.clr;
    if(typeof json.color != "undefined") color = json.color;
    if(typeof json.omega != "undefined") omega = json.omega;
    if(typeof json.showArrow != "undefined") showArrow = json.showArrow;
    if(typeof json.combo != "undefined") combo = json.combo;
  };

  _model._inputAndPublicParameters = ["range",  "range2",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "label",  "zero",  "l_play",  "l_pause",  "l_reset",  "l_init",  "l_step",  "l_show",  "l_v",  "l_w",  "l_h",  "n1",  "n2",  "nmax",  "x1",  "x2",  "y1",  "y2",  "c1",  "c2",  "view2",  "w",  "w2",  "dl",  "PX",  "PY",  "x",  "y",  "c",  "vx",  "vy",  "MX",  "MY",  "d",  "na",  "ax",  "ay",  "avx",  "avy",  "cs1",  "sc1",  "cs2",  "sc2",  "showw",  "showh",  "R",  "h1",  "h2",  "clr",  "color",  "omega",  "showArrow",  "combo"]; 

  _model._outputAndPublicParameters = ["range",  "range2",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "label",  "zero",  "l_play",  "l_pause",  "l_reset",  "l_init",  "l_step",  "l_show",  "l_v",  "l_w",  "l_h",  "n1",  "n2",  "nmax",  "x1",  "x2",  "y1",  "y2",  "c1",  "c2",  "view2",  "w",  "w2",  "dl",  "PX",  "PY",  "x",  "y",  "c",  "vx",  "vy",  "MX",  "MY",  "d",  "na",  "ax",  "ay",  "avx",  "avy",  "cs1",  "sc1",  "cs2",  "sc2",  "showw",  "showh",  "R",  "h1",  "h2",  "clr",  "color",  "omega",  "showArrow",  "combo"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["layarrows"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["movingpolygons"] = true;
    __pagesEnabled["velocityarrows"] = true;
  });

  _model.addToReset(function() {
    range = 200; // EjsS Model.Variables.coordinate.range
    range2 = 2*range; // EjsS Model.Variables.coordinate.range2
    xmin = -range; // EjsS Model.Variables.coordinate.xmin
    xmax = range; // EjsS Model.Variables.coordinate.xmax
    ymin = -range/2; // EjsS Model.Variables.coordinate.ymin
    ymax = range/2; // EjsS Model.Variables.coordinate.ymax
    t = 0.0; // EjsS Model.Variables.coordinate.t
    dt = 0.05; // EjsS Model.Variables.coordinate.dt
    size = range/40; // EjsS Model.Variables.coordinate.size
    label = "play"; // EjsS Model.Variables.coordinate.label
    zero = 0.0; // EjsS Model.Variables.coordinate.zero
  });

  _model.addToReset(function() {
    l_play = "play"; // EjsS Model.Variables.language.l_play
    l_pause = "pause"; // EjsS Model.Variables.language.l_pause
    l_reset = "reset"; // EjsS Model.Variables.language.l_reset
    l_init = "initialize"; // EjsS Model.Variables.language.l_init
    l_step = "step"; // EjsS Model.Variables.language.l_step
    l_show = "show"; // EjsS Model.Variables.language.l_show
    l_v = "velocity"; // EjsS Model.Variables.language.l_v
    l_w = "width"; // EjsS Model.Variables.language.l_w
    l_h = "h line"; // EjsS Model.Variables.language.l_h
  });

  _model.addToReset(function() {
    n1 = 1.0; // EjsS Model.Variables.basic.n1
    n2 = 1.5; // EjsS Model.Variables.basic.n2
    nmax = 3.0; // EjsS Model.Variables.basic.nmax
    x1 = xmin/2; // EjsS Model.Variables.basic.x1
    x2 = 0.0; // EjsS Model.Variables.basic.x2
    y1 = ymax; // EjsS Model.Variables.basic.y1
    y2 = ymin; // EjsS Model.Variables.basic.y2
    c1 = 0.0; // EjsS Model.Variables.basic.c1
    c2 = 0.0; // EjsS Model.Variables.basic.c2
    view2 = true; // EjsS Model.Variables.basic.view2
    w = range/5; // EjsS Model.Variables.basic.w
    w2 = 0.0; // EjsS Model.Variables.basic.w2
    dl = 0.0; // EjsS Model.Variables.basic.dl
    PX = new Array(6); // EjsS Model.Variables.basic.PX
    (function () {
      var _i0;
      for (_i0=0; _i0<6; _i0+=1) {  // EjsS Model.Variables.basic.PX
        PX[_i0] = 0.0;  // EjsS Model.Variables.basic.PX
      }
    }());
    PY = new Array(6); // EjsS Model.Variables.basic.PY
    (function () {
      var _i0;
      for (_i0=0; _i0<6; _i0+=1) {  // EjsS Model.Variables.basic.PY
        PY[_i0] = 0.0;  // EjsS Model.Variables.basic.PY
      }
    }());
    x = -100.0; // EjsS Model.Variables.basic.x
    y = 0.0; // EjsS Model.Variables.basic.y
    c = range/2; // EjsS Model.Variables.basic.c
    vx = 0; // EjsS Model.Variables.basic.vx
    vy = 0; // EjsS Model.Variables.basic.vy
    MX = new Array(6); // EjsS Model.Variables.basic.MX
    (function () {
      var _i0;
      for (_i0=0; _i0<6; _i0+=1) {  // EjsS Model.Variables.basic.MX
        MX[_i0] = 0.0;  // EjsS Model.Variables.basic.MX
      }
    }());
    MY = new Array(6); // EjsS Model.Variables.basic.MY
    (function () {
      var _i0;
      for (_i0=0; _i0<6; _i0+=1) {  // EjsS Model.Variables.basic.MY
        MY[_i0] = 0.0;  // EjsS Model.Variables.basic.MY
      }
    }());
    d = range/5; // EjsS Model.Variables.basic.d
    na = 11; // EjsS Model.Variables.basic.na
    ax = new Array(na); // EjsS Model.Variables.basic.ax
    (function () {
      var _i0;
      for (_i0=0; _i0<na; _i0+=1) {  // EjsS Model.Variables.basic.ax
        ax[_i0] = 0.0;  // EjsS Model.Variables.basic.ax
      }
    }());
    ay = new Array(na); // EjsS Model.Variables.basic.ay
    (function () {
      var _i0;
      for (_i0=0; _i0<na; _i0+=1) {  // EjsS Model.Variables.basic.ay
        ay[_i0] = 0.0;  // EjsS Model.Variables.basic.ay
      }
    }());
    avx = new Array(na); // EjsS Model.Variables.basic.avx
    (function () {
      var _i0;
      for (_i0=0; _i0<na; _i0+=1) {  // EjsS Model.Variables.basic.avx
        avx[_i0] = 0.0;  // EjsS Model.Variables.basic.avx
      }
    }());
    avy = new Array(na); // EjsS Model.Variables.basic.avy
    (function () {
      var _i0;
      for (_i0=0; _i0<na; _i0+=1) {  // EjsS Model.Variables.basic.avy
        avy[_i0] = 0.0;  // EjsS Model.Variables.basic.avy
      }
    }());
  });

  _model.addToReset(function() {
    cs1 = 0.0; // EjsS Model.Variables.view.cs1
    sc1 = 0.0; // EjsS Model.Variables.view.sc1
    cs2 = 0.0; // EjsS Model.Variables.view.cs2
    sc2 = 0.0; // EjsS Model.Variables.view.sc2
    showw = false; // EjsS Model.Variables.view.showw
    showh = false; // EjsS Model.Variables.view.showh
    R = 50.0; // EjsS Model.Variables.view.R
    h1 = 0.0; // EjsS Model.Variables.view.h1
    h2 = 0.0; // EjsS Model.Variables.view.h2
    clr = "rgba(0,0,255,0)"; // EjsS Model.Variables.view.clr
    color = 0; // EjsS Model.Variables.view.color
    omega = Math.PI; // EjsS Model.Variables.view.omega
  });

  _model.addToReset(function() {
    showArrow = false; // EjsS Model.Variables.varfrem.showArrow
    combo = 1; // EjsS Model.Variables.varfrem.combo
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function updateaction () {  // > CustomCode.updateaction:1
  var cst;  // > CustomCode.updateaction:2
  y1=ymax; // align drawing panel extreme to y1  // > CustomCode.updateaction:3
  y2=ymin;// align drawing panel extreme to y2  // > CustomCode.updateaction:4
  if(x1>0)x1=0;  // > CustomCode.updateaction:5
  else if(x1<xmin)x1=xmin;  // > CustomCode.updateaction:6
  zero=0.;  // > CustomCode.updateaction:7
  c1=Math.atan2(x1,ymax);  // > CustomCode.updateaction:8
  cst=n1*Math.sin(c1)/n2;  // > CustomCode.updateaction:9
  if(Math.abs(cst)>1)view2=false;  // > CustomCode.updateaction:10
  else{  // > CustomCode.updateaction:11
   view2=true;  // > CustomCode.updateaction:12
   c2=Math.asin(cst);  // > CustomCode.updateaction:13
   x2=-ymax*Math.tan(c2);  // > CustomCode.updateaction:14
  }  // > CustomCode.updateaction:15
  cs1=Math.cos(c1);  // > CustomCode.updateaction:16
  sc1=Math.sin(c1);  // > CustomCode.updateaction:17
  cs2=Math.cos(c2);  // > CustomCode.updateaction:18
  sc2=Math.sin(c2);  // > CustomCode.updateaction:19
  dl=w/cs1;  // > CustomCode.updateaction:20
  w2=dl*cs2;  // > CustomCode.updateaction:21
   R=ymax/2;//sc2/5;  // > CustomCode.updateaction:22
  if(R>ymax)R=ymax;  // > CustomCode.updateaction:23
  PX[0]=x1+dl;    // > CustomCode.updateaction:24
  PX[1]=x1-dl;   // > CustomCode.updateaction:25
  PX[2]=-dl;  // > CustomCode.updateaction:26
  PX[3]=x2-dl;  // > CustomCode.updateaction:27
  PX[4]=x2+dl;  // > CustomCode.updateaction:28
  PX[5]=dl;  // > CustomCode.updateaction:29
  PY[0]=PY[1]=ymax;  // > CustomCode.updateaction:30
  PY[3]=PY[4]=ymin;  // > CustomCode.updateaction:31
  PY[2]=PY[5]=zero;  // > CustomCode.updateaction:32
  PX[5]=w/cs1;  // > CustomCode.updateaction:33
  setupArrow();  // > CustomCode.updateaction:34
  }  // > CustomCode.updateaction:35

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullScreen:1
  // does not work for iOS   // > CustomCode.fullScreen:2
  /*jslint browser:true */  // > CustomCode.fullScreen:3
  function toggleFullScreen() {  // > CustomCode.fullScreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullScreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullScreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullScreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullScreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullScreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullScreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullScreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullScreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullScreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullScreen:14
      }  // > CustomCode.fullScreen:15
    } else {  // > CustomCode.fullScreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullScreen:17
        document.exitFullscreen();  // > CustomCode.fullScreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullScreen:19
        document.msExitFullscreen();  // > CustomCode.fullScreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullScreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullScreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullScreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullScreen:24
      }  // > CustomCode.fullScreen:25
    }  // > CustomCode.fullScreen:26
  }  // > CustomCode.fullScreen:27

  function setupArrow(){  // > CustomCode.setupArro:1
  var cst,dx,dy;  // > CustomCode.setupArro:2
  cst=2*w/(na-1);  // > CustomCode.setupArro:3
  dx=cst*cs1;  // > CustomCode.setupArro:4
  dy=cst*sc1;  // > CustomCode.setupArro:5
  ax[0]=x1-w*cs1;  // > CustomCode.setupArro:6
  ay[0]=y1+w*sc1;  // > CustomCode.setupArro:7
  //ax[0]=x1;  // > CustomCode.setupArro:8
  //ay[0]=y1;  // > CustomCode.setupArro:9
  avx[0]=-c*sc1/n1;  // > CustomCode.setupArro:10
  avy[0]=-c*cs1/n1;  // > CustomCode.setupArro:11
  for(var i=1;i<na;i++){  // > CustomCode.setupArro:12
   ax[i]=ax[i-1]+dx; //spacing between the lines of velocity  // > CustomCode.setupArro:13
   ay[i]=ay[i-1]-dy;  // > CustomCode.setupArro:14
  }  // > CustomCode.setupArro:15
  }  // > CustomCode.setupArro:16

  function backward () {  // > CustomCode.backward:1
   dt=-dt;  // > CustomCode.backward:2
   _step();  // > CustomCode.backward:3
   dt=-dt;  // > CustomCode.backward:4
  }  // > CustomCode.backward:5

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    updateaction();  // > Initialization.Init Page:1
    x=x1; // x1 is the drag on top  // > Initialization.Init Page:2
    y=y1;  // > Initialization.Init Page:3
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["layarrows"]) return;
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    // movement of polygon moving  // > FixedRelations.FixRel Page:1
    d=c/1.25; // d is just a number factor divide of c  // > FixedRelations.FixRel Page:2
    var d1,d2,r,b; // change to declare here  // > FixedRelations.FixRel Page:3
    d1=d/n1; d2=d/n2;  // > FixedRelations.FixRel Page:4
    if(y>0){  // > FixedRelations.FixRel Page:5
     MX[0]=x;MY[0]=y;  // > FixedRelations.FixRel Page:6
     MX[1]=MX[0]+w*cs1;	MY[1]=MY[0]-w*sc1;  // > FixedRelations.FixRel Page:7
     MX[2]=MX[1]+d1*sc1;	MY[2]=MY[1]+d1*cs1;  // > FixedRelations.FixRel Page:8
     MX[3]=MX[2]-w*cs1;	MY[3]=MY[2]+w*sc1;  // > FixedRelations.FixRel Page:9
     MX[4]=MX[3]-w*cs1;	MY[4]=MY[3]+w*sc1;  // > FixedRelations.FixRel Page:10
     if(MY[4]>0){  // > FixedRelations.FixRel Page:11
       MX[5]=MX[4]-d1*sc1;	MY[5]=MY[4]-d1*cs1;  // > FixedRelations.FixRel Page:12
       if(MY[5]<0){  // > FixedRelations.FixRel Page:13
          MX[3]=MX[4];	MY[3]=MY[4];  // > FixedRelations.FixRel Page:14
          MX[4]=-dl;		MY[4]=0;  // > FixedRelations.FixRel Page:15
          MX[0]=MX[5]+MY[5]*cs1/sc1; MY[0]=0.;  // > FixedRelations.FixRel Page:16
           d2=(dl+MX[0])*cs2;  // > FixedRelations.FixRel Page:17
           MX[5]=MX[0]-d2*cs2;	MY[5]=d2*sc2;  // > FixedRelations.FixRel Page:18
       }  // > FixedRelations.FixRel Page:19
     }else{  // > FixedRelations.FixRel Page:20
       MX[3]=MX[4]+MY[4]*cs1/sc1; MY[3]=0.;  // > FixedRelations.FixRel Page:21
       d2=(dl+MX[3])*cs2;  // > FixedRelations.FixRel Page:22
       MX[4]=MX[3]-d2*cs2;	MY[4]=d2*sc2;  // > FixedRelations.FixRel Page:23
       MX[0]=x+y*cs1/sc1;	MY[0]=0;  // > FixedRelations.FixRel Page:24
         d2=(dl+MX[0])*cs2;  // > FixedRelations.FixRel Page:25
         MX[5]=MX[0]-d2*cs2;	MY[5]=d2*sc2;  // > FixedRelations.FixRel Page:26
     }  // > FixedRelations.FixRel Page:27
    }else if(c1!=0){ // y<0  // > FixedRelations.FixRel Page:28
        r=Math.sqrt(x*x+y*y);  // > FixedRelations.FixRel Page:29
        MX[0]=-r/sc2;	MY[0]=0.;  // > FixedRelations.FixRel Page:30
      if(MX[0]<dl){   // > FixedRelations.FixRel Page:31
        d2=(MX[0]-dl)*sc1;  // > FixedRelations.FixRel Page:32
        MX[1]=dl+d2*sc1;	MY[1]=d2*cs1;  // > FixedRelations.FixRel Page:33
        MX[2]=MX[1]+d1*sc1;	MY[2]=MY[1]+d1*cs1;  // > FixedRelations.FixRel Page:34
        b=MY[2]+sc1/cs1*MX[2];  // > FixedRelations.FixRel Page:35
        MX[3]=b/sc1*cs1;	MY[3]=0.;  // > FixedRelations.FixRel Page:36
        d2=(MX[3]+dl)*cs2;  // > FixedRelations.FixRel Page:37
        if(d2>0){  // > FixedRelations.FixRel Page:38
            MX[4]=MX[3]-d2*cs2;	MY[4]=d2*sc2;  // > FixedRelations.FixRel Page:39
            d2=d/n2;  // > FixedRelations.FixRel Page:40
            MX[5]=MX[4]-d2*sc2;	MY[5]=MY[4]-d2*cs2;  // > FixedRelations.FixRel Page:41
        }else{  // > FixedRelations.FixRel Page:42
           MX[3]=MX[2]-2*w*cs1;	MY[3]=MY[2]+2*w*sc1;  // > FixedRelations.FixRel Page:43
           MX[4]=-dl;	MY[4]=0.;  // > FixedRelations.FixRel Page:44
           d2=(dl+MX[0])*cs2;  // > FixedRelations.FixRel Page:45
           MX[5]=MX[0]-d2*cs2;	MY[5]=d2*sc2;  // > FixedRelations.FixRel Page:46
        }  // > FixedRelations.FixRel Page:47
      }else{  // > FixedRelations.FixRel Page:48
         MX[0]=x+w2*cs2;	MY[0]=y-w2*sc2;  // > FixedRelations.FixRel Page:49
         MX[1]=dl;		MY[1]=0.;  // > FixedRelations.FixRel Page:50
         b=Math.sqrt((MX[0]-MX[1])*(MX[0]-MX[1])+MY[0]*MY[0]);  // > FixedRelations.FixRel Page:51
       if(b<d2){  // > FixedRelations.FixRel Page:52
         d1=(d-n2*b)/n1;  // > FixedRelations.FixRel Page:53
         MX[2]=MX[1]+d1*sc1;	MY[2]=MY[1]+d1*cs1;  // > FixedRelations.FixRel Page:54
         b=MY[2]+MX[2]*sc1/cs1;  // > FixedRelations.FixRel Page:55
         MX[3]=b*cs1/sc1;	MY[3]=0;  // > FixedRelations.FixRel Page:56
         d2=(dl+MX[3])*cs2;  // > FixedRelations.FixRel Page:57
        if(d2>0){  // > FixedRelations.FixRel Page:58
         MX[4]=MX[3]-d2*cs2;	MY[4]=d2*sc2;  // > FixedRelations.FixRel Page:59
         d2=d/n2;  // > FixedRelations.FixRel Page:60
         MX[5]=MX[4]-d2*sc2;	MY[5]=MY[4]-d2*cs2;  // > FixedRelations.FixRel Page:61
        }else{  // > FixedRelations.FixRel Page:62
           MX[3]=MX[2]-2*w*cs1;	MY[3]=MY[2]+2*w*sc1;  // > FixedRelations.FixRel Page:63
           MX[4]=-dl;	MY[4]=0.;  // > FixedRelations.FixRel Page:64
           MX[5]=MX[0]-2*w2*cs2;	MY[5]=MY[0]+2*w2*sc2;  // > FixedRelations.FixRel Page:65
        }  // > FixedRelations.FixRel Page:66
       }else{  // > FixedRelations.FixRel Page:67
         MX[1]=MX[0]+d2*sc2;	MY[1]=MY[0]+d2*cs2;  // > FixedRelations.FixRel Page:68
         MX[2]=MX[1]-w2*cs2;	MY[2]=MY[1]+w2*sc2;  // > FixedRelations.FixRel Page:69
         MX[3]=MX[2]-w2*cs2;	MY[3]=MY[2]+w2*sc2;  // > FixedRelations.FixRel Page:70
         MX[5]=MX[4]=MX[3]-d2*sc2;       MY[5]=MY[4]=MY[3]-d2*cs2;  // > FixedRelations.FixRel Page:71
       }  // > FixedRelations.FixRel Page:72
       if(MY[1]<ymin|| MX[5]>xmax){ // detect boundary for change  // > FixedRelations.FixRel Page:73
         x=x1; y=y1;   // > FixedRelations.FixRel Page:74
        setupArrow(); // change direction  // > FixedRelations.FixRel Page:75
       }  // > FixedRelations.FixRel Page:76
      }  // > FixedRelations.FixRel Page:77
    }else {// if c1==0 and y<0  // > FixedRelations.FixRel Page:78
         MX[0]=dl; MY[0]=y;  // > FixedRelations.FixRel Page:79
         if(y+d2<0){  // > FixedRelations.FixRel Page:80
             MX[1]=dl; MY[1]=y+d2;  // > FixedRelations.FixRel Page:81
             MX[2]=-dl;MY[2]=y+d2;  // > FixedRelations.FixRel Page:82
             MX[3]=MX[4]=MX[5]=-dl; MY[3]=MY[4]=MY[5]=y;  // > FixedRelations.FixRel Page:83
         }else{  // > FixedRelations.FixRel Page:84
             MX[1]=dl; MY[1]=0;  // > FixedRelations.FixRel Page:85
             d1=(d+n2*y)/n1;  // > FixedRelations.FixRel Page:86
             MX[2]=dl; MY[2]=d1;  // > FixedRelations.FixRel Page:87
             MX[3]=-dl; MY[3]=d1;  // > FixedRelations.FixRel Page:88
             MX[4]=-dl; MY[4]=0;  // > FixedRelations.FixRel Page:89
             MX[5]=-dl; MY[5]=y;  // > FixedRelations.FixRel Page:90
         }  // > FixedRelations.FixRel Page:91
      // if(MY[1]<ymin){  // > FixedRelations.FixRel Page:92
      //   x=x1; y=y1;   // > FixedRelations.FixRel Page:93
      //  setupArrow();  // > FixedRelations.FixRel Page:94
      // }  // > FixedRelations.FixRel Page:95
    }  // > FixedRelations.FixRel Page:96
    //check position of moving polygon and redraw at the top again  // > FixedRelations.FixRel Page:97
       if(MY[1]<ymin){  // > FixedRelations.FixRel Page:98
         x=x1; y=y1;   // > FixedRelations.FixRel Page:99
        setupArrow();  // > FixedRelations.FixRel Page:100
       }  // > FixedRelations.FixRel Page:101
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["movingpolygons"]) return;
    //var d1,d2,r,b;  // > FixedRelations.movingpolygons:1
    color=(Math.random(7)+3).toFixed(0); // make less transparent give it the blinking look  // > FixedRelations.movingpolygons:2
    clr = "rgba(0,0,255,0."+color+")"; //color for the moving  // > FixedRelations.movingpolygons:3
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["velocityarrows"]) return;
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _axLength;
    var _ayLength;

    __odeSelf._getOdeVars = function (){ return["x","y","ax","ay","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _axLength = ax.length;
      _ayLength = ay.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=x) __mustReinitialize = true;
        __state[__cIn++] = x;
        if (__state[__cIn]!=y) __mustReinitialize = true;
        __state[__cIn++] = y;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_axLength; __j++)
           if (__state[__n++]!=ax[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_axLength; __j++) {
          __state[__cIn++] = ax[__j];
        }
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_ayLength; __j++)
           if (__state[__n++]!=ay[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_ayLength; __j++) {
          __state[__cIn++] = ay[__j];
        }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_axLength != ax.length) return true;
      if (_ayLength != ay.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        y = __state[__cOut++];
        for (__i=0;__i<_axLength; __i++) {
          ax[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_ayLength; __i++) {
          ay[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var ax = [];
        for (__i=0;__i<_axLength; __i++) {
          ax[__i] = _aState[__cOut++];
        }
        var ay = [];
        for (__i=0;__i<_ayLength; __i++) {
          ay[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        // velocity arrows position need for direction change at y=0  // > Preliminary code for ODE.Evol Page:1
        for(var i=0;i<na;i++){  // > Preliminary code for ODE.Evol Page:2
          if(ay[i]>0){  // > Preliminary code for ODE.Evol Page:3
             avx[i]=-c*sc1/n1;  // > Preliminary code for ODE.Evol Page:4
             avy[i]=-c*cs1/n1;  // > Preliminary code for ODE.Evol Page:5
          }else{  // > Preliminary code for ODE.Evol Page:6
             avx[i]=-c*sc2/n2;  // > Preliminary code for ODE.Evol Page:7
             avy[i]=-c*cs2/n2;  // > Preliminary code for ODE.Evol Page:8
          }  // > Preliminary code for ODE.Evol Page:9
        }  // > Preliminary code for ODE.Evol Page:10
        //speed of evolution of arrows  // > Preliminary code for ODE.Evol Page:11
        if(y>0){ // add =  // > Preliminary code for ODE.Evol Page:12
         vx=-c*sc1/n1; // in medium 1  // > Preliminary code for ODE.Evol Page:13
         vy=-c*cs1/n1;  // > Preliminary code for ODE.Evol Page:14
        }else{  // > Preliminary code for ODE.Evol Page:15
         vx=-c*sc2/n2; // speed in medium 2  // > Preliminary code for ODE.Evol Page:16
         vy=-c*cs2/n2;  // > Preliminary code for ODE.Evol Page:17
        }  // > Preliminary code for ODE.Evol Page:18
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vx; // Rate for ODE: Evol Page:x
        _aRate[__cRate++] = vy; // Rate for ODE: Evol Page:y
        var i;
        for (i=0;i<_axLength;i++) {
          _aRate[__cRate++] = Array.isArray(avx[i]) ? avx[i][i] : avx[i]; // Rate for ODE: Evol Page:ax
        }
        for (i=0;i<_ayLength;i++) {
          _aRate[__cRate++] = Array.isArray(avy[i]) ? avy[i][i] : avy[i]; // Rate for ODE: Evol Page:ay
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = _aState[__cOut++];
        var y = _aState[__cOut++];
        var ax = [];
        for (__i=0;__i<_axLength; __i++) {
          ax[__i] = _aState[__cOut++];
        }
        var ay = [];
        for (__i=0;__i<_ayLength; __i++) {
          ay[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        x = __state[__cOut++];
        y = __state[__cOut++];
        for (__i=0;__i<_axLength; __i++) {
          ax[__i] = __state[__cOut++];
        }
        for (__i=0;__i<_ayLength; __i++) {
          ay[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = x;
        __state[__cIn++] = y;
        for (__j=0;__j<_axLength; __j++) {
          __state[__cIn++] = ax[__j];
        }
        for (__j=0;__j<_ayLength; __j++) {
          __state[__cIn++] = ay[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_ax(__time) {
    var __beginIndex = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(ax.length),__beginIndex,ax.ength);
  }

  function _historic_ay(__time) {
    var __beginIndex = 0 + 1 + 1 + ax.length;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(ay.length),__beginIndex,ay.ength);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new twomediaspeed_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BLMessage",  function() { return "n₂="+n2; } ); // HtmlView Page linking property 'BLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "n₁="+n1; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.topdrag.linkProperty("SizeX",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeX' for element 'topdrag'
          _view.topdrag.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'topdrag'
          _view.topdrag.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'topdrag'
          _view.topdrag.linkProperty("SizeY",  function() { return size; }, function(_v) { size = _v; } ); // HtmlView Page linking property 'SizeY' for element 'topdrag'
          _view.topdrag.setAction("OnDrag", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnDrag' for element 'topdrag'
          _view.base.linkProperty("SizeX",  function() { return range2; }, function(_v) { range2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'base'
          _view.base.linkProperty("SizeY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'SizeY' for element 'base'
          _view.line1centre.linkProperty("SizeX",  function() { return -x1; } ); // HtmlView Page linking property 'SizeX' for element 'line1centre'
          _view.line1centre.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'line1centre'
          _view.line1centre.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'line1centre'
          _view.line1centre.linkProperty("SizeY",  function() { return -y1; } ); // HtmlView Page linking property 'SizeY' for element 'line1centre'
          _view.line2.linkProperty("SizeX",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'line2'
          _view.line2.linkProperty("Visibility",  function() { return view2; }, function(_v) { view2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'line2'
          _view.line2.linkProperty("SizeY",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'line2'
          _view.norm.linkProperty("Y",  function() { return -R; } ); // HtmlView Page linking property 'Y' for element 'norm'
          _view.norm.linkProperty("SizeY",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeY' for element 'norm'
          _view.p1.linkProperty("PointsY",  function() { return PY; }, function(_v) { PY = _v; } ); // HtmlView Page linking property 'PointsY' for element 'p1'
          _view.p1.linkProperty("PointsX",  function() { return PX; }, function(_v) { PX = _v; } ); // HtmlView Page linking property 'PointsX' for element 'p1'
          _view.moving.linkProperty("PointsY",  function() { return MY; }, function(_v) { MY = _v; } ); // HtmlView Page linking property 'PointsY' for element 'moving'
          _view.moving.linkProperty("PointsX",  function() { return MX; }, function(_v) { MX = _v; } ); // HtmlView Page linking property 'PointsX' for element 'moving'
          _view.moving.linkProperty("FillColor",  function() { return clr; }, function(_v) { clr = _v; } ); // HtmlView Page linking property 'FillColor' for element 'moving'
          _view.velocity.linkProperty("NumberOfElements",  function() { return na; }, function(_v) { na = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'velocity'
          _view.velocity.linkProperty("SizeX",  function() { return avx; }, function(_v) { avx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'velocity'
          _view.velocity.linkProperty("X",  function() { return ax; }, function(_v) { ax = _v; } ); // HtmlView Page linking property 'X' for element 'velocity'
          _view.velocity.linkProperty("Y",  function() { return ay; }, function(_v) { ay = _v; } ); // HtmlView Page linking property 'Y' for element 'velocity'
          _view.velocity.linkProperty("Visibility",  function() { return showArrow; }, function(_v) { showArrow = _v; } ); // HtmlView Page linking property 'Visibility' for element 'velocity'
          _view.velocity.linkProperty("SizeY",  function() { return avy; }, function(_v) { avy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'velocity'
          _view.circle.linkProperty("SizeX",  function() { return R*2; } ); // HtmlView Page linking property 'SizeX' for element 'circle'
          _view.circle.linkProperty("Visibility",  function() { return showh; }, function(_v) { showh = _v; } ); // HtmlView Page linking property 'Visibility' for element 'circle'
          _view.circle.linkProperty("SizeY",  function() { return R*2; } ); // HtmlView Page linking property 'SizeY' for element 'circle'
          _view.texth1.linkProperty("X",  function() { return R*sc1/2; } ); // HtmlView Page linking property 'X' for element 'texth1'
          _view.texth1.linkProperty("Y",  function() { return R*cs1; } ); // HtmlView Page linking property 'Y' for element 'texth1'
          _view.texth1.linkProperty("Text",  function() { return "h₁="+-R*sc1.toFixed(2); } ); // HtmlView Page linking property 'Text' for element 'texth1'
          _view.texth1.linkProperty("Visibility",  function() { return showh; }, function(_v) { showh = _v; } ); // HtmlView Page linking property 'Visibility' for element 'texth1'
          _view.w1line.linkProperty("SizeX",  function() { return 2*w*cs1; } ); // HtmlView Page linking property 'SizeX' for element 'w1line'
          _view.w1line.linkProperty("X",  function() { return -dl; } ); // HtmlView Page linking property 'X' for element 'w1line'
          _view.w1line.linkProperty("Visibility",  function() { return showw; }, function(_v) { showw = _v; } ); // HtmlView Page linking property 'Visibility' for element 'w1line'
          _view.w1line.linkProperty("SizeY",  function() { return -2*w*sc1; } ); // HtmlView Page linking property 'SizeY' for element 'w1line'
          _view.w2line.linkProperty("SizeX",  function() { return -2*w2*cs2; } ); // HtmlView Page linking property 'SizeX' for element 'w2line'
          _view.w2line.linkProperty("X",  function() { return dl; }, function(_v) { dl = _v; } ); // HtmlView Page linking property 'X' for element 'w2line'
          _view.w2line.linkProperty("Visibility",  function() { return showw; }, function(_v) { showw = _v; } ); // HtmlView Page linking property 'Visibility' for element 'w2line'
          _view.w2line.linkProperty("SizeY",  function() { return 2*w2*sc2; } ); // HtmlView Page linking property 'SizeY' for element 'w2line'
          _view.texth2.linkProperty("X",  function() { return -R*sc2/2; } ); // HtmlView Page linking property 'X' for element 'texth2'
          _view.texth2.linkProperty("Y",  function() { return -R*cs2; } ); // HtmlView Page linking property 'Y' for element 'texth2'
          _view.texth2.linkProperty("Text",  function() { return "h₂="+-R*sc2.toFixed(2); } ); // HtmlView Page linking property 'Text' for element 'texth2'
          _view.texth2.linkProperty("Visibility",  function() { return showh; }, function(_v) { showh = _v; } ); // HtmlView Page linking property 'Visibility' for element 'texth2'
          _view.h1arrow.linkProperty("SizeX",  function() { return R*sc1; } ); // HtmlView Page linking property 'SizeX' for element 'h1arrow'
          _view.h1arrow.linkProperty("Y",  function() { return R*cs1; } ); // HtmlView Page linking property 'Y' for element 'h1arrow'
          _view.h1arrow.linkProperty("Visibility",  function() { return showh; }, function(_v) { showh = _v; } ); // HtmlView Page linking property 'Visibility' for element 'h1arrow'
          _view.h2arrow.linkProperty("SizeX",  function() { return -R*sc2; } ); // HtmlView Page linking property 'SizeX' for element 'h2arrow'
          _view.h2arrow.linkProperty("Y",  function() { return -R*cs2; } ); // HtmlView Page linking property 'Y' for element 'h2arrow'
          _view.h2arrow.linkProperty("Visibility",  function() { return showh; }, function(_v) { showh = _v; } ); // HtmlView Page linking property 'Visibility' for element 'h2arrow'
          _view.comboBox.linkProperty("Options",  function() { return ["Display","c = ","n1 = ","n2 = ","Width = "]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  //["c = ","n1 = ","n2 = ","Width = ","Display"]
  if (option == "Display"){combo = 1;}
  else if (option == "c = "){combo =2;}
  else if (option == "n1 = "){combo =3;}
  else if (option == "n2 = "){combo =4;}
  else if (option == "Width = "){combo =5;}

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.displaycombo.linkProperty("Display",  function() { return (combo == 1)?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'displaycombo'
          _view.showArrow.linkProperty("Checked",  function() { return showArrow; }, function(_v) { showArrow = _v; } ); // HtmlView Page linking property 'Checked' for element 'showArrow'
          _view.showhline.linkProperty("Checked",  function() { return showh; }, function(_v) { showh = _v; } ); // HtmlView Page linking property 'Checked' for element 'showhline'
          _view.combo2.linkProperty("Display",  function() { return (combo == 2)?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'combo2'
          _view.cslider.linkProperty("Minimum",  function() { return range/10; } ); // HtmlView Page linking property 'Minimum' for element 'cslider'
          _view.cslider.linkProperty("Maximum",  function() { return range/2; } ); // HtmlView Page linking property 'Maximum' for element 'cslider'
          _view.cslider.linkProperty("Value",  function() { return c; }, function(_v) { c = _v; } ); // HtmlView Page linking property 'Value' for element 'cslider'
          _view.cslider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'cslider'
          _view.combo3.linkProperty("Display",  function() { return (combo == 3)?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'combo3'
          _view.n1slider.linkProperty("Maximum",  function() { return nmax; }, function(_v) { nmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'n1slider'
          _view.n1slider.linkProperty("Value",  function() { return n1; }, function(_v) { n1 = _v; } ); // HtmlView Page linking property 'Value' for element 'n1slider'
          _view.n1slider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'n1slider'
          _view.combo4.linkProperty("Display",  function() { return (combo == 4)?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'combo4'
          _view.n2slider.linkProperty("Maximum",  function() { return nmax; }, function(_v) { nmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'n2slider'
          _view.n2slider.linkProperty("Value",  function() { return n2; }, function(_v) { n2 = _v; } ); // HtmlView Page linking property 'Value' for element 'n2slider'
          _view.n2slider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'n2slider'
          _view.combo5.linkProperty("Display",  function() { return (combo == 5)?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'combo5'
          _view.showwidth.linkProperty("Checked",  function() { return showw; }, function(_v) { showw = _v; } ); // HtmlView Page linking property 'Checked' for element 'showwidth'
          _view.wslider.linkProperty("Minimum",  function() { return range/10; } ); // HtmlView Page linking property 'Minimum' for element 'wslider'
          _view.wslider.linkProperty("Maximum",  function() { return range/4; } ); // HtmlView Page linking property 'Maximum' for element 'wslider'
          _view.wslider.linkProperty("Value",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'Value' for element 'wslider'
          _view.wslider.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'wslider'
          _view.playpause.setAction("OffClick", function(_data,_info) {
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playpause'
          _view.playpause.setAction("OnClick", function(_data,_info) {
  _play();

}); // HtmlView Page setting action 'OnClick' for element 'playpause'
          _view.stepbutton.setAction("OnClick", function(_data,_info) {
  _step();

}); // HtmlView Page setting action 'OnClick' for element 'stepbutton'
          _view.resetbutton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetbutton'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function twomediaspeed_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = twomediaspeed_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function twomediaspeed_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","95vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("MaximumY",100) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",100) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("TRMessage","Two Media Speed") // EJsS HtmlView.HtmlView Page: setting property 'TRMessage' for element 'plottingPanel'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-100) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("XTickStep",100) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("MinimumY",-100) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("YTickStep",100) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"topdrag", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topdrag'
      .setProperty("FillColor","rgba(255,12,0,0.9)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'topdrag'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'topdrag'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'topdrag'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'topdrag'
      .setProperty("LineColor","rgba(255,12,0,0.9)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'topdrag'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'topdrag'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'topdrag'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"base", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'base'
      .setProperty("FillColor","rgba(200,220,208,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'base'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'base'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'base'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'base'
      .setProperty("LineColor","rgba(200,220,208,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'base'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'base'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"line1centre", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'line1centre'
      .setProperty("LineColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'line1centre'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 2 2" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'line1centre'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'line1centre'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"line2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'line2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'line2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'line2'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 2 2" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'line2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'line2'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'line2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"norm", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'norm'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'norm'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'norm'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'norm'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'norm'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'norm'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"p1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'p1'
      .setProperty("Points",6) // EJsS HtmlView.HtmlView Page: setting property 'Points' for element 'p1'
      .setProperty("FillColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'p1'
      .setProperty("LineColor","rgba(0,0,255,0.5)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'p1'
      ;

    _view._addElement(EJSS_DRAWING2D.polygon,"moving", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'moving'
      .setProperty("Points",6) // EJsS HtmlView.HtmlView Page: setting property 'Points' for element 'moving'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"velocity", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'velocity'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'velocity'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"circle", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'circle'
      .setProperty("FillColor","rgba(200,220,208,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'circle'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'circle'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'circle'
      .setProperty("LineColor","red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'circle'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'circle'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'circle'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'circle'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'circle'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"texth1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'texth1'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'texth1'
      .setProperty("RelativePosition","SOUTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'texth1'
      .setProperty("Font","normal normal 2vw") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'texth1'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"w1line", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'w1line'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'w1line'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'w1line'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'w1line'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"w2line", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'w2line'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'w2line'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'w2line'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'w2line'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"texth2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'texth2'
      .setProperty("FillColor","green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'texth2'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'texth2'
      .setProperty("Font","normal normal 2vw") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'texth2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"h1arrow", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'h1arrow'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'h1arrow'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'h1arrow'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'h1arrow'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'h1arrow'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'h1arrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'h1arrow'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"h2arrow", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'h2arrow'
      .setProperty("MarkEnd","ANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkEnd' for element 'h2arrow'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'h2arrow'
      .setProperty("LineColor","green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'h2arrow'
      .setProperty("MarkStart","INVANGLE") // EJsS HtmlView.HtmlView Page: setting property 'MarkStart' for element 'h2arrow'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'h2arrow'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'h2arrow'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"barpanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'barpanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "4%",    "margin-right":"0px",    "right":"3%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'barpanel'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'barpanel'
      .setProperty("Font","normal normal 2vw") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'barpanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'barpanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.barpanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Background","cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'comboBox'
      .setProperty("Font","normal bold 2vw") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"displaycombo", _view.barpanel) // EJsS HtmlView.HtmlView Page: declaration of element 'displaycombo'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"showArrow", _view.displaycombo) // EJsS HtmlView.HtmlView Page: declaration of element 'showArrow'
      .setProperty("Text","Velocity") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showArrow'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"showhline", _view.displaycombo) // EJsS HtmlView.HtmlView Page: declaration of element 'showhline'
      .setProperty("Text","h line") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'showhline'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"combo2", _view.barpanel) // EJsS HtmlView.HtmlView Page: declaration of element 'combo2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"cslider", _view.combo2) // EJsS HtmlView.HtmlView Page: declaration of element 'cslider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'cslider'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'cslider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"combo3", _view.barpanel) // EJsS HtmlView.HtmlView Page: declaration of element 'combo3'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"n1slider", _view.combo3) // EJsS HtmlView.HtmlView Page: declaration of element 'n1slider'
      .setProperty("Minimum",1.0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'n1slider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'n1slider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'n1slider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"combo4", _view.barpanel) // EJsS HtmlView.HtmlView Page: declaration of element 'combo4'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"n2slider", _view.combo4) // EJsS HtmlView.HtmlView Page: declaration of element 'n2slider'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'n2slider'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'n2slider'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'n2slider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"combo5", _view.barpanel) // EJsS HtmlView.HtmlView Page: declaration of element 'combo5'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"showwidth", _view.combo5) // EJsS HtmlView.HtmlView Page: declaration of element 'showwidth'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"wslider", _view.combo5) // EJsS HtmlView.HtmlView Page: declaration of element 'wslider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.barpanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Font","normal bold 2vw") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'controlPanel'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playpause", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playpause'
      .setProperty("TextOn","▶") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playpause'
      .setProperty("State",false) // EJsS HtmlView.HtmlView Page: setting property 'State' for element 'playpause'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playpause'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepbutton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepbutton'
      .setProperty("Text","❚▶") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'stepbutton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetbutton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetbutton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetbutton'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Two Media Speed<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/04Light/twomediaspeed/Screen Shot 2018-02-12 at 2.03.36 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/04Light/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/04Light/01authorlookang50x50.png" />
 Fu-Kwun Hwang; Fremont Teng; lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fu-Kwun Hwang; Fremont Teng; lookang.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new twomediaspeed("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/04Light/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
