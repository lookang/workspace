<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Rainbow Simulator</title>
    <link rel="stylesheet"  type="text/css" href="file:///Users/lookang/Google Drive/PublicLawrence/workspace/output/_ejs_library/css/ejss.css" />
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/common_script.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/scripts/textresizedetector.js"></script>
    <script src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function rainbow2(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var range; // EjsS Model.Variables.spacetime.range
  var xmin; // EjsS Model.Variables.spacetime.xmin
  var xmax; // EjsS Model.Variables.spacetime.xmax
  var ymin; // EjsS Model.Variables.spacetime.ymin
  var ymax; // EjsS Model.Variables.spacetime.ymax
  var t; // EjsS Model.Variables.spacetime.t
  var dt; // EjsS Model.Variables.spacetime.dt
  var size; // EjsS Model.Variables.spacetime.size
  var size2; // EjsS Model.Variables.spacetime.size2
  var stroke; // EjsS Model.Variables.spacetime.stroke
  var pi; // EjsS Model.Variables.spacetime.pi
  var psize; // EjsS Model.Variables.spacetime.psize

  var R; // EjsS Model.Variables.water.R
  var xc; // EjsS Model.Variables.water.xc
  var yc; // EjsS Model.Variables.water.yc
  var b0; // EjsS Model.Variables.water.b0
  var indexr; // EjsS Model.Variables.water.indexr
  var indexg; // EjsS Model.Variables.water.indexg
  var indexb; // EjsS Model.Variables.water.indexb
  var drag; // EjsS Model.Variables.water.drag

  var n; // EjsS Model.Variables.particle.n
  var ni; // EjsS Model.Variables.particle.ni
  var b; // EjsS Model.Variables.particle.b
  var c; // EjsS Model.Variables.particle.c
  var sc; // EjsS Model.Variables.particle.sc
  var index; // EjsS Model.Variables.particle.index
  var dc; // EjsS Model.Variables.particle.dc
  var x; // EjsS Model.Variables.particle.x
  var y; // EjsS Model.Variables.particle.y
  var dx; // EjsS Model.Variables.particle.dx
  var dxr; // EjsS Model.Variables.particle.dxr
  var dyr; // EjsS Model.Variables.particle.dyr
  var c1; // EjsS Model.Variables.particle.c1
  var c2; // EjsS Model.Variables.particle.c2
  var c3; // EjsS Model.Variables.particle.c3
  var cr; // EjsS Model.Variables.particle.cr
  var clr; // EjsS Model.Variables.particle.clr
  var I; // EjsS Model.Variables.particle.I
  var clr0; // EjsS Model.Variables.particle.clr0
  var ca; // EjsS Model.Variables.particle.ca
  var cb; // EjsS Model.Variables.particle.cb
  var r; // EjsS Model.Variables.particle.r
  var red; // EjsS Model.Variables.particle.red
  var green; // EjsS Model.Variables.particle.green
  var blue; // EjsS Model.Variables.particle.blue
  var real; // EjsS Model.Variables.particle.real
  var iv; // EjsS Model.Variables.particle.iv

  var x1; // EjsS Model.Variables.path1.x1
  var y1; // EjsS Model.Variables.path1.y1
  var dx1; // EjsS Model.Variables.path1.dx1
  var dy1; // EjsS Model.Variables.path1.dy1
  var dxr1; // EjsS Model.Variables.path1.dxr1
  var dyr1; // EjsS Model.Variables.path1.dyr1
  var clr1; // EjsS Model.Variables.path1.clr1
  var clr1r; // EjsS Model.Variables.path1.clr1r

  var x2; // EjsS Model.Variables.path2.x2
  var y2; // EjsS Model.Variables.path2.y2
  var dx2; // EjsS Model.Variables.path2.dx2
  var dy2; // EjsS Model.Variables.path2.dy2
  var dxr2; // EjsS Model.Variables.path2.dxr2
  var dyr2; // EjsS Model.Variables.path2.dyr2
  var clr2; // EjsS Model.Variables.path2.clr2
  var clr2r; // EjsS Model.Variables.path2.clr2r

  var x3; // EjsS Model.Variables.path3.x3
  var y3; // EjsS Model.Variables.path3.y3
  var dx3; // EjsS Model.Variables.path3.dx3
  var dy3; // EjsS Model.Variables.path3.dy3
  var dxr3; // EjsS Model.Variables.path3.dxr3
  var dyr3; // EjsS Model.Variables.path3.dyr3
  var clr3; // EjsS Model.Variables.path3.clr3
  var clr3r; // EjsS Model.Variables.path3.clr3r
  var cos; // EjsS Model.Variables.path3.cos
  var cosfactor; // EjsS Model.Variables.path3.cosfactor

  var font; // EjsS Model.Variables.varfrem.font

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      t : t,
      dt : dt,
      size : size,
      size2 : size2,
      stroke : stroke,
      pi : pi,
      psize : psize,
      R : R,
      xc : xc,
      yc : yc,
      b0 : b0,
      indexr : indexr,
      indexg : indexg,
      indexb : indexb,
      drag : drag,
      n : n,
      ni : ni,
      b : b,
      c : c,
      sc : sc,
      index : index,
      dc : dc,
      x : x,
      y : y,
      dx : dx,
      dxr : dxr,
      dyr : dyr,
      c1 : c1,
      c2 : c2,
      c3 : c3,
      cr : cr,
      clr : clr,
      I : I,
      clr0 : clr0,
      ca : ca,
      cb : cb,
      r : r,
      red : red,
      green : green,
      blue : blue,
      real : real,
      iv : iv,
      x1 : x1,
      y1 : y1,
      dx1 : dx1,
      dy1 : dy1,
      dxr1 : dxr1,
      dyr1 : dyr1,
      clr1 : clr1,
      clr1r : clr1r,
      x2 : x2,
      y2 : y2,
      dx2 : dx2,
      dy2 : dy2,
      dxr2 : dxr2,
      dyr2 : dyr2,
      clr2 : clr2,
      clr2r : clr2r,
      x3 : x3,
      y3 : y3,
      dx3 : dx3,
      dy3 : dy3,
      dxr3 : dxr3,
      dyr3 : dyr3,
      clr3 : clr3,
      clr3r : clr3r,
      cos : cos,
      cosfactor : cosfactor,
      font : font
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.size2 != "undefined") size2 = json.size2;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.psize != "undefined") psize = json.psize;
    if(typeof json.R != "undefined") R = json.R;
    if(typeof json.xc != "undefined") xc = json.xc;
    if(typeof json.yc != "undefined") yc = json.yc;
    if(typeof json.b0 != "undefined") b0 = json.b0;
    if(typeof json.indexr != "undefined") indexr = json.indexr;
    if(typeof json.indexg != "undefined") indexg = json.indexg;
    if(typeof json.indexb != "undefined") indexb = json.indexb;
    if(typeof json.drag != "undefined") drag = json.drag;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.ni != "undefined") ni = json.ni;
    if(typeof json.b != "undefined") b = json.b;
    if(typeof json.c != "undefined") c = json.c;
    if(typeof json.sc != "undefined") sc = json.sc;
    if(typeof json.index != "undefined") index = json.index;
    if(typeof json.dc != "undefined") dc = json.dc;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.dxr != "undefined") dxr = json.dxr;
    if(typeof json.dyr != "undefined") dyr = json.dyr;
    if(typeof json.c1 != "undefined") c1 = json.c1;
    if(typeof json.c2 != "undefined") c2 = json.c2;
    if(typeof json.c3 != "undefined") c3 = json.c3;
    if(typeof json.cr != "undefined") cr = json.cr;
    if(typeof json.clr != "undefined") clr = json.clr;
    if(typeof json.I != "undefined") I = json.I;
    if(typeof json.clr0 != "undefined") clr0 = json.clr0;
    if(typeof json.ca != "undefined") ca = json.ca;
    if(typeof json.cb != "undefined") cb = json.cb;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.red != "undefined") red = json.red;
    if(typeof json.green != "undefined") green = json.green;
    if(typeof json.blue != "undefined") blue = json.blue;
    if(typeof json.real != "undefined") real = json.real;
    if(typeof json.iv != "undefined") iv = json.iv;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.dx1 != "undefined") dx1 = json.dx1;
    if(typeof json.dy1 != "undefined") dy1 = json.dy1;
    if(typeof json.dxr1 != "undefined") dxr1 = json.dxr1;
    if(typeof json.dyr1 != "undefined") dyr1 = json.dyr1;
    if(typeof json.clr1 != "undefined") clr1 = json.clr1;
    if(typeof json.clr1r != "undefined") clr1r = json.clr1r;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.dx2 != "undefined") dx2 = json.dx2;
    if(typeof json.dy2 != "undefined") dy2 = json.dy2;
    if(typeof json.dxr2 != "undefined") dxr2 = json.dxr2;
    if(typeof json.dyr2 != "undefined") dyr2 = json.dyr2;
    if(typeof json.clr2 != "undefined") clr2 = json.clr2;
    if(typeof json.clr2r != "undefined") clr2r = json.clr2r;
    if(typeof json.x3 != "undefined") x3 = json.x3;
    if(typeof json.y3 != "undefined") y3 = json.y3;
    if(typeof json.dx3 != "undefined") dx3 = json.dx3;
    if(typeof json.dy3 != "undefined") dy3 = json.dy3;
    if(typeof json.dxr3 != "undefined") dxr3 = json.dxr3;
    if(typeof json.dyr3 != "undefined") dyr3 = json.dyr3;
    if(typeof json.clr3 != "undefined") clr3 = json.clr3;
    if(typeof json.clr3r != "undefined") clr3r = json.clr3r;
    if(typeof json.cos != "undefined") cos = json.cos;
    if(typeof json.cosfactor != "undefined") cosfactor = json.cosfactor;
    if(typeof json.font != "undefined") font = json.font;
  };

  _model._inputAndPublicParameters = ["range",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "size2",  "stroke",  "pi",  "psize",  "R",  "xc",  "yc",  "b0",  "indexr",  "indexg",  "indexb",  "drag",  "n",  "ni",  "b",  "c",  "sc",  "index",  "dc",  "x",  "y",  "dx",  "dxr",  "dyr",  "c1",  "c2",  "c3",  "cr",  "clr",  "I",  "clr0",  "ca",  "cb",  "r",  "red",  "green",  "blue",  "real",  "iv",  "x1",  "y1",  "dx1",  "dy1",  "dxr1",  "dyr1",  "clr1",  "clr1r",  "x2",  "y2",  "dx2",  "dy2",  "dxr2",  "dyr2",  "clr2",  "clr2r",  "x3",  "y3",  "dx3",  "dy3",  "dxr3",  "dyr3",  "clr3",  "clr3r",  "cos",  "cosfactor",  "font"]; 

  _model._outputAndPublicParameters = ["range",  "xmin",  "xmax",  "ymin",  "ymax",  "t",  "dt",  "size",  "size2",  "stroke",  "pi",  "psize",  "R",  "xc",  "yc",  "b0",  "indexr",  "indexg",  "indexb",  "drag",  "n",  "ni",  "b",  "c",  "sc",  "index",  "dc",  "x",  "y",  "dx",  "dxr",  "dyr",  "c1",  "c2",  "c3",  "cr",  "clr",  "I",  "clr0",  "ca",  "cb",  "r",  "red",  "green",  "blue",  "real",  "iv",  "x1",  "y1",  "dx1",  "dy1",  "dxr1",  "dyr1",  "clr1",  "clr1r",  "x2",  "y2",  "dx2",  "dy2",  "dxr2",  "dyr2",  "clr2",  "clr2r",  "x3",  "y3",  "dx3",  "dy3",  "dxr3",  "dyr3",  "clr3",  "clr3r",  "cos",  "cosfactor",  "font"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    range = 20; // EjsS Model.Variables.spacetime.range
    xmin = -range; // EjsS Model.Variables.spacetime.xmin
    xmax = range; // EjsS Model.Variables.spacetime.xmax
    ymin = -range/2; // EjsS Model.Variables.spacetime.ymin
    ymax = range/2; // EjsS Model.Variables.spacetime.ymax
    t = 0; // EjsS Model.Variables.spacetime.t
    dt = 0.05; // EjsS Model.Variables.spacetime.dt
    size = range/50; // EjsS Model.Variables.spacetime.size
    size2 = size/2; // EjsS Model.Variables.spacetime.size2
    stroke = 2; // EjsS Model.Variables.spacetime.stroke
    pi = Math.PI; // EjsS Model.Variables.spacetime.pi
    psize = 5; // EjsS Model.Variables.spacetime.psize
  });

  _model.addToReset(function() {
    R = xmax/4; // EjsS Model.Variables.water.R
    xc = 0; // EjsS Model.Variables.water.xc
    yc = 0; // EjsS Model.Variables.water.yc
    b0 = R/3; // EjsS Model.Variables.water.b0
    indexr = 1.3307; // EjsS Model.Variables.water.indexr
    indexg = 1.3334; // EjsS Model.Variables.water.indexg
    indexb = 1.3435; // EjsS Model.Variables.water.indexb
    drag = false; // EjsS Model.Variables.water.drag
  });

  _model.addToReset(function() {
    n = 25; // EjsS Model.Variables.particle.n
    ni = 10; // EjsS Model.Variables.particle.ni
    b = new Array(n); // EjsS Model.Variables.particle.b
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.b
        b[_i0] = R/2;  // EjsS Model.Variables.particle.b
      }
    }());
    c = new Array(n); // EjsS Model.Variables.particle.c
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.c
        c[_i0] = 0;  // EjsS Model.Variables.particle.c
      }
    }());
    sc = 0; // EjsS Model.Variables.particle.sc
    index = indexr; // EjsS Model.Variables.particle.index
    dc = new Array(n); // EjsS Model.Variables.particle.dc
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.dc
        dc[_i0] = 0;  // EjsS Model.Variables.particle.dc
      }
    }());
    x = new Array(n); // EjsS Model.Variables.particle.x
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.x
        x[_i0] = 0;  // EjsS Model.Variables.particle.x
      }
    }());
    y = new Array(n); // EjsS Model.Variables.particle.y
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.y
        y[_i0] = 0;  // EjsS Model.Variables.particle.y
      }
    }());
    dx = new Array(n); // EjsS Model.Variables.particle.dx
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.dx
        dx[_i0] = 0;  // EjsS Model.Variables.particle.dx
      }
    }());
    dxr = new Array(n); // EjsS Model.Variables.particle.dxr
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.dxr
        dxr[_i0] = 0;  // EjsS Model.Variables.particle.dxr
      }
    }());
    dyr = new Array(n); // EjsS Model.Variables.particle.dyr
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.dyr
        dyr[_i0] = 0;  // EjsS Model.Variables.particle.dyr
      }
    }());
    c1 = new Array(n); // EjsS Model.Variables.particle.c1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.c1
        c1[_i0] = 0;  // EjsS Model.Variables.particle.c1
      }
    }());
    c2 = new Array(n); // EjsS Model.Variables.particle.c2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.c2
        c2[_i0] = 0;  // EjsS Model.Variables.particle.c2
      }
    }());
    c3 = new Array(n); // EjsS Model.Variables.particle.c3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.c3
        c3[_i0] = 0;  // EjsS Model.Variables.particle.c3
      }
    }());
    cr = 0; // EjsS Model.Variables.particle.cr
    clr = new Array(n); // EjsS Model.Variables.particle.clr
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.clr
        clr[_i0] = "";  // EjsS Model.Variables.particle.clr
      }
    }());
    I = new Array(n); // EjsS Model.Variables.particle.I
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.I
        I[_i0] = 0;  // EjsS Model.Variables.particle.I
      }
    }());
    clr0 = new Array(n); // EjsS Model.Variables.particle.clr0
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.clr0
        clr0[_i0] = "";  // EjsS Model.Variables.particle.clr0
      }
    }());
    ca = 0; // EjsS Model.Variables.particle.ca
    cb = 0; // EjsS Model.Variables.particle.cb
    r = new Array(n); // EjsS Model.Variables.particle.r
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.particle.r
        r[_i0] = 0;  // EjsS Model.Variables.particle.r
      }
    }());
    red = true; // EjsS Model.Variables.particle.red
    green = false; // EjsS Model.Variables.particle.green
    blue = false; // EjsS Model.Variables.particle.blue
    real = false; // EjsS Model.Variables.particle.real
    iv = 0; // EjsS Model.Variables.particle.iv
  });

  _model.addToReset(function() {
    x1 = new Array(n); // EjsS Model.Variables.path1.x1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.x1
        x1[_i0] = 0;  // EjsS Model.Variables.path1.x1
      }
    }());
    y1 = new Array(n); // EjsS Model.Variables.path1.y1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.y1
        y1[_i0] = 0;  // EjsS Model.Variables.path1.y1
      }
    }());
    dx1 = new Array(n); // EjsS Model.Variables.path1.dx1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.dx1
        dx1[_i0] = 0;  // EjsS Model.Variables.path1.dx1
      }
    }());
    dy1 = new Array(n); // EjsS Model.Variables.path1.dy1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.dy1
        dy1[_i0] = 0;  // EjsS Model.Variables.path1.dy1
      }
    }());
    dxr1 = new Array(n); // EjsS Model.Variables.path1.dxr1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.dxr1
        dxr1[_i0] = 0;  // EjsS Model.Variables.path1.dxr1
      }
    }());
    dyr1 = new Array(n); // EjsS Model.Variables.path1.dyr1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.dyr1
        dyr1[_i0] = 0;  // EjsS Model.Variables.path1.dyr1
      }
    }());
    clr1 = new Array(n); // EjsS Model.Variables.path1.clr1
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.clr1
        clr1[_i0] = "";  // EjsS Model.Variables.path1.clr1
      }
    }());
    clr1r = new Array(n); // EjsS Model.Variables.path1.clr1r
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path1.clr1r
        clr1r[_i0] = "";  // EjsS Model.Variables.path1.clr1r
      }
    }());
  });

  _model.addToReset(function() {
    x2 = new Array(n); // EjsS Model.Variables.path2.x2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.x2
        x2[_i0] = 0;  // EjsS Model.Variables.path2.x2
      }
    }());
    y2 = new Array(n); // EjsS Model.Variables.path2.y2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.y2
        y2[_i0] = 0;  // EjsS Model.Variables.path2.y2
      }
    }());
    dx2 = new Array(n); // EjsS Model.Variables.path2.dx2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.dx2
        dx2[_i0] = 0;  // EjsS Model.Variables.path2.dx2
      }
    }());
    dy2 = new Array(n); // EjsS Model.Variables.path2.dy2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.dy2
        dy2[_i0] = 0;  // EjsS Model.Variables.path2.dy2
      }
    }());
    dxr2 = new Array(n); // EjsS Model.Variables.path2.dxr2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.dxr2
        dxr2[_i0] = 0;  // EjsS Model.Variables.path2.dxr2
      }
    }());
    dyr2 = new Array(n); // EjsS Model.Variables.path2.dyr2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.dyr2
        dyr2[_i0] = 0;  // EjsS Model.Variables.path2.dyr2
      }
    }());
    clr2 = new Array(n); // EjsS Model.Variables.path2.clr2
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.clr2
        clr2[_i0] = "";  // EjsS Model.Variables.path2.clr2
      }
    }());
    clr2r = new Array(n); // EjsS Model.Variables.path2.clr2r
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path2.clr2r
        clr2r[_i0] = "";  // EjsS Model.Variables.path2.clr2r
      }
    }());
  });

  _model.addToReset(function() {
    x3 = new Array(n); // EjsS Model.Variables.path3.x3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.x3
        x3[_i0] = 0;  // EjsS Model.Variables.path3.x3
      }
    }());
    y3 = new Array(n); // EjsS Model.Variables.path3.y3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.y3
        y3[_i0] = 0;  // EjsS Model.Variables.path3.y3
      }
    }());
    dx3 = new Array(n); // EjsS Model.Variables.path3.dx3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.dx3
        dx3[_i0] = 0;  // EjsS Model.Variables.path3.dx3
      }
    }());
    dy3 = new Array(n); // EjsS Model.Variables.path3.dy3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.dy3
        dy3[_i0] = 0;  // EjsS Model.Variables.path3.dy3
      }
    }());
    dxr3 = new Array(n); // EjsS Model.Variables.path3.dxr3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.dxr3
        dxr3[_i0] = 0;  // EjsS Model.Variables.path3.dxr3
      }
    }());
    dyr3 = new Array(n); // EjsS Model.Variables.path3.dyr3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.dyr3
        dyr3[_i0] = 0;  // EjsS Model.Variables.path3.dyr3
      }
    }());
    clr3 = new Array(n); // EjsS Model.Variables.path3.clr3
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.clr3
        clr3[_i0] = "";  // EjsS Model.Variables.path3.clr3
      }
    }());
    clr3r = new Array(n); // EjsS Model.Variables.path3.clr3r
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.path3.clr3r
        clr3r[_i0] = "";  // EjsS Model.Variables.path3.clr3r
      }
    }());
    cos = false; // EjsS Model.Variables.path3.cos
    cosfactor = 1; // EjsS Model.Variables.path3.cosfactor
  });

  _model.addToReset(function() {
    font = "normal normal 2vw"; // EjsS Model.Variables.varfrem.font
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  var dv;  // > CustomCode.dvalue:1
  function dvalue (v) {  // > CustomCode.dvalue:2
    if(v>0)dv=0.5;  // > CustomCode.dvalue:3
    else if(v<0)dv=-0.5;  // > CustomCode.dvalue:4
    else dv=0;  // > CustomCode.dvalue:5
    return Math.round(v*100+dv)/100.;  // > CustomCode.dvalue:6
  }  // > CustomCode.dvalue:7

  function setxy (c, x, y, dxr, dyr) {  // > CustomCode.setxy:1
    for(var i=0;i<ni;i++){  // > CustomCode.setxy:2
     x[i]=xc+R*Math.cos(c[i]);  // > CustomCode.setxy:3
     y[i]=yc+R*Math.sin(c[i]);  // > CustomCode.setxy:4
     cr=c[i]-Math.asin(b[i]/R);  // > CustomCode.setxy:5
     if(Math.sin(cr)>0)dyr[i]=1.5*ymax-y[i];  // > CustomCode.setxy:6
     else dyr[i]=1.5*ymin-y[i];  // > CustomCode.setxy:7
     dxr[i]=dyr[i]/Math.tan(cr);  // > CustomCode.setxy:8
    }  // > CustomCode.setxy:9
  }  // > CustomCode.setxy:10

  function setdxy(x1, y1, x2, y2, dx, dy){  // > CustomCode.setdxy:1
    for(var i=0;i<ni;i++){  // > CustomCode.setdxy:2
      dx[i]=x1[i]-x2[i];  // > CustomCode.setdxy:3
      dy[i]=y1[i]-y2[i];  // > CustomCode.setdxy:4
    }  // > CustomCode.setdxy:5
  }  // > CustomCode.setdxy:6

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  function getColor (v) {  // > CustomCode.getColor:1
   if(real)iv= Math.round(v*10)/10;  // > CustomCode.getColor:2
   else iv=1;  // > CustomCode.getColor:3
   if(drag)return "rgba(100,100,100,"+iv+")";  // > CustomCode.getColor:4
   else if(blue)return "rgba(0,0,255,"+iv+")";  // > CustomCode.getColor:5
   else if(green)return "rgba(0,255,0,"+iv+")";  // > CustomCode.getColor:6
   else{  // > CustomCode.getColor:7
     red=true;  // > CustomCode.getColor:8
     return "rgba(255,0,0,"+iv+")";  // > CustomCode.getColor:9
   }  // > CustomCode.getColor:10
  }  // > CustomCode.getColor:11

  function sliderindexcheck() {  // > CustomCode.customfrem:1
  red=false;  // > CustomCode.customfrem:2
  blue=false;  // > CustomCode.customfrem:3
  green=false;  // > CustomCode.customfrem:4
    if (index < 1.3308){red=true;}  // > CustomCode.customfrem:5
    if (index > 1.3308){green=true;red=false;}  // > CustomCode.customfrem:6
    if (index > 1.3436){blue=true;green=false;}  // > CustomCode.customfrem:7
  }  // > CustomCode.customfrem:8

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    ni=n;  // > Initialization.Init Page:1
    for(var i=0;i<ni;i++){  // > Initialization.Init Page:2
     b[i]=b0+i*R/(ni*1.4)-yc;  // > Initialization.Init Page:3
    }  // > Initialization.Init Page:4
    if(drag == true){  // > Initialization.Init Page:5
      red=green=blue=false;  // > Initialization.Init Page:6
    }else if(blue == true)index=indexb;  // > Initialization.Init Page:7
    else if(green == true)index=indexg;  // > Initialization.Init Page:8
    else {  // > Initialization.Init Page:9
      red=true;  // > Initialization.Init Page:10
      index=indexr;  // > Initialization.Init Page:11
    }  // > Initialization.Init Page:12
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(200,200,200); stop-opacity:0.2" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(0,200,200);stop-opacity:1" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="50%" fx="0%" fy="0%">'+  // > Initialization.svg:7
      '    <stop offset="0%" style="stop-color:rgb(200,200,200); stop-opacity:1" />'+  // > Initialization.svg:8
      '    <stop offset="100%" style="stop-color:rgb(0,0,200);stop-opacity:0.2" />'+  // > Initialization.svg:9
      '  </radialGradient>'+  // > Initialization.svg:10
      '</defs></svg>';  // > Initialization.svg:11
    container.innerHTML = svggradient;  // > Initialization.svg:12
    document.body.appendChild(container);  // > Initialization.svg:13
    //"url(#mygrandient)"  // > Initialization.svg:14
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    for(var i=0;i<ni;i++){  // > FixedRelations.FixRel Page:1
     sc=b[i]/R;  // > FixedRelations.FixRel Page:2
     if(cos) cosfactor=Math.cos(Math.asin(sc));  // > FixedRelations.FixRel Page:3
     else cosfactor=1;  // > FixedRelations.FixRel Page:4
     I[i]=1;  // > FixedRelations.FixRel Page:5
     clr0[i]=getColor(I[i]);  // > FixedRelations.FixRel Page:6
     c[i]=pi-Math.asin(sc);  // > FixedRelations.FixRel Page:7
     if(b[i]>0)dc[i]=2*Math.asin(sc/index)-pi;  // > FixedRelations.FixRel Page:8
     else dc[i]=pi+2*Math.asin(sc/index);  // > FixedRelations.FixRel Page:9
     ca=Math.asin(Math.abs(sc));  // > FixedRelations.FixRel Page:10
     cb=Math.asin(Math.abs(sc/index));  // > FixedRelations.FixRel Page:11
     r[i]=Math.sin(ca-cb)/Math.sin(ca+cb);  // > FixedRelations.FixRel Page:12
     clr[i]=getColor(cosfactor*I[i]*r[i]*r[i]);  // > FixedRelations.FixRel Page:13
     I[i]=I[i]*cosfactor*(1-r[i]*r[i]);  // > FixedRelations.FixRel Page:14
     clr1[i]=getColor(I[i]);  // > FixedRelations.FixRel Page:15
     clr1r[i]=getColor(I[i]*(1-r[i]*r[i]));  // > FixedRelations.FixRel Page:16
     I[i]=I[i]*r[i]*r[i];  // > FixedRelations.FixRel Page:17
     clr2[i]=getColor(I[i]);  // > FixedRelations.FixRel Page:18
     clr2r[i]=getColor(I[i]*(1-r[i]*r[i]));  // > FixedRelations.FixRel Page:19
     I[i]=I[i]*r[i]*r[i];  // > FixedRelations.FixRel Page:20
     clr3[i]=getColor(I[i]);  // > FixedRelations.FixRel Page:21
     clr3r[i]=getColor(I[i]*(1-r[i]*r[i]));  // > FixedRelations.FixRel Page:22
    }  // > FixedRelations.FixRel Page:23
    setxy(c,x,y,dxr,dyr);  // > FixedRelations.FixRel Page:24
    for(var i=0;i<ni;i++){  // > FixedRelations.FixRel Page:25
     dx[i]=xmin-x[i];  // > FixedRelations.FixRel Page:26
     c1[i]=c[i]+dc[i];  // > FixedRelations.FixRel Page:27
    }  // > FixedRelations.FixRel Page:28
    setxy(c1,x1,y1,dxr1,dyr1);  // > FixedRelations.FixRel Page:29
    setdxy(x,y,x1,y1,dx1,dy1);  // > FixedRelations.FixRel Page:30
    for(var i=0;i<ni;i++)c2[i]=c1[i]+dc[i];  // > FixedRelations.FixRel Page:31
    setxy(c2,x2,y2,dxr2,dyr2);  // > FixedRelations.FixRel Page:32
    setdxy(x1,y1,x2,y2,dx2,dy2);  // > FixedRelations.FixRel Page:33
    for(var i=0;i<ni;i++)c3[i]=c2[i]+dc[i];  // > FixedRelations.FixRel Page:34
    setxy(c3,x3,y3,dxr3,dyr3);  // > FixedRelations.FixRel Page:35
    setdxy(x2,y2,x3,y3,dx3,dy3);  // > FixedRelations.FixRel Page:36
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new rainbow2_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.controlPanel.linkProperty("Background",  function() { return drag?"gray":red?"red":green?"green":"blue"; } ); // HtmlView Page linking property 'Background' for element 'controlPanel'
          _view.controlPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'controlPanel'
          _view.sliderindex.setAction("OnRelease", function(_data,_info) {
  drag=false;
  sliderindexcheck();

}); // HtmlView Page setting action 'OnRelease' for element 'sliderindex'
          _view.sliderindex.linkProperty("Value",  function() { return index; }, function(_v) { index = _v; } ); // HtmlView Page linking property 'Value' for element 'sliderindex'
          _view.sliderindex.setAction("OnChange", function(_data,_info) {
  drag=true;

}); // HtmlView Page setting action 'OnChange' for element 'sliderindex'
          _view.realintensityratiocheckbox.linkProperty("Checked",  function() { return real; }, function(_v) { real = _v; } ); // HtmlView Page linking property 'Checked' for element 'realintensityratiocheckbox'
          _view.crosssectioncheckbox.linkProperty("Checked",  function() { return cos; }, function(_v) { cos = _v; } ); // HtmlView Page linking property 'Checked' for element 'crosssectioncheckbox'
          _view.crosssectioncheckbox.linkProperty("Disabled",  function() { return !real; } ); // HtmlView Page linking property 'Disabled' for element 'crosssectioncheckbox'
          _view.radiobuttonred.linkProperty("Checked",  function() { return red; }, function(_v) { red = _v; } ); // HtmlView Page linking property 'Checked' for element 'radiobuttonred'
          _view.radiobuttonred.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'radiobuttonred'
          _view.radiobuttonred.linkProperty("Disabled",  function() { return drag; }, function(_v) { drag = _v; } ); // HtmlView Page linking property 'Disabled' for element 'radiobuttonred'
          _view.radiobuttonred.setAction("OnCheckOn", function(_data,_info) {
  green = false;blue= false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'radiobuttonred'
          _view.radioButtongreen.linkProperty("Checked",  function() { return green; }, function(_v) { green = _v; } ); // HtmlView Page linking property 'Checked' for element 'radioButtongreen'
          _view.radioButtongreen.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'radioButtongreen'
          _view.radioButtongreen.linkProperty("Disabled",  function() { return drag; }, function(_v) { drag = _v; } ); // HtmlView Page linking property 'Disabled' for element 'radioButtongreen'
          _view.radioButtongreen.setAction("OnCheckOn", function(_data,_info) {
  red=false;blue=false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'radioButtongreen'
          _view.radioButtonblue.linkProperty("Checked",  function() { return blue; }, function(_v) { blue = _v; } ); // HtmlView Page linking property 'Checked' for element 'radioButtonblue'
          _view.radioButtonblue.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'radioButtonblue'
          _view.radioButtonblue.linkProperty("Disabled",  function() { return drag; }, function(_v) { drag = _v; } ); // HtmlView Page linking property 'Disabled' for element 'radioButtonblue'
          _view.radioButtonblue.setAction("OnCheckOn", function(_data,_info) {
  green = false;red=false;

}); // HtmlView Page setting action 'OnCheckOn' for element 'radioButtonblue'
          _view.resetbutton.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetbutton'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.raindrop.linkProperty("SizeX",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeX' for element 'raindrop'
          _view.raindrop.linkProperty("X",  function() { return xc; }, function(_v) { xc = _v; } ); // HtmlView Page linking property 'X' for element 'raindrop'
          _view.raindrop.linkProperty("Y",  function() { return yc; }, function(_v) { yc = _v; } ); // HtmlView Page linking property 'Y' for element 'raindrop'
          _view.raindrop.linkProperty("SizeY",  function() { return 2*R; } ); // HtmlView Page linking property 'SizeY' for element 'raindrop'
          _view.raindrop.setAction("OnDrag", function(_data,_info) {
  for(var i=0;i<ni;i++){
   b[i]=b0+i*R/(ni*1.4)-yc;
  }

}); // HtmlView Page setting action 'OnDrag' for element 'raindrop'
          _view.IncomingRay.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'IncomingRay'
          _view.IncomingRay.linkProperty("SizeX",  function() { return dx; }, function(_v) { dx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'IncomingRay'
          _view.IncomingRay.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'IncomingRay'
          _view.IncomingRay.linkProperty("LineColor",  function() { return clr0; }, function(_v) { clr0 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'IncomingRay'
          _view.IncomingRay.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'IncomingRay'
          _view.rayout1.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'rayout1'
          _view.rayout1.linkProperty("SizeX",  function() { return dx1; }, function(_v) { dx1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'rayout1'
          _view.rayout1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'rayout1'
          _view.rayout1.linkProperty("LineColor",  function() { return clr1; }, function(_v) { clr1 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'rayout1'
          _view.rayout1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'rayout1'
          _view.rayout1.linkProperty("SizeY",  function() { return dy1; }, function(_v) { dy1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'rayout1'
          _view.rayout2.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'rayout2'
          _view.rayout2.linkProperty("SizeX",  function() { return dx2; }, function(_v) { dx2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'rayout2'
          _view.rayout2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'rayout2'
          _view.rayout2.linkProperty("LineColor",  function() { return clr2; }, function(_v) { clr2 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'rayout2'
          _view.rayout2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'rayout2'
          _view.rayout2.linkProperty("SizeY",  function() { return dy2; }, function(_v) { dy2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'rayout2'
          _view.rayout3.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'rayout3'
          _view.rayout3.linkProperty("SizeX",  function() { return dx3; }, function(_v) { dx3 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'rayout3'
          _view.rayout3.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'rayout3'
          _view.rayout3.linkProperty("LineColor",  function() { return clr3; }, function(_v) { clr3 = _v; } ); // HtmlView Page linking property 'LineColor' for element 'rayout3'
          _view.rayout3.linkProperty("Y",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'Y' for element 'rayout3'
          _view.rayout3.linkProperty("SizeY",  function() { return dy3; }, function(_v) { dy3 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'rayout3'
          _view.reflectout.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'reflectout'
          _view.reflectout.linkProperty("SizeX",  function() { return dxr; }, function(_v) { dxr = _v; } ); // HtmlView Page linking property 'SizeX' for element 'reflectout'
          _view.reflectout.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'reflectout'
          _view.reflectout.linkProperty("LineColor",  function() { return clr; }, function(_v) { clr = _v; } ); // HtmlView Page linking property 'LineColor' for element 'reflectout'
          _view.reflectout.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'reflectout'
          _view.reflectout.linkProperty("SizeY",  function() { return dyr; }, function(_v) { dyr = _v; } ); // HtmlView Page linking property 'SizeY' for element 'reflectout'
          _view.reflect.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'reflect'
          _view.reflect.linkProperty("SizeX",  function() { return dxr1; }, function(_v) { dxr1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'reflect'
          _view.reflect.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'reflect'
          _view.reflect.linkProperty("LineColor",  function() { return clr1r; }, function(_v) { clr1r = _v; } ); // HtmlView Page linking property 'LineColor' for element 'reflect'
          _view.reflect.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'reflect'
          _view.reflect.linkProperty("SizeY",  function() { return dyr1; }, function(_v) { dyr1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'reflect'
          _view.reflect2.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'reflect2'
          _view.reflect2.linkProperty("SizeX",  function() { return dxr2; }, function(_v) { dxr2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'reflect2'
          _view.reflect2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'reflect2'
          _view.reflect2.linkProperty("LineColor",  function() { return clr2r; }, function(_v) { clr2r = _v; } ); // HtmlView Page linking property 'LineColor' for element 'reflect2'
          _view.reflect2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'reflect2'
          _view.reflect2.linkProperty("SizeY",  function() { return dyr2; }, function(_v) { dyr2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'reflect2'
          _view.reflect3.linkProperty("NumberOfElements",  function() { return ni; }, function(_v) { ni = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'reflect3'
          _view.reflect3.linkProperty("SizeX",  function() { return dxr3; }, function(_v) { dxr3 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'reflect3'
          _view.reflect3.linkProperty("X",  function() { return x3; }, function(_v) { x3 = _v; } ); // HtmlView Page linking property 'X' for element 'reflect3'
          _view.reflect3.linkProperty("LineColor",  function() { return clr3r; }, function(_v) { clr3r = _v; } ); // HtmlView Page linking property 'LineColor' for element 'reflect3'
          _view.reflect3.linkProperty("Y",  function() { return y3; }, function(_v) { y3 = _v; } ); // HtmlView Page linking property 'Y' for element 'reflect3'
          _view.reflect3.linkProperty("SizeY",  function() { return dyr3; }, function(_v) { dyr3 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'reflect3'
          _view.dragpoint.linkProperty("X",  function() { return xmin+size; } ); // HtmlView Page linking property 'X' for element 'dragpoint'
          _view.dragpoint.linkProperty("Y",  function() { return b0; }, function(_v) { b0 = _v; } ); // HtmlView Page linking property 'Y' for element 'dragpoint'
          _view.dragpoint.setAction("OnDrag", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnDrag' for element 'dragpoint'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(-1); // this includes _model.reset()
  return _model;
}

function rainbow2_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = rainbow2_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function rainbow2_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"panel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"nlabel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'nlabel'
      .setProperty("Text","n = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'nlabel'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"sliderindex", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'sliderindex'
      .setProperty("Minimum",1.05) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'sliderindex'
      .setProperty("Maximum",2.0) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'sliderindex'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'sliderindex'
      .setProperty("Format","0.0000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'sliderindex'
      .setProperty("Step",0.0001) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'sliderindex'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"realintensityratiocheckbox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'realintensityratiocheckbox'
      .setProperty("Text","real intensity ratio") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'realintensityratiocheckbox'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"crosssectioncheckbox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'crosssectioncheckbox'
      .setProperty("Text","cross section") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'crosssectioncheckbox'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"radiobuttonred", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'radiobuttonred'
      .setProperty("Text","red") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'radiobuttonred'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"radioButtongreen", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'radioButtongreen'
      .setProperty("Text","green") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'radioButtongreen'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"radioButtonblue", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'radioButtonblue'
      .setProperty("Text","blue") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'radioButtonblue'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetbutton", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetbutton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetbutton'
      .setProperty("Font","normal bold 2vw") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'resetbutton'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","85vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowCoordinates",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowCoordinates' for element 'plottingPanel'
      .setProperty("Background","url(#mygrandient)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'plottingPanel'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("AxisYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"raindrop", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'raindrop'
      .setProperty("FillColor","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'raindrop'
      .setProperty("LineColor","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'raindrop'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'raindrop'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'raindrop'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"IncomingRay", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'IncomingRay'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'IncomingRay'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'IncomingRay'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"rayout1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rayout1'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'rayout1'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"rayout2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rayout2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'rayout2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"rayout3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rayout3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'rayout3'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"reflectout", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'reflectout'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'reflectout'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"reflect", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'reflect'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'reflect'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"reflect2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'reflect2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'reflect2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"reflect3", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'reflect3'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'reflect3'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dragpoint", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dragpoint'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dragpoint'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'dragpoint'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dragpoint'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'dragpoint'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'dragpoint'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'dragpoint'
      .setProperty("DrawFill",false) // EJsS HtmlView.HtmlView Page: setting property 'DrawFill' for element 'dragpoint'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragpoint'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Rainbow Simulator<br />
     <img alt="Logo" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/rainbow2/Screen Shot 2018-02-15 at 9.47.06 AM (2).png" />
      </p>
      <p>
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/01authorfu-kwun.hwang.png" />
      <img alt="author image" src="file:///Users/lookang/Google Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/1authorlookangphoto.png" />
 Fu-Kwun Hwang; Fremont Teng; lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fu-Kwun Hwang; Fremont Teng; lookang.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="file:///Users/lookang/Google Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new rainbow2("_topFrame","file:/Users/lookang/Google%20Drive/PublicLawrence/EjsS_5.3.SG_180225/bin/javascript/lib/","file:/Users/lookang/Google%20Drive/PublicLawrence/workspace/source/EJSS/04waves_13light/");
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
