<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Subtraction</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function Unnamed5v2(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var numberofapples; // EjsS Model.Variables.Var Table.numberofapples
  var na; // EjsS Model.Variables.Var Table.na
  var x; // EjsS Model.Variables.Var Table.x
  var y; // EjsS Model.Variables.Var Table.y
  var appleinbasket; // EjsS Model.Variables.Var Table.appleinbasket
  var showtree; // EjsS Model.Variables.Var Table.showtree
  var applepressed; // EjsS Model.Variables.Var Table.applepressed
  var xb; // EjsS Model.Variables.Var Table.xb
  var yb; // EjsS Model.Variables.Var Table.yb
  var showbasket; // EjsS Model.Variables.Var Table.showbasket
  var textSet; // EjsS Model.Variables.Var Table.textSet
  var applesleft; // EjsS Model.Variables.Var Table.applesleft
  var xbasket; // EjsS Model.Variables.Var Table.xbasket
  var ybasket; // EjsS Model.Variables.Var Table.ybasket

  var questionstring; // EjsS Model.Variables.For teachers to change.questionstring

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      numberofapples : numberofapples,
      na : na,
      x : x,
      y : y,
      appleinbasket : appleinbasket,
      showtree : showtree,
      applepressed : applepressed,
      xb : xb,
      yb : yb,
      showbasket : showbasket,
      textSet : textSet,
      applesleft : applesleft,
      xbasket : xbasket,
      ybasket : ybasket,
      questionstring : questionstring
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.numberofapples != "undefined") numberofapples = json.numberofapples;
    if(typeof json.na != "undefined") na = json.na;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.appleinbasket != "undefined") appleinbasket = json.appleinbasket;
    if(typeof json.showtree != "undefined") showtree = json.showtree;
    if(typeof json.applepressed != "undefined") applepressed = json.applepressed;
    if(typeof json.xb != "undefined") xb = json.xb;
    if(typeof json.yb != "undefined") yb = json.yb;
    if(typeof json.showbasket != "undefined") showbasket = json.showbasket;
    if(typeof json.textSet != "undefined") textSet = json.textSet;
    if(typeof json.applesleft != "undefined") applesleft = json.applesleft;
    if(typeof json.xbasket != "undefined") xbasket = json.xbasket;
    if(typeof json.ybasket != "undefined") ybasket = json.ybasket;
    if(typeof json.questionstring != "undefined") questionstring = json.questionstring;
  };

  _model._inputAndPublicParameters = ["numberofapples",  "na",  "x",  "y",  "appleinbasket",  "showtree",  "applepressed",  "xb",  "yb",  "showbasket",  "textSet",  "applesleft",  "xbasket",  "ybasket",  "questionstring"]; 

  _model._outputAndPublicParameters = ["numberofapples",  "na",  "x",  "y",  "appleinbasket",  "showtree",  "applepressed",  "xb",  "yb",  "showbasket",  "textSet",  "applesleft",  "xbasket",  "ybasket",  "questionstring"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["FixRel Page"] = true;
  });

  _model.addToReset(function() {
    numberofapples = Math.round(Math.random()*9); // EjsS Model.Variables.Var Table.numberofapples
    na = numberofapples; // EjsS Model.Variables.Var Table.na
    x = [-3,-2,-1,0,1,-2.5,1.5,0.5,-1.5,0.8,-1.3]; // EjsS Model.Variables.Var Table.x
    y = [-0.5,2,1,0,2,0.5,1,2.0,-0.5,-0.8,-0.5]; // EjsS Model.Variables.Var Table.y
    appleinbasket = 0; // EjsS Model.Variables.Var Table.appleinbasket
    showtree = new Array(na); // EjsS Model.Variables.Var Table.showtree
    (function () {
      var _i0;
      for (_i0=0; _i0<na; _i0+=1) {  // EjsS Model.Variables.Var Table.showtree
        showtree[_i0] = true;  // EjsS Model.Variables.Var Table.showtree
      }
    }());
    applepressed = new Array(na); // EjsS Model.Variables.Var Table.applepressed
    (function () {
      var _i0;
      for (_i0=0; _i0<na; _i0+=1) {  // EjsS Model.Variables.Var Table.applepressed
        applepressed[_i0] = -1;  // EjsS Model.Variables.Var Table.applepressed
      }
    }());
    xb = [1.5,1.8,2.0,2.3,2.1]; // EjsS Model.Variables.Var Table.xb
    yb = [-2.15,-2.2,-2.2,-2.15,-1.8]; // EjsS Model.Variables.Var Table.yb
    showbasket = new Array(na); // EjsS Model.Variables.Var Table.showbasket
    (function () {
      var _i0;
      for (_i0=0; _i0<na; _i0+=1) {  // EjsS Model.Variables.Var Table.showbasket
        showbasket[_i0] = false;  // EjsS Model.Variables.Var Table.showbasket
      }
    }());
    textSet = [1,2,3,4,5,6,7,8,9,10]; // EjsS Model.Variables.Var Table.textSet
    xbasket = 2; // EjsS Model.Variables.Var Table.xbasket
    ybasket = -2.6; // EjsS Model.Variables.Var Table.ybasket
  });

  _model.addToReset(function() {
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    applesleft = numberofapples-appleinbasket;  // > FixedRelations.FixRel Page:1
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new Unnamed5v2_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.topLabel.linkProperty("Text",  function() { return "There are "+numberofapples+" apples on the tree. Hoppi picks "+appleinbasket+" apples from the tree. How many apples are there left?"; } ); // HtmlView Page linking property 'Text' for element 'topLabel'
          _view.basket.linkProperty("X",  function() { return xbasket; }, function(_v) { xbasket = _v; } ); // HtmlView Page linking property 'X' for element 'basket'
          _view.basket.linkProperty("Y",  function() { return ybasket; }, function(_v) { ybasket = _v; } ); // HtmlView Page linking property 'Y' for element 'basket'
          _view.Applebasket.linkProperty("NumberOfElements",  function() { return na; }, function(_v) { na = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Applebasket'
          _view.Applebasket.linkProperty("X",  function() { return xb; }, function(_v) { xb = _v; } ); // HtmlView Page linking property 'X' for element 'Applebasket'
          _view.Applebasket.linkProperty("Y",  function() { return yb; }, function(_v) { yb = _v; } ); // HtmlView Page linking property 'Y' for element 'Applebasket'
          _view.Applebasket.linkProperty("Visibility",  function() { return showbasket; }, function(_v) { showbasket = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Applebasket'
          _view.Appletree.linkProperty("NumberOfElements",  function() { return na; }, function(_v) { na = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'Appletree'
          _view.Appletree.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'Appletree'
          _view.Appletree.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'Appletree'
          _view.Appletree.linkProperty("Visibility",  function() { return showtree; }, function(_v) { showtree = _v; } ); // HtmlView Page linking property 'Visibility' for element 'Appletree'
          _view.Appletree.setAction("OnPress", function(_data,_info) {
  showtree[applepressed]=false;
  numberofapples=numberofapples-1;
  appleinbasket=appleinbasket+1;
  showbasket[(appleinbasket-1)]=true;

}); // HtmlView Page setting action 'OnPress' for element 'Appletree'
          _view.Appletree.linkProperty("ElementInteracted",  function() { return applepressed; }, function(_v) { applepressed = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'Appletree'
          _view.textSet.linkProperty("NumberOfElements",  function() { return na; }, function(_v) { na = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return textSet; }, function(_v) { textSet = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.topLabel2.linkProperty("Text",  function() { return ""+numberofapples+" - "+appleinbasket+" = "+applesleft+" apples are left."; } ); // HtmlView Page linking property 'Text' for element 'topLabel2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function Unnamed5v2_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = Unnamed5v2_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function Unnamed5v2_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Width",800) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'topLabel'
      .setProperty("Font","normal bold 30px \"Comic Sans MS\", cursive, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",600) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width",800) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("MinimumX",-4) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-3) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("MaximumY",3) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",4) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"background", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'background'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'background'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'background'
      .setProperty("ImageUrl","./Unnamed5/background-scene-with-tree.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'background'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'background'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'background'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"hoppi", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hoppi'
      .setProperty("SizeX",2.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'hoppi'
      .setProperty("X",1.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'hoppi'
      .setProperty("ImageUrl","./Unnamed5/hopp.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'hoppi'
      .setProperty("Y",-2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'hoppi'
      .setProperty("SizeY",2.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'hoppi'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"basket", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'basket'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'basket'
      .setProperty("ImageUrl","./Unnamed5/basket.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'basket'
      .setProperty("SizeY",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'basket'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"Applebasket", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Applebasket'
      .setProperty("SizeX",0.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Applebasket'
      .setProperty("ImageUrl","./Unnamed5/Single_apple.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'Applebasket'
      .setProperty("SizeY",0.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Applebasket'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"Appletree", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Appletree'
      .setProperty("Sensitivity",10) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'Appletree'
      .setProperty("SizeX",0.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Appletree'
      .setProperty("ImageUrl","./Unnamed5/Single_apple.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'Appletree'
      .setProperty("SizeY",0.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Appletree'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'Appletree'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textSet'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel2", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel2", _view.labelPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel2'
      .setProperty("Width",800) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'topLabel2'
      .setProperty("Font","normal bold 40px \"Comic Sans MS\", cursive, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'topLabel2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Subtraction<br />
      </p>
      <p>
 Author name; Marinah Toh
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2019, Author name; Marinah Toh.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new Unnamed5v2("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
