<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function Numbers7(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var numberofrounds; // EjsS Model.Variables.ufo.numberofrounds
  var t; // EjsS Model.Variables.ufo.t
  var dt; // EjsS Model.Variables.ufo.dt
  var numberofoption; // EjsS Model.Variables.ufo.numberofoption
  var n; // EjsS Model.Variables.ufo.n
  var x; // EjsS Model.Variables.ufo.x
  var y; // EjsS Model.Variables.ufo.y
  var vx; // EjsS Model.Variables.ufo.vx
  var text; // EjsS Model.Variables.ufo.text
  var visibleufo; // EjsS Model.Variables.ufo.visibleufo
  var score; // EjsS Model.Variables.ufo.score
  var target; // EjsS Model.Variables.ufo.target
  var roundover; // EjsS Model.Variables.ufo.roundover
  var tryagain; // EjsS Model.Variables.ufo.tryagain
  var popup; // EjsS Model.Variables.ufo.popup
  var ammo; // EjsS Model.Variables.ufo.ammo
  var roundno; // EjsS Model.Variables.ufo.roundno
  var gameend; // EjsS Model.Variables.ufo.gameend
  var boom; // EjsS Model.Variables.ufo.boom
  var bx; // EjsS Model.Variables.ufo.bx
  var by; // EjsS Model.Variables.ufo.by

  var xc; // EjsS Model.Variables.Cannon.xc
  var yc; // EjsS Model.Variables.Cannon.yc
  var xdrag; // EjsS Model.Variables.Cannon.xdrag
  var ydrag; // EjsS Model.Variables.Cannon.ydrag
  var theta; // EjsS Model.Variables.Cannon.theta
  var L; // EjsS Model.Variables.Cannon.L

  var ta; // EjsS Model.Variables.Ammo.ta
  var dta; // EjsS Model.Variables.Ammo.dta
  var xa; // EjsS Model.Variables.Ammo.xa
  var ya; // EjsS Model.Variables.Ammo.ya
  var vya; // EjsS Model.Variables.Ammo.vya
  var vy; // EjsS Model.Variables.Ammo.vy
  var xdotProj; // EjsS Model.Variables.Ammo.xdotProj

  var xr; // EjsS Model.Variables.questions.xr
  var yr; // EjsS Model.Variables.questions.yr
  var textshoot; // EjsS Model.Variables.questions.textshoot

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];
  var _ODEi_evolution2;
  var userEvents2=[];

  _model.getOdes = function() { return [_ODEi_evolution1,_ODEi_evolution2]; };

  _model.removeEvents = function(){
    userEvents1=[];
    userEvents2=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      numberofrounds : numberofrounds,
      t : t,
      dt : dt,
      numberofoption : numberofoption,
      n : n,
      x : x,
      y : y,
      vx : vx,
      text : text,
      visibleufo : visibleufo,
      score : score,
      target : target,
      roundover : roundover,
      tryagain : tryagain,
      popup : popup,
      ammo : ammo,
      roundno : roundno,
      gameend : gameend,
      boom : boom,
      bx : bx,
      by : by,
      xc : xc,
      yc : yc,
      xdrag : xdrag,
      ydrag : ydrag,
      theta : theta,
      L : L,
      ta : ta,
      dta : dta,
      xa : xa,
      ya : ya,
      vya : vya,
      vy : vy,
      xdotProj : xdotProj,
      xr : xr,
      yr : yr,
      textshoot : textshoot
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.numberofrounds != "undefined") numberofrounds = json.numberofrounds;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.numberofoption != "undefined") numberofoption = json.numberofoption;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.visibleufo != "undefined") visibleufo = json.visibleufo;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.target != "undefined") target = json.target;
    if(typeof json.roundover != "undefined") roundover = json.roundover;
    if(typeof json.tryagain != "undefined") tryagain = json.tryagain;
    if(typeof json.popup != "undefined") popup = json.popup;
    if(typeof json.ammo != "undefined") ammo = json.ammo;
    if(typeof json.roundno != "undefined") roundno = json.roundno;
    if(typeof json.gameend != "undefined") gameend = json.gameend;
    if(typeof json.boom != "undefined") boom = json.boom;
    if(typeof json.bx != "undefined") bx = json.bx;
    if(typeof json.by != "undefined") by = json.by;
    if(typeof json.xc != "undefined") xc = json.xc;
    if(typeof json.yc != "undefined") yc = json.yc;
    if(typeof json.xdrag != "undefined") xdrag = json.xdrag;
    if(typeof json.ydrag != "undefined") ydrag = json.ydrag;
    if(typeof json.theta != "undefined") theta = json.theta;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.ta != "undefined") ta = json.ta;
    if(typeof json.dta != "undefined") dta = json.dta;
    if(typeof json.xa != "undefined") xa = json.xa;
    if(typeof json.ya != "undefined") ya = json.ya;
    if(typeof json.vya != "undefined") vya = json.vya;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.xdotProj != "undefined") xdotProj = json.xdotProj;
    if(typeof json.xr != "undefined") xr = json.xr;
    if(typeof json.yr != "undefined") yr = json.yr;
    if(typeof json.textshoot != "undefined") textshoot = json.textshoot;
  };

  _model._inputAndPublicParameters = ["numberofrounds",  "t",  "dt",  "numberofoption",  "n",  "x",  "y",  "vx",  "text",  "visibleufo",  "score",  "target",  "roundover",  "tryagain",  "popup",  "ammo",  "roundno",  "gameend",  "boom",  "bx",  "by",  "xc",  "yc",  "xdrag",  "ydrag",  "theta",  "L",  "ta",  "dta",  "xa",  "ya",  "vya",  "vy",  "xdotProj",  "xr",  "yr",  "textshoot"]; 

  _model._outputAndPublicParameters = ["numberofrounds",  "t",  "dt",  "numberofoption",  "n",  "x",  "y",  "vx",  "text",  "visibleufo",  "score",  "target",  "roundover",  "tryagain",  "popup",  "ammo",  "roundno",  "gameend",  "boom",  "bx",  "by",  "xc",  "yc",  "xdrag",  "ydrag",  "theta",  "L",  "ta",  "dta",  "xa",  "ya",  "vya",  "vy",  "xdotProj",  "xr",  "yr",  "textshoot"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["shuffleArray(array)"] = true;
    __pagesEnabled["ufomove"] = true;
    __pagesEnabled["Var0L"] = false;
    __pagesEnabled["Var0R"] = false;
    __pagesEnabled["Var1L"] = false;
    __pagesEnabled["Var1R"] = false;
    __pagesEnabled["Var2L"] = false;
    __pagesEnabled["Var2R"] = false;
    __pagesEnabled["Collision0"] = false;
    __pagesEnabled["Collision1"] = false;
    __pagesEnabled["Collision2"] = false;
    __pagesEnabled["ammo"] = true;
    __pagesEnabled["collideufo bottom"] = true;
    __pagesEnabled["Event 2"] = true;
    __pagesEnabled["Event 2 2"] = true;
    __pagesEnabled["bounce 0"] = true;
    __pagesEnabled["bounce 1"] = true;
    __pagesEnabled["bounce 2"] = true;
    __pagesEnabled["scoring"] = true;
    __pagesEnabled["gameover"] = true;
  });

  _model.addToReset(function() {
    numberofrounds = 5; // EjsS Model.Variables.ufo.numberofrounds
    t = 0; // EjsS Model.Variables.ufo.t
    dt = 0.05; // EjsS Model.Variables.ufo.dt
    numberofoption = 3; // EjsS Model.Variables.ufo.numberofoption
    n = numberofoption; // EjsS Model.Variables.ufo.n
    x = [6,6,6]; // EjsS Model.Variables.ufo.x
    y = [2,3,4]; // EjsS Model.Variables.ufo.y
    vx = new Array(n); // EjsS Model.Variables.ufo.vx
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.ufo.vx
        vx[_i0] = Math.max(4*Math.random(),0.6);  // EjsS Model.Variables.ufo.vx
      }
    }());
    text = new Array(n); // EjsS Model.Variables.ufo.text
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.ufo.text
        text[_i0] = Math.round(10*Math.random()-3);  // EjsS Model.Variables.ufo.text
      }
    }());
    visibleufo = new Array(n); // EjsS Model.Variables.ufo.visibleufo
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.ufo.visibleufo
        visibleufo[_i0] = true;  // EjsS Model.Variables.ufo.visibleufo
      }
    }());
    score = 0; // EjsS Model.Variables.ufo.score
    target = Math.round(20*Math.random()); // EjsS Model.Variables.ufo.target
    roundover = false; // EjsS Model.Variables.ufo.roundover
    tryagain = false; // EjsS Model.Variables.ufo.tryagain
    popup = true; // EjsS Model.Variables.ufo.popup
    ammo = 20; // EjsS Model.Variables.ufo.ammo
    roundno = 1; // EjsS Model.Variables.ufo.roundno
    gameend = false; // EjsS Model.Variables.ufo.gameend
    boom = false; // EjsS Model.Variables.ufo.boom
    bx = -5; // EjsS Model.Variables.ufo.bx
    by = -5; // EjsS Model.Variables.ufo.by
  });

  _model.addToReset(function() {
    xc = 3; // EjsS Model.Variables.Cannon.xc
    yc = 0; // EjsS Model.Variables.Cannon.yc
    xdrag = xc+1.1; // EjsS Model.Variables.Cannon.xdrag
    ydrag = 0; // EjsS Model.Variables.Cannon.ydrag
    theta = 0; // EjsS Model.Variables.Cannon.theta
    L = 1; // EjsS Model.Variables.Cannon.L
  });

  _model.addToReset(function() {
    ta = 0; // EjsS Model.Variables.Ammo.ta
    dta = 0.05; // EjsS Model.Variables.Ammo.dta
    xa = 3.20; // EjsS Model.Variables.Ammo.xa
    ya = 6; // EjsS Model.Variables.Ammo.ya
    vya = 10; // EjsS Model.Variables.Ammo.vya
    vy = 5; // EjsS Model.Variables.Ammo.vy
    xdotProj = 0; // EjsS Model.Variables.Ammo.xdotProj
  });

  _model.addToReset(function() {
    xr = 1; // EjsS Model.Variables.questions.xr
    yr = 1; // EjsS Model.Variables.questions.yr
    textshoot = [1,2,3,4,5,6,7,8,9]; // EjsS Model.Variables.questions.textshoot
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
    _ODEi_evolution2 = _ODE_evolution2();
    _privateOdesList.push(_ODEi_evolution2);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  // in initialization  // > CustomCode.shuffleArray(array):1
  // possible usage if x is the array  // > CustomCode.shuffleArray(array):2
  //shuffleArray(x);  // > CustomCode.shuffleArray(array):3
  //https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array  // > CustomCode.shuffleArray(array):4
  /**  // > CustomCode.shuffleArray(array):5
   * Randomize array element order in-place.  // > CustomCode.shuffleArray(array):6
   * Using Durstenfeld shuffle algorithm.  // > CustomCode.shuffleArray(array):7
   */  // > CustomCode.shuffleArray(array):8
  function shuffleArray(array) {  // > CustomCode.shuffleArray(array):9
      for (var i = array.length - 1; i > 0; i--) {  // > CustomCode.shuffleArray(array):10
          var j = Math.floor(Math.random() * (i + 1));  // > CustomCode.shuffleArray(array):11
          var temp = array[i];  // > CustomCode.shuffleArray(array):12
          array[i] = array[j];  // > CustomCode.shuffleArray(array):13
          array[j] = temp;  // > CustomCode.shuffleArray(array):14
      }  // > CustomCode.shuffleArray(array):15
  }  // > CustomCode.shuffleArray(array):16

  _model.addToInitialization(function() {
    if (!__pagesEnabled["shuffleArray(array)"]) return;
    //shuffleArray(text);  // > Initialization.shuffleArray(array):1
    //_view.spacesound.play();  // > Initialization.shuffleArray(array):2
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["ufomove"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["ammo"]) return;
    _ODEi_evolution2.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["bounce 0"]) return;
    if (x[0]<-2){ //left  // > FixedRelations.bounce 0:1
      vx[0] = -Math.max(4*Math.random(),0.6);  // > FixedRelations.bounce 0:2
      }  // > FixedRelations.bounce 0:3
        // > FixedRelations.bounce 0:4
      if (x[0]>8){  // > FixedRelations.bounce 0:5
        vx[0] = Math.max(4*Math.random(),0.6);  // > FixedRelations.bounce 0:6
        }  // > FixedRelations.bounce 0:7
        // > FixedRelations.bounce 0:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["bounce 1"]) return;
    if (x[1]<-2){ //left  // > FixedRelations.bounce 1:1
      vx[1] = -Math.max(4*Math.random(),0.6);  // > FixedRelations.bounce 1:2
      }  // > FixedRelations.bounce 1:3
        // > FixedRelations.bounce 1:4
      if (x[1]>8){  // > FixedRelations.bounce 1:5
        vx[1] = Math.max(4*Math.random(),0.6);  // > FixedRelations.bounce 1:6
        }  // > FixedRelations.bounce 1:7
        // > FixedRelations.bounce 1:8
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["bounce 2"]) return;
    if (x[2]<-2){ //left  // > FixedRelations.bounce 2:1
      vx[2] = -Math.max(4*Math.random(),0.6);  // > FixedRelations.bounce 2:2
      }  // > FixedRelations.bounce 2:3
        // > FixedRelations.bounce 2:4
      if (x[2]>8){  // > FixedRelations.bounce 2:5
        vx[2] = Math.max(4*Math.random(),0.6);  // > FixedRelations.bounce 2:6
        }  // > FixedRelations.bounce 2:7
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["scoring"]) return;
    if (score==target){  // > FixedRelations.scoring:1
      target=Math.round(20*Math.random());  // > FixedRelations.scoring:2
      roundover=true;  // > FixedRelations.scoring:3
      score=0;  // > FixedRelations.scoring:4
      ammo=ammo+5;  // > FixedRelations.scoring:5
      roundno=roundno+1;  // > FixedRelations.scoring:6
      //roundover=false;  // > FixedRelations.scoring:7
      }  // > FixedRelations.scoring:8
    else if (score>target) {  // > FixedRelations.scoring:9
      target=Math.round(20*Math.random());  // > FixedRelations.scoring:10
      tryagain=true;  // > FixedRelations.scoring:11
      score=0;  // > FixedRelations.scoring:12
      //tryagain=false;  // > FixedRelations.scoring:13
     //document.write(Yeah!);  // > FixedRelations.scoring:14
    }  // > FixedRelations.scoring:15
    if (ammo<0) {  // > FixedRelations.scoring:16
      gameend=true;  // > FixedRelations.scoring:17
      _pause();    // > FixedRelations.scoring:18
    }  // > FixedRelations.scoring:19
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["gameover"]) return;
     if (tryagain==true) {  // > FixedRelations.gameover:1
      if(xdotProj==5) {  // > FixedRelations.gameover:2
      tryagain=false;  // > FixedRelations.gameover:3
      }}  // > FixedRelations.gameover:4
    if (roundover==true){  // > FixedRelations.gameover:5
      if(xdotProj==5) {  // > FixedRelations.gameover:6
      roundover=false;  // > FixedRelations.gameover:7
      } }  // > FixedRelations.gameover:8
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="ufomove") return _ODEi_evolution1;
    if (_odeName=="ammo") return _ODEi_evolution2;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var _ODE_evolution1_Event5;
    var _ODE_evolution1_Event6;
    var _ODE_evolution1_Event7;
    var _ODE_evolution1_Event8;
    var _ODE_evolution1_Event9;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;

    var _xLength;

    __odeSelf._getOdeVars = function (){ return["x","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      _xLength = x.length;
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Var0L"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Var0R"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["Var1L"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["Var1R"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      if (__pagesEnabled["Var2L"]) __eventSolver.addEvent(_ODE_evolution1_Event5());
      if (__pagesEnabled["Var2R"]) __eventSolver.addEvent(_ODE_evolution1_Event6());
      if (__pagesEnabled["Collision0"]) __eventSolver.addEvent(_ODE_evolution1_Event7());
      if (__pagesEnabled["Collision1"]) __eventSolver.addEvent(_ODE_evolution1_Event8());
      if (__pagesEnabled["Collision2"]) __eventSolver.addEvent(_ODE_evolution1_Event9());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
      if (!__mustReinitialize)
        for (__j=0,__n=__cIn; __j<_xLength; __j++)
           if (__state[__n++]!=x[__j]) { __mustReinitialize = true; break; }
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      if (_xLength != x.length) return true;
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        var i;
        for (i=0;i<_xLength;i++) {
          _aRate[__cRate++] = Array.isArray(-vx[i]) ? -vx[i][i] : -vx[i]; // Rate for ODE: ufomove:x
        }
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return x[0]-0.5;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        vx[0] = -vx[0];  // > Event action for page ufomove:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return x[0]-6;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        vx[0] = -vx[0];  // > Event action for page ufomove:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return x[1]-0.5;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        vx[1] = -vx[1];  // > Event action for page ufomove:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return x[1]-6;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        vx[1] = -vx[1];  // > Event action for page ufomove:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return x[2]-0.5;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        vx[2] = -vx[2];  // > Event action for page ufomove:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event6 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return x[2]-6;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        vx[2] = -vx[2];  // > Event action for page ufomove:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event7 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return Math.sqrt((x[0]-xa)*(x[0]-xa)+(y[0]-ya)*(y[0]-ya))-0.5;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        score = score+10;  // > Event action for page ufomove:1
        _view.hitsound.play();  // > Event action for page ufomove:2
        xa=xdrag;  // > Event action for page ufomove:3
        ya=ydrag;  // > Event action for page ufomove:4
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event8 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return Math.sqrt((x[1]-xa)*(x[1]-xa)+(y[1]-ya)*(y[1]-ya))-0.5;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        score = score+10;  // > Event action for page ufomove:1
        _view.hitsound.play();  // > Event action for page ufomove:2
        xa=xdrag;  // > Event action for page ufomove:3
        ya=ydrag;  // > Event action for page ufomove:4
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event9 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var x = [];
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = _aState[__cOut++];
        }
        var t = _aState[__cOut++];
        return Math.sqrt((x[2]-xa)*(x[2]-xa)+(y[2]-ya)*(y[2]-ya))-0.5;  // > Event zero-condition for page ufomove:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        for (__i=0;__i<_xLength; __i++) {
          x[__i] = __state[__cOut++];
        }
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        for (__j=0;__j<_xLength; __j++) {
          __state[__cIn++] = x[__j];
        }
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        score = score+10;  // > Event action for page ufomove:1
        _view.hitsound.play();  // > Event action for page ufomove:2
        xa=xdrag;  // > Event action for page ufomove:3
        ya=ydrag;  // > Event action for page ufomove:4
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_x(__time) {
    var __beginIndex = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,new Array(x.length),__beginIndex,x.ength);
  }

  function _ODE_evolution2() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution2_Event1;
    var _ODE_evolution2_Event2;
    var _ODE_evolution2_Event3;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["ya","xa","ta"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dta);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["collideufo bottom"]) __eventSolver.addEvent(_ODE_evolution2_Event1());
      if (__pagesEnabled["Event 2"]) __eventSolver.addEvent(_ODE_evolution2_Event2());
      if (__pagesEnabled["Event 2 2"]) __eventSolver.addEvent(_ODE_evolution2_Event3());
      for(k in userEvents2){__eventSolver.addEvent(userEvents2[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=ya) __mustReinitialize = true;
        __state[__cIn++] = ya;
        if (__state[__cIn]!=xa) __mustReinitialize = true;
        __state[__cIn++] = xa;
        if (__state[__cIn]!=ta) __mustReinitialize = true;
        __state[__cIn++] = ta;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dta===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dta);
      __eventSolver.setInternalStepSize(dta);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ya = __state[__cOut++];
        xa = __state[__cOut++];
        ta = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ya = _aState[__cOut++];
        var xa = _aState[__cOut++];
        var ta = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = xdotProj*Math.sin(theta); // Rate for ODE: ammo:ya
        _aRate[__cRate++] = xdotProj*Math.cos(theta); // Rate for ODE: ammo:xa
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ya = _aState[__cOut++];
        var xa = _aState[__cOut++];
        var ta = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ya = __state[__cOut++];
        xa = __state[__cOut++];
        ta = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = ya;
        __state[__cIn++] = xa;
        __state[__cIn++] = ta;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents2.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution2_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ya = _aState[__cOut++];
        var xa = _aState[__cOut++];
        var ta = _aState[__cOut++];
        return Math.sqrt((x[0]-xa)*(x[0]-xa)+(y[0]-ya)*(y[0]-ya))-0.5;  // > Event zero-condition for page ammo:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ya = __state[__cOut++];
        xa = __state[__cOut++];
        ta = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = ya;
        __state[__cIn++] = xa;
        __state[__cIn++] = ta;
        return _returnValue;
      };

      function __userDefinedAction() {
        score = score+(text[0]);  // > Event action for page ammo:1
        bx=x[0];  // > Event action for page ammo:2
        by=y[0];  // > Event action for page ammo:3
        boom=true;  // > Event action for page ammo:4
        _view.hitsound.play();  // > Event action for page ammo:5
        //setTimeout(boom=true,3000);  // > Event action for page ammo:6
        xa=xdrag; // reset ammo back to cannon  // > Event action for page ammo:7
        ya=ydrag;  // > Event action for page ammo:8
        xdotProj=0; // speed ammp zero  // > Event action for page ammo:9
        //visibleufo[0]=false;  // > Event action for page ammo:10
        x[0]=6; //  // > Event action for page ammo:11
        //text.shift(1);  // > Event action for page ammo:12
        //shuffleArray(text); //clever way to overcome why slice didnt work  // > Event action for page ammo:13
        text[0]=Math.round(10*Math.random()-3);  // > Event action for page ammo:14
        text[1]=Math.round(10*Math.random()-3);  // > Event action for page ammo:15
        text[2]=Math.round(10*Math.random()-3);  // > Event action for page ammo:16
        //_pause(3000);  // > Event action for page ammo:17
        //setTimeout(boom,3000);  // > Event action for page ammo:18
        //boom=false;  // > Event action for page ammo:19
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ya = _aState[__cOut++];
        var xa = _aState[__cOut++];
        var ta = _aState[__cOut++];
        return Math.sqrt((x[1]-xa)*(x[1]-xa)+(y[1]-ya)*(y[1]-ya))-0.5;  // > Event zero-condition for page ammo:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ya = __state[__cOut++];
        xa = __state[__cOut++];
        ta = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = ya;
        __state[__cIn++] = xa;
        __state[__cIn++] = ta;
        return _returnValue;
      };

      function __userDefinedAction() {
        score = score+(text[1]);  // > Event action for page ammo:1
        bx=x[1];  // > Event action for page ammo:2
        by=y[1];  // > Event action for page ammo:3
        boom=true;  // > Event action for page ammo:4
        _view.hitsound.play();  // > Event action for page ammo:5
        xa=xdrag;  // > Event action for page ammo:6
        ya=ydrag;  // > Event action for page ammo:7
        //visibleufo[1]=false;  // > Event action for page ammo:8
        xdotProj=0; // speed ammp zero  // > Event action for page ammo:9
        x[1]=6; //  // > Event action for page ammo:10
        //shuffleArray(text); //clever way to overcome why slice didnt work  // > Event action for page ammo:11
        text[0]=Math.round(10*Math.random()-3);  // > Event action for page ammo:12
        text[1]=Math.round(10*Math.random()-3);  // > Event action for page ammo:13
        text[2]=Math.round(10*Math.random()-3);  // > Event action for page ammo:14
        //boom=false;  // > Event action for page ammo:15
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution2_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.STATE_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var ya = _aState[__cOut++];
        var xa = _aState[__cOut++];
        var ta = _aState[__cOut++];
        return Math.sqrt((x[2]-xa)*(x[2]-xa)+(y[2]-ya)*(y[2]-ya))-0.5;  // > Event zero-condition for page ammo:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        ya = __state[__cOut++];
        xa = __state[__cOut++];
        ta = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = ya;
        __state[__cIn++] = xa;
        __state[__cIn++] = ta;
        return _returnValue;
      };

      function __userDefinedAction() {
        score = score+(text[2]);  // > Event action for page ammo:1
        bx=x[2];  // > Event action for page ammo:2
        by=y[2];  // > Event action for page ammo:3
        boom=true;  // > Event action for page ammo:4
        _view.hitsound.play();  // > Event action for page ammo:5
        xa=xdrag;  // > Event action for page ammo:6
        ya=ydrag;  // > Event action for page ammo:7
        //visibleufo[2]=false;  // > Event action for page ammo:8
        xdotProj=0; // speed ammp zero  // > Event action for page ammo:9
        x[2]=6; //  // > Event action for page ammo:10
        //shuffleArray(text); //clever way to overcome why slice didnt work  // > Event action for page ammo:11
        text[0]=Math.round(10*Math.random()-3);  // > Event action for page ammo:12
        text[1]=Math.round(10*Math.random()-3);  // > Event action for page ammo:13
        text[2]=Math.round(10*Math.random()-3);  // > Event action for page ammo:14
        //boom=false;  // > Event action for page ammo:15
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_ya(__time) {
    var __index = 0;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_xa(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution2.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new Numbers7_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.Fire.setAction("OnPress", function(_data,_info) {
  _view.shootsound.play();

}); // HtmlView Page setting action 'OnPress' for element 'Fire'
          _view.Fire.setAction("OnClick", function(_data,_info) {
  //projVis= true;
      xdotProj = 5;

}); // HtmlView Page setting action 'OnClick' for element 'Fire'
          _view.plottingPanel.linkProperty("Height",  function() { return ""+window.innerHeight*0.9; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.imageSet.linkProperty("NumberOfElements",  function() { return numberofoption; }, function(_v) { numberofoption = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'imageSet'
          _view.imageSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'imageSet'
          _view.imageSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'imageSet'
          _view.imageSet.linkProperty("Visibility",  function() { return visibleufo; }, function(_v) { visibleufo = _v; } ); // HtmlView Page linking property 'Visibility' for element 'imageSet'
          _view.boom.linkProperty("X",  function() { return bx; }, function(_v) { bx = _v; } ); // HtmlView Page linking property 'X' for element 'boom'
          _view.boom.linkProperty("Y",  function() { return by; }, function(_v) { by = _v; } ); // HtmlView Page linking property 'Y' for element 'boom'
          _view.boom.linkProperty("Visibility",  function() { return boom; }, function(_v) { boom = _v; } ); // HtmlView Page linking property 'Visibility' for element 'boom'
          _view.randomnumber.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'randomnumber'
          _view.randomnumber.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'randomnumber'
          _view.randomnumber.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'randomnumber'
          _view.randomnumber.linkProperty("Text",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'Text' for element 'randomnumber'
          _view.randomnumber.linkProperty("Visibility",  function() { return visibleufo; }, function(_v) { visibleufo = _v; } ); // HtmlView Page linking property 'Visibility' for element 'randomnumber'
          _view.rocketlauncher.linkProperty("Rotate",  function() { return theta; }, function(_v) { theta = _v; } ); // HtmlView Page linking property 'Rotate' for element 'rocketlauncher'
          _view.rocketlauncher.linkProperty("X",  function() { return xc; }, function(_v) { xc = _v; } ); // HtmlView Page linking property 'X' for element 'rocketlauncher'
          _view.rocketlauncher.linkProperty("Y",  function() { return yc; }, function(_v) { yc = _v; } ); // HtmlView Page linking property 'Y' for element 'rocketlauncher'
          _view.dragger.setAction("OnRelease", function(_data,_info) {
  xa=xdrag;
  ya=ydrag;
  _view.shootsound.play();
   xdotProj = 5; // shoot ammo
  ammo=ammo-1;

}); // HtmlView Page setting action 'OnRelease' for element 'dragger'
          _view.dragger.linkProperty("X",  function() { return xdrag; }, function(_v) { xdrag = _v; } ); // HtmlView Page linking property 'X' for element 'dragger'
          _view.dragger.linkProperty("Y",  function() { return ydrag; }, function(_v) { ydrag = _v; } ); // HtmlView Page linking property 'Y' for element 'dragger'
          _view.dragger.setAction("OnDrag", function(_data,_info) {
  theta=Math.atan2((ydrag-yc),xdrag-xc,);
  xdrag= L*Math.cos(theta)+xc;
  ydrag = L*Math.sin(theta)+yc;
  boom=false;

}); // HtmlView Page setting action 'OnDrag' for element 'dragger'
          _view.roundover.linkProperty("Visibility",  function() { return roundover; }, function(_v) { roundover = _v; } ); // HtmlView Page linking property 'Visibility' for element 'roundover'
          _view.gameend.linkProperty("Visibility",  function() { return gameend; }, function(_v) { gameend = _v; } ); // HtmlView Page linking property 'Visibility' for element 'gameend'
          _view.tryagain.linkProperty("Visibility",  function() { return tryagain; }, function(_v) { tryagain = _v; } ); // HtmlView Page linking property 'Visibility' for element 'tryagain'
          _view.targetno.linkProperty("Text",  function() { return target; }, function(_v) { target = _v; } ); // HtmlView Page linking property 'Text' for element 'targetno'
          _view.ammo.linkProperty("Text",  function() { return ammo; }, function(_v) { ammo = _v; } ); // HtmlView Page linking property 'Text' for element 'ammo'
          _view.currentno.linkProperty("Text",  function() { return score; }, function(_v) { score = _v; } ); // HtmlView Page linking property 'Text' for element 'currentno'
          _view.roundno.linkProperty("Text",  function() { return roundno; }, function(_v) { roundno = _v; } ); // HtmlView Page linking property 'Text' for element 'roundno'
          _view.grenade.linkProperty("X",  function() { return xa; }, function(_v) { xa = _v; } ); // HtmlView Page linking property 'X' for element 'grenade'
          _view.grenade.linkProperty("Y",  function() { return ya; }, function(_v) { ya = _v; } ); // HtmlView Page linking property 'Y' for element 'grenade'
          _view.start.linkProperty("Visibility",  function() { return popup; }, function(_v) { popup = _v; } ); // HtmlView Page linking property 'Visibility' for element 'start'
          _view.start.setAction("OnPress", function(_data,_info) {
  popup=false;

}); // HtmlView Page setting action 'OnPress' for element 'start'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function Numbers7_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = Numbers7_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function Numbers7_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Shoot the Aliens!</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.button,"Fire", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Fire'
      .setProperty("Text","Fire") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'Fire'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'Fire'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","Shoot the numbers that add up to the target number.") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'plottingPanel'
      .setProperty("MaximumY",5) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",6) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("AxisYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("TitleY","") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("TitleX","") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"background", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'background'
      .setProperty("SizeX",1400) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'background'
      .setProperty("X",3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'background'
      .setProperty("ImageUrl","./cloudfield.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'background'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'background'
      .setProperty("SizeY",580) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'background'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'background'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"bullseye", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bullseye'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'bullseye'
      .setProperty("X",5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'bullseye'
      .setProperty("ImageUrl","./target.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'bullseye'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'bullseye'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'bullseye'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'bullseye'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'bullseye'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"box", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'box'
      .setProperty("SizeX",150) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'box'
      .setProperty("X",1.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'box'
      .setProperty("ImageUrl","./box.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'box'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'box'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'box'
      .setProperty("SizeY",150) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'box'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'box'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"deadufo", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'deadufo'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'deadufo'
      .setProperty("X",6.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'deadufo'
      .setProperty("ImageUrl","./ufo.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'deadufo'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'deadufo'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'deadufo'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'deadufo'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'deadufo'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"imageSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'imageSet'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'imageSet'
      .setProperty("ImageUrl","./ufoalien.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'imageSet'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'imageSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'imageSet'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"boom", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'boom'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'boom'
      .setProperty("ImageUrl","./boomz.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'boom'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'boom'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'boom'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"randomnumber", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'randomnumber'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'randomnumber'
      .setProperty("FontSize",50) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'randomnumber'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"rocketlauncher", _view.group) // EJsS HtmlView.HtmlView Page: declaration of element 'rocketlauncher'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'rocketlauncher'
      .setProperty("RelativePosition","WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'rocketlauncher'
      .setProperty("ImageUrl","./rocketlauncher.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'rocketlauncher'
      .setProperty("SizeY",.5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'rocketlauncher'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"dragger", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dragger'
      .setProperty("FillColor","rgba(0,0,0,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'dragger'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'dragger'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'dragger'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'dragger'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'dragger'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'dragger'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"roundover", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'roundover'
      .setProperty("FontStyle","bold") // EJsS HtmlView.HtmlView Page: setting property 'FontStyle' for element 'roundover'
      .setProperty("FillColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'roundover'
      .setProperty("FontSize",50) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'roundover'
      .setProperty("X",3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'roundover'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'roundover'
      .setProperty("Text","Good Job!") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'roundover'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"gameend", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gameend'
      .setProperty("FontSize",50) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'gameend'
      .setProperty("X",3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'gameend'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'gameend'
      .setProperty("Text","Game Over!") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'gameend'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"tryagain", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tryagain'
      .setProperty("FontSize",50) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'tryagain'
      .setProperty("X",3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'tryagain'
      .setProperty("Y",3) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'tryagain'
      .setProperty("Text","Try Again...") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'tryagain'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"targetno", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'targetno'
      .setProperty("FontSize",40) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'targetno'
      .setProperty("X",5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'targetno'
      .setProperty("Y",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'targetno'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'targetno'
      .setProperty("FontWeight","200") // EJsS HtmlView.HtmlView Page: setting property 'FontWeight' for element 'targetno'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"targetlabel", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'targetlabel'
      .setProperty("FontSize",30) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'targetlabel'
      .setProperty("X",5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'targetlabel'
      .setProperty("Y",1.2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'targetlabel'
      .setProperty("Text","Target") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'targetlabel'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'targetlabel'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"ammo", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ammo'
      .setProperty("FontSize",30) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'ammo'
      .setProperty("X",1.4) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ammo'
      .setProperty("Y",0.4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ammo'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"ammolabel", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ammolabel'
      .setProperty("FontSize",30) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'ammolabel'
      .setProperty("X",1.2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'ammolabel'
      .setProperty("Y",1.2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'ammolabel'
      .setProperty("Text","Ammo") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ammolabel'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"currentno", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'currentno'
      .setProperty("FontSize",30) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'currentno'
      .setProperty("X",6.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'currentno'
      .setProperty("Y",0.65) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'currentno'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"currentnolabel", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'currentnolabel'
      .setProperty("FontSize",30) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'currentnolabel'
      .setProperty("X",6.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'currentnolabel'
      .setProperty("Y",1.2) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'currentnolabel'
      .setProperty("Text","Score") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'currentnolabel'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"roundlabel", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'roundlabel'
      .setProperty("FontSize",40) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'roundlabel'
      .setProperty("X",2.8) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'roundlabel'
      .setProperty("Y",4.7) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'roundlabel'
      .setProperty("Text","Round") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'roundlabel'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"roundno", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'roundno'
      .setProperty("FontSize",40) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'roundno'
      .setProperty("X",3.8) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'roundno'
      .setProperty("Y",4.7) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'roundno'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"grenade", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'grenade'
      .setProperty("SizeX",30) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'grenade'
      .setProperty("Rotate",30) // EJsS HtmlView.HtmlView Page: setting property 'Rotate' for element 'grenade'
      .setProperty("ImageUrl","./grenade.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'grenade'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'grenade'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'grenade'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"start", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'start'
      .setProperty("Sensitivity",1000) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'start'
      .setProperty("SizeX",1250) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'start'
      .setProperty("X",3) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'start'
      .setProperty("Y",1.75) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'start'
      .setProperty("ImageUrl","./startscreen.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'start'
      .setProperty("SizeY",600) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'start'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'start'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'start'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width",398) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("Tooltip","Step") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset1.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"spacesound", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'spacesound'
      .setProperty("AudioUrl","./spacesound.mp3") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'spacesound'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"hitsound", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hitsound'
      .setProperty("AudioUrl","./hitsounds.mp3") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'hitsound'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"shootsound", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shootsound'
      .setProperty("AudioUrl","./shootsounds.mp3") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'shootsound'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"narrativePanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'narrativePanel'
      .setProperty("Html","<h2>XHTML Sample Narrative</h2> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Non est enim vitium in oratione solum, sed etiam in moribus. Restinguet citius, si ardentem acceperit. Erit enim instructus ad mortem contemnendam, ad exilium, ad ipsum etiam dolorem.  Atqui iste locus est, Piso, tibi etiam atque etiam confirmandus, inquam; Ne in odium veniam, si amicum destitero tueri.  Duo Reges: constructio interrete. Itaque hic ipse iam pridem est reiectus; Scrupulum, inquam, abeunti; </p> <p>Rhetorice igitur, inquam, nos mavis quam dialectice disputare? Quid me istud rogas? Non potes, nisi retexueris illa. </p> <p>Honesta oratio, Socratica, Platonis etiam. Sed quid attinet de rebus tam apertis plura requirere? Nec tamen ullo  modo summum pecudis bonum et hominis idem mihi videri potest. At quicum ioca seria, ut dicitur, quicum arcana, quicum  occulta omnia? Nihil acciderat ei, quod nollet, nisi quod anulum, quo delectabatur, in mari abiecerat. Disserendi artem  nullam habuit. Sed emolumenta communia esse dicuntur, recte autem facta et peccata non habentur communia. Nondum autem  explanatum satis, erat, quid maxime natura vellet. Quae duo sunt, unum facit. Primum in nostrane potestate est, quid meminerimus? </p>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'narrativePanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Author name
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2019, Author name.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new Numbers7("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
