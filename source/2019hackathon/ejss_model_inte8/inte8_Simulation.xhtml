<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Bubble Sort by Team YIJC</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function inte8(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var n; // EjsS Model.Variables.Var Table.n
  var h; // EjsS Model.Variables.Var Table.h
  var x; // EjsS Model.Variables.Var Table.x
  var y; // EjsS Model.Variables.Var Table.y
  var yc; // EjsS Model.Variables.Var Table.yc
  var xc; // EjsS Model.Variables.Var Table.xc
  var sizex; // EjsS Model.Variables.Var Table.sizex
  var sizey; // EjsS Model.Variables.Var Table.sizey
  var i; // EjsS Model.Variables.Var Table.i
  var j; // EjsS Model.Variables.Var Table.j
  var imageUrl; // EjsS Model.Variables.Var Table.imageUrl
  var ans; // EjsS Model.Variables.Var Table.ans
  var match; // EjsS Model.Variables.Var Table.match
  var counter; // EjsS Model.Variables.Var Table.counter
  var visibility; // EjsS Model.Variables.Var Table.visibility
  var text; // EjsS Model.Variables.Var Table.text
  var flag; // EjsS Model.Variables.Var Table.flag
  var swop; // EjsS Model.Variables.Var Table.swop
  var comparison; // EjsS Model.Variables.Var Table.comparison

  var t; // EjsS Model.Variables.Var Table 2.t
  var dt; // EjsS Model.Variables.Var Table 2.dt
  var xa; // EjsS Model.Variables.Var Table 2.xa
  var ya; // EjsS Model.Variables.Var Table 2.ya
  var A; // EjsS Model.Variables.Var Table 2.A

  var x1; // EjsS Model.Variables.Var Table 3.x1
  var y1; // EjsS Model.Variables.Var Table 3.y1
  var vy1; // EjsS Model.Variables.Var Table 3.vy1

  var x2; // EjsS Model.Variables.Var Table 4.x2
  var y2; // EjsS Model.Variables.Var Table 4.y2
  var vy2; // EjsS Model.Variables.Var Table 4.vy2

  var Ax; // EjsS Model.Variables.Var Table 5.Ax
  var Ay; // EjsS Model.Variables.Var Table 5.Ay
  var Bx; // EjsS Model.Variables.Var Table 5.Bx
  var By; // EjsS Model.Variables.Var Table 5.By

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      n : n,
      h : h,
      x : x,
      y : y,
      yc : yc,
      xc : xc,
      sizex : sizex,
      sizey : sizey,
      i : i,
      j : j,
      imageUrl : imageUrl,
      ans : ans,
      match : match,
      counter : counter,
      visibility : visibility,
      text : text,
      flag : flag,
      swop : swop,
      comparison : comparison,
      t : t,
      dt : dt,
      xa : xa,
      ya : ya,
      A : A,
      x1 : x1,
      y1 : y1,
      vy1 : vy1,
      x2 : x2,
      y2 : y2,
      vy2 : vy2,
      Ax : Ax,
      Ay : Ay,
      Bx : Bx,
      By : By
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.h != "undefined") h = json.h;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.yc != "undefined") yc = json.yc;
    if(typeof json.xc != "undefined") xc = json.xc;
    if(typeof json.sizex != "undefined") sizex = json.sizex;
    if(typeof json.sizey != "undefined") sizey = json.sizey;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.j != "undefined") j = json.j;
    if(typeof json.imageUrl != "undefined") imageUrl = json.imageUrl;
    if(typeof json.ans != "undefined") ans = json.ans;
    if(typeof json.match != "undefined") match = json.match;
    if(typeof json.counter != "undefined") counter = json.counter;
    if(typeof json.visibility != "undefined") visibility = json.visibility;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.flag != "undefined") flag = json.flag;
    if(typeof json.swop != "undefined") swop = json.swop;
    if(typeof json.comparison != "undefined") comparison = json.comparison;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.xa != "undefined") xa = json.xa;
    if(typeof json.ya != "undefined") ya = json.ya;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.vy1 != "undefined") vy1 = json.vy1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.vy2 != "undefined") vy2 = json.vy2;
    if(typeof json.Ax != "undefined") Ax = json.Ax;
    if(typeof json.Ay != "undefined") Ay = json.Ay;
    if(typeof json.Bx != "undefined") Bx = json.Bx;
    if(typeof json.By != "undefined") By = json.By;
  };

  _model._inputAndPublicParameters = ["n",  "h",  "x",  "y",  "yc",  "xc",  "sizex",  "sizey",  "i",  "j",  "imageUrl",  "ans",  "match",  "counter",  "visibility",  "text",  "flag",  "swop",  "comparison",  "t",  "dt",  "xa",  "ya",  "A",  "x1",  "y1",  "vy1",  "x2",  "y2",  "vy2",  "Ax",  "Ay",  "Bx",  "By"]; 

  _model._outputAndPublicParameters = ["n",  "h",  "x",  "y",  "yc",  "xc",  "sizex",  "sizey",  "i",  "j",  "imageUrl",  "ans",  "match",  "counter",  "visibility",  "text",  "flag",  "swop",  "comparison",  "t",  "dt",  "xa",  "ya",  "A",  "x1",  "y1",  "vy1",  "x2",  "y2",  "vy2",  "Ax",  "Ay",  "Bx",  "By"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Left reach bottom stop"] = true;
    __pagesEnabled["Left reach bottom stop 2"] = true;
    __pagesEnabled["Left reach top stop"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["lookang"] = true;
  });

  _model.addToReset(function() {
    n = 5; // EjsS Model.Variables.Var Table.n
    h = [9,8,4,2,10]; // EjsS Model.Variables.Var Table.h
    x = [1,3,5,7,9]; // EjsS Model.Variables.Var Table.x
    y = [10,10,10,10,10]; // EjsS Model.Variables.Var Table.y
    yc = [10,10,10,10,10]; // EjsS Model.Variables.Var Table.yc
    xc = [1,3,5,7,9]; // EjsS Model.Variables.Var Table.xc
    sizex = 100; // EjsS Model.Variables.Var Table.sizex
    sizey = 100; // EjsS Model.Variables.Var Table.sizey
    i = 0; // EjsS Model.Variables.Var Table.i
    j = [0,1,2,3,4]; // EjsS Model.Variables.Var Table.j
    imageUrl = ["./templates/king_of_hearts2.png","./templates/queen.png","./templates/spade4.png","./templates/diamond2.png","./templates/kingspades.png"]; // EjsS Model.Variables.Var Table.imageUrl
    ans = ["./templates/diamond2.png","./templates/spade4.png","./templates/queen.png","./templates/king_of_hearts2.png","./templates/kingspades.png"]; // EjsS Model.Variables.Var Table.ans
    match = false; // EjsS Model.Variables.Var Table.match
    counter = 0; // EjsS Model.Variables.Var Table.counter
    visibility = true; // EjsS Model.Variables.Var Table.visibility
    text = ["A","B","C","D","E"]; // EjsS Model.Variables.Var Table.text
    flag = true; // EjsS Model.Variables.Var Table.flag
    swop = false; // EjsS Model.Variables.Var Table.swop
    comparison = 0; // EjsS Model.Variables.Var Table.comparison
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.Var Table 2.t
    dt = 0.05; // EjsS Model.Variables.Var Table 2.dt
    xa = 0.4; // EjsS Model.Variables.Var Table 2.xa
    ya = 5.4; // EjsS Model.Variables.Var Table 2.ya
    A = [0,0]; // EjsS Model.Variables.Var Table 2.A
  });

  _model.addToReset(function() {
    x1 = 3; // EjsS Model.Variables.Var Table 3.x1
    y1 = 3.9; // EjsS Model.Variables.Var Table 3.y1
    vy1 = 0; // EjsS Model.Variables.Var Table 3.vy1
  });

  _model.addToReset(function() {
    x2 = 7; // EjsS Model.Variables.Var Table 4.x2
    y2 = 3.9; // EjsS Model.Variables.Var Table 4.y2
    vy2 = 0; // EjsS Model.Variables.Var Table 4.vy2
  });

  _model.addToReset(function() {
    Ax = x1; // EjsS Model.Variables.Var Table 5.Ax
    Ay = y1-0.3; // EjsS Model.Variables.Var Table 5.Ay
    Bx = x2; // EjsS Model.Variables.Var Table 5.Bx
    By = y2-0.3; // EjsS Model.Variables.Var Table 5.By
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function wait(ms){  // > CustomCode.Lib Page:1
    var start=new Date().getTime();  // > CustomCode.Lib Page:2
    var end=start;  // > CustomCode.Lib Page:3
    while(end<start+ms){  // > CustomCode.Lib Page:4
      end=new Date().getTime();  // > CustomCode.Lib Page:5
      }  // > CustomCode.Lib Page:6
      }  // > CustomCode.Lib Page:7

  function shuffleArray(array1,array2)  {  // > CustomCode.shuffleArray(array):1
    for (var i=array1.length-1;i>0;i--){  // > CustomCode.shuffleArray(array):2
      var j=Math.floor(Math.random()*(i+1));  // > CustomCode.shuffleArray(array):3
      var temp=array1[i];  // > CustomCode.shuffleArray(array):4
      array1[i]=array1[j];  // > CustomCode.shuffleArray(array):5
      array1[j]=temp;  // > CustomCode.shuffleArray(array):6
        // > CustomCode.shuffleArray(array):7
      var temp2=array2[i];  // > CustomCode.shuffleArray(array):8
      array2[i]=array2[j];  // > CustomCode.shuffleArray(array):9
      array2[j]=temp2;  // > CustomCode.shuffleArray(array):10
      }  // > CustomCode.shuffleArray(array):11
  }  // > CustomCode.shuffleArray(array):12

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    xc=[1,3,5,7,9];  // > Initialization.Init Page:1
    d=0;  // > Initialization.Init Page:2
    shuffleArray(imageUrl,h);  // > Initialization.Init Page:3
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    diff=A[0]-A[1];  // > FixedRelations.FixRel Page:1
    //dist=Math.sqrt(Math.pow((xa-2),2)+Math.pow((ya-5.4),2));  // > FixedRelations.FixRel Page:2
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["lookang"]) return;
    //if (dist<0.5){ // move to fixed relations fixed the missing beam and apples  // > FixedRelations.lookang:1
      //alert (dist);  // > FixedRelations.lookang:2
    if (diff>0 && A[1]!=0){  // > FixedRelations.lookang:3
      vy1=-1;  // > FixedRelations.lookang:4
      vy2=1;   // > FixedRelations.lookang:5
      }  // > FixedRelations.lookang:6
    if (diff<0 && A[0]!=0){  // > FixedRelations.lookang:7
      vy1=1;  // > FixedRelations.lookang:8
      vy2=-1;   // > FixedRelations.lookang:9
      }  // > FixedRelations.lookang:10
     // }  // > FixedRelations.lookang:11
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["y1","y2","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Left reach bottom stop"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Left reach bottom stop 2"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["Left reach top stop"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=y1) __mustReinitialize = true;
        __state[__cIn++] = y1;
        if (__state[__cIn]!=y2) __mustReinitialize = true;
        __state[__cIn++] = y2;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y1 = __state[__cOut++];
        y2 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y1 = _aState[__cOut++];
        var y2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vy1; // Rate for ODE: Evol Page:y1
        _aRate[__cRate++] = vy2; // Rate for ODE: Evol Page:y2
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y1 = _aState[__cOut++];
        var y2 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y1 = __state[__cOut++];
        y2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = y1;
        __state[__cIn++] = y2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y1 = _aState[__cOut++];
        var y2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        return y1-4.2;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y1 = __state[__cOut++];
        y2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = y1;
        __state[__cIn++] = y2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        y1=4.2;  // > Event action for page Evol Page:1
        comparison++;  // > Event action for page Evol Page:2
        _pause();  // > Event action for page Evol Page:3
        wait(2000);  // > Event action for page Evol Page:4
        x=xc;  // > Event action for page Evol Page:5
        y=yc;  // > Event action for page Evol Page:6
        y1=3.6;  // > Event action for page Evol Page:7
        y2=3.6;  // > Event action for page Evol Page:8
        xa=0.4;  // > Event action for page Evol Page:9
        ya=5.4;  // > Event action for page Evol Page:10
        vy1=0;  // > Event action for page Evol Page:11
        vy2=0;  // > Event action for page Evol Page:12
        A=[0,0];  // > Event action for page Evol Page:13
        _play();  // > Event action for page Evol Page:14
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y1 = _aState[__cOut++];
        var y2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        return y1-3;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y1 = __state[__cOut++];
        y2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = y1;
        __state[__cIn++] = y2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        y1=3;  // > Event action for page Evol Page:1
        comparison++;  // > Event action for page Evol Page:2
        _pause();  // > Event action for page Evol Page:3
        wait(2000);  // > Event action for page Evol Page:4
        x=xc;  // > Event action for page Evol Page:5
        y=yc;  // > Event action for page Evol Page:6
        y1=3.6;  // > Event action for page Evol Page:7
        y2=3.6;  // > Event action for page Evol Page:8
        xa=0.4;  // > Event action for page Evol Page:9
        ya=5.4;  // > Event action for page Evol Page:10
        vy1=0;  // > Event action for page Evol Page:11
        vy2=0;  // > Event action for page Evol Page:12
        A=[0,0];  // > Event action for page Evol Page:13
        _play();  // > Event action for page Evol Page:14
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var y1 = _aState[__cOut++];
        var y2 = _aState[__cOut++];
        var t = _aState[__cOut++];
        return y1-4.2;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        y1 = __state[__cOut++];
        y2 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = y1;
        __state[__cIn++] = y2;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        y1=4.2;  // > Event action for page Evol Page:1
        comparison++;  // > Event action for page Evol Page:2
        _pause();  // > Event action for page Evol Page:3
        wait(2000);  // > Event action for page Evol Page:4
        x=xc;  // > Event action for page Evol Page:5
        y=yc;  // > Event action for page Evol Page:6
        y1=3.6;  // > Event action for page Evol Page:7
        y2=3.6;  // > Event action for page Evol Page:8
        xa=0.4;  // > Event action for page Evol Page:9
        ya=5.4;  // > Event action for page Evol Page:10
        vy1=0;  // > Event action for page Evol Page:11
        vy2=0;  // > Event action for page Evol Page:12
        A=[0,0];  // > Event action for page Evol Page:13
        _play();  // > Event action for page Evol Page:14
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_y1(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_y2(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new inte8_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.plottingPanel.linkProperty("TRMessage",  function() { return "swaps: "+counter; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "comparisons: "+comparison; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.imageSet.linkProperty("SizeX",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'imageSet'
          _view.imageSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'imageSet'
          _view.imageSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'imageSet'
          _view.imageSet.linkProperty("ImageUrl",  function() { return imageUrl; }, function(_v) { imageUrl = _v; } ); // HtmlView Page linking property 'ImageUrl' for element 'imageSet'
          _view.imageSet.linkProperty("SizeY",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'imageSet'
          _view.imageSet.setAction("OnDrag", function(_data,_info) {
  var k=0;
  if (Math.abs(x[0]-x[1])<0.5){
    k=0;
    }
  if (Math.abs(x[1]-x[2])<0.5){
    k=1;
    }
    
  if (Math.abs(x[2]-x[3])<0.5){
    k=2;
    }
    
  if (Math.abs(x[3]-x[4])<0.5){
    k=3;
    }
  //else{
  //   alert('only adjacent swops allowed');
     
  //   }
   
   //from left
   if (Math.sqrt((x[k]-x[k+1])**2+(y[k]-y[k+1])**2)<0.5){
    //change value array
    var temp= h[k];
    h[k]=h[1+k];
    h[1+k]=temp;
    //change text array
    var temp1= text[k];  
    text[k]=text[1+k];
    text[1+k]=temp1;
    //change imageurl array
    var temp0= imageUrl[k];
   imageUrl[k]=imageUrl[k+1];
   imageUrl[k+1]=temp0;
    flag=false;
   
   if (flag==false){
     _pause();
   counter++;
   _view.audio.play();
    //snap card in place
   x=xc;
  y=yc;
  _pause();
  flag=true;
  }
  }
  // Modified Endgame
  if (imageUrl[0]==ans[0] && imageUrl[1]==ans[1] && imageUrl[2]==ans[2] && imageUrl[3]==ans[3] && imageUrl[4]==ans[4]){
    visibility=false;
    _pause();  
    _tools.showOkDialog("Congratulations! You took "+counter+" steps to sort the cards.");
    //_reset();
    }
  ///for weighing
  if (Math.abs(x[0]-x1)<0.5 && Math.abs(y[0]-y1)<0.5){
    A[0]=h[0];
    }
  if (Math.abs(x[0]-x2)<0.5 && Math.abs(y[0]-y2)<0.5){
    A[1]=h[0];
    }
  if (Math.abs(x[1]-x1)<0.5 && Math.abs(y[1]-y1)<0.5){
    A[0]=h[1];
    }
  if (Math.abs(x[1]-x2)<0.5 && Math.abs(y[1]-y2)<0.5){
    A[1]=h[1];
    }
    
  if (Math.abs(x[2]-x1)<0.5 && Math.abs(y[2]-y1)<0.5){
    A[0]=h[2];
    }
  if (Math.abs(x[2]-x2)<0.5 && Math.abs(y[2]-y2)<0.5){
    A[1]=h[2];
    }
  if (Math.abs(x[3]-x1)<0.5 && Math.abs(y[3]-y1)<0.5){
    A[0]=h[3];
    }
  if (Math.abs(x[3]-x2)<0.5 && Math.abs(y[3]-y2)<0.5){
    A[1]=h[3];
    }
    
  if (Math.abs(x[4]-x1)<0.5 && Math.abs(y[4]-y1)<0.5){
    A[0]=h[4];
    }
  if (Math.abs(x[4]-x2)<0.5 && Math.abs(y[4]-y2)<0.5){
    A[1]=h[4];
    }

}); // HtmlView Page setting action 'OnDrag' for element 'imageSet'
          _view.shapeSet.linkProperty("SizeX",  function() { return sizex; }, function(_v) { sizex = _v; } ); // HtmlView Page linking property 'SizeX' for element 'shapeSet'
          _view.shapeSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'shapeSet'
          _view.shapeSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'shapeSet'
          _view.shapeSet.linkProperty("Visibility",  function() { return visibility; }, function(_v) { visibility = _v; } ); // HtmlView Page linking property 'Visibility' for element 'shapeSet'
          _view.shapeSet.linkProperty("SizeY",  function() { return sizey; }, function(_v) { sizey = _v; } ); // HtmlView Page linking property 'SizeY' for element 'shapeSet'
          _view.textSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return text; }, function(_v) { text = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.on_off.linkProperty("X",  function() { return xa; }, function(_v) { xa = _v; } ); // HtmlView Page linking property 'X' for element 'on_off'
          _view.on_off.linkProperty("Y",  function() { return ya; }, function(_v) { ya = _v; } ); // HtmlView Page linking property 'Y' for element 'on_off'
          _view.pivot.linkProperty("X",  function() { return (x1+x2)/2; } ); // HtmlView Page linking property 'X' for element 'pivot'
          _view.pivot.linkProperty("Y",  function() { return (y1+y2)/2-1.6; } ); // HtmlView Page linking property 'Y' for element 'pivot'
          _view.shape.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.shape2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'shape2'
          _view.image2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'image2'
          _view.image2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'image2'
          _view.image1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'image1'
          _view.image1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'image1'
          _view.segment.linkProperty("SizeX",  function() { return (x2-x1); } ); // HtmlView Page linking property 'SizeX' for element 'segment'
          _view.segment.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'segment'
          _view.segment.linkProperty("Y",  function() { return y1-1.3; } ); // HtmlView Page linking property 'Y' for element 'segment'
          _view.segment.linkProperty("SizeY",  function() { return y2-y1; } ); // HtmlView Page linking property 'SizeY' for element 'segment'
          _view.vy1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // HtmlView Page linking property 'X' for element 'vy1'
          _view.vy1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // HtmlView Page linking property 'Y' for element 'vy1'
          _view.vy1.linkProperty("SizeY",  function() { return vy1; }, function(_v) { vy1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vy1'
          _view.vy12.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // HtmlView Page linking property 'X' for element 'vy12'
          _view.vy12.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // HtmlView Page linking property 'Y' for element 'vy12'
          _view.vy12.linkProperty("SizeY",  function() { return vy2; }, function(_v) { vy2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'vy12'
          _view.twoStateButton.setAction("OffClick", function(_data,_info) {
  visibility=true;

}); // HtmlView Page setting action 'OffClick' for element 'twoStateButton'
          _view.twoStateButton.setAction("OnClick", function(_data,_info) {
  visibility=false;

}); // HtmlView Page setting action 'OnClick' for element 'twoStateButton'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function inte8_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = inte8_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function inte8_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Bubble Sort </h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"audio", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'audio'
      .setProperty("AudioUrl","./templates/Ding Sound Effect.m4a") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'audio'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height",600) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width",800) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("ShowCoordinates",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowCoordinates' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("AxisXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisXShow' for element 'plottingPanel'
      .setProperty("MaximumY",13) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("AxisYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'AxisYShow' for element 'plottingPanel'
      .setProperty("TitleY","") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("TitleX","") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.imageSet,"imageSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'imageSet'
      .setProperty("NumberOfElements",5) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'imageSet'
      .setProperty("Visibility",true) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'imageSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'imageSet'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'imageSet'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"shapeSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shapeSet'
      .setProperty("NumberOfElements",5) // EJsS HtmlView.HtmlView Page: setting property 'NumberOfElements' for element 'shapeSet'
      .setProperty("FillColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shapeSet'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shapeSet'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shapeSet'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shapeSet'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shapeSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'shapeSet'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      .setProperty("FillColor","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"on_off", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'on_off'
      .setProperty("Sensitivity",0) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'on_off'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'on_off'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'on_off'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'on_off'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'on_off'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'on_off'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'on_off'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"X", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'X'
      .setProperty("X",2) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'X'
      .setProperty("Y",5.4) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'X'
      .setProperty("Text","Compare") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'X'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'X'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"pivot", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'pivot'
      .setProperty("Text","A") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'pivot'
      .setProperty("Font","normal normal 32px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'pivot'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","rgba(255,255,255,0.0)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("SizeX",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape2'
      .setProperty("ShapeType","RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape2'
      .setProperty("SizeY",100) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape2'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'shape2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image2'
      .setProperty("SizeX",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image2'
      .setProperty("ImageUrl","./templates/apple.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'image2'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'image2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image1'
      .setProperty("SizeX",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image1'
      .setProperty("ImageUrl","./templates/apple.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image1'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'image1'
      .setProperty("SizeY",50) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image1'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'image1'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"segment", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segment'
      .setProperty("PixelSize",false) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'segment'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segment'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vy1", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vy1'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vy1'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vy1'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'vy1'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"vy12", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vy12'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'vy12'
      .setProperty("LineWidth",5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'vy12'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'vy12'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("Width",398) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      .setProperty("BorderStyle","solid") // EJsS HtmlView.HtmlView Page: setting property 'BorderStyle' for element 'controlPanel'
      .setProperty("BorderColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'BorderColor' for element 'controlPanel'
      .setProperty("BorderWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"twoStateButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'twoStateButton'
      .setProperty("TextOn","Show cards") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'twoStateButton'
      .setProperty("Background","Yellow") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'twoStateButton'
      .setProperty("TextOff","Hide cards") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'twoStateButton'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("Disabled",false) // EJsS HtmlView.HtmlView Page: setting property 'Disabled' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'firstRowPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"narrativePanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'narrativePanel'
      .setProperty("Html","<h2>Bubble Sort Algorithm:</h2> <p>1. In an unsorted array of 5 elements, compare the first two elements to check which one is greater, and sort them in ascending order, from small to big.</p> <p>2. Compare the second and third element to check which one is greater, and sort them in ascending order.</p><p>3. Compare the third and fourth element to check which one is greater, and sort them in ascending order.</p><p>4. Compare the fourth and fifth element to check which one is greater, and sort them in ascending order.</p><p>5. Repeat steps 1–4 until no more swaps are required.</p>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'narrativePanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Bubble Sort by Team YIJC<br />
     <img alt="Logo" src="templates/logo_320.png" />
      </p>
      <p>
      <img alt="author image" src="templates/yijc_50.png" />
 YIJC (Fang Fang, David, Phow Loong)
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2019, Team YIJC.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new inte8("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
