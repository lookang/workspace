<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Living Dead</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function projectgd(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var tx; // EjsS Model.Variables.startscreen.tx
  var ty; // EjsS Model.Variables.startscreen.ty
  var bgx; // EjsS Model.Variables.startscreen.bgx
  var bgy; // EjsS Model.Variables.startscreen.bgy
  var gifx; // EjsS Model.Variables.startscreen.gifx
  var gify; // EjsS Model.Variables.startscreen.gify
  var startx; // EjsS Model.Variables.startscreen.startx
  var starty; // EjsS Model.Variables.startscreen.starty
  var gifv; // EjsS Model.Variables.startscreen.gifv
  var name; // EjsS Model.Variables.startscreen.name
  var gametitle; // EjsS Model.Variables.startscreen.gametitle
  var musicload; // EjsS Model.Variables.startscreen.musicload

  var numberofoptions; // EjsS Model.Variables.option.numberofoptions
  var max_qn; // EjsS Model.Variables.option.max_qn
  var n; // EjsS Model.Variables.option.n
  var ox; // EjsS Model.Variables.option.ox
  var oy; // EjsS Model.Variables.option.oy
  var elementinteracted; // EjsS Model.Variables.option.elementinteracted
  var answerarray; // EjsS Model.Variables.option.answerarray
  var questionarray; // EjsS Model.Variables.option.questionarray
  var answer; // EjsS Model.Variables.option.answer
  var question; // EjsS Model.Variables.option.question
  var correct; // EjsS Model.Variables.option.correct
  var sby; // EjsS Model.Variables.option.sby
  var qn_count; // EjsS Model.Variables.option.qn_count

  var sx; // EjsS Model.Variables.animatedsyringe.sx
  var sy; // EjsS Model.Variables.animatedsyringe.sy
  var sv; // EjsS Model.Variables.animatedsyringe.sv
  var stopshoot; // EjsS Model.Variables.animatedsyringe.stopshoot

  var wsx; // EjsS Model.Variables.wrongsyringe.wsx
  var wsy; // EjsS Model.Variables.wrongsyringe.wsy
  var wsv; // EjsS Model.Variables.wrongsyringe.wsv

  var health; // EjsS Model.Variables.zombiexplayer.health
  var hy; // EjsS Model.Variables.zombiexplayer.hy
  var px; // EjsS Model.Variables.zombiexplayer.px
  var py; // EjsS Model.Variables.zombiexplayer.py
  var t; // EjsS Model.Variables.zombiexplayer.t
  var zx; // EjsS Model.Variables.zombiexplayer.zx
  var zy; // EjsS Model.Variables.zombiexplayer.zy
  var zv; // EjsS Model.Variables.zombiexplayer.zv
  var score; // EjsS Model.Variables.zombiexplayer.score
  var hzx; // EjsS Model.Variables.zombiexplayer.hzx
  var hzy; // EjsS Model.Variables.zombiexplayer.hzy
  var hzv; // EjsS Model.Variables.zombiexplayer.hzv
  var scorey; // EjsS Model.Variables.zombiexplayer.scorey

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      tx : tx,
      ty : ty,
      bgx : bgx,
      bgy : bgy,
      gifx : gifx,
      gify : gify,
      startx : startx,
      starty : starty,
      gifv : gifv,
      name : name,
      gametitle : gametitle,
      musicload : musicload,
      numberofoptions : numberofoptions,
      max_qn : max_qn,
      n : n,
      ox : ox,
      oy : oy,
      elementinteracted : elementinteracted,
      answerarray : answerarray,
      questionarray : questionarray,
      answer : answer,
      question : question,
      correct : correct,
      sby : sby,
      qn_count : qn_count,
      sx : sx,
      sy : sy,
      sv : sv,
      stopshoot : stopshoot,
      wsx : wsx,
      wsy : wsy,
      wsv : wsv,
      health : health,
      hy : hy,
      px : px,
      py : py,
      t : t,
      zx : zx,
      zy : zy,
      zv : zv,
      score : score,
      hzx : hzx,
      hzy : hzy,
      hzv : hzv,
      scorey : scorey
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      tx : tx,
      ty : ty,
      bgx : bgx,
      bgy : bgy,
      gifx : gifx,
      gify : gify,
      startx : startx,
      starty : starty,
      gifv : gifv,
      name : name,
      gametitle : gametitle,
      musicload : musicload,
      numberofoptions : numberofoptions,
      max_qn : max_qn,
      n : n,
      ox : ox,
      oy : oy,
      elementinteracted : elementinteracted,
      answerarray : answerarray,
      questionarray : questionarray,
      answer : answer,
      question : question,
      correct : correct,
      sby : sby,
      qn_count : qn_count,
      sx : sx,
      sy : sy,
      sv : sv,
      stopshoot : stopshoot,
      wsx : wsx,
      wsy : wsy,
      wsv : wsv,
      health : health,
      hy : hy,
      px : px,
      py : py,
      t : t,
      zx : zx,
      zy : zy,
      zv : zv,
      score : score,
      hzx : hzx,
      hzy : hzy,
      hzv : hzv,
      scorey : scorey
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.tx != "undefined") tx = json.tx;
    if(typeof json.ty != "undefined") ty = json.ty;
    if(typeof json.bgx != "undefined") bgx = json.bgx;
    if(typeof json.bgy != "undefined") bgy = json.bgy;
    if(typeof json.gifx != "undefined") gifx = json.gifx;
    if(typeof json.gify != "undefined") gify = json.gify;
    if(typeof json.startx != "undefined") startx = json.startx;
    if(typeof json.starty != "undefined") starty = json.starty;
    if(typeof json.gifv != "undefined") gifv = json.gifv;
    if(typeof json.name != "undefined") name = json.name;
    if(typeof json.gametitle != "undefined") gametitle = json.gametitle;
    if(typeof json.musicload != "undefined") musicload = json.musicload;
    if(typeof json.numberofoptions != "undefined") numberofoptions = json.numberofoptions;
    if(typeof json.max_qn != "undefined") max_qn = json.max_qn;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.ox != "undefined") ox = json.ox;
    if(typeof json.oy != "undefined") oy = json.oy;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.answerarray != "undefined") answerarray = json.answerarray;
    if(typeof json.questionarray != "undefined") questionarray = json.questionarray;
    if(typeof json.answer != "undefined") answer = json.answer;
    if(typeof json.question != "undefined") question = json.question;
    if(typeof json.correct != "undefined") correct = json.correct;
    if(typeof json.sby != "undefined") sby = json.sby;
    if(typeof json.qn_count != "undefined") qn_count = json.qn_count;
    if(typeof json.sx != "undefined") sx = json.sx;
    if(typeof json.sy != "undefined") sy = json.sy;
    if(typeof json.sv != "undefined") sv = json.sv;
    if(typeof json.stopshoot != "undefined") stopshoot = json.stopshoot;
    if(typeof json.wsx != "undefined") wsx = json.wsx;
    if(typeof json.wsy != "undefined") wsy = json.wsy;
    if(typeof json.wsv != "undefined") wsv = json.wsv;
    if(typeof json.health != "undefined") health = json.health;
    if(typeof json.hy != "undefined") hy = json.hy;
    if(typeof json.px != "undefined") px = json.px;
    if(typeof json.py != "undefined") py = json.py;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.zx != "undefined") zx = json.zx;
    if(typeof json.zy != "undefined") zy = json.zy;
    if(typeof json.zv != "undefined") zv = json.zv;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.hzx != "undefined") hzx = json.hzx;
    if(typeof json.hzy != "undefined") hzy = json.hzy;
    if(typeof json.hzv != "undefined") hzv = json.hzv;
    if(typeof json.scorey != "undefined") scorey = json.scorey;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.tx != "undefined") tx = json.tx;
    if(typeof json.ty != "undefined") ty = json.ty;
    if(typeof json.bgx != "undefined") bgx = json.bgx;
    if(typeof json.bgy != "undefined") bgy = json.bgy;
    if(typeof json.gifx != "undefined") gifx = json.gifx;
    if(typeof json.gify != "undefined") gify = json.gify;
    if(typeof json.startx != "undefined") startx = json.startx;
    if(typeof json.starty != "undefined") starty = json.starty;
    if(typeof json.gifv != "undefined") gifv = json.gifv;
    if(typeof json.name != "undefined") name = json.name;
    if(typeof json.gametitle != "undefined") gametitle = json.gametitle;
    if(typeof json.musicload != "undefined") musicload = json.musicload;
    if(typeof json.numberofoptions != "undefined") numberofoptions = json.numberofoptions;
    if(typeof json.max_qn != "undefined") max_qn = json.max_qn;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.ox != "undefined") ox = json.ox;
    if(typeof json.oy != "undefined") oy = json.oy;
    if(typeof json.elementinteracted != "undefined") elementinteracted = json.elementinteracted;
    if(typeof json.answerarray != "undefined") answerarray = json.answerarray;
    if(typeof json.questionarray != "undefined") questionarray = json.questionarray;
    if(typeof json.answer != "undefined") answer = json.answer;
    if(typeof json.question != "undefined") question = json.question;
    if(typeof json.correct != "undefined") correct = json.correct;
    if(typeof json.sby != "undefined") sby = json.sby;
    if(typeof json.qn_count != "undefined") qn_count = json.qn_count;
    if(typeof json.sx != "undefined") sx = json.sx;
    if(typeof json.sy != "undefined") sy = json.sy;
    if(typeof json.sv != "undefined") sv = json.sv;
    if(typeof json.stopshoot != "undefined") stopshoot = json.stopshoot;
    if(typeof json.wsx != "undefined") wsx = json.wsx;
    if(typeof json.wsy != "undefined") wsy = json.wsy;
    if(typeof json.wsv != "undefined") wsv = json.wsv;
    if(typeof json.health != "undefined") health = json.health;
    if(typeof json.hy != "undefined") hy = json.hy;
    if(typeof json.px != "undefined") px = json.px;
    if(typeof json.py != "undefined") py = json.py;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.zx != "undefined") zx = json.zx;
    if(typeof json.zy != "undefined") zy = json.zy;
    if(typeof json.zv != "undefined") zv = json.zv;
    if(typeof json.score != "undefined") score = json.score;
    if(typeof json.hzx != "undefined") hzx = json.hzx;
    if(typeof json.hzy != "undefined") hzy = json.hzy;
    if(typeof json.hzv != "undefined") hzv = json.hzv;
    if(typeof json.scorey != "undefined") scorey = json.scorey;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["shuffleArray(array)"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["startshuffle"] = true;
    __pagesEnabled["startshuffleback"] = true;
    __pagesEnabled["PZcollision"] = true;
    __pagesEnabled["SZcollision"] = true;
    __pagesEnabled["WSZcollision"] = true;
    __pagesEnabled["hzleave"] = true;
  });

  _model.addToReset(function() {
    tx = -5.5; // EjsS Model.Variables.startscreen.tx
    ty = -5; // EjsS Model.Variables.startscreen.ty
    bgx = 0; // EjsS Model.Variables.startscreen.bgx
    bgy = 0; // EjsS Model.Variables.startscreen.bgy
    gifx = -0.9; // EjsS Model.Variables.startscreen.gifx
    gify = -5; // EjsS Model.Variables.startscreen.gify
    startx = 0; // EjsS Model.Variables.startscreen.startx
    starty = 0; // EjsS Model.Variables.startscreen.starty
    gifv = -0.1; // EjsS Model.Variables.startscreen.gifv
    name = "your name"; // EjsS Model.Variables.startscreen.name
    gametitle = "Continuous Tense"; // EjsS Model.Variables.startscreen.gametitle
    musicload = 0; // EjsS Model.Variables.startscreen.musicload
  });

  _model.addToReset(function() {
    numberofoptions = 4; // EjsS Model.Variables.option.numberofoptions
    max_qn = 8; // EjsS Model.Variables.option.max_qn
    n = numberofoptions; // EjsS Model.Variables.option.n
    ox = [-8,-8,-8,-8]; // EjsS Model.Variables.option.ox
    oy = [-100,-100,-100,-100]; // EjsS Model.Variables.option.oy
    elementinteracted = -1; // EjsS Model.Variables.option.elementinteracted
    answerarray = [["going","went","goes","go"],["watching","watched","watches","watcher"],["practising","practises","practise","practition"],["buying","bought","brought","buys"],["seeing","seen","saw","sees"],["looking","looks","look","looker"],["tasting","tasted","tastes","taster"],["being","been","was","is"]]; // EjsS Model.Variables.option.answerarray
    questionarray = ["I am (gone) to eat you.","I will be (watch) the movie.","I have been (practised) for the exam.","They were (buy) souvenirs for their friends.","He is (see) the doctor now.","Who are you (look) for?","After (taste) the food, he spat it out.","When you block them, you are (be) a good defender."]; // EjsS Model.Variables.option.questionarray
    answer = answerarray[0]; // EjsS Model.Variables.option.answer
    question = questionarray[0]; // EjsS Model.Variables.option.question
    correct = 0; // EjsS Model.Variables.option.correct
    sby = -100; // EjsS Model.Variables.option.sby
    qn_count = max_qn; // EjsS Model.Variables.option.qn_count
  });

  _model.addToReset(function() {
    sx = -100; // EjsS Model.Variables.animatedsyringe.sx
    sy = -1; // EjsS Model.Variables.animatedsyringe.sy
    sv = 0; // EjsS Model.Variables.animatedsyringe.sv
    stopshoot = 0; // EjsS Model.Variables.animatedsyringe.stopshoot
  });

  _model.addToReset(function() {
    wsx = -100; // EjsS Model.Variables.wrongsyringe.wsx
    wsy = -1; // EjsS Model.Variables.wrongsyringe.wsy
    wsv = 0; // EjsS Model.Variables.wrongsyringe.wsv
  });

  _model.addToReset(function() {
    health = 5; // EjsS Model.Variables.zombiexplayer.health
    hy = -100; // EjsS Model.Variables.zombiexplayer.hy
    px = -3; // EjsS Model.Variables.zombiexplayer.px
    py = -100; // EjsS Model.Variables.zombiexplayer.py
    t = 0; // EjsS Model.Variables.zombiexplayer.t
    zx = 9; // EjsS Model.Variables.zombiexplayer.zx
    zy = -100; // EjsS Model.Variables.zombiexplayer.zy
    zv = 0; // EjsS Model.Variables.zombiexplayer.zv
    score = 0; // EjsS Model.Variables.zombiexplayer.score
    hzx = -100; // EjsS Model.Variables.zombiexplayer.hzx
    hzy = -1; // EjsS Model.Variables.zombiexplayer.hzy
    hzv = 0; // EjsS Model.Variables.zombiexplayer.hzv
    scorey = -100; // EjsS Model.Variables.zombiexplayer.scorey
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(true);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  // in initialization  // > CustomCode.Shuffle:1
  // possible usage if y is the array  // > CustomCode.Shuffle:2
  //shuffleArray(oy);  // > CustomCode.Shuffle:3
  //https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array  // > CustomCode.Shuffle:4
  /**  // > CustomCode.Shuffle:5
   * Randomize array element order in-place.  // > CustomCode.Shuffle:6
   * Using Durstenfeld shuffle algorithm.  // > CustomCode.Shuffle:7
   */  // > CustomCode.Shuffle:8
  function shuffleArray(array) {  // > CustomCode.Shuffle:9
      for (var i = array.length - 1; i > 0; i--) {  // > CustomCode.Shuffle:10
          var j = Math.floor(Math.random() * (i + 1));  // > CustomCode.Shuffle:11
          var temp = array[i];  // > CustomCode.Shuffle:12
          array[i] = array[j];  // > CustomCode.Shuffle:13
          array[j] = temp;  // > CustomCode.Shuffle:14
      }  // > CustomCode.Shuffle:15
  }  // > CustomCode.Shuffle:16

  _model.addToInitialization(function() {
    if (!__pagesEnabled["shuffleArray(array)"]) return;
    shuffleArray(oy);  // > Initialization.shuffleArray(array):1
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var _ODE_evolution1_Event5;
    var _ODE_evolution1_Event6;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["zx","sx","wsx","hzy","gifx","hzx","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(0.05);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["startshuffle"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["startshuffleback"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["PZcollision"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["SZcollision"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      if (__pagesEnabled["WSZcollision"]) __eventSolver.addEvent(_ODE_evolution1_Event5());
      if (__pagesEnabled["hzleave"]) __eventSolver.addEvent(_ODE_evolution1_Event6());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=zx) __mustReinitialize = true;
        __state[__cIn++] = zx;
        if (__state[__cIn]!=sx) __mustReinitialize = true;
        __state[__cIn++] = sx;
        if (__state[__cIn]!=wsx) __mustReinitialize = true;
        __state[__cIn++] = wsx;
        if (__state[__cIn]!=hzy) __mustReinitialize = true;
        __state[__cIn++] = hzy;
        if (__state[__cIn]!=gifx) __mustReinitialize = true;
        __state[__cIn++] = gifx;
        if (__state[__cIn]!=hzx) __mustReinitialize = true;
        __state[__cIn++] = hzx;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (0.05===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(0.05);
      __eventSolver.setInternalStepSize(0.05);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = -zv; // Rate for ODE: Evol Page:zx
        _aRate[__cRate++] = sv; // Rate for ODE: Evol Page:sx
        _aRate[__cRate++] = wsv; // Rate for ODE: Evol Page:wsx
        _aRate[__cRate++] = hzv*2; // Rate for ODE: Evol Page:hzy
        _aRate[__cRate++] = gifv; // Rate for ODE: Evol Page:gifx
        _aRate[__cRate++] = hzv; // Rate for ODE: Evol Page:hzx
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = zx;
        __state[__cIn++] = sx;
        __state[__cIn++] = wsx;
        __state[__cIn++] = hzy;
        __state[__cIn++] = gifx;
        __state[__cIn++] = hzx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
        return gifx-(-1.49);  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = zx;
        __state[__cIn++] = sx;
        __state[__cIn++] = wsx;
        __state[__cIn++] = hzy;
        __state[__cIn++] = gifx;
        __state[__cIn++] = hzx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        gifv=0.1;  // > Event action for page Evol Page:1
        _view.audio.play();  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
        return gifx-(-0.9);  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = zx;
        __state[__cIn++] = sx;
        __state[__cIn++] = wsx;
        __state[__cIn++] = hzy;
        __state[__cIn++] = gifx;
        __state[__cIn++] = hzx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        gifv=-0.1;  // > Event action for page Evol Page:1
        _view.audio.play();  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt((zx-px)*(zx-px)+(zy-py)*(zy-py)) -1;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = zx;
        __state[__cIn++] = sx;
        __state[__cIn++] = wsx;
        __state[__cIn++] = hzy;
        __state[__cIn++] = gifx;
        __state[__cIn++] = hzx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _view.playerhit.play();  // > Event action for page Evol Page:1
        health=health-1;  // > Event action for page Evol Page:2
        if (health<=0)  // > Event action for page Evol Page:3
        { // game mechanism counter  // > Event action for page Evol Page:4
          _pause();   // > Event action for page Evol Page:5
         function post( path, params, method )  // > Event action for page Evol Page:6
        {  // > Event action for page Evol Page:7
        	method = method || "post"; // Set method to post by default if not specified.  // > Event action for page Evol Page:8
        	// The rest of this code assumes you are not using a library.  // > Event action for page Evol Page:9
        	// It can be made less wordy if you use one.  // > Event action for page Evol Page:10
        	var form = document.createElement("form");  // > Event action for page Evol Page:11
        	form.setAttribute("method", method);  // > Event action for page Evol Page:12
        	form.setAttribute("action", path);  // > Event action for page Evol Page:13
        	for(var key in params)  // > Event action for page Evol Page:14
        	{  // > Event action for page Evol Page:15
        		if(params.hasOwnProperty(key))  // > Event action for page Evol Page:16
        		{  // > Event action for page Evol Page:17
        			var hiddenField = document.createElement("input");  // > Event action for page Evol Page:18
        			hiddenField.setAttribute("type", "hidden");  // > Event action for page Evol Page:19
        			hiddenField.setAttribute("name", key);  // > Event action for page Evol Page:20
        			hiddenField.setAttribute("value", params[key]);  // > Event action for page Evol Page:21
        			  // > Event action for page Evol Page:22
        			form.appendChild(hiddenField);  // > Event action for page Evol Page:23
        		 }  // > Event action for page Evol Page:24
        	}  // > Event action for page Evol Page:25
        	document.body.appendChild(form);  // > Event action for page Evol Page:26
        	form.submit();  // > Event action for page Evol Page:27
        }  // > Event action for page Evol Page:28
        post( 'http://abcd.sg/sls/scoreboard/update.php', { url: window.location.href, title: gametitle, player_name: name, score: score } );  // > Event action for page Evol Page:29
          }  // > Event action for page Evol Page:30
        if(score>=0)  // > Event action for page Evol Page:31
        {score=score-25;  // > Event action for page Evol Page:32
        }  // > Event action for page Evol Page:33
        if(score<0)  // > Event action for page Evol Page:34
        {score=0;  // > Event action for page Evol Page:35
        }  // > Event action for page Evol Page:36
        zv=zv*0.9;  // > Event action for page Evol Page:37
        zy=-1;  // > Event action for page Evol Page:38
        zx=9;  // > Event action for page Evol Page:39
        _view.audio.play();  // > Event action for page Evol Page:40
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt((zx-sx)*(zx-sx)+(zy-sy)*(zy-sy)) -1;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = zx;
        __state[__cIn++] = sx;
        __state[__cIn++] = wsx;
        __state[__cIn++] = hzy;
        __state[__cIn++] = gifx;
        __state[__cIn++] = hzx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        sv=0;  // > Event action for page Evol Page:1
         sx=-100  // > Event action for page Evol Page:2
         score=score+100;  // > Event action for page Evol Page:3
         hzx=zx;  // > Event action for page Evol Page:4
         hzv=-1;  // > Event action for page Evol Page:5
         zx=-12;  // > Event action for page Evol Page:6
         stopshoot=1;  // > Event action for page Evol Page:7
         _view.yeah.play();  // > Event action for page Evol Page:8
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt((zx-wsx)*(zx-wsx)+(zy-wsy)*(zy-wsy)) -1;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = zx;
        __state[__cIn++] = sx;
        __state[__cIn++] = wsx;
        __state[__cIn++] = hzy;
        __state[__cIn++] = gifx;
        __state[__cIn++] = hzx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        _view.miss.play();  // > Event action for page Evol Page:1
        wsv=0;  // > Event action for page Evol Page:2
        wsx=-100;  // > Event action for page Evol Page:3
        zv=zv*0.7;  // > Event action for page Evol Page:4
         stopshoot = 0;  // > Event action for page Evol Page:5
        if(score>=0)  // > Event action for page Evol Page:6
        {score=score-25;  // > Event action for page Evol Page:7
        }  // > Event action for page Evol Page:8
        if(score<0)  // > Event action for page Evol Page:9
        {score=0;  // > Event action for page Evol Page:10
        }  // > Event action for page Evol Page:11
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event6 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var zx = _aState[__cOut++];
        var sx = _aState[__cOut++];
        var wsx = _aState[__cOut++];
        var hzy = _aState[__cOut++];
        var gifx = _aState[__cOut++];
        var hzx = _aState[__cOut++];
        var t = _aState[__cOut++];
        return hzy-(-10);  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        zx = __state[__cOut++];
        sx = __state[__cOut++];
        wsx = __state[__cOut++];
        hzy = __state[__cOut++];
        gifx = __state[__cOut++];
        hzx = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = zx;
        __state[__cIn++] = sx;
        __state[__cIn++] = wsx;
        __state[__cIn++] = hzy;
        __state[__cIn++] = gifx;
        __state[__cIn++] = hzx;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        stopshoot=0;  // > Event action for page Evol Page:1
         hzx=-100;  // > Event action for page Evol Page:2
        hzy=-1;  // > Event action for page Evol Page:3
        hzv=0;  // > Event action for page Evol Page:4
         correct=correct+1;  // > Event action for page Evol Page:5
         qn_count=max_qn-correct;  // > Event action for page Evol Page:6
         shuffleArray(oy);  // > Event action for page Evol Page:7
         {if (correct==max_qn){ // game mechanism counter  // > Event action for page Evol Page:8
          _pause();   // > Event action for page Evol Page:9
         function post( path, params, method )  // > Event action for page Evol Page:10
        {  // > Event action for page Evol Page:11
        	method = method || "post"; // Set method to post by default if not specified.  // > Event action for page Evol Page:12
        	// The rest of this code assumes you are not using a library.  // > Event action for page Evol Page:13
        	// It can be made less wordy if you use one.  // > Event action for page Evol Page:14
        	var form = document.createElement("form");  // > Event action for page Evol Page:15
        	form.setAttribute("method", method);  // > Event action for page Evol Page:16
        	form.setAttribute("action", path);  // > Event action for page Evol Page:17
        	for(var key in params)  // > Event action for page Evol Page:18
        	{  // > Event action for page Evol Page:19
        		if(params.hasOwnProperty(key))  // > Event action for page Evol Page:20
        		{  // > Event action for page Evol Page:21
        			var hiddenField = document.createElement("input");  // > Event action for page Evol Page:22
        			hiddenField.setAttribute("type", "hidden");  // > Event action for page Evol Page:23
        			hiddenField.setAttribute("name", key);  // > Event action for page Evol Page:24
        			hiddenField.setAttribute("value", params[key]);  // > Event action for page Evol Page:25
        			  // > Event action for page Evol Page:26
        			form.appendChild(hiddenField);  // > Event action for page Evol Page:27
        		 }  // > Event action for page Evol Page:28
        	}  // > Event action for page Evol Page:29
        	document.body.appendChild(form);  // > Event action for page Evol Page:30
        	form.submit();  // > Event action for page Evol Page:31
        }  // > Event action for page Evol Page:32
        post( 'http://abcd.sg/sls/scoreboard/update.php', { url: window.location.href, title: gametitle, player_name: name, score: score } );  // > Event action for page Evol Page:33
          }  // > Event action for page Evol Page:34
          else{  // > Event action for page Evol Page:35
        zv=zv+(5/max_qn);  // > Event action for page Evol Page:36
        zx=9;  // > Event action for page Evol Page:37
        zy=-1;  // > Event action for page Evol Page:38
        _view.audio.play();  // > Event action for page Evol Page:39
        answer=answerarray[correct]; //since correct is increase by 1, use this to change 4 options  // > Event action for page Evol Page:40
        question=questionarray[correct]; // change basket text as well  // > Event action for page Evol Page:41
        }} // game mechanism counter  // > Event action for page Evol Page:42
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_zx(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_sx(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_wsx(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_hzy(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_gifx(__time) {
    var __index = 0 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_hzx(__time) {
    var __index = 0 + 1 + 1 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new projectgd_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.name.linkProperty("Value",  function() { return name; }, function(_v) { name = _v; } ); // HtmlView Page linking property 'Value' for element 'name'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.plottingPanel.linkProperty("Height",  function() { return ""+window.innerHeight*0.8; } ); // HtmlView Page linking property 'Height' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return "name="+name; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.bg.linkProperty("X",  function() { return bgx; }, function(_v) { bgx = _v; } ); // HtmlView Page linking property 'X' for element 'bg'
          _view.bg.linkProperty("Y",  function() { return bgy; }, function(_v) { bgy = _v; } ); // HtmlView Page linking property 'Y' for element 'bg'
          _view.questioncount.linkProperty("X",  function() { return bgx+0.45; } ); // HtmlView Page linking property 'X' for element 'questioncount'
          _view.questioncount.linkProperty("Y",  function() { return bgy+8.25; } ); // HtmlView Page linking property 'Y' for element 'questioncount'
          _view.questioncount.linkProperty("Text",  function() { return ""+qn_count; } ); // HtmlView Page linking property 'Text' for element 'questioncount'
          _view.tomb.linkProperty("X",  function() { return tx; }, function(_v) { tx = _v; } ); // HtmlView Page linking property 'X' for element 'tomb'
          _view.tomb.linkProperty("Y",  function() { return ty; }, function(_v) { ty = _v; } ); // HtmlView Page linking property 'Y' for element 'tomb'
          _view.tomb.setAction("OnPress", function(_data,_info) {
  _view.music.play();
  starty=-100;
  gify=-100;
  gifx=-8
  gifv=0;
  ty=-100;
  oy=[3,0,-3,-6];
  zv=1;
  sby=-7;
  py=-1;
  hy=-5;
  zy=-1;
  _view.audio.play();
  scorey=-7.5;

}); // HtmlView Page setting action 'OnPress' for element 'tomb'
          _view.start.linkProperty("X",  function() { return startx; }, function(_v) { startx = _v; } ); // HtmlView Page linking property 'X' for element 'start'
          _view.start.linkProperty("Y",  function() { return starty; }, function(_v) { starty = _v; } ); // HtmlView Page linking property 'Y' for element 'start'
          _view.tombtext.linkProperty("X",  function() { return tx; }, function(_v) { tx = _v; } ); // HtmlView Page linking property 'X' for element 'tombtext'
          _view.tombtext.linkProperty("Y",  function() { return ty; }, function(_v) { ty = _v; } ); // HtmlView Page linking property 'Y' for element 'tombtext'
          _view.tombtext.linkProperty("Text",  function() { return gametitle; }, function(_v) { gametitle = _v; } ); // HtmlView Page linking property 'Text' for element 'tombtext'
          _view.gifzombie.linkProperty("X",  function() { return gifx; }, function(_v) { gifx = _v; } ); // HtmlView Page linking property 'X' for element 'gifzombie'
          _view.gifzombie.linkProperty("Y",  function() { return gify; }, function(_v) { gify = _v; } ); // HtmlView Page linking property 'Y' for element 'gifzombie'
          _view.health.linkProperty("Y",  function() { return hy; }, function(_v) { hy = _v; } ); // HtmlView Page linking property 'Y' for element 'health'
          _view.health.linkProperty("Level",  function() { return health; }, function(_v) { health = _v; } ); // HtmlView Page linking property 'Level' for element 'health'
          _view.player.linkProperty("X",  function() { return px+1; } ); // HtmlView Page linking property 'X' for element 'player'
          _view.player.linkProperty("Y",  function() { return py; }, function(_v) { py = _v; } ); // HtmlView Page linking property 'Y' for element 'player'
          _view.zombie.linkProperty("X",  function() { return zx; }, function(_v) { zx = _v; } ); // HtmlView Page linking property 'X' for element 'zombie'
          _view.zombie.linkProperty("Y",  function() { return zy; }, function(_v) { zy = _v; } ); // HtmlView Page linking property 'Y' for element 'zombie'
          _view.healedzombie.linkProperty("X",  function() { return hzx; }, function(_v) { hzx = _v; } ); // HtmlView Page linking property 'X' for element 'healedzombie'
          _view.healedzombie.linkProperty("Y",  function() { return hzy; }, function(_v) { hzy = _v; } ); // HtmlView Page linking property 'Y' for element 'healedzombie'
          _view.animatedsyringe2.linkProperty("X",  function() { return wsx+1; } ); // HtmlView Page linking property 'X' for element 'animatedsyringe2'
          _view.animatedsyringe2.linkProperty("Y",  function() { return wsy; }, function(_v) { wsy = _v; } ); // HtmlView Page linking property 'Y' for element 'animatedsyringe2'
          _view.animatedsyringe.linkProperty("X",  function() { return sx+1; } ); // HtmlView Page linking property 'X' for element 'animatedsyringe'
          _view.animatedsyringe.linkProperty("Y",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'Y' for element 'animatedsyringe'
          _view.options2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'options2'
          _view.options2.linkProperty("X",  function() { return ox; }, function(_v) { ox = _v; } ); // HtmlView Page linking property 'X' for element 'options2'
          _view.options2.linkProperty("Y",  function() { return oy; }, function(_v) { oy = _v; } ); // HtmlView Page linking property 'Y' for element 'options2'
          _view.syringeanswer.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'syringeanswer'
          _view.syringeanswer.linkProperty("X",  function() { return ox; }, function(_v) { ox = _v; } ); // HtmlView Page linking property 'X' for element 'syringeanswer'
          _view.syringeanswer.linkProperty("Y",  function() { return oy; }, function(_v) { oy = _v; } ); // HtmlView Page linking property 'Y' for element 'syringeanswer'
          _view.syringeanswer.linkProperty("Text",  function() { return answer; }, function(_v) { answer = _v; } ); // HtmlView Page linking property 'Text' for element 'syringeanswer'
          _view.syringeanswer.setAction("OnPress", function(_data,_info) {
  if (stopshoot == 0){
  if (elementinteracted == 0){
   sx=px;
   sv=3;
   wsx=-100;
   wsv=0;
   _view.dart.play();
   stopshoot = 1;
     }
    else if(elementinteracted == 1){
   wsx=px;
   wsv=3;
   sx=-100;
   sv=0;
    _view.dart.play();
     stopshoot = 1;
      }
      else if(elementinteracted == 2){
   wsx=px;
   wsv=3; 
    sx=-100;
   sv=0;
    _view.dart.play();
     stopshoot = 1;
      }
  else if(elementinteracted == 3){
   wsx=px;
   wsv=3;   
    sx=-100;
   sv=0;
    _view.dart.play();
     stopshoot = 1;
      }
  }

}); // HtmlView Page setting action 'OnPress' for element 'syringeanswer'
          _view.syringeanswer.linkProperty("ElementInteracted",  function() { return elementinteracted; }, function(_v) { elementinteracted = _v; } ); // HtmlView Page linking property 'ElementInteracted' for element 'syringeanswer'
          _view.speechbubble.linkProperty("Y",  function() { return sby; }, function(_v) { sby = _v; } ); // HtmlView Page linking property 'Y' for element 'speechbubble'
          _view.speechtext.linkProperty("Y",  function() { return sby-0.7; } ); // HtmlView Page linking property 'Y' for element 'speechtext'
          _view.speechtext.linkProperty("Text",  function() { return question; }, function(_v) { question = _v; } ); // HtmlView Page linking property 'Text' for element 'speechtext'
          _view.score.linkProperty("Y",  function() { return scorey; }, function(_v) { scorey = _v; } ); // HtmlView Page linking property 'Y' for element 'score'
          _view.score.linkProperty("Text",  function() { return "score="+score; } ); // HtmlView Page linking property 'Text' for element 'score'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(true);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function projectgd_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = projectgd_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function projectgd_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
      .setProperty("Text","The Living Dead") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'
      .setProperty("Font","normal bold 30px Tahoma, Geneva, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'label'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"name2", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'name2'
      .setProperty("Text","Please input your name: ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'name2'
      ;

    _view._addElement(EJSS_INTERFACE.textField,"name", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'name'
      .setProperty("Editable",true) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'name'
      .setProperty("Font","normal normal 20px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'name'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      .setProperty("Text","Try again") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"yeah", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yeah'
      .setProperty("Volume",0.7) // EJsS HtmlView.HtmlView Page: setting property 'Volume' for element 'yeah'
      .setProperty("AudioUrl","./yeah.wav") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'yeah'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"music", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'music'
      .setProperty("Loop",true) // EJsS HtmlView.HtmlView Page: setting property 'Loop' for element 'music'
      .setProperty("Volume",0.5) // EJsS HtmlView.HtmlView Page: setting property 'Volume' for element 'music'
      .setProperty("AudioUrl","./loop.wav") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'music'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"playerhit", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playerhit'
      .setProperty("AudioUrl","./playerhit.wav") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'playerhit'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"audio", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'audio'
      .setProperty("Autoplay",true) // EJsS HtmlView.HtmlView Page: setting property 'Autoplay' for element 'audio'
      .setProperty("AudioUrl","./rawr.wav") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'audio'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"dart", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'dart'
      .setProperty("AudioUrl","./dart.wav") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'dart'
      ;

    _view._addElement(EJSS_INTERFACE.audio,"miss", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'miss'
      .setProperty("AudioUrl","./zombiemiss.wav") // EJsS HtmlView.HtmlView Page: setting property 'AudioUrl' for element 'miss'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("XFixedTick",10) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("MaximumY",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumY' for element 'plottingPanel'
      .setProperty("MaximumX",10) // EJsS HtmlView.HtmlView Page: setting property 'MaximumX' for element 'plottingPanel'
      .setProperty("YFixedTick",10) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("MinimumX",-10) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'plottingPanel'
      .setProperty("MinimumY",-10) // EJsS HtmlView.HtmlView Page: setting property 'MinimumY' for element 'plottingPanel'
      .setProperty("XTickStep",20) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",20) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"bg", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bg'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'bg'
      .setProperty("ImageUrl","./bg.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'bg'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'bg'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"questioncount", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'questioncount'
      .setProperty("Font","normal bold 20px Tahoma, Geneva, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'questioncount'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"tomb", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tomb'
      .setProperty("Sensitivity",100) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'tomb'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'tomb'
      .setProperty("ImageUrl","./tomb.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'tomb'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'tomb'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'tomb'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"start", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'start'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'start'
      .setProperty("ImageUrl","./start.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'start'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'start'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"tombtext", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tombtext'
      .setProperty("RelativePosition","NORTH") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'tombtext'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"gifzombie", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'gifzombie'
      .setProperty("SizeX",3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'gifzombie'
      .setProperty("ImageUrl","./gifzombie.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'gifzombie'
      .setProperty("SizeY",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'gifzombie'
      ;

    _view._addElement(EJSS_DRAWING2D.tank,"health", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'health'
      .setProperty("LevelColor","blue") // EJsS HtmlView.HtmlView Page: setting property 'LevelColor' for element 'health'
      .setProperty("SizeX",0.3) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'health'
      .setProperty("Rotate",-1.5708) // EJsS HtmlView.HtmlView Page: setting property 'Rotate' for element 'health'
      .setProperty("X",-3.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'health'
      .setProperty("LineColor","rgba(black)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'health'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'health'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"player", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'player'
      .setProperty("SizeX",8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'player'
      .setProperty("ImageUrl","./human.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'player'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'player'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"zombie", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'zombie'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'zombie'
      .setProperty("ImageUrl","./zombie.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'zombie'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'zombie'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"healedzombie", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'healedzombie'
      .setProperty("SizeX",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'healedzombie'
      .setProperty("ImageUrl","./healed.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'healedzombie'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'healedzombie'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"animatedsyringe2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'animatedsyringe2'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'animatedsyringe2'
      .setProperty("ImageUrl","./syringe.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'animatedsyringe2'
      .setProperty("SizeY",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'animatedsyringe2'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"animatedsyringe", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'animatedsyringe'
      .setProperty("SizeX",1) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'animatedsyringe'
      .setProperty("ImageUrl","./syringe.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'animatedsyringe'
      .setProperty("SizeY",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'animatedsyringe'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"options", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'options'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"options2", _view.options) // EJsS HtmlView.HtmlView Page: declaration of element 'options2'
      .setProperty("FillColor","rgba(200,220,208,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'options2'
      .setProperty("SizeX",4) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'options2'
      .setProperty("ShapeType","ROUND_RECTANGLE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'options2'
      .setProperty("SizeY",2) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'options2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"syringeanswer", _view.options) // EJsS HtmlView.HtmlView Page: declaration of element 'syringeanswer'
      .setProperty("Sensitivity",50) // EJsS HtmlView.HtmlView Page: setting property 'Sensitivity' for element 'syringeanswer'
      .setProperty("FontSize",30) // EJsS HtmlView.HtmlView Page: setting property 'FontSize' for element 'syringeanswer'
      .setProperty("EnabledPosition","ENABLED_NO_MOVE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'syringeanswer'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"zombiespeech", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'zombiespeech'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"speechbubble", _view.zombiespeech) // EJsS HtmlView.HtmlView Page: declaration of element 'speechbubble'
      .setProperty("SizeX",15) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'speechbubble'
      .setProperty("X",1.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'speechbubble'
      .setProperty("ImageUrl","./zombiespeech.png") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'speechbubble'
      .setProperty("SizeY",6) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'speechbubble'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"speechtext", _view.zombiespeech) // EJsS HtmlView.HtmlView Page: declaration of element 'speechtext'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'speechtext'
      .setProperty("X",1.5) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'speechtext'
      .setProperty("Font","normal bold 30px Tahoma, Geneva, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'speechtext'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"score", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'score'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'score'
      .setProperty("X",-8) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'score'
      .setProperty("Font","normal bold 20px Tahoma, Geneva, sans-serif") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'score'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      The Living Dead<br />
     <img alt="Logo" src="logo.png" />
     <img alt="Logo" src="logo.png" />
      </p>
      <p>
 Benny, Siti Nur, Zhiliang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2019, cc-by-sa-nc.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new projectgd("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
