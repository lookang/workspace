<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Kinematics</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function kinematics_new(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var initial_ux; // EjsS Model.Variables.user_input_uvats.initial_ux
  var final_vx; // EjsS Model.Variables.user_input_uvats.final_vx
  var ax; // EjsS Model.Variables.user_input_uvats.ax
  var final_sx; // EjsS Model.Variables.user_input_uvats.final_sx
  var t_taken; // EjsS Model.Variables.user_input_uvats.t_taken

  var v_pos; // EjsS Model.Variables.to account for 2 solns.v_pos
  var v_neg; // EjsS Model.Variables.to account for 2 solns.v_neg
  var u_pos; // EjsS Model.Variables.to account for 2 solns.u_pos
  var u_neg; // EjsS Model.Variables.to account for 2 solns.u_neg
  var t1; // EjsS Model.Variables.to account for 2 solns.t1
  var t2; // EjsS Model.Variables.to account for 2 solns.t2

  var t_current; // EjsS Model.Variables.for_animation.t_current
  var t; // EjsS Model.Variables.for_animation.t
  var sx; // EjsS Model.Variables.for_animation.sx
  var sy; // EjsS Model.Variables.for_animation.sy
  var dt; // EjsS Model.Variables.for_animation.dt
  var vx; // EjsS Model.Variables.for_animation.vx
  var abs_max_displacement; // EjsS Model.Variables.for_animation.abs_max_displacement
  var animation_speed; // EjsS Model.Variables.for_animation.animation_speed

  var animation_max_x; // EjsS Model.Variables.graph.animation_max_x
  var animation_max_y; // EjsS Model.Variables.graph.animation_max_y
  var animation_min_x; // EjsS Model.Variables.graph.animation_min_x
  var animation_min_y; // EjsS Model.Variables.graph.animation_min_y
  var max_displacement; // EjsS Model.Variables.graph.max_displacement
  var min_displacement; // EjsS Model.Variables.graph.min_displacement
  var max_velocity; // EjsS Model.Variables.graph.max_velocity
  var min_velocity; // EjsS Model.Variables.graph.min_velocity
  var s_max_t; // EjsS Model.Variables.graph.s_max_t
  var v_max_t; // EjsS Model.Variables.graph.v_max_t

  var number_filled; // EjsS Model.Variables.others.number_filled
  var solution1; // EjsS Model.Variables.others.solution1
  var solution2; // EjsS Model.Variables.others.solution2

  var v; // EjsS Model.Variables.for calculation.v
  var u; // EjsS Model.Variables.for calculation.u
  var a; // EjsS Model.Variables.for calculation.a
  var s; // EjsS Model.Variables.for calculation.s
  var t; // EjsS Model.Variables.for calculation.t

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      initial_ux : initial_ux,
      final_vx : final_vx,
      ax : ax,
      final_sx : final_sx,
      t_taken : t_taken,
      v_pos : v_pos,
      v_neg : v_neg,
      u_pos : u_pos,
      u_neg : u_neg,
      t1 : t1,
      t2 : t2,
      t_current : t_current,
      t : t,
      sx : sx,
      sy : sy,
      dt : dt,
      vx : vx,
      abs_max_displacement : abs_max_displacement,
      animation_speed : animation_speed,
      animation_max_x : animation_max_x,
      animation_max_y : animation_max_y,
      animation_min_x : animation_min_x,
      animation_min_y : animation_min_y,
      max_displacement : max_displacement,
      min_displacement : min_displacement,
      max_velocity : max_velocity,
      min_velocity : min_velocity,
      s_max_t : s_max_t,
      v_max_t : v_max_t,
      number_filled : number_filled,
      solution1 : solution1,
      solution2 : solution2,
      v : v,
      u : u,
      a : a,
      s : s,
      t : t
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.initial_ux != "undefined") initial_ux = json.initial_ux;
    if(typeof json.final_vx != "undefined") final_vx = json.final_vx;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.final_sx != "undefined") final_sx = json.final_sx;
    if(typeof json.t_taken != "undefined") t_taken = json.t_taken;
    if(typeof json.v_pos != "undefined") v_pos = json.v_pos;
    if(typeof json.v_neg != "undefined") v_neg = json.v_neg;
    if(typeof json.u_pos != "undefined") u_pos = json.u_pos;
    if(typeof json.u_neg != "undefined") u_neg = json.u_neg;
    if(typeof json.t1 != "undefined") t1 = json.t1;
    if(typeof json.t2 != "undefined") t2 = json.t2;
    if(typeof json.t_current != "undefined") t_current = json.t_current;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.sx != "undefined") sx = json.sx;
    if(typeof json.sy != "undefined") sy = json.sy;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.abs_max_displacement != "undefined") abs_max_displacement = json.abs_max_displacement;
    if(typeof json.animation_speed != "undefined") animation_speed = json.animation_speed;
    if(typeof json.animation_max_x != "undefined") animation_max_x = json.animation_max_x;
    if(typeof json.animation_max_y != "undefined") animation_max_y = json.animation_max_y;
    if(typeof json.animation_min_x != "undefined") animation_min_x = json.animation_min_x;
    if(typeof json.animation_min_y != "undefined") animation_min_y = json.animation_min_y;
    if(typeof json.max_displacement != "undefined") max_displacement = json.max_displacement;
    if(typeof json.min_displacement != "undefined") min_displacement = json.min_displacement;
    if(typeof json.max_velocity != "undefined") max_velocity = json.max_velocity;
    if(typeof json.min_velocity != "undefined") min_velocity = json.min_velocity;
    if(typeof json.s_max_t != "undefined") s_max_t = json.s_max_t;
    if(typeof json.v_max_t != "undefined") v_max_t = json.v_max_t;
    if(typeof json.number_filled != "undefined") number_filled = json.number_filled;
    if(typeof json.solution1 != "undefined") solution1 = json.solution1;
    if(typeof json.solution2 != "undefined") solution2 = json.solution2;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.u != "undefined") u = json.u;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.s != "undefined") s = json.s;
    if(typeof json.t != "undefined") t = json.t;
  };

  _model._inputAndPublicParameters = ["initial_ux",  "final_vx",  "ax",  "final_sx",  "t_taken",  "v_pos",  "v_neg",  "u_pos",  "u_neg",  "t1",  "t2",  "t_current",  "t",  "sx",  "sy",  "dt",  "vx",  "abs_max_displacement",  "animation_speed",  "animation_max_x",  "animation_max_y",  "animation_min_x",  "animation_min_y",  "max_displacement",  "min_displacement",  "max_velocity",  "min_velocity",  "s_max_t",  "v_max_t",  "number_filled",  "solution1",  "solution2",  "v",  "u",  "a",  "s",  "t"]; 

  _model._outputAndPublicParameters = ["initial_ux",  "final_vx",  "ax",  "final_sx",  "t_taken",  "v_pos",  "v_neg",  "u_pos",  "u_neg",  "t1",  "t2",  "t_current",  "t",  "sx",  "sy",  "dt",  "vx",  "abs_max_displacement",  "animation_speed",  "animation_max_x",  "animation_max_y",  "animation_min_x",  "animation_min_y",  "max_displacement",  "min_displacement",  "max_velocity",  "min_velocity",  "s_max_t",  "v_max_t",  "number_filled",  "solution1",  "solution2",  "v",  "u",  "a",  "s",  "t"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["kinematics_evolution"] = true;
    __pagesEnabled["Event"] = true;
  });

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
  });

  _model.addToReset(function() {
    t_current = 0; // EjsS Model.Variables.for_animation.t_current
    t = 0; // EjsS Model.Variables.for_animation.t
    sx = 0; // EjsS Model.Variables.for_animation.sx
    sy = 0; // EjsS Model.Variables.for_animation.sy
    dt = 0.05; // EjsS Model.Variables.for_animation.dt
    vx = 0; // EjsS Model.Variables.for_animation.vx
    abs_max_displacement = 0; // EjsS Model.Variables.for_animation.abs_max_displacement
    animation_speed = 20; // EjsS Model.Variables.for_animation.animation_speed
  });

  _model.addToReset(function() {
    animation_max_x = 2; // EjsS Model.Variables.graph.animation_max_x
    animation_max_y = 0.5; // EjsS Model.Variables.graph.animation_max_y
    animation_min_x = -2; // EjsS Model.Variables.graph.animation_min_x
    animation_min_y = -0.5; // EjsS Model.Variables.graph.animation_min_y
    max_displacement = 2; // EjsS Model.Variables.graph.max_displacement
    min_displacement = -2; // EjsS Model.Variables.graph.min_displacement
    max_velocity = 2; // EjsS Model.Variables.graph.max_velocity
    min_velocity = -2; // EjsS Model.Variables.graph.min_velocity
    s_max_t = 2; // EjsS Model.Variables.graph.s_max_t
    v_max_t = 2; // EjsS Model.Variables.graph.v_max_t
  });

  _model.addToReset(function() {
    number_filled = 0; // EjsS Model.Variables.others.number_filled
    solution1 = true; // EjsS Model.Variables.others.solution1
    solution2 = false; // EjsS Model.Variables.others.solution2
  });

  _model.addToReset(function() {
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function get_number_input_parameters() {  // > CustomCode.get_number_input_parameters:1
  			number_filled = 0;  // > CustomCode.get_number_input_parameters:2
  			if (ip_initial_ux.value != "")  // > CustomCode.get_number_input_parameters:3
  			{  // > CustomCode.get_number_input_parameters:4
  				number_filled++;  // > CustomCode.get_number_input_parameters:5
  			}  // > CustomCode.get_number_input_parameters:6
  			if (ip_final_vx.value != "")  // > CustomCode.get_number_input_parameters:7
  			{  // > CustomCode.get_number_input_parameters:8
  				number_filled++;  // > CustomCode.get_number_input_parameters:9
  			}  // > CustomCode.get_number_input_parameters:10
  			if (ip_ax.value != "")  // > CustomCode.get_number_input_parameters:11
  			{  // > CustomCode.get_number_input_parameters:12
  				number_filled++;  // > CustomCode.get_number_input_parameters:13
  			}  // > CustomCode.get_number_input_parameters:14
  			if (ip_t_taken.value != "")  // > CustomCode.get_number_input_parameters:15
  			{  // > CustomCode.get_number_input_parameters:16
  				number_filled++;  // > CustomCode.get_number_input_parameters:17
  			}  // > CustomCode.get_number_input_parameters:18
  			if (ip_final_sx.value != "")  // > CustomCode.get_number_input_parameters:19
  			{  // > CustomCode.get_number_input_parameters:20
  				number_filled++;  // > CustomCode.get_number_input_parameters:21
  			}  // > CustomCode.get_number_input_parameters:22
  		}  // > CustomCode.get_number_input_parameters:23

  function number_filled_3 () {  // > CustomCode.number_filled_3:1
    if(number_filled == 3){  // > CustomCode.number_filled_3:2
    alert("3 variables filled! Don't fill in anymore!");  // > CustomCode.number_filled_3:3
                           if (ip_initial_ux.value == "")  // > CustomCode.number_filled_3:4
  			{  // > CustomCode.number_filled_3:5
  				ip_initial_ux.disabled = true;  // > CustomCode.number_filled_3:6
  			}  // > CustomCode.number_filled_3:7
  			if (ip_final_vx.value == "")  // > CustomCode.number_filled_3:8
  			{  // > CustomCode.number_filled_3:9
  				ip_final_vx.disabled = true;  // > CustomCode.number_filled_3:10
  			}  // > CustomCode.number_filled_3:11
  			if (ip_ax.value == "")  // > CustomCode.number_filled_3:12
  			{  // > CustomCode.number_filled_3:13
  				ip_ax.disabled = true;  // > CustomCode.number_filled_3:14
  			}  // > CustomCode.number_filled_3:15
  			if (ip_t_taken.value == "")  // > CustomCode.number_filled_3:16
  			{  // > CustomCode.number_filled_3:17
  				ip_t_taken.disabled = true;  // > CustomCode.number_filled_3:18
  			}  // > CustomCode.number_filled_3:19
  			if (ip_final_sx.value == "")  // > CustomCode.number_filled_3:20
  			{  // > CustomCode.number_filled_3:21
  				ip_final_sx.disabled = true;  // > CustomCode.number_filled_3:22
  			}  // > CustomCode.number_filled_3:23
    }  // > CustomCode.number_filled_3:24
  }  // > CustomCode.number_filled_3:25

  function set_values () {  // > CustomCode.set_values:1
    input_ux = NaN;  // > CustomCode.set_values:2
    final_vx = NaN;  // > CustomCode.set_values:3
    ax = NaN;  // > CustomCode.set_values:4
    t_taken = NaN;  // > CustomCode.set_values:5
    final_sx = NaN;  // > CustomCode.set_values:6
                          if (ip_initial_ux.value != "")  // > CustomCode.set_values:7
  			{  // > CustomCode.set_values:8
  				initial_ux = ip_initial_ux.value;  // > CustomCode.set_values:9
  			}  // > CustomCode.set_values:10
  			if (ip_final_vx.value != "")  // > CustomCode.set_values:11
  			{  // > CustomCode.set_values:12
  				final_vx = ip_final_vx.value;  // > CustomCode.set_values:13
  			}  // > CustomCode.set_values:14
  			if (ip_ax.value != "")  // > CustomCode.set_values:15
  			{  // > CustomCode.set_values:16
  				ax = ip_ax.value;  // > CustomCode.set_values:17
  			}  // > CustomCode.set_values:18
  			if (ip_t_taken.value != "")  // > CustomCode.set_values:19
  			{  // > CustomCode.set_values:20
  				t_taken = ip_t_taken.value;  // > CustomCode.set_values:21
  			}  // > CustomCode.set_values:22
  			if (ip_final_sx.value != "")  // > CustomCode.set_values:23
  			{  // > CustomCode.set_values:24
  				final_sx = ip_final_sx.value;  // > CustomCode.set_values:25
  			}  // > CustomCode.set_values:26
  }  // > CustomCode.set_values:27

   function calculateAll () {  // > CustomCode.calculateAll:1
  			  // > CustomCode.calculateAll:2
  			u = Number(ip_initial_ux.value);  // > CustomCode.calculateAll:3
  			v = Number(ip_final_vx.value);  // > CustomCode.calculateAll:4
  			a = Number(ip_ax.value);  // > CustomCode.calculateAll:5
  		  // > CustomCode.calculateAll:6
  			t = Number(ip_t_taken.value);  // > CustomCode.calculateAll:7
  			s = Number(ip_final_sx.value);  // > CustomCode.calculateAll:8
  			  // > CustomCode.calculateAll:9
  			url='https://maker.ifttt.com/trigger/kinematics/with/key/chk6iEBFJImv_jZ8qHJb5B?value1=';  // > CustomCode.calculateAll:10
  			  // > CustomCode.calculateAll:11
  			  // > CustomCode.calculateAll:12
  			  // > CustomCode.calculateAll:13
  			if (number_filled != 3) {  // > CustomCode.calculateAll:14
  				alert("Please enter exactly 3 values, you have entered " + number_filled + " values.");  // > CustomCode.calculateAll:15
  			}  // > CustomCode.calculateAll:16
  			else {  // > CustomCode.calculateAll:17
  			    // > CustomCode.calculateAll:18
  			      if (ip_initial_ux.value!=""){  // > CustomCode.calculateAll:19
  			          url+= 'u: ' + u + '  ';  // > CustomCode.calculateAll:20
  			          }  // > CustomCode.calculateAll:21
  			if (ip_final_vx.value!=""){  // > CustomCode.calculateAll:22
  			  url+= 'v: ' + v + '  ';  // > CustomCode.calculateAll:23
  			  }  // > CustomCode.calculateAll:24
  			 if (ip_ax.value!=""){  // > CustomCode.calculateAll:25
  			  url+= 'a: ' + a + '  ';  // > CustomCode.calculateAll:26
  			  }  // > CustomCode.calculateAll:27
  			  if (ip_t_taken.value!=""){  // > CustomCode.calculateAll:28
  			  url+= 't: ' + t + '  ';  // > CustomCode.calculateAll:29
  			  }  // > CustomCode.calculateAll:30
  			  if (ip_final_sx.value!=""){  // > CustomCode.calculateAll:31
  			  url+= 's: ' + s + '  ';  // > CustomCode.calculateAll:32
  			  }  // > CustomCode.calculateAll:33
  			    // > CustomCode.calculateAll:34
  			  Http.open("GET", url);  // > CustomCode.calculateAll:35
                            Http.send();  // > CustomCode.calculateAll:36
  			    // > CustomCode.calculateAll:37
  			        // > CustomCode.calculateAll:38
  				  // > CustomCode.calculateAll:39
  				if (ip_initial_ux.value!="" && ip_final_vx.value!="" && ip_ax.value!=""){  // > CustomCode.calculateAll:40
  					t = (v-u)/a;  // > CustomCode.calculateAll:41
  					s = 0.5*(u+v)*t;  // > CustomCode.calculateAll:42
  					t = round(t,2);  // > CustomCode.calculateAll:43
  					s = round(s,2);  // > CustomCode.calculateAll:44
  					display_calculated_values.innerHTML="Time t = " + t + " s" +"<br/>"+ "Displacement s = " + s + " m";  // > CustomCode.calculateAll:45
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:46
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known u, v and a values into the equation <br/> <br/> <b>v = u + at</b> <br/> <br/> to get time t = " + t + "s.<br/><br/>Now you know u, v, a and t.";  // > CustomCode.calculateAll:47
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get s (final unknown variable) is to substitute u, v and t into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t</b> <br/> <br/> to get displacement s = " + s + "m.";  // > CustomCode.calculateAll:48
  				}  // > CustomCode.calculateAll:49
  				if (ip_initial_ux.value!="" && ip_final_vx.value!="" && ip_t_taken.value!=""){  // > CustomCode.calculateAll:50
  					a = (v-u)/t;  // > CustomCode.calculateAll:51
  					s = 0.5*(u+v)*t;  // > CustomCode.calculateAll:52
  					a = round(a,2);  // > CustomCode.calculateAll:53
  					s = round(s,2);  // > CustomCode.calculateAll:54
  					display_calculated_values.innerHTML="Acceleration a = " + a + " ms<sup>-2</sup>" +"<br/>"+ "Displacement s = " + s + " m";  // > CustomCode.calculateAll:55
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:56
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known u, v and t values into the equation <br/> <br/> <b>v = u + at</b> <br/> <br/> to get acceleration a = " + a + "ms<sup>-2</sup>.<br/><br/>Now you know u, v, a and t.";  // > CustomCode.calculateAll:57
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get s (final unknown variable) is to substitute u, v and t into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t</b> <br/> <br/> to get displacement s = " + s + "m.";  // > CustomCode.calculateAll:58
  				}  // > CustomCode.calculateAll:59
  				if (ip_initial_ux.value!="" && ip_final_vx.value!="" && ip_final_sx.value!=""){  // > CustomCode.calculateAll:60
  					t = 2*s/(u+v);  // > CustomCode.calculateAll:61
  					a = (v-u)/t;  // > CustomCode.calculateAll:62
  					t = round(t,2);  // > CustomCode.calculateAll:63
  					a = round(a,2);  // > CustomCode.calculateAll:64
  					display_calculated_values.innerHTML="Time t = " + t + " s" +"<br/>"+ "Acceleration a = " + a + " ms<sup>-2</sup>";  // > CustomCode.calculateAll:65
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:66
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known u, v and s values into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t</b> <br/> <br/> to get acceleration t = " + t + "s.<br/><br/>Now you know u, v, s and t.";  // > CustomCode.calculateAll:67
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get a (final unknown variable) is to substitute u, v and t into the equation <br/> <br/> <b>v = u + at</b> <br/> <br/> to get acceleration a = " + a + "ms<sup>-2</sup>.";  // > CustomCode.calculateAll:68
  				}  // > CustomCode.calculateAll:69
  				if (ip_initial_ux.value!="" && ip_ax.value!="" && ip_t_taken.value!=""){  // > CustomCode.calculateAll:70
  					v = u + a*t;  // > CustomCode.calculateAll:71
  					s = 0.5*(u+v)*t;  // > CustomCode.calculateAll:72
  					v = round(v,2);  // > CustomCode.calculateAll:73
  					s = round(s,2);  // > CustomCode.calculateAll:74
  					display_calculated_values.innerHTML="Final velocity v = " + v + " ms<sup>-1</sup>" +"<br/>"+ "Displacement s = " + s + " m";  // > CustomCode.calculateAll:75
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:76
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known u, a and t values into the equation <br/> <br/> <b>v = u + at</b> <br/> <br/> to get final velocity v = " + v + "ms<sup>-1</sup>.<br/><br/>Now you know u, v, a and t.";  // > CustomCode.calculateAll:77
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get s (final unknown variable) is to substitute u, v and t into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t</b> <br/> <br/> to get displacement s = " + s + "m.";  // > CustomCode.calculateAll:78
  				}  // > CustomCode.calculateAll:79
  				if (ip_initial_ux.value!="" && ip_t_taken.value!="" && ip_final_sx.value!=""){  // > CustomCode.calculateAll:80
  					v = 2*s/t - u;  // > CustomCode.calculateAll:81
  					a = (v-u)/t;  // > CustomCode.calculateAll:82
  					v = round(v,2);  // > CustomCode.calculateAll:83
  					a = round(a,2);  // > CustomCode.calculateAll:84
  					display_calculated_values.innerHTML="Final velocity v = " + v + " ms<sup>-1</sup>" +"<br/>"+ "Acceleration a = " + a + " ms<sup>-2</sup>";  // > CustomCode.calculateAll:85
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:86
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known u, t and s values into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t</b> <br/> <br/> to get final velocity v = " + v + "ms<sup>-1</sup>.<br/><br/>Now you know u, v, t and s.";  // > CustomCode.calculateAll:87
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get a (final unknown variable) is to substitute u, v and t into the equation <br/> <br/> <b>v = u + at</b> <br/> <br/> to get acceleration a = " + a + "ms<sup>-2</sup>.";  // > CustomCode.calculateAll:88
  				}  // > CustomCode.calculateAll:89
  				if (ip_final_vx.value!="" && ip_ax.value!="" && ip_t_taken.value!=""){  // > CustomCode.calculateAll:90
  					u = v - a*t;  // > CustomCode.calculateAll:91
  					s = 0.5*(u+v)*t;  // > CustomCode.calculateAll:92
  					u = round(u,2);  // > CustomCode.calculateAll:93
  					s = round(s,2);  // > CustomCode.calculateAll:94
  					display_calculated_values.innerHTML="Initial velocity u = " + u + " ms<sup>-1</sup>" +"<br/>"+ "Displacement s = " + s + " m";  // > CustomCode.calculateAll:95
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:96
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known v, a and t values into the equation <br/> <br/> <b>v = u +at</b> <br/> <br/> to get initial velocity u = " + u + "ms<sup>-1</sup>.<br/><br/>Now you know u, v, a and t.";  // > CustomCode.calculateAll:97
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get s (final unknown variable) is to substitute u, v and t into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t</b> <br/> <br/> to get displacement s = " + s + "m.";  // > CustomCode.calculateAll:98
  				}  // > CustomCode.calculateAll:99
  				if (ip_final_vx.value!="" && ip_t_taken.value!="" && ip_final_sx.value!=""){  // > CustomCode.calculateAll:100
  					u = 2*s/t - v;  // > CustomCode.calculateAll:101
  					a = (v-u)/t;  // > CustomCode.calculateAll:102
  					u = round(u,2);  // > CustomCode.calculateAll:103
  					a = round(a,2);  // > CustomCode.calculateAll:104
  					display_calculated_values.innerHTML="Initial velocity u = " + u + " ms<sup>-1</sup>" +"<br/>"+ "Acceleration a = " + a + " ms<sup>-2</sup>";  // > CustomCode.calculateAll:105
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:106
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known v, t and s values into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t</b> <br/> <br/> to get initial velocity u = " + u + "ms<sup>-1</sup>.<br/><br/>Now you know u, v, t and s.";  // > CustomCode.calculateAll:107
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get a (final unknown variable) is to substitute u, v and t into the equation <br/> <br/> <b>v = u + at</b> <br/> <br/> to get acceleration a = " + a + "ms<sup>-2</sup>.";  // > CustomCode.calculateAll:108
  				}  // > CustomCode.calculateAll:109
  				if (ip_ax.value!="" && ip_t_taken.value!="" && ip_final_sx.value!=""){  // > CustomCode.calculateAll:110
  					u = (s - 0.5*a*t*t)/t;  // > CustomCode.calculateAll:111
  					v = u + a*t;  // > CustomCode.calculateAll:112
  					u = round(u,2);  // > CustomCode.calculateAll:113
  					v = round(v,2);  // > CustomCode.calculateAll:114
  					display_calculated_values.innerHTML="Initial velocity u = " + u + " ms<sup>-1</sup>" +"<br/>"+ "Final velocity v = " + v + " ms<sup>-1</sup>";  // > CustomCode.calculateAll:115
  					display_calculated_values.style.display="inline";  // > CustomCode.calculateAll:116
  					display_explanation_1.innerHTML="<br/> In this case, substitute your known a, t and s values into the equation <br/> <br/> <b>s = ut + <sup>1</sup>/<sub>2</sub> at<sup>2</sup></b> <br/> <br/> to get initial velocity u = " + u + "ms<sup>-1</sup>.<br/><br/>Now you know u, a, t and s.";  // > CustomCode.calculateAll:117
  					display_explanation_2.innerHTML="<br/> In this case, the simplest way to get v (final unknown variable) is to substitute u, a and t into the equation <br/> <br/> <b>v = u + at</b> <br/> <br/> to get final velocity v = " + v + "ms<sup>-1</sup>.";  // > CustomCode.calculateAll:118
  				}  // > CustomCode.calculateAll:119
  				if (ip_initial_ux.value!="" && ip_ax.value!="" && ip_final_sx.value!="" && !ip_t_taken.value!=""){  // > CustomCode.calculateAll:120
  					if ((u*u + 2*a*s) < 0){  // > CustomCode.calculateAll:121
  						errorEvent();  // > CustomCode.calculateAll:122
  					}  // > CustomCode.calculateAll:123
  					else {  // > CustomCode.calculateAll:124
  						v_pos = Math.abs(Math.sqrt(u*u + 2*a*s));  // > CustomCode.calculateAll:125
  						v_neg = -v_pos;  // > CustomCode.calculateAll:126
  						t1 = 2*s/(u+v_pos);  // > CustomCode.calculateAll:127
  						t2 = 2*s/(u+v_neg);  // > CustomCode.calculateAll:128
  						//solution_checkboxes.style.display="inline";  // > CustomCode.calculateAll:129
  						show_uas_vas_solution();  // > CustomCode.calculateAll:130
  					}  // > CustomCode.calculateAll:131
  					  // > CustomCode.calculateAll:132
  				}  // > CustomCode.calculateAll:133
  				if (ip_final_vx.value!="" && ip_ax.value!="" && ip_final_sx.value!="" && !ip_t_taken.value!=""){  // > CustomCode.calculateAll:134
  					if ((v*v - 2*a*s) < 0){  // > CustomCode.calculateAll:135
  						errorEvent();  // > CustomCode.calculateAll:136
  					}  // > CustomCode.calculateAll:137
  					else {  // > CustomCode.calculateAll:138
  						u_pos = Math.abs(Math.sqrt(v*v - 2*a*s));  // > CustomCode.calculateAll:139
  						u_neg = -u_pos;  // > CustomCode.calculateAll:140
  						t1 = 2*s/(u_pos+v);  // > CustomCode.calculateAll:141
  						t2 = 2*s/(u_neg+v);  // > CustomCode.calculateAll:142
  						//solution_checkboxes.style.display="inline";  // > CustomCode.calculateAll:143
  						show_uas_vas_solution();  // > CustomCode.calculateAll:144
  					}  // > CustomCode.calculateAll:145
  					  // > CustomCode.calculateAll:146
  				}  // > CustomCode.calculateAll:147
  				  // > CustomCode.calculateAll:148
  				  // > CustomCode.calculateAll:149
  				  // > CustomCode.calculateAll:150
  				if (!(ip_initial_ux.value!="" && ip_ax.value!="" && ip_final_sx.value!="") && !(ip_final_vx.value!="" && ip_ax.value!="" && ip_final_sx.value!="")){  // > CustomCode.calculateAll:151
  					display_calculated_values.innerHTML+="<br/><br/>"  // > CustomCode.calculateAll:152
  					display_explanation_2.innerHTML+="<br/><br/>"  // > CustomCode.calculateAll:153
  					solution_header.style.display="inline";  // > CustomCode.calculateAll:154
  					display_explanation_header.style.display="inline";  // > CustomCode.calculateAll:155
  					display_explanation_middle.style.display="inline";  // > CustomCode.calculateAll:156
  					display_explanation_1.style.display="inline";  // > CustomCode.calculateAll:157
  					display_explanation_2.style.display="inline";  // > CustomCode.calculateAll:158
  					//start_animation_and_draw_graph();  // > CustomCode.calculateAll:159
  					  // > CustomCode.calculateAll:160
  				}  // > CustomCode.calculateAll:161
  				  // > CustomCode.calculateAll:162
  			  t_taken = round(t,2);  // > CustomCode.calculateAll:163
  			  // > CustomCode.calculateAll:164
  			  // to start animation  // > CustomCode.calculateAll:165
  			  t_current=0;  // > CustomCode.calculateAll:166
  			  ax = round(a,2);  // > CustomCode.calculateAll:167
  			  vx = round(u,2);  // > CustomCode.calculateAll:168
  			  dt = t_taken/100;  // > CustomCode.calculateAll:169
  			  sx = 0;  // > CustomCode.calculateAll:170
  			  //_view.resetElements();  // > CustomCode.calculateAll:171
  			    // > CustomCode.calculateAll:172
  			    // > CustomCode.calculateAll:173
  			  v_max_t = t_taken ;  // > CustomCode.calculateAll:174
  			  s_max_t = t_taken ;  // > CustomCode.calculateAll:175
  			  final_vx = round(v,2);			    // > CustomCode.calculateAll:176
  			  initial_ux = round(u,2);  // > CustomCode.calculateAll:177
  			  final_sx = round(s,2);  // > CustomCode.calculateAll:178
  			  display_solution();  // > CustomCode.calculateAll:179
  			  generate_description();   // > CustomCode.calculateAll:180
  			  start_animation_and_draw_graph();  // > CustomCode.calculateAll:181
  			     // > CustomCode.calculateAll:182
  			}  // > CustomCode.calculateAll:183
  			  // > CustomCode.calculateAll:184
                // > CustomCode.calculateAll:185
          }  // > CustomCode.calculateAll:186

  function display_solution () {  // > CustomCode.display_solution:1
    solution_header.visible = "true";  // > CustomCode.display_solution:2
  }  // > CustomCode.display_solution:3

  function start_animation () {  // > CustomCode.start_animation:1
    vx = initial_ux;  // > CustomCode.start_animation:2
  }  // > CustomCode.start_animation:3

  		function start_animation_and_draw_graph(){  // > CustomCode.start_animation_and_draw_graph:1
  		        //u = initial_ux ;  // > CustomCode.start_animation_and_draw_graph:2
  			//v = final_vx ;  // > CustomCode.start_animation_and_draw_graph:3
  			//a = ax;		  // > CustomCode.start_animation_and_draw_graph:4
  			//t = t_taken;  // > CustomCode.start_animation_and_draw_graph:5
  			//s = final_sx;  // > CustomCode.start_animation_and_draw_graph:6
  			   // > CustomCode.start_animation_and_draw_graph:7
  			  // > CustomCode.start_animation_and_draw_graph:8
  					// find max and min values to scale animation and graph   // > CustomCode.start_animation_and_draw_graph:9
  					  // > CustomCode.start_animation_and_draw_graph:10
  					if (u*v<0){  // > CustomCode.start_animation_and_draw_graph:11
  						abs_max_displacement = Math.max(Math.abs(s),Math.abs(u*u/(2*a)));  // > CustomCode.start_animation_and_draw_graph:12
  						max_displacement = Math.max(s,-(u*u/(2*a)));  // > CustomCode.start_animation_and_draw_graph:13
  						min_displacement = Math.min(s,-(u*u/(2*a)));  // > CustomCode.start_animation_and_draw_graph:14
  						  // > CustomCode.start_animation_and_draw_graph:15
  						if (s>0 && -(u*u/(2*a))>0)  // > CustomCode.start_animation_and_draw_graph:16
  						{  // > CustomCode.start_animation_and_draw_graph:17
  							min_displacement = 0;  // > CustomCode.start_animation_and_draw_graph:18
  						}  // > CustomCode.start_animation_and_draw_graph:19
  						if (s<0 && -(u*u/(2*a))<0)  // > CustomCode.start_animation_and_draw_graph:20
  						{  // > CustomCode.start_animation_and_draw_graph:21
  							max_displacement = 0;  // > CustomCode.start_animation_and_draw_graph:22
  						}  // > CustomCode.start_animation_and_draw_graph:23
  					}  // > CustomCode.start_animation_and_draw_graph:24
  					else {  // > CustomCode.start_animation_and_draw_graph:25
  						abs_max_displacement = Math.abs(s);  // > CustomCode.start_animation_and_draw_graph:26
  						if (s<0){  // > CustomCode.start_animation_and_draw_graph:27
  							max_displacement = 0;  // > CustomCode.start_animation_and_draw_graph:28
  							min_displacement = s;  // > CustomCode.start_animation_and_draw_graph:29
  						}  // > CustomCode.start_animation_and_draw_graph:30
  						else if (s>0){  // > CustomCode.start_animation_and_draw_graph:31
  							max_displacement = s;  // > CustomCode.start_animation_and_draw_graph:32
  							min_displacement = 0;					  // > CustomCode.start_animation_and_draw_graph:33
  						}  // > CustomCode.start_animation_and_draw_graph:34
  						  // > CustomCode.start_animation_and_draw_graph:35
  						else if (s>0){  // > CustomCode.start_animation_and_draw_graph:36
  							max_displacement = 0;  // > CustomCode.start_animation_and_draw_graph:37
  							min_displacement = 0;					  // > CustomCode.start_animation_and_draw_graph:38
  						}  // > CustomCode.start_animation_and_draw_graph:39
  					}  // > CustomCode.start_animation_and_draw_graph:40
  					max_velocity = Math.max(u,v);  // > CustomCode.start_animation_and_draw_graph:41
  					min_velocity = Math.min(u,v);  // > CustomCode.start_animation_and_draw_graph:42
  				    if (u>0 && v>0)  // > CustomCode.start_animation_and_draw_graph:43
  						{  // > CustomCode.start_animation_and_draw_graph:44
  							min_velocity = 0;  // > CustomCode.start_animation_and_draw_graph:45
  					}  // > CustomCode.start_animation_and_draw_graph:46
  					if (u<0 && v<0)  // > CustomCode.start_animation_and_draw_graph:47
  						{  // > CustomCode.start_animation_and_draw_graph:48
  							max_velocity = 0;  // > CustomCode.start_animation_and_draw_graph:49
  					}  // > CustomCode.start_animation_and_draw_graph:50
  					if (t<0) {  // > CustomCode.start_animation_and_draw_graph:51
  						display_solution_not_valid.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:52
  						animation_current_status.innerHTML="Invalid solution! Time t lower than 0.";  // > CustomCode.start_animation_and_draw_graph:53
  						animation_current_status.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:54
  						alert("SOLUTION NOT VALID AS TIME t < 0. Steps for calculating this are still shown for reference but remember this is not a valid solution so please check your entered values again.");  // > CustomCode.start_animation_and_draw_graph:55
  					}  // > CustomCode.start_animation_and_draw_graph:56
  					else if (isNaN(t)) {  // > CustomCode.start_animation_and_draw_graph:57
  						//display_solution_not_valid.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:58
  						animation_current_status.innerHTML="Invalid solution!";  // > CustomCode.start_animation_and_draw_graph:59
  						animation_current_status.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:60
  						alert("No valid solution found. Please check values and enter again.");  // > CustomCode.start_animation_and_draw_graph:61
  						_reset();  // > CustomCode.start_animation_and_draw_graph:62
  					}  // > CustomCode.start_animation_and_draw_graph:63
  					else if (isNaN(v)) {  // > CustomCode.start_animation_and_draw_graph:64
  						//display_solution_not_valid.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:65
  						animation_current_status.innerHTML="Invalid solution. No animation.";  // > CustomCode.start_animation_and_draw_graph:66
  						animation_current_status.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:67
  						alert("No valid solution found. Please check values and enter again.");  // > CustomCode.start_animation_and_draw_graph:68
  						_reset();  // > CustomCode.start_animation_and_draw_graph:69
  					}  // > CustomCode.start_animation_and_draw_graph:70
  					else if (isNaN(u)) {  // > CustomCode.start_animation_and_draw_graph:71
  						display_solution_not_valid.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:72
  						animation_current_status.innerHTML="Invalid solution!";  // > CustomCode.start_animation_and_draw_graph:73
  						alert("No valid solution found. Please check values and enter again.");  // > CustomCode.start_animation_and_draw_graph:74
  						resetAll();  // > CustomCode.start_animation_and_draw_graph:75
  					}  // > CustomCode.start_animation_and_draw_graph:76
  					else if (isNaN(a)) {  // > CustomCode.start_animation_and_draw_graph:77
  						display_solution_not_valid.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:78
  						animation_current_status.innerHTML="Invalid solution!";  // > CustomCode.start_animation_and_draw_graph:79
  						animation_current_status.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:80
  						alert("No valid solution found. Please check values and enter again.");  // > CustomCode.start_animation_and_draw_graph:81
  						_reset();  // > CustomCode.start_animation_and_draw_graph:82
  					}  // > CustomCode.start_animation_and_draw_graph:83
  					else if (isNaN(s)) {  // > CustomCode.start_animation_and_draw_graph:84
  						//display_solution_not_valid.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:85
  						animation_current_status.innerHTML="Invalid solution!";  // > CustomCode.start_animation_and_draw_graph:86
  						animation_current_status.style.display="inline";  // > CustomCode.start_animation_and_draw_graph:87
  						alert("No valid solution found. Please check values and enter again.");  // > CustomCode.start_animation_and_draw_graph:88
  						_reset();  // > CustomCode.start_animation_and_draw_graph:89
  					}  // > CustomCode.start_animation_and_draw_graph:90
  					else{  // > CustomCode.start_animation_and_draw_graph:91
  						// solution_header.innerHTML = max_displacement + "," + min_displacement; // remove after debugging  // > CustomCode.start_animation_and_draw_graph:92
  						//start_animation();  // > CustomCode.start_animation_and_draw_graph:93
  						  // > CustomCode.start_animation_and_draw_graph:94
  					}  // > CustomCode.start_animation_and_draw_graph:95
  		}  // > CustomCode.start_animation_and_draw_graph:96
  		  // > CustomCode.start_animation_and_draw_graph:97

  function generate_description() {  // > CustomCode.generate_description:1
                  u = initial_ux ;  // > CustomCode.generate_description:2
  		v = final_vx ;  // > CustomCode.generate_description:3
  		a = ax;		  // > CustomCode.generate_description:4
  		t = t_taken;  // > CustomCode.generate_description:5
  		s = final_sx;  // > CustomCode.generate_description:6
  		  // > CustomCode.generate_description:7
  		  // > CustomCode.generate_description:8
  			if (u>0){  // > CustomCode.generate_description:9
  				initial_velocity_direction="moving to the right/upwards";  // > CustomCode.generate_description:10
  			}  // > CustomCode.generate_description:11
  			else if (u<0){  // > CustomCode.generate_description:12
  				initial_velocity_direction="moving to the left/downwards";  // > CustomCode.generate_description:13
  			}  // > CustomCode.generate_description:14
  			else if (u==0){  // > CustomCode.generate_description:15
  				initial_velocity_direction="at rest";  // > CustomCode.generate_description:16
  			}  // > CustomCode.generate_description:17
  			if (u>0){  // > CustomCode.generate_description:18
  				initial_velocity_sign="positive";  // > CustomCode.generate_description:19
  			}  // > CustomCode.generate_description:20
  			else if (u<0){  // > CustomCode.generate_description:21
  				initial_velocity_sign="negative";  // > CustomCode.generate_description:22
  			}  // > CustomCode.generate_description:23
  			else if (u==0){  // > CustomCode.generate_description:24
  				initial_velocity_sign="zero";  // > CustomCode.generate_description:25
  			}  // > CustomCode.generate_description:26
  			if (v>0){  // > CustomCode.generate_description:27
  				final_velocity_direction="moving to the right/upwards";  // > CustomCode.generate_description:28
  			}  // > CustomCode.generate_description:29
  			else if (v<0){  // > CustomCode.generate_description:30
  				final_velocity_direction="moving to the left/downwards";  // > CustomCode.generate_description:31
  			}  // > CustomCode.generate_description:32
  			else if (v==0){  // > CustomCode.generate_description:33
  				final_velocity_direction="at rest";  // > CustomCode.generate_description:34
  			}  // > CustomCode.generate_description:35
  			if (v>0){  // > CustomCode.generate_description:36
  				final_velocity_sign="positive";  // > CustomCode.generate_description:37
  			}  // > CustomCode.generate_description:38
  			else if (v<0){  // > CustomCode.generate_description:39
  				final_velocity_sign="negative";  // > CustomCode.generate_description:40
  			}  // > CustomCode.generate_description:41
  			else if (v==0){  // > CustomCode.generate_description:42
  				final_velocity_sign="0";  // > CustomCode.generate_description:43
  			}  // > CustomCode.generate_description:44
  			if (a*u>0 || u==0){  // > CustomCode.generate_description:45
  				decelerate_accelerate="accelerates all the way till the current time (and is still accelerating)";  // > CustomCode.generate_description:46
  			}  // > CustomCode.generate_description:47
  			else if (a*u<0){  // > CustomCode.generate_description:48
  				decelerate_accelerate="decelerates";  // > CustomCode.generate_description:49
  			}  // > CustomCode.generate_description:50
  			else if (a==0){  // > CustomCode.generate_description:51
  				decelerate_accelerate="continues to moves with uniform velocity";  // > CustomCode.generate_description:52
  			}  // > CustomCode.generate_description:53
  			if (a*u>0){  // > CustomCode.generate_description:54
  				acceleration_u_opp_same_sign="of the same sign as u, hence same direction as u";  // > CustomCode.generate_description:55
  			}  // > CustomCode.generate_description:56
  			else if (u==0){  // > CustomCode.generate_description:57
  				acceleration_u_opp_same_sign="not considered for this (i.e. we do not care about its sign) as object starts from rest so it cannot be decelerating";  // > CustomCode.generate_description:58
  			}  // > CustomCode.generate_description:59
  			else if (a*u<0){  // > CustomCode.generate_description:60
  				acceleration_u_opp_same_sign="of opposite sign compared to u, hence opposite direction compared to u";  // > CustomCode.generate_description:61
  			}  // > CustomCode.generate_description:62
  			else if (a==0){  // > CustomCode.generate_description:63
  				acceleration_u_opp_same_sign="0";  // > CustomCode.generate_description:64
  			}  // > CustomCode.generate_description:65
  			if (v*u>0){  // > CustomCode.generate_description:66
  				v_u_opp_same_sign="of the same sign as u, hence same direction as u";  // > CustomCode.generate_description:67
  			}  // > CustomCode.generate_description:68
  			else if (v*u<0){  // > CustomCode.generate_description:69
  				v_u_opp_same_sign="of opposite sign compared to u, hence opposite direction compared to u";  // > CustomCode.generate_description:70
  			}  // > CustomCode.generate_description:71
  			else if (v==0){  // > CustomCode.generate_description:72
  				v_u_opp_same_sign="0";  // > CustomCode.generate_description:73
  			}  // > CustomCode.generate_description:74
  			motion_description1.innerHTML="Object is initially "+ initial_velocity_direction + ".";  // > CustomCode.generate_description:75
  			motion_description1a.innerHTML="Object is initially "+ initial_velocity_direction + ".";  // > CustomCode.generate_description:76
  			motion_inference1.innerHTML="Initial velocity u is "+ initial_velocity_sign + ".";  // > CustomCode.generate_description:77
  			motion_description2.innerHTML="It then "+ decelerate_accelerate + ".";  // > CustomCode.generate_description:78
  			motion_description2a.innerHTML="It then "+ decelerate_accelerate + ".";  // > CustomCode.generate_description:79
  			motion_inference2.innerHTML="Acceleration a is "+ acceleration_u_opp_same_sign + ".";  // > CustomCode.generate_description:80
  			  // > CustomCode.generate_description:81
  			if (a*u<0){  // > CustomCode.generate_description:82
  				if(v*u<0){  // > CustomCode.generate_description:83
  				        rest_time = round(-u/a,2);  // > CustomCode.generate_description:84
  					motion_description3.innerHTML="It slows down until it is momentarily at rest (velocity 0) at t = " + rest_time + " s before it changes direction and starts " + final_velocity_direction + ", before arriving at the current location at this current time t.";  // > CustomCode.generate_description:85
  					motion_description3a.innerHTML="It slows down until it is momentarily at rest (velocity 0) at t = " + rest_time + " s before it changes direction and starts " + final_velocity_direction + ", before arriving at the current location at this current time t.";  // > CustomCode.generate_description:86
  				}  // > CustomCode.generate_description:87
  				if(v*u>0){  // > CustomCode.generate_description:88
  					motion_description3.innerHTML="At the current time t, it is slowing down (decelerating) but still moving in the same direction as its initial velocity.";  // > CustomCode.generate_description:89
  					motion_description3a.innerHTML="At the current time t, it is slowing down (decelerating) but still moving in the same direction as its initial velocity.";  // > CustomCode.generate_description:90
  				}  // > CustomCode.generate_description:91
  				if(v==0){  // > CustomCode.generate_description:92
  					motion_description3.innerHTML="It has come to rest at the current time t. (Note that right after this t it will start moving in the opposite direction.)";  // > CustomCode.generate_description:93
  					motion_description3a.innerHTML="It has come to rest at the current time t. (Note that right after this t it will start moving in the opposite direction.)";  // > CustomCode.generate_description:94
  				}  // > CustomCode.generate_description:95
  				motion_inference3.innerHTML="Final velocity v is "+ v_u_opp_same_sign + ".";  // > CustomCode.generate_description:96
  			}  // > CustomCode.generate_description:97
  			else {  // > CustomCode.generate_description:98
  				motion_description3.innerHTML="";  // > CustomCode.generate_description:99
  				motion_description3a.innerHTML="";  // > CustomCode.generate_description:100
  				motion_inference3.innerHTML="";  // > CustomCode.generate_description:101
  			}  // > CustomCode.generate_description:102
  			  // > CustomCode.generate_description:103
  			motion_description3.innerHTML+="<br/><br/>";  // > CustomCode.generate_description:104
  			motion_description1.style.display="inline";  // > CustomCode.generate_description:105
                          motion_description2.style.display="inline";  // > CustomCode.generate_description:106
                          motion_description3.style.display="inline";  // > CustomCode.generate_description:107
                          inference.style.display="inline";  // > CustomCode.generate_description:108
  			//inference_of_motion.style.display="inline";  // > CustomCode.generate_description:109
  			  // > CustomCode.generate_description:110
  			  // > CustomCode.generate_description:111
  			  // > CustomCode.generate_description:112
  		}  // > CustomCode.generate_description:113
  		  // > CustomCode.generate_description:114

  function round(value, decimals) {  // > CustomCode.round:1
    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);  // > CustomCode.round:2
  }  // > CustomCode.round:3

  function errorEvent() {  // > CustomCode.errorEvent:1
  			alert("Error, solution cannot be calculated. This case may not be valid. Please reset and re-enter values.");  // > CustomCode.errorEvent:2
  			_reset();  // > CustomCode.errorEvent:3
  			  // > CustomCode.errorEvent:4
  		}  // > CustomCode.errorEvent:5

  		function show_uas_vas_solution() {  // > CustomCode.show_uas_vas_solution:1
  			//toggle_solution.style.display="inline";  // > CustomCode.show_uas_vas_solution:2
  			//u = initial_ux ;  // > CustomCode.show_uas_vas_solution:3
  			//v = final_vx ;  // > CustomCode.show_uas_vas_solution:4
  			//a = ax;		  // > CustomCode.show_uas_vas_solution:5
  			//t = t_taken;  // > CustomCode.show_uas_vas_solution:6
  			//s = final_sx;  // > CustomCode.show_uas_vas_solution:7
  			  // > CustomCode.show_uas_vas_solution:8
  			if (ip_initial_ux.value!="" && ip_ax.value!="" && ip_final_sx.value!="" && !ip_t_taken.value!=""){  // > CustomCode.show_uas_vas_solution:9
  				display_2_solutions_v_notice.style.display="inline";  // > CustomCode.show_uas_vas_solution:10
  				if (solution1==true){  // > CustomCode.show_uas_vas_solution:11
  					v = round(v_pos,2);  // > CustomCode.show_uas_vas_solution:12
  					t = round(t1,2);  // > CustomCode.show_uas_vas_solution:13
  				}  // > CustomCode.show_uas_vas_solution:14
  				else if (solution2==true){  // > CustomCode.show_uas_vas_solution:15
  					v = round(v_neg,2);  // > CustomCode.show_uas_vas_solution:16
  					t = round(t2,2);  // > CustomCode.show_uas_vas_solution:17
  				}  // > CustomCode.show_uas_vas_solution:18
  				if (t1>=0 && t2>=0){  // > CustomCode.show_uas_vas_solution:19
  				//display_2_v_t_interpretation.style.display="inline";  // > CustomCode.show_uas_vas_solution:20
  				}  // > CustomCode.show_uas_vas_solution:21
  				else {  // > CustomCode.show_uas_vas_solution:22
  				//display_2_v_t_interpretation.style.display="none";  // > CustomCode.show_uas_vas_solution:23
  				}  // > CustomCode.show_uas_vas_solution:24
  				display_calculated_values.innerHTML="Final velocity v = " + v + "ms<sup>-1</sup>" +"<br/>"+ "Time t = " + t + "s";  // > CustomCode.show_uas_vas_solution:25
  				display_calculated_values.style.display="inline";  // > CustomCode.show_uas_vas_solution:26
  				display_explanation_1.innerHTML="In this case, substitute your known u, a and s values into the equation <br/> <br/> <b>v<sup>2</sup> = u<sup>2</sup> + 2as <br/></b> <br/> <br/> to get final velocity v = " + v + "ms<sup>-1</sup>.<br/><br/>Now you know u, v, a and s.";  // > CustomCode.show_uas_vas_solution:27
  				if (t<0){  // > CustomCode.show_uas_vas_solution:28
  					display_explanation_2.innerHTML="In this case, the simplest way to get t (final unknown variable) is to substitute u, v and s into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t<br/></b> <br/> <br/> to get time t = " + t + "s. Since time is negative solution is invalid. REJECT THIS VALUE OF v AND t.";  // > CustomCode.show_uas_vas_solution:29
  				}  // > CustomCode.show_uas_vas_solution:30
  				else{  // > CustomCode.show_uas_vas_solution:31
  					display_explanation_2.innerHTML="In this case, the simplest way to get t (final unknown variable) is to substitute u, v and s into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t<br/></b> <br/> <br/> to get time t = " + t + "s.";  // > CustomCode.show_uas_vas_solution:32
  				}  // > CustomCode.show_uas_vas_solution:33
  			}  // > CustomCode.show_uas_vas_solution:34
  			else if (ip_final_vx.value!="" && ip_ax.value!="" && ip_final_sx.value!="" && !ip_t_taken.value!=""){  // > CustomCode.show_uas_vas_solution:35
  				display_2_solutions_u_notice.style.display="inline";  // > CustomCode.show_uas_vas_solution:36
  				if (solution1==true){  // > CustomCode.show_uas_vas_solution:37
  					u = round(u_pos,2);  // > CustomCode.show_uas_vas_solution:38
  					t = round(t1,2);  // > CustomCode.show_uas_vas_solution:39
  				}  // > CustomCode.show_uas_vas_solution:40
  				else if (solution2==true){  // > CustomCode.show_uas_vas_solution:41
  					u = round(u_neg,2);  // > CustomCode.show_uas_vas_solution:42
  					t = round(t2,2);  // > CustomCode.show_uas_vas_solution:43
  				}  // > CustomCode.show_uas_vas_solution:44
  			  // > CustomCode.show_uas_vas_solution:45
  				if (t1>=0 && t2>=0){  // > CustomCode.show_uas_vas_solution:46
  				//display_2_u_t_interpretation.style.display="inline";  // > CustomCode.show_uas_vas_solution:47
  				}  // > CustomCode.show_uas_vas_solution:48
  				else {  // > CustomCode.show_uas_vas_solution:49
  				//display_2_u_t_interpretation.style.display="none";  // > CustomCode.show_uas_vas_solution:50
  				}  // > CustomCode.show_uas_vas_solution:51
  				display_calculated_values.innerHTML="Initial velocity u = " + u + "ms<sup>-1</sup>" +"<br/>"+ "Time t = " + t + "s";  // > CustomCode.show_uas_vas_solution:52
  				display_calculated_values.style.display="inline";  // > CustomCode.show_uas_vas_solution:53
  				display_explanation_1.innerHTML="In this case, substitute your known v, a and s values into the equation <br/> <br/> <b>v<sup>2</sup> = u<sup>2</sup> + 2as <br/></b> <br/> <br/> to get initial velocity u = " + u + "ms<sup>-1</sup>.<br/><br/>Now you know u, v, a and s.";  // > CustomCode.show_uas_vas_solution:54
  				if (t<0){  // > CustomCode.show_uas_vas_solution:55
  					display_explanation_2.innerHTML="In this case, the simplest way to get t (final unknown variable) is to substitute u, v and s into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t<br/></b> <br/> <br/> to get time t = " + t + "s. Since time is negative solution is invalid. REJECT THIS VALUE OF v AND t.";  // > CustomCode.show_uas_vas_solution:56
  				}  // > CustomCode.show_uas_vas_solution:57
  				else{  // > CustomCode.show_uas_vas_solution:58
  					display_explanation_2.innerHTML="In this case, the simplest way to get t (final unknown variable) is to substitute u, v and s into the equation <br/> <br/> <b>s = <sup>1</sup>/<sub>2</sub> (u+v) t<br/></b> <br/> <br/> to get time t = " + t + "s.";  // > CustomCode.show_uas_vas_solution:59
  				}  // > CustomCode.show_uas_vas_solution:60
  			}  // > CustomCode.show_uas_vas_solution:61
  				solution_header.style.display="inline";  // > CustomCode.show_uas_vas_solution:62
  				display_explanation_header.style.display="inline";  // > CustomCode.show_uas_vas_solution:63
  				display_explanation_middle.style.display="inline";				  // > CustomCode.show_uas_vas_solution:64
  				display_explanation_1.style.display="inline";  // > CustomCode.show_uas_vas_solution:65
  				display_explanation_2.style.display="inline";  // > CustomCode.show_uas_vas_solution:66
  				  // > CustomCode.show_uas_vas_solution:67
  				  t_taken = round(t,2);  // > CustomCode.show_uas_vas_solution:68
  			  // > CustomCode.show_uas_vas_solution:69
  			  // to start animation  // > CustomCode.show_uas_vas_solution:70
  			  t_current=0;  // > CustomCode.show_uas_vas_solution:71
  			  ax = round(a,2);  // > CustomCode.show_uas_vas_solution:72
  			  vx = round(u,2);  // > CustomCode.show_uas_vas_solution:73
  			  dt = t_taken/100;  // > CustomCode.show_uas_vas_solution:74
  			  sx = 0;  // > CustomCode.show_uas_vas_solution:75
  			    // > CustomCode.show_uas_vas_solution:76
  			  v_max_t = t_taken ;  // > CustomCode.show_uas_vas_solution:77
  			  s_max_t = t_taken ;  // > CustomCode.show_uas_vas_solution:78
  			  final_vx = round(v,2);			    // > CustomCode.show_uas_vas_solution:79
  			  initial_ux = round(u,2);  // > CustomCode.show_uas_vas_solution:80
  			  final_sx = round(s,2);  // > CustomCode.show_uas_vas_solution:81
  			    // > CustomCode.show_uas_vas_solution:82
  				  // > CustomCode.show_uas_vas_solution:83
  				start_animation_and_draw_graph();  // > CustomCode.show_uas_vas_solution:84
  				_play();  // > CustomCode.show_uas_vas_solution:85
  				ip_t_taken.value="";  // > CustomCode.show_uas_vas_solution:86
  				//t = "";  // > CustomCode.show_uas_vas_solution:87
  				  // > CustomCode.show_uas_vas_solution:88
  		}  // > CustomCode.show_uas_vas_solution:89

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    Http = new XMLHttpRequest();  // > Initialization.Init Page:1
    horizontal_animation = document.getElementById("horizontal_animation");  // > Initialization.Init Page:2
    vertical_animation = document.getElementById("vertical_animation");  // > Initialization.Init Page:3
    vertical_animation.style.display="none";  // > Initialization.Init Page:4
    run_pause = document.getElementById("runPauseButton");  // > Initialization.Init Page:5
    run_pause.style.display="none";  // > Initialization.Init Page:6
    animation_current_status = document.getElementById("animation_current_status");  // > Initialization.Init Page:7
    animation_current_status.style.display="none";  // > Initialization.Init Page:8
    solution_1 = document.getElementById("solution_1");  // > Initialization.Init Page:9
    solution_2 = document.getElementById("solution_2");  // > Initialization.Init Page:10
    toggle_solution = document.getElementById("toggle_solution");  // > Initialization.Init Page:11
    toggle_solution.style.display="none";  // > Initialization.Init Page:12
    ip_initial_ux = document.getElementById("initial_ux");  // > Initialization.Init Page:13
    ip_final_vx = document.getElementById("final_vx");  // > Initialization.Init Page:14
    ip_ax = document.getElementById("ax");  // > Initialization.Init Page:15
    ip_t_taken = document.getElementById("t_taken");  // > Initialization.Init Page:16
    ip_final_sx = document.getElementById("final_sx");  // > Initialization.Init Page:17
    solution_header = document.getElementById("solution_header");  // > Initialization.Init Page:18
    display_calculated_values = document.getElementById("display_calculated_values");  // > Initialization.Init Page:19
    display_explanation_header = document.getElementById("display_explanation_header");  // > Initialization.Init Page:20
    display_explanation_1 = document.getElementById("display_explanation_1");  // > Initialization.Init Page:21
    display_explanation_middle = document.getElementById("display_explanation_middle");  // > Initialization.Init Page:22
    display_explanation_2 = document.getElementById("display_explanation_2");  // > Initialization.Init Page:23
    display_solution_not_valid = document.getElementById("display_solution_not_valid");  // > Initialization.Init Page:24
    display_2_solutions_u_notice = document.getElementById("display_2_solutions_u_notice");  // > Initialization.Init Page:25
    display_2_solutions_v_notice = document.getElementById("display_2_solutions_v_notice");  // > Initialization.Init Page:26
    display_2_u_t_interpretation = document.getElementById("display_2_u_t_interpretation");  // > Initialization.Init Page:27
    display_2_v_t_interpretation = document.getElementById("display_2_v_t_interpretation");  // > Initialization.Init Page:28
    //solution_header.style.display="none";  // > Initialization.Init Page:29
    display_calculated_values.style.display="none";  // > Initialization.Init Page:30
    display_explanation_header.style.display="none";  // > Initialization.Init Page:31
    display_explanation_1.style.display="none";  // > Initialization.Init Page:32
    display_explanation_middle.style.display="none";  // > Initialization.Init Page:33
    display_explanation_2.style.display="none";  // > Initialization.Init Page:34
    display_solution_not_valid.style.display="none";  // > Initialization.Init Page:35
    display_2_solutions_u_notice.style.display="none";  // > Initialization.Init Page:36
    display_2_solutions_v_notice.style.display="none";  // > Initialization.Init Page:37
    display_2_u_t_interpretation.style.display="none";  // > Initialization.Init Page:38
    display_2_v_t_interpretation.style.display="none";  // > Initialization.Init Page:39
    motion_description1 = document.getElementById("motion_description1");  // > Initialization.Init Page:40
    motion_description2 = document.getElementById("motion_description2");  // > Initialization.Init Page:41
    motion_description3 = document.getElementById("motion_description3");  // > Initialization.Init Page:42
    motion_description1.style.display="none";  // > Initialization.Init Page:43
    motion_description2.style.display="none";  // > Initialization.Init Page:44
    motion_description3.style.display="none";  // > Initialization.Init Page:45
    motion_description1a = document.getElementById("motion_description1a");  // > Initialization.Init Page:46
    motion_description2a = document.getElementById("motion_description2a");  // > Initialization.Init Page:47
    motion_description3a = document.getElementById("motion_description3a");  // > Initialization.Init Page:48
    motion_inference1 = document.getElementById("motion_inference1");  // > Initialization.Init Page:49
    motion_inference2 = document.getElementById("motion_inference2");  // > Initialization.Init Page:50
    motion_inference3 = document.getElementById("motion_inference3");  // > Initialization.Init Page:51
    inference_table = document.getElementById("inference_table");  // > Initialization.Init Page:52
    inference = document.getElementById("inference");  // > Initialization.Init Page:53
    solution_header.style.display="inline";  // > Initialization.Init Page:54
    display_explanation_header.style.display="inline";  // > Initialization.Init Page:55
    display_explanation_middle.style.display="none";  // > Initialization.Init Page:56
    display_explanation_1.style.display="inline";  // > Initialization.Init Page:57
    display_explanation_2.style.display="inline";  // > Initialization.Init Page:58
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["kinematics_evolution"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="kinematics_evolution") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.cashKarp45;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["sx","vx","t_current"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=sx) __mustReinitialize = true;
        __state[__cIn++] = sx;
        if (__state[__cIn]!=vx) __mustReinitialize = true;
        __state[__cIn++] = vx;
        if (__state[__cIn]!=t_current) __mustReinitialize = true;
        __state[__cIn++] = t_current;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        sx = __state[__cOut++];
        vx = __state[__cOut++];
        t_current = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var sx = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var t_current = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vx; // Rate for ODE: kinematics_evolution:sx
        _aRate[__cRate++] = ax; // Rate for ODE: kinematics_evolution:vx
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var sx = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var t_current = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        sx = __state[__cOut++];
        vx = __state[__cOut++];
        t_current = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = sx;
        __state[__cIn++] = vx;
        __state[__cIn++] = t_current;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var sx = _aState[__cOut++];
        var vx = _aState[__cOut++];
        var t_current = _aState[__cOut++];
        return t_taken - t_current;  // > Event zero-condition for page kinematics_evolution:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        sx = __state[__cOut++];
        vx = __state[__cOut++];
        t_current = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = sx;
        __state[__cIn++] = vx;
        __state[__cIn++] = t_current;
        return _returnValue;
      };

      function __userDefinedAction() {
        //alert("Trigger to stop");  // > Event action for page kinematics_evolution:1
        _pause();  // > Event action for page kinematics_evolution:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_sx(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vx(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new kinematics_new_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.controlPanel.linkProperty("Width",  function() { return ""+window.innerWidth*0.9; } ); // HtmlView Page linking property 'Width' for element 'controlPanel'
          _view.initial_ux.linkProperty("Value",  function() { return initial_ux; }, function(_v) { initial_ux = _v; } ); // HtmlView Page linking property 'Value' for element 'initial_ux'
          _view.initial_ux.setAction("OnChange", function(_data,_info) {
  set_values();
  get_number_input_parameters();
  number_filled_3();

}); // HtmlView Page setting action 'OnChange' for element 'initial_ux'
          _view.final_vx.linkProperty("Value",  function() { return final_vx; }, function(_v) { final_vx = _v; } ); // HtmlView Page linking property 'Value' for element 'final_vx'
          _view.final_vx.setAction("OnChange", function(_data,_info) {
  set_values();
  get_number_input_parameters();
  number_filled_3();

}); // HtmlView Page setting action 'OnChange' for element 'final_vx'
          _view.ax.linkProperty("Value",  function() { return ax; }, function(_v) { ax = _v; } ); // HtmlView Page linking property 'Value' for element 'ax'
          _view.ax.setAction("OnChange", function(_data,_info) {
  set_values();
  get_number_input_parameters();
  number_filled_3();

}); // HtmlView Page setting action 'OnChange' for element 'ax'
          _view.t_taken.linkProperty("Value",  function() { return t_taken; }, function(_v) { t_taken = _v; } ); // HtmlView Page linking property 'Value' for element 't_taken'
          _view.t_taken.setAction("OnChange", function(_data,_info) {
  set_values();
  get_number_input_parameters();
  number_filled_3();

}); // HtmlView Page setting action 'OnChange' for element 't_taken'
          _view.final_sx.linkProperty("Value",  function() { return final_sx; }, function(_v) { final_sx = _v; } ); // HtmlView Page linking property 'Value' for element 'final_sx'
          _view.final_sx.setAction("OnChange", function(_data,_info) {
  set_values();
  get_number_input_parameters();
  number_filled_3();

}); // HtmlView Page setting action 'OnChange' for element 'final_sx'
          _view.firstRowPanel.linkProperty("Width",  function() { return ""+window.innerWidth*0.9; } ); // HtmlView Page linking property 'Width' for element 'firstRowPanel'
          _view.start.setAction("OnClick", function(_data,_info) {
  set_values();
  calculateAll();
  _play();
  run_pause.style.display="inline";

}); // HtmlView Page setting action 'OnClick' for element 'start'
          _view.runPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'runPauseButton'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();
  initial_ux = NaN;
  final_vx = NaN;
  ax = NaN;
  final_sx = NaN;
  t_taken = NaN;

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.speed_slider.linkProperty("Value",  function() { return animation_speed; }, function(_v) { animation_speed = _v; } ); // HtmlView Page linking property 'Value' for element 'speed_slider'
          _view.speed_slider.setAction("OnChange", function(_data,_info) {
  _setFPS(animation_speed);

}); // HtmlView Page setting action 'OnChange' for element 'speed_slider'
          _view.positive_left.setAction("OnCheckOn", function(_data,_info) {
  horizontal_animation.style.display="inline";
  vertical_animation.style.display="none";

}); // HtmlView Page setting action 'OnCheckOn' for element 'positive_left'
          _view.positive_right.setAction("OnCheckOn", function(_data,_info) {
  vertical_animation.style.display="inline";
  horizontal_animation.style.display="none";

}); // HtmlView Page setting action 'OnCheckOn' for element 'positive_right'
          _view.positive_right2.setAction("OnCheckOn", function(_data,_info) {
  vertical_animation.style.display="inline";
  horizontal_animation.style.display="inline";

}); // HtmlView Page setting action 'OnCheckOn' for element 'positive_right2'
          _view.solution_1.setAction("OnCheckOff", function(_data,_info) {
  solution1=false;

}); // HtmlView Page setting action 'OnCheckOff' for element 'solution_1'
          _view.solution_1.setAction("OnCheckOn", function(_data,_info) {
  solution1=true;

}); // HtmlView Page setting action 'OnCheckOn' for element 'solution_1'
          _view.solution_2.setAction("OnCheckOff", function(_data,_info) {
  solution2=false;

}); // HtmlView Page setting action 'OnCheckOff' for element 'solution_2'
          _view.solution_2.setAction("OnCheckOn", function(_data,_info) {
  solution2=true;

}); // HtmlView Page setting action 'OnCheckOn' for element 'solution_2'
          _view.horizontal_animation.linkProperty("TRMessage",  function() { return round(sx,2); }, function(_v) { round(sx,2) = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'horizontal_animation'
          _view.horizontal_animation.linkProperty("MinimumX",  function() { return min_displacement; }, function(_v) { min_displacement = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'horizontal_animation'
          _view.horizontal_animation.linkProperty("MinimumY",  function() { return animation_min_y; }, function(_v) { animation_min_y = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'horizontal_animation'
          _view.horizontal_animation.linkProperty("MaximumY",  function() { return animation_max_y; }, function(_v) { animation_max_y = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'horizontal_animation'
          _view.horizontal_animation.linkProperty("MaximumX",  function() { return max_displacement; }, function(_v) { max_displacement = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'horizontal_animation'
          _view.shape.linkProperty("X",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'X' for element 'shape'
          _view.shape.linkProperty("Y",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'Y' for element 'shape'
          _view.vertical_animation.linkProperty("TRMessage",  function() { return round(sx,2); }, function(_v) { round(sx,2) = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'vertical_animation'
          _view.vertical_animation.linkProperty("MinimumX",  function() { return animation_min_y; }, function(_v) { animation_min_y = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'vertical_animation'
          _view.vertical_animation.linkProperty("MinimumY",  function() { return min_displacement; }, function(_v) { min_displacement = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'vertical_animation'
          _view.vertical_animation.linkProperty("MaximumY",  function() { return max_displacement; }, function(_v) { max_displacement = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'vertical_animation'
          _view.vertical_animation.linkProperty("MaximumX",  function() { return animation_max_y; }, function(_v) { animation_max_y = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'vertical_animation'
          _view.shape2.linkProperty("X",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'X' for element 'shape2'
          _view.shape2.linkProperty("Y",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'Y' for element 'shape2'
          _view.s_t_graph.linkProperty("TRMessage",  function() { return round(sx,2); }, function(_v) { round(sx,2) = _v; } ); // HtmlView Page linking property 'TRMessage' for element 's_t_graph'
          _view.s_t_graph.linkProperty("MinimumY",  function() { return min_displacement; }, function(_v) { min_displacement = _v; } ); // HtmlView Page linking property 'MinimumY' for element 's_t_graph'
          _view.s_t_graph.linkProperty("MaximumY",  function() { return max_displacement; }, function(_v) { max_displacement = _v; } ); // HtmlView Page linking property 'MaximumY' for element 's_t_graph'
          _view.s_t_graph.linkProperty("MaximumX",  function() { return s_max_t; }, function(_v) { s_max_t = _v; } ); // HtmlView Page linking property 'MaximumX' for element 's_t_graph'
          _view.trace2.linkProperty("InputX",  function() { return t_current; }, function(_v) { t_current = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace2'
          _view.trace2.linkProperty("InputY",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace2'
          _view.v_t_graph.linkProperty("TRMessage",  function() { return round(vx,2); }, function(_v) { round(vx,2) = _v; } ); // HtmlView Page linking property 'TRMessage' for element 'v_t_graph'
          _view.v_t_graph.linkProperty("MinimumY",  function() { return min_velocity; }, function(_v) { min_velocity = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'v_t_graph'
          _view.v_t_graph.linkProperty("MaximumY",  function() { return max_velocity; }, function(_v) { max_velocity = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'v_t_graph'
          _view.v_t_graph.linkProperty("MaximumX",  function() { return v_max_t; }, function(_v) { v_max_t = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'v_t_graph'
          _view.trace.linkProperty("InputX",  function() { return t_current; }, function(_v) { t_current = _v; } ); // HtmlView Page linking property 'InputX' for element 'trace'
          _view.trace.linkProperty("InputY",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'InputY' for element 'trace'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function kinematics_new_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = kinematics_new_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('Intro Page','./kinematics_new_Intro_1.html');

  return _view;
} // end of main function

function kinematics_new_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"singlePlotPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'singlePlotPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"labelPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'labelPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"topLabel", _view.labelPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topLabel'
      .setProperty("Text","<h1>Kinematics</h1>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'topLabel'
      ;

    _view._addElement(EJSS_INTERFACE.wrappedPanel,"wrappedPanel", _view.singlePlotPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'wrappedPanel'
      .setProperty("CSS",{ "display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'wrappedPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel8", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel8'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.panel8) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel7", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel7'
      .setProperty("BorderWidth",30) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'panel7'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label6", _view.panel7) // EJsS HtmlView.HtmlView Page: declaration of element 'label6'
      .setProperty("Text","Enter exactly 3 values below to solve for the other 2 values. Define positive to be right or upwards, negative to be left or downwards. Scroll down after calculation to view solution and explanations.") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label6'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'label'
      .setProperty("Text","Initial Velocity u (ms<sup>-1</sup>): ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"initial_ux", _view.panel) // EJsS HtmlView.HtmlView Page: declaration of element 'initial_ux'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label2", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'label2'
      .setProperty("Text","Final Velocity v (ms<sup>-1</sup>): ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"final_vx", _view.panel2) // EJsS HtmlView.HtmlView Page: declaration of element 'final_vx'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel3", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label3", _view.panel3) // EJsS HtmlView.HtmlView Page: declaration of element 'label3'
      .setProperty("Text","Acceleration a (ms<sup>-2</sup>): ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label3'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"ax", _view.panel3) // EJsS HtmlView.HtmlView Page: declaration of element 'ax'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel4", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel4'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label4", _view.panel4) // EJsS HtmlView.HtmlView Page: declaration of element 'label4'
      .setProperty("Text","Time Taken t (s): ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label4'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"t_taken", _view.panel4) // EJsS HtmlView.HtmlView Page: declaration of element 't_taken'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel5", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel5'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label5", _view.panel5) // EJsS HtmlView.HtmlView Page: declaration of element 'label5'
      .setProperty("Text","Final Displacement s (m): ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label5'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"final_sx", _view.panel5) // EJsS HtmlView.HtmlView Page: declaration of element 'final_sx'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"firstRowPanel", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'firstRowPanel'
      .setProperty("BorderWidth",30) // EJsS HtmlView.HtmlView Page: setting property 'BorderWidth' for element 'firstRowPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"executionPanel", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'executionPanel'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'executionPanel'
      ;

    _view._addElement(EJSS_INTERFACE.button,"start", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'start'
      .setProperty("Text","Calculate and Start Animation") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'start'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'runPauseButton'
      .setProperty("TextOn","Play") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'runPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'runPauseButton'
      .setProperty("TextOff","Pause") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.executionPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel9", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel9'
      .setProperty("Html","<br/>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'panel9'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label7", _view.panel9) // EJsS HtmlView.HtmlView Page: declaration of element 'label7'
      .setProperty("Text","Animation Speed: ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label7'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"speed_slider", _view.panel9) // EJsS HtmlView.HtmlView Page: declaration of element 'speed_slider'
      .setProperty("Minimum",5) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'speed_slider'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'speed_slider'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'speed_slider'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel92", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel92'
      .setProperty("Html","<br/>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'panel92'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"label8", _view.panel92) // EJsS HtmlView.HtmlView Page: declaration of element 'label8'
      .setProperty("Text","Set Positive As: ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'label8'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"positive_left", _view.panel92) // EJsS HtmlView.HtmlView Page: declaration of element 'positive_left'
      .setProperty("Checked",true) // EJsS HtmlView.HtmlView Page: setting property 'Checked' for element 'positive_left'
      .setProperty("Text","Rightwards") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'positive_left'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"positive_right", _view.panel92) // EJsS HtmlView.HtmlView Page: declaration of element 'positive_right'
      .setProperty("Text","Upwards") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'positive_right'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"positive_right2", _view.panel92) // EJsS HtmlView.HtmlView Page: declaration of element 'positive_right2'
      .setProperty("Text","See both cases") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'positive_right2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel10", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel10'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"animation_current_status", _view.panel10) // EJsS HtmlView.HtmlView Page: declaration of element 'animation_current_status'
      .setProperty("Text","") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'animation_current_status'
      .setProperty("Font","normal bold 26px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'animation_current_status'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"toggle_solution", _view.firstRowPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'toggle_solution'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"solution_1", _view.toggle_solution) // EJsS HtmlView.HtmlView Page: declaration of element 'solution_1'
      .setProperty("Text","SOLUTION 1") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'solution_1'
      ;

    _view._addElement(EJSS_INTERFACE.radioButton,"solution_2", _view.toggle_solution) // EJsS HtmlView.HtmlView Page: declaration of element 'solution_2'
      .setProperty("Text","SOLUTION 2") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'solution_2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"horizontal_animation", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'horizontal_animation'
      .setProperty("Height",250) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'horizontal_animation'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'horizontal_animation'
      .setProperty("TitleY","") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'horizontal_animation'
      .setProperty("TitleX","s") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'horizontal_animation'
      .setProperty("Title","Animation") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'horizontal_animation'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape", _view.horizontal_animation) // EJsS HtmlView.HtmlView Page: declaration of element 'shape'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"vertical_animation", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vertical_animation'
      .setProperty("Height",400) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'vertical_animation'
      .setProperty("Width",250) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'vertical_animation'
      .setProperty("TitleY","s") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'vertical_animation'
      .setProperty("TitleX","") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'vertical_animation'
      .setProperty("Title","Animation") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'vertical_animation'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"shape2", _view.vertical_animation) // EJsS HtmlView.HtmlView Page: declaration of element 'shape2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'shape2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'shape2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'shape2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'shape2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'shape2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'shape2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"panel6", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'panel6'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"s_t_graph", _view.panel6) // EJsS HtmlView.HtmlView Page: declaration of element 's_t_graph'
      .setProperty("Height",300) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 's_t_graph'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 's_t_graph'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 's_t_graph'
      .setProperty("TitleY","s") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 's_t_graph'
      .setProperty("TitleX","t") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 's_t_graph'
      .setProperty("Title","Displacement-Time Graph") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 's_t_graph'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace2", _view.s_t_graph) // EJsS HtmlView.HtmlView Page: declaration of element 'trace2'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trace2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace2'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"v_t_graph", _view.panel6) // EJsS HtmlView.HtmlView Page: declaration of element 'v_t_graph'
      .setProperty("Height",300) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'v_t_graph'
      .setProperty("Width",400) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'v_t_graph'
      .setProperty("MinimumX",0) // EJsS HtmlView.HtmlView Page: setting property 'MinimumX' for element 'v_t_graph'
      .setProperty("TitleY","v") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'v_t_graph'
      .setProperty("TitleX","t") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'v_t_graph'
      .setProperty("Title","Velocity-Time Graph") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'v_t_graph'
      .setProperty("Display","inline-block") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'v_t_graph'
      ;

    _view._addElement(EJSS_DRAWING2D.trace,"trace", _view.v_t_graph) // EJsS HtmlView.HtmlView Page: declaration of element 'trace'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trace'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"solution_with_explanation", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'solution_with_explanation'
      .setProperty("Background","rgba(255,255,100,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'solution_with_explanation'
      .setProperty("Html","<br/><h2 style=\"text-align:center;\">Four Equations of Motion</h2> <div style=\"font-size:150%;font-weight:normal;text-align:center\"> v = u + at<br/> v<sup>2</sup> = u<sup>2</sup> + 2as<br/> s = ut + <sup>1</sup>/<sub>2</sub> at<sup>2</sup><br/> s = <sup>1</sup>/<sub>2</sub> (u+v) t<br/> </div>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'solution_with_explanation'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"solution_header", _view.solution_with_explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'solution_header'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'solution_header'
      .setProperty("TextAlign","center") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'solution_header'
      .setProperty("Text","<h3><center>Solution</center></h3><i>Solutions will appear below after it is calculated.</i><br/><br/> ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'solution_header'
      .setProperty("Font","normal normal 16px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'solution_header'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_calculated_values", _view.solution_with_explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_calculated_values'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_calculated_values'
      .setProperty("TextAlign","center") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_calculated_values'
      .setProperty("Font","normal normal 24px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'display_calculated_values'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"explanation", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'explanation'
      .setProperty("Background","rgba(255,150,150,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'explanation'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_explanation_header", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_explanation_header'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_explanation_header'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_explanation_header'
      .setProperty("Text","<h3>Explanation and Steps</h3> 		Generally, you know the values of 3 variables. First look for the equation that 		contains all 3 variables that you know in it. Each equation of motion has exactly 4 variables, 		if you know 3 of the variables you can calculate the 4th variable inside this equation directly. 		Choose the equation that is most easy to manipulate, for example you should avoid equations with 		squares if possible unless you have no other choice.") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'display_explanation_header'
      .setProperty("Font","normal normal 16px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'display_explanation_header'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_explanation_1", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_explanation_1'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_explanation_1'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_explanation_1'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_explanation_middle", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_explanation_middle'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_explanation_middle'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_explanation_middle'
      .setProperty("Text","So now you have 4 variables. Now look for an equation that contains the final variable that you still do not know. The values of the other 3 variables in this equation should be something you know already as you only have one unknown variable at this point. Again try to look for the equation that is easiest to manipulate.") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'display_explanation_middle'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_explanation_2", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_explanation_2'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_explanation_2'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_explanation_2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_solution_not_valid", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_solution_not_valid'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_solution_not_valid'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_solution_not_valid'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_2_v_t_interpretation", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_2_v_t_interpretation'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_2_v_t_interpretation'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_2_v_t_interpretation'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_2_u_t_interpretation", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_2_u_t_interpretation'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_2_u_t_interpretation'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_2_u_t_interpretation'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_2_solutions_u_notice", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_2_solutions_u_notice'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_2_solutions_u_notice'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_2_solutions_u_notice'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"display_2_solutions_v_notice", _view.explanation) // EJsS HtmlView.HtmlView Page: declaration of element 'display_2_solutions_v_notice'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'display_2_solutions_v_notice'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'display_2_solutions_v_notice'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"description", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'description'
      .setProperty("Background","rgba(64,255,192,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'description'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"description_header", _view.description) // EJsS HtmlView.HtmlView Page: declaration of element 'description_header'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'description_header'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'description_header'
      .setProperty("Text","<h3>Description of Motion</h3><i>Description of motion will appear below after solution is calculated.</i><br/><br/>") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'description_header'
      .setProperty("Font","normal normal 16px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'description_header'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"motion_description1", _view.description) // EJsS HtmlView.HtmlView Page: declaration of element 'motion_description1'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'motion_description1'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'motion_description1'
      .setProperty("Font","normal normal 16px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'motion_description1'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"motion_description2", _view.description) // EJsS HtmlView.HtmlView Page: declaration of element 'motion_description2'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'motion_description2'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'motion_description2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"motion_description3", _view.description) // EJsS HtmlView.HtmlView Page: declaration of element 'motion_description3'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'motion_description3'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'motion_description3'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"inference_wrapper", _view.wrappedPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'inference_wrapper'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'inference_wrapper'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"inference_header", _view.inference_wrapper) // EJsS HtmlView.HtmlView Page: declaration of element 'inference_header'
      .setProperty("Width","90%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'inference_header'
      .setProperty("TextAlign","left") // EJsS HtmlView.HtmlView Page: setting property 'TextAlign' for element 'inference_header'
      .setProperty("Text","<h3>How is each description statement inferred?</h3><i>How description of motion is inferred will appear below after solution is calculated.</i><br/><br/> ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'inference_header'
      .setProperty("Font","normal normal 16px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'inference_header'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"inference", _view.inference_wrapper) // EJsS HtmlView.HtmlView Page: declaration of element 'inference'
      .setProperty("Html","<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"font-weight: normal;\"> 			<tr>			 				<td style=\"font-size:120%;\"><b>Description of Motion</b></td> 				<td style=\"font-size:120%;\"><b>Inference</b></td> 			</tr> 			<tr> 				<td><div id=\"motion_description1a\"></div></td> 				<td><div id=\"motion_inference1\"></div></td> 			</tr> 			<tr>			 				<td><div id=\"motion_description2a\"></div></td> 				<td><div id=\"motion_inference2\"></div></td> 			</tr> 			<tr>			 				<td><div id=\"motion_description3a\"></div></td> 				<td><div id=\"motion_inference3\"></div></td> 			</tr> 			</table> 			<br/> 			<br/>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'inference'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'inference'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Kinematics<br />
      </p>
      <p>
      <img alt="author image" src="ejc.png" />
 Damian, Robin, Weiqiang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2019, Damian, Robin, Weiqiang.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new kinematics_new("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
