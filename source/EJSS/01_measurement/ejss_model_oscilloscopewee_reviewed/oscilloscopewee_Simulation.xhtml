<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Oscilloscope</title>
    <link rel="stylesheet"  type="text/css" href="_ejs_library/css/ejss.css" />
    <script src="_ejs_library/scripts/common_script.js"></script>
    <script src="_ejs_library/scripts/textresizedetector.js"></script>
    <script src="_ejs_library/ejsS.v1.max.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function oscilloscopewee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

null
  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var print; // EjsS Model.Variables.Var Table.print
  var fontb; // EjsS Model.Variables.Var Table.fontb
  var font; // EjsS Model.Variables.Var Table.font
  var t; // EjsS Model.Variables.Var Table.t
  var dt; // EjsS Model.Variables.Var Table.dt
  var range; // EjsS Model.Variables.Var Table.range
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var ymin; // EjsS Model.Variables.Var Table.ymin
  var ymax; // EjsS Model.Variables.Var Table.ymax
  var size; // EjsS Model.Variables.Var Table.size
  var size2; // EjsS Model.Variables.Var Table.size2
  var pi; // EjsS Model.Variables.Var Table.pi
  var stroke; // EjsS Model.Variables.Var Table.stroke
  var npt; // EjsS Model.Variables.Var Table.npt
  var a2c; // EjsS Model.Variables.Var Table.a2c
  var xmin2; // EjsS Model.Variables.Var Table.xmin2
  var xmax2; // EjsS Model.Variables.Var Table.xmax2
  var ymin2; // EjsS Model.Variables.Var Table.ymin2
  var ymax2; // EjsS Model.Variables.Var Table.ymax2
  var n; // EjsS Model.Variables.Var Table.n
  var n1; // EjsS Model.Variables.Var Table.n1
  var xp; // EjsS Model.Variables.Var Table.xp
  var yp; // EjsS Model.Variables.Var Table.yp
  var dx; // EjsS Model.Variables.Var Table.dx
  var dy; // EjsS Model.Variables.Var Table.dy
  var n2; // EjsS Model.Variables.Var Table.n2
  var xp2; // EjsS Model.Variables.Var Table.xp2
  var yp2; // EjsS Model.Variables.Var Table.yp2
  var dx2; // EjsS Model.Variables.Var Table.dx2
  var dy2; // EjsS Model.Variables.Var Table.dy2

  var x1; // EjsS Model.Variables.object.x1
  var y1; // EjsS Model.Variables.object.y1
  var x2; // EjsS Model.Variables.object.x2
  var y2; // EjsS Model.Variables.object.y2
  var r; // EjsS Model.Variables.object.r

  var tdiv; // EjsS Model.Variables.knob.tdiv
  var vdiv; // EjsS Model.Variables.knob.vdiv
  var v0; // EjsS Model.Variables.knob.v0

  var type; // EjsS Model.Variables.vars.type
  var vtype; // EjsS Model.Variables.vars.vtype
  var xtype; // EjsS Model.Variables.vars.xtype
  var ytype; // EjsS Model.Variables.vars.ytype
  var title; // EjsS Model.Variables.vars.title
  var title2; // EjsS Model.Variables.vars.title2
  var titleclever; // EjsS Model.Variables.vars.titleclever
  var xmode; // EjsS Model.Variables.vars.xmode
  var ymode; // EjsS Model.Variables.vars.ymode

  var A; // EjsS Model.Variables.X.A
  var B; // EjsS Model.Variables.X.B
  var C; // EjsS Model.Variables.X.C
  var D; // EjsS Model.Variables.X.D
  var w; // EjsS Model.Variables.X.w

  var A1; // EjsS Model.Variables.X1.A1
  var B1; // EjsS Model.Variables.X1.B1
  var C1; // EjsS Model.Variables.X1.C1
  var D1; // EjsS Model.Variables.X1.D1
  var xoffset; // EjsS Model.Variables.X1.xoffset
  var w1; // EjsS Model.Variables.X1.w1

  var A2; // EjsS Model.Variables.Y.A2
  var B2; // EjsS Model.Variables.Y.B2
  var C2; // EjsS Model.Variables.Y.C2
  var D2; // EjsS Model.Variables.Y.D2
  var w2; // EjsS Model.Variables.Y.w2
  var expertshow; // EjsS Model.Variables.Y.expertshow
  var showasinwtb; // EjsS Model.Variables.Y.showasinwtb
  var showctd; // EjsS Model.Variables.Y.showctd

  var xfun; // EjsS Model.Variables.fun.xfun
  var yfun; // EjsS Model.Variables.fun.yfun
  var xfun2; // EjsS Model.Variables.fun.xfun2
  var yfun2; // EjsS Model.Variables.fun.yfun2
  var cmax; // EjsS Model.Variables.fun.cmax
  var dmax; // EjsS Model.Variables.fun.dmax
  var amax; // EjsS Model.Variables.fun.amax
  var bmax; // EjsS Model.Variables.fun.bmax
  var wmax; // EjsS Model.Variables.fun.wmax
  var cc; // EjsS Model.Variables.fun.cc
  var s1; // EjsS Model.Variables.fun.s1
  var s2; // EjsS Model.Variables.fun.s2
  var s3; // EjsS Model.Variables.fun.s3
  var s4; // EjsS Model.Variables.fun.s4
  var tmin; // EjsS Model.Variables.fun.tmin
  var tmax; // EjsS Model.Variables.fun.tmax

  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var Width2; // EjsS Model.Variables.layout.Width2
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var kevst; // EjsS Model.Variables.layout.kevst
  var pevst; // EjsS Model.Variables.layout.pevst
  var tevst; // EjsS Model.Variables.layout.tevst
  var world; // EjsS Model.Variables.layout.world
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled
  var autoscaley; // EjsS Model.Variables.layout.autoscaley
  var text; // EjsS Model.Variables.layout.text
  var iOS; // EjsS Model.Variables.layout.iOS
  var iPad; // EjsS Model.Variables.layout.iPad
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var Android; // EjsS Model.Variables.layout.Android

  var ymodel; // EjsS Model.Variables.model.ymodel
  var xmodel; // EjsS Model.Variables.model.xmodel
  var functionY; // EjsS Model.Variables.model.functionY
  var showmodel; // EjsS Model.Variables.model.showmodel
  var yosciloscope; // EjsS Model.Variables.model.yosciloscope
  var xosciloscope; // EjsS Model.Variables.model.xosciloscope
  var vdivang; // EjsS Model.Variables.model.vdivang
  var tdivang; // EjsS Model.Variables.model.tdivang
  var xoffsetang; // EjsS Model.Variables.model.xoffsetang
  var yoffsetang; // EjsS Model.Variables.model.yoffsetang
  var test; // EjsS Model.Variables.model.test

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      print : print,
      fontb : fontb,
      font : font,
      t : t,
      dt : dt,
      range : range,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      size : size,
      size2 : size2,
      pi : pi,
      stroke : stroke,
      npt : npt,
      a2c : a2c,
      xmin2 : xmin2,
      xmax2 : xmax2,
      ymin2 : ymin2,
      ymax2 : ymax2,
      n : n,
      n1 : n1,
      xp : xp,
      yp : yp,
      dx : dx,
      dy : dy,
      n2 : n2,
      xp2 : xp2,
      yp2 : yp2,
      dx2 : dx2,
      dy2 : dy2,
      x1 : x1,
      y1 : y1,
      x2 : x2,
      y2 : y2,
      r : r,
      tdiv : tdiv,
      vdiv : vdiv,
      v0 : v0,
      type : type,
      vtype : vtype,
      xtype : xtype,
      ytype : ytype,
      title : title,
      title2 : title2,
      titleclever : titleclever,
      xmode : xmode,
      ymode : ymode,
      A : A,
      B : B,
      C : C,
      D : D,
      w : w,
      A1 : A1,
      B1 : B1,
      C1 : C1,
      D1 : D1,
      xoffset : xoffset,
      w1 : w1,
      A2 : A2,
      B2 : B2,
      C2 : C2,
      D2 : D2,
      w2 : w2,
      expertshow : expertshow,
      showasinwtb : showasinwtb,
      showctd : showctd,
      xfun : xfun,
      yfun : yfun,
      xfun2 : xfun2,
      yfun2 : yfun2,
      cmax : cmax,
      dmax : dmax,
      amax : amax,
      bmax : bmax,
      wmax : wmax,
      cc : cc,
      s1 : s1,
      s2 : s2,
      s3 : s3,
      s4 : s4,
      tmin : tmin,
      tmax : tmax,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      Width2 : Width2,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      kevst : kevst,
      pevst : pevst,
      tevst : tevst,
      world : world,
      disabledworld : disabledworld,
      disabled : disabled,
      autoscaley : autoscaley,
      text : text,
      iOS : iOS,
      iPad : iPad,
      iPhone : iPhone,
      Android : Android,
      ymodel : ymodel,
      xmodel : xmodel,
      functionY : functionY,
      showmodel : showmodel,
      yosciloscope : yosciloscope,
      xosciloscope : xosciloscope,
      vdivang : vdivang,
      tdivang : tdivang,
      xoffsetang : xoffsetang,
      yoffsetang : yoffsetang,
      test : test
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.range != "undefined") range = json.range;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.size != "undefined") size = json.size;
    if(typeof json.size2 != "undefined") size2 = json.size2;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.stroke != "undefined") stroke = json.stroke;
    if(typeof json.npt != "undefined") npt = json.npt;
    if(typeof json.a2c != "undefined") a2c = json.a2c;
    if(typeof json.xmin2 != "undefined") xmin2 = json.xmin2;
    if(typeof json.xmax2 != "undefined") xmax2 = json.xmax2;
    if(typeof json.ymin2 != "undefined") ymin2 = json.ymin2;
    if(typeof json.ymax2 != "undefined") ymax2 = json.ymax2;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.n1 != "undefined") n1 = json.n1;
    if(typeof json.xp != "undefined") xp = json.xp;
    if(typeof json.yp != "undefined") yp = json.yp;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.dy != "undefined") dy = json.dy;
    if(typeof json.n2 != "undefined") n2 = json.n2;
    if(typeof json.xp2 != "undefined") xp2 = json.xp2;
    if(typeof json.yp2 != "undefined") yp2 = json.yp2;
    if(typeof json.dx2 != "undefined") dx2 = json.dx2;
    if(typeof json.dy2 != "undefined") dy2 = json.dy2;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.r != "undefined") r = json.r;
    if(typeof json.tdiv != "undefined") tdiv = json.tdiv;
    if(typeof json.vdiv != "undefined") vdiv = json.vdiv;
    if(typeof json.v0 != "undefined") v0 = json.v0;
    if(typeof json.type != "undefined") type = json.type;
    if(typeof json.vtype != "undefined") vtype = json.vtype;
    if(typeof json.xtype != "undefined") xtype = json.xtype;
    if(typeof json.ytype != "undefined") ytype = json.ytype;
    if(typeof json.title != "undefined") title = json.title;
    if(typeof json.title2 != "undefined") title2 = json.title2;
    if(typeof json.titleclever != "undefined") titleclever = json.titleclever;
    if(typeof json.xmode != "undefined") xmode = json.xmode;
    if(typeof json.ymode != "undefined") ymode = json.ymode;
    if(typeof json.A != "undefined") A = json.A;
    if(typeof json.B != "undefined") B = json.B;
    if(typeof json.C != "undefined") C = json.C;
    if(typeof json.D != "undefined") D = json.D;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.A1 != "undefined") A1 = json.A1;
    if(typeof json.B1 != "undefined") B1 = json.B1;
    if(typeof json.C1 != "undefined") C1 = json.C1;
    if(typeof json.D1 != "undefined") D1 = json.D1;
    if(typeof json.xoffset != "undefined") xoffset = json.xoffset;
    if(typeof json.w1 != "undefined") w1 = json.w1;
    if(typeof json.A2 != "undefined") A2 = json.A2;
    if(typeof json.B2 != "undefined") B2 = json.B2;
    if(typeof json.C2 != "undefined") C2 = json.C2;
    if(typeof json.D2 != "undefined") D2 = json.D2;
    if(typeof json.w2 != "undefined") w2 = json.w2;
    if(typeof json.expertshow != "undefined") expertshow = json.expertshow;
    if(typeof json.showasinwtb != "undefined") showasinwtb = json.showasinwtb;
    if(typeof json.showctd != "undefined") showctd = json.showctd;
    if(typeof json.xfun != "undefined") xfun = json.xfun;
    if(typeof json.yfun != "undefined") yfun = json.yfun;
    if(typeof json.xfun2 != "undefined") xfun2 = json.xfun2;
    if(typeof json.yfun2 != "undefined") yfun2 = json.yfun2;
    if(typeof json.cmax != "undefined") cmax = json.cmax;
    if(typeof json.dmax != "undefined") dmax = json.dmax;
    if(typeof json.amax != "undefined") amax = json.amax;
    if(typeof json.bmax != "undefined") bmax = json.bmax;
    if(typeof json.wmax != "undefined") wmax = json.wmax;
    if(typeof json.cc != "undefined") cc = json.cc;
    if(typeof json.s1 != "undefined") s1 = json.s1;
    if(typeof json.s2 != "undefined") s2 = json.s2;
    if(typeof json.s3 != "undefined") s3 = json.s3;
    if(typeof json.s4 != "undefined") s4 = json.s4;
    if(typeof json.tmin != "undefined") tmin = json.tmin;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.Width2 != "undefined") Width2 = json.Width2;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.kevst != "undefined") kevst = json.kevst;
    if(typeof json.pevst != "undefined") pevst = json.pevst;
    if(typeof json.tevst != "undefined") tevst = json.tevst;
    if(typeof json.world != "undefined") world = json.world;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
    if(typeof json.autoscaley != "undefined") autoscaley = json.autoscaley;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.ymodel != "undefined") ymodel = json.ymodel;
    if(typeof json.xmodel != "undefined") xmodel = json.xmodel;
    if(typeof json.functionY != "undefined") functionY = json.functionY;
    if(typeof json.showmodel != "undefined") showmodel = json.showmodel;
    if(typeof json.yosciloscope != "undefined") yosciloscope = json.yosciloscope;
    if(typeof json.xosciloscope != "undefined") xosciloscope = json.xosciloscope;
    if(typeof json.vdivang != "undefined") vdivang = json.vdivang;
    if(typeof json.tdivang != "undefined") tdivang = json.tdivang;
    if(typeof json.xoffsetang != "undefined") xoffsetang = json.xoffsetang;
    if(typeof json.yoffsetang != "undefined") yoffsetang = json.yoffsetang;
    if(typeof json.test != "undefined") test = json.test;
  };

  _model._inputAndPublicParameters = ["print",  "fontb",  "font",  "t",  "dt",  "range",  "xmin",  "xmax",  "ymin",  "ymax",  "size",  "size2",  "pi",  "stroke",  "npt",  "a2c",  "xmin2",  "xmax2",  "ymin2",  "ymax2",  "n",  "n1",  "xp",  "yp",  "dx",  "dy",  "n2",  "xp2",  "yp2",  "dx2",  "dy2",  "x1",  "y1",  "x2",  "y2",  "r",  "tdiv",  "vdiv",  "v0",  "type",  "vtype",  "xtype",  "ytype",  "title",  "title2",  "titleclever",  "xmode",  "ymode",  "A",  "B",  "C",  "D",  "w",  "A1",  "B1",  "C1",  "D1",  "xoffset",  "w1",  "A2",  "B2",  "C2",  "D2",  "w2",  "expertshow",  "showasinwtb",  "showctd",  "xfun",  "yfun",  "xfun2",  "yfun2",  "cmax",  "dmax",  "amax",  "bmax",  "wmax",  "cc",  "s1",  "s2",  "s3",  "s4",  "tmin",  "tmax",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "kevst",  "pevst",  "tevst",  "world",  "disabledworld",  "disabled",  "autoscaley",  "text",  "iOS",  "iPad",  "iPhone",  "Android",  "ymodel",  "xmodel",  "functionY",  "showmodel",  "yosciloscope",  "xosciloscope",  "vdivang",  "tdivang",  "xoffsetang",  "yoffsetang",  "test"]; 

  _model._outputAndPublicParameters = ["print",  "fontb",  "font",  "t",  "dt",  "range",  "xmin",  "xmax",  "ymin",  "ymax",  "size",  "size2",  "pi",  "stroke",  "npt",  "a2c",  "xmin2",  "xmax2",  "ymin2",  "ymax2",  "n",  "n1",  "xp",  "yp",  "dx",  "dy",  "n2",  "xp2",  "yp2",  "dx2",  "dy2",  "x1",  "y1",  "x2",  "y2",  "r",  "tdiv",  "vdiv",  "v0",  "type",  "vtype",  "xtype",  "ytype",  "title",  "title2",  "titleclever",  "xmode",  "ymode",  "A",  "B",  "C",  "D",  "w",  "A1",  "B1",  "C1",  "D1",  "xoffset",  "w1",  "A2",  "B2",  "C2",  "D2",  "w2",  "expertshow",  "showasinwtb",  "showctd",  "xfun",  "yfun",  "xfun2",  "yfun2",  "cmax",  "dmax",  "amax",  "bmax",  "wmax",  "cc",  "s1",  "s2",  "s3",  "s4",  "tmin",  "tmax",  "Width",  "Height",  "Width1",  "Width2",  "xvst",  "vvst",  "avst",  "kevst",  "pevst",  "tevst",  "world",  "disabledworld",  "disabled",  "autoscaley",  "text",  "iOS",  "iPad",  "iPhone",  "Android",  "ymodel",  "xmodel",  "functionY",  "showmodel",  "yosciloscope",  "xosciloscope",  "vdivang",  "tdivang",  "xoffsetang",  "yoffsetang",  "test"];

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["knobs"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["FixRel Page"] = true;
    __pagesEnabled["osciliiscope"] = true;
    __pagesEnabled["model"] = true;
  });

  _model.addToReset(function() {
    print = false; // EjsS Model.Variables.Var Table.print
    fontb = "normal bold 1.5vw "; // EjsS Model.Variables.Var Table.fontb
    font = "normal normal 1.5vw "; // EjsS Model.Variables.Var Table.font
    t = 0; // EjsS Model.Variables.Var Table.t
    dt = 0.1; // EjsS Model.Variables.Var Table.dt
    range = 200; // EjsS Model.Variables.Var Table.range
    xmin = -0.1*range; // EjsS Model.Variables.Var Table.xmin
    xmax = 0.9*range; // EjsS Model.Variables.Var Table.xmax
    ymin = -range/2; // EjsS Model.Variables.Var Table.ymin
    ymax = range/2; // EjsS Model.Variables.Var Table.ymax
    size = range/5; // EjsS Model.Variables.Var Table.size
    size2 = size/2; // EjsS Model.Variables.Var Table.size2
    pi = Math.PI; // EjsS Model.Variables.Var Table.pi
    stroke = 2; // EjsS Model.Variables.Var Table.stroke
    npt = 1200; // EjsS Model.Variables.Var Table.npt
    a2c = pi/180; // EjsS Model.Variables.Var Table.a2c
    xmin2 = 0; // EjsS Model.Variables.Var Table.xmin2
    xmax2 = 0.8*range; // EjsS Model.Variables.Var Table.xmax2
    ymin2 = ymin*0.9; // EjsS Model.Variables.Var Table.ymin2
    ymax2 = ymax*0.9; // EjsS Model.Variables.Var Table.ymax2
    n = 11; // EjsS Model.Variables.Var Table.n
    n1 = n-1; // EjsS Model.Variables.Var Table.n1
    xp = new Array(n); // EjsS Model.Variables.Var Table.xp
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.xp
        xp[_i0] = 0;  // EjsS Model.Variables.Var Table.xp
      }
    }());
    yp = new Array(n); // EjsS Model.Variables.Var Table.yp
    (function () {
      var _i0;
      for (_i0=0; _i0<n; _i0+=1) {  // EjsS Model.Variables.Var Table.yp
        yp[_i0] = 0;  // EjsS Model.Variables.Var Table.yp
      }
    }());
    dx = (xmax2-xmin2)/(n-1); // EjsS Model.Variables.Var Table.dx
    dy = (ymax2-ymin2)/(n-1); // EjsS Model.Variables.Var Table.dy
    n2 = n1*5; // EjsS Model.Variables.Var Table.n2
    xp2 = new Array(n2); // EjsS Model.Variables.Var Table.xp2
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.Var Table.xp2
        xp2[_i0] = 0;  // EjsS Model.Variables.Var Table.xp2
      }
    }());
    yp2 = new Array(n2); // EjsS Model.Variables.Var Table.yp2
    (function () {
      var _i0;
      for (_i0=0; _i0<n2; _i0+=1) {  // EjsS Model.Variables.Var Table.yp2
        yp2[_i0] = 0;  // EjsS Model.Variables.Var Table.yp2
      }
    }());
    dx2 = dx/5; // EjsS Model.Variables.Var Table.dx2
    dy2 = dy/5; // EjsS Model.Variables.Var Table.dy2
  });

  _model.addToReset(function() {
    x1 = xmin/2; // EjsS Model.Variables.object.x1
    y1 = ymin/2; // EjsS Model.Variables.object.y1
    x2 = xmax/2; // EjsS Model.Variables.object.x2
    y2 = ymax/2; // EjsS Model.Variables.object.y2
    r = size2; // EjsS Model.Variables.object.r
  });

  _model.addToReset(function() {
    tdiv = 50; // EjsS Model.Variables.knob.tdiv
  });

  _model.addToReset(function() {
    type = new Array(1); // EjsS Model.Variables.vars.type
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.vars.type
        type[_i0] = "";  // EjsS Model.Variables.vars.type
      }
    }());
    vtype = new Array(1); // EjsS Model.Variables.vars.vtype
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.vars.vtype
        vtype[_i0] = "X=";  // EjsS Model.Variables.vars.vtype
      }
    }());
    xtype = new Array(1); // EjsS Model.Variables.vars.xtype
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.vars.xtype
        xtype[_i0] = "C*t+D";  // EjsS Model.Variables.vars.xtype
      }
    }());
    ytype = new Array(1); // EjsS Model.Variables.vars.ytype
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.vars.ytype
        ytype[_i0] = "A*sin(w*t+B)";  // EjsS Model.Variables.vars.ytype
      }
    }());
    title = "X="+xtype+",Y="+ytype; // EjsS Model.Variables.vars.title
    xmode = xtype; // EjsS Model.Variables.vars.xmode
    ymode = ytype; // EjsS Model.Variables.vars.ymode
  });

  _model.addToReset(function() {
    A = 30; // EjsS Model.Variables.X.A
    B = 30; // EjsS Model.Variables.X.B
    C = 1; // EjsS Model.Variables.X.C
    w = 2; // EjsS Model.Variables.X.w
  });

  _model.addToReset(function() {
    A1 = 30; // EjsS Model.Variables.X1.A1
    B1 = 30*a2c; // EjsS Model.Variables.X1.B1
    C1 = 1; // EjsS Model.Variables.X1.C1
    xoffset = D1-xmin2; // EjsS Model.Variables.X1.xoffset
    w1 = 2; // EjsS Model.Variables.X1.w1
  });

  _model.addToReset(function() {
    A2 = 30; // EjsS Model.Variables.Y.A2
    B2 = 30*a2c; // EjsS Model.Variables.Y.B2
    C2 = 1; // EjsS Model.Variables.Y.C2
    D2 = 0; // EjsS Model.Variables.Y.D2
    w2 = 2; // EjsS Model.Variables.Y.w2
    expertshow = false; // EjsS Model.Variables.Y.expertshow
  });

  _model.addToReset(function() {
    xfun = "C1*t+D1"; // EjsS Model.Variables.fun.xfun
    yfun = "A2*sin(w2*t+B2)"; // EjsS Model.Variables.fun.yfun
    xfun2 = xfun; // EjsS Model.Variables.fun.xfun2
    yfun2 = yfun; // EjsS Model.Variables.fun.yfun2
    cmax = 100; // EjsS Model.Variables.fun.cmax
    dmax = 10; // EjsS Model.Variables.fun.dmax
    amax = 30; // EjsS Model.Variables.fun.amax
    bmax = 360; // EjsS Model.Variables.fun.bmax
    wmax = 6; // EjsS Model.Variables.fun.wmax
    s1 = ""; // EjsS Model.Variables.fun.s1
    s2 = ""; // EjsS Model.Variables.fun.s2
    s3 = ""; // EjsS Model.Variables.fun.s3
    s4 = ""; // EjsS Model.Variables.fun.s4
    tmin = D1; // EjsS Model.Variables.fun.tmin
    tmax = D1+n1*dx/C1; // EjsS Model.Variables.fun.tmax
  });

  _model.addToReset(function() {
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    Width2 = "0%"; // EjsS Model.Variables.layout.Width2
    xvst = false; // EjsS Model.Variables.layout.xvst
    vvst = false; // EjsS Model.Variables.layout.vvst
    avst = false; // EjsS Model.Variables.layout.avst
    kevst = false; // EjsS Model.Variables.layout.kevst
    pevst = false; // EjsS Model.Variables.layout.pevst
    tevst = false; // EjsS Model.Variables.layout.tevst
    world = true; // EjsS Model.Variables.layout.world
    disabledworld = false; // EjsS Model.Variables.layout.disabledworld
    disabled = false; // EjsS Model.Variables.layout.disabled
    autoscaley = false; // EjsS Model.Variables.layout.autoscaley
    text = "Drag Knobs and \nclick Play"; // EjsS Model.Variables.layout.text
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
  });

  _model.addToReset(function() {
    ymodel = 0; // EjsS Model.Variables.model.ymodel
    xmodel = 0; // EjsS Model.Variables.model.xmodel
    functionY = "0"; // EjsS Model.Variables.model.functionY
    yosciloscope = 0; // EjsS Model.Variables.model.yosciloscope
    xosciloscope = 0; // EjsS Model.Variables.model.xosciloscope
    vdivang = 0; // EjsS Model.Variables.model.vdivang
    tdivang = 0; // EjsS Model.Variables.model.tdivang
    xoffsetang = 0; // EjsS Model.Variables.model.xoffsetang
    yoffsetang = 0; // EjsS Model.Variables.model.yoffsetang
    test = 18; // EjsS Model.Variables.model.test
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });


  function changeOrientation() {  // > CustomCode.changeOrientation:1
     // > CustomCode.changeOrientation:2
     // > CustomCode.changeOrientation:3
  // check platform for Apps  // > CustomCode.changeOrientation:4
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");  // > CustomCode.changeOrientation:5
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");  // > CustomCode.changeOrientation:6
     // > CustomCode.changeOrientation:7
  // check platform for web browsers  // > CustomCode.changeOrientation:8
  var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:9
  var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:10
  var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;  // > CustomCode.changeOrientation:11
  var Android= /Android|android/i.test(navigator.userAgent);  // > CustomCode.changeOrientation:12
     // > CustomCode.changeOrientation:13
     // > CustomCode.changeOrientation:14
  switch (window.orientation) {  // > CustomCode.changeOrientation:15
    case 0:  // > CustomCode.changeOrientation:16
    case 180:  // > CustomCode.changeOrientation:17
      this.screenOrientation = 'portrait';  // > CustomCode.changeOrientation:18
      if (iOSapp){ // does not seems to work  // > CustomCode.changeOrientation:19
        //   return Math.max(window.screen.width,window.screen.height)*0.9;  // > CustomCode.changeOrientation:20
        return window.screen.height*0.8;  //0.1 for app and 0.1 for nonfullscreenapp    // > CustomCode.changeOrientation:21
        // return window.screen.height;  // > CustomCode.changeOrientation:22
        //  return window.innerHeight;  // > CustomCode.changeOrientation:23
        // return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:24
      }  // > CustomCode.changeOrientation:25
        // > CustomCode.changeOrientation:26
      else {  // > CustomCode.changeOrientation:27
        // return Math.max(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:28
        return window.innerHeight;  // > CustomCode.changeOrientation:29
      }  // > CustomCode.changeOrientation:30
      break;  // > CustomCode.changeOrientation:31
    case 90:  // > CustomCode.changeOrientation:32
    case -90:  // > CustomCode.changeOrientation:33
      this.screenOrientation = 'landscape';  // > CustomCode.changeOrientation:34
     // > CustomCode.changeOrientation:35
      if (iOSapp){ // App  // > CustomCode.changeOrientation:36
        return window.screen.width*0.8;    // > CustomCode.changeOrientation:37
        // return window.screen.height;  // > CustomCode.changeOrientation:38
        //  return window.innerHeight;  // > CustomCode.changeOrientation:39
        //  return document.documentElement.clientHeight;  // > CustomCode.changeOrientation:40
      }  // > CustomCode.changeOrientation:41
        // > CustomCode.changeOrientation:42
      else { // browser Android and PC  // > CustomCode.changeOrientation:43
        // return Math.min(window.innerWidth,window.innerHeight)*0.9;  // > CustomCode.changeOrientation:44
        // alert("browser Android and PC");  // > CustomCode.changeOrientation:45
        return window.innerHeight;  // > CustomCode.changeOrientation:46
      }  // > CustomCode.changeOrientation:47
      break;  // > CustomCode.changeOrientation:48
    default:  // > CustomCode.changeOrientation:49
      this.screenOrientation = 'unknown';  // > CustomCode.changeOrientation:50
      //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));  // > CustomCode.changeOrientation:51
      return window.innerHeight;  // > CustomCode.changeOrientation:52
  }  // > CustomCode.changeOrientation:53
     // > CustomCode.changeOrientation:54
  }  // > CustomCode.changeOrientation:55
     // > CustomCode.changeOrientation:56

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (cc==undefined){  // > Initialization.undefined:1
      cc=1;  // > Initialization.undefined:2
      //cc=0.05  // > Initialization.undefined:3
      }  // > Initialization.undefined:4
        // > Initialization.undefined:5
      if (vdiv==undefined){  // > Initialization.undefined:6
      vdiv=18;  // > Initialization.undefined:7
     // vdiv=5;  // > Initialization.undefined:8
      }  // > Initialization.undefined:9
        // > Initialization.undefined:10
        if (D1==undefined){  // > Initialization.undefined:11
      D1=0;  // > Initialization.undefined:12
      xoffset = D1-xmin2;  // > Initialization.undefined:13
      xfun= "C1*t+D1";  // > Initialization.undefined:14
      tmin= D1;  // > Initialization.undefined:15
     tmax= D1+n1*dx/C1;  // > Initialization.undefined:16
     D = D1;  // > Initialization.undefined:17
      }  // > Initialization.undefined:18
      if ( v0==undefined){  // > Initialization.undefined:19
       v0=0;  // > Initialization.undefined:20
      }  // > Initialization.undefined:21
       // > Initialization.undefined:22
        // > Initialization.undefined:23
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    for(var i=0;i<n;i++){  // > Initialization.Init Page:1
    xp[i]=xmin2+i*dx;  // > Initialization.Init Page:2
    yp[i]=ymin2+i*dy;  // > Initialization.Init Page:3
    }  // > Initialization.Init Page:4
    C1=1/cc;  // > Initialization.Init Page:5
    for(var i=0;i<n2;i++){  // > Initialization.Init Page:6
    xp2[i]=xmin2+i*dx2;  // > Initialization.Init Page:7
    yp2[i]=ymin2+i*dy2;  // > Initialization.Init Page:8
    }  // > Initialization.Init Page:9
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandientblue" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(0,40,120); stop-opacity:0.5" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(0,80,255);stop-opacity:0.5" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandientblue)"  // > Initialization.svg:10
    var container = document.createElement('div');  // > Initialization.svg:11
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:12
      '  <radialGradient id="mygrandientpink" cx="50%" cy="60%" r="45%" fx="50%" fy="90%">'+  // > Initialization.svg:13
      '    <stop offset="0%" style="stop-color:rgb(250,40,250); stop-opacity:0.5" />'+  // > Initialization.svg:14
      '    <stop offset="100%" style="stop-color:rgb(250,40,250);stop-opacity:0.5" />'+  // > Initialization.svg:15
      '  </radialGradient>'+  // > Initialization.svg:16
      '</defs></svg>';  // > Initialization.svg:17
    container.innerHTML = svggradient;  // > Initialization.svg:18
    document.body.appendChild(container);  // > Initialization.svg:19
    //"url(#mygrandientpink)"  // > Initialization.svg:20
    var container = document.createElement('div');  // > Initialization.svg:21
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:22
      '  <radialGradient id="mygrandientred" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:23
      '    <stop offset="0%" style="stop-color:rgb(255,0,0); stop-opacity:0.5" />'+  // > Initialization.svg:24
      '    <stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:0.5" />'+  // > Initialization.svg:25
      '  </radialGradient>'+  // > Initialization.svg:26
      '</defs></svg>';  // > Initialization.svg:27
    container.innerHTML = svggradient;  // > Initialization.svg:28
    document.body.appendChild(container);  // > Initialization.svg:29
    //"url(#mygrandientred)"  // > Initialization.svg:30
    var container = document.createElement('div');  // > Initialization.svg:31
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:32
      '  <radialGradient id="mygrandientyellow" cx="50%" cy="50%" r="80%" fx="30%" fy="30%">'+  // > Initialization.svg:33
      '    <stop offset="0%" style="stop-color:rgb(255,255,0); stop-opacity:0.5" />'+  // > Initialization.svg:34
      '    <stop offset="100%" style="stop-color:rgb(255,255,0);stop-opacity:0.5" />'+  // > Initialization.svg:35
      '  </radialGradient>'+  // > Initialization.svg:36
      '</defs></svg>';  // > Initialization.svg:37
    container.innerHTML = svggradient;  // > Initialization.svg:38
    document.body.appendChild(container);  // > Initialization.svg:39
    //"url(#mygrandientyellow)"  // > Initialization.svg:40
    var container = document.createElement('div');  // > Initialization.svg:41
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:42
      '  <radialGradient id="mygrandientglint" cx="50%" cy="50%" r="90%" fx="90%" fy="10%">'+  // > Initialization.svg:43
      '    <stop offset="0%" style="stop-color:rgb(255,255,255); stop-opacity:0.5" />'+  // > Initialization.svg:44
      '    <stop offset="100%" style="stop-color:rgb(0,0,0);stop-opacity:0.5" />'+  // > Initialization.svg:45
      '  </radialGradient>'+  // > Initialization.svg:46
      '</defs></svg>';  // > Initialization.svg:47
    container.innerHTML = svggradient;  // > Initialization.svg:48
    document.body.appendChild(container);  // > Initialization.svg:49
    //"url(#mygrandientglint)"  // > Initialization.svg:50
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    //_view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    //_view.plottingPanel.getTitleY().setPosition([0.045,0]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["knobs"]) return;
    _view.vdivknob.setSize([0.2,0.4]);  // > Initialization.knobs:1
    _view.tdivknob.setSize([0.28,0.56]);  // > Initialization.knobs:2
    _view.xoffsetknob.setSize([0.23,0.46]);  // > Initialization.knobs:3
    _view.yoffsetknob.setSize([0.23,0.46]);  // > Initialization.knobs:4
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["FixRel Page"]) return;
    if(xtype[0]==="C*t+D"){  // > FixedRelations.FixRel Page:1
     C1=1/cc; // needed to allow remember  // > FixedRelations.FixRel Page:2
     //C1=C; // inject slider C  // > FixedRelations.FixRel Page:3
     D1=D; // inject slider D lookang dubug offset in graph  // > FixedRelations.FixRel Page:4
     xfun=_view._format(C1,"0.000")+"*t + "+_view._format(D1,"0.000");  // > FixedRelations.FixRel Page:5
     xfun2=xfun;  // > FixedRelations.FixRel Page:6
     tmin=D1-D1; // lookang substract back D1 to get correct Xoffset  // > FixedRelations.FixRel Page:7
     tmax=D1-D1+n*dx/C1;// lookang substract back D1 to get correct Xoffset  // > FixedRelations.FixRel Page:8
    }  // > FixedRelations.FixRel Page:9
    else if (xtype[0]==="A*sin(w*t+B)"){  // > FixedRelations.FixRel Page:10
      A1=A;  // > FixedRelations.FixRel Page:11
     // w1=w;  // > FixedRelations.FixRel Page:12
      B1=B*a2c;  // > FixedRelations.FixRel Page:13
     xfun=_view._format(A1,"0.0")+"*sin("+_view._format(w1,"0.0000")+"*t + "+_view._format(B1,"0.0")+")";  // > FixedRelations.FixRel Page:14
    // xfun2="("+xfun+")/(cc*4.0)+xmax2/2+D1";  // > FixedRelations.FixRel Page:15
    xfun2="("+xfun+")/( "+_view._format(cc,"0.00")+"*4.0)+"+_view._format(xmax2,"0")+"/2"+_view._format(D1,"0");  // > FixedRelations.FixRel Page:16
     tmin=0;  // > FixedRelations.FixRel Page:17
     tmax=20;  // > FixedRelations.FixRel Page:18
    }  // > FixedRelations.FixRel Page:19
    if(ytype[0]==="C*t+D"){  // > FixedRelations.FixRel Page:20
      C2=C; // inject slider C   // > FixedRelations.FixRel Page:21
      D2=D; // D  // > FixedRelations.FixRel Page:22
     yfun=_view._format(C2,"0.0")+"*t + "+_view._format(D2,"0.0");  // > FixedRelations.FixRel Page:23
    }  // > FixedRelations.FixRel Page:24
    else if(ytype[0]==="A*sin(w*t+B)"){  // > FixedRelations.FixRel Page:25
      A2=A;  // > FixedRelations.FixRel Page:26
     // w2=w; //does not work here adding on slider itself  // > FixedRelations.FixRel Page:27
       B2=B*a2c;  // > FixedRelations.FixRel Page:28
       yfun=_view._format(A2,"0.0")+"*sin("+_view._format(w2,"0.0000")+"*t + "+_view._format(B2,"0.0")+") ";  // > FixedRelations.FixRel Page:29
     //yfun=dvalue(A2)+"*sin("+dvalue(w2)+"*t + "+dvalue(B2)+") "+dvalue(v0);  // > FixedRelations.FixRel Page:30
    }  // > FixedRelations.FixRel Page:31
    title="X(t) = "+xfun+",\nY(t) = "+yfun+ "\n t ="+t.toFixed(2)+ "s";  // > FixedRelations.FixRel Page:32
    title2="X2(t) = "+xfun2+",\n       Y2(t) = "+yfun2;  // > FixedRelations.FixRel Page:33
    //titleclever = "X(t) = "+xfun+",\n;  // > FixedRelations.FixRel Page:34
    s1=_view._format(cc,"0.00")+"";  // > FixedRelations.FixRel Page:35
    s2=_view._format(vdiv,"0.00")+"";  // > FixedRelations.FixRel Page:36
    s3=_view._format(D1,"0.00")+"";  // > FixedRelations.FixRel Page:37
    s4=_view._format(v0,"0.00")+"";  // > FixedRelations.FixRel Page:38
    // yfun2="("+yfun+")/vdiv+v0";  // > FixedRelations.FixRel Page:39
    //yfun2="("+yfun+")/"+_view._format(vdiv*dy,"0.00")+ "+" + _view._format(v0,"0.00");  // > FixedRelations.FixRel Page:40
    // yfun2="("+yfun+")+"+  _view._format(v0,"0.00"); // corrected  yoffset  // > FixedRelations.FixRel Page:41
    yfun2="("+yfun+")/"+_view._format(vdiv,"0.00")+"*"+ _view._format(dy,"0.00")+ "+"+ _view._format(v0,"0.00"); //used by green oscilliscope dot  // > FixedRelations.FixRel Page:42
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["osciliiscope"]) return;
    xosciloscope=_view.fosciloscopex.evaluate({ t : t, x : xosciloscope });   // > FixedRelations.osciliiscope:1
    //yosciloscope=_view.fosciloscope.evaluate({ t : t, y : yosciloscope });   // > FixedRelations.osciliiscope:2
    yosciloscope=_view.fosciloscope.evaluate({ t : t, y : yosciloscope });   // > FixedRelations.osciliiscope:3
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["model"]) return;
    ymodel=_view.fField.evaluate({ t : t, y : ymodel });   // > FixedRelations.model:1
    //xmodel=_view.fField.evaluate({ t : t, x : xmodel });   // > FixedRelations.model:2
    //if (C*t+D>xmax){  // > FixedRelations.model:3
     // _paused();  // > FixedRelations.model:4
     // text= "Paused";  // > FixedRelations.model:5
        // > FixedRelations.model:6
     // }  // > FixedRelations.model:7
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var t = _aState[__cOut++];
        return t-160;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        t = 0;  // > Event action for page Evol Page:1
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new oscilloscopewee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.topPanel.linkProperty("Height",  function() { return changeOrientation(); }, function(_v) { changeOrientation() = _v; } ); // HtmlView Page linking property 'Height' for element 'topPanel'
          _view.drawingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'drawingPanel'
          _view.drawingPanel.linkProperty("BRMessage",  function() { return print?"":title; } ); // HtmlView Page linking property 'BRMessage' for element 'drawingPanel'
          _view.yoffsetknob.linkProperty("AngleForMinimum",  function() { return 5*pi/4; } ); // HtmlView Page linking property 'AngleForMinimum' for element 'yoffsetknob'
          _view.yoffsetknob.linkProperty("Value",  function() { return v0; }, function(_v) { v0 = _v; } ); // HtmlView Page linking property 'Value' for element 'yoffsetknob'
          _view.yoffsetknob.setAction("OnChange", function(_data,_info) {
  v0=Math.round(v0);

}); // HtmlView Page setting action 'OnChange' for element 'yoffsetknob'
          _view.yoffsetT.linkProperty("Text",  function() { return "Y-offset= "+v0.toFixed(0); } ); // HtmlView Page linking property 'Text' for element 'yoffsetT'
          _view.xoffsetknob.linkProperty("AngleForMinimum",  function() { return 5*pi/4; } ); // HtmlView Page linking property 'AngleForMinimum' for element 'xoffsetknob'
          _view.xoffsetknob.linkProperty("Value",  function() { return D1; }, function(_v) { D1 = _v; } ); // HtmlView Page linking property 'Value' for element 'xoffsetknob'
          _view.xoffsetknob.setAction("OnChange", function(_data,_info) {
  if(_view.comboBox.getProperty("SelectedOptions")=="X=")D=D1=Math.round(D1);
  //_initialize();

}); // HtmlView Page setting action 'OnChange' for element 'xoffsetknob'
          _view.xoffsetT.linkProperty("Text",  function() { return "X-offset= "+D1.toFixed(0); } ); // HtmlView Page linking property 'Text' for element 'xoffsetT'
          _view.tdivknob.linkProperty("AngleForMinimum",  function() { return 5*pi/4; } ); // HtmlView Page linking property 'AngleForMinimum' for element 'tdivknob'
          _view.tdivknob.linkProperty("Value",  function() { return cc; }, function(_v) { cc = _v; } ); // HtmlView Page linking property 'Value' for element 'tdivknob'
          _view.tdivknob.setAction("OnChange", function(_data,_info) {
  C1=1.0/cc;
  if(_view.comboBox.getProperty("SelectedOptions")=="X=")C=1.0/cc;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'tdivknob'
          _view.tdivT.linkProperty("Text",  function() { return "T-div= "+cc.toFixed(2); } ); // HtmlView Page linking property 'Text' for element 'tdivT'
          _view.vdivknob.linkProperty("AngleForMinimum",  function() { return 5*pi/4; } ); // HtmlView Page linking property 'AngleForMinimum' for element 'vdivknob'
          _view.vdivknob.linkProperty("Value",  function() { return vdiv; }, function(_v) { vdiv = _v; } ); // HtmlView Page linking property 'Value' for element 'vdivknob'
          _view.vdivknob.setAction("OnChange", function(_data,_info) {
  vdiv=Math.round(vdiv);

}); // HtmlView Page setting action 'OnChange' for element 'vdivknob'
          _view.vdivT.linkProperty("Text",  function() { return "V-div= "+vdiv.toFixed(0); } ); // HtmlView Page linking property 'Text' for element 'vdivT'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("XTickStep",  function() { return (xmax2-xmin2)/(n-1); } ); // HtmlView Page linking property 'XTickStep' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("YTickStep",  function() { return (ymax2-ymin2)/(n-1); } ); // HtmlView Page linking property 'YTickStep' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return print?"":text; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax2; }, function(_v) { xmax2 = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin2; }, function(_v) { xmin2 = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.unseencentral.linkProperty("FunctionY",  function() { return yfun; }, function(_v) { yfun = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'unseencentral'
          _view.unseencentral.linkProperty("FunctionX",  function() { return xfun; }, function(_v) { xfun = _v; } ); // HtmlView Page linking property 'FunctionX' for element 'unseencentral'
          _view.unseencentral.linkProperty("NumPoints",  function() { return npt; }, function(_v) { npt = _v; } ); // HtmlView Page linking property 'NumPoints' for element 'unseencentral'
          _view.unseencentral.linkProperty("Minimum",  function() { return tmin; }, function(_v) { tmin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'unseencentral'
          _view.unseencentral.linkProperty("Maximum",  function() { return tmax; }, function(_v) { tmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'unseencentral'
          _view.unseencentral.linkProperty("X",  function() { return xmin2; }, function(_v) { xmin2 = _v; } ); // HtmlView Page linking property 'X' for element 'unseencentral'
          _view.unseencentral.setAction("OnError", _println); // HtmlView Page setting action 'OnError' for element 'unseencentral'
          _view.yosciloscope2.linkProperty("X",  function() { return xosciloscope; }, function(_v) { xosciloscope = _v; } ); // HtmlView Page linking property 'X' for element 'yosciloscope2'
          _view.yosciloscope2.linkProperty("Y",  function() { return yosciloscope; }, function(_v) { yosciloscope = _v; } ); // HtmlView Page linking property 'Y' for element 'yosciloscope2'
          _view.yosciloscope2.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'yosciloscope2'
          _view.yosciloscope.linkProperty("X",  function() { return C*t+D; } ); // HtmlView Page linking property 'X' for element 'yosciloscope'
          _view.yosciloscope.linkProperty("Y",  function() { return yosciloscope; }, function(_v) { yosciloscope = _v; } ); // HtmlView Page linking property 'Y' for element 'yosciloscope'
          _view.yosciloscope.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'yosciloscope'
          _view.segmentSetx.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSetx'
          _view.segmentSetx.linkProperty("X",  function() { return xp; }, function(_v) { xp = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSetx'
          _view.segmentSetx.linkProperty("Y",  function() { return ymin2; }, function(_v) { ymin2 = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSetx'
          _view.segmentSetx.linkProperty("SizeY",  function() { return ymax2-ymin2; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSetx'
          _view.segmentSety.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSety'
          _view.segmentSety.linkProperty("SizeX",  function() { return xmax2-xmin2; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSety'
          _view.segmentSety.linkProperty("X",  function() { return xmin2; }, function(_v) { xmin2 = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSety'
          _view.segmentSety.linkProperty("Y",  function() { return yp; }, function(_v) { yp = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSety'
          _view.segmentSetx2.linkProperty("NumberOfElements",  function() { return n2; }, function(_v) { n2 = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSetx2'
          _view.segmentSetx2.linkProperty("X",  function() { return xp2; }, function(_v) { xp2 = _v; } ); // HtmlView Page linking property 'X' for element 'segmentSetx2'
          _view.segmentSetx2.linkProperty("Y",  function() { return -dx2/2; } ); // HtmlView Page linking property 'Y' for element 'segmentSetx2'
          _view.segmentSetx2.linkProperty("SizeY",  function() { return dx2; }, function(_v) { dx2 = _v; } ); // HtmlView Page linking property 'SizeY' for element 'segmentSetx2'
          _view.segmentSetx22.linkProperty("NumberOfElements",  function() { return n2; }, function(_v) { n2 = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'segmentSetx22'
          _view.segmentSetx22.linkProperty("SizeX",  function() { return dy2; }, function(_v) { dy2 = _v; } ); // HtmlView Page linking property 'SizeX' for element 'segmentSetx22'
          _view.segmentSetx22.linkProperty("X",  function() { return 5*dx-dy2/2; } ); // HtmlView Page linking property 'X' for element 'segmentSetx22'
          _view.segmentSetx22.linkProperty("Y",  function() { return yp2; }, function(_v) { yp2 = _v; } ); // HtmlView Page linking property 'Y' for element 'segmentSetx22'
          _view.analyticCurve22.linkProperty("FunctionY",  function() { return yfun2; }, function(_v) { yfun2 = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurve22'
          _view.analyticCurve22.linkProperty("FunctionX",  function() { return xfun2; }, function(_v) { xfun2 = _v; } ); // HtmlView Page linking property 'FunctionX' for element 'analyticCurve22'
          _view.analyticCurve22.linkProperty("Minimum",  function() { return tmin; }, function(_v) { tmin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'analyticCurve22'
          _view.analyticCurve22.linkProperty("Maximum",  function() { return tmax; }, function(_v) { tmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'analyticCurve22'
          _view.analyticCurve22.setAction("OnError", function(_data,_info) {
  text="error";

}); // HtmlView Page setting action 'OnError' for element 'analyticCurve22'
          _view.analyticCurve2.linkProperty("FunctionY",  function() { return yfun2; }, function(_v) { yfun2 = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'analyticCurve2'
          _view.analyticCurve2.linkProperty("FunctionX",  function() { return xfun2; }, function(_v) { xfun2 = _v; } ); // HtmlView Page linking property 'FunctionX' for element 'analyticCurve2'
          _view.analyticCurve2.linkProperty("Minimum",  function() { return tmin; }, function(_v) { tmin = _v; } ); // HtmlView Page linking property 'Minimum' for element 'analyticCurve2'
          _view.analyticCurve2.linkProperty("Maximum",  function() { return tmax; }, function(_v) { tmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'analyticCurve2'
          _view.xoffset.linkProperty("X",  function() { return D; }, function(_v) { D = _v; } ); // HtmlView Page linking property 'X' for element 'xoffset'
          _view.xoffset.linkProperty("SizeY",  function() { return ymax2-ymin2; } ); // HtmlView Page linking property 'SizeY' for element 'xoffset'
          _view.yoffset.linkProperty("SizeX",  function() { return xmax-xmin; } ); // HtmlView Page linking property 'SizeX' for element 'yoffset'
          _view.yoffset.linkProperty("Y",  function() { return v0; }, function(_v) { v0 = _v; } ); // HtmlView Page linking property 'Y' for element 'yoffset'
          _view.model.linkProperty("FunctionY",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'FunctionY' for element 'model'
          _view.model.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model'
          _view.model2.linkProperty("X",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'X' for element 'model2'
          _view.model2.linkProperty("Y",  function() { return ymodel; }, function(_v) { ymodel = _v; } ); // HtmlView Page linking property 'Y' for element 'model2'
          _view.model2.linkProperty("Visibility",  function() { return showmodel; }, function(_v) { showmodel = _v; } ); // HtmlView Page linking property 'Visibility' for element 'model2'
          _view.model2.setAction("OnDrag", _initialize); // HtmlView Page setting action 'OnDrag' for element 'model2'
          _view.controlPanel.linkProperty("Visibility",  function() { return !_isMobile; } ); // HtmlView Page linking property 'Visibility' for element 'controlPanel'
          _view.v02.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'v02'
          _view.v02.linkProperty("Maximum",  function() { return ymax2; }, function(_v) { ymax2 = _v; } ); // HtmlView Page linking property 'Maximum' for element 'v02'
          _view.v02.linkProperty("Minimum",  function() { return ymin2; }, function(_v) { ymin2 = _v; } ); // HtmlView Page linking property 'Minimum' for element 'v02'
          _view.v02.linkProperty("Value",  function() { return v0; }, function(_v) { v0 = _v; } ); // HtmlView Page linking property 'Value' for element 'v02'
          _view.v03.linkProperty("Value",  function() { return v0; }, function(_v) { v0 = _v; } ); // HtmlView Page linking property 'Value' for element 'v03'
          _view.v03.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'v03'
          _view.vdiv2.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'vdiv2'
          _view.vdiv2.linkProperty("Value",  function() { return vdiv; }, function(_v) { vdiv = _v; } ); // HtmlView Page linking property 'Value' for element 'vdiv2'
          _view.vdiv2.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'vdiv2'
          _view.vdiv3.linkProperty("Value",  function() { return vdiv; }, function(_v) { vdiv = _v; } ); // HtmlView Page linking property 'Value' for element 'vdiv3'
          _view.vdiv3.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'vdiv3'
          _view.D12.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'D12'
          _view.D12.linkProperty("Value",  function() { return D1; }, function(_v) { D1 = _v; } ); // HtmlView Page linking property 'Value' for element 'D12'
          _view.D12.setAction("OnChange", function(_data,_info) {
  if(_view.comboBox.getProperty("SelectedOptions")=="X=")D=D1;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'D12'
          _view.D13.linkProperty("Value",  function() { return D1; }, function(_v) { D1 = _v; } ); // HtmlView Page linking property 'Value' for element 'D13'
          _view.D13.setAction("OnChange", function(_data,_info) {
  if(_view.comboBox.getProperty("SelectedOptions")=="X=")D=D1;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'D13'
          _view.cc2.linkProperty("Width",  function() { return (_isEPub)?"0":""; } ); // HtmlView Page linking property 'Width' for element 'cc2'
          _view.cc2.linkProperty("Value",  function() { return cc; }, function(_v) { cc = _v; } ); // HtmlView Page linking property 'Value' for element 'cc2'
          _view.cc2.setAction("OnChange", function(_data,_info) {
  C1=1.0/cc;
  if(_view.comboBox.getProperty("SelectedOptions")=="X=")C=1.0/cc;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'cc2'
          _view.cc3.linkProperty("Value",  function() { return cc; }, function(_v) { cc = _v; } ); // HtmlView Page linking property 'Value' for element 'cc3'
          _view.cc3.setAction("OnChange", function(_data,_info) {
  C1=1.0/cc;
  if(_view.comboBox.getProperty("SelectedOptions")=="X=")C=1.0/cc;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'cc3'
          _view.fosciloscopex.linkProperty("Value",  function() { return xfun2; }, function(_v) { xfun2 = _v; } ); // HtmlView Page linking property 'Value' for element 'fosciloscopex'
          _view.fosciloscopex.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fosciloscopex'
          _view.fosciloscope.linkProperty("Value",  function() { return yfun2; }, function(_v) { yfun2 = _v; } ); // HtmlView Page linking property 'Value' for element 'fosciloscope'
          _view.fosciloscope.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fosciloscope'
          _view.bottom.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'bottom'
          _view.bottom.linkProperty("Display",  function() { return print?"none":"inline-flex"; } ); // HtmlView Page linking property 'Display' for element 'bottom'
          _view.expertselect.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'expertselect'
          _view.expertselect.linkProperty("Display",  function() { return print?"none":"inline-flex"; } ); // HtmlView Page linking property 'Display' for element 'expertselect'
          _view.checkBox.linkProperty("Checked",  function() { return expertshow; }, function(_v) { expertshow = _v; } ); // HtmlView Page linking property 'Checked' for element 'checkBox'
          _view.comboBox.linkProperty("Options",  function() { return ["X=","Y="]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option 
  if(option=="X=")type=xtype;
  else if(option=="Y=")type=ytype;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.comboBox.linkProperty("Display",  function() { return expertshow?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'comboBox'
          _view.type.linkProperty("Options",  function() { return ["A*sin(w*t+B)","C*t+D"]; } ); // HtmlView Page linking property 'Options' for element 'type'
          _view.type.setAction("OnChange", function(_data,_info) {
  //["A*sin(w*t+B)","C*t+D"]
  if (type=="A*sin(w*t+B)"){
    showasinwtb=true;
    showctd=false;
    }
    else if (type=="C*t+D"){
    showasinwtb=false;
    showctd=true;
    }
  if(_view.comboBox.getProperty("SelectedOptions")=="X="){
    
    xtype=type;
    }
  else if(_view.comboBox.getProperty("SelectedOptions")=="Y="){
    ytype=type;
    }
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'type'
          _view.type.linkProperty("SelectedOptions",  function() { return type; }, function(_v) { type = _v; } ); // HtmlView Page linking property 'SelectedOptions' for element 'type'
          _view.type.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'type'
          _view.type.linkProperty("Display",  function() { return expertshow?"inline":"none"; } ); // HtmlView Page linking property 'Display' for element 'type'
          _view.expert.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'expert'
          _view.expert.linkProperty("Display",  function() { return expertshow?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'expert'
          _view.ct_d.linkProperty("Display",  function() { return _view.type.getProperty("SelectedOptions")=="C*t+D"?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'ct_d'
          _view.C2.linkProperty("Maximum",  function() { return cmax; }, function(_v) { cmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'C2'
          _view.C2.linkProperty("Value",  function() { return C; }, function(_v) { C = _v; } ); // HtmlView Page linking property 'Value' for element 'C2'
          _view.C2.setAction("OnChange", function(_data,_info) {
  //if(xtype[0]==="C*t+D")C1=C;
  //if(ytype[0]==="C*t+D")C2=C;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'C2'
          _view.C2.linkProperty("Display",  function() { return !_isMobile?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'C2'
          _view.C3.linkProperty("Value",  function() { return C; }, function(_v) { C = _v; } ); // HtmlView Page linking property 'Value' for element 'C3'
          _view.C3.setAction("OnChange", function(_data,_info) {
  // werid this doesnot work, moved to fixed relationship
  //if(xtype[0]==="C*t+D")C1=C;
  //if(ytype[0]==="C*t+D")C2=C;
  if (C<0.05)C=0.05;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'C3'
          _view.D2.linkProperty("Maximum",  function() { return dx*5*cc; } ); // HtmlView Page linking property 'Maximum' for element 'D2'
          _view.D2.linkProperty("Value",  function() { return D; }, function(_v) { D = _v; } ); // HtmlView Page linking property 'Value' for element 'D2'
          _view.D2.setAction("OnChange", function(_data,_info) {
  if(xtype[0]==="C*t+D")D1=D;
  if(ytype[0]==="C*t+D")D2=D;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'D2'
          _view.D2.linkProperty("Display",  function() { return !_isMobile?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'D2'
          _view.D3.linkProperty("Value",  function() { return D; }, function(_v) { D = _v; } ); // HtmlView Page linking property 'Value' for element 'D3'
          _view.D3.setAction("OnChange", function(_data,_info) {
  if(xtype[0]==="C*t+D")D1=D;
  if(ytype[0]==="C*t+D")D2=D;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'D3'
          _view.a_wt_phi_.linkProperty("Display",  function() { return _view.type.getProperty("SelectedOptions")=="A*sin(w*t+B)"?"inline-flex":"none"; } ); // HtmlView Page linking property 'Display' for element 'a_wt_phi_'
          _view.A2.linkProperty("Maximum",  function() { return amax; }, function(_v) { amax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'A2'
          _view.A2.linkProperty("Value",  function() { return A; }, function(_v) { A = _v; } ); // HtmlView Page linking property 'Value' for element 'A2'
          _view.A2.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'A2'
          _view.A2.linkProperty("Display",  function() { return !_isMobile?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'A2'
          _view.A3.linkProperty("Value",  function() { return A; }, function(_v) { A = _v; } ); // HtmlView Page linking property 'Value' for element 'A3'
          _view.A3.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'A3'
          _view.w2.linkProperty("Value",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'Value' for element 'w2'
          _view.w2.setAction("OnChange", function(_data,_info) {
  if(_view.comboBox.getProperty("SelectedOptions")=="X="&&xtype[0]==="A*sin(w*t+B)")w1=w;
  if(_view.comboBox.getProperty("SelectedOptions")=="Y="&&ytype[0]==="A*sin(w*t+B)")w2=w;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'w2'
          _view.w2.linkProperty("Display",  function() { return !_isMobile?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'w2'
          _view.w3.linkProperty("Value",  function() { return w; }, function(_v) { w = _v; } ); // HtmlView Page linking property 'Value' for element 'w3'
          _view.w3.setAction("OnChange", function(_data,_info) {
  if(_view.comboBox.getProperty("SelectedOptions")=="X="&&xtype[0]==="A*sin(w*t+B)")w1=w;
  if(_view.comboBox.getProperty("SelectedOptions")=="Y="&&ytype[0]==="A*sin(w*t+B)")w2=w;
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'w3'
          _view.B2.linkProperty("Maximum",  function() { return bmax; }, function(_v) { bmax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'B2'
          _view.B2.linkProperty("Value",  function() { return B; }, function(_v) { B = _v; } ); // HtmlView Page linking property 'Value' for element 'B2'
          _view.B2.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'B2'
          _view.B2.linkProperty("Display",  function() { return !_isMobile?"inline-block":"none"; } ); // HtmlView Page linking property 'Display' for element 'B2'
          _view.B3.linkProperty("Value",  function() { return B; }, function(_v) { B = _v; } ); // HtmlView Page linking property 'Value' for element 'B3'
          _view.B3.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'B3'
          _view.model4.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'model4'
          _view.model3.setAction("OnCheckOff", function(_data,_info) {
  showmodel=false;

}); // HtmlView Page setting action 'OnCheckOff' for element 'model3'
          _view.model3.setAction("OnCheckOn", function(_data,_info) {
  showmodel=true;

}); // HtmlView Page setting action 'OnCheckOn' for element 'model3'
          _view.fField.linkProperty("Value",  function() { return functionY; }, function(_v) { functionY = _v; } ); // HtmlView Page linking property 'Value' for element 'fField'
          _view.fField.setAction("OnChange", _initialize); // HtmlView Page setting action 'OnChange' for element 'fField'
          _view.fField.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'fField'
          _view.control.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'control'
          _view.playPauseButton.setAction("OffClick", function(_data,_info) {
  _pause();
  text = " Paused";

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", function(_data,_info) {
  _play();
  text = " Playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.resetButton.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton'
          _view.print.linkProperty("Checked",  function() { return print; }, function(_v) { print = _v; } ); // HtmlView Page linking property 'Checked' for element 'print'
          _view.print.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'print'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function oscilloscopewee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = oscilloscopewee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function oscilloscopewee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'topPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.drawingPanel,"drawingPanel", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'drawingPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'drawingPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'drawingPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0px",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'drawingPanel'
      .setProperty("ShowAreaRectangle",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'drawingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'drawingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.image,"image", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'image'
      .setProperty("SizeX",1.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'image'
      .setProperty("Position",[0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Position' for element 'image'
      .setProperty("ImageUrl","./800px-Tektronix_465_Oscilloscope_croppedsmall.jpg") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'image'
      .setProperty("SizeY",1.8) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'image'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"knobPanel", _view.drawingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'knobPanel'
      .setProperty("Y",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'knobPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"yoffsetgroup", _view.knobPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yoffsetgroup'
      .setProperty("X",-0.755) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yoffsetgroup'
      .setProperty("Y",-0.77) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'yoffsetgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.knob,"yoffsetknob", _view.yoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'yoffsetknob'
      .setProperty("Brand","") // EJsS HtmlView.HtmlView Page: setting property 'Brand' for element 'yoffsetknob'
      .setProperty("Minimum",-90) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'yoffsetknob'
      .setProperty("Maximum",90) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'yoffsetknob'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yoffsetknob'
      .setProperty("AngleForMaximum",0) // EJsS HtmlView.HtmlView Page: setting property 'AngleForMaximum' for element 'yoffsetknob'
      .setProperty("Units","y-offset") // EJsS HtmlView.HtmlView Page: setting property 'Units' for element 'yoffsetknob'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"yoffsetcolour", _view.yoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'yoffsetcolour'
      .setProperty("FillColor","url(#mygrandientblue)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yoffsetcolour'
      .setProperty("SizeX",0.23) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yoffsetcolour'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'yoffsetcolour'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'yoffsetcolour'
      .setProperty("SizeY",0.46) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yoffsetcolour'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"yoffsetglint", _view.yoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'yoffsetglint'
      .setProperty("FillColor","url(#mygrandientglint)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yoffsetglint'
      .setProperty("SizeX",0.23) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yoffsetglint'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'yoffsetglint'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'yoffsetglint'
      .setProperty("SizeY",0.46) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yoffsetglint'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"yoffsetT", _view.yoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'yoffsetT'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"xoffsetgroup", _view.knobPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xoffsetgroup'
      .setProperty("X",-0.76) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'xoffsetgroup'
      .setProperty("Y",0.245) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xoffsetgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.knob,"xoffsetknob", _view.xoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'xoffsetknob'
      .setProperty("Brand","") // EJsS HtmlView.HtmlView Page: setting property 'Brand' for element 'xoffsetknob'
      .setProperty("Minimum",-80) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'xoffsetknob'
      .setProperty("Maximum",80) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'xoffsetknob'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'xoffsetknob'
      .setProperty("AngleForMaximum",0) // EJsS HtmlView.HtmlView Page: setting property 'AngleForMaximum' for element 'xoffsetknob'
      .setProperty("Units","x-offset") // EJsS HtmlView.HtmlView Page: setting property 'Units' for element 'xoffsetknob'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"xoffsetcolour", _view.xoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'xoffsetcolour'
      .setProperty("FillColor","url(#mygrandientpink)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'xoffsetcolour'
      .setProperty("SizeX",0.23) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xoffsetcolour'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'xoffsetcolour'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'xoffsetcolour'
      .setProperty("SizeY",0.46) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xoffsetcolour'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"xoffsetglint", _view.xoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'xoffsetglint'
      .setProperty("FillColor","url(#mygrandientglint)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'xoffsetglint'
      .setProperty("SizeX",0.23) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xoffsetglint'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'xoffsetglint'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'xoffsetglint'
      .setProperty("SizeY",0.46) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'xoffsetglint'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"xoffsetT", _view.xoffsetgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'xoffsetT'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"tdivgroup", _view.knobPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tdivgroup'
      .setProperty("X",0.74) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'tdivgroup'
      .setProperty("Y",-0.125) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'tdivgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.knob,"tdivknob", _view.tdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'tdivknob'
      .setProperty("Brand","") // EJsS HtmlView.HtmlView Page: setting property 'Brand' for element 'tdivknob'
      .setProperty("Minimum",0.01) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'tdivknob'
      .setProperty("Maximum",1) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'tdivknob'
      .setProperty("AngleForMaximum",0) // EJsS HtmlView.HtmlView Page: setting property 'AngleForMaximum' for element 'tdivknob'
      .setProperty("Digits",2) // EJsS HtmlView.HtmlView Page: setting property 'Digits' for element 'tdivknob'
      .setProperty("Units","s/div") // EJsS HtmlView.HtmlView Page: setting property 'Units' for element 'tdivknob'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"tdivcolour", _view.tdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'tdivcolour'
      .setProperty("FillColor","url(#mygrandientred)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'tdivcolour'
      .setProperty("SizeX",0.28) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'tdivcolour'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'tdivcolour'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'tdivcolour'
      .setProperty("SizeY",0.56) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'tdivcolour'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"tdivglint", _view.tdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'tdivglint'
      .setProperty("FillColor","url(#mygrandientglint)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'tdivglint'
      .setProperty("SizeX",0.28) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'tdivglint'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'tdivglint'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'tdivglint'
      .setProperty("SizeY",0.56) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'tdivglint'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"tdivT", _view.tdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'tdivT'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"vdivgroup", _view.knobPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vdivgroup'
      .setProperty("X",0.645) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'vdivgroup'
      .setProperty("Y",0.495) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'vdivgroup'
      ;

    _view._addElement(EJSS_DRAWING2D.knob,"vdivknob", _view.vdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'vdivknob'
      .setProperty("Brand","") // EJsS HtmlView.HtmlView Page: setting property 'Brand' for element 'vdivknob'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'vdivknob'
      .setProperty("Maximum",99) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'vdivknob'
      .setProperty("FillColor","DarkGray") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'vdivknob'
      .setProperty("AngleForMaximum",0) // EJsS HtmlView.HtmlView Page: setting property 'AngleForMaximum' for element 'vdivknob'
      .setProperty("Units","V/div") // EJsS HtmlView.HtmlView Page: setting property 'Units' for element 'vdivknob'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Vdivcolour", _view.vdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'Vdivcolour'
      .setProperty("FillColor","url(#mygrandientyellow)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Vdivcolour'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Vdivcolour'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Vdivcolour'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Vdivcolour'
      .setProperty("SizeY",0.4) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Vdivcolour'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"Vdivglint", _view.vdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'Vdivglint'
      .setProperty("FillColor","url(#mygrandientglint)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Vdivglint'
      .setProperty("SizeX",0.2) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'Vdivglint'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Vdivglint'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'Vdivglint'
      .setProperty("SizeY",0.4) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'Vdivglint'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"vdivT", _view.vdivgroup) // EJsS HtmlView.HtmlView Page: declaration of element 'vdivT'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","70%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Width","44.3%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("ShowAreaRectangle",false) // EJsS HtmlView.HtmlView Page: setting property 'ShowAreaRectangle' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("XFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'XFixedTick' for element 'plottingPanel'
      .setProperty("AxisYFont","normal normal 0px ") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanel'
      .setProperty("YFixedTick",0) // EJsS HtmlView.HtmlView Page: setting property 'YFixedTick' for element 'plottingPanel'
      .setProperty("GridXLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridXLineColor' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "14.8%",    "left" : "27.2%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'plottingPanel'
      .setProperty("Background","none") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("GridYShow",true) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("GridYLineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'GridYLineColor' for element 'plottingPanel'
      .setProperty("AxisXFont","normal normal 0px ") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"unseencentral", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'unseencentral'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'unseencentral'
      .setProperty("LineColor","rgba(255,255,0,0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'unseencentral'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'unseencentral'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'unseencentral'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'unseencentral'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"yosciloscope2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yosciloscope2'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yosciloscope2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yosciloscope2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'yosciloscope2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yosciloscope2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'yosciloscope2'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'yosciloscope2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"yosciloscope", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yosciloscope'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'yosciloscope'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'yosciloscope'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'yosciloscope'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'yosciloscope'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yosciloscope'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'yosciloscope'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'yosciloscope'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSetx", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSetx'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'segmentSetx'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSetx'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'segmentSetx'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSetx'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSety", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSety'
      .setProperty("LineColor","Gray") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSety'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'segmentSety'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'segmentSety'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSety'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSetx2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSetx2'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'segmentSetx2'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSetx2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'segmentSetx2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSetx2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSetx22", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'segmentSetx22'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'segmentSetx22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'segmentSetx22'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'segmentSetx22'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'segmentSetx22'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve22", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve22'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve22'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurve22'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'analyticCurve22'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'analyticCurve22'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'analyticCurve22'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurve22'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"analyticCurve2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'analyticCurve2'
      .setProperty("NumPoints",10000) // EJsS HtmlView.HtmlView Page: setting property 'NumPoints' for element 'analyticCurve2'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'analyticCurve2'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'analyticCurve2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'analyticCurve2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'analyticCurve2'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'analyticCurve2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'analyticCurve2'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"xoffset", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'xoffset'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'xoffset'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'xoffset'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'xoffset'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'xoffset'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'xoffset'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'xoffset'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'xoffset'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"yoffset", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'yoffset'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'yoffset'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'yoffset'
      .setProperty("Attributes",{ "stroke-dasharray":"8 8 8 8" }) // EJsS HtmlView.HtmlView Page: setting property 'Attributes' for element 'yoffset'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'yoffset'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'yoffset'
      .setProperty("EnabledPosition","ENABLED_Y") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'yoffset'
      ;

    _view._addElement(EJSS_DRAWING2D.analyticCurve,"model", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'model'
      .setProperty("FunctionX","t") // EJsS HtmlView.HtmlView Page: setting property 'FunctionX' for element 'model'
      .setProperty("Variable","t") // EJsS HtmlView.HtmlView Page: setting property 'Variable' for element 'model'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'model'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'model'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'model'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'model'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"model2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'model2'
      .setProperty("FillColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'model2'
      .setProperty("SizeX",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'model2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'model2'
      .setProperty("SizeY",10) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'model2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'model2'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'model2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "100%",    "margin-left" : "0%",    "left" : "0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"v0", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'v0'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'v0'
      .setProperty("Tooltip","Offset in Y axis or also V0") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'v0'
      .setProperty("Text","Yoffset=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'v0'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"v02", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'v02'
      .setProperty("Background","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'v02'
      .setProperty("Tooltip","Offset in Y axis") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'v02'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'v02'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"v03", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'v03'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'v03'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'v03'
      .setProperty("Tooltip","Offset in Y axis") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'v03'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"vdiv", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vdiv'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vdiv'
      .setProperty("Tooltip"," Volt per Division") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vdiv'
      .setProperty("Text","V/div=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'vdiv'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"vdiv2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vdiv2'
      .setProperty("Maximum",100) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'vdiv2'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'vdiv2'
      .setProperty("Background","Red") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'vdiv2'
      .setProperty("Tooltip"," Volt per Division") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vdiv2'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'vdiv2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"vdiv3", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'vdiv3'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'vdiv3'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'vdiv3'
      .setProperty("Tooltip"," Volt per Division") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'vdiv3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"D1", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'D1'
      .setProperty("Background","Pink") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'D1'
      .setProperty("Tooltip","Offset in X axis") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'D1'
      .setProperty("Text","Xoffset=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'D1'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"D12", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'D12'
      .setProperty("Maximum",80) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'D12'
      .setProperty("Minimum",-80) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'D12'
      .setProperty("Background","Pink") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'D12'
      .setProperty("Tooltip","Offset in X axis") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'D12'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'D12'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"D13", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'D13'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'D13'
      .setProperty("Format","0.0") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'D13'
      .setProperty("Tooltip"," Volt per Division") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'D13'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"cc", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cc'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'cc'
      .setProperty("Tooltip","time per division") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'cc'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'cc'
      .setProperty("Text","t/div=") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'cc'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"cc2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cc2'
      .setProperty("Maximum",0.25) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'cc2'
      .setProperty("Minimum",0.01) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'cc2'
      .setProperty("Background","Blue") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'cc2'
      .setProperty("Tooltip","time per division") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'cc2'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'cc2'
      .setProperty("Step",0.01) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'cc2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"cc3", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'cc3'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'cc3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'cc3'
      .setProperty("Tooltip","time per division") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'cc3'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"hiddenbutusing", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'hiddenbutusing'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fosciloscopex", _view.hiddenbutusing) // EJsS HtmlView.HtmlView Page: declaration of element 'fosciloscopex'
      .setProperty("Width",0) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fosciloscopex'
      .setProperty("Tooltip","green function") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fosciloscopex'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'fosciloscopex'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fosciloscope", _view.hiddenbutusing) // EJsS HtmlView.HtmlView Page: declaration of element 'fosciloscope'
      .setProperty("Width",0) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fosciloscope'
      .setProperty("Tooltip","green function") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fosciloscope'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'fosciloscope'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottom", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottom'
      .setProperty("Height","6vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'bottom'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left" : "0%",    "left" : "0%",    "display":"inline-flex" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottom'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"expertselect", _view.bottom) // EJsS HtmlView.HtmlView Page: declaration of element 'expertselect'
      .setProperty("Height","7vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'expertselect'
      .setProperty("Background","Orange") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'expertselect'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"checkBox", _view.expertselect) // EJsS HtmlView.HtmlView Page: declaration of element 'checkBox'
      .setProperty("Tooltip","change inputs") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'checkBox'
      .setProperty("Text","change inputs") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'checkBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.expertselect) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"type", _view.expertselect) // EJsS HtmlView.HtmlView Page: declaration of element 'type'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'type'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"expert", _view.bottom) // EJsS HtmlView.HtmlView Page: declaration of element 'expert'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"ct_d", _view.expert) // EJsS HtmlView.HtmlView Page: declaration of element 'ct_d'
      .setProperty("Height","4vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'ct_d'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"C", _view.ct_d) // EJsS HtmlView.HtmlView Page: declaration of element 'C'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'C'
      .setProperty("Tooltip","C*t+D") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'C'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'C'
      .setProperty("Text"," C = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'C'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"C2", _view.ct_d) // EJsS HtmlView.HtmlView Page: declaration of element 'C2'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'C2'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'C2'
      .setProperty("Tooltip","C*t+D") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'C2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"C3", _view.ct_d) // EJsS HtmlView.HtmlView Page: declaration of element 'C3'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'C3'
      .setProperty("Format","0.0000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'C3'
      .setProperty("Tooltip","C*t+D") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'C3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"D", _view.ct_d) // EJsS HtmlView.HtmlView Page: declaration of element 'D'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'D'
      .setProperty("Tooltip","C*t+D") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'D'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'D'
      .setProperty("Text"," D = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'D'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"D2", _view.ct_d) // EJsS HtmlView.HtmlView Page: declaration of element 'D2'
      .setProperty("Minimum",0.0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'D2'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'D2'
      .setProperty("Tooltip","C*t+D") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'D2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"D3", _view.ct_d) // EJsS HtmlView.HtmlView Page: declaration of element 'D3'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'D3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'D3'
      .setProperty("Tooltip","C*t+D") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'D3'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"a_wt_phi_", _view.expert) // EJsS HtmlView.HtmlView Page: declaration of element 'a_wt_phi_'
      .setProperty("Height","4vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'a_wt_phi_'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"A", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'A'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'A'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'A'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'A'
      .setProperty("Text"," A = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'A'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"A2", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'A2'
      .setProperty("Width","6vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'A2'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'A2'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'A2'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'A2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"A3", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'A3'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'A3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'A3'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'A3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"w", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'w'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'w'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'w'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'w'
      .setProperty("Text"," w = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'w'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"w2", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'w2'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'w2'
      .setProperty("Maximum",6.0) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'w2'
      .setProperty("Minimum",0.1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'w2'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'w2'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'w2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"w3", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'w3'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'w3'
      .setProperty("Format","0.0000") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'w3'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'w3'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"B", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'B'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'B'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'B'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'B'
      .setProperty("Text"," B = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'B'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"B2", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'B2'
      .setProperty("Width","5vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'B2'
      .setProperty("Minimum",0) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'B2'
      .setProperty("Background","Gray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'B2'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'B2'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"B3", _view.a_wt_phi_) // EJsS HtmlView.HtmlView Page: declaration of element 'B3'
      .setProperty("Width",30) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'B3'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'B3'
      .setProperty("Tooltip","A*sin(w*t+B)") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'B3'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"model4", _view.bottom) // EJsS HtmlView.HtmlView Page: declaration of element 'model4'
      .setProperty("Height","6vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'model4'
      .setProperty("CSS",{"display":"inline"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'model4'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"model3", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'model3'
      .setProperty("Height","3vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'model3'
      .setProperty("Background","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'model3'
      .setProperty("Tooltip","show model") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'model3'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"fField", _view.model4) // EJsS HtmlView.HtmlView Page: declaration of element 'fField'
      .setProperty("Height","6vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'fField'
      .setProperty("Width","10vw") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'fField'
      .setProperty("Tooltip","green function") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'fField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"control", _view.bottom) // EJsS HtmlView.HtmlView Page: declaration of element 'control'
      .setProperty("Height","8vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'control'
      .setProperty("Display","inline-flex") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'control'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("Height","7vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'playPauseButton'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("Height","7vh") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'resetButton'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"print", _view.control) // EJsS HtmlView.HtmlView Page: declaration of element 'print'
      .setProperty("Text","print") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'print'
      .setProperty("Display","none") // EJsS HtmlView.HtmlView Page: setting property 'Display' for element 'print'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      Oscilloscope<br />
     <img alt="Logo" src="CRO/Screen Shot 2017-06-08 at 5.18.44 PM (2).png" />
      </p>
      <p>
      <img alt="author image" src="01authorfu-kwun.hwang.png" />
      <img alt="author image" src="01authorlooakng50x50.png" />
 Fu-Kwun Hwang - Dept. of Physics,National Taiwan normal Univ.; lookang
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2018, Fu-Kwun Hwang - Dept. of Physics,National Taiwan normal Univ.; lookang.</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="_ejs_library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new oscilloscopewee("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
